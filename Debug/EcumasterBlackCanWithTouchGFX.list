
EcumasterBlackCanWithTouchGFX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002428c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000040ec  0802445c  0802445c  0003445c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00003804  08028548  08028548  00038548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 ExtFlashSection 00001110  0802bd4c  0802bd4c  0003bd4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 000001b4  0802ce5c  0802ce5c  0003ce5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  0802d010  0802d010  000400fc  2**0
                  CONTENTS
  7 .ARM          00000008  0802d010  0802d010  0003d010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  0802d018  0802d018  000400fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000014  0802d018  0802d018  0003d018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  0802d02c  0802d02c  0003d02c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         000000fc  20000000  0802d034  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0000c8a0  200000fc  0802d130  000400fc  2**2
                  ALLOC
 13 ._user_heap_stack 00000604  2000c99c  0802d130  0004c99c  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  000400fc  2**0
                  CONTENTS, READONLY
 15 .debug_info   00058546  00000000  00000000  0004012c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 0000e3d6  00000000  00000000  00098672  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00003ff0  00000000  00000000  000a6a48  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00003a80  00000000  00000000  000aaa38  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  0003a97d  00000000  00000000  000ae4b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   0003f248  00000000  00000000  000e8e35  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    0012eb57  00000000  00000000  0012807d  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      000000fa  00000000  00000000  00256bd4  2**0
                  CONTENTS, READONLY
 23 .debug_frame  000113fc  00000000  00000000  00256cd0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000fc 	.word	0x200000fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08024444 	.word	0x08024444

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000100 	.word	0x20000100
 800020c:	08024444 	.word	0x08024444

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr

080005be <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80005be:	b480      	push	{r7}
 80005c0:	b083      	sub	sp, #12
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
 80005c6:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80005c8:	bf00      	nop
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
	...

080005e4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	4a07      	ldr	r2, [pc, #28]	; (8000610 <vApplicationGetIdleTaskMemory+0x2c>)
 80005f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	4a06      	ldr	r2, [pc, #24]	; (8000614 <vApplicationGetIdleTaskMemory+0x30>)
 80005fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2280      	movs	r2, #128	; 0x80
 8000600:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000602:	bf00      	nop
 8000604:	3714      	adds	r7, #20
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	20000118 	.word	0x20000118
 8000614:	20000170 	.word	0x20000170

08000618 <SecondTask>:
   float  lambda;
   float  lambda_trgt;
} display_values;

void SecondTask(void const* argument)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]

	for(;;)
	{
		display_values dispVals = {rpm, clt, map, lambda, lambda_targ};
 8000620:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <SecondTask+0x40>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	60fb      	str	r3, [r7, #12]
 8000626:	4b0d      	ldr	r3, [pc, #52]	; (800065c <SecondTask+0x44>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	613b      	str	r3, [r7, #16]
 800062c:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <SecondTask+0x48>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	617b      	str	r3, [r7, #20]
 8000632:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <SecondTask+0x4c>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	61bb      	str	r3, [r7, #24]
 8000638:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <SecondTask+0x50>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	61fb      	str	r3, [r7, #28]
	    xQueueSend(messageQ, &dispVals,0);
 800063e:	4b0b      	ldr	r3, [pc, #44]	; (800066c <SecondTask+0x54>)
 8000640:	6818      	ldr	r0, [r3, #0]
 8000642:	f107 010c 	add.w	r1, r7, #12
 8000646:	2300      	movs	r3, #0
 8000648:	2200      	movs	r2, #0
 800064a:	f00b fcb1 	bl	800bfb0 <xQueueGenericSend>
		osDelay(150);
 800064e:	2096      	movs	r0, #150	; 0x96
 8000650:	f00b f9c0 	bl	800b9d4 <osDelay>
	{
 8000654:	e7e4      	b.n	8000620 <SecondTask+0x8>
 8000656:	bf00      	nop
 8000658:	2000000c 	.word	0x2000000c
 800065c:	20000014 	.word	0x20000014
 8000660:	20000010 	.word	0x20000010
 8000664:	20000004 	.word	0x20000004
 8000668:	20000008 	.word	0x20000008
 800066c:	200085f8 	.word	0x200085f8

08000670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000670:	b5b0      	push	{r4, r5, r7, lr}
 8000672:	b08e      	sub	sp, #56	; 0x38
 8000674:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000676:	f002 fc48 	bl	8002f0a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067a:	f000 f85f 	bl	800073c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067e:	f001 f91b 	bl	80018b8 <MX_GPIO_Init>
  MX_ADC3_Init();
 8000682:	f000 f917 	bl	80008b4 <MX_ADC3_Init>
  MX_CRC_Init();
 8000686:	f000 fa53 	bl	8000b30 <MX_CRC_Init>
  MX_DCMI_Init();
 800068a:	f000 fa73 	bl	8000b74 <MX_DCMI_Init>
  MX_DMA2D_Init();
 800068e:	f000 faa5 	bl	8000bdc <MX_DMA2D_Init>
  MX_FMC_Init();
 8000692:	f001 f865 	bl	8001760 <MX_FMC_Init>
  MX_LTDC_Init();
 8000696:	f000 fad3 	bl	8000c40 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 800069a:	f000 fb53 	bl	8000d44 <MX_QUADSPI_Init>
  MX_RTC_Init();
 800069e:	f000 fb7d 	bl	8000d9c <MX_RTC_Init>
  MX_SAI2_Init();
 80006a2:	f000 fc23 	bl	8000eec <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 80006a6:	f000 fcc9 	bl	800103c <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 80006aa:	f000 fce7 	bl	800107c <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 80006ae:	f000 fd15 	bl	80010dc <MX_SPI2_Init>
  MX_TIM1_Init();
 80006b2:	f000 fd51 	bl	8001158 <MX_TIM1_Init>
  MX_TIM2_Init();
 80006b6:	f000 fdfb 	bl	80012b0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80006ba:	f000 fe6f 	bl	800139c <MX_TIM3_Init>
  MX_TIM5_Init();
 80006be:	f000 fee3 	bl	8001488 <MX_TIM5_Init>
  MX_TIM8_Init();
 80006c2:	f000 ff57 	bl	8001574 <MX_TIM8_Init>
  MX_TIM12_Init();
 80006c6:	f000 ffa7 	bl	8001618 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 80006ca:	f000 ffe9 	bl	80016a0 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80006ce:	f001 f817 	bl	8001700 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 80006d2:	f00a fe3b 	bl	800b34c <MX_FATFS_Init>
  MX_CAN1_Init();
 80006d6:	f000 f93f 	bl	8000958 <MX_CAN1_Init>
  MX_TouchGFX_Init();
 80006da:	f00d feab 	bl	800e434 <MX_TouchGFX_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 80006de:	4b13      	ldr	r3, [pc, #76]	; (800072c <main+0xbc>)
 80006e0:	f107 041c 	add.w	r4, r7, #28
 80006e4:	461d      	mov	r5, r3
 80006e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80006f2:	f107 031c 	add.w	r3, r7, #28
 80006f6:	2100      	movs	r1, #0
 80006f8:	4618      	mov	r0, r3
 80006fa:	f00b f91f 	bl	800b93c <osThreadCreate>
 80006fe:	4602      	mov	r2, r0
 8000700:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <main+0xc0>)
 8000702:	601a      	str	r2, [r3, #0]

  osThreadDef(second, SecondTask, osPriorityNormal, 0, 512);
 8000704:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <main+0xc4>)
 8000706:	463c      	mov	r4, r7
 8000708:	461d      	mov	r5, r3
 800070a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800070c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800070e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000712:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  secondTaskHandle = osThreadCreate(osThread(second), NULL);
 8000716:	463b      	mov	r3, r7
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f00b f90e 	bl	800b93c <osThreadCreate>
 8000720:	4602      	mov	r2, r0
 8000722:	4b05      	ldr	r3, [pc, #20]	; (8000738 <main+0xc8>)
 8000724:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000726:	f00b f8e6 	bl	800b8f6 <osKernelStart>


  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800072a:	e7fe      	b.n	800072a <main+0xba>
 800072c:	08024468 	.word	0x08024468
 8000730:	2000be1c 	.word	0x2000be1c
 8000734:	0802448c 	.word	0x0802448c
 8000738:	2000be18 	.word	0x2000be18

0800073c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b0b4      	sub	sp, #208	; 0xd0
 8000740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000742:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000746:	2230      	movs	r2, #48	; 0x30
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f022 fefd 	bl	802354a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000750:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000760:	f107 0308 	add.w	r3, r7, #8
 8000764:	2284      	movs	r2, #132	; 0x84
 8000766:	2100      	movs	r1, #0
 8000768:	4618      	mov	r0, r3
 800076a:	f022 feee 	bl	802354a <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800076e:	f005 f8a1 	bl	80058b4 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000772:	4b4d      	ldr	r3, [pc, #308]	; (80008a8 <SystemClock_Config+0x16c>)
 8000774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000776:	4a4c      	ldr	r2, [pc, #304]	; (80008a8 <SystemClock_Config+0x16c>)
 8000778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800077c:	6413      	str	r3, [r2, #64]	; 0x40
 800077e:	4b4a      	ldr	r3, [pc, #296]	; (80008a8 <SystemClock_Config+0x16c>)
 8000780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800078a:	4b48      	ldr	r3, [pc, #288]	; (80008ac <SystemClock_Config+0x170>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a47      	ldr	r2, [pc, #284]	; (80008ac <SystemClock_Config+0x170>)
 8000790:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000794:	6013      	str	r3, [r2, #0]
 8000796:	4b45      	ldr	r3, [pc, #276]	; (80008ac <SystemClock_Config+0x170>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800079e:	603b      	str	r3, [r7, #0]
 80007a0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80007a2:	2309      	movs	r3, #9
 80007a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007b0:	2301      	movs	r3, #1
 80007b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b6:	2302      	movs	r3, #2
 80007b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 80007c4:	2319      	movs	r3, #25
 80007c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 80007ca:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80007ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d2:	2302      	movs	r3, #2
 80007d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80007d8:	2309      	movs	r3, #9
 80007da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007de:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f005 f988 	bl	8005af8 <HAL_RCC_OscConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80007ee:	f001 fa97 	bl	8001d20 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007f2:	f005 f86f 	bl	80058d4 <HAL_PWREx_EnableOverDrive>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007fc:	f001 fa90 	bl	8001d20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000800:	230f      	movs	r3, #15
 8000802:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000806:	2302      	movs	r3, #2
 8000808:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800080c:	2300      	movs	r3, #0
 800080e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000812:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000816:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800081a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800081e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000822:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000826:	2106      	movs	r1, #6
 8000828:	4618      	mov	r0, r3
 800082a:	f005 fc09 	bl	8006040 <HAL_RCC_ClockConfig>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000834:	f001 fa74 	bl	8001d20 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8000838:	4b1d      	ldr	r3, [pc, #116]	; (80008b0 <SystemClock_Config+0x174>)
 800083a:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 800083c:	2364      	movs	r3, #100	; 0x64
 800083e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8000840:	2302      	movs	r3, #2
 8000842:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000844:	2302      	movs	r3, #2
 8000846:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000848:	2302      	movs	r3, #2
 800084a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800084c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000850:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000852:	2305      	movs	r3, #5
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000856:	2302      	movs	r3, #2
 8000858:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 800085a:	2303      	movs	r3, #3
 800085c:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 800085e:	2301      	movs	r3, #1
 8000860:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000862:	2301      	movs	r3, #1
 8000864:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000866:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800086a:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800086c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000870:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000872:	2300      	movs	r3, #0
 8000874:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000876:	2300      	movs	r3, #0
 8000878:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800087a:	2300      	movs	r3, #0
 800087c:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800087e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000882:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8000886:	2300      	movs	r3, #0
 8000888:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800088c:	f107 0308 	add.w	r3, r7, #8
 8000890:	4618      	mov	r0, r3
 8000892:	f005 fdd9 	bl	8006448 <HAL_RCCEx_PeriphCLKConfig>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <SystemClock_Config+0x164>
  {
    Error_Handler();
 800089c:	f001 fa40 	bl	8001d20 <Error_Handler>
  }
}
 80008a0:	bf00      	nop
 80008a2:	37d0      	adds	r7, #208	; 0xd0
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40007000 	.word	0x40007000
 80008b0:	01b00868 	.word	0x01b00868

080008b4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008ba:	463b      	mov	r3, r7
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 80008c6:	4b21      	ldr	r3, [pc, #132]	; (800094c <MX_ADC3_Init+0x98>)
 80008c8:	4a21      	ldr	r2, [pc, #132]	; (8000950 <MX_ADC3_Init+0x9c>)
 80008ca:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008cc:	4b1f      	ldr	r3, [pc, #124]	; (800094c <MX_ADC3_Init+0x98>)
 80008ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008d2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80008d4:	4b1d      	ldr	r3, [pc, #116]	; (800094c <MX_ADC3_Init+0x98>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008da:	4b1c      	ldr	r3, [pc, #112]	; (800094c <MX_ADC3_Init+0x98>)
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80008e0:	4b1a      	ldr	r3, [pc, #104]	; (800094c <MX_ADC3_Init+0x98>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80008e6:	4b19      	ldr	r3, [pc, #100]	; (800094c <MX_ADC3_Init+0x98>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008ee:	4b17      	ldr	r3, [pc, #92]	; (800094c <MX_ADC3_Init+0x98>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008f4:	4b15      	ldr	r3, [pc, #84]	; (800094c <MX_ADC3_Init+0x98>)
 80008f6:	4a17      	ldr	r2, [pc, #92]	; (8000954 <MX_ADC3_Init+0xa0>)
 80008f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008fa:	4b14      	ldr	r3, [pc, #80]	; (800094c <MX_ADC3_Init+0x98>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000900:	4b12      	ldr	r3, [pc, #72]	; (800094c <MX_ADC3_Init+0x98>)
 8000902:	2201      	movs	r2, #1
 8000904:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000906:	4b11      	ldr	r3, [pc, #68]	; (800094c <MX_ADC3_Init+0x98>)
 8000908:	2200      	movs	r2, #0
 800090a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800090e:	4b0f      	ldr	r3, [pc, #60]	; (800094c <MX_ADC3_Init+0x98>)
 8000910:	2201      	movs	r2, #1
 8000912:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000914:	480d      	ldr	r0, [pc, #52]	; (800094c <MX_ADC3_Init+0x98>)
 8000916:	f002 fb47 	bl	8002fa8 <HAL_ADC_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000920:	f001 f9fe 	bl	8001d20 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000924:	2304      	movs	r3, #4
 8000926:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000928:	2301      	movs	r3, #1
 800092a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800092c:	2300      	movs	r3, #0
 800092e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000930:	463b      	mov	r3, r7
 8000932:	4619      	mov	r1, r3
 8000934:	4805      	ldr	r0, [pc, #20]	; (800094c <MX_ADC3_Init+0x98>)
 8000936:	f002 fb7b 	bl	8003030 <HAL_ADC_ConfigChannel>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000940:	f001 f9ee 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000944:	bf00      	nop
 8000946:	3710      	adds	r7, #16
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	2000c164 	.word	0x2000c164
 8000950:	40012200 	.word	0x40012200
 8000954:	0f000001 	.word	0x0f000001

08000958 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08a      	sub	sp, #40	; 0x28
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800095e:	4b30      	ldr	r3, [pc, #192]	; (8000a20 <MX_CAN1_Init+0xc8>)
 8000960:	4a30      	ldr	r2, [pc, #192]	; (8000a24 <MX_CAN1_Init+0xcc>)
 8000962:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 20;
 8000964:	4b2e      	ldr	r3, [pc, #184]	; (8000a20 <MX_CAN1_Init+0xc8>)
 8000966:	2214      	movs	r2, #20
 8000968:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800096a:	4b2d      	ldr	r3, [pc, #180]	; (8000a20 <MX_CAN1_Init+0xc8>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000970:	4b2b      	ldr	r3, [pc, #172]	; (8000a20 <MX_CAN1_Init+0xc8>)
 8000972:	2200      	movs	r2, #0
 8000974:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000976:	4b2a      	ldr	r3, [pc, #168]	; (8000a20 <MX_CAN1_Init+0xc8>)
 8000978:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800097c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800097e:	4b28      	ldr	r3, [pc, #160]	; (8000a20 <MX_CAN1_Init+0xc8>)
 8000980:	2200      	movs	r2, #0
 8000982:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000984:	4b26      	ldr	r3, [pc, #152]	; (8000a20 <MX_CAN1_Init+0xc8>)
 8000986:	2200      	movs	r2, #0
 8000988:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800098a:	4b25      	ldr	r3, [pc, #148]	; (8000a20 <MX_CAN1_Init+0xc8>)
 800098c:	2200      	movs	r2, #0
 800098e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000990:	4b23      	ldr	r3, [pc, #140]	; (8000a20 <MX_CAN1_Init+0xc8>)
 8000992:	2200      	movs	r2, #0
 8000994:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000996:	4b22      	ldr	r3, [pc, #136]	; (8000a20 <MX_CAN1_Init+0xc8>)
 8000998:	2200      	movs	r2, #0
 800099a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800099c:	4b20      	ldr	r3, [pc, #128]	; (8000a20 <MX_CAN1_Init+0xc8>)
 800099e:	2200      	movs	r2, #0
 80009a0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80009a2:	4b1f      	ldr	r3, [pc, #124]	; (8000a20 <MX_CAN1_Init+0xc8>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80009a8:	481d      	ldr	r0, [pc, #116]	; (8000a20 <MX_CAN1_Init+0xc8>)
 80009aa:	f002 fd85 	bl	80034b8 <HAL_CAN_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80009b4:	f001 f9b4 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  sFilterConfig.FilterBank = 0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80009bc:	2300      	movs	r3, #0
 80009be:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80009c0:	2301      	movs	r3, #1
 80009c2:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 80009c4:	2300      	movs	r3, #0
 80009c6:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 80009c8:	2300      	movs	r3, #0
 80009ca:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 80009cc:	2300      	movs	r3, #0
 80009ce:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 80009d0:	2300      	movs	r3, #0
 80009d2:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 80009d8:	2301      	movs	r3, #1
 80009da:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 80009dc:	230e      	movs	r3, #14
 80009de:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 80009e0:	463b      	mov	r3, r7
 80009e2:	4619      	mov	r1, r3
 80009e4:	480e      	ldr	r0, [pc, #56]	; (8000a20 <MX_CAN1_Init+0xc8>)
 80009e6:	f002 fe63 	bl	80036b0 <HAL_CAN_ConfigFilter>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_CAN1_Init+0x9c>
  {
    /* Filter configuration Error */
    Error_Handler();
 80009f0:	f001 f996 	bl	8001d20 <Error_Handler>
  }

  /*##-3- Start the CAN peripheral ###########################################*/
  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 80009f4:	480a      	ldr	r0, [pc, #40]	; (8000a20 <MX_CAN1_Init+0xc8>)
 80009f6:	f002 ff3b 	bl	8003870 <HAL_CAN_Start>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_CAN1_Init+0xac>
  {
   /* Start Error */
   Error_Handler();
 8000a00:	f001 f98e 	bl	8001d20 <Error_Handler>
  }

  /*##-4- Activate CAN RX notification #######################################*/
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000a04:	2102      	movs	r1, #2
 8000a06:	4806      	ldr	r0, [pc, #24]	; (8000a20 <MX_CAN1_Init+0xc8>)
 8000a08:	f003 f888 	bl	8003b1c <HAL_CAN_ActivateNotification>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_CAN1_Init+0xbe>
  {
    /* Notification Error */
    Error_Handler();
 8000a12:	f001 f985 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */

}
 8000a16:	bf00      	nop
 8000a18:	3728      	adds	r7, #40	; 0x28
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	2000c3e4 	.word	0x2000c3e4
 8000a24:	40006400 	.word	0x40006400

08000a28 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  /* Get RX message */
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000a30:	4b36      	ldr	r3, [pc, #216]	; (8000b0c <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 8000a32:	4a37      	ldr	r2, [pc, #220]	; (8000b10 <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>)
 8000a34:	2100      	movs	r1, #0
 8000a36:	6878      	ldr	r0, [r7, #4]
 8000a38:	f002 ff5e 	bl	80038f8 <HAL_CAN_GetRxMessage>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    /* Reception Error */
    Error_Handler();
 8000a42:	f001 f96d 	bl	8001d20 <Error_Handler>
  }

  /* Display LEDx */
  if ((RxHeader.StdId == 0x500) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 8000a46:	4b32      	ldr	r3, [pc, #200]	; (8000b10 <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000a4e:	d158      	bne.n	8000b02 <HAL_CAN_RxFifo0MsgPendingCallback+0xda>
 8000a50:	4b2f      	ldr	r3, [pc, #188]	; (8000b10 <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>)
 8000a52:	689b      	ldr	r3, [r3, #8]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d154      	bne.n	8000b02 <HAL_CAN_RxFifo0MsgPendingCallback+0xda>
 8000a58:	4b2d      	ldr	r3, [pc, #180]	; (8000b10 <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>)
 8000a5a:	691b      	ldr	r3, [r3, #16]
 8000a5c:	2b08      	cmp	r3, #8
 8000a5e:	d150      	bne.n	8000b02 <HAL_CAN_RxFifo0MsgPendingCallback+0xda>
  {
	 uint16_t rpm_in = (RxData[0] << 0) | (RxData[1] << 8);
 8000a60:	4b2a      	ldr	r3, [pc, #168]	; (8000b0c <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	b21a      	sxth	r2, r3
 8000a66:	4b29      	ldr	r3, [pc, #164]	; (8000b0c <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 8000a68:	785b      	ldrb	r3, [r3, #1]
 8000a6a:	021b      	lsls	r3, r3, #8
 8000a6c:	b21b      	sxth	r3, r3
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	b21b      	sxth	r3, r3
 8000a72:	82fb      	strh	r3, [r7, #22]
	 uint16_t map_in = (RxData[2] << 0) | (RxData[3] << 8);
 8000a74:	4b25      	ldr	r3, [pc, #148]	; (8000b0c <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 8000a76:	789b      	ldrb	r3, [r3, #2]
 8000a78:	b21a      	sxth	r2, r3
 8000a7a:	4b24      	ldr	r3, [pc, #144]	; (8000b0c <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 8000a7c:	78db      	ldrb	r3, [r3, #3]
 8000a7e:	021b      	lsls	r3, r3, #8
 8000a80:	b21b      	sxth	r3, r3
 8000a82:	4313      	orrs	r3, r2
 8000a84:	b21b      	sxth	r3, r3
 8000a86:	82bb      	strh	r3, [r7, #20]
	 uint16_t clt_in = (RxData[4] << 0) | (RxData[5] << 8);
 8000a88:	4b20      	ldr	r3, [pc, #128]	; (8000b0c <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 8000a8a:	791b      	ldrb	r3, [r3, #4]
 8000a8c:	b21a      	sxth	r2, r3
 8000a8e:	4b1f      	ldr	r3, [pc, #124]	; (8000b0c <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 8000a90:	795b      	ldrb	r3, [r3, #5]
 8000a92:	021b      	lsls	r3, r3, #8
 8000a94:	b21b      	sxth	r3, r3
 8000a96:	4313      	orrs	r3, r2
 8000a98:	b21b      	sxth	r3, r3
 8000a9a:	827b      	strh	r3, [r7, #18]
	 uint8_t lambda_in = RxData[6];
 8000a9c:	4b1b      	ldr	r3, [pc, #108]	; (8000b0c <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 8000a9e:	799b      	ldrb	r3, [r3, #6]
 8000aa0:	747b      	strb	r3, [r7, #17]
	 uint16_t lambda_targ_in = RxData[7];
 8000aa2:	4b1a      	ldr	r3, [pc, #104]	; (8000b0c <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 8000aa4:	79db      	ldrb	r3, [r3, #7]
 8000aa6:	81fb      	strh	r3, [r7, #14]

	 rpm = rpm_in;
 8000aa8:	8afb      	ldrh	r3, [r7, #22]
 8000aaa:	4a1a      	ldr	r2, [pc, #104]	; (8000b14 <HAL_CAN_RxFifo0MsgPendingCallback+0xec>)
 8000aac:	6013      	str	r3, [r2, #0]
	 map = map_in / 10;
 8000aae:	8abb      	ldrh	r3, [r7, #20]
 8000ab0:	4a19      	ldr	r2, [pc, #100]	; (8000b18 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 8000ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ab6:	08db      	lsrs	r3, r3, #3
 8000ab8:	b29b      	uxth	r3, r3
 8000aba:	461a      	mov	r2, r3
 8000abc:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 8000abe:	601a      	str	r2, [r3, #0]
	 clt = clt_in / 10;
 8000ac0:	8a7b      	ldrh	r3, [r7, #18]
 8000ac2:	4a15      	ldr	r2, [pc, #84]	; (8000b18 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 8000ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ac8:	08db      	lsrs	r3, r3, #3
 8000aca:	b29b      	uxth	r3, r3
 8000acc:	461a      	mov	r2, r3
 8000ace:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>)
 8000ad0:	601a      	str	r2, [r3, #0]
	 lambda = lambda_in / 100.0f;
 8000ad2:	7c7b      	ldrb	r3, [r7, #17]
 8000ad4:	ee07 3a90 	vmov	s15, r3
 8000ad8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000adc:	eddf 6a11 	vldr	s13, [pc, #68]	; 8000b24 <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>
 8000ae0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ae4:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <HAL_CAN_RxFifo0MsgPendingCallback+0x100>)
 8000ae6:	edc3 7a00 	vstr	s15, [r3]
	 lambda_targ = lambda_targ_in / 100.0f;
 8000aea:	89fb      	ldrh	r3, [r7, #14]
 8000aec:	ee07 3a90 	vmov	s15, r3
 8000af0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000af4:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000b24 <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>
 8000af8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000afc:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <HAL_CAN_RxFifo0MsgPendingCallback+0x104>)
 8000afe:	edc3 7a00 	vstr	s15, [r3]
  }
}
 8000b02:	bf00      	nop
 8000b04:	3718      	adds	r7, #24
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	2000c39c 	.word	0x2000c39c
 8000b10:	2000c480 	.word	0x2000c480
 8000b14:	2000000c 	.word	0x2000000c
 8000b18:	cccccccd 	.word	0xcccccccd
 8000b1c:	20000010 	.word	0x20000010
 8000b20:	20000014 	.word	0x20000014
 8000b24:	42c80000 	.word	0x42c80000
 8000b28:	20000004 	.word	0x20000004
 8000b2c:	20000008 	.word	0x20000008

08000b30 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000b34:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <MX_CRC_Init+0x3c>)
 8000b36:	4a0e      	ldr	r2, [pc, #56]	; (8000b70 <MX_CRC_Init+0x40>)
 8000b38:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <MX_CRC_Init+0x3c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000b40:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <MX_CRC_Init+0x3c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000b46:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <MX_CRC_Init+0x3c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000b4c:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <MX_CRC_Init+0x3c>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000b52:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <MX_CRC_Init+0x3c>)
 8000b54:	2201      	movs	r2, #1
 8000b56:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000b58:	4804      	ldr	r0, [pc, #16]	; (8000b6c <MX_CRC_Init+0x3c>)
 8000b5a:	f003 fb41 	bl	80041e0 <HAL_CRC_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000b64:	f001 f8dc 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	2000bf94 	.word	0x2000bf94
 8000b70:	40023000 	.word	0x40023000

08000b74 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000b78:	4b16      	ldr	r3, [pc, #88]	; (8000bd4 <MX_DCMI_Init+0x60>)
 8000b7a:	4a17      	ldr	r2, [pc, #92]	; (8000bd8 <MX_DCMI_Init+0x64>)
 8000b7c:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000b7e:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <MX_DCMI_Init+0x60>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000b84:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <MX_DCMI_Init+0x60>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000b8a:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <MX_DCMI_Init+0x60>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000b90:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <MX_DCMI_Init+0x60>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000b96:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <MX_DCMI_Init+0x60>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000b9c:	4b0d      	ldr	r3, [pc, #52]	; (8000bd4 <MX_DCMI_Init+0x60>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000ba2:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <MX_DCMI_Init+0x60>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000ba8:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <MX_DCMI_Init+0x60>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000bae:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <MX_DCMI_Init+0x60>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000bb4:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <MX_DCMI_Init+0x60>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <MX_DCMI_Init+0x60>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000bc0:	4804      	ldr	r0, [pc, #16]	; (8000bd4 <MX_DCMI_Init+0x60>)
 8000bc2:	f003 fbf7 	bl	80043b4 <HAL_DCMI_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000bcc:	f001 f8a8 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	2000c1ac 	.word	0x2000c1ac
 8000bd8:	50050000 	.word	0x50050000

08000bdc <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000be0:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <MX_DMA2D_Init+0x5c>)
 8000be2:	4a16      	ldr	r2, [pc, #88]	; (8000c3c <MX_DMA2D_Init+0x60>)
 8000be4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000be6:	4b14      	ldr	r3, [pc, #80]	; (8000c38 <MX_DMA2D_Init+0x5c>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000bec:	4b12      	ldr	r3, [pc, #72]	; (8000c38 <MX_DMA2D_Init+0x5c>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000bf2:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <MX_DMA2D_Init+0x5c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000bf8:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <MX_DMA2D_Init+0x5c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <MX_DMA2D_Init+0x5c>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000c04:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <MX_DMA2D_Init+0x5c>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000c0a:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <MX_DMA2D_Init+0x5c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000c10:	4809      	ldr	r0, [pc, #36]	; (8000c38 <MX_DMA2D_Init+0x5c>)
 8000c12:	f003 fce3 	bl	80045dc <HAL_DMA2D_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000c1c:	f001 f880 	bl	8001d20 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000c20:	2101      	movs	r1, #1
 8000c22:	4805      	ldr	r0, [pc, #20]	; (8000c38 <MX_DMA2D_Init+0x5c>)
 8000c24:	f003 ffa4 	bl	8004b70 <HAL_DMA2D_ConfigLayer>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000c2e:	f001 f877 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	2000c35c 	.word	0x2000c35c
 8000c3c:	4002b000 	.word	0x4002b000

08000c40 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08e      	sub	sp, #56	; 0x38
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	2234      	movs	r2, #52	; 0x34
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f022 fc7c 	bl	802354a <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000c52:	4b3a      	ldr	r3, [pc, #232]	; (8000d3c <MX_LTDC_Init+0xfc>)
 8000c54:	4a3a      	ldr	r2, [pc, #232]	; (8000d40 <MX_LTDC_Init+0x100>)
 8000c56:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000c58:	4b38      	ldr	r3, [pc, #224]	; (8000d3c <MX_LTDC_Init+0xfc>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000c5e:	4b37      	ldr	r3, [pc, #220]	; (8000d3c <MX_LTDC_Init+0xfc>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000c64:	4b35      	ldr	r3, [pc, #212]	; (8000d3c <MX_LTDC_Init+0xfc>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000c6a:	4b34      	ldr	r3, [pc, #208]	; (8000d3c <MX_LTDC_Init+0xfc>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000c70:	4b32      	ldr	r3, [pc, #200]	; (8000d3c <MX_LTDC_Init+0xfc>)
 8000c72:	2228      	movs	r2, #40	; 0x28
 8000c74:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000c76:	4b31      	ldr	r3, [pc, #196]	; (8000d3c <MX_LTDC_Init+0xfc>)
 8000c78:	2209      	movs	r2, #9
 8000c7a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000c7c:	4b2f      	ldr	r3, [pc, #188]	; (8000d3c <MX_LTDC_Init+0xfc>)
 8000c7e:	2235      	movs	r2, #53	; 0x35
 8000c80:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000c82:	4b2e      	ldr	r3, [pc, #184]	; (8000d3c <MX_LTDC_Init+0xfc>)
 8000c84:	220b      	movs	r2, #11
 8000c86:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000c88:	4b2c      	ldr	r3, [pc, #176]	; (8000d3c <MX_LTDC_Init+0xfc>)
 8000c8a:	f240 2215 	movw	r2, #533	; 0x215
 8000c8e:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000c90:	4b2a      	ldr	r3, [pc, #168]	; (8000d3c <MX_LTDC_Init+0xfc>)
 8000c92:	f240 121b 	movw	r2, #283	; 0x11b
 8000c96:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000c98:	4b28      	ldr	r3, [pc, #160]	; (8000d3c <MX_LTDC_Init+0xfc>)
 8000c9a:	f240 2235 	movw	r2, #565	; 0x235
 8000c9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000ca0:	4b26      	ldr	r3, [pc, #152]	; (8000d3c <MX_LTDC_Init+0xfc>)
 8000ca2:	f240 121d 	movw	r2, #285	; 0x11d
 8000ca6:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000ca8:	4b24      	ldr	r3, [pc, #144]	; (8000d3c <MX_LTDC_Init+0xfc>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000cb0:	4b22      	ldr	r3, [pc, #136]	; (8000d3c <MX_LTDC_Init+0xfc>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000cb8:	4b20      	ldr	r3, [pc, #128]	; (8000d3c <MX_LTDC_Init+0xfc>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000cc0:	481e      	ldr	r0, [pc, #120]	; (8000d3c <MX_LTDC_Init+0xfc>)
 8000cc2:	f004 fa5f 	bl	8005184 <HAL_LTDC_Init>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000ccc:	f001 f828 	bl	8001d20 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000cd4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000cd8:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000cde:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000ce2:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000ce8:	23ff      	movs	r3, #255	; 0xff
 8000cea:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000cf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cf4:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000cf6:	2305      	movs	r3, #5
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000cfa:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8000d00:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000d04:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8000d06:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000d0a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000d1e:	1d3b      	adds	r3, r7, #4
 8000d20:	2200      	movs	r2, #0
 8000d22:	4619      	mov	r1, r3
 8000d24:	4805      	ldr	r0, [pc, #20]	; (8000d3c <MX_LTDC_Init+0xfc>)
 8000d26:	f004 fbb5 	bl	8005494 <HAL_LTDC_ConfigLayer>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8000d30:	f000 fff6 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000d34:	bf00      	nop
 8000d36:	3738      	adds	r7, #56	; 0x38
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	2000c0bc 	.word	0x2000c0bc
 8000d40:	40016800 	.word	0x40016800

08000d44 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000d48:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <MX_QUADSPI_Init+0x50>)
 8000d4a:	4a13      	ldr	r2, [pc, #76]	; (8000d98 <MX_QUADSPI_Init+0x54>)
 8000d4c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000d4e:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <MX_QUADSPI_Init+0x50>)
 8000d50:	22ff      	movs	r2, #255	; 0xff
 8000d52:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000d54:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <MX_QUADSPI_Init+0x50>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <MX_QUADSPI_Init+0x50>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000d60:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <MX_QUADSPI_Init+0x50>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000d66:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <MX_QUADSPI_Init+0x50>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000d6c:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <MX_QUADSPI_Init+0x50>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000d72:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <MX_QUADSPI_Init+0x50>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <MX_QUADSPI_Init+0x50>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000d7e:	4805      	ldr	r0, [pc, #20]	; (8000d94 <MX_QUADSPI_Init+0x50>)
 8000d80:	f004 fdf8 	bl	8005974 <HAL_QSPI_Init>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000d8a:	f000 ffc9 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	2000c49c 	.word	0x2000c49c
 8000d98:	a0001000 	.word	0xa0001000

08000d9c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b092      	sub	sp, #72	; 0x48
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000da2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
 8000dae:	60da      	str	r2, [r3, #12]
 8000db0:	611a      	str	r2, [r3, #16]
 8000db2:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8000db4:	2300      	movs	r3, #0
 8000db6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8000db8:	463b      	mov	r3, r7
 8000dba:	222c      	movs	r2, #44	; 0x2c
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f022 fbc3 	bl	802354a <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8000dc4:	4b47      	ldr	r3, [pc, #284]	; (8000ee4 <MX_RTC_Init+0x148>)
 8000dc6:	4a48      	ldr	r2, [pc, #288]	; (8000ee8 <MX_RTC_Init+0x14c>)
 8000dc8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000dca:	4b46      	ldr	r3, [pc, #280]	; (8000ee4 <MX_RTC_Init+0x148>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000dd0:	4b44      	ldr	r3, [pc, #272]	; (8000ee4 <MX_RTC_Init+0x148>)
 8000dd2:	227f      	movs	r2, #127	; 0x7f
 8000dd4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000dd6:	4b43      	ldr	r3, [pc, #268]	; (8000ee4 <MX_RTC_Init+0x148>)
 8000dd8:	22ff      	movs	r2, #255	; 0xff
 8000dda:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ddc:	4b41      	ldr	r3, [pc, #260]	; (8000ee4 <MX_RTC_Init+0x148>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000de2:	4b40      	ldr	r3, [pc, #256]	; (8000ee4 <MX_RTC_Init+0x148>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000de8:	4b3e      	ldr	r3, [pc, #248]	; (8000ee4 <MX_RTC_Init+0x148>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000dee:	483d      	ldr	r0, [pc, #244]	; (8000ee4 <MX_RTC_Init+0x148>)
 8000df0:	f006 f84c 	bl	8006e8c <HAL_RTC_Init>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8000dfa:	f000 ff91 	bl	8001d20 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e10:	2300      	movs	r3, #0
 8000e12:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e14:	2300      	movs	r3, #0
 8000e16:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000e18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4830      	ldr	r0, [pc, #192]	; (8000ee4 <MX_RTC_Init+0x148>)
 8000e22:	f006 f8af 	bl	8006f84 <HAL_RTC_SetTime>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8000e2c:	f000 ff78 	bl	8001d20 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000e30:	2301      	movs	r3, #1
 8000e32:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8000e36:	2301      	movs	r3, #1
 8000e38:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000e48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4824      	ldr	r0, [pc, #144]	; (8000ee4 <MX_RTC_Init+0x148>)
 8000e52:	f006 f955 	bl	8007100 <HAL_RTC_SetDate>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8000e5c:	f000 ff60 	bl	8001d20 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e70:	2300      	movs	r3, #0
 8000e72:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000e80:	2300      	movs	r3, #0
 8000e82:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000e84:	2301      	movs	r3, #1
 8000e86:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8000e8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e8e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000e90:	463b      	mov	r3, r7
 8000e92:	2201      	movs	r2, #1
 8000e94:	4619      	mov	r1, r3
 8000e96:	4813      	ldr	r0, [pc, #76]	; (8000ee4 <MX_RTC_Init+0x148>)
 8000e98:	f006 f9da 	bl	8007250 <HAL_RTC_SetAlarm>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8000ea2:	f000 ff3d 	bl	8001d20 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 0x1;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 8000eac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000eb2:	463b      	mov	r3, r7
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	480a      	ldr	r0, [pc, #40]	; (8000ee4 <MX_RTC_Init+0x148>)
 8000eba:	f006 f9c9 	bl	8007250 <HAL_RTC_SetAlarm>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_RTC_Init+0x12c>
  {
    Error_Handler();
 8000ec4:	f000 ff2c 	bl	8001d20 <Error_Handler>
  }
  /** Enable the TimeStamp 
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8000ec8:	2202      	movs	r2, #2
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <MX_RTC_Init+0x148>)
 8000ece:	f006 fb49 	bl	8007564 <HAL_RTCEx_SetTimeStamp>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_RTC_Init+0x140>
  {
    Error_Handler();
 8000ed8:	f000 ff22 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000edc:	bf00      	nop
 8000ede:	3748      	adds	r7, #72	; 0x48
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	2000c27c 	.word	0x2000c27c
 8000ee8:	40002800 	.word	0x40002800

08000eec <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000ef0:	4b4d      	ldr	r3, [pc, #308]	; (8001028 <MX_SAI2_Init+0x13c>)
 8000ef2:	4a4e      	ldr	r2, [pc, #312]	; (800102c <MX_SAI2_Init+0x140>)
 8000ef4:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000ef6:	4b4c      	ldr	r3, [pc, #304]	; (8001028 <MX_SAI2_Init+0x13c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000efc:	4b4a      	ldr	r3, [pc, #296]	; (8001028 <MX_SAI2_Init+0x13c>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000f02:	4b49      	ldr	r3, [pc, #292]	; (8001028 <MX_SAI2_Init+0x13c>)
 8000f04:	2240      	movs	r2, #64	; 0x40
 8000f06:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000f08:	4b47      	ldr	r3, [pc, #284]	; (8001028 <MX_SAI2_Init+0x13c>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000f0e:	4b46      	ldr	r3, [pc, #280]	; (8001028 <MX_SAI2_Init+0x13c>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000f14:	4b44      	ldr	r3, [pc, #272]	; (8001028 <MX_SAI2_Init+0x13c>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000f1a:	4b43      	ldr	r3, [pc, #268]	; (8001028 <MX_SAI2_Init+0x13c>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000f20:	4b41      	ldr	r3, [pc, #260]	; (8001028 <MX_SAI2_Init+0x13c>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000f26:	4b40      	ldr	r3, [pc, #256]	; (8001028 <MX_SAI2_Init+0x13c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000f2c:	4b3e      	ldr	r3, [pc, #248]	; (8001028 <MX_SAI2_Init+0x13c>)
 8000f2e:	4a40      	ldr	r2, [pc, #256]	; (8001030 <MX_SAI2_Init+0x144>)
 8000f30:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000f32:	4b3d      	ldr	r3, [pc, #244]	; (8001028 <MX_SAI2_Init+0x13c>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000f38:	4b3b      	ldr	r3, [pc, #236]	; (8001028 <MX_SAI2_Init+0x13c>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000f3e:	4b3a      	ldr	r3, [pc, #232]	; (8001028 <MX_SAI2_Init+0x13c>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000f44:	4b38      	ldr	r3, [pc, #224]	; (8001028 <MX_SAI2_Init+0x13c>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8000f4a:	4b37      	ldr	r3, [pc, #220]	; (8001028 <MX_SAI2_Init+0x13c>)
 8000f4c:	2208      	movs	r2, #8
 8000f4e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000f50:	4b35      	ldr	r3, [pc, #212]	; (8001028 <MX_SAI2_Init+0x13c>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000f56:	4b34      	ldr	r3, [pc, #208]	; (8001028 <MX_SAI2_Init+0x13c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000f5c:	4b32      	ldr	r3, [pc, #200]	; (8001028 <MX_SAI2_Init+0x13c>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000f62:	4b31      	ldr	r3, [pc, #196]	; (8001028 <MX_SAI2_Init+0x13c>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000f68:	4b2f      	ldr	r3, [pc, #188]	; (8001028 <MX_SAI2_Init+0x13c>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000f6e:	4b2e      	ldr	r3, [pc, #184]	; (8001028 <MX_SAI2_Init+0x13c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000f74:	4b2c      	ldr	r3, [pc, #176]	; (8001028 <MX_SAI2_Init+0x13c>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8000f7a:	4b2b      	ldr	r3, [pc, #172]	; (8001028 <MX_SAI2_Init+0x13c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000f80:	4829      	ldr	r0, [pc, #164]	; (8001028 <MX_SAI2_Init+0x13c>)
 8000f82:	f006 fb45 	bl	8007610 <HAL_SAI_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8000f8c:	f000 fec8 	bl	8001d20 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000f90:	4b28      	ldr	r3, [pc, #160]	; (8001034 <MX_SAI2_Init+0x148>)
 8000f92:	4a29      	ldr	r2, [pc, #164]	; (8001038 <MX_SAI2_Init+0x14c>)
 8000f94:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000f96:	4b27      	ldr	r3, [pc, #156]	; (8001034 <MX_SAI2_Init+0x148>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000f9c:	4b25      	ldr	r3, [pc, #148]	; (8001034 <MX_SAI2_Init+0x148>)
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8000fa2:	4b24      	ldr	r3, [pc, #144]	; (8001034 <MX_SAI2_Init+0x148>)
 8000fa4:	2240      	movs	r2, #64	; 0x40
 8000fa6:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000fa8:	4b22      	ldr	r3, [pc, #136]	; (8001034 <MX_SAI2_Init+0x148>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000fae:	4b21      	ldr	r3, [pc, #132]	; (8001034 <MX_SAI2_Init+0x148>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000fb4:	4b1f      	ldr	r3, [pc, #124]	; (8001034 <MX_SAI2_Init+0x148>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000fba:	4b1e      	ldr	r3, [pc, #120]	; (8001034 <MX_SAI2_Init+0x148>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000fc0:	4b1c      	ldr	r3, [pc, #112]	; (8001034 <MX_SAI2_Init+0x148>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000fc6:	4b1b      	ldr	r3, [pc, #108]	; (8001034 <MX_SAI2_Init+0x148>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000fcc:	4b19      	ldr	r3, [pc, #100]	; (8001034 <MX_SAI2_Init+0x148>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000fd2:	4b18      	ldr	r3, [pc, #96]	; (8001034 <MX_SAI2_Init+0x148>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000fd8:	4b16      	ldr	r3, [pc, #88]	; (8001034 <MX_SAI2_Init+0x148>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8000fde:	4b15      	ldr	r3, [pc, #84]	; (8001034 <MX_SAI2_Init+0x148>)
 8000fe0:	2208      	movs	r2, #8
 8000fe2:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8000fe4:	4b13      	ldr	r3, [pc, #76]	; (8001034 <MX_SAI2_Init+0x148>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000fea:	4b12      	ldr	r3, [pc, #72]	; (8001034 <MX_SAI2_Init+0x148>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000ff0:	4b10      	ldr	r3, [pc, #64]	; (8001034 <MX_SAI2_Init+0x148>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000ff6:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <MX_SAI2_Init+0x148>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8000ffc:	4b0d      	ldr	r3, [pc, #52]	; (8001034 <MX_SAI2_Init+0x148>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001002:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <MX_SAI2_Init+0x148>)
 8001004:	2200      	movs	r2, #0
 8001006:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001008:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <MX_SAI2_Init+0x148>)
 800100a:	2201      	movs	r2, #1
 800100c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <MX_SAI2_Init+0x148>)
 8001010:	2200      	movs	r2, #0
 8001012:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001014:	4807      	ldr	r0, [pc, #28]	; (8001034 <MX_SAI2_Init+0x148>)
 8001016:	f006 fafb 	bl	8007610 <HAL_SAI_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8001020:	f000 fe7e 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}
 8001028:	2000bf10 	.word	0x2000bf10
 800102c:	40015c04 	.word	0x40015c04
 8001030:	0002ee00 	.word	0x0002ee00
 8001034:	2000bd94 	.word	0x2000bd94
 8001038:	40015c24 	.word	0x40015c24

0800103c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <MX_SDMMC1_SD_Init+0x38>)
 8001042:	4a0d      	ldr	r2, [pc, #52]	; (8001078 <MX_SDMMC1_SD_Init+0x3c>)
 8001044:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001046:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <MX_SDMMC1_SD_Init+0x38>)
 8001048:	2200      	movs	r2, #0
 800104a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800104c:	4b09      	ldr	r3, [pc, #36]	; (8001074 <MX_SDMMC1_SD_Init+0x38>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001052:	4b08      	ldr	r3, [pc, #32]	; (8001074 <MX_SDMMC1_SD_Init+0x38>)
 8001054:	2200      	movs	r2, #0
 8001056:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <MX_SDMMC1_SD_Init+0x38>)
 800105a:	2200      	movs	r2, #0
 800105c:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800105e:	4b05      	ldr	r3, [pc, #20]	; (8001074 <MX_SDMMC1_SD_Init+0x38>)
 8001060:	2200      	movs	r2, #0
 8001062:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001064:	4b03      	ldr	r3, [pc, #12]	; (8001074 <MX_SDMMC1_SD_Init+0x38>)
 8001066:	2200      	movs	r2, #0
 8001068:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800106a:	bf00      	nop
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	2000bfb8 	.word	0x2000bfb8
 8001078:	40012c00 	.word	0x40012c00

0800107c <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001080:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <MX_SPDIFRX_Init+0x5c>)
 8001082:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001086:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001088:	4b13      	ldr	r3, [pc, #76]	; (80010d8 <MX_SPDIFRX_Init+0x5c>)
 800108a:	2200      	movs	r2, #0
 800108c:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 800108e:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <MX_SPDIFRX_Init+0x5c>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001094:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <MX_SPDIFRX_Init+0x5c>)
 8001096:	2200      	movs	r2, #0
 8001098:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 800109a:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <MX_SPDIFRX_Init+0x5c>)
 800109c:	2200      	movs	r2, #0
 800109e:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 80010a0:	4b0d      	ldr	r3, [pc, #52]	; (80010d8 <MX_SPDIFRX_Init+0x5c>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 80010a6:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <MX_SPDIFRX_Init+0x5c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 80010ac:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <MX_SPDIFRX_Init+0x5c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 80010b2:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <MX_SPDIFRX_Init+0x5c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 80010b8:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <MX_SPDIFRX_Init+0x5c>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <MX_SPDIFRX_Init+0x5c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 80010c4:	4804      	ldr	r0, [pc, #16]	; (80010d8 <MX_SPDIFRX_Init+0x5c>)
 80010c6:	f007 fd37 	bl	8008b38 <HAL_SPDIFRX_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 80010d0:	f000 fe26 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	2000bec4 	.word	0x2000bec4

080010dc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80010e0:	4b1b      	ldr	r3, [pc, #108]	; (8001150 <MX_SPI2_Init+0x74>)
 80010e2:	4a1c      	ldr	r2, [pc, #112]	; (8001154 <MX_SPI2_Init+0x78>)
 80010e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80010e6:	4b1a      	ldr	r3, [pc, #104]	; (8001150 <MX_SPI2_Init+0x74>)
 80010e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010ec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80010ee:	4b18      	ldr	r3, [pc, #96]	; (8001150 <MX_SPI2_Init+0x74>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80010f4:	4b16      	ldr	r3, [pc, #88]	; (8001150 <MX_SPI2_Init+0x74>)
 80010f6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80010fa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010fc:	4b14      	ldr	r3, [pc, #80]	; (8001150 <MX_SPI2_Init+0x74>)
 80010fe:	2200      	movs	r2, #0
 8001100:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001102:	4b13      	ldr	r3, [pc, #76]	; (8001150 <MX_SPI2_Init+0x74>)
 8001104:	2200      	movs	r2, #0
 8001106:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001108:	4b11      	ldr	r3, [pc, #68]	; (8001150 <MX_SPI2_Init+0x74>)
 800110a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800110e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001110:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <MX_SPI2_Init+0x74>)
 8001112:	2200      	movs	r2, #0
 8001114:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001116:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <MX_SPI2_Init+0x74>)
 8001118:	2200      	movs	r2, #0
 800111a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800111c:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <MX_SPI2_Init+0x74>)
 800111e:	2200      	movs	r2, #0
 8001120:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001122:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <MX_SPI2_Init+0x74>)
 8001124:	2200      	movs	r2, #0
 8001126:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001128:	4b09      	ldr	r3, [pc, #36]	; (8001150 <MX_SPI2_Init+0x74>)
 800112a:	2207      	movs	r2, #7
 800112c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800112e:	4b08      	ldr	r3, [pc, #32]	; (8001150 <MX_SPI2_Init+0x74>)
 8001130:	2200      	movs	r2, #0
 8001132:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001134:	4b06      	ldr	r3, [pc, #24]	; (8001150 <MX_SPI2_Init+0x74>)
 8001136:	2208      	movs	r2, #8
 8001138:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800113a:	4805      	ldr	r0, [pc, #20]	; (8001150 <MX_SPI2_Init+0x74>)
 800113c:	f007 fd58 	bl	8008bf0 <HAL_SPI_Init>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001146:	f000 fdeb 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	2000be20 	.word	0x2000be20
 8001154:	40003800 	.word	0x40003800

08001158 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b09a      	sub	sp, #104	; 0x68
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800115e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	609a      	str	r2, [r3, #8]
 800116a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800116c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001178:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
 8001188:	615a      	str	r2, [r3, #20]
 800118a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800118c:	1d3b      	adds	r3, r7, #4
 800118e:	222c      	movs	r2, #44	; 0x2c
 8001190:	2100      	movs	r1, #0
 8001192:	4618      	mov	r0, r3
 8001194:	f022 f9d9 	bl	802354a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001198:	4b43      	ldr	r3, [pc, #268]	; (80012a8 <MX_TIM1_Init+0x150>)
 800119a:	4a44      	ldr	r2, [pc, #272]	; (80012ac <MX_TIM1_Init+0x154>)
 800119c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800119e:	4b42      	ldr	r3, [pc, #264]	; (80012a8 <MX_TIM1_Init+0x150>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a4:	4b40      	ldr	r3, [pc, #256]	; (80012a8 <MX_TIM1_Init+0x150>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 80011aa:	4b3f      	ldr	r3, [pc, #252]	; (80012a8 <MX_TIM1_Init+0x150>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b0:	4b3d      	ldr	r3, [pc, #244]	; (80012a8 <MX_TIM1_Init+0x150>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011b6:	4b3c      	ldr	r3, [pc, #240]	; (80012a8 <MX_TIM1_Init+0x150>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011bc:	4b3a      	ldr	r3, [pc, #232]	; (80012a8 <MX_TIM1_Init+0x150>)
 80011be:	2200      	movs	r2, #0
 80011c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011c2:	4839      	ldr	r0, [pc, #228]	; (80012a8 <MX_TIM1_Init+0x150>)
 80011c4:	f007 fda6 	bl	8008d14 <HAL_TIM_Base_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80011ce:	f000 fda7 	bl	8001d20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d6:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011d8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011dc:	4619      	mov	r1, r3
 80011de:	4832      	ldr	r0, [pc, #200]	; (80012a8 <MX_TIM1_Init+0x150>)
 80011e0:	f008 f850 	bl	8009284 <HAL_TIM_ConfigClockSource>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80011ea:	f000 fd99 	bl	8001d20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011ee:	482e      	ldr	r0, [pc, #184]	; (80012a8 <MX_TIM1_Init+0x150>)
 80011f0:	f007 fde6 	bl	8008dc0 <HAL_TIM_PWM_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80011fa:	f000 fd91 	bl	8001d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011fe:	2300      	movs	r3, #0
 8001200:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001202:	2300      	movs	r3, #0
 8001204:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001206:	2300      	movs	r3, #0
 8001208:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800120a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800120e:	4619      	mov	r1, r3
 8001210:	4825      	ldr	r0, [pc, #148]	; (80012a8 <MX_TIM1_Init+0x150>)
 8001212:	f008 fcb1 	bl	8009b78 <HAL_TIMEx_MasterConfigSynchronization>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 800121c:	f000 fd80 	bl	8001d20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001220:	2360      	movs	r3, #96	; 0x60
 8001222:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001228:	2300      	movs	r3, #0
 800122a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800122c:	2300      	movs	r3, #0
 800122e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001230:	2300      	movs	r3, #0
 8001232:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001234:	2300      	movs	r3, #0
 8001236:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001238:	2300      	movs	r3, #0
 800123a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800123c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001240:	2200      	movs	r2, #0
 8001242:	4619      	mov	r1, r3
 8001244:	4818      	ldr	r0, [pc, #96]	; (80012a8 <MX_TIM1_Init+0x150>)
 8001246:	f007 ff05 	bl	8009054 <HAL_TIM_PWM_ConfigChannel>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001250:	f000 fd66 	bl	8001d20 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001254:	2300      	movs	r3, #0
 8001256:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001258:	2300      	movs	r3, #0
 800125a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800125c:	2300      	movs	r3, #0
 800125e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001268:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800126c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001272:	2300      	movs	r3, #0
 8001274:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001276:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800127a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800127c:	2300      	movs	r3, #0
 800127e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001280:	2300      	movs	r3, #0
 8001282:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	4619      	mov	r1, r3
 8001288:	4807      	ldr	r0, [pc, #28]	; (80012a8 <MX_TIM1_Init+0x150>)
 800128a:	f008 fd03 	bl	8009c94 <HAL_TIMEx_ConfigBreakDeadTime>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001294:	f000 fd44 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001298:	4803      	ldr	r0, [pc, #12]	; (80012a8 <MX_TIM1_Init+0x150>)
 800129a:	f001 fa3b 	bl	8002714 <HAL_TIM_MspPostInit>

}
 800129e:	bf00      	nop
 80012a0:	3768      	adds	r7, #104	; 0x68
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	2000c29c 	.word	0x2000c29c
 80012ac:	40010000 	.word	0x40010000

080012b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08e      	sub	sp, #56	; 0x38
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
 80012c0:	609a      	str	r2, [r3, #8]
 80012c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c4:	f107 031c 	add.w	r3, r7, #28
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012d0:	463b      	mov	r3, r7
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]
 80012dc:	611a      	str	r2, [r3, #16]
 80012de:	615a      	str	r2, [r3, #20]
 80012e0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012e2:	4b2d      	ldr	r3, [pc, #180]	; (8001398 <MX_TIM2_Init+0xe8>)
 80012e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012e8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80012ea:	4b2b      	ldr	r3, [pc, #172]	; (8001398 <MX_TIM2_Init+0xe8>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f0:	4b29      	ldr	r3, [pc, #164]	; (8001398 <MX_TIM2_Init+0xe8>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 80012f6:	4b28      	ldr	r3, [pc, #160]	; (8001398 <MX_TIM2_Init+0xe8>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012fc:	4b26      	ldr	r3, [pc, #152]	; (8001398 <MX_TIM2_Init+0xe8>)
 80012fe:	2200      	movs	r2, #0
 8001300:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001302:	4b25      	ldr	r3, [pc, #148]	; (8001398 <MX_TIM2_Init+0xe8>)
 8001304:	2200      	movs	r2, #0
 8001306:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001308:	4823      	ldr	r0, [pc, #140]	; (8001398 <MX_TIM2_Init+0xe8>)
 800130a:	f007 fd03 	bl	8008d14 <HAL_TIM_Base_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001314:	f000 fd04 	bl	8001d20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001318:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800131c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800131e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001322:	4619      	mov	r1, r3
 8001324:	481c      	ldr	r0, [pc, #112]	; (8001398 <MX_TIM2_Init+0xe8>)
 8001326:	f007 ffad 	bl	8009284 <HAL_TIM_ConfigClockSource>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001330:	f000 fcf6 	bl	8001d20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001334:	4818      	ldr	r0, [pc, #96]	; (8001398 <MX_TIM2_Init+0xe8>)
 8001336:	f007 fd43 	bl	8008dc0 <HAL_TIM_PWM_Init>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001340:	f000 fcee 	bl	8001d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001344:	2300      	movs	r3, #0
 8001346:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001348:	2300      	movs	r3, #0
 800134a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800134c:	f107 031c 	add.w	r3, r7, #28
 8001350:	4619      	mov	r1, r3
 8001352:	4811      	ldr	r0, [pc, #68]	; (8001398 <MX_TIM2_Init+0xe8>)
 8001354:	f008 fc10 	bl	8009b78 <HAL_TIMEx_MasterConfigSynchronization>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800135e:	f000 fcdf 	bl	8001d20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001362:	2360      	movs	r3, #96	; 0x60
 8001364:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800136a:	2300      	movs	r3, #0
 800136c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001372:	463b      	mov	r3, r7
 8001374:	2200      	movs	r2, #0
 8001376:	4619      	mov	r1, r3
 8001378:	4807      	ldr	r0, [pc, #28]	; (8001398 <MX_TIM2_Init+0xe8>)
 800137a:	f007 fe6b 	bl	8009054 <HAL_TIM_PWM_ConfigChannel>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001384:	f000 fccc 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001388:	4803      	ldr	r0, [pc, #12]	; (8001398 <MX_TIM2_Init+0xe8>)
 800138a:	f001 f9c3 	bl	8002714 <HAL_TIM_MspPostInit>

}
 800138e:	bf00      	nop
 8001390:	3738      	adds	r7, #56	; 0x38
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	2000c3a4 	.word	0x2000c3a4

0800139c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08e      	sub	sp, #56	; 0x38
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
 80013ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b0:	f107 031c 	add.w	r3, r7, #28
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013bc:	463b      	mov	r3, r7
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
 80013c8:	611a      	str	r2, [r3, #16]
 80013ca:	615a      	str	r2, [r3, #20]
 80013cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013ce:	4b2c      	ldr	r3, [pc, #176]	; (8001480 <MX_TIM3_Init+0xe4>)
 80013d0:	4a2c      	ldr	r2, [pc, #176]	; (8001484 <MX_TIM3_Init+0xe8>)
 80013d2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80013d4:	4b2a      	ldr	r3, [pc, #168]	; (8001480 <MX_TIM3_Init+0xe4>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013da:	4b29      	ldr	r3, [pc, #164]	; (8001480 <MX_TIM3_Init+0xe4>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 80013e0:	4b27      	ldr	r3, [pc, #156]	; (8001480 <MX_TIM3_Init+0xe4>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e6:	4b26      	ldr	r3, [pc, #152]	; (8001480 <MX_TIM3_Init+0xe4>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ec:	4b24      	ldr	r3, [pc, #144]	; (8001480 <MX_TIM3_Init+0xe4>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013f2:	4823      	ldr	r0, [pc, #140]	; (8001480 <MX_TIM3_Init+0xe4>)
 80013f4:	f007 fc8e 	bl	8008d14 <HAL_TIM_Base_Init>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80013fe:	f000 fc8f 	bl	8001d20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001402:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001406:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001408:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800140c:	4619      	mov	r1, r3
 800140e:	481c      	ldr	r0, [pc, #112]	; (8001480 <MX_TIM3_Init+0xe4>)
 8001410:	f007 ff38 	bl	8009284 <HAL_TIM_ConfigClockSource>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800141a:	f000 fc81 	bl	8001d20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800141e:	4818      	ldr	r0, [pc, #96]	; (8001480 <MX_TIM3_Init+0xe4>)
 8001420:	f007 fcce 	bl	8008dc0 <HAL_TIM_PWM_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800142a:	f000 fc79 	bl	8001d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001432:	2300      	movs	r3, #0
 8001434:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001436:	f107 031c 	add.w	r3, r7, #28
 800143a:	4619      	mov	r1, r3
 800143c:	4810      	ldr	r0, [pc, #64]	; (8001480 <MX_TIM3_Init+0xe4>)
 800143e:	f008 fb9b 	bl	8009b78 <HAL_TIMEx_MasterConfigSynchronization>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001448:	f000 fc6a 	bl	8001d20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800144c:	2360      	movs	r3, #96	; 0x60
 800144e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001450:	2300      	movs	r3, #0
 8001452:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001454:	2300      	movs	r3, #0
 8001456:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001458:	2300      	movs	r3, #0
 800145a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800145c:	463b      	mov	r3, r7
 800145e:	2200      	movs	r2, #0
 8001460:	4619      	mov	r1, r3
 8001462:	4807      	ldr	r0, [pc, #28]	; (8001480 <MX_TIM3_Init+0xe4>)
 8001464:	f007 fdf6 	bl	8009054 <HAL_TIM_PWM_ConfigChannel>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800146e:	f000 fc57 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001472:	4803      	ldr	r0, [pc, #12]	; (8001480 <MX_TIM3_Init+0xe4>)
 8001474:	f001 f94e 	bl	8002714 <HAL_TIM_MspPostInit>

}
 8001478:	bf00      	nop
 800147a:	3738      	adds	r7, #56	; 0x38
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	2000c07c 	.word	0x2000c07c
 8001484:	40000400 	.word	0x40000400

08001488 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08e      	sub	sp, #56	; 0x38
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800148e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	605a      	str	r2, [r3, #4]
 8001498:	609a      	str	r2, [r3, #8]
 800149a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800149c:	f107 031c 	add.w	r3, r7, #28
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014a8:	463b      	mov	r3, r7
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	60da      	str	r2, [r3, #12]
 80014b4:	611a      	str	r2, [r3, #16]
 80014b6:	615a      	str	r2, [r3, #20]
 80014b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80014ba:	4b2c      	ldr	r3, [pc, #176]	; (800156c <MX_TIM5_Init+0xe4>)
 80014bc:	4a2c      	ldr	r2, [pc, #176]	; (8001570 <MX_TIM5_Init+0xe8>)
 80014be:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80014c0:	4b2a      	ldr	r3, [pc, #168]	; (800156c <MX_TIM5_Init+0xe4>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c6:	4b29      	ldr	r3, [pc, #164]	; (800156c <MX_TIM5_Init+0xe4>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 80014cc:	4b27      	ldr	r3, [pc, #156]	; (800156c <MX_TIM5_Init+0xe4>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d2:	4b26      	ldr	r3, [pc, #152]	; (800156c <MX_TIM5_Init+0xe4>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014d8:	4b24      	ldr	r3, [pc, #144]	; (800156c <MX_TIM5_Init+0xe4>)
 80014da:	2200      	movs	r2, #0
 80014dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80014de:	4823      	ldr	r0, [pc, #140]	; (800156c <MX_TIM5_Init+0xe4>)
 80014e0:	f007 fc18 	bl	8008d14 <HAL_TIM_Base_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 80014ea:	f000 fc19 	bl	8001d20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014f2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80014f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014f8:	4619      	mov	r1, r3
 80014fa:	481c      	ldr	r0, [pc, #112]	; (800156c <MX_TIM5_Init+0xe4>)
 80014fc:	f007 fec2 	bl	8009284 <HAL_TIM_ConfigClockSource>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8001506:	f000 fc0b 	bl	8001d20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800150a:	4818      	ldr	r0, [pc, #96]	; (800156c <MX_TIM5_Init+0xe4>)
 800150c:	f007 fc58 	bl	8008dc0 <HAL_TIM_PWM_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8001516:	f000 fc03 	bl	8001d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800151a:	2300      	movs	r3, #0
 800151c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800151e:	2300      	movs	r3, #0
 8001520:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001522:	f107 031c 	add.w	r3, r7, #28
 8001526:	4619      	mov	r1, r3
 8001528:	4810      	ldr	r0, [pc, #64]	; (800156c <MX_TIM5_Init+0xe4>)
 800152a:	f008 fb25 	bl	8009b78 <HAL_TIMEx_MasterConfigSynchronization>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001534:	f000 fbf4 	bl	8001d20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001538:	2360      	movs	r3, #96	; 0x60
 800153a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001540:	2300      	movs	r3, #0
 8001542:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001544:	2300      	movs	r3, #0
 8001546:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001548:	463b      	mov	r3, r7
 800154a:	220c      	movs	r2, #12
 800154c:	4619      	mov	r1, r3
 800154e:	4807      	ldr	r0, [pc, #28]	; (800156c <MX_TIM5_Init+0xe4>)
 8001550:	f007 fd80 	bl	8009054 <HAL_TIM_PWM_ConfigChannel>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800155a:	f000 fbe1 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800155e:	4803      	ldr	r0, [pc, #12]	; (800156c <MX_TIM5_Init+0xe4>)
 8001560:	f001 f8d8 	bl	8002714 <HAL_TIM_MspPostInit>

}
 8001564:	bf00      	nop
 8001566:	3738      	adds	r7, #56	; 0x38
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	2000c03c 	.word	0x2000c03c
 8001570:	40000c00 	.word	0x40000c00

08001574 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b088      	sub	sp, #32
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800157a:	f107 0310 	add.w	r3, r7, #16
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]
 8001584:	609a      	str	r2, [r3, #8]
 8001586:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001588:	1d3b      	adds	r3, r7, #4
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]
 8001590:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001592:	4b1f      	ldr	r3, [pc, #124]	; (8001610 <MX_TIM8_Init+0x9c>)
 8001594:	4a1f      	ldr	r2, [pc, #124]	; (8001614 <MX_TIM8_Init+0xa0>)
 8001596:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001598:	4b1d      	ldr	r3, [pc, #116]	; (8001610 <MX_TIM8_Init+0x9c>)
 800159a:	2200      	movs	r2, #0
 800159c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800159e:	4b1c      	ldr	r3, [pc, #112]	; (8001610 <MX_TIM8_Init+0x9c>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 80015a4:	4b1a      	ldr	r3, [pc, #104]	; (8001610 <MX_TIM8_Init+0x9c>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015aa:	4b19      	ldr	r3, [pc, #100]	; (8001610 <MX_TIM8_Init+0x9c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80015b0:	4b17      	ldr	r3, [pc, #92]	; (8001610 <MX_TIM8_Init+0x9c>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b6:	4b16      	ldr	r3, [pc, #88]	; (8001610 <MX_TIM8_Init+0x9c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80015bc:	4814      	ldr	r0, [pc, #80]	; (8001610 <MX_TIM8_Init+0x9c>)
 80015be:	f007 fba9 	bl	8008d14 <HAL_TIM_Base_Init>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 80015c8:	f000 fbaa 	bl	8001d20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80015d2:	f107 0310 	add.w	r3, r7, #16
 80015d6:	4619      	mov	r1, r3
 80015d8:	480d      	ldr	r0, [pc, #52]	; (8001610 <MX_TIM8_Init+0x9c>)
 80015da:	f007 fe53 	bl	8009284 <HAL_TIM_ConfigClockSource>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 80015e4:	f000 fb9c 	bl	8001d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e8:	2300      	movs	r3, #0
 80015ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f0:	2300      	movs	r3, #0
 80015f2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80015f4:	1d3b      	adds	r3, r7, #4
 80015f6:	4619      	mov	r1, r3
 80015f8:	4805      	ldr	r0, [pc, #20]	; (8001610 <MX_TIM8_Init+0x9c>)
 80015fa:	f008 fabd 	bl	8009b78 <HAL_TIMEx_MasterConfigSynchronization>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8001604:	f000 fb8c 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001608:	bf00      	nop
 800160a:	3720      	adds	r7, #32
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	2000be84 	.word	0x2000be84
 8001614:	40010400 	.word	0x40010400

08001618 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b088      	sub	sp, #32
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]
 800162c:	615a      	str	r2, [r3, #20]
 800162e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001630:	4b19      	ldr	r3, [pc, #100]	; (8001698 <MX_TIM12_Init+0x80>)
 8001632:	4a1a      	ldr	r2, [pc, #104]	; (800169c <MX_TIM12_Init+0x84>)
 8001634:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001636:	4b18      	ldr	r3, [pc, #96]	; (8001698 <MX_TIM12_Init+0x80>)
 8001638:	2200      	movs	r2, #0
 800163a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800163c:	4b16      	ldr	r3, [pc, #88]	; (8001698 <MX_TIM12_Init+0x80>)
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 8001642:	4b15      	ldr	r3, [pc, #84]	; (8001698 <MX_TIM12_Init+0x80>)
 8001644:	2200      	movs	r2, #0
 8001646:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001648:	4b13      	ldr	r3, [pc, #76]	; (8001698 <MX_TIM12_Init+0x80>)
 800164a:	2200      	movs	r2, #0
 800164c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800164e:	4b12      	ldr	r3, [pc, #72]	; (8001698 <MX_TIM12_Init+0x80>)
 8001650:	2200      	movs	r2, #0
 8001652:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001654:	4810      	ldr	r0, [pc, #64]	; (8001698 <MX_TIM12_Init+0x80>)
 8001656:	f007 fbb3 	bl	8008dc0 <HAL_TIM_PWM_Init>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 8001660:	f000 fb5e 	bl	8001d20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001664:	2360      	movs	r3, #96	; 0x60
 8001666:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001668:	2300      	movs	r3, #0
 800166a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800166c:	2300      	movs	r3, #0
 800166e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001674:	1d3b      	adds	r3, r7, #4
 8001676:	2200      	movs	r2, #0
 8001678:	4619      	mov	r1, r3
 800167a:	4807      	ldr	r0, [pc, #28]	; (8001698 <MX_TIM12_Init+0x80>)
 800167c:	f007 fcea 	bl	8009054 <HAL_TIM_PWM_ConfigChannel>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 8001686:	f000 fb4b 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800168a:	4803      	ldr	r0, [pc, #12]	; (8001698 <MX_TIM12_Init+0x80>)
 800168c:	f001 f842 	bl	8002714 <HAL_TIM_MspPostInit>

}
 8001690:	bf00      	nop
 8001692:	3720      	adds	r7, #32
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	2000c40c 	.word	0x2000c40c
 800169c:	40001800 	.word	0x40001800

080016a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016a4:	4b14      	ldr	r3, [pc, #80]	; (80016f8 <MX_USART1_UART_Init+0x58>)
 80016a6:	4a15      	ldr	r2, [pc, #84]	; (80016fc <MX_USART1_UART_Init+0x5c>)
 80016a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016aa:	4b13      	ldr	r3, [pc, #76]	; (80016f8 <MX_USART1_UART_Init+0x58>)
 80016ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016b2:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <MX_USART1_UART_Init+0x58>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016b8:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <MX_USART1_UART_Init+0x58>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016be:	4b0e      	ldr	r3, [pc, #56]	; (80016f8 <MX_USART1_UART_Init+0x58>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016c4:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <MX_USART1_UART_Init+0x58>)
 80016c6:	220c      	movs	r2, #12
 80016c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ca:	4b0b      	ldr	r3, [pc, #44]	; (80016f8 <MX_USART1_UART_Init+0x58>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016d0:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <MX_USART1_UART_Init+0x58>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016d6:	4b08      	ldr	r3, [pc, #32]	; (80016f8 <MX_USART1_UART_Init+0x58>)
 80016d8:	2200      	movs	r2, #0
 80016da:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016dc:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <MX_USART1_UART_Init+0x58>)
 80016de:	2200      	movs	r2, #0
 80016e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016e2:	4805      	ldr	r0, [pc, #20]	; (80016f8 <MX_USART1_UART_Init+0x58>)
 80016e4:	f008 fb72 	bl	8009dcc <HAL_UART_Init>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80016ee:	f000 fb17 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	2000c1fc 	.word	0x2000c1fc
 80016fc:	40011000 	.word	0x40011000

08001700 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001704:	4b14      	ldr	r3, [pc, #80]	; (8001758 <MX_USART6_UART_Init+0x58>)
 8001706:	4a15      	ldr	r2, [pc, #84]	; (800175c <MX_USART6_UART_Init+0x5c>)
 8001708:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800170a:	4b13      	ldr	r3, [pc, #76]	; (8001758 <MX_USART6_UART_Init+0x58>)
 800170c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001710:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001712:	4b11      	ldr	r3, [pc, #68]	; (8001758 <MX_USART6_UART_Init+0x58>)
 8001714:	2200      	movs	r2, #0
 8001716:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001718:	4b0f      	ldr	r3, [pc, #60]	; (8001758 <MX_USART6_UART_Init+0x58>)
 800171a:	2200      	movs	r2, #0
 800171c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800171e:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <MX_USART6_UART_Init+0x58>)
 8001720:	2200      	movs	r2, #0
 8001722:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <MX_USART6_UART_Init+0x58>)
 8001726:	220c      	movs	r2, #12
 8001728:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800172a:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <MX_USART6_UART_Init+0x58>)
 800172c:	2200      	movs	r2, #0
 800172e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001730:	4b09      	ldr	r3, [pc, #36]	; (8001758 <MX_USART6_UART_Init+0x58>)
 8001732:	2200      	movs	r2, #0
 8001734:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001736:	4b08      	ldr	r3, [pc, #32]	; (8001758 <MX_USART6_UART_Init+0x58>)
 8001738:	2200      	movs	r2, #0
 800173a:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800173c:	4b06      	ldr	r3, [pc, #24]	; (8001758 <MX_USART6_UART_Init+0x58>)
 800173e:	2200      	movs	r2, #0
 8001740:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001742:	4805      	ldr	r0, [pc, #20]	; (8001758 <MX_USART6_UART_Init+0x58>)
 8001744:	f008 fb42 	bl	8009dcc <HAL_UART_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800174e:	f000 fae7 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	2000c2dc 	.word	0x2000c2dc
 800175c:	40011400 	.word	0x40011400

08001760 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b088      	sub	sp, #32
 8001764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001766:	1d3b      	adds	r3, r7, #4
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
 8001774:	615a      	str	r2, [r3, #20]
 8001776:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001778:	4b4c      	ldr	r3, [pc, #304]	; (80018ac <MX_FMC_Init+0x14c>)
 800177a:	4a4d      	ldr	r2, [pc, #308]	; (80018b0 <MX_FMC_Init+0x150>)
 800177c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800177e:	4b4b      	ldr	r3, [pc, #300]	; (80018ac <MX_FMC_Init+0x14c>)
 8001780:	2200      	movs	r2, #0
 8001782:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001784:	4b49      	ldr	r3, [pc, #292]	; (80018ac <MX_FMC_Init+0x14c>)
 8001786:	2200      	movs	r2, #0
 8001788:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800178a:	4b48      	ldr	r3, [pc, #288]	; (80018ac <MX_FMC_Init+0x14c>)
 800178c:	2204      	movs	r2, #4
 800178e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001790:	4b46      	ldr	r3, [pc, #280]	; (80018ac <MX_FMC_Init+0x14c>)
 8001792:	2210      	movs	r2, #16
 8001794:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001796:	4b45      	ldr	r3, [pc, #276]	; (80018ac <MX_FMC_Init+0x14c>)
 8001798:	2240      	movs	r2, #64	; 0x40
 800179a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800179c:	4b43      	ldr	r3, [pc, #268]	; (80018ac <MX_FMC_Init+0x14c>)
 800179e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80017a2:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80017a4:	4b41      	ldr	r3, [pc, #260]	; (80018ac <MX_FMC_Init+0x14c>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80017aa:	4b40      	ldr	r3, [pc, #256]	; (80018ac <MX_FMC_Init+0x14c>)
 80017ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017b0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80017b2:	4b3e      	ldr	r3, [pc, #248]	; (80018ac <MX_FMC_Init+0x14c>)
 80017b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017b8:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80017ba:	4b3c      	ldr	r3, [pc, #240]	; (80018ac <MX_FMC_Init+0x14c>)
 80017bc:	2200      	movs	r2, #0
 80017be:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80017c0:	2302      	movs	r3, #2
 80017c2:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80017c4:	2307      	movs	r3, #7
 80017c6:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80017c8:	2304      	movs	r3, #4
 80017ca:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80017cc:	2307      	movs	r3, #7
 80017ce:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80017d0:	2303      	movs	r3, #3
 80017d2:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80017d4:	2302      	movs	r3, #2
 80017d6:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80017d8:	2302      	movs	r3, #2
 80017da:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80017dc:	1d3b      	adds	r3, r7, #4
 80017de:	4619      	mov	r1, r3
 80017e0:	4832      	ldr	r0, [pc, #200]	; (80018ac <MX_FMC_Init+0x14c>)
 80017e2:	f007 f929 	bl	8008a38 <HAL_SDRAM_Init>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80017ec:	f000 fa98 	bl	8001d20 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  __IO uint32_t tmpmrd = 0;
 80017f0:	2300      	movs	r3, #0
 80017f2:	603b      	str	r3, [r7, #0]

    /* Step 1: Configure a clock configuration enable command */
    Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80017f4:	4b2f      	ldr	r3, [pc, #188]	; (80018b4 <MX_FMC_Init+0x154>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 80017fa:	4b2e      	ldr	r3, [pc, #184]	; (80018b4 <MX_FMC_Init+0x154>)
 80017fc:	2210      	movs	r2, #16
 80017fe:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 8001800:	4b2c      	ldr	r3, [pc, #176]	; (80018b4 <MX_FMC_Init+0x154>)
 8001802:	2201      	movs	r2, #1
 8001804:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 8001806:	4b2b      	ldr	r3, [pc, #172]	; (80018b4 <MX_FMC_Init+0x154>)
 8001808:	2200      	movs	r2, #0
 800180a:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800180c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001810:	4928      	ldr	r1, [pc, #160]	; (80018b4 <MX_FMC_Init+0x154>)
 8001812:	4826      	ldr	r0, [pc, #152]	; (80018ac <MX_FMC_Init+0x14c>)
 8001814:	f007 f944 	bl	8008aa0 <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 8001818:	2001      	movs	r0, #1
 800181a:	f001 fba3 	bl	8002f64 <HAL_Delay>

    /* Step 3: Configure a PALL (precharge all) command */
    Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800181e:	4b25      	ldr	r3, [pc, #148]	; (80018b4 <MX_FMC_Init+0x154>)
 8001820:	2202      	movs	r2, #2
 8001822:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001824:	4b23      	ldr	r3, [pc, #140]	; (80018b4 <MX_FMC_Init+0x154>)
 8001826:	2210      	movs	r2, #16
 8001828:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 800182a:	4b22      	ldr	r3, [pc, #136]	; (80018b4 <MX_FMC_Init+0x154>)
 800182c:	2201      	movs	r2, #1
 800182e:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 8001830:	4b20      	ldr	r3, [pc, #128]	; (80018b4 <MX_FMC_Init+0x154>)
 8001832:	2200      	movs	r2, #0
 8001834:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001836:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800183a:	491e      	ldr	r1, [pc, #120]	; (80018b4 <MX_FMC_Init+0x154>)
 800183c:	481b      	ldr	r0, [pc, #108]	; (80018ac <MX_FMC_Init+0x14c>)
 800183e:	f007 f92f 	bl	8008aa0 <HAL_SDRAM_SendCommand>

    /* Step 4: Configure an Auto Refresh command */
    Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001842:	4b1c      	ldr	r3, [pc, #112]	; (80018b4 <MX_FMC_Init+0x154>)
 8001844:	2203      	movs	r2, #3
 8001846:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001848:	4b1a      	ldr	r3, [pc, #104]	; (80018b4 <MX_FMC_Init+0x154>)
 800184a:	2210      	movs	r2, #16
 800184c:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 8;
 800184e:	4b19      	ldr	r3, [pc, #100]	; (80018b4 <MX_FMC_Init+0x154>)
 8001850:	2208      	movs	r2, #8
 8001852:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 8001854:	4b17      	ldr	r3, [pc, #92]	; (80018b4 <MX_FMC_Init+0x154>)
 8001856:	2200      	movs	r2, #0
 8001858:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800185a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800185e:	4915      	ldr	r1, [pc, #84]	; (80018b4 <MX_FMC_Init+0x154>)
 8001860:	4812      	ldr	r0, [pc, #72]	; (80018ac <MX_FMC_Init+0x14c>)
 8001862:	f007 f91d 	bl	8008aa0 <HAL_SDRAM_SendCommand>

    /* Step 5: Program the external memory mode register */
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 8001866:	f44f 730c 	mov.w	r3, #560	; 0x230
 800186a:	603b      	str	r3, [r7, #0]
             SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL    | \
             SDRAM_MODEREG_CAS_LATENCY_3            | \
             SDRAM_MODEREG_OPERATING_MODE_STANDARD  | \
             SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

    Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800186c:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <MX_FMC_Init+0x154>)
 800186e:	2204      	movs	r2, #4
 8001870:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001872:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <MX_FMC_Init+0x154>)
 8001874:	2210      	movs	r2, #16
 8001876:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 8001878:	4b0e      	ldr	r3, [pc, #56]	; (80018b4 <MX_FMC_Init+0x154>)
 800187a:	2201      	movs	r2, #1
 800187c:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = tmpmrd;
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	4a0c      	ldr	r2, [pc, #48]	; (80018b4 <MX_FMC_Init+0x154>)
 8001882:	60d3      	str	r3, [r2, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001884:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001888:	490a      	ldr	r1, [pc, #40]	; (80018b4 <MX_FMC_Init+0x154>)
 800188a:	4808      	ldr	r0, [pc, #32]	; (80018ac <MX_FMC_Init+0x14c>)
 800188c:	f007 f908 	bl	8008aa0 <HAL_SDRAM_SendCommand>

    /* Step 6: Set the refresh rate counter */
    /* Set the device refresh rate */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 8001890:	f240 712b 	movw	r1, #1835	; 0x72b
 8001894:	4805      	ldr	r0, [pc, #20]	; (80018ac <MX_FMC_Init+0x14c>)
 8001896:	f007 f92e 	bl	8008af6 <HAL_SDRAM_ProgramRefreshRate>

    //Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
    FMC_Bank1->BTCR[0] = 0x000030D2;
 800189a:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800189e:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80018a2:	601a      	str	r2, [r3, #0]
  /* USER CODE END FMC_Init 2 */
}
 80018a4:	bf00      	nop
 80018a6:	3720      	adds	r7, #32
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	2000c44c 	.word	0x2000c44c
 80018b0:	a0000140 	.word	0xa0000140
 80018b4:	20000370 	.word	0x20000370

080018b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b090      	sub	sp, #64	; 0x40
 80018bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	609a      	str	r2, [r3, #8]
 80018ca:	60da      	str	r2, [r3, #12]
 80018cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018ce:	4baf      	ldr	r3, [pc, #700]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	4aae      	ldr	r2, [pc, #696]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 80018d4:	f043 0310 	orr.w	r3, r3, #16
 80018d8:	6313      	str	r3, [r2, #48]	; 0x30
 80018da:	4bac      	ldr	r3, [pc, #688]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	f003 0310 	and.w	r3, r3, #16
 80018e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80018e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80018e6:	4ba9      	ldr	r3, [pc, #676]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	4aa8      	ldr	r2, [pc, #672]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 80018ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018f0:	6313      	str	r3, [r2, #48]	; 0x30
 80018f2:	4ba6      	ldr	r3, [pc, #664]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018fa:	627b      	str	r3, [r7, #36]	; 0x24
 80018fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fe:	4ba3      	ldr	r3, [pc, #652]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	4aa2      	ldr	r2, [pc, #648]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 8001904:	f043 0302 	orr.w	r3, r3, #2
 8001908:	6313      	str	r3, [r2, #48]	; 0x30
 800190a:	4ba0      	ldr	r3, [pc, #640]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	623b      	str	r3, [r7, #32]
 8001914:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001916:	4b9d      	ldr	r3, [pc, #628]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	4a9c      	ldr	r2, [pc, #624]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 800191c:	f043 0308 	orr.w	r3, r3, #8
 8001920:	6313      	str	r3, [r2, #48]	; 0x30
 8001922:	4b9a      	ldr	r3, [pc, #616]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	f003 0308 	and.w	r3, r3, #8
 800192a:	61fb      	str	r3, [r7, #28]
 800192c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800192e:	4b97      	ldr	r3, [pc, #604]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	4a96      	ldr	r2, [pc, #600]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 8001934:	f043 0304 	orr.w	r3, r3, #4
 8001938:	6313      	str	r3, [r2, #48]	; 0x30
 800193a:	4b94      	ldr	r3, [pc, #592]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	f003 0304 	and.w	r3, r3, #4
 8001942:	61bb      	str	r3, [r7, #24]
 8001944:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001946:	4b91      	ldr	r3, [pc, #580]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	4a90      	ldr	r2, [pc, #576]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 800194c:	f043 0301 	orr.w	r3, r3, #1
 8001950:	6313      	str	r3, [r2, #48]	; 0x30
 8001952:	4b8e      	ldr	r3, [pc, #568]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800195e:	4b8b      	ldr	r3, [pc, #556]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	4a8a      	ldr	r2, [pc, #552]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 8001964:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001968:	6313      	str	r3, [r2, #48]	; 0x30
 800196a:	4b88      	ldr	r3, [pc, #544]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001972:	613b      	str	r3, [r7, #16]
 8001974:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001976:	4b85      	ldr	r3, [pc, #532]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	4a84      	ldr	r2, [pc, #528]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 800197c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001980:	6313      	str	r3, [r2, #48]	; 0x30
 8001982:	4b82      	ldr	r3, [pc, #520]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800198e:	4b7f      	ldr	r3, [pc, #508]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	4a7e      	ldr	r2, [pc, #504]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 8001994:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001998:	6313      	str	r3, [r2, #48]	; 0x30
 800199a:	4b7c      	ldr	r3, [pc, #496]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019a2:	60bb      	str	r3, [r7, #8]
 80019a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019a6:	4b79      	ldr	r3, [pc, #484]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	4a78      	ldr	r2, [pc, #480]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 80019ac:	f043 0320 	orr.w	r3, r3, #32
 80019b0:	6313      	str	r3, [r2, #48]	; 0x30
 80019b2:	4b76      	ldr	r3, [pc, #472]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	f003 0320 	and.w	r3, r3, #32
 80019ba:	607b      	str	r3, [r7, #4]
 80019bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019be:	4b73      	ldr	r3, [pc, #460]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	4a72      	ldr	r2, [pc, #456]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 80019c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019c8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ca:	4b70      	ldr	r3, [pc, #448]	; (8001b8c <MX_GPIO_Init+0x2d4>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019d2:	603b      	str	r3, [r7, #0]
 80019d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80019d6:	2201      	movs	r2, #1
 80019d8:	2120      	movs	r1, #32
 80019da:	486d      	ldr	r0, [pc, #436]	; (8001b90 <MX_GPIO_Init+0x2d8>)
 80019dc:	f003 fbb8 	bl	8005150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 80019e0:	2200      	movs	r2, #0
 80019e2:	210c      	movs	r1, #12
 80019e4:	486b      	ldr	r0, [pc, #428]	; (8001b94 <MX_GPIO_Init+0x2dc>)
 80019e6:	f003 fbb3 	bl	8005150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80019ea:	2201      	movs	r2, #1
 80019ec:	2108      	movs	r1, #8
 80019ee:	486a      	ldr	r0, [pc, #424]	; (8001b98 <MX_GPIO_Init+0x2e0>)
 80019f0:	f003 fbae 	bl	8005150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80019f4:	2201      	movs	r2, #1
 80019f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019fa:	4866      	ldr	r0, [pc, #408]	; (8001b94 <MX_GPIO_Init+0x2dc>)
 80019fc:	f003 fba8 	bl	8005150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8001a00:	2200      	movs	r2, #0
 8001a02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a06:	4865      	ldr	r0, [pc, #404]	; (8001b9c <MX_GPIO_Init+0x2e4>)
 8001a08:	f003 fba2 	bl	8005150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	21c8      	movs	r1, #200	; 0xc8
 8001a10:	4863      	ldr	r0, [pc, #396]	; (8001ba0 <MX_GPIO_Init+0x2e8>)
 8001a12:	f003 fb9d 	bl	8005150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001a16:	2308      	movs	r3, #8
 8001a18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a26:	4619      	mov	r1, r3
 8001a28:	485e      	ldr	r0, [pc, #376]	; (8001ba4 <MX_GPIO_Init+0x2ec>)
 8001a2a:	f003 f9cf 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001a2e:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001a32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a34:	2302      	movs	r3, #2
 8001a36:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a40:	230b      	movs	r3, #11
 8001a42:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4855      	ldr	r0, [pc, #340]	; (8001ba0 <MX_GPIO_Init+0x2e8>)
 8001a4c:	f003 f9be 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 8001a50:	f643 4323 	movw	r3, #15395	; 0x3c23
 8001a54:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a56:	2302      	movs	r3, #2
 8001a58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001a62:	230a      	movs	r3, #10
 8001a64:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	484e      	ldr	r0, [pc, #312]	; (8001ba8 <MX_GPIO_Init+0x2f0>)
 8001a6e:	f003 f9ad 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001a72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a84:	4619      	mov	r1, r3
 8001a86:	4849      	ldr	r0, [pc, #292]	; (8001bac <MX_GPIO_Init+0x2f4>)
 8001a88:	f003 f9a0 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001a8c:	2340      	movs	r3, #64	; 0x40
 8001a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a90:	4b47      	ldr	r3, [pc, #284]	; (8001bb0 <MX_GPIO_Init+0x2f8>)
 8001a92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a94:	2300      	movs	r3, #0
 8001a96:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001a98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	483c      	ldr	r0, [pc, #240]	; (8001b90 <MX_GPIO_Init+0x2d8>)
 8001aa0:	f003 f994 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8001aa4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001ab6:	230a      	movs	r3, #10
 8001ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001abe:	4619      	mov	r1, r3
 8001ac0:	483c      	ldr	r0, [pc, #240]	; (8001bb4 <MX_GPIO_Init+0x2fc>)
 8001ac2:	f003 f983 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001ac6:	2320      	movs	r3, #32
 8001ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aca:	2301      	movs	r3, #1
 8001acc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001ad6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ada:	4619      	mov	r1, r3
 8001adc:	482c      	ldr	r0, [pc, #176]	; (8001b90 <MX_GPIO_Init+0x2d8>)
 8001ade:	f003 f975 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8001ae2:	f241 030c 	movw	r3, #4108	; 0x100c
 8001ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af0:	2300      	movs	r3, #0
 8001af2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001af4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001af8:	4619      	mov	r1, r3
 8001afa:	4826      	ldr	r0, [pc, #152]	; (8001b94 <MX_GPIO_Init+0x2dc>)
 8001afc:	f003 f966 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001b00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b06:	2300      	movs	r3, #0
 8001b08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001b0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b12:	4619      	mov	r1, r3
 8001b14:	4828      	ldr	r0, [pc, #160]	; (8001bb8 <MX_GPIO_Init+0x300>)
 8001b16:	f003 f959 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001b1a:	2308      	movs	r3, #8
 8001b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b26:	2300      	movs	r3, #0
 8001b28:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001b2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4819      	ldr	r0, [pc, #100]	; (8001b98 <MX_GPIO_Init+0x2e0>)
 8001b32:	f003 f94b 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001b36:	2310      	movs	r3, #16
 8001b38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001b42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b46:	4619      	mov	r1, r3
 8001b48:	4811      	ldr	r0, [pc, #68]	; (8001b90 <MX_GPIO_Init+0x2d8>)
 8001b4a:	f003 f93f 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001b4e:	f248 0304 	movw	r3, #32772	; 0x8004
 8001b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b54:	2300      	movs	r3, #0
 8001b56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b60:	4619      	mov	r1, r3
 8001b62:	480e      	ldr	r0, [pc, #56]	; (8001b9c <MX_GPIO_Init+0x2e4>)
 8001b64:	f003 f932 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001b68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b76:	2300      	movs	r3, #0
 8001b78:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001b7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4806      	ldr	r0, [pc, #24]	; (8001b9c <MX_GPIO_Init+0x2e4>)
 8001b82:	f003 f923 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001b86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b8a:	e017      	b.n	8001bbc <MX_GPIO_Init+0x304>
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	40020c00 	.word	0x40020c00
 8001b94:	40022000 	.word	0x40022000
 8001b98:	40022800 	.word	0x40022800
 8001b9c:	40021c00 	.word	0x40021c00
 8001ba0:	40021800 	.word	0x40021800
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	40020400 	.word	0x40020400
 8001bac:	40022400 	.word	0x40022400
 8001bb0:	10120000 	.word	0x10120000
 8001bb4:	40020000 	.word	0x40020000
 8001bb8:	40020800 	.word	0x40020800
 8001bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001bbe:	4b44      	ldr	r3, [pc, #272]	; (8001cd0 <MX_GPIO_Init+0x418>)
 8001bc0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001bc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4841      	ldr	r0, [pc, #260]	; (8001cd4 <MX_GPIO_Init+0x41c>)
 8001bce:	f003 f8fd 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001bd2:	2310      	movs	r3, #16
 8001bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bde:	2303      	movs	r3, #3
 8001be0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001be2:	230a      	movs	r3, #10
 8001be4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001be6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bea:	4619      	mov	r1, r3
 8001bec:	483a      	ldr	r0, [pc, #232]	; (8001cd8 <MX_GPIO_Init+0x420>)
 8001bee:	f003 f8ed 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001bf2:	23c8      	movs	r3, #200	; 0xc8
 8001bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c06:	4619      	mov	r1, r3
 8001c08:	4834      	ldr	r0, [pc, #208]	; (8001cdc <MX_GPIO_Init+0x424>)
 8001c0a:	f003 f8df 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001c0e:	2305      	movs	r3, #5
 8001c10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c12:	2302      	movs	r3, #2
 8001c14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001c1e:	230a      	movs	r3, #10
 8001c20:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c26:	4619      	mov	r1, r3
 8001c28:	482d      	ldr	r0, [pc, #180]	; (8001ce0 <MX_GPIO_Init+0x428>)
 8001c2a:	f003 f8cf 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001c2e:	2332      	movs	r3, #50	; 0x32
 8001c30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c32:	2302      	movs	r3, #2
 8001c34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c36:	2300      	movs	r3, #0
 8001c38:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c3e:	230b      	movs	r3, #11
 8001c40:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c46:	4619      	mov	r1, r3
 8001c48:	4825      	ldr	r0, [pc, #148]	; (8001ce0 <MX_GPIO_Init+0x428>)
 8001c4a:	f003 f8bf 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001c4e:	2304      	movs	r3, #4
 8001c50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c52:	2300      	movs	r3, #0
 8001c54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001c5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c5e:	4619      	mov	r1, r3
 8001c60:	481e      	ldr	r0, [pc, #120]	; (8001cdc <MX_GPIO_Init+0x424>)
 8001c62:	f003 f8b3 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001c66:	2386      	movs	r3, #134	; 0x86
 8001c68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c72:	2303      	movs	r3, #3
 8001c74:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c76:	230b      	movs	r3, #11
 8001c78:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4818      	ldr	r0, [pc, #96]	; (8001ce4 <MX_GPIO_Init+0x42c>)
 8001c82:	f003 f8a3 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001c86:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c8c:	2312      	movs	r3, #18
 8001c8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c90:	2301      	movs	r3, #1
 8001c92:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c94:	2303      	movs	r3, #3
 8001c96:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001c98:	2304      	movs	r3, #4
 8001c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	480d      	ldr	r0, [pc, #52]	; (8001cd8 <MX_GPIO_Init+0x420>)
 8001ca4:	f003 f892 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001ca8:	2328      	movs	r3, #40	; 0x28
 8001caa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cac:	2302      	movs	r3, #2
 8001cae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001cb8:	230a      	movs	r3, #10
 8001cba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4808      	ldr	r0, [pc, #32]	; (8001ce4 <MX_GPIO_Init+0x42c>)
 8001cc4:	f003 f882 	bl	8004dcc <HAL_GPIO_Init>

}
 8001cc8:	bf00      	nop
 8001cca:	3740      	adds	r7, #64	; 0x40
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	10120000 	.word	0x10120000
 8001cd4:	40022000 	.word	0x40022000
 8001cd8:	40021c00 	.word	0x40021c00
 8001cdc:	40021800 	.word	0x40021800
 8001ce0:	40020800 	.word	0x40020800
 8001ce4:	40020000 	.word	0x40020000

08001ce8 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  MX_TouchGFX_Process();
 8001cf0:	f00c fba6 	bl	800e440 <MX_TouchGFX_Process>
  /* Infinite loop */

  for(;;)
  {
    osDelay(1);
 8001cf4:	2001      	movs	r0, #1
 8001cf6:	f009 fe6d 	bl	800b9d4 <osDelay>
 8001cfa:	e7fb      	b.n	8001cf4 <StartDefaultTask+0xc>

08001cfc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a04      	ldr	r2, [pc, #16]	; (8001d1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d101      	bne.n	8001d12 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d0e:	f001 f909 	bl	8002f24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d12:	bf00      	nop
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40001000 	.word	0x40001000

08001d20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d24:	bf00      	nop
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
	...

08001d30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d36:	4b11      	ldr	r3, [pc, #68]	; (8001d7c <HAL_MspInit+0x4c>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	4a10      	ldr	r2, [pc, #64]	; (8001d7c <HAL_MspInit+0x4c>)
 8001d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d40:	6413      	str	r3, [r2, #64]	; 0x40
 8001d42:	4b0e      	ldr	r3, [pc, #56]	; (8001d7c <HAL_MspInit+0x4c>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4a:	607b      	str	r3, [r7, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d4e:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <HAL_MspInit+0x4c>)
 8001d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d52:	4a0a      	ldr	r2, [pc, #40]	; (8001d7c <HAL_MspInit+0x4c>)
 8001d54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d58:	6453      	str	r3, [r2, #68]	; 0x44
 8001d5a:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <HAL_MspInit+0x4c>)
 8001d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d62:	603b      	str	r3, [r7, #0]
 8001d64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d66:	2200      	movs	r2, #0
 8001d68:	210f      	movs	r1, #15
 8001d6a:	f06f 0001 	mvn.w	r0, #1
 8001d6e:	f002 f9ff 	bl	8004170 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40023800 	.word	0x40023800

08001d80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b08a      	sub	sp, #40	; 0x28
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d88:	f107 0314 	add.w	r3, r7, #20
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	609a      	str	r2, [r3, #8]
 8001d94:	60da      	str	r2, [r3, #12]
 8001d96:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a21      	ldr	r2, [pc, #132]	; (8001e24 <HAL_ADC_MspInit+0xa4>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d13c      	bne.n	8001e1c <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001da2:	4b21      	ldr	r3, [pc, #132]	; (8001e28 <HAL_ADC_MspInit+0xa8>)
 8001da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da6:	4a20      	ldr	r2, [pc, #128]	; (8001e28 <HAL_ADC_MspInit+0xa8>)
 8001da8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dac:	6453      	str	r3, [r2, #68]	; 0x44
 8001dae:	4b1e      	ldr	r3, [pc, #120]	; (8001e28 <HAL_ADC_MspInit+0xa8>)
 8001db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001db6:	613b      	str	r3, [r7, #16]
 8001db8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001dba:	4b1b      	ldr	r3, [pc, #108]	; (8001e28 <HAL_ADC_MspInit+0xa8>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	4a1a      	ldr	r2, [pc, #104]	; (8001e28 <HAL_ADC_MspInit+0xa8>)
 8001dc0:	f043 0320 	orr.w	r3, r3, #32
 8001dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc6:	4b18      	ldr	r3, [pc, #96]	; (8001e28 <HAL_ADC_MspInit+0xa8>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	f003 0320 	and.w	r3, r3, #32
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd2:	4b15      	ldr	r3, [pc, #84]	; (8001e28 <HAL_ADC_MspInit+0xa8>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	4a14      	ldr	r2, [pc, #80]	; (8001e28 <HAL_ADC_MspInit+0xa8>)
 8001dd8:	f043 0301 	orr.w	r3, r3, #1
 8001ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dde:	4b12      	ldr	r3, [pc, #72]	; (8001e28 <HAL_ADC_MspInit+0xa8>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	60bb      	str	r3, [r7, #8]
 8001de8:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 8001dea:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001dee:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001df0:	2303      	movs	r3, #3
 8001df2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001df8:	f107 0314 	add.w	r3, r7, #20
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	480b      	ldr	r0, [pc, #44]	; (8001e2c <HAL_ADC_MspInit+0xac>)
 8001e00:	f002 ffe4 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001e04:	2301      	movs	r3, #1
 8001e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001e10:	f107 0314 	add.w	r3, r7, #20
 8001e14:	4619      	mov	r1, r3
 8001e16:	4806      	ldr	r0, [pc, #24]	; (8001e30 <HAL_ADC_MspInit+0xb0>)
 8001e18:	f002 ffd8 	bl	8004dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001e1c:	bf00      	nop
 8001e1e:	3728      	adds	r7, #40	; 0x28
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40012200 	.word	0x40012200
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	40021400 	.word	0x40021400
 8001e30:	40020000 	.word	0x40020000

08001e34 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b08a      	sub	sp, #40	; 0x28
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e3c:	f107 0314 	add.w	r3, r7, #20
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	60da      	str	r2, [r3, #12]
 8001e4a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a1b      	ldr	r2, [pc, #108]	; (8001ec0 <HAL_CAN_MspInit+0x8c>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d130      	bne.n	8001eb8 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001e56:	4b1b      	ldr	r3, [pc, #108]	; (8001ec4 <HAL_CAN_MspInit+0x90>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	4a1a      	ldr	r2, [pc, #104]	; (8001ec4 <HAL_CAN_MspInit+0x90>)
 8001e5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e60:	6413      	str	r3, [r2, #64]	; 0x40
 8001e62:	4b18      	ldr	r3, [pc, #96]	; (8001ec4 <HAL_CAN_MspInit+0x90>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6a:	613b      	str	r3, [r7, #16]
 8001e6c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e6e:	4b15      	ldr	r3, [pc, #84]	; (8001ec4 <HAL_CAN_MspInit+0x90>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	4a14      	ldr	r2, [pc, #80]	; (8001ec4 <HAL_CAN_MspInit+0x90>)
 8001e74:	f043 0302 	orr.w	r3, r3, #2
 8001e78:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7a:	4b12      	ldr	r3, [pc, #72]	; (8001ec4 <HAL_CAN_MspInit+0x90>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e94:	2303      	movs	r3, #3
 8001e96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001e98:	2309      	movs	r3, #9
 8001e9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e9c:	f107 0314 	add.w	r3, r7, #20
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4809      	ldr	r0, [pc, #36]	; (8001ec8 <HAL_CAN_MspInit+0x94>)
 8001ea4:	f002 ff92 	bl	8004dcc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	2105      	movs	r1, #5
 8001eac:	2014      	movs	r0, #20
 8001eae:	f002 f95f 	bl	8004170 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001eb2:	2014      	movs	r0, #20
 8001eb4:	f002 f978 	bl	80041a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001eb8:	bf00      	nop
 8001eba:	3728      	adds	r7, #40	; 0x28
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40006400 	.word	0x40006400
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	40020400 	.word	0x40020400

08001ecc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a0a      	ldr	r2, [pc, #40]	; (8001f04 <HAL_CRC_MspInit+0x38>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d10b      	bne.n	8001ef6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001ede:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <HAL_CRC_MspInit+0x3c>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	4a09      	ldr	r2, [pc, #36]	; (8001f08 <HAL_CRC_MspInit+0x3c>)
 8001ee4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eea:	4b07      	ldr	r3, [pc, #28]	; (8001f08 <HAL_CRC_MspInit+0x3c>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001ef6:	bf00      	nop
 8001ef8:	3714      	adds	r7, #20
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	40023000 	.word	0x40023000
 8001f08:	40023800 	.word	0x40023800

08001f0c <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b08e      	sub	sp, #56	; 0x38
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	605a      	str	r2, [r3, #4]
 8001f1e:	609a      	str	r2, [r3, #8]
 8001f20:	60da      	str	r2, [r3, #12]
 8001f22:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a50      	ldr	r2, [pc, #320]	; (800206c <HAL_DCMI_MspInit+0x160>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	f040 809a 	bne.w	8002064 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001f30:	4b4f      	ldr	r3, [pc, #316]	; (8002070 <HAL_DCMI_MspInit+0x164>)
 8001f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f34:	4a4e      	ldr	r2, [pc, #312]	; (8002070 <HAL_DCMI_MspInit+0x164>)
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	6353      	str	r3, [r2, #52]	; 0x34
 8001f3c:	4b4c      	ldr	r3, [pc, #304]	; (8002070 <HAL_DCMI_MspInit+0x164>)
 8001f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	623b      	str	r3, [r7, #32]
 8001f46:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f48:	4b49      	ldr	r3, [pc, #292]	; (8002070 <HAL_DCMI_MspInit+0x164>)
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4c:	4a48      	ldr	r2, [pc, #288]	; (8002070 <HAL_DCMI_MspInit+0x164>)
 8001f4e:	f043 0310 	orr.w	r3, r3, #16
 8001f52:	6313      	str	r3, [r2, #48]	; 0x30
 8001f54:	4b46      	ldr	r3, [pc, #280]	; (8002070 <HAL_DCMI_MspInit+0x164>)
 8001f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f58:	f003 0310 	and.w	r3, r3, #16
 8001f5c:	61fb      	str	r3, [r7, #28]
 8001f5e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f60:	4b43      	ldr	r3, [pc, #268]	; (8002070 <HAL_DCMI_MspInit+0x164>)
 8001f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f64:	4a42      	ldr	r2, [pc, #264]	; (8002070 <HAL_DCMI_MspInit+0x164>)
 8001f66:	f043 0308 	orr.w	r3, r3, #8
 8001f6a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6c:	4b40      	ldr	r3, [pc, #256]	; (8002070 <HAL_DCMI_MspInit+0x164>)
 8001f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f70:	f003 0308 	and.w	r3, r3, #8
 8001f74:	61bb      	str	r3, [r7, #24]
 8001f76:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f78:	4b3d      	ldr	r3, [pc, #244]	; (8002070 <HAL_DCMI_MspInit+0x164>)
 8001f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7c:	4a3c      	ldr	r2, [pc, #240]	; (8002070 <HAL_DCMI_MspInit+0x164>)
 8001f7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f82:	6313      	str	r3, [r2, #48]	; 0x30
 8001f84:	4b3a      	ldr	r3, [pc, #232]	; (8002070 <HAL_DCMI_MspInit+0x164>)
 8001f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f8c:	617b      	str	r3, [r7, #20]
 8001f8e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f90:	4b37      	ldr	r3, [pc, #220]	; (8002070 <HAL_DCMI_MspInit+0x164>)
 8001f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f94:	4a36      	ldr	r2, [pc, #216]	; (8002070 <HAL_DCMI_MspInit+0x164>)
 8001f96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f9a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9c:	4b34      	ldr	r3, [pc, #208]	; (8002070 <HAL_DCMI_MspInit+0x164>)
 8001f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fa4:	613b      	str	r3, [r7, #16]
 8001fa6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa8:	4b31      	ldr	r3, [pc, #196]	; (8002070 <HAL_DCMI_MspInit+0x164>)
 8001faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fac:	4a30      	ldr	r2, [pc, #192]	; (8002070 <HAL_DCMI_MspInit+0x164>)
 8001fae:	f043 0301 	orr.w	r3, r3, #1
 8001fb2:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb4:	4b2e      	ldr	r3, [pc, #184]	; (8002070 <HAL_DCMI_MspInit+0x164>)
 8001fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1 
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001fc0:	2360      	movs	r3, #96	; 0x60
 8001fc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001fd0:	230d      	movs	r3, #13
 8001fd2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4826      	ldr	r0, [pc, #152]	; (8002074 <HAL_DCMI_MspInit+0x168>)
 8001fdc:	f002 fef6 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001fe0:	2308      	movs	r3, #8
 8001fe2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fec:	2300      	movs	r3, #0
 8001fee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001ff0:	230d      	movs	r3, #13
 8001ff2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001ff4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	481f      	ldr	r0, [pc, #124]	; (8002078 <HAL_DCMI_MspInit+0x16c>)
 8001ffc:	f002 fee6 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8002000:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002004:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002006:	2302      	movs	r3, #2
 8002008:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200a:	2300      	movs	r3, #0
 800200c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200e:	2300      	movs	r3, #0
 8002010:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002012:	230d      	movs	r3, #13
 8002014:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8002016:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800201a:	4619      	mov	r1, r3
 800201c:	4817      	ldr	r0, [pc, #92]	; (800207c <HAL_DCMI_MspInit+0x170>)
 800201e:	f002 fed5 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 8002022:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8002026:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002028:	2302      	movs	r3, #2
 800202a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202c:	2300      	movs	r3, #0
 800202e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002030:	2300      	movs	r3, #0
 8002032:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002034:	230d      	movs	r3, #13
 8002036:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002038:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800203c:	4619      	mov	r1, r3
 800203e:	4810      	ldr	r0, [pc, #64]	; (8002080 <HAL_DCMI_MspInit+0x174>)
 8002040:	f002 fec4 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002044:	2350      	movs	r3, #80	; 0x50
 8002046:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002048:	2302      	movs	r3, #2
 800204a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204c:	2300      	movs	r3, #0
 800204e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002050:	2300      	movs	r3, #0
 8002052:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002054:	230d      	movs	r3, #13
 8002056:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002058:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800205c:	4619      	mov	r1, r3
 800205e:	4809      	ldr	r0, [pc, #36]	; (8002084 <HAL_DCMI_MspInit+0x178>)
 8002060:	f002 feb4 	bl	8004dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8002064:	bf00      	nop
 8002066:	3738      	adds	r7, #56	; 0x38
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	50050000 	.word	0x50050000
 8002070:	40023800 	.word	0x40023800
 8002074:	40021000 	.word	0x40021000
 8002078:	40020c00 	.word	0x40020c00
 800207c:	40021800 	.word	0x40021800
 8002080:	40021c00 	.word	0x40021c00
 8002084:	40020000 	.word	0x40020000

08002088 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a0d      	ldr	r2, [pc, #52]	; (80020cc <HAL_DMA2D_MspInit+0x44>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d113      	bne.n	80020c2 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800209a:	4b0d      	ldr	r3, [pc, #52]	; (80020d0 <HAL_DMA2D_MspInit+0x48>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	4a0c      	ldr	r2, [pc, #48]	; (80020d0 <HAL_DMA2D_MspInit+0x48>)
 80020a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020a4:	6313      	str	r3, [r2, #48]	; 0x30
 80020a6:	4b0a      	ldr	r3, [pc, #40]	; (80020d0 <HAL_DMA2D_MspInit+0x48>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80020b2:	2200      	movs	r2, #0
 80020b4:	2105      	movs	r1, #5
 80020b6:	205a      	movs	r0, #90	; 0x5a
 80020b8:	f002 f85a 	bl	8004170 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80020bc:	205a      	movs	r0, #90	; 0x5a
 80020be:	f002 f873 	bl	80041a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80020c2:	bf00      	nop
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	4002b000 	.word	0x4002b000
 80020d0:	40023800 	.word	0x40023800

080020d4 <HAL_DMA2D_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* hdma2d)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a07      	ldr	r2, [pc, #28]	; (8002100 <HAL_DMA2D_MspDeInit+0x2c>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d108      	bne.n	80020f8 <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 80020e6:	4b07      	ldr	r3, [pc, #28]	; (8002104 <HAL_DMA2D_MspDeInit+0x30>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	4a06      	ldr	r2, [pc, #24]	; (8002104 <HAL_DMA2D_MspDeInit+0x30>)
 80020ec:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80020f0:	6313      	str	r3, [r2, #48]	; 0x30

    /* DMA2D interrupt DeInit */
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 80020f2:	205a      	movs	r0, #90	; 0x5a
 80020f4:	f002 f866 	bl	80041c4 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }

}
 80020f8:	bf00      	nop
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	4002b000 	.word	0x4002b000
 8002104:	40023800 	.word	0x40023800

08002108 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b08e      	sub	sp, #56	; 0x38
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002110:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	609a      	str	r2, [r3, #8]
 800211c:	60da      	str	r2, [r3, #12]
 800211e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a55      	ldr	r2, [pc, #340]	; (800227c <HAL_LTDC_MspInit+0x174>)
 8002126:	4293      	cmp	r3, r2
 8002128:	f040 80a3 	bne.w	8002272 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800212c:	4b54      	ldr	r3, [pc, #336]	; (8002280 <HAL_LTDC_MspInit+0x178>)
 800212e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002130:	4a53      	ldr	r2, [pc, #332]	; (8002280 <HAL_LTDC_MspInit+0x178>)
 8002132:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002136:	6453      	str	r3, [r2, #68]	; 0x44
 8002138:	4b51      	ldr	r3, [pc, #324]	; (8002280 <HAL_LTDC_MspInit+0x178>)
 800213a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002140:	623b      	str	r3, [r7, #32]
 8002142:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002144:	4b4e      	ldr	r3, [pc, #312]	; (8002280 <HAL_LTDC_MspInit+0x178>)
 8002146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002148:	4a4d      	ldr	r2, [pc, #308]	; (8002280 <HAL_LTDC_MspInit+0x178>)
 800214a:	f043 0310 	orr.w	r3, r3, #16
 800214e:	6313      	str	r3, [r2, #48]	; 0x30
 8002150:	4b4b      	ldr	r3, [pc, #300]	; (8002280 <HAL_LTDC_MspInit+0x178>)
 8002152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002154:	f003 0310 	and.w	r3, r3, #16
 8002158:	61fb      	str	r3, [r7, #28]
 800215a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800215c:	4b48      	ldr	r3, [pc, #288]	; (8002280 <HAL_LTDC_MspInit+0x178>)
 800215e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002160:	4a47      	ldr	r2, [pc, #284]	; (8002280 <HAL_LTDC_MspInit+0x178>)
 8002162:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002166:	6313      	str	r3, [r2, #48]	; 0x30
 8002168:	4b45      	ldr	r3, [pc, #276]	; (8002280 <HAL_LTDC_MspInit+0x178>)
 800216a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002170:	61bb      	str	r3, [r7, #24]
 8002172:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002174:	4b42      	ldr	r3, [pc, #264]	; (8002280 <HAL_LTDC_MspInit+0x178>)
 8002176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002178:	4a41      	ldr	r2, [pc, #260]	; (8002280 <HAL_LTDC_MspInit+0x178>)
 800217a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800217e:	6313      	str	r3, [r2, #48]	; 0x30
 8002180:	4b3f      	ldr	r3, [pc, #252]	; (8002280 <HAL_LTDC_MspInit+0x178>)
 8002182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002188:	617b      	str	r3, [r7, #20]
 800218a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800218c:	4b3c      	ldr	r3, [pc, #240]	; (8002280 <HAL_LTDC_MspInit+0x178>)
 800218e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002190:	4a3b      	ldr	r2, [pc, #236]	; (8002280 <HAL_LTDC_MspInit+0x178>)
 8002192:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002196:	6313      	str	r3, [r2, #48]	; 0x30
 8002198:	4b39      	ldr	r3, [pc, #228]	; (8002280 <HAL_LTDC_MspInit+0x178>)
 800219a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021a0:	613b      	str	r3, [r7, #16]
 80021a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80021a4:	4b36      	ldr	r3, [pc, #216]	; (8002280 <HAL_LTDC_MspInit+0x178>)
 80021a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a8:	4a35      	ldr	r2, [pc, #212]	; (8002280 <HAL_LTDC_MspInit+0x178>)
 80021aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ae:	6313      	str	r3, [r2, #48]	; 0x30
 80021b0:	4b33      	ldr	r3, [pc, #204]	; (8002280 <HAL_LTDC_MspInit+0x178>)
 80021b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80021bc:	2310      	movs	r3, #16
 80021be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c0:	2302      	movs	r3, #2
 80021c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c4:	2300      	movs	r3, #0
 80021c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c8:	2300      	movs	r3, #0
 80021ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021cc:	230e      	movs	r3, #14
 80021ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80021d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021d4:	4619      	mov	r1, r3
 80021d6:	482b      	ldr	r0, [pc, #172]	; (8002284 <HAL_LTDC_MspInit+0x17c>)
 80021d8:	f002 fdf8 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 80021dc:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80021e0:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e2:	2302      	movs	r3, #2
 80021e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e6:	2300      	movs	r3, #0
 80021e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ea:	2300      	movs	r3, #0
 80021ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021ee:	230e      	movs	r3, #14
 80021f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80021f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021f6:	4619      	mov	r1, r3
 80021f8:	4823      	ldr	r0, [pc, #140]	; (8002288 <HAL_LTDC_MspInit+0x180>)
 80021fa:	f002 fde7 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 80021fe:	23f7      	movs	r3, #247	; 0xf7
 8002200:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002202:	2302      	movs	r3, #2
 8002204:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002206:	2300      	movs	r3, #0
 8002208:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220a:	2300      	movs	r3, #0
 800220c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800220e:	230e      	movs	r3, #14
 8002210:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002212:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002216:	4619      	mov	r1, r3
 8002218:	481c      	ldr	r0, [pc, #112]	; (800228c <HAL_LTDC_MspInit+0x184>)
 800221a:	f002 fdd7 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800221e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002222:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002224:	2302      	movs	r3, #2
 8002226:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002228:	2300      	movs	r3, #0
 800222a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222c:	2300      	movs	r3, #0
 800222e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002230:	2309      	movs	r3, #9
 8002232:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002234:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002238:	4619      	mov	r1, r3
 800223a:	4815      	ldr	r0, [pc, #84]	; (8002290 <HAL_LTDC_MspInit+0x188>)
 800223c:	f002 fdc6 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002240:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002244:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002246:	2302      	movs	r3, #2
 8002248:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224a:	2300      	movs	r3, #0
 800224c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224e:	2300      	movs	r3, #0
 8002250:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002252:	230e      	movs	r3, #14
 8002254:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002256:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800225a:	4619      	mov	r1, r3
 800225c:	480d      	ldr	r0, [pc, #52]	; (8002294 <HAL_LTDC_MspInit+0x18c>)
 800225e:	f002 fdb5 	bl	8004dcc <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002262:	2200      	movs	r2, #0
 8002264:	2105      	movs	r1, #5
 8002266:	2058      	movs	r0, #88	; 0x58
 8002268:	f001 ff82 	bl	8004170 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800226c:	2058      	movs	r0, #88	; 0x58
 800226e:	f001 ff9b 	bl	80041a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002272:	bf00      	nop
 8002274:	3738      	adds	r7, #56	; 0x38
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	40016800 	.word	0x40016800
 8002280:	40023800 	.word	0x40023800
 8002284:	40021000 	.word	0x40021000
 8002288:	40022400 	.word	0x40022400
 800228c:	40022800 	.word	0x40022800
 8002290:	40021800 	.word	0x40021800
 8002294:	40022000 	.word	0x40022000

08002298 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b08c      	sub	sp, #48	; 0x30
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a0:	f107 031c 	add.w	r3, r7, #28
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	605a      	str	r2, [r3, #4]
 80022aa:	609a      	str	r2, [r3, #8]
 80022ac:	60da      	str	r2, [r3, #12]
 80022ae:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a3b      	ldr	r2, [pc, #236]	; (80023a4 <HAL_QSPI_MspInit+0x10c>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d170      	bne.n	800239c <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80022ba:	4b3b      	ldr	r3, [pc, #236]	; (80023a8 <HAL_QSPI_MspInit+0x110>)
 80022bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022be:	4a3a      	ldr	r2, [pc, #232]	; (80023a8 <HAL_QSPI_MspInit+0x110>)
 80022c0:	f043 0302 	orr.w	r3, r3, #2
 80022c4:	6393      	str	r3, [r2, #56]	; 0x38
 80022c6:	4b38      	ldr	r3, [pc, #224]	; (80023a8 <HAL_QSPI_MspInit+0x110>)
 80022c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	61bb      	str	r3, [r7, #24]
 80022d0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80022d2:	4b35      	ldr	r3, [pc, #212]	; (80023a8 <HAL_QSPI_MspInit+0x110>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	4a34      	ldr	r2, [pc, #208]	; (80023a8 <HAL_QSPI_MspInit+0x110>)
 80022d8:	f043 0310 	orr.w	r3, r3, #16
 80022dc:	6313      	str	r3, [r2, #48]	; 0x30
 80022de:	4b32      	ldr	r3, [pc, #200]	; (80023a8 <HAL_QSPI_MspInit+0x110>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	f003 0310 	and.w	r3, r3, #16
 80022e6:	617b      	str	r3, [r7, #20]
 80022e8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ea:	4b2f      	ldr	r3, [pc, #188]	; (80023a8 <HAL_QSPI_MspInit+0x110>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	4a2e      	ldr	r2, [pc, #184]	; (80023a8 <HAL_QSPI_MspInit+0x110>)
 80022f0:	f043 0302 	orr.w	r3, r3, #2
 80022f4:	6313      	str	r3, [r2, #48]	; 0x30
 80022f6:	4b2c      	ldr	r3, [pc, #176]	; (80023a8 <HAL_QSPI_MspInit+0x110>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	613b      	str	r3, [r7, #16]
 8002300:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002302:	4b29      	ldr	r3, [pc, #164]	; (80023a8 <HAL_QSPI_MspInit+0x110>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	4a28      	ldr	r2, [pc, #160]	; (80023a8 <HAL_QSPI_MspInit+0x110>)
 8002308:	f043 0308 	orr.w	r3, r3, #8
 800230c:	6313      	str	r3, [r2, #48]	; 0x30
 800230e:	4b26      	ldr	r3, [pc, #152]	; (80023a8 <HAL_QSPI_MspInit+0x110>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	f003 0308 	and.w	r3, r3, #8
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800231a:	2304      	movs	r3, #4
 800231c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231e:	2302      	movs	r3, #2
 8002320:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002322:	2300      	movs	r3, #0
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002326:	2303      	movs	r3, #3
 8002328:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800232a:	2309      	movs	r3, #9
 800232c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800232e:	f107 031c 	add.w	r3, r7, #28
 8002332:	4619      	mov	r1, r3
 8002334:	481d      	ldr	r0, [pc, #116]	; (80023ac <HAL_QSPI_MspInit+0x114>)
 8002336:	f002 fd49 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800233a:	2340      	movs	r3, #64	; 0x40
 800233c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233e:	2302      	movs	r3, #2
 8002340:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002342:	2300      	movs	r3, #0
 8002344:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002346:	2303      	movs	r3, #3
 8002348:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800234a:	230a      	movs	r3, #10
 800234c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800234e:	f107 031c 	add.w	r3, r7, #28
 8002352:	4619      	mov	r1, r3
 8002354:	4816      	ldr	r0, [pc, #88]	; (80023b0 <HAL_QSPI_MspInit+0x118>)
 8002356:	f002 fd39 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800235a:	2304      	movs	r3, #4
 800235c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235e:	2302      	movs	r3, #2
 8002360:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002362:	2300      	movs	r3, #0
 8002364:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002366:	2303      	movs	r3, #3
 8002368:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800236a:	2309      	movs	r3, #9
 800236c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800236e:	f107 031c 	add.w	r3, r7, #28
 8002372:	4619      	mov	r1, r3
 8002374:	480e      	ldr	r0, [pc, #56]	; (80023b0 <HAL_QSPI_MspInit+0x118>)
 8002376:	f002 fd29 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800237a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800237e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002380:	2302      	movs	r3, #2
 8002382:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002384:	2300      	movs	r3, #0
 8002386:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002388:	2303      	movs	r3, #3
 800238a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800238c:	2309      	movs	r3, #9
 800238e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002390:	f107 031c 	add.w	r3, r7, #28
 8002394:	4619      	mov	r1, r3
 8002396:	4807      	ldr	r0, [pc, #28]	; (80023b4 <HAL_QSPI_MspInit+0x11c>)
 8002398:	f002 fd18 	bl	8004dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800239c:	bf00      	nop
 800239e:	3730      	adds	r7, #48	; 0x30
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	a0001000 	.word	0xa0001000
 80023a8:	40023800 	.word	0x40023800
 80023ac:	40021000 	.word	0x40021000
 80023b0:	40020400 	.word	0x40020400
 80023b4:	40020c00 	.word	0x40020c00

080023b8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a07      	ldr	r2, [pc, #28]	; (80023e4 <HAL_RTC_MspInit+0x2c>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d105      	bne.n	80023d6 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80023ca:	4b07      	ldr	r3, [pc, #28]	; (80023e8 <HAL_RTC_MspInit+0x30>)
 80023cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ce:	4a06      	ldr	r2, [pc, #24]	; (80023e8 <HAL_RTC_MspInit+0x30>)
 80023d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023d4:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80023d6:	bf00      	nop
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	40002800 	.word	0x40002800
 80023e8:	40023800 	.word	0x40023800

080023ec <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b08a      	sub	sp, #40	; 0x28
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f4:	f107 0314 	add.w	r3, r7, #20
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	609a      	str	r2, [r3, #8]
 8002400:	60da      	str	r2, [r3, #12]
 8002402:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a25      	ldr	r2, [pc, #148]	; (80024a0 <HAL_SD_MspInit+0xb4>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d144      	bne.n	8002498 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800240e:	4b25      	ldr	r3, [pc, #148]	; (80024a4 <HAL_SD_MspInit+0xb8>)
 8002410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002412:	4a24      	ldr	r2, [pc, #144]	; (80024a4 <HAL_SD_MspInit+0xb8>)
 8002414:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002418:	6453      	str	r3, [r2, #68]	; 0x44
 800241a:	4b22      	ldr	r3, [pc, #136]	; (80024a4 <HAL_SD_MspInit+0xb8>)
 800241c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002422:	613b      	str	r3, [r7, #16]
 8002424:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002426:	4b1f      	ldr	r3, [pc, #124]	; (80024a4 <HAL_SD_MspInit+0xb8>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	4a1e      	ldr	r2, [pc, #120]	; (80024a4 <HAL_SD_MspInit+0xb8>)
 800242c:	f043 0304 	orr.w	r3, r3, #4
 8002430:	6313      	str	r3, [r2, #48]	; 0x30
 8002432:	4b1c      	ldr	r3, [pc, #112]	; (80024a4 <HAL_SD_MspInit+0xb8>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	f003 0304 	and.w	r3, r3, #4
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800243e:	4b19      	ldr	r3, [pc, #100]	; (80024a4 <HAL_SD_MspInit+0xb8>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	4a18      	ldr	r2, [pc, #96]	; (80024a4 <HAL_SD_MspInit+0xb8>)
 8002444:	f043 0308 	orr.w	r3, r3, #8
 8002448:	6313      	str	r3, [r2, #48]	; 0x30
 800244a:	4b16      	ldr	r3, [pc, #88]	; (80024a4 <HAL_SD_MspInit+0xb8>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	f003 0308 	and.w	r3, r3, #8
 8002452:	60bb      	str	r3, [r7, #8]
 8002454:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 8002456:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800245a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245c:	2302      	movs	r3, #2
 800245e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002460:	2300      	movs	r3, #0
 8002462:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002464:	2303      	movs	r3, #3
 8002466:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002468:	230c      	movs	r3, #12
 800246a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800246c:	f107 0314 	add.w	r3, r7, #20
 8002470:	4619      	mov	r1, r3
 8002472:	480d      	ldr	r0, [pc, #52]	; (80024a8 <HAL_SD_MspInit+0xbc>)
 8002474:	f002 fcaa 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002478:	2304      	movs	r3, #4
 800247a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247c:	2302      	movs	r3, #2
 800247e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002480:	2300      	movs	r3, #0
 8002482:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002484:	2303      	movs	r3, #3
 8002486:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002488:	230c      	movs	r3, #12
 800248a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 800248c:	f107 0314 	add.w	r3, r7, #20
 8002490:	4619      	mov	r1, r3
 8002492:	4806      	ldr	r0, [pc, #24]	; (80024ac <HAL_SD_MspInit+0xc0>)
 8002494:	f002 fc9a 	bl	8004dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002498:	bf00      	nop
 800249a:	3728      	adds	r7, #40	; 0x28
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40012c00 	.word	0x40012c00
 80024a4:	40023800 	.word	0x40023800
 80024a8:	40020800 	.word	0x40020800
 80024ac:	40020c00 	.word	0x40020c00

080024b0 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b08a      	sub	sp, #40	; 0x28
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b8:	f107 0314 	add.w	r3, r7, #20
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	605a      	str	r2, [r3, #4]
 80024c2:	609a      	str	r2, [r3, #8]
 80024c4:	60da      	str	r2, [r3, #12]
 80024c6:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 80024d0:	d127      	bne.n	8002522 <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 80024d2:	4b16      	ldr	r3, [pc, #88]	; (800252c <HAL_SPDIFRX_MspInit+0x7c>)
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	4a15      	ldr	r2, [pc, #84]	; (800252c <HAL_SPDIFRX_MspInit+0x7c>)
 80024d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024dc:	6413      	str	r3, [r2, #64]	; 0x40
 80024de:	4b13      	ldr	r3, [pc, #76]	; (800252c <HAL_SPDIFRX_MspInit+0x7c>)
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e6:	613b      	str	r3, [r7, #16]
 80024e8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024ea:	4b10      	ldr	r3, [pc, #64]	; (800252c <HAL_SPDIFRX_MspInit+0x7c>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	4a0f      	ldr	r2, [pc, #60]	; (800252c <HAL_SPDIFRX_MspInit+0x7c>)
 80024f0:	f043 0308 	orr.w	r3, r3, #8
 80024f4:	6313      	str	r3, [r2, #48]	; 0x30
 80024f6:	4b0d      	ldr	r3, [pc, #52]	; (800252c <HAL_SPDIFRX_MspInit+0x7c>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fa:	f003 0308 	and.w	r3, r3, #8
 80024fe:	60fb      	str	r3, [r7, #12]
 8002500:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration    
    PD7     ------> SPDIFRX_IN0 
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002502:	2380      	movs	r3, #128	; 0x80
 8002504:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002506:	2302      	movs	r3, #2
 8002508:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250a:	2300      	movs	r3, #0
 800250c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800250e:	2300      	movs	r3, #0
 8002510:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002512:	2308      	movs	r3, #8
 8002514:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002516:	f107 0314 	add.w	r3, r7, #20
 800251a:	4619      	mov	r1, r3
 800251c:	4804      	ldr	r0, [pc, #16]	; (8002530 <HAL_SPDIFRX_MspInit+0x80>)
 800251e:	f002 fc55 	bl	8004dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8002522:	bf00      	nop
 8002524:	3728      	adds	r7, #40	; 0x28
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	40023800 	.word	0x40023800
 8002530:	40020c00 	.word	0x40020c00

08002534 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b08a      	sub	sp, #40	; 0x28
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800253c:	f107 0314 	add.w	r3, r7, #20
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	605a      	str	r2, [r3, #4]
 8002546:	609a      	str	r2, [r3, #8]
 8002548:	60da      	str	r2, [r3, #12]
 800254a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a25      	ldr	r2, [pc, #148]	; (80025e8 <HAL_SPI_MspInit+0xb4>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d144      	bne.n	80025e0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002556:	4b25      	ldr	r3, [pc, #148]	; (80025ec <HAL_SPI_MspInit+0xb8>)
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	4a24      	ldr	r2, [pc, #144]	; (80025ec <HAL_SPI_MspInit+0xb8>)
 800255c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002560:	6413      	str	r3, [r2, #64]	; 0x40
 8002562:	4b22      	ldr	r3, [pc, #136]	; (80025ec <HAL_SPI_MspInit+0xb8>)
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800256a:	613b      	str	r3, [r7, #16]
 800256c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800256e:	4b1f      	ldr	r3, [pc, #124]	; (80025ec <HAL_SPI_MspInit+0xb8>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	4a1e      	ldr	r2, [pc, #120]	; (80025ec <HAL_SPI_MspInit+0xb8>)
 8002574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002578:	6313      	str	r3, [r2, #48]	; 0x30
 800257a:	4b1c      	ldr	r3, [pc, #112]	; (80025ec <HAL_SPI_MspInit+0xb8>)
 800257c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002586:	4b19      	ldr	r3, [pc, #100]	; (80025ec <HAL_SPI_MspInit+0xb8>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	4a18      	ldr	r2, [pc, #96]	; (80025ec <HAL_SPI_MspInit+0xb8>)
 800258c:	f043 0302 	orr.w	r3, r3, #2
 8002590:	6313      	str	r3, [r2, #48]	; 0x30
 8002592:	4b16      	ldr	r3, [pc, #88]	; (80025ec <HAL_SPI_MspInit+0xb8>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	60bb      	str	r3, [r7, #8]
 800259c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800259e:	2302      	movs	r3, #2
 80025a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a2:	2302      	movs	r3, #2
 80025a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a6:	2300      	movs	r3, #0
 80025a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025aa:	2300      	movs	r3, #0
 80025ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80025ae:	2305      	movs	r3, #5
 80025b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80025b2:	f107 0314 	add.w	r3, r7, #20
 80025b6:	4619      	mov	r1, r3
 80025b8:	480d      	ldr	r0, [pc, #52]	; (80025f0 <HAL_SPI_MspInit+0xbc>)
 80025ba:	f002 fc07 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80025be:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80025c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c4:	2302      	movs	r3, #2
 80025c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c8:	2300      	movs	r3, #0
 80025ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025cc:	2300      	movs	r3, #0
 80025ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80025d0:	2305      	movs	r3, #5
 80025d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025d4:	f107 0314 	add.w	r3, r7, #20
 80025d8:	4619      	mov	r1, r3
 80025da:	4806      	ldr	r0, [pc, #24]	; (80025f4 <HAL_SPI_MspInit+0xc0>)
 80025dc:	f002 fbf6 	bl	8004dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80025e0:	bf00      	nop
 80025e2:	3728      	adds	r7, #40	; 0x28
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40003800 	.word	0x40003800
 80025ec:	40023800 	.word	0x40023800
 80025f0:	40022000 	.word	0x40022000
 80025f4:	40020400 	.word	0x40020400

080025f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b089      	sub	sp, #36	; 0x24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a2e      	ldr	r2, [pc, #184]	; (80026c0 <HAL_TIM_Base_MspInit+0xc8>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d10c      	bne.n	8002624 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800260a:	4b2e      	ldr	r3, [pc, #184]	; (80026c4 <HAL_TIM_Base_MspInit+0xcc>)
 800260c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260e:	4a2d      	ldr	r2, [pc, #180]	; (80026c4 <HAL_TIM_Base_MspInit+0xcc>)
 8002610:	f043 0301 	orr.w	r3, r3, #1
 8002614:	6453      	str	r3, [r2, #68]	; 0x44
 8002616:	4b2b      	ldr	r3, [pc, #172]	; (80026c4 <HAL_TIM_Base_MspInit+0xcc>)
 8002618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	61fb      	str	r3, [r7, #28]
 8002620:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002622:	e046      	b.n	80026b2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800262c:	d10c      	bne.n	8002648 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800262e:	4b25      	ldr	r3, [pc, #148]	; (80026c4 <HAL_TIM_Base_MspInit+0xcc>)
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	4a24      	ldr	r2, [pc, #144]	; (80026c4 <HAL_TIM_Base_MspInit+0xcc>)
 8002634:	f043 0301 	orr.w	r3, r3, #1
 8002638:	6413      	str	r3, [r2, #64]	; 0x40
 800263a:	4b22      	ldr	r3, [pc, #136]	; (80026c4 <HAL_TIM_Base_MspInit+0xcc>)
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	61bb      	str	r3, [r7, #24]
 8002644:	69bb      	ldr	r3, [r7, #24]
}
 8002646:	e034      	b.n	80026b2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a1e      	ldr	r2, [pc, #120]	; (80026c8 <HAL_TIM_Base_MspInit+0xd0>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d10c      	bne.n	800266c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002652:	4b1c      	ldr	r3, [pc, #112]	; (80026c4 <HAL_TIM_Base_MspInit+0xcc>)
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	4a1b      	ldr	r2, [pc, #108]	; (80026c4 <HAL_TIM_Base_MspInit+0xcc>)
 8002658:	f043 0302 	orr.w	r3, r3, #2
 800265c:	6413      	str	r3, [r2, #64]	; 0x40
 800265e:	4b19      	ldr	r3, [pc, #100]	; (80026c4 <HAL_TIM_Base_MspInit+0xcc>)
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	617b      	str	r3, [r7, #20]
 8002668:	697b      	ldr	r3, [r7, #20]
}
 800266a:	e022      	b.n	80026b2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a16      	ldr	r2, [pc, #88]	; (80026cc <HAL_TIM_Base_MspInit+0xd4>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d10c      	bne.n	8002690 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002676:	4b13      	ldr	r3, [pc, #76]	; (80026c4 <HAL_TIM_Base_MspInit+0xcc>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	4a12      	ldr	r2, [pc, #72]	; (80026c4 <HAL_TIM_Base_MspInit+0xcc>)
 800267c:	f043 0308 	orr.w	r3, r3, #8
 8002680:	6413      	str	r3, [r2, #64]	; 0x40
 8002682:	4b10      	ldr	r3, [pc, #64]	; (80026c4 <HAL_TIM_Base_MspInit+0xcc>)
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	f003 0308 	and.w	r3, r3, #8
 800268a:	613b      	str	r3, [r7, #16]
 800268c:	693b      	ldr	r3, [r7, #16]
}
 800268e:	e010      	b.n	80026b2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a0e      	ldr	r2, [pc, #56]	; (80026d0 <HAL_TIM_Base_MspInit+0xd8>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d10b      	bne.n	80026b2 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800269a:	4b0a      	ldr	r3, [pc, #40]	; (80026c4 <HAL_TIM_Base_MspInit+0xcc>)
 800269c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269e:	4a09      	ldr	r2, [pc, #36]	; (80026c4 <HAL_TIM_Base_MspInit+0xcc>)
 80026a0:	f043 0302 	orr.w	r3, r3, #2
 80026a4:	6453      	str	r3, [r2, #68]	; 0x44
 80026a6:	4b07      	ldr	r3, [pc, #28]	; (80026c4 <HAL_TIM_Base_MspInit+0xcc>)
 80026a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	68fb      	ldr	r3, [r7, #12]
}
 80026b2:	bf00      	nop
 80026b4:	3724      	adds	r7, #36	; 0x24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	40010000 	.word	0x40010000
 80026c4:	40023800 	.word	0x40023800
 80026c8:	40000400 	.word	0x40000400
 80026cc:	40000c00 	.word	0x40000c00
 80026d0:	40010400 	.word	0x40010400

080026d4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a0a      	ldr	r2, [pc, #40]	; (800270c <HAL_TIM_PWM_MspInit+0x38>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d10b      	bne.n	80026fe <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80026e6:	4b0a      	ldr	r3, [pc, #40]	; (8002710 <HAL_TIM_PWM_MspInit+0x3c>)
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	4a09      	ldr	r2, [pc, #36]	; (8002710 <HAL_TIM_PWM_MspInit+0x3c>)
 80026ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026f0:	6413      	str	r3, [r2, #64]	; 0x40
 80026f2:	4b07      	ldr	r3, [pc, #28]	; (8002710 <HAL_TIM_PWM_MspInit+0x3c>)
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80026fe:	bf00      	nop
 8002700:	3714      	adds	r7, #20
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	40001800 	.word	0x40001800
 8002710:	40023800 	.word	0x40023800

08002714 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b08c      	sub	sp, #48	; 0x30
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800271c:	f107 031c 	add.w	r3, r7, #28
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]
 8002724:	605a      	str	r2, [r3, #4]
 8002726:	609a      	str	r2, [r3, #8]
 8002728:	60da      	str	r2, [r3, #12]
 800272a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a56      	ldr	r2, [pc, #344]	; (800288c <HAL_TIM_MspPostInit+0x178>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d11d      	bne.n	8002772 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002736:	4b56      	ldr	r3, [pc, #344]	; (8002890 <HAL_TIM_MspPostInit+0x17c>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	4a55      	ldr	r2, [pc, #340]	; (8002890 <HAL_TIM_MspPostInit+0x17c>)
 800273c:	f043 0301 	orr.w	r3, r3, #1
 8002740:	6313      	str	r3, [r2, #48]	; 0x30
 8002742:	4b53      	ldr	r3, [pc, #332]	; (8002890 <HAL_TIM_MspPostInit+0x17c>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	61bb      	str	r3, [r7, #24]
 800274c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800274e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002752:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002754:	2302      	movs	r3, #2
 8002756:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002758:	2300      	movs	r3, #0
 800275a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800275c:	2300      	movs	r3, #0
 800275e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002760:	2301      	movs	r3, #1
 8002762:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8002764:	f107 031c 	add.w	r3, r7, #28
 8002768:	4619      	mov	r1, r3
 800276a:	484a      	ldr	r0, [pc, #296]	; (8002894 <HAL_TIM_MspPostInit+0x180>)
 800276c:	f002 fb2e 	bl	8004dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002770:	e087      	b.n	8002882 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800277a:	d11d      	bne.n	80027b8 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800277c:	4b44      	ldr	r3, [pc, #272]	; (8002890 <HAL_TIM_MspPostInit+0x17c>)
 800277e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002780:	4a43      	ldr	r2, [pc, #268]	; (8002890 <HAL_TIM_MspPostInit+0x17c>)
 8002782:	f043 0301 	orr.w	r3, r3, #1
 8002786:	6313      	str	r3, [r2, #48]	; 0x30
 8002788:	4b41      	ldr	r3, [pc, #260]	; (8002890 <HAL_TIM_MspPostInit+0x17c>)
 800278a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	617b      	str	r3, [r7, #20]
 8002792:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8002794:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002798:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279a:	2302      	movs	r3, #2
 800279c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279e:	2300      	movs	r3, #0
 80027a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a2:	2300      	movs	r3, #0
 80027a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80027a6:	2301      	movs	r3, #1
 80027a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80027aa:	f107 031c 	add.w	r3, r7, #28
 80027ae:	4619      	mov	r1, r3
 80027b0:	4838      	ldr	r0, [pc, #224]	; (8002894 <HAL_TIM_MspPostInit+0x180>)
 80027b2:	f002 fb0b 	bl	8004dcc <HAL_GPIO_Init>
}
 80027b6:	e064      	b.n	8002882 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a36      	ldr	r2, [pc, #216]	; (8002898 <HAL_TIM_MspPostInit+0x184>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d11c      	bne.n	80027fc <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027c2:	4b33      	ldr	r3, [pc, #204]	; (8002890 <HAL_TIM_MspPostInit+0x17c>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	4a32      	ldr	r2, [pc, #200]	; (8002890 <HAL_TIM_MspPostInit+0x17c>)
 80027c8:	f043 0302 	orr.w	r3, r3, #2
 80027cc:	6313      	str	r3, [r2, #48]	; 0x30
 80027ce:	4b30      	ldr	r3, [pc, #192]	; (8002890 <HAL_TIM_MspPostInit+0x17c>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	613b      	str	r3, [r7, #16]
 80027d8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80027da:	2310      	movs	r3, #16
 80027dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027de:	2302      	movs	r3, #2
 80027e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e2:	2300      	movs	r3, #0
 80027e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e6:	2300      	movs	r3, #0
 80027e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80027ea:	2302      	movs	r3, #2
 80027ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80027ee:	f107 031c 	add.w	r3, r7, #28
 80027f2:	4619      	mov	r1, r3
 80027f4:	4829      	ldr	r0, [pc, #164]	; (800289c <HAL_TIM_MspPostInit+0x188>)
 80027f6:	f002 fae9 	bl	8004dcc <HAL_GPIO_Init>
}
 80027fa:	e042      	b.n	8002882 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a27      	ldr	r2, [pc, #156]	; (80028a0 <HAL_TIM_MspPostInit+0x18c>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d11c      	bne.n	8002840 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002806:	4b22      	ldr	r3, [pc, #136]	; (8002890 <HAL_TIM_MspPostInit+0x17c>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	4a21      	ldr	r2, [pc, #132]	; (8002890 <HAL_TIM_MspPostInit+0x17c>)
 800280c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002810:	6313      	str	r3, [r2, #48]	; 0x30
 8002812:	4b1f      	ldr	r3, [pc, #124]	; (8002890 <HAL_TIM_MspPostInit+0x17c>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 800281e:	2301      	movs	r3, #1
 8002820:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002822:	2302      	movs	r3, #2
 8002824:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002826:	2300      	movs	r3, #0
 8002828:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800282a:	2300      	movs	r3, #0
 800282c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800282e:	2302      	movs	r3, #2
 8002830:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8002832:	f107 031c 	add.w	r3, r7, #28
 8002836:	4619      	mov	r1, r3
 8002838:	481a      	ldr	r0, [pc, #104]	; (80028a4 <HAL_TIM_MspPostInit+0x190>)
 800283a:	f002 fac7 	bl	8004dcc <HAL_GPIO_Init>
}
 800283e:	e020      	b.n	8002882 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a18      	ldr	r2, [pc, #96]	; (80028a8 <HAL_TIM_MspPostInit+0x194>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d11b      	bne.n	8002882 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800284a:	4b11      	ldr	r3, [pc, #68]	; (8002890 <HAL_TIM_MspPostInit+0x17c>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	4a10      	ldr	r2, [pc, #64]	; (8002890 <HAL_TIM_MspPostInit+0x17c>)
 8002850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002854:	6313      	str	r3, [r2, #48]	; 0x30
 8002856:	4b0e      	ldr	r3, [pc, #56]	; (8002890 <HAL_TIM_MspPostInit+0x17c>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800285e:	60bb      	str	r3, [r7, #8]
 8002860:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8002862:	2340      	movs	r3, #64	; 0x40
 8002864:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002866:	2302      	movs	r3, #2
 8002868:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286a:	2300      	movs	r3, #0
 800286c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800286e:	2300      	movs	r3, #0
 8002870:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002872:	2309      	movs	r3, #9
 8002874:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8002876:	f107 031c 	add.w	r3, r7, #28
 800287a:	4619      	mov	r1, r3
 800287c:	480b      	ldr	r0, [pc, #44]	; (80028ac <HAL_TIM_MspPostInit+0x198>)
 800287e:	f002 faa5 	bl	8004dcc <HAL_GPIO_Init>
}
 8002882:	bf00      	nop
 8002884:	3730      	adds	r7, #48	; 0x30
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	40010000 	.word	0x40010000
 8002890:	40023800 	.word	0x40023800
 8002894:	40020000 	.word	0x40020000
 8002898:	40000400 	.word	0x40000400
 800289c:	40020400 	.word	0x40020400
 80028a0:	40000c00 	.word	0x40000c00
 80028a4:	40022000 	.word	0x40022000
 80028a8:	40001800 	.word	0x40001800
 80028ac:	40021c00 	.word	0x40021c00

080028b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b08c      	sub	sp, #48	; 0x30
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b8:	f107 031c 	add.w	r3, r7, #28
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	605a      	str	r2, [r3, #4]
 80028c2:	609a      	str	r2, [r3, #8]
 80028c4:	60da      	str	r2, [r3, #12]
 80028c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a3c      	ldr	r2, [pc, #240]	; (80029c0 <HAL_UART_MspInit+0x110>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d145      	bne.n	800295e <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80028d2:	4b3c      	ldr	r3, [pc, #240]	; (80029c4 <HAL_UART_MspInit+0x114>)
 80028d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d6:	4a3b      	ldr	r2, [pc, #236]	; (80029c4 <HAL_UART_MspInit+0x114>)
 80028d8:	f043 0310 	orr.w	r3, r3, #16
 80028dc:	6453      	str	r3, [r2, #68]	; 0x44
 80028de:	4b39      	ldr	r3, [pc, #228]	; (80029c4 <HAL_UART_MspInit+0x114>)
 80028e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e2:	f003 0310 	and.w	r3, r3, #16
 80028e6:	61bb      	str	r3, [r7, #24]
 80028e8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ea:	4b36      	ldr	r3, [pc, #216]	; (80029c4 <HAL_UART_MspInit+0x114>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	4a35      	ldr	r2, [pc, #212]	; (80029c4 <HAL_UART_MspInit+0x114>)
 80028f0:	f043 0302 	orr.w	r3, r3, #2
 80028f4:	6313      	str	r3, [r2, #48]	; 0x30
 80028f6:	4b33      	ldr	r3, [pc, #204]	; (80029c4 <HAL_UART_MspInit+0x114>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	617b      	str	r3, [r7, #20]
 8002900:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002902:	4b30      	ldr	r3, [pc, #192]	; (80029c4 <HAL_UART_MspInit+0x114>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	4a2f      	ldr	r2, [pc, #188]	; (80029c4 <HAL_UART_MspInit+0x114>)
 8002908:	f043 0301 	orr.w	r3, r3, #1
 800290c:	6313      	str	r3, [r2, #48]	; 0x30
 800290e:	4b2d      	ldr	r3, [pc, #180]	; (80029c4 <HAL_UART_MspInit+0x114>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	613b      	str	r3, [r7, #16]
 8002918:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800291a:	2380      	movs	r3, #128	; 0x80
 800291c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291e:	2302      	movs	r3, #2
 8002920:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002922:	2300      	movs	r3, #0
 8002924:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002926:	2300      	movs	r3, #0
 8002928:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800292a:	2307      	movs	r3, #7
 800292c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800292e:	f107 031c 	add.w	r3, r7, #28
 8002932:	4619      	mov	r1, r3
 8002934:	4824      	ldr	r0, [pc, #144]	; (80029c8 <HAL_UART_MspInit+0x118>)
 8002936:	f002 fa49 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800293a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800293e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002940:	2302      	movs	r3, #2
 8002942:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002944:	2300      	movs	r3, #0
 8002946:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002948:	2300      	movs	r3, #0
 800294a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800294c:	2307      	movs	r3, #7
 800294e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002950:	f107 031c 	add.w	r3, r7, #28
 8002954:	4619      	mov	r1, r3
 8002956:	481d      	ldr	r0, [pc, #116]	; (80029cc <HAL_UART_MspInit+0x11c>)
 8002958:	f002 fa38 	bl	8004dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800295c:	e02c      	b.n	80029b8 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a1b      	ldr	r2, [pc, #108]	; (80029d0 <HAL_UART_MspInit+0x120>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d127      	bne.n	80029b8 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002968:	4b16      	ldr	r3, [pc, #88]	; (80029c4 <HAL_UART_MspInit+0x114>)
 800296a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296c:	4a15      	ldr	r2, [pc, #84]	; (80029c4 <HAL_UART_MspInit+0x114>)
 800296e:	f043 0320 	orr.w	r3, r3, #32
 8002972:	6453      	str	r3, [r2, #68]	; 0x44
 8002974:	4b13      	ldr	r3, [pc, #76]	; (80029c4 <HAL_UART_MspInit+0x114>)
 8002976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002978:	f003 0320 	and.w	r3, r3, #32
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002980:	4b10      	ldr	r3, [pc, #64]	; (80029c4 <HAL_UART_MspInit+0x114>)
 8002982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002984:	4a0f      	ldr	r2, [pc, #60]	; (80029c4 <HAL_UART_MspInit+0x114>)
 8002986:	f043 0304 	orr.w	r3, r3, #4
 800298a:	6313      	str	r3, [r2, #48]	; 0x30
 800298c:	4b0d      	ldr	r3, [pc, #52]	; (80029c4 <HAL_UART_MspInit+0x114>)
 800298e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	60bb      	str	r3, [r7, #8]
 8002996:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002998:	23c0      	movs	r3, #192	; 0xc0
 800299a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299c:	2302      	movs	r3, #2
 800299e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a4:	2303      	movs	r3, #3
 80029a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80029a8:	2308      	movs	r3, #8
 80029aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029ac:	f107 031c 	add.w	r3, r7, #28
 80029b0:	4619      	mov	r1, r3
 80029b2:	4808      	ldr	r0, [pc, #32]	; (80029d4 <HAL_UART_MspInit+0x124>)
 80029b4:	f002 fa0a 	bl	8004dcc <HAL_GPIO_Init>
}
 80029b8:	bf00      	nop
 80029ba:	3730      	adds	r7, #48	; 0x30
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40011000 	.word	0x40011000
 80029c4:	40023800 	.word	0x40023800
 80029c8:	40020400 	.word	0x40020400
 80029cc:	40020000 	.word	0x40020000
 80029d0:	40011400 	.word	0x40011400
 80029d4:	40020800 	.word	0x40020800

080029d8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80029de:	1d3b      	adds	r3, r7, #4
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	605a      	str	r2, [r3, #4]
 80029e6:	609a      	str	r2, [r3, #8]
 80029e8:	60da      	str	r2, [r3, #12]
 80029ea:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80029ec:	4b3a      	ldr	r3, [pc, #232]	; (8002ad8 <HAL_FMC_MspInit+0x100>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d16d      	bne.n	8002ad0 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80029f4:	4b38      	ldr	r3, [pc, #224]	; (8002ad8 <HAL_FMC_MspInit+0x100>)
 80029f6:	2201      	movs	r2, #1
 80029f8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80029fa:	4b38      	ldr	r3, [pc, #224]	; (8002adc <HAL_FMC_MspInit+0x104>)
 80029fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fe:	4a37      	ldr	r2, [pc, #220]	; (8002adc <HAL_FMC_MspInit+0x104>)
 8002a00:	f043 0301 	orr.w	r3, r3, #1
 8002a04:	6393      	str	r3, [r2, #56]	; 0x38
 8002a06:	4b35      	ldr	r3, [pc, #212]	; (8002adc <HAL_FMC_MspInit+0x104>)
 8002a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	603b      	str	r3, [r7, #0]
 8002a10:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 8002a12:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002a16:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a18:	2302      	movs	r3, #2
 8002a1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a20:	2303      	movs	r3, #3
 8002a22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a24:	230c      	movs	r3, #12
 8002a26:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a28:	1d3b      	adds	r3, r7, #4
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	482c      	ldr	r0, [pc, #176]	; (8002ae0 <HAL_FMC_MspInit+0x108>)
 8002a2e:	f002 f9cd 	bl	8004dcc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 8002a32:	f248 1333 	movw	r3, #33075	; 0x8133
 8002a36:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a38:	2302      	movs	r3, #2
 8002a3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a40:	2303      	movs	r3, #3
 8002a42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a44:	230c      	movs	r3, #12
 8002a46:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a48:	1d3b      	adds	r3, r7, #4
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	4825      	ldr	r0, [pc, #148]	; (8002ae4 <HAL_FMC_MspInit+0x10c>)
 8002a4e:	f002 f9bd 	bl	8004dcc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 8002a52:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002a56:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a58:	2302      	movs	r3, #2
 8002a5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a60:	2303      	movs	r3, #3
 8002a62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a64:	230c      	movs	r3, #12
 8002a66:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a68:	1d3b      	adds	r3, r7, #4
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	481e      	ldr	r0, [pc, #120]	; (8002ae8 <HAL_FMC_MspInit+0x110>)
 8002a6e:	f002 f9ad 	bl	8004dcc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 8002a72:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002a76:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a78:	2302      	movs	r3, #2
 8002a7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a80:	2303      	movs	r3, #3
 8002a82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a84:	230c      	movs	r3, #12
 8002a86:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a88:	1d3b      	adds	r3, r7, #4
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4817      	ldr	r0, [pc, #92]	; (8002aec <HAL_FMC_MspInit+0x114>)
 8002a8e:	f002 f99d 	bl	8004dcc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8002a92:	2328      	movs	r3, #40	; 0x28
 8002a94:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a96:	2302      	movs	r3, #2
 8002a98:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002aa2:	230c      	movs	r3, #12
 8002aa4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002aa6:	1d3b      	adds	r3, r7, #4
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4811      	ldr	r0, [pc, #68]	; (8002af0 <HAL_FMC_MspInit+0x118>)
 8002aac:	f002 f98e 	bl	8004dcc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8002ab0:	2308      	movs	r3, #8
 8002ab2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002abc:	2303      	movs	r3, #3
 8002abe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ac0:	230c      	movs	r3, #12
 8002ac2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8002ac4:	1d3b      	adds	r3, r7, #4
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	480a      	ldr	r0, [pc, #40]	; (8002af4 <HAL_FMC_MspInit+0x11c>)
 8002aca:	f002 f97f 	bl	8004dcc <HAL_GPIO_Init>
 8002ace:	e000      	b.n	8002ad2 <HAL_FMC_MspInit+0xfa>
    return;
 8002ad0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002ad2:	3718      	adds	r7, #24
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	20000380 	.word	0x20000380
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	40021800 	.word	0x40021800
 8002ae8:	40020c00 	.word	0x40020c00
 8002aec:	40021400 	.word	0x40021400
 8002af0:	40021c00 	.word	0x40021c00
 8002af4:	40020800 	.word	0x40020800

08002af8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002b00:	f7ff ff6a 	bl	80029d8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002b04:	bf00      	nop
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b08a      	sub	sp, #40	; 0x28
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a2b      	ldr	r2, [pc, #172]	; (8002bc8 <HAL_SAI_MspInit+0xbc>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d124      	bne.n	8002b68 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002b1e:	4b2b      	ldr	r3, [pc, #172]	; (8002bcc <HAL_SAI_MspInit+0xc0>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10b      	bne.n	8002b3e <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002b26:	4b2a      	ldr	r3, [pc, #168]	; (8002bd0 <HAL_SAI_MspInit+0xc4>)
 8002b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2a:	4a29      	ldr	r2, [pc, #164]	; (8002bd0 <HAL_SAI_MspInit+0xc4>)
 8002b2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b30:	6453      	str	r3, [r2, #68]	; 0x44
 8002b32:	4b27      	ldr	r3, [pc, #156]	; (8002bd0 <HAL_SAI_MspInit+0xc4>)
 8002b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b3a:	613b      	str	r3, [r7, #16]
 8002b3c:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8002b3e:	4b23      	ldr	r3, [pc, #140]	; (8002bcc <HAL_SAI_MspInit+0xc0>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	3301      	adds	r3, #1
 8002b44:	4a21      	ldr	r2, [pc, #132]	; (8002bcc <HAL_SAI_MspInit+0xc0>)
 8002b46:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A 
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8002b48:	23f0      	movs	r3, #240	; 0xf0
 8002b4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b50:	2300      	movs	r3, #0
 8002b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b54:	2300      	movs	r3, #0
 8002b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002b58:	230a      	movs	r3, #10
 8002b5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002b5c:	f107 0314 	add.w	r3, r7, #20
 8002b60:	4619      	mov	r1, r3
 8002b62:	481c      	ldr	r0, [pc, #112]	; (8002bd4 <HAL_SAI_MspInit+0xc8>)
 8002b64:	f002 f932 	bl	8004dcc <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a1a      	ldr	r2, [pc, #104]	; (8002bd8 <HAL_SAI_MspInit+0xcc>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d125      	bne.n	8002bbe <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8002b72:	4b16      	ldr	r3, [pc, #88]	; (8002bcc <HAL_SAI_MspInit+0xc0>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10b      	bne.n	8002b92 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002b7a:	4b15      	ldr	r3, [pc, #84]	; (8002bd0 <HAL_SAI_MspInit+0xc4>)
 8002b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7e:	4a14      	ldr	r2, [pc, #80]	; (8002bd0 <HAL_SAI_MspInit+0xc4>)
 8002b80:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b84:	6453      	str	r3, [r2, #68]	; 0x44
 8002b86:	4b12      	ldr	r3, [pc, #72]	; (8002bd0 <HAL_SAI_MspInit+0xc4>)
 8002b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b8e:	60fb      	str	r3, [r7, #12]
 8002b90:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8002b92:	4b0e      	ldr	r3, [pc, #56]	; (8002bcc <HAL_SAI_MspInit+0xc0>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	3301      	adds	r3, #1
 8002b98:	4a0c      	ldr	r2, [pc, #48]	; (8002bcc <HAL_SAI_MspInit+0xc0>)
 8002b9a:	6013      	str	r3, [r2, #0]
    
    /**SAI2_B_Block_B GPIO Configuration    
    PG10     ------> SAI2_SD_B 
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8002b9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002baa:	2300      	movs	r3, #0
 8002bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002bae:	230a      	movs	r3, #10
 8002bb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8002bb2:	f107 0314 	add.w	r3, r7, #20
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	4808      	ldr	r0, [pc, #32]	; (8002bdc <HAL_SAI_MspInit+0xd0>)
 8002bba:	f002 f907 	bl	8004dcc <HAL_GPIO_Init>

    }
}
 8002bbe:	bf00      	nop
 8002bc0:	3728      	adds	r7, #40	; 0x28
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40015c04 	.word	0x40015c04
 8002bcc:	20000384 	.word	0x20000384
 8002bd0:	40023800 	.word	0x40023800
 8002bd4:	40022000 	.word	0x40022000
 8002bd8:	40015c24 	.word	0x40015c24
 8002bdc:	40021800 	.word	0x40021800

08002be0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b08c      	sub	sp, #48	; 0x30
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002be8:	2300      	movs	r3, #0
 8002bea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002bec:	2300      	movs	r3, #0
 8002bee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	6879      	ldr	r1, [r7, #4]
 8002bf4:	2036      	movs	r0, #54	; 0x36
 8002bf6:	f001 fabb 	bl	8004170 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8002bfa:	2036      	movs	r0, #54	; 0x36
 8002bfc:	f001 fad4 	bl	80041a8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002c00:	4b1f      	ldr	r3, [pc, #124]	; (8002c80 <HAL_InitTick+0xa0>)
 8002c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c04:	4a1e      	ldr	r2, [pc, #120]	; (8002c80 <HAL_InitTick+0xa0>)
 8002c06:	f043 0310 	orr.w	r3, r3, #16
 8002c0a:	6413      	str	r3, [r2, #64]	; 0x40
 8002c0c:	4b1c      	ldr	r3, [pc, #112]	; (8002c80 <HAL_InitTick+0xa0>)
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c10:	f003 0310 	and.w	r3, r3, #16
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c18:	f107 0210 	add.w	r2, r7, #16
 8002c1c:	f107 0314 	add.w	r3, r7, #20
 8002c20:	4611      	mov	r1, r2
 8002c22:	4618      	mov	r0, r3
 8002c24:	f003 fbde 	bl	80063e4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002c28:	f003 fbb4 	bl	8006394 <HAL_RCC_GetPCLK1Freq>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c34:	4a13      	ldr	r2, [pc, #76]	; (8002c84 <HAL_InitTick+0xa4>)
 8002c36:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3a:	0c9b      	lsrs	r3, r3, #18
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002c40:	4b11      	ldr	r3, [pc, #68]	; (8002c88 <HAL_InitTick+0xa8>)
 8002c42:	4a12      	ldr	r2, [pc, #72]	; (8002c8c <HAL_InitTick+0xac>)
 8002c44:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8002c46:	4b10      	ldr	r3, [pc, #64]	; (8002c88 <HAL_InitTick+0xa8>)
 8002c48:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c4c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002c4e:	4a0e      	ldr	r2, [pc, #56]	; (8002c88 <HAL_InitTick+0xa8>)
 8002c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c52:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002c54:	4b0c      	ldr	r3, [pc, #48]	; (8002c88 <HAL_InitTick+0xa8>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c5a:	4b0b      	ldr	r3, [pc, #44]	; (8002c88 <HAL_InitTick+0xa8>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002c60:	4809      	ldr	r0, [pc, #36]	; (8002c88 <HAL_InitTick+0xa8>)
 8002c62:	f006 f857 	bl	8008d14 <HAL_TIM_Base_Init>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d104      	bne.n	8002c76 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002c6c:	4806      	ldr	r0, [pc, #24]	; (8002c88 <HAL_InitTick+0xa8>)
 8002c6e:	f006 f87d 	bl	8008d6c <HAL_TIM_Base_Start_IT>
 8002c72:	4603      	mov	r3, r0
 8002c74:	e000      	b.n	8002c78 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3730      	adds	r7, #48	; 0x30
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	40023800 	.word	0x40023800
 8002c84:	431bde83 	.word	0x431bde83
 8002c88:	2000c4e8 	.word	0x2000c4e8
 8002c8c:	40001000 	.word	0x40001000

08002c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002c94:	bf00      	nop
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr

08002c9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ca2:	e7fe      	b.n	8002ca2 <HardFault_Handler+0x4>

08002ca4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ca8:	e7fe      	b.n	8002ca8 <MemManage_Handler+0x4>

08002caa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002caa:	b480      	push	{r7}
 8002cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cae:	e7fe      	b.n	8002cae <BusFault_Handler+0x4>

08002cb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cb4:	e7fe      	b.n	8002cb4 <UsageFault_Handler+0x4>

08002cb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cba:	bf00      	nop
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002cc8:	4802      	ldr	r0, [pc, #8]	; (8002cd4 <CAN1_RX0_IRQHandler+0x10>)
 8002cca:	f000 ff4d 	bl	8003b68 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002cce:	bf00      	nop
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	2000c3e4 	.word	0x2000c3e4

08002cd8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002cdc:	4802      	ldr	r0, [pc, #8]	; (8002ce8 <TIM6_DAC_IRQHandler+0x10>)
 8002cde:	f006 f89a 	bl	8008e16 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002ce2:	bf00      	nop
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	2000c4e8 	.word	0x2000c4e8

08002cec <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002cf0:	4802      	ldr	r0, [pc, #8]	; (8002cfc <LTDC_IRQHandler+0x10>)
 8002cf2:	f002 fb17 	bl	8005324 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002cf6:	bf00      	nop
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	2000c0bc 	.word	0x2000c0bc

08002d00 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002d04:	4802      	ldr	r0, [pc, #8]	; (8002d10 <DMA2D_IRQHandler+0x10>)
 8002d06:	f001 fe22 	bl	800494e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002d0a:	bf00      	nop
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	2000c35c 	.word	0x2000c35c

08002d14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
	return 1;
 8002d18:	2301      	movs	r3, #1
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <_kill>:

int _kill(int pid, int sig)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002d2e:	f020 fbb5 	bl	802349c <__errno>
 8002d32:	4602      	mov	r2, r0
 8002d34:	2316      	movs	r3, #22
 8002d36:	6013      	str	r3, [r2, #0]
	return -1;
 8002d38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3708      	adds	r7, #8
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <_exit>:

void _exit (int status)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f7ff ffe7 	bl	8002d24 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002d56:	e7fe      	b.n	8002d56 <_exit+0x12>

08002d58 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d64:	2300      	movs	r3, #0
 8002d66:	617b      	str	r3, [r7, #20]
 8002d68:	e00a      	b.n	8002d80 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002d6a:	f3af 8000 	nop.w
 8002d6e:	4601      	mov	r1, r0
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	1c5a      	adds	r2, r3, #1
 8002d74:	60ba      	str	r2, [r7, #8]
 8002d76:	b2ca      	uxtb	r2, r1
 8002d78:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	617b      	str	r3, [r7, #20]
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	dbf0      	blt.n	8002d6a <_read+0x12>
	}

return len;
 8002d88:	687b      	ldr	r3, [r7, #4]
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3718      	adds	r7, #24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b086      	sub	sp, #24
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	60f8      	str	r0, [r7, #12]
 8002d9a:	60b9      	str	r1, [r7, #8]
 8002d9c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d9e:	2300      	movs	r3, #0
 8002da0:	617b      	str	r3, [r7, #20]
 8002da2:	e009      	b.n	8002db8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	1c5a      	adds	r2, r3, #1
 8002da8:	60ba      	str	r2, [r7, #8]
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	3301      	adds	r3, #1
 8002db6:	617b      	str	r3, [r7, #20]
 8002db8:	697a      	ldr	r2, [r7, #20]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	dbf1      	blt.n	8002da4 <_write+0x12>
	}
	return len;
 8002dc0:	687b      	ldr	r3, [r7, #4]
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3718      	adds	r7, #24
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <_close>:

int _close(int file)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b083      	sub	sp, #12
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
	return -1;
 8002dd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002de2:	b480      	push	{r7}
 8002de4:	b083      	sub	sp, #12
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
 8002dea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002df2:	605a      	str	r2, [r3, #4]
	return 0;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <_isatty>:

int _isatty(int file)
{
 8002e02:	b480      	push	{r7}
 8002e04:	b083      	sub	sp, #12
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
	return 1;
 8002e0a:	2301      	movs	r3, #1
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
	return 0;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3714      	adds	r7, #20
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
	...

08002e34 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002e3c:	4b11      	ldr	r3, [pc, #68]	; (8002e84 <_sbrk+0x50>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d102      	bne.n	8002e4a <_sbrk+0x16>
		heap_end = &end;
 8002e44:	4b0f      	ldr	r3, [pc, #60]	; (8002e84 <_sbrk+0x50>)
 8002e46:	4a10      	ldr	r2, [pc, #64]	; (8002e88 <_sbrk+0x54>)
 8002e48:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002e4a:	4b0e      	ldr	r3, [pc, #56]	; (8002e84 <_sbrk+0x50>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002e50:	4b0c      	ldr	r3, [pc, #48]	; (8002e84 <_sbrk+0x50>)
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4413      	add	r3, r2
 8002e58:	466a      	mov	r2, sp
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d907      	bls.n	8002e6e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002e5e:	f020 fb1d 	bl	802349c <__errno>
 8002e62:	4602      	mov	r2, r0
 8002e64:	230c      	movs	r3, #12
 8002e66:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002e68:	f04f 33ff 	mov.w	r3, #4294967295
 8002e6c:	e006      	b.n	8002e7c <_sbrk+0x48>
	}

	heap_end += incr;
 8002e6e:	4b05      	ldr	r3, [pc, #20]	; (8002e84 <_sbrk+0x50>)
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4413      	add	r3, r2
 8002e76:	4a03      	ldr	r2, [pc, #12]	; (8002e84 <_sbrk+0x50>)
 8002e78:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3710      	adds	r7, #16
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	20000388 	.word	0x20000388
 8002e88:	2000c9a0 	.word	0x2000c9a0

08002e8c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e90:	4b08      	ldr	r3, [pc, #32]	; (8002eb4 <SystemInit+0x28>)
 8002e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e96:	4a07      	ldr	r2, [pc, #28]	; (8002eb4 <SystemInit+0x28>)
 8002e98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002ea0:	4b04      	ldr	r3, [pc, #16]	; (8002eb4 <SystemInit+0x28>)
 8002ea2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ea6:	609a      	str	r2, [r3, #8]
#endif
}
 8002ea8:	bf00      	nop
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	e000ed00 	.word	0xe000ed00

08002eb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002eb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ef0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002ebc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002ebe:	e003      	b.n	8002ec8 <LoopCopyDataInit>

08002ec0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002ec0:	4b0c      	ldr	r3, [pc, #48]	; (8002ef4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002ec2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002ec4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002ec6:	3104      	adds	r1, #4

08002ec8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002ec8:	480b      	ldr	r0, [pc, #44]	; (8002ef8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002eca:	4b0c      	ldr	r3, [pc, #48]	; (8002efc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002ecc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002ece:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002ed0:	d3f6      	bcc.n	8002ec0 <CopyDataInit>
  ldr  r2, =_sbss
 8002ed2:	4a0b      	ldr	r2, [pc, #44]	; (8002f00 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002ed4:	e002      	b.n	8002edc <LoopFillZerobss>

08002ed6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002ed6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002ed8:	f842 3b04 	str.w	r3, [r2], #4

08002edc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002edc:	4b09      	ldr	r3, [pc, #36]	; (8002f04 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002ede:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002ee0:	d3f9      	bcc.n	8002ed6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ee2:	f7ff ffd3 	bl	8002e8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ee6:	f020 faf1 	bl	80234cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002eea:	f7fd fbc1 	bl	8000670 <main>
  bx  lr    
 8002eee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ef0:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002ef4:	0802d034 	.word	0x0802d034
  ldr  r0, =_sdata
 8002ef8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002efc:	200000fc 	.word	0x200000fc
  ldr  r2, =_sbss
 8002f00:	200000fc 	.word	0x200000fc
  ldr  r3, = _ebss
 8002f04:	2000c99c 	.word	0x2000c99c

08002f08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f08:	e7fe      	b.n	8002f08 <ADC_IRQHandler>

08002f0a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f0e:	2003      	movs	r0, #3
 8002f10:	f001 f923 	bl	800415a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f14:	2000      	movs	r0, #0
 8002f16:	f7ff fe63 	bl	8002be0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002f1a:	f7fe ff09 	bl	8001d30 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f28:	4b06      	ldr	r3, [pc, #24]	; (8002f44 <HAL_IncTick+0x20>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	4b06      	ldr	r3, [pc, #24]	; (8002f48 <HAL_IncTick+0x24>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4413      	add	r3, r2
 8002f34:	4a04      	ldr	r2, [pc, #16]	; (8002f48 <HAL_IncTick+0x24>)
 8002f36:	6013      	str	r3, [r2, #0]
}
 8002f38:	bf00      	nop
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	20000020 	.word	0x20000020
 8002f48:	2000c528 	.word	0x2000c528

08002f4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8002f50:	4b03      	ldr	r3, [pc, #12]	; (8002f60 <HAL_GetTick+0x14>)
 8002f52:	681b      	ldr	r3, [r3, #0]
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	2000c528 	.word	0x2000c528

08002f64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f6c:	f7ff ffee 	bl	8002f4c <HAL_GetTick>
 8002f70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7c:	d005      	beq.n	8002f8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f7e:	4b09      	ldr	r3, [pc, #36]	; (8002fa4 <HAL_Delay+0x40>)
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	461a      	mov	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	4413      	add	r3, r2
 8002f88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f8a:	bf00      	nop
 8002f8c:	f7ff ffde 	bl	8002f4c <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d8f7      	bhi.n	8002f8c <HAL_Delay+0x28>
  {
  }
}
 8002f9c:	bf00      	nop
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	20000020 	.word	0x20000020

08002fa8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e031      	b.n	8003022 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d109      	bne.n	8002fda <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f7fe feda 	bl	8001d80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	f003 0310 	and.w	r3, r3, #16
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d116      	bne.n	8003014 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fea:	4b10      	ldr	r3, [pc, #64]	; (800302c <HAL_ADC_Init+0x84>)
 8002fec:	4013      	ands	r3, r2
 8002fee:	f043 0202 	orr.w	r2, r3, #2
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 f964 	bl	80032c4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	f023 0303 	bic.w	r3, r3, #3
 800300a:	f043 0201 	orr.w	r2, r3, #1
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	641a      	str	r2, [r3, #64]	; 0x40
 8003012:	e001      	b.n	8003018 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003020:	7bfb      	ldrb	r3, [r7, #15]
}
 8003022:	4618      	mov	r0, r3
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	ffffeefd 	.word	0xffffeefd

08003030 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800303a:	2300      	movs	r3, #0
 800303c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003044:	2b01      	cmp	r3, #1
 8003046:	d101      	bne.n	800304c <HAL_ADC_ConfigChannel+0x1c>
 8003048:	2302      	movs	r3, #2
 800304a:	e12a      	b.n	80032a2 <HAL_ADC_ConfigChannel+0x272>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2b09      	cmp	r3, #9
 800305a:	d93a      	bls.n	80030d2 <HAL_ADC_ConfigChannel+0xa2>
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003064:	d035      	beq.n	80030d2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68d9      	ldr	r1, [r3, #12]
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	b29b      	uxth	r3, r3
 8003072:	461a      	mov	r2, r3
 8003074:	4613      	mov	r3, r2
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	4413      	add	r3, r2
 800307a:	3b1e      	subs	r3, #30
 800307c:	2207      	movs	r2, #7
 800307e:	fa02 f303 	lsl.w	r3, r2, r3
 8003082:	43da      	mvns	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	400a      	ands	r2, r1
 800308a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a87      	ldr	r2, [pc, #540]	; (80032b0 <HAL_ADC_ConfigChannel+0x280>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d10a      	bne.n	80030ac <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68d9      	ldr	r1, [r3, #12]
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	061a      	lsls	r2, r3, #24
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030aa:	e035      	b.n	8003118 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68d9      	ldr	r1, [r3, #12]
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	689a      	ldr	r2, [r3, #8]
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	4618      	mov	r0, r3
 80030be:	4603      	mov	r3, r0
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	4403      	add	r3, r0
 80030c4:	3b1e      	subs	r3, #30
 80030c6:	409a      	lsls	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030d0:	e022      	b.n	8003118 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	6919      	ldr	r1, [r3, #16]
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	b29b      	uxth	r3, r3
 80030de:	461a      	mov	r2, r3
 80030e0:	4613      	mov	r3, r2
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	4413      	add	r3, r2
 80030e6:	2207      	movs	r2, #7
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	43da      	mvns	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	400a      	ands	r2, r1
 80030f4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	6919      	ldr	r1, [r3, #16]
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	b29b      	uxth	r3, r3
 8003106:	4618      	mov	r0, r3
 8003108:	4603      	mov	r3, r0
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	4403      	add	r3, r0
 800310e:	409a      	lsls	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	430a      	orrs	r2, r1
 8003116:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	2b06      	cmp	r3, #6
 800311e:	d824      	bhi.n	800316a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	4613      	mov	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	4413      	add	r3, r2
 8003130:	3b05      	subs	r3, #5
 8003132:	221f      	movs	r2, #31
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	43da      	mvns	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	400a      	ands	r2, r1
 8003140:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	b29b      	uxth	r3, r3
 800314e:	4618      	mov	r0, r3
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685a      	ldr	r2, [r3, #4]
 8003154:	4613      	mov	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4413      	add	r3, r2
 800315a:	3b05      	subs	r3, #5
 800315c:	fa00 f203 	lsl.w	r2, r0, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	430a      	orrs	r2, r1
 8003166:	635a      	str	r2, [r3, #52]	; 0x34
 8003168:	e04c      	b.n	8003204 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	2b0c      	cmp	r3, #12
 8003170:	d824      	bhi.n	80031bc <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685a      	ldr	r2, [r3, #4]
 800317c:	4613      	mov	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	3b23      	subs	r3, #35	; 0x23
 8003184:	221f      	movs	r2, #31
 8003186:	fa02 f303 	lsl.w	r3, r2, r3
 800318a:	43da      	mvns	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	400a      	ands	r2, r1
 8003192:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	b29b      	uxth	r3, r3
 80031a0:	4618      	mov	r0, r3
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685a      	ldr	r2, [r3, #4]
 80031a6:	4613      	mov	r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4413      	add	r3, r2
 80031ac:	3b23      	subs	r3, #35	; 0x23
 80031ae:	fa00 f203 	lsl.w	r2, r0, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	631a      	str	r2, [r3, #48]	; 0x30
 80031ba:	e023      	b.n	8003204 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685a      	ldr	r2, [r3, #4]
 80031c6:	4613      	mov	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	4413      	add	r3, r2
 80031cc:	3b41      	subs	r3, #65	; 0x41
 80031ce:	221f      	movs	r2, #31
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	43da      	mvns	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	400a      	ands	r2, r1
 80031dc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	4618      	mov	r0, r3
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685a      	ldr	r2, [r3, #4]
 80031f0:	4613      	mov	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4413      	add	r3, r2
 80031f6:	3b41      	subs	r3, #65	; 0x41
 80031f8:	fa00 f203 	lsl.w	r2, r0, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	430a      	orrs	r2, r1
 8003202:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a2a      	ldr	r2, [pc, #168]	; (80032b4 <HAL_ADC_ConfigChannel+0x284>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d10a      	bne.n	8003224 <HAL_ADC_ConfigChannel+0x1f4>
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003216:	d105      	bne.n	8003224 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003218:	4b27      	ldr	r3, [pc, #156]	; (80032b8 <HAL_ADC_ConfigChannel+0x288>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	4a26      	ldr	r2, [pc, #152]	; (80032b8 <HAL_ADC_ConfigChannel+0x288>)
 800321e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003222:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a22      	ldr	r2, [pc, #136]	; (80032b4 <HAL_ADC_ConfigChannel+0x284>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d109      	bne.n	8003242 <HAL_ADC_ConfigChannel+0x212>
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2b12      	cmp	r3, #18
 8003234:	d105      	bne.n	8003242 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003236:	4b20      	ldr	r3, [pc, #128]	; (80032b8 <HAL_ADC_ConfigChannel+0x288>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	4a1f      	ldr	r2, [pc, #124]	; (80032b8 <HAL_ADC_ConfigChannel+0x288>)
 800323c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003240:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a1b      	ldr	r2, [pc, #108]	; (80032b4 <HAL_ADC_ConfigChannel+0x284>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d125      	bne.n	8003298 <HAL_ADC_ConfigChannel+0x268>
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a17      	ldr	r2, [pc, #92]	; (80032b0 <HAL_ADC_ConfigChannel+0x280>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d003      	beq.n	800325e <HAL_ADC_ConfigChannel+0x22e>
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2b11      	cmp	r3, #17
 800325c:	d11c      	bne.n	8003298 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800325e:	4b16      	ldr	r3, [pc, #88]	; (80032b8 <HAL_ADC_ConfigChannel+0x288>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	4a15      	ldr	r2, [pc, #84]	; (80032b8 <HAL_ADC_ConfigChannel+0x288>)
 8003264:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003268:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a10      	ldr	r2, [pc, #64]	; (80032b0 <HAL_ADC_ConfigChannel+0x280>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d111      	bne.n	8003298 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003274:	4b11      	ldr	r3, [pc, #68]	; (80032bc <HAL_ADC_ConfigChannel+0x28c>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a11      	ldr	r2, [pc, #68]	; (80032c0 <HAL_ADC_ConfigChannel+0x290>)
 800327a:	fba2 2303 	umull	r2, r3, r2, r3
 800327e:	0c9a      	lsrs	r2, r3, #18
 8003280:	4613      	mov	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	4413      	add	r3, r2
 8003286:	005b      	lsls	r3, r3, #1
 8003288:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800328a:	e002      	b.n	8003292 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	3b01      	subs	r3, #1
 8003290:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1f9      	bne.n	800328c <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3714      	adds	r7, #20
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	10000012 	.word	0x10000012
 80032b4:	40012000 	.word	0x40012000
 80032b8:	40012300 	.word	0x40012300
 80032bc:	20000018 	.word	0x20000018
 80032c0:	431bde83 	.word	0x431bde83

080032c4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80032cc:	4b78      	ldr	r3, [pc, #480]	; (80034b0 <ADC_Init+0x1ec>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	4a77      	ldr	r2, [pc, #476]	; (80034b0 <ADC_Init+0x1ec>)
 80032d2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80032d6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80032d8:	4b75      	ldr	r3, [pc, #468]	; (80034b0 <ADC_Init+0x1ec>)
 80032da:	685a      	ldr	r2, [r3, #4]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	4973      	ldr	r1, [pc, #460]	; (80034b0 <ADC_Init+0x1ec>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	685a      	ldr	r2, [r3, #4]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	6859      	ldr	r1, [r3, #4]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	021a      	lsls	r2, r3, #8
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	430a      	orrs	r2, r1
 8003308:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	685a      	ldr	r2, [r3, #4]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003318:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	6859      	ldr	r1, [r3, #4]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	430a      	orrs	r2, r1
 800332a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689a      	ldr	r2, [r3, #8]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800333a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6899      	ldr	r1, [r3, #8]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	68da      	ldr	r2, [r3, #12]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	430a      	orrs	r2, r1
 800334c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003352:	4a58      	ldr	r2, [pc, #352]	; (80034b4 <ADC_Init+0x1f0>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d022      	beq.n	800339e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689a      	ldr	r2, [r3, #8]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003366:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6899      	ldr	r1, [r3, #8]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	430a      	orrs	r2, r1
 8003378:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003388:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6899      	ldr	r1, [r3, #8]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	430a      	orrs	r2, r1
 800339a:	609a      	str	r2, [r3, #8]
 800339c:	e00f      	b.n	80033be <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80033bc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 0202 	bic.w	r2, r2, #2
 80033cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	6899      	ldr	r1, [r3, #8]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	005a      	lsls	r2, r3, #1
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	430a      	orrs	r2, r1
 80033e0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d01b      	beq.n	8003424 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	685a      	ldr	r2, [r3, #4]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033fa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800340a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6859      	ldr	r1, [r3, #4]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003416:	3b01      	subs	r3, #1
 8003418:	035a      	lsls	r2, r3, #13
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	430a      	orrs	r2, r1
 8003420:	605a      	str	r2, [r3, #4]
 8003422:	e007      	b.n	8003434 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003432:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003442:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	69db      	ldr	r3, [r3, #28]
 800344e:	3b01      	subs	r3, #1
 8003450:	051a      	lsls	r2, r3, #20
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689a      	ldr	r2, [r3, #8]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003468:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	6899      	ldr	r1, [r3, #8]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003476:	025a      	lsls	r2, r3, #9
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	430a      	orrs	r2, r1
 800347e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689a      	ldr	r2, [r3, #8]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800348e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6899      	ldr	r1, [r3, #8]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	029a      	lsls	r2, r3, #10
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	430a      	orrs	r2, r1
 80034a2:	609a      	str	r2, [r3, #8]
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	40012300 	.word	0x40012300
 80034b4:	0f000001 	.word	0x0f000001

080034b8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e0ed      	b.n	80036a6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d102      	bne.n	80034dc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7fe fcac 	bl	8001e34 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f022 0202 	bic.w	r2, r2, #2
 80034ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034ec:	f7ff fd2e 	bl	8002f4c <HAL_GetTick>
 80034f0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80034f2:	e012      	b.n	800351a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80034f4:	f7ff fd2a 	bl	8002f4c <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b0a      	cmp	r3, #10
 8003500:	d90b      	bls.n	800351a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003506:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2205      	movs	r2, #5
 8003512:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e0c5      	b.n	80036a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f003 0302 	and.w	r3, r3, #2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d1e5      	bne.n	80034f4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f042 0201 	orr.w	r2, r2, #1
 8003536:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003538:	f7ff fd08 	bl	8002f4c <HAL_GetTick>
 800353c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800353e:	e012      	b.n	8003566 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003540:	f7ff fd04 	bl	8002f4c <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b0a      	cmp	r3, #10
 800354c:	d90b      	bls.n	8003566 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003552:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2205      	movs	r2, #5
 800355e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e09f      	b.n	80036a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	2b00      	cmp	r3, #0
 8003572:	d0e5      	beq.n	8003540 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	7e1b      	ldrb	r3, [r3, #24]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d108      	bne.n	800358e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800358a:	601a      	str	r2, [r3, #0]
 800358c:	e007      	b.n	800359e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800359c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	7e5b      	ldrb	r3, [r3, #25]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d108      	bne.n	80035b8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035b4:	601a      	str	r2, [r3, #0]
 80035b6:	e007      	b.n	80035c8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	7e9b      	ldrb	r3, [r3, #26]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d108      	bne.n	80035e2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f042 0220 	orr.w	r2, r2, #32
 80035de:	601a      	str	r2, [r3, #0]
 80035e0:	e007      	b.n	80035f2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 0220 	bic.w	r2, r2, #32
 80035f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	7edb      	ldrb	r3, [r3, #27]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d108      	bne.n	800360c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f022 0210 	bic.w	r2, r2, #16
 8003608:	601a      	str	r2, [r3, #0]
 800360a:	e007      	b.n	800361c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f042 0210 	orr.w	r2, r2, #16
 800361a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	7f1b      	ldrb	r3, [r3, #28]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d108      	bne.n	8003636 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f042 0208 	orr.w	r2, r2, #8
 8003632:	601a      	str	r2, [r3, #0]
 8003634:	e007      	b.n	8003646 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0208 	bic.w	r2, r2, #8
 8003644:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	7f5b      	ldrb	r3, [r3, #29]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d108      	bne.n	8003660 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f042 0204 	orr.w	r2, r2, #4
 800365c:	601a      	str	r2, [r3, #0]
 800365e:	e007      	b.n	8003670 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 0204 	bic.w	r2, r2, #4
 800366e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	689a      	ldr	r2, [r3, #8]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	431a      	orrs	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	431a      	orrs	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	695b      	ldr	r3, [r3, #20]
 8003684:	ea42 0103 	orr.w	r1, r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	1e5a      	subs	r2, r3, #1
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	430a      	orrs	r2, r1
 8003694:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3710      	adds	r7, #16
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
	...

080036b0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b087      	sub	sp, #28
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036c6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80036c8:	7cfb      	ldrb	r3, [r7, #19]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d003      	beq.n	80036d6 <HAL_CAN_ConfigFilter+0x26>
 80036ce:	7cfb      	ldrb	r3, [r7, #19]
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	f040 80be 	bne.w	8003852 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80036d6:	4b65      	ldr	r3, [pc, #404]	; (800386c <HAL_CAN_ConfigFilter+0x1bc>)
 80036d8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80036e0:	f043 0201 	orr.w	r2, r3, #1
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80036f0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003704:	021b      	lsls	r3, r3, #8
 8003706:	431a      	orrs	r2, r3
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	f003 031f 	and.w	r3, r3, #31
 8003716:	2201      	movs	r2, #1
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	43db      	mvns	r3, r3
 8003728:	401a      	ands	r2, r3
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	69db      	ldr	r3, [r3, #28]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d123      	bne.n	8003780 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	43db      	mvns	r3, r3
 8003742:	401a      	ands	r2, r3
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800375a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	3248      	adds	r2, #72	; 0x48
 8003760:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003774:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003776:	6979      	ldr	r1, [r7, #20]
 8003778:	3348      	adds	r3, #72	; 0x48
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	440b      	add	r3, r1
 800377e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	69db      	ldr	r3, [r3, #28]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d122      	bne.n	80037ce <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	431a      	orrs	r2, r3
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80037a4:	683a      	ldr	r2, [r7, #0]
 80037a6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80037a8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	3248      	adds	r2, #72	; 0x48
 80037ae:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80037c2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80037c4:	6979      	ldr	r1, [r7, #20]
 80037c6:	3348      	adds	r3, #72	; 0x48
 80037c8:	00db      	lsls	r3, r3, #3
 80037ca:	440b      	add	r3, r1
 80037cc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d109      	bne.n	80037ea <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	43db      	mvns	r3, r3
 80037e0:	401a      	ands	r2, r3
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80037e8:	e007      	b.n	80037fa <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	431a      	orrs	r2, r3
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d109      	bne.n	8003816 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	43db      	mvns	r3, r3
 800380c:	401a      	ands	r2, r3
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003814:	e007      	b.n	8003826 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	431a      	orrs	r2, r3
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d107      	bne.n	800383e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	431a      	orrs	r2, r3
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003844:	f023 0201 	bic.w	r2, r3, #1
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800384e:	2300      	movs	r3, #0
 8003850:	e006      	b.n	8003860 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003856:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
  }
}
 8003860:	4618      	mov	r0, r3
 8003862:	371c      	adds	r7, #28
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr
 800386c:	40006400 	.word	0x40006400

08003870 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b01      	cmp	r3, #1
 8003882:	d12e      	bne.n	80038e2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2202      	movs	r2, #2
 8003888:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f022 0201 	bic.w	r2, r2, #1
 800389a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800389c:	f7ff fb56 	bl	8002f4c <HAL_GetTick>
 80038a0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80038a2:	e012      	b.n	80038ca <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80038a4:	f7ff fb52 	bl	8002f4c <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b0a      	cmp	r3, #10
 80038b0:	d90b      	bls.n	80038ca <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2205      	movs	r2, #5
 80038c2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e012      	b.n	80038f0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1e5      	bne.n	80038a4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80038de:	2300      	movs	r3, #0
 80038e0:	e006      	b.n	80038f0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
  }
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3710      	adds	r7, #16
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80038f8:	b480      	push	{r7}
 80038fa:	b087      	sub	sp, #28
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
 8003904:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f893 3020 	ldrb.w	r3, [r3, #32]
 800390c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800390e:	7dfb      	ldrb	r3, [r7, #23]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d003      	beq.n	800391c <HAL_CAN_GetRxMessage+0x24>
 8003914:	7dfb      	ldrb	r3, [r7, #23]
 8003916:	2b02      	cmp	r3, #2
 8003918:	f040 80f3 	bne.w	8003b02 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10e      	bne.n	8003940 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	f003 0303 	and.w	r3, r3, #3
 800392c:	2b00      	cmp	r3, #0
 800392e:	d116      	bne.n	800395e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003934:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e0e7      	b.n	8003b10 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	f003 0303 	and.w	r3, r3, #3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d107      	bne.n	800395e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003952:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e0d8      	b.n	8003b10 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	331b      	adds	r3, #27
 8003966:	011b      	lsls	r3, r3, #4
 8003968:	4413      	add	r3, r2
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0204 	and.w	r2, r3, #4
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10c      	bne.n	8003996 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	331b      	adds	r3, #27
 8003984:	011b      	lsls	r3, r3, #4
 8003986:	4413      	add	r3, r2
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	0d5b      	lsrs	r3, r3, #21
 800398c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	601a      	str	r2, [r3, #0]
 8003994:	e00b      	b.n	80039ae <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	331b      	adds	r3, #27
 800399e:	011b      	lsls	r3, r3, #4
 80039a0:	4413      	add	r3, r2
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	08db      	lsrs	r3, r3, #3
 80039a6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	331b      	adds	r3, #27
 80039b6:	011b      	lsls	r3, r3, #4
 80039b8:	4413      	add	r3, r2
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0202 	and.w	r2, r3, #2
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	331b      	adds	r3, #27
 80039cc:	011b      	lsls	r3, r3, #4
 80039ce:	4413      	add	r3, r2
 80039d0:	3304      	adds	r3, #4
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 020f 	and.w	r2, r3, #15
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	331b      	adds	r3, #27
 80039e4:	011b      	lsls	r3, r3, #4
 80039e6:	4413      	add	r3, r2
 80039e8:	3304      	adds	r3, #4
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	0a1b      	lsrs	r3, r3, #8
 80039ee:	b2da      	uxtb	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	331b      	adds	r3, #27
 80039fc:	011b      	lsls	r3, r3, #4
 80039fe:	4413      	add	r3, r2
 8003a00:	3304      	adds	r3, #4
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	0c1b      	lsrs	r3, r3, #16
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	011b      	lsls	r3, r3, #4
 8003a14:	4413      	add	r3, r2
 8003a16:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	b2da      	uxtb	r2, r3
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	011b      	lsls	r3, r3, #4
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	0a1a      	lsrs	r2, r3, #8
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	3301      	adds	r3, #1
 8003a38:	b2d2      	uxtb	r2, r2
 8003a3a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	011b      	lsls	r3, r3, #4
 8003a44:	4413      	add	r3, r2
 8003a46:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	0c1a      	lsrs	r2, r3, #16
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	3302      	adds	r3, #2
 8003a52:	b2d2      	uxtb	r2, r2
 8003a54:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	011b      	lsls	r3, r3, #4
 8003a5e:	4413      	add	r3, r2
 8003a60:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	0e1a      	lsrs	r2, r3, #24
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	3303      	adds	r3, #3
 8003a6c:	b2d2      	uxtb	r2, r2
 8003a6e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	011b      	lsls	r3, r3, #4
 8003a78:	4413      	add	r3, r2
 8003a7a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	3304      	adds	r3, #4
 8003a84:	b2d2      	uxtb	r2, r2
 8003a86:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	011b      	lsls	r3, r3, #4
 8003a90:	4413      	add	r3, r2
 8003a92:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	0a1a      	lsrs	r2, r3, #8
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	3305      	adds	r3, #5
 8003a9e:	b2d2      	uxtb	r2, r2
 8003aa0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	011b      	lsls	r3, r3, #4
 8003aaa:	4413      	add	r3, r2
 8003aac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	0c1a      	lsrs	r2, r3, #16
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	3306      	adds	r3, #6
 8003ab8:	b2d2      	uxtb	r2, r2
 8003aba:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	011b      	lsls	r3, r3, #4
 8003ac4:	4413      	add	r3, r2
 8003ac6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	0e1a      	lsrs	r2, r3, #24
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	3307      	adds	r3, #7
 8003ad2:	b2d2      	uxtb	r2, r2
 8003ad4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d108      	bne.n	8003aee <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68da      	ldr	r2, [r3, #12]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f042 0220 	orr.w	r2, r2, #32
 8003aea:	60da      	str	r2, [r3, #12]
 8003aec:	e007      	b.n	8003afe <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	691a      	ldr	r2, [r3, #16]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f042 0220 	orr.w	r2, r2, #32
 8003afc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003afe:	2300      	movs	r3, #0
 8003b00:	e006      	b.n	8003b10 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b06:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
  }
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	371c      	adds	r7, #28
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b2c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003b2e:	7bfb      	ldrb	r3, [r7, #15]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d002      	beq.n	8003b3a <HAL_CAN_ActivateNotification+0x1e>
 8003b34:	7bfb      	ldrb	r3, [r7, #15]
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d109      	bne.n	8003b4e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	6959      	ldr	r1, [r3, #20]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	e006      	b.n	8003b5c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b52:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
  }
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3714      	adds	r7, #20
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b08a      	sub	sp, #40	; 0x28
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003b70:	2300      	movs	r3, #0
 8003b72:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003ba4:	6a3b      	ldr	r3, [r7, #32]
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d07c      	beq.n	8003ca8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d023      	beq.n	8003c00 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d003      	beq.n	8003bd2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 f97d 	bl	8003eca <HAL_CAN_TxMailbox0CompleteCallback>
 8003bd0:	e016      	b.n	8003c00 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	f003 0304 	and.w	r3, r3, #4
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d004      	beq.n	8003be6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bde:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003be2:	627b      	str	r3, [r7, #36]	; 0x24
 8003be4:	e00c      	b.n	8003c00 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	f003 0308 	and.w	r3, r3, #8
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d004      	beq.n	8003bfa <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003bf6:	627b      	str	r3, [r7, #36]	; 0x24
 8003bf8:	e002      	b.n	8003c00 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 f983 	bl	8003f06 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d024      	beq.n	8003c54 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c12:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d003      	beq.n	8003c26 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 f95d 	bl	8003ede <HAL_CAN_TxMailbox1CompleteCallback>
 8003c24:	e016      	b.n	8003c54 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d004      	beq.n	8003c3a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c32:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003c36:	627b      	str	r3, [r7, #36]	; 0x24
 8003c38:	e00c      	b.n	8003c54 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d004      	beq.n	8003c4e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c4c:	e002      	b.n	8003c54 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f963 	bl	8003f1a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d024      	beq.n	8003ca8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003c66:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d003      	beq.n	8003c7a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 f93d 	bl	8003ef2 <HAL_CAN_TxMailbox2CompleteCallback>
 8003c78:	e016      	b.n	8003ca8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d004      	beq.n	8003c8e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c8a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c8c:	e00c      	b.n	8003ca8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d004      	beq.n	8003ca2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8003ca0:	e002      	b.n	8003ca8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f943 	bl	8003f2e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003ca8:	6a3b      	ldr	r3, [r7, #32]
 8003caa:	f003 0308 	and.w	r3, r3, #8
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00c      	beq.n	8003ccc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	f003 0310 	and.w	r3, r3, #16
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d007      	beq.n	8003ccc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cc2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2210      	movs	r2, #16
 8003cca:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003ccc:	6a3b      	ldr	r3, [r7, #32]
 8003cce:	f003 0304 	and.w	r3, r3, #4
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00b      	beq.n	8003cee <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	f003 0308 	and.w	r3, r3, #8
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d006      	beq.n	8003cee <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2208      	movs	r2, #8
 8003ce6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 f92a 	bl	8003f42 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003cee:	6a3b      	ldr	r3, [r7, #32]
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d009      	beq.n	8003d0c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	f003 0303 	and.w	r3, r3, #3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d002      	beq.n	8003d0c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f7fc fe8e 	bl	8000a28 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003d0c:	6a3b      	ldr	r3, [r7, #32]
 8003d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00c      	beq.n	8003d30 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	f003 0310 	and.w	r3, r3, #16
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d007      	beq.n	8003d30 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d26:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2210      	movs	r2, #16
 8003d2e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003d30:	6a3b      	ldr	r3, [r7, #32]
 8003d32:	f003 0320 	and.w	r3, r3, #32
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00b      	beq.n	8003d52 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	f003 0308 	and.w	r3, r3, #8
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d006      	beq.n	8003d52 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2208      	movs	r2, #8
 8003d4a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 f90c 	bl	8003f6a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003d52:	6a3b      	ldr	r3, [r7, #32]
 8003d54:	f003 0310 	and.w	r3, r3, #16
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d009      	beq.n	8003d70 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	f003 0303 	and.w	r3, r3, #3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d002      	beq.n	8003d70 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 f8f3 	bl	8003f56 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003d70:	6a3b      	ldr	r3, [r7, #32]
 8003d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00b      	beq.n	8003d92 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	f003 0310 	and.w	r3, r3, #16
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d006      	beq.n	8003d92 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2210      	movs	r2, #16
 8003d8a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 f8f6 	bl	8003f7e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003d92:	6a3b      	ldr	r3, [r7, #32]
 8003d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00b      	beq.n	8003db4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	f003 0308 	and.w	r3, r3, #8
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d006      	beq.n	8003db4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2208      	movs	r2, #8
 8003dac:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 f8ef 	bl	8003f92 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003db4:	6a3b      	ldr	r3, [r7, #32]
 8003db6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d075      	beq.n	8003eaa <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	f003 0304 	and.w	r3, r3, #4
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d06c      	beq.n	8003ea2 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003dc8:	6a3b      	ldr	r3, [r7, #32]
 8003dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d008      	beq.n	8003de4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d003      	beq.n	8003de4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dde:	f043 0301 	orr.w	r3, r3, #1
 8003de2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003de4:	6a3b      	ldr	r3, [r7, #32]
 8003de6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d008      	beq.n	8003e00 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d003      	beq.n	8003e00 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfa:	f043 0302 	orr.w	r3, r3, #2
 8003dfe:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003e00:	6a3b      	ldr	r3, [r7, #32]
 8003e02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d008      	beq.n	8003e1c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d003      	beq.n	8003e1c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e16:	f043 0304 	orr.w	r3, r3, #4
 8003e1a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003e1c:	6a3b      	ldr	r3, [r7, #32]
 8003e1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d03d      	beq.n	8003ea2 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d038      	beq.n	8003ea2 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e36:	2b30      	cmp	r3, #48	; 0x30
 8003e38:	d017      	beq.n	8003e6a <HAL_CAN_IRQHandler+0x302>
 8003e3a:	2b30      	cmp	r3, #48	; 0x30
 8003e3c:	d804      	bhi.n	8003e48 <HAL_CAN_IRQHandler+0x2e0>
 8003e3e:	2b10      	cmp	r3, #16
 8003e40:	d009      	beq.n	8003e56 <HAL_CAN_IRQHandler+0x2ee>
 8003e42:	2b20      	cmp	r3, #32
 8003e44:	d00c      	beq.n	8003e60 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003e46:	e024      	b.n	8003e92 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8003e48:	2b50      	cmp	r3, #80	; 0x50
 8003e4a:	d018      	beq.n	8003e7e <HAL_CAN_IRQHandler+0x316>
 8003e4c:	2b60      	cmp	r3, #96	; 0x60
 8003e4e:	d01b      	beq.n	8003e88 <HAL_CAN_IRQHandler+0x320>
 8003e50:	2b40      	cmp	r3, #64	; 0x40
 8003e52:	d00f      	beq.n	8003e74 <HAL_CAN_IRQHandler+0x30c>
            break;
 8003e54:	e01d      	b.n	8003e92 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	f043 0308 	orr.w	r3, r3, #8
 8003e5c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003e5e:	e018      	b.n	8003e92 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e62:	f043 0310 	orr.w	r3, r3, #16
 8003e66:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003e68:	e013      	b.n	8003e92 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6c:	f043 0320 	orr.w	r3, r3, #32
 8003e70:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003e72:	e00e      	b.n	8003e92 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8003e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e7a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003e7c:	e009      	b.n	8003e92 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e84:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003e86:	e004      	b.n	8003e92 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e8e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003e90:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	699a      	ldr	r2, [r3, #24]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003ea0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2204      	movs	r2, #4
 8003ea8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d008      	beq.n	8003ec2 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb6:	431a      	orrs	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 f872 	bl	8003fa6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003ec2:	bf00      	nop
 8003ec4:	3728      	adds	r7, #40	; 0x28
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003eca:	b480      	push	{r7}
 8003ecc:	b083      	sub	sp, #12
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003ed2:	bf00      	nop
 8003ed4:	370c      	adds	r7, #12
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr

08003ede <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003ede:	b480      	push	{r7}
 8003ee0:	b083      	sub	sp, #12
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003ee6:	bf00      	nop
 8003ee8:	370c      	adds	r7, #12
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr

08003ef2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b083      	sub	sp, #12
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003efa:	bf00      	nop
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr

08003f06 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003f06:	b480      	push	{r7}
 8003f08:	b083      	sub	sp, #12
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003f0e:	bf00      	nop
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b083      	sub	sp, #12
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003f22:	bf00      	nop
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr

08003f2e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003f2e:	b480      	push	{r7}
 8003f30:	b083      	sub	sp, #12
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003f36:	bf00      	nop
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr

08003f42 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003f42:	b480      	push	{r7}
 8003f44:	b083      	sub	sp, #12
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003f4a:	bf00      	nop
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr

08003f56 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003f56:	b480      	push	{r7}
 8003f58:	b083      	sub	sp, #12
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003f5e:	bf00      	nop
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr

08003f6a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	b083      	sub	sp, #12
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003f72:	bf00      	nop
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr

08003f7e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b083      	sub	sp, #12
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003f86:	bf00      	nop
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr

08003f92 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003f92:	b480      	push	{r7}
 8003f94:	b083      	sub	sp, #12
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003f9a:	bf00      	nop
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr

08003fa6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003fa6:	b480      	push	{r7}
 8003fa8:	b083      	sub	sp, #12
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003fae:	bf00      	nop
 8003fb0:	370c      	adds	r7, #12
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
	...

08003fbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f003 0307 	and.w	r3, r3, #7
 8003fca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fcc:	4b0b      	ldr	r3, [pc, #44]	; (8003ffc <__NVIC_SetPriorityGrouping+0x40>)
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fd2:	68ba      	ldr	r2, [r7, #8]
 8003fd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003fd8:	4013      	ands	r3, r2
 8003fda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003fe4:	4b06      	ldr	r3, [pc, #24]	; (8004000 <__NVIC_SetPriorityGrouping+0x44>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fea:	4a04      	ldr	r2, [pc, #16]	; (8003ffc <__NVIC_SetPriorityGrouping+0x40>)
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	60d3      	str	r3, [r2, #12]
}
 8003ff0:	bf00      	nop
 8003ff2:	3714      	adds	r7, #20
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	e000ed00 	.word	0xe000ed00
 8004000:	05fa0000 	.word	0x05fa0000

08004004 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004004:	b480      	push	{r7}
 8004006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004008:	4b04      	ldr	r3, [pc, #16]	; (800401c <__NVIC_GetPriorityGrouping+0x18>)
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	0a1b      	lsrs	r3, r3, #8
 800400e:	f003 0307 	and.w	r3, r3, #7
}
 8004012:	4618      	mov	r0, r3
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr
 800401c:	e000ed00 	.word	0xe000ed00

08004020 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	4603      	mov	r3, r0
 8004028:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800402a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800402e:	2b00      	cmp	r3, #0
 8004030:	db0b      	blt.n	800404a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004032:	79fb      	ldrb	r3, [r7, #7]
 8004034:	f003 021f 	and.w	r2, r3, #31
 8004038:	4907      	ldr	r1, [pc, #28]	; (8004058 <__NVIC_EnableIRQ+0x38>)
 800403a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800403e:	095b      	lsrs	r3, r3, #5
 8004040:	2001      	movs	r0, #1
 8004042:	fa00 f202 	lsl.w	r2, r0, r2
 8004046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800404a:	bf00      	nop
 800404c:	370c      	adds	r7, #12
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	e000e100 	.word	0xe000e100

0800405c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	4603      	mov	r3, r0
 8004064:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800406a:	2b00      	cmp	r3, #0
 800406c:	db10      	blt.n	8004090 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800406e:	79fb      	ldrb	r3, [r7, #7]
 8004070:	f003 021f 	and.w	r2, r3, #31
 8004074:	4909      	ldr	r1, [pc, #36]	; (800409c <__NVIC_DisableIRQ+0x40>)
 8004076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800407a:	095b      	lsrs	r3, r3, #5
 800407c:	2001      	movs	r0, #1
 800407e:	fa00 f202 	lsl.w	r2, r0, r2
 8004082:	3320      	adds	r3, #32
 8004084:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004088:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800408c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8004090:	bf00      	nop
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr
 800409c:	e000e100 	.word	0xe000e100

080040a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	4603      	mov	r3, r0
 80040a8:	6039      	str	r1, [r7, #0]
 80040aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	db0a      	blt.n	80040ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	b2da      	uxtb	r2, r3
 80040b8:	490c      	ldr	r1, [pc, #48]	; (80040ec <__NVIC_SetPriority+0x4c>)
 80040ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040be:	0112      	lsls	r2, r2, #4
 80040c0:	b2d2      	uxtb	r2, r2
 80040c2:	440b      	add	r3, r1
 80040c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040c8:	e00a      	b.n	80040e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	b2da      	uxtb	r2, r3
 80040ce:	4908      	ldr	r1, [pc, #32]	; (80040f0 <__NVIC_SetPriority+0x50>)
 80040d0:	79fb      	ldrb	r3, [r7, #7]
 80040d2:	f003 030f 	and.w	r3, r3, #15
 80040d6:	3b04      	subs	r3, #4
 80040d8:	0112      	lsls	r2, r2, #4
 80040da:	b2d2      	uxtb	r2, r2
 80040dc:	440b      	add	r3, r1
 80040de:	761a      	strb	r2, [r3, #24]
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr
 80040ec:	e000e100 	.word	0xe000e100
 80040f0:	e000ed00 	.word	0xe000ed00

080040f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b089      	sub	sp, #36	; 0x24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f003 0307 	and.w	r3, r3, #7
 8004106:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	f1c3 0307 	rsb	r3, r3, #7
 800410e:	2b04      	cmp	r3, #4
 8004110:	bf28      	it	cs
 8004112:	2304      	movcs	r3, #4
 8004114:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	3304      	adds	r3, #4
 800411a:	2b06      	cmp	r3, #6
 800411c:	d902      	bls.n	8004124 <NVIC_EncodePriority+0x30>
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	3b03      	subs	r3, #3
 8004122:	e000      	b.n	8004126 <NVIC_EncodePriority+0x32>
 8004124:	2300      	movs	r3, #0
 8004126:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004128:	f04f 32ff 	mov.w	r2, #4294967295
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	fa02 f303 	lsl.w	r3, r2, r3
 8004132:	43da      	mvns	r2, r3
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	401a      	ands	r2, r3
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800413c:	f04f 31ff 	mov.w	r1, #4294967295
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	fa01 f303 	lsl.w	r3, r1, r3
 8004146:	43d9      	mvns	r1, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800414c:	4313      	orrs	r3, r2
         );
}
 800414e:	4618      	mov	r0, r3
 8004150:	3724      	adds	r7, #36	; 0x24
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr

0800415a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800415a:	b580      	push	{r7, lr}
 800415c:	b082      	sub	sp, #8
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f7ff ff2a 	bl	8003fbc <__NVIC_SetPriorityGrouping>
}
 8004168:	bf00      	nop
 800416a:	3708      	adds	r7, #8
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af00      	add	r7, sp, #0
 8004176:	4603      	mov	r3, r0
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	607a      	str	r2, [r7, #4]
 800417c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800417e:	2300      	movs	r3, #0
 8004180:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004182:	f7ff ff3f 	bl	8004004 <__NVIC_GetPriorityGrouping>
 8004186:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	68b9      	ldr	r1, [r7, #8]
 800418c:	6978      	ldr	r0, [r7, #20]
 800418e:	f7ff ffb1 	bl	80040f4 <NVIC_EncodePriority>
 8004192:	4602      	mov	r2, r0
 8004194:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004198:	4611      	mov	r1, r2
 800419a:	4618      	mov	r0, r3
 800419c:	f7ff ff80 	bl	80040a0 <__NVIC_SetPriority>
}
 80041a0:	bf00      	nop
 80041a2:	3718      	adds	r7, #24
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	4603      	mov	r3, r0
 80041b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7ff ff32 	bl	8004020 <__NVIC_EnableIRQ>
}
 80041bc:	bf00      	nop
 80041be:	3708      	adds	r7, #8
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	4603      	mov	r3, r0
 80041cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80041ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7ff ff42 	bl	800405c <__NVIC_DisableIRQ>
}
 80041d8:	bf00      	nop
 80041da:	3708      	adds	r7, #8
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e054      	b.n	800429c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	7f5b      	ldrb	r3, [r3, #29]
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d105      	bne.n	8004208 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f7fd fe62 	bl	8001ecc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2202      	movs	r2, #2
 800420c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	791b      	ldrb	r3, [r3, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d10c      	bne.n	8004230 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a22      	ldr	r2, [pc, #136]	; (80042a4 <HAL_CRC_Init+0xc4>)
 800421c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	689a      	ldr	r2, [r3, #8]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f022 0218 	bic.w	r2, r2, #24
 800422c:	609a      	str	r2, [r3, #8]
 800422e:	e00c      	b.n	800424a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6899      	ldr	r1, [r3, #8]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	461a      	mov	r2, r3
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 f834 	bl	80042a8 <HAL_CRCEx_Polynomial_Set>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e028      	b.n	800429c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	795b      	ldrb	r3, [r3, #5]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d105      	bne.n	800425e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f04f 32ff 	mov.w	r2, #4294967295
 800425a:	611a      	str	r2, [r3, #16]
 800425c:	e004      	b.n	8004268 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	6912      	ldr	r2, [r2, #16]
 8004266:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	695a      	ldr	r2, [r3, #20]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	430a      	orrs	r2, r1
 800427c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	699a      	ldr	r2, [r3, #24]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	430a      	orrs	r2, r1
 8004292:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	3708      	adds	r7, #8
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	04c11db7 	.word	0x04c11db7

080042a8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b087      	sub	sp, #28
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042b4:	2300      	movs	r3, #0
 80042b6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80042b8:	231f      	movs	r3, #31
 80042ba:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80042bc:	bf00      	nop
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	1e5a      	subs	r2, r3, #1
 80042c2:	613a      	str	r2, [r7, #16]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d009      	beq.n	80042dc <HAL_CRCEx_Polynomial_Set+0x34>
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	f003 031f 	and.w	r3, r3, #31
 80042ce:	68ba      	ldr	r2, [r7, #8]
 80042d0:	fa22 f303 	lsr.w	r3, r2, r3
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d0f0      	beq.n	80042be <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2b18      	cmp	r3, #24
 80042e0:	d846      	bhi.n	8004370 <HAL_CRCEx_Polynomial_Set+0xc8>
 80042e2:	a201      	add	r2, pc, #4	; (adr r2, 80042e8 <HAL_CRCEx_Polynomial_Set+0x40>)
 80042e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e8:	08004377 	.word	0x08004377
 80042ec:	08004371 	.word	0x08004371
 80042f0:	08004371 	.word	0x08004371
 80042f4:	08004371 	.word	0x08004371
 80042f8:	08004371 	.word	0x08004371
 80042fc:	08004371 	.word	0x08004371
 8004300:	08004371 	.word	0x08004371
 8004304:	08004371 	.word	0x08004371
 8004308:	08004365 	.word	0x08004365
 800430c:	08004371 	.word	0x08004371
 8004310:	08004371 	.word	0x08004371
 8004314:	08004371 	.word	0x08004371
 8004318:	08004371 	.word	0x08004371
 800431c:	08004371 	.word	0x08004371
 8004320:	08004371 	.word	0x08004371
 8004324:	08004371 	.word	0x08004371
 8004328:	08004359 	.word	0x08004359
 800432c:	08004371 	.word	0x08004371
 8004330:	08004371 	.word	0x08004371
 8004334:	08004371 	.word	0x08004371
 8004338:	08004371 	.word	0x08004371
 800433c:	08004371 	.word	0x08004371
 8004340:	08004371 	.word	0x08004371
 8004344:	08004371 	.word	0x08004371
 8004348:	0800434d 	.word	0x0800434d
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	2b06      	cmp	r3, #6
 8004350:	d913      	bls.n	800437a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004356:	e010      	b.n	800437a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	2b07      	cmp	r3, #7
 800435c:	d90f      	bls.n	800437e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004362:	e00c      	b.n	800437e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	2b0f      	cmp	r3, #15
 8004368:	d90b      	bls.n	8004382 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800436e:	e008      	b.n	8004382 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	75fb      	strb	r3, [r7, #23]
      break;
 8004374:	e006      	b.n	8004384 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004376:	bf00      	nop
 8004378:	e004      	b.n	8004384 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800437a:	bf00      	nop
 800437c:	e002      	b.n	8004384 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800437e:	bf00      	nop
 8004380:	e000      	b.n	8004384 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004382:	bf00      	nop
  }
  if (status == HAL_OK)
 8004384:	7dfb      	ldrb	r3, [r7, #23]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10d      	bne.n	80043a6 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68ba      	ldr	r2, [r7, #8]
 8004390:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f023 0118 	bic.w	r1, r3, #24
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	430a      	orrs	r2, r1
 80043a4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80043a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	371c      	adds	r7, #28
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d101      	bne.n	80043c6 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e069      	b.n	800449a <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d102      	bne.n	80043d8 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7fd fd9a 	bl	8001f0c <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2202      	movs	r2, #2
 80043dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d002      	beq.n	80043ee <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	6819      	ldr	r1, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	4b2a      	ldr	r3, [pc, #168]	; (80044a4 <HAL_DCMI_Init+0xf0>)
 80043fa:	400b      	ands	r3, r1
 80043fc:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	6819      	ldr	r1, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685a      	ldr	r2, [r3, #4]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	695b      	ldr	r3, [r3, #20]
 800440c:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004412:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800441e:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800442a:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004430:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004436:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443c:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004442:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	430a      	orrs	r2, r1
 800444a:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	2b10      	cmp	r3, #16
 8004452:	d112      	bne.n	800447a <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	7f1b      	ldrb	r3, [r3, #28]
 8004458:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	7f5b      	ldrb	r3, [r3, #29]
 800445e:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004460:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	7f9b      	ldrb	r3, [r3, #30]
 8004466:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004468:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	7fdb      	ldrb	r3, [r3, #31]
 8004470:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004476:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004478:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68da      	ldr	r2, [r3, #12]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f042 021e 	orr.w	r2, r2, #30
 8004488:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3708      	adds	r7, #8
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	ffe0f007 	.word	0xffe0f007

080044a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b086      	sub	sp, #24
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]
 80044b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044b6:	2300      	movs	r3, #0
 80044b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d101      	bne.n	80044ce <HAL_DMA_Start_IT+0x26>
 80044ca:	2302      	movs	r3, #2
 80044cc:	e048      	b.n	8004560 <HAL_DMA_Start_IT+0xb8>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2201      	movs	r2, #1
 80044d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d137      	bne.n	8004552 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2202      	movs	r2, #2
 80044e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	68b9      	ldr	r1, [r7, #8]
 80044f6:	68f8      	ldr	r0, [r7, #12]
 80044f8:	f000 f842 	bl	8004580 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004500:	223f      	movs	r2, #63	; 0x3f
 8004502:	409a      	lsls	r2, r3
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f042 0216 	orr.w	r2, r2, #22
 8004516:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	695a      	ldr	r2, [r3, #20]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004526:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452c:	2b00      	cmp	r3, #0
 800452e:	d007      	beq.n	8004540 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f042 0208 	orr.w	r2, r2, #8
 800453e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f042 0201 	orr.w	r2, r2, #1
 800454e:	601a      	str	r2, [r3, #0]
 8004550:	e005      	b.n	800455e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800455a:	2302      	movs	r3, #2
 800455c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800455e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004560:	4618      	mov	r0, r3
 8004562:	3718      	adds	r7, #24
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004574:	4618      	mov	r0, r3
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
 800458c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800459c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	2b40      	cmp	r3, #64	; 0x40
 80045ac:	d108      	bne.n	80045c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68ba      	ldr	r2, [r7, #8]
 80045bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80045be:	e007      	b.n	80045d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68ba      	ldr	r2, [r7, #8]
 80045c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	60da      	str	r2, [r3, #12]
}
 80045d0:	bf00      	nop
 80045d2:	3714      	adds	r7, #20
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d101      	bne.n	80045ee <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e039      	b.n	8004662 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d106      	bne.n	8004608 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f7fd fd40 	bl	8002088 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2202      	movs	r2, #2
 800460c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685a      	ldr	r2, [r3, #4]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	430a      	orrs	r2, r1
 8004624:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800462c:	f023 0107 	bic.w	r1, r3, #7
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	689a      	ldr	r2, [r3, #8]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	430a      	orrs	r2, r1
 800463a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004642:	4b0a      	ldr	r3, [pc, #40]	; (800466c <HAL_DMA2D_Init+0x90>)
 8004644:	4013      	ands	r3, r2
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	68d1      	ldr	r1, [r2, #12]
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	6812      	ldr	r2, [r2, #0]
 800464e:	430b      	orrs	r3, r1
 8004650:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	ffffc000 	.word	0xffffc000

08004670 <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d101      	bne.n	8004682 <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e05f      	b.n	8004742 <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 8004682:	4b32      	ldr	r3, [pc, #200]	; (800474c <HAL_DMA2D_DeInit+0xdc>)
 8004684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004686:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d02e      	beq.n	80046ec <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0301 	and.w	r3, r3, #1
 8004698:	2b01      	cmp	r3, #1
 800469a:	d107      	bne.n	80046ac <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f000 f8c1 	bl	8004824 <HAL_DMA2D_Abort>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d021      	beq.n	80046ec <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e04a      	b.n	8004742 <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b2:	f003 0320 	and.w	r3, r3, #32
 80046b6:	2b20      	cmp	r3, #32
 80046b8:	d108      	bne.n	80046cc <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 80046ba:	2100      	movs	r1, #0
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f000 f8f7 	bl	80048b0 <HAL_DMA2D_CLUTLoading_Abort>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d011      	beq.n	80046ec <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e03a      	b.n	8004742 <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	69db      	ldr	r3, [r3, #28]
 80046d2:	f003 0320 	and.w	r3, r3, #32
 80046d6:	2b20      	cmp	r3, #32
 80046d8:	d108      	bne.n	80046ec <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 80046da:	2101      	movs	r1, #1
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 f8e7 	bl	80048b0 <HAL_DMA2D_CLUTLoading_Abort>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d001      	beq.n	80046ec <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e02a      	b.n	8004742 <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2200      	movs	r2, #0
 80046f2:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	223f      	movs	r2, #63	; 0x3f
 80046fa:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2200      	movs	r2, #0
 8004702:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2200      	movs	r2, #0
 800470a:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2200      	movs	r2, #0
 8004712:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2200      	movs	r2, #0
 800471a:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2200      	movs	r2, #0
 8004722:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f7fd fcd5 	bl	80020d4 <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	40023800 	.word	0x40023800

08004750 <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b086      	sub	sp, #24
 8004754:	af02      	add	r7, sp, #8
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]
 800475c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004764:	2b01      	cmp	r3, #1
 8004766:	d101      	bne.n	800476c <HAL_DMA2D_Start_IT+0x1c>
 8004768:	2302      	movs	r3, #2
 800476a:	e020      	b.n	80047ae <HAL_DMA2D_Start_IT+0x5e>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2202      	movs	r2, #2
 8004778:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	9300      	str	r3, [sp, #0]
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	68b9      	ldr	r1, [r7, #8]
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f000 fa84 	bl	8004c94 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 800479a:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f042 0201 	orr.w	r2, r2, #1
 80047aa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80047b6:	b580      	push	{r7, lr}
 80047b8:	b086      	sub	sp, #24
 80047ba:	af02      	add	r7, sp, #8
 80047bc:	60f8      	str	r0, [r7, #12]
 80047be:	60b9      	str	r1, [r7, #8]
 80047c0:	607a      	str	r2, [r7, #4]
 80047c2:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d101      	bne.n	80047d2 <HAL_DMA2D_BlendingStart_IT+0x1c>
 80047ce:	2302      	movs	r3, #2
 80047d0:	e024      	b.n	800481c <HAL_DMA2D_BlendingStart_IT+0x66>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2201      	movs	r2, #1
 80047d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2202      	movs	r2, #2
 80047de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	9300      	str	r3, [sp, #0]
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	683a      	ldr	r2, [r7, #0]
 80047f2:	68b9      	ldr	r1, [r7, #8]
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	f000 fa4d 	bl	8004c94 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8004808:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f042 0201 	orr.w	r2, r2, #1
 8004818:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	3710      	adds	r7, #16
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f023 0205 	bic.w	r2, r3, #5
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f042 0204 	orr.w	r2, r2, #4
 800483e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004840:	f7fe fb84 	bl	8002f4c <HAL_GetTick>
 8004844:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004846:	e017      	b.n	8004878 <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8004848:	f7fe fb80 	bl	8002f4c <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004856:	d90f      	bls.n	8004878 <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800485c:	f043 0220 	orr.w	r2, r3, #32
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2203      	movs	r2, #3
 8004868:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e017      	b.n	80048a8 <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1e0      	bne.n	8004848 <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 8004894:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2201      	movs	r2, #1
 800489a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3710      	adds	r7, #16
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	3324      	adds	r3, #36	; 0x24
 80048c0:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f042 0204 	orr.w	r2, r2, #4
 80048d0:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d103      	bne.n	80048e0 <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	331c      	adds	r3, #28
 80048de:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 80048e0:	f7fe fb34 	bl	8002f4c <HAL_GetTick>
 80048e4:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 80048e6:	e017      	b.n	8004918 <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 80048e8:	f7fe fb30 	bl	8002f4c <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048f6:	d90f      	bls.n	8004918 <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048fc:	f043 0220 	orr.w	r2, r3, #32
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2203      	movs	r2, #3
 8004908:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e016      	b.n	8004946 <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0320 	and.w	r3, r3, #32
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1e1      	bne.n	80048e8 <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 8004932:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800494e:	b580      	push	{r7, lr}
 8004950:	b084      	sub	sp, #16
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	2b00      	cmp	r3, #0
 800496e:	d026      	beq.n	80049be <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004976:	2b00      	cmp	r3, #0
 8004978:	d021      	beq.n	80049be <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004988:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800498e:	f043 0201 	orr.w	r2, r3, #1
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2201      	movs	r2, #1
 800499c:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2204      	movs	r2, #4
 80049a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d003      	beq.n	80049be <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	695b      	ldr	r3, [r3, #20]
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f003 0320 	and.w	r3, r3, #32
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d026      	beq.n	8004a16 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d021      	beq.n	8004a16 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049e0:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2220      	movs	r2, #32
 80049e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ee:	f043 0202 	orr.w	r2, r3, #2
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2204      	movs	r2, #4
 80049fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d003      	beq.n	8004a16 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f003 0308 	and.w	r3, r3, #8
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d026      	beq.n	8004a6e <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d021      	beq.n	8004a6e <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a38:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2208      	movs	r2, #8
 8004a40:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a46:	f043 0204 	orr.w	r2, r3, #4
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2204      	movs	r2, #4
 8004a52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f003 0304 	and.w	r3, r3, #4
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d013      	beq.n	8004aa0 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00e      	beq.n	8004aa0 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a90:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2204      	movs	r2, #4
 8004a98:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 f853 	bl	8004b46 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d024      	beq.n	8004af4 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d01f      	beq.n	8004af4 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004ac2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2202      	movs	r2, #2
 8004aca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d003      	beq.n	8004af4 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f003 0310 	and.w	r3, r3, #16
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d01f      	beq.n	8004b3e <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d01a      	beq.n	8004b3e <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b16:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2210      	movs	r2, #16
 8004b1e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f000 f80e 	bl	8004b5a <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004b3e:	bf00      	nop
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004b46:	b480      	push	{r7}
 8004b48:	b083      	sub	sp, #12
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8004b4e:	bf00      	nop
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	b083      	sub	sp, #12
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8004b62:	bf00      	nop
 8004b64:	370c      	adds	r7, #12
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
	...

08004b70 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b087      	sub	sp, #28
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d101      	bne.n	8004b90 <HAL_DMA2D_ConfigLayer+0x20>
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	e079      	b.n	8004c84 <HAL_DMA2D_ConfigLayer+0x114>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	011b      	lsls	r3, r3, #4
 8004ba4:	3318      	adds	r3, #24
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	4413      	add	r3, r2
 8004baa:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	041b      	lsls	r3, r3, #16
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004bba:	4b35      	ldr	r3, [pc, #212]	; (8004c90 <HAL_DMA2D_ConfigLayer+0x120>)
 8004bbc:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	2b0a      	cmp	r3, #10
 8004bc4:	d003      	beq.n	8004bce <HAL_DMA2D_ConfigLayer+0x5e>
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	2b09      	cmp	r3, #9
 8004bcc:	d107      	bne.n	8004bde <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004bd6:	697a      	ldr	r2, [r7, #20]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	617b      	str	r3, [r7, #20]
 8004bdc:	e005      	b.n	8004bea <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	061b      	lsls	r3, r3, #24
 8004be4:	697a      	ldr	r2, [r7, #20]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d120      	bne.n	8004c32 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	43db      	mvns	r3, r3
 8004bfa:	ea02 0103 	and.w	r1, r2, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	430a      	orrs	r2, r1
 8004c06:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	693a      	ldr	r2, [r7, #16]
 8004c0e:	6812      	ldr	r2, [r2, #0]
 8004c10:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	2b0a      	cmp	r3, #10
 8004c18:	d003      	beq.n	8004c22 <HAL_DMA2D_ConfigLayer+0xb2>
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	2b09      	cmp	r3, #9
 8004c20:	d127      	bne.n	8004c72 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	68da      	ldr	r2, [r3, #12]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004c2e:	629a      	str	r2, [r3, #40]	; 0x28
 8004c30:	e01f      	b.n	8004c72 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	69da      	ldr	r2, [r3, #28]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	43db      	mvns	r3, r3
 8004c3c:	ea02 0103 	and.w	r1, r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	697a      	ldr	r2, [r7, #20]
 8004c46:	430a      	orrs	r2, r1
 8004c48:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	693a      	ldr	r2, [r7, #16]
 8004c50:	6812      	ldr	r2, [r2, #0]
 8004c52:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	2b0a      	cmp	r3, #10
 8004c5a:	d003      	beq.n	8004c64 <HAL_DMA2D_ConfigLayer+0xf4>
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	2b09      	cmp	r3, #9
 8004c62:	d106      	bne.n	8004c72 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	68da      	ldr	r2, [r3, #12]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004c70:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	371c      	adds	r7, #28
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr
 8004c90:	ff03000f 	.word	0xff03000f

08004c94 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b08b      	sub	sp, #44	; 0x2c
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	607a      	str	r2, [r7, #4]
 8004ca0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca8:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	041a      	lsls	r2, r3, #16
 8004cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	430a      	orrs	r2, r1
 8004cba:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ccc:	d174      	bne.n	8004db8 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004cd4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004cdc:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004ce4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d108      	bne.n	8004d06 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8004cf4:	69ba      	ldr	r2, [r7, #24]
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	431a      	orrs	r2, r3
 8004cfa:	6a3b      	ldr	r3, [r7, #32]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	627b      	str	r3, [r7, #36]	; 0x24
 8004d04:	e053      	b.n	8004dae <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d106      	bne.n	8004d1c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8004d0e:	69ba      	ldr	r2, [r7, #24]
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	627b      	str	r3, [r7, #36]	; 0x24
 8004d1a:	e048      	b.n	8004dae <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d111      	bne.n	8004d48 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	0cdb      	lsrs	r3, r3, #19
 8004d28:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	0a9b      	lsrs	r3, r3, #10
 8004d2e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	08db      	lsrs	r3, r3, #3
 8004d34:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	015a      	lsls	r2, r3, #5
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	02db      	lsls	r3, r3, #11
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	697a      	ldr	r2, [r7, #20]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	627b      	str	r3, [r7, #36]	; 0x24
 8004d46:	e032      	b.n	8004dae <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	2b03      	cmp	r3, #3
 8004d4e:	d117      	bne.n	8004d80 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004d50:	6a3b      	ldr	r3, [r7, #32]
 8004d52:	0fdb      	lsrs	r3, r3, #31
 8004d54:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	0cdb      	lsrs	r3, r3, #19
 8004d5a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	0adb      	lsrs	r3, r3, #11
 8004d60:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	08db      	lsrs	r3, r3, #3
 8004d66:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	015a      	lsls	r2, r3, #5
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	029b      	lsls	r3, r3, #10
 8004d70:	431a      	orrs	r2, r3
 8004d72:	6a3b      	ldr	r3, [r7, #32]
 8004d74:	03db      	lsls	r3, r3, #15
 8004d76:	4313      	orrs	r3, r2
 8004d78:	697a      	ldr	r2, [r7, #20]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d7e:	e016      	b.n	8004dae <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004d80:	6a3b      	ldr	r3, [r7, #32]
 8004d82:	0f1b      	lsrs	r3, r3, #28
 8004d84:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	0d1b      	lsrs	r3, r3, #20
 8004d8a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	0b1b      	lsrs	r3, r3, #12
 8004d90:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	091b      	lsrs	r3, r3, #4
 8004d96:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	011a      	lsls	r2, r3, #4
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	021b      	lsls	r3, r3, #8
 8004da0:	431a      	orrs	r2, r3
 8004da2:	6a3b      	ldr	r3, [r7, #32]
 8004da4:	031b      	lsls	r3, r3, #12
 8004da6:	4313      	orrs	r3, r2
 8004da8:	697a      	ldr	r2, [r7, #20]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004db4:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004db6:	e003      	b.n	8004dc0 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68ba      	ldr	r2, [r7, #8]
 8004dbe:	60da      	str	r2, [r3, #12]
}
 8004dc0:	bf00      	nop
 8004dc2:	372c      	adds	r7, #44	; 0x2c
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b089      	sub	sp, #36	; 0x24
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004dde:	2300      	movs	r3, #0
 8004de0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004de2:	2300      	movs	r3, #0
 8004de4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004de6:	2300      	movs	r3, #0
 8004de8:	61fb      	str	r3, [r7, #28]
 8004dea:	e175      	b.n	80050d8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004dec:	2201      	movs	r2, #1
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	fa02 f303 	lsl.w	r3, r2, r3
 8004df4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	697a      	ldr	r2, [r7, #20]
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004e00:	693a      	ldr	r2, [r7, #16]
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	f040 8164 	bne.w	80050d2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d00b      	beq.n	8004e2a <HAL_GPIO_Init+0x5e>
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d007      	beq.n	8004e2a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e1e:	2b11      	cmp	r3, #17
 8004e20:	d003      	beq.n	8004e2a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	2b12      	cmp	r3, #18
 8004e28:	d130      	bne.n	8004e8c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	005b      	lsls	r3, r3, #1
 8004e34:	2203      	movs	r2, #3
 8004e36:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3a:	43db      	mvns	r3, r3
 8004e3c:	69ba      	ldr	r2, [r7, #24]
 8004e3e:	4013      	ands	r3, r2
 8004e40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	68da      	ldr	r2, [r3, #12]
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	005b      	lsls	r3, r3, #1
 8004e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4e:	69ba      	ldr	r2, [r7, #24]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	69ba      	ldr	r2, [r7, #24]
 8004e58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e60:	2201      	movs	r2, #1
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	fa02 f303 	lsl.w	r3, r2, r3
 8004e68:	43db      	mvns	r3, r3
 8004e6a:	69ba      	ldr	r2, [r7, #24]
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	091b      	lsrs	r3, r3, #4
 8004e76:	f003 0201 	and.w	r2, r3, #1
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e80:	69ba      	ldr	r2, [r7, #24]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	69ba      	ldr	r2, [r7, #24]
 8004e8a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	005b      	lsls	r3, r3, #1
 8004e96:	2203      	movs	r2, #3
 8004e98:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9c:	43db      	mvns	r3, r3
 8004e9e:	69ba      	ldr	r2, [r7, #24]
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	689a      	ldr	r2, [r3, #8]
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	005b      	lsls	r3, r3, #1
 8004eac:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb0:	69ba      	ldr	r2, [r7, #24]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	69ba      	ldr	r2, [r7, #24]
 8004eba:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d003      	beq.n	8004ecc <HAL_GPIO_Init+0x100>
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	2b12      	cmp	r3, #18
 8004eca:	d123      	bne.n	8004f14 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	08da      	lsrs	r2, r3, #3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	3208      	adds	r2, #8
 8004ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	f003 0307 	and.w	r3, r3, #7
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	220f      	movs	r2, #15
 8004ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee8:	43db      	mvns	r3, r3
 8004eea:	69ba      	ldr	r2, [r7, #24]
 8004eec:	4013      	ands	r3, r2
 8004eee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	691a      	ldr	r2, [r3, #16]
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	f003 0307 	and.w	r3, r3, #7
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	fa02 f303 	lsl.w	r3, r2, r3
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	08da      	lsrs	r2, r3, #3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	3208      	adds	r2, #8
 8004f0e:	69b9      	ldr	r1, [r7, #24]
 8004f10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	005b      	lsls	r3, r3, #1
 8004f1e:	2203      	movs	r2, #3
 8004f20:	fa02 f303 	lsl.w	r3, r2, r3
 8004f24:	43db      	mvns	r3, r3
 8004f26:	69ba      	ldr	r2, [r7, #24]
 8004f28:	4013      	ands	r3, r2
 8004f2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f003 0203 	and.w	r2, r3, #3
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	005b      	lsls	r3, r3, #1
 8004f38:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3c:	69ba      	ldr	r2, [r7, #24]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	69ba      	ldr	r2, [r7, #24]
 8004f46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	f000 80be 	beq.w	80050d2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f56:	4b65      	ldr	r3, [pc, #404]	; (80050ec <HAL_GPIO_Init+0x320>)
 8004f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f5a:	4a64      	ldr	r2, [pc, #400]	; (80050ec <HAL_GPIO_Init+0x320>)
 8004f5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f60:	6453      	str	r3, [r2, #68]	; 0x44
 8004f62:	4b62      	ldr	r3, [pc, #392]	; (80050ec <HAL_GPIO_Init+0x320>)
 8004f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f6a:	60fb      	str	r3, [r7, #12]
 8004f6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004f6e:	4a60      	ldr	r2, [pc, #384]	; (80050f0 <HAL_GPIO_Init+0x324>)
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	089b      	lsrs	r3, r3, #2
 8004f74:	3302      	adds	r3, #2
 8004f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	f003 0303 	and.w	r3, r3, #3
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	220f      	movs	r2, #15
 8004f86:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8a:	43db      	mvns	r3, r3
 8004f8c:	69ba      	ldr	r2, [r7, #24]
 8004f8e:	4013      	ands	r3, r2
 8004f90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a57      	ldr	r2, [pc, #348]	; (80050f4 <HAL_GPIO_Init+0x328>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d037      	beq.n	800500a <HAL_GPIO_Init+0x23e>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a56      	ldr	r2, [pc, #344]	; (80050f8 <HAL_GPIO_Init+0x32c>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d031      	beq.n	8005006 <HAL_GPIO_Init+0x23a>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a55      	ldr	r2, [pc, #340]	; (80050fc <HAL_GPIO_Init+0x330>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d02b      	beq.n	8005002 <HAL_GPIO_Init+0x236>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a54      	ldr	r2, [pc, #336]	; (8005100 <HAL_GPIO_Init+0x334>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d025      	beq.n	8004ffe <HAL_GPIO_Init+0x232>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a53      	ldr	r2, [pc, #332]	; (8005104 <HAL_GPIO_Init+0x338>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d01f      	beq.n	8004ffa <HAL_GPIO_Init+0x22e>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a52      	ldr	r2, [pc, #328]	; (8005108 <HAL_GPIO_Init+0x33c>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d019      	beq.n	8004ff6 <HAL_GPIO_Init+0x22a>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a51      	ldr	r2, [pc, #324]	; (800510c <HAL_GPIO_Init+0x340>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d013      	beq.n	8004ff2 <HAL_GPIO_Init+0x226>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a50      	ldr	r2, [pc, #320]	; (8005110 <HAL_GPIO_Init+0x344>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d00d      	beq.n	8004fee <HAL_GPIO_Init+0x222>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a4f      	ldr	r2, [pc, #316]	; (8005114 <HAL_GPIO_Init+0x348>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d007      	beq.n	8004fea <HAL_GPIO_Init+0x21e>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a4e      	ldr	r2, [pc, #312]	; (8005118 <HAL_GPIO_Init+0x34c>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d101      	bne.n	8004fe6 <HAL_GPIO_Init+0x21a>
 8004fe2:	2309      	movs	r3, #9
 8004fe4:	e012      	b.n	800500c <HAL_GPIO_Init+0x240>
 8004fe6:	230a      	movs	r3, #10
 8004fe8:	e010      	b.n	800500c <HAL_GPIO_Init+0x240>
 8004fea:	2308      	movs	r3, #8
 8004fec:	e00e      	b.n	800500c <HAL_GPIO_Init+0x240>
 8004fee:	2307      	movs	r3, #7
 8004ff0:	e00c      	b.n	800500c <HAL_GPIO_Init+0x240>
 8004ff2:	2306      	movs	r3, #6
 8004ff4:	e00a      	b.n	800500c <HAL_GPIO_Init+0x240>
 8004ff6:	2305      	movs	r3, #5
 8004ff8:	e008      	b.n	800500c <HAL_GPIO_Init+0x240>
 8004ffa:	2304      	movs	r3, #4
 8004ffc:	e006      	b.n	800500c <HAL_GPIO_Init+0x240>
 8004ffe:	2303      	movs	r3, #3
 8005000:	e004      	b.n	800500c <HAL_GPIO_Init+0x240>
 8005002:	2302      	movs	r3, #2
 8005004:	e002      	b.n	800500c <HAL_GPIO_Init+0x240>
 8005006:	2301      	movs	r3, #1
 8005008:	e000      	b.n	800500c <HAL_GPIO_Init+0x240>
 800500a:	2300      	movs	r3, #0
 800500c:	69fa      	ldr	r2, [r7, #28]
 800500e:	f002 0203 	and.w	r2, r2, #3
 8005012:	0092      	lsls	r2, r2, #2
 8005014:	4093      	lsls	r3, r2
 8005016:	69ba      	ldr	r2, [r7, #24]
 8005018:	4313      	orrs	r3, r2
 800501a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800501c:	4934      	ldr	r1, [pc, #208]	; (80050f0 <HAL_GPIO_Init+0x324>)
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	089b      	lsrs	r3, r3, #2
 8005022:	3302      	adds	r3, #2
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800502a:	4b3c      	ldr	r3, [pc, #240]	; (800511c <HAL_GPIO_Init+0x350>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	43db      	mvns	r3, r3
 8005034:	69ba      	ldr	r2, [r7, #24]
 8005036:	4013      	ands	r3, r2
 8005038:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d003      	beq.n	800504e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005046:	69ba      	ldr	r2, [r7, #24]
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	4313      	orrs	r3, r2
 800504c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800504e:	4a33      	ldr	r2, [pc, #204]	; (800511c <HAL_GPIO_Init+0x350>)
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005054:	4b31      	ldr	r3, [pc, #196]	; (800511c <HAL_GPIO_Init+0x350>)
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	43db      	mvns	r3, r3
 800505e:	69ba      	ldr	r2, [r7, #24]
 8005060:	4013      	ands	r3, r2
 8005062:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d003      	beq.n	8005078 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	4313      	orrs	r3, r2
 8005076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005078:	4a28      	ldr	r2, [pc, #160]	; (800511c <HAL_GPIO_Init+0x350>)
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800507e:	4b27      	ldr	r3, [pc, #156]	; (800511c <HAL_GPIO_Init+0x350>)
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	43db      	mvns	r3, r3
 8005088:	69ba      	ldr	r2, [r7, #24]
 800508a:	4013      	ands	r3, r2
 800508c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d003      	beq.n	80050a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800509a:	69ba      	ldr	r2, [r7, #24]
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	4313      	orrs	r3, r2
 80050a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80050a2:	4a1e      	ldr	r2, [pc, #120]	; (800511c <HAL_GPIO_Init+0x350>)
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80050a8:	4b1c      	ldr	r3, [pc, #112]	; (800511c <HAL_GPIO_Init+0x350>)
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	43db      	mvns	r3, r3
 80050b2:	69ba      	ldr	r2, [r7, #24]
 80050b4:	4013      	ands	r3, r2
 80050b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d003      	beq.n	80050cc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80050c4:	69ba      	ldr	r2, [r7, #24]
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80050cc:	4a13      	ldr	r2, [pc, #76]	; (800511c <HAL_GPIO_Init+0x350>)
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	3301      	adds	r3, #1
 80050d6:	61fb      	str	r3, [r7, #28]
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	2b0f      	cmp	r3, #15
 80050dc:	f67f ae86 	bls.w	8004dec <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80050e0:	bf00      	nop
 80050e2:	3724      	adds	r7, #36	; 0x24
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr
 80050ec:	40023800 	.word	0x40023800
 80050f0:	40013800 	.word	0x40013800
 80050f4:	40020000 	.word	0x40020000
 80050f8:	40020400 	.word	0x40020400
 80050fc:	40020800 	.word	0x40020800
 8005100:	40020c00 	.word	0x40020c00
 8005104:	40021000 	.word	0x40021000
 8005108:	40021400 	.word	0x40021400
 800510c:	40021800 	.word	0x40021800
 8005110:	40021c00 	.word	0x40021c00
 8005114:	40022000 	.word	0x40022000
 8005118:	40022400 	.word	0x40022400
 800511c:	40013c00 	.word	0x40013c00

08005120 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	460b      	mov	r3, r1
 800512a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	691a      	ldr	r2, [r3, #16]
 8005130:	887b      	ldrh	r3, [r7, #2]
 8005132:	4013      	ands	r3, r2
 8005134:	2b00      	cmp	r3, #0
 8005136:	d002      	beq.n	800513e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005138:	2301      	movs	r3, #1
 800513a:	73fb      	strb	r3, [r7, #15]
 800513c:	e001      	b.n	8005142 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800513e:	2300      	movs	r3, #0
 8005140:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005142:	7bfb      	ldrb	r3, [r7, #15]
}
 8005144:	4618      	mov	r0, r3
 8005146:	3714      	adds	r7, #20
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	460b      	mov	r3, r1
 800515a:	807b      	strh	r3, [r7, #2]
 800515c:	4613      	mov	r3, r2
 800515e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005160:	787b      	ldrb	r3, [r7, #1]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d003      	beq.n	800516e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005166:	887a      	ldrh	r2, [r7, #2]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800516c:	e003      	b.n	8005176 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800516e:	887b      	ldrh	r3, [r7, #2]
 8005170:	041a      	lsls	r2, r3, #16
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	619a      	str	r2, [r3, #24]
}
 8005176:	bf00      	nop
 8005178:	370c      	adds	r7, #12
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
	...

08005184 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e0bf      	b.n	8005316 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800519c:	b2db      	uxtb	r3, r3
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d106      	bne.n	80051b0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f7fc ffac 	bl	8002108 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2202      	movs	r2, #2
 80051b4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	699a      	ldr	r2, [r3, #24]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80051c6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	6999      	ldr	r1, [r3, #24]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685a      	ldr	r2, [r3, #4]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80051dc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	430a      	orrs	r2, r1
 80051ea:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	6899      	ldr	r1, [r3, #8]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	4b4a      	ldr	r3, [pc, #296]	; (8005320 <HAL_LTDC_Init+0x19c>)
 80051f8:	400b      	ands	r3, r1
 80051fa:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	695b      	ldr	r3, [r3, #20]
 8005200:	041b      	lsls	r3, r3, #16
 8005202:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	6899      	ldr	r1, [r3, #8]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	699a      	ldr	r2, [r3, #24]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	431a      	orrs	r2, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	430a      	orrs	r2, r1
 8005218:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68d9      	ldr	r1, [r3, #12]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	4b3e      	ldr	r3, [pc, #248]	; (8005320 <HAL_LTDC_Init+0x19c>)
 8005226:	400b      	ands	r3, r1
 8005228:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	69db      	ldr	r3, [r3, #28]
 800522e:	041b      	lsls	r3, r3, #16
 8005230:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68d9      	ldr	r1, [r3, #12]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a1a      	ldr	r2, [r3, #32]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	431a      	orrs	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	430a      	orrs	r2, r1
 8005246:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	6919      	ldr	r1, [r3, #16]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	4b33      	ldr	r3, [pc, #204]	; (8005320 <HAL_LTDC_Init+0x19c>)
 8005254:	400b      	ands	r3, r1
 8005256:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525c:	041b      	lsls	r3, r3, #16
 800525e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	6919      	ldr	r1, [r3, #16]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	431a      	orrs	r2, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	430a      	orrs	r2, r1
 8005274:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	6959      	ldr	r1, [r3, #20]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	4b27      	ldr	r3, [pc, #156]	; (8005320 <HAL_LTDC_Init+0x19c>)
 8005282:	400b      	ands	r3, r1
 8005284:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528a:	041b      	lsls	r3, r3, #16
 800528c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	6959      	ldr	r1, [r3, #20]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	431a      	orrs	r2, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	430a      	orrs	r2, r1
 80052a2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052aa:	021b      	lsls	r3, r3, #8
 80052ac:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80052b4:	041b      	lsls	r3, r3, #16
 80052b6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80052c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80052da:	431a      	orrs	r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	430a      	orrs	r2, r1
 80052e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f042 0206 	orr.w	r2, r2, #6
 80052f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	699a      	ldr	r2, [r3, #24]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f042 0201 	orr.w	r2, r2, #1
 8005302:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3710      	adds	r7, #16
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	f000f800 	.word	0xf000f800

08005324 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005332:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800533a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f003 0304 	and.w	r3, r3, #4
 8005342:	2b00      	cmp	r3, #0
 8005344:	d023      	beq.n	800538e <HAL_LTDC_IRQHandler+0x6a>
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	f003 0304 	and.w	r3, r3, #4
 800534c:	2b00      	cmp	r3, #0
 800534e:	d01e      	beq.n	800538e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f022 0204 	bic.w	r2, r2, #4
 800535e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2204      	movs	r2, #4
 8005366:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800536e:	f043 0201 	orr.w	r2, r3, #1
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2204      	movs	r2, #4
 800537c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 f86f 	bl	800546c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f003 0302 	and.w	r3, r3, #2
 8005394:	2b00      	cmp	r3, #0
 8005396:	d023      	beq.n	80053e0 <HAL_LTDC_IRQHandler+0xbc>
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	f003 0302 	and.w	r3, r3, #2
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d01e      	beq.n	80053e0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f022 0202 	bic.w	r2, r2, #2
 80053b0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2202      	movs	r2, #2
 80053b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80053c0:	f043 0202 	orr.w	r2, r3, #2
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2204      	movs	r2, #4
 80053ce:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 f846 	bl	800546c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d01b      	beq.n	8005422 <HAL_LTDC_IRQHandler+0xfe>
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	f003 0301 	and.w	r3, r3, #1
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d016      	beq.n	8005422 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f022 0201 	bic.w	r2, r2, #1
 8005402:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2201      	movs	r2, #1
 800540a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f00e fc6b 	bl	8013cf8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f003 0308 	and.w	r3, r3, #8
 8005428:	2b00      	cmp	r3, #0
 800542a:	d01b      	beq.n	8005464 <HAL_LTDC_IRQHandler+0x140>
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	f003 0308 	and.w	r3, r3, #8
 8005432:	2b00      	cmp	r3, #0
 8005434:	d016      	beq.n	8005464 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f022 0208 	bic.w	r2, r2, #8
 8005444:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2208      	movs	r2, #8
 800544c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2201      	movs	r2, #1
 8005452:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 f80e 	bl	8005480 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005464:	bf00      	nop
 8005466:	3710      	adds	r7, #16
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005474:	bf00      	nop
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005488:	bf00      	nop
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005494:	b5b0      	push	{r4, r5, r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d101      	bne.n	80054ae <HAL_LTDC_ConfigLayer+0x1a>
 80054aa:	2302      	movs	r3, #2
 80054ac:	e02c      	b.n	8005508 <HAL_LTDC_ConfigLayer+0x74>
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2201      	movs	r2, #1
 80054b2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2202      	movs	r2, #2
 80054ba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2134      	movs	r1, #52	; 0x34
 80054c4:	fb01 f303 	mul.w	r3, r1, r3
 80054c8:	4413      	add	r3, r2
 80054ca:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	4614      	mov	r4, r2
 80054d2:	461d      	mov	r5, r3
 80054d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054e0:	682b      	ldr	r3, [r5, #0]
 80054e2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	68b9      	ldr	r1, [r7, #8]
 80054e8:	68f8      	ldr	r0, [r7, #12]
 80054ea:	f000 f849 	bl	8005580 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2201      	movs	r2, #1
 80054f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3710      	adds	r7, #16
 800550c:	46bd      	mov	sp, r7
 800550e:	bdb0      	pop	{r4, r5, r7, pc}

08005510 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005520:	2b01      	cmp	r3, #1
 8005522:	d101      	bne.n	8005528 <HAL_LTDC_ProgramLineEvent+0x18>
 8005524:	2302      	movs	r3, #2
 8005526:	e023      	b.n	8005570 <HAL_LTDC_ProgramLineEvent+0x60>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2202      	movs	r2, #2
 8005534:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f022 0201 	bic.w	r2, r2, #1
 8005546:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8005548:	4a0c      	ldr	r2, [pc, #48]	; (800557c <HAL_LTDC_ProgramLineEvent+0x6c>)
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f042 0201 	orr.w	r2, r2, #1
 800555c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2201      	movs	r2, #1
 8005562:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr
 800557c:	40016800 	.word	0x40016800

08005580 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005580:	b480      	push	{r7}
 8005582:	b089      	sub	sp, #36	; 0x24
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	685a      	ldr	r2, [r3, #4]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	0c1b      	lsrs	r3, r3, #16
 8005598:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800559c:	4413      	add	r3, r2
 800559e:	041b      	lsls	r3, r3, #16
 80055a0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	461a      	mov	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	01db      	lsls	r3, r3, #7
 80055ac:	4413      	add	r3, r2
 80055ae:	3384      	adds	r3, #132	; 0x84
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	6812      	ldr	r2, [r2, #0]
 80055b6:	4611      	mov	r1, r2
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	01d2      	lsls	r2, r2, #7
 80055bc:	440a      	add	r2, r1
 80055be:	3284      	adds	r2, #132	; 0x84
 80055c0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80055c4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	0c1b      	lsrs	r3, r3, #16
 80055d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055d6:	4413      	add	r3, r2
 80055d8:	1c5a      	adds	r2, r3, #1
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4619      	mov	r1, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	01db      	lsls	r3, r3, #7
 80055e4:	440b      	add	r3, r1
 80055e6:	3384      	adds	r3, #132	; 0x84
 80055e8:	4619      	mov	r1, r3
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	68da      	ldr	r2, [r3, #12]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80055fe:	4413      	add	r3, r2
 8005600:	041b      	lsls	r3, r3, #16
 8005602:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	461a      	mov	r2, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	01db      	lsls	r3, r3, #7
 800560e:	4413      	add	r3, r2
 8005610:	3384      	adds	r3, #132	; 0x84
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	6812      	ldr	r2, [r2, #0]
 8005618:	4611      	mov	r1, r2
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	01d2      	lsls	r2, r2, #7
 800561e:	440a      	add	r2, r1
 8005620:	3284      	adds	r2, #132	; 0x84
 8005622:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005626:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	689a      	ldr	r2, [r3, #8]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005636:	4413      	add	r3, r2
 8005638:	1c5a      	adds	r2, r3, #1
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4619      	mov	r1, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	01db      	lsls	r3, r3, #7
 8005644:	440b      	add	r3, r1
 8005646:	3384      	adds	r3, #132	; 0x84
 8005648:	4619      	mov	r1, r3
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	4313      	orrs	r3, r2
 800564e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	461a      	mov	r2, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	01db      	lsls	r3, r3, #7
 800565a:	4413      	add	r3, r2
 800565c:	3384      	adds	r3, #132	; 0x84
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	6812      	ldr	r2, [r2, #0]
 8005664:	4611      	mov	r1, r2
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	01d2      	lsls	r2, r2, #7
 800566a:	440a      	add	r2, r1
 800566c:	3284      	adds	r2, #132	; 0x84
 800566e:	f023 0307 	bic.w	r3, r3, #7
 8005672:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	461a      	mov	r2, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	01db      	lsls	r3, r3, #7
 800567e:	4413      	add	r3, r2
 8005680:	3384      	adds	r3, #132	; 0x84
 8005682:	461a      	mov	r2, r3
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005690:	021b      	lsls	r3, r3, #8
 8005692:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800569a:	041b      	lsls	r3, r3, #16
 800569c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	061b      	lsls	r3, r3, #24
 80056a4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	461a      	mov	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	01db      	lsls	r3, r3, #7
 80056b0:	4413      	add	r3, r2
 80056b2:	3384      	adds	r3, #132	; 0x84
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	461a      	mov	r2, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	01db      	lsls	r3, r3, #7
 80056c0:	4413      	add	r3, r2
 80056c2:	3384      	adds	r3, #132	; 0x84
 80056c4:	461a      	mov	r2, r3
 80056c6:	2300      	movs	r3, #0
 80056c8:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80056d0:	461a      	mov	r2, r3
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	431a      	orrs	r2, r3
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	431a      	orrs	r2, r3
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4619      	mov	r1, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	01db      	lsls	r3, r3, #7
 80056e4:	440b      	add	r3, r1
 80056e6:	3384      	adds	r3, #132	; 0x84
 80056e8:	4619      	mov	r1, r3
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	461a      	mov	r2, r3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	01db      	lsls	r3, r3, #7
 80056fa:	4413      	add	r3, r2
 80056fc:	3384      	adds	r3, #132	; 0x84
 80056fe:	695b      	ldr	r3, [r3, #20]
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	6812      	ldr	r2, [r2, #0]
 8005704:	4611      	mov	r1, r2
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	01d2      	lsls	r2, r2, #7
 800570a:	440a      	add	r2, r1
 800570c:	3284      	adds	r2, #132	; 0x84
 800570e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005712:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	461a      	mov	r2, r3
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	01db      	lsls	r3, r3, #7
 800571e:	4413      	add	r3, r2
 8005720:	3384      	adds	r3, #132	; 0x84
 8005722:	461a      	mov	r2, r3
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	695b      	ldr	r3, [r3, #20]
 8005728:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	461a      	mov	r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	01db      	lsls	r3, r3, #7
 8005734:	4413      	add	r3, r2
 8005736:	3384      	adds	r3, #132	; 0x84
 8005738:	69da      	ldr	r2, [r3, #28]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4619      	mov	r1, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	01db      	lsls	r3, r3, #7
 8005744:	440b      	add	r3, r1
 8005746:	3384      	adds	r3, #132	; 0x84
 8005748:	4619      	mov	r1, r3
 800574a:	4b58      	ldr	r3, [pc, #352]	; (80058ac <LTDC_SetConfig+0x32c>)
 800574c:	4013      	ands	r3, r2
 800574e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	69da      	ldr	r2, [r3, #28]
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	6a1b      	ldr	r3, [r3, #32]
 8005758:	68f9      	ldr	r1, [r7, #12]
 800575a:	6809      	ldr	r1, [r1, #0]
 800575c:	4608      	mov	r0, r1
 800575e:	6879      	ldr	r1, [r7, #4]
 8005760:	01c9      	lsls	r1, r1, #7
 8005762:	4401      	add	r1, r0
 8005764:	3184      	adds	r1, #132	; 0x84
 8005766:	4313      	orrs	r3, r2
 8005768:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	461a      	mov	r2, r3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	01db      	lsls	r3, r3, #7
 8005774:	4413      	add	r3, r2
 8005776:	3384      	adds	r3, #132	; 0x84
 8005778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	461a      	mov	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	01db      	lsls	r3, r3, #7
 8005784:	4413      	add	r3, r2
 8005786:	3384      	adds	r3, #132	; 0x84
 8005788:	461a      	mov	r2, r3
 800578a:	2300      	movs	r3, #0
 800578c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	461a      	mov	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	01db      	lsls	r3, r3, #7
 8005798:	4413      	add	r3, r2
 800579a:	3384      	adds	r3, #132	; 0x84
 800579c:	461a      	mov	r2, r3
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a2:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d102      	bne.n	80057b2 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80057ac:	2304      	movs	r3, #4
 80057ae:	61fb      	str	r3, [r7, #28]
 80057b0:	e01b      	b.n	80057ea <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d102      	bne.n	80057c0 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80057ba:	2303      	movs	r3, #3
 80057bc:	61fb      	str	r3, [r7, #28]
 80057be:	e014      	b.n	80057ea <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	2b04      	cmp	r3, #4
 80057c6:	d00b      	beq.n	80057e0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d007      	beq.n	80057e0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80057d4:	2b03      	cmp	r3, #3
 80057d6:	d003      	beq.n	80057e0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80057dc:	2b07      	cmp	r3, #7
 80057de:	d102      	bne.n	80057e6 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80057e0:	2302      	movs	r3, #2
 80057e2:	61fb      	str	r3, [r7, #28]
 80057e4:	e001      	b.n	80057ea <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80057e6:	2301      	movs	r3, #1
 80057e8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	461a      	mov	r2, r3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	01db      	lsls	r3, r3, #7
 80057f4:	4413      	add	r3, r2
 80057f6:	3384      	adds	r3, #132	; 0x84
 80057f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	6812      	ldr	r2, [r2, #0]
 80057fe:	4611      	mov	r1, r2
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	01d2      	lsls	r2, r2, #7
 8005804:	440a      	add	r2, r1
 8005806:	3284      	adds	r2, #132	; 0x84
 8005808:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800580c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005812:	69fa      	ldr	r2, [r7, #28]
 8005814:	fb02 f303 	mul.w	r3, r2, r3
 8005818:	041a      	lsls	r2, r3, #16
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	6859      	ldr	r1, [r3, #4]
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	1acb      	subs	r3, r1, r3
 8005824:	69f9      	ldr	r1, [r7, #28]
 8005826:	fb01 f303 	mul.w	r3, r1, r3
 800582a:	3303      	adds	r3, #3
 800582c:	68f9      	ldr	r1, [r7, #12]
 800582e:	6809      	ldr	r1, [r1, #0]
 8005830:	4608      	mov	r0, r1
 8005832:	6879      	ldr	r1, [r7, #4]
 8005834:	01c9      	lsls	r1, r1, #7
 8005836:	4401      	add	r1, r0
 8005838:	3184      	adds	r1, #132	; 0x84
 800583a:	4313      	orrs	r3, r2
 800583c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	461a      	mov	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	01db      	lsls	r3, r3, #7
 8005848:	4413      	add	r3, r2
 800584a:	3384      	adds	r3, #132	; 0x84
 800584c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4619      	mov	r1, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	01db      	lsls	r3, r3, #7
 8005858:	440b      	add	r3, r1
 800585a:	3384      	adds	r3, #132	; 0x84
 800585c:	4619      	mov	r1, r3
 800585e:	4b14      	ldr	r3, [pc, #80]	; (80058b0 <LTDC_SetConfig+0x330>)
 8005860:	4013      	ands	r3, r2
 8005862:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	461a      	mov	r2, r3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	01db      	lsls	r3, r3, #7
 800586e:	4413      	add	r3, r2
 8005870:	3384      	adds	r3, #132	; 0x84
 8005872:	461a      	mov	r2, r3
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005878:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	461a      	mov	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	01db      	lsls	r3, r3, #7
 8005884:	4413      	add	r3, r2
 8005886:	3384      	adds	r3, #132	; 0x84
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	6812      	ldr	r2, [r2, #0]
 800588e:	4611      	mov	r1, r2
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	01d2      	lsls	r2, r2, #7
 8005894:	440a      	add	r2, r1
 8005896:	3284      	adds	r2, #132	; 0x84
 8005898:	f043 0301 	orr.w	r3, r3, #1
 800589c:	6013      	str	r3, [r2, #0]
}
 800589e:	bf00      	nop
 80058a0:	3724      	adds	r7, #36	; 0x24
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	fffff8f8 	.word	0xfffff8f8
 80058b0:	fffff800 	.word	0xfffff800

080058b4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80058b4:	b480      	push	{r7}
 80058b6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058b8:	4b05      	ldr	r3, [pc, #20]	; (80058d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a04      	ldr	r2, [pc, #16]	; (80058d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80058be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058c2:	6013      	str	r3, [r2, #0]
}
 80058c4:	bf00      	nop
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	40007000 	.word	0x40007000

080058d4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b082      	sub	sp, #8
 80058d8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80058da:	2300      	movs	r3, #0
 80058dc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80058de:	4b23      	ldr	r3, [pc, #140]	; (800596c <HAL_PWREx_EnableOverDrive+0x98>)
 80058e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e2:	4a22      	ldr	r2, [pc, #136]	; (800596c <HAL_PWREx_EnableOverDrive+0x98>)
 80058e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058e8:	6413      	str	r3, [r2, #64]	; 0x40
 80058ea:	4b20      	ldr	r3, [pc, #128]	; (800596c <HAL_PWREx_EnableOverDrive+0x98>)
 80058ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058f2:	603b      	str	r3, [r7, #0]
 80058f4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80058f6:	4b1e      	ldr	r3, [pc, #120]	; (8005970 <HAL_PWREx_EnableOverDrive+0x9c>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a1d      	ldr	r2, [pc, #116]	; (8005970 <HAL_PWREx_EnableOverDrive+0x9c>)
 80058fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005900:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005902:	f7fd fb23 	bl	8002f4c <HAL_GetTick>
 8005906:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005908:	e009      	b.n	800591e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800590a:	f7fd fb1f 	bl	8002f4c <HAL_GetTick>
 800590e:	4602      	mov	r2, r0
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005918:	d901      	bls.n	800591e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e022      	b.n	8005964 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800591e:	4b14      	ldr	r3, [pc, #80]	; (8005970 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005926:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800592a:	d1ee      	bne.n	800590a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800592c:	4b10      	ldr	r3, [pc, #64]	; (8005970 <HAL_PWREx_EnableOverDrive+0x9c>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a0f      	ldr	r2, [pc, #60]	; (8005970 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005932:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005936:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005938:	f7fd fb08 	bl	8002f4c <HAL_GetTick>
 800593c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800593e:	e009      	b.n	8005954 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005940:	f7fd fb04 	bl	8002f4c <HAL_GetTick>
 8005944:	4602      	mov	r2, r0
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800594e:	d901      	bls.n	8005954 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	e007      	b.n	8005964 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005954:	4b06      	ldr	r3, [pc, #24]	; (8005970 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800595c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005960:	d1ee      	bne.n	8005940 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005962:	2300      	movs	r3, #0
}
 8005964:	4618      	mov	r0, r3
 8005966:	3708      	adds	r7, #8
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}
 800596c:	40023800 	.word	0x40023800
 8005970:	40007000 	.word	0x40007000

08005974 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b086      	sub	sp, #24
 8005978:	af02      	add	r7, sp, #8
 800597a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800597c:	f7fd fae6 	bl	8002f4c <HAL_GetTick>
 8005980:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d101      	bne.n	800598c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e067      	b.n	8005a5c <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005992:	b2db      	uxtb	r3, r3
 8005994:	2b00      	cmp	r3, #0
 8005996:	d10b      	bne.n	80059b0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f7fc fc79 	bl	8002298 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80059a6:	f241 3188 	movw	r1, #5000	; 0x1388
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 f85e 	bl	8005a6c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	3b01      	subs	r3, #1
 80059c0:	021a      	lsls	r2, r3, #8
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	430a      	orrs	r2, r1
 80059c8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059ce:	9300      	str	r3, [sp, #0]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2200      	movs	r2, #0
 80059d4:	2120      	movs	r1, #32
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 f856 	bl	8005a88 <QSPI_WaitFlagStateUntilTimeout>
 80059dc:	4603      	mov	r3, r0
 80059de:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80059e0:	7afb      	ldrb	r3, [r7, #11]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d135      	bne.n	8005a52 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	4b1d      	ldr	r3, [pc, #116]	; (8005a64 <HAL_QSPI_Init+0xf0>)
 80059ee:	4013      	ands	r3, r2
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	6852      	ldr	r2, [r2, #4]
 80059f4:	0611      	lsls	r1, r2, #24
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	68d2      	ldr	r2, [r2, #12]
 80059fa:	4311      	orrs	r1, r2
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	69d2      	ldr	r2, [r2, #28]
 8005a00:	4311      	orrs	r1, r2
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	6a12      	ldr	r2, [r2, #32]
 8005a06:	4311      	orrs	r1, r2
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	6812      	ldr	r2, [r2, #0]
 8005a0c:	430b      	orrs	r3, r1
 8005a0e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	685a      	ldr	r2, [r3, #4]
 8005a16:	4b14      	ldr	r3, [pc, #80]	; (8005a68 <HAL_QSPI_Init+0xf4>)
 8005a18:	4013      	ands	r3, r2
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	6912      	ldr	r2, [r2, #16]
 8005a1e:	0411      	lsls	r1, r2, #16
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	6952      	ldr	r2, [r2, #20]
 8005a24:	4311      	orrs	r1, r2
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	6992      	ldr	r2, [r2, #24]
 8005a2a:	4311      	orrs	r1, r2
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	6812      	ldr	r2, [r2, #0]
 8005a30:	430b      	orrs	r3, r1
 8005a32:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f042 0201 	orr.w	r2, r2, #1
 8005a42:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005a5a:	7afb      	ldrb	r3, [r7, #11]
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3710      	adds	r7, #16
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	00ffff2f 	.word	0x00ffff2f
 8005a68:	ffe0f8fe 	.word	0xffe0f8fe

08005a6c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	683a      	ldr	r2, [r7, #0]
 8005a7a:	649a      	str	r2, [r3, #72]	; 0x48
}
 8005a7c:	bf00      	nop
 8005a7e:	370c      	adds	r7, #12
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	603b      	str	r3, [r7, #0]
 8005a94:	4613      	mov	r3, r2
 8005a96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005a98:	e01a      	b.n	8005ad0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa0:	d016      	beq.n	8005ad0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aa2:	f7fd fa53 	bl	8002f4c <HAL_GetTick>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	1ad3      	subs	r3, r2, r3
 8005aac:	69ba      	ldr	r2, [r7, #24]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d302      	bcc.n	8005ab8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d10b      	bne.n	8005ad0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2204      	movs	r2, #4
 8005abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ac4:	f043 0201 	orr.w	r2, r3, #1
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e00e      	b.n	8005aee <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	689a      	ldr	r2, [r3, #8]
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	4013      	ands	r3, r2
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	bf14      	ite	ne
 8005ade:	2301      	movne	r3, #1
 8005ae0:	2300      	moveq	r3, #0
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	79fb      	ldrb	r3, [r7, #7]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d1d6      	bne.n	8005a9a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
	...

08005af8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b086      	sub	sp, #24
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005b00:	2300      	movs	r3, #0
 8005b02:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d101      	bne.n	8005b0e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e291      	b.n	8006032 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 0301 	and.w	r3, r3, #1
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	f000 8087 	beq.w	8005c2a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b1c:	4b96      	ldr	r3, [pc, #600]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f003 030c 	and.w	r3, r3, #12
 8005b24:	2b04      	cmp	r3, #4
 8005b26:	d00c      	beq.n	8005b42 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b28:	4b93      	ldr	r3, [pc, #588]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	f003 030c 	and.w	r3, r3, #12
 8005b30:	2b08      	cmp	r3, #8
 8005b32:	d112      	bne.n	8005b5a <HAL_RCC_OscConfig+0x62>
 8005b34:	4b90      	ldr	r3, [pc, #576]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b40:	d10b      	bne.n	8005b5a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b42:	4b8d      	ldr	r3, [pc, #564]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d06c      	beq.n	8005c28 <HAL_RCC_OscConfig+0x130>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d168      	bne.n	8005c28 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e26b      	b.n	8006032 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b62:	d106      	bne.n	8005b72 <HAL_RCC_OscConfig+0x7a>
 8005b64:	4b84      	ldr	r3, [pc, #528]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a83      	ldr	r2, [pc, #524]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005b6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b6e:	6013      	str	r3, [r2, #0]
 8005b70:	e02e      	b.n	8005bd0 <HAL_RCC_OscConfig+0xd8>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d10c      	bne.n	8005b94 <HAL_RCC_OscConfig+0x9c>
 8005b7a:	4b7f      	ldr	r3, [pc, #508]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a7e      	ldr	r2, [pc, #504]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005b80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b84:	6013      	str	r3, [r2, #0]
 8005b86:	4b7c      	ldr	r3, [pc, #496]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a7b      	ldr	r2, [pc, #492]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005b8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b90:	6013      	str	r3, [r2, #0]
 8005b92:	e01d      	b.n	8005bd0 <HAL_RCC_OscConfig+0xd8>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b9c:	d10c      	bne.n	8005bb8 <HAL_RCC_OscConfig+0xc0>
 8005b9e:	4b76      	ldr	r3, [pc, #472]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a75      	ldr	r2, [pc, #468]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005ba4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ba8:	6013      	str	r3, [r2, #0]
 8005baa:	4b73      	ldr	r3, [pc, #460]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a72      	ldr	r2, [pc, #456]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bb4:	6013      	str	r3, [r2, #0]
 8005bb6:	e00b      	b.n	8005bd0 <HAL_RCC_OscConfig+0xd8>
 8005bb8:	4b6f      	ldr	r3, [pc, #444]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a6e      	ldr	r2, [pc, #440]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005bbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bc2:	6013      	str	r3, [r2, #0]
 8005bc4:	4b6c      	ldr	r3, [pc, #432]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a6b      	ldr	r2, [pc, #428]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005bca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d013      	beq.n	8005c00 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bd8:	f7fd f9b8 	bl	8002f4c <HAL_GetTick>
 8005bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bde:	e008      	b.n	8005bf2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005be0:	f7fd f9b4 	bl	8002f4c <HAL_GetTick>
 8005be4:	4602      	mov	r2, r0
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	1ad3      	subs	r3, r2, r3
 8005bea:	2b64      	cmp	r3, #100	; 0x64
 8005bec:	d901      	bls.n	8005bf2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	e21f      	b.n	8006032 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bf2:	4b61      	ldr	r3, [pc, #388]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d0f0      	beq.n	8005be0 <HAL_RCC_OscConfig+0xe8>
 8005bfe:	e014      	b.n	8005c2a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c00:	f7fd f9a4 	bl	8002f4c <HAL_GetTick>
 8005c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c06:	e008      	b.n	8005c1a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c08:	f7fd f9a0 	bl	8002f4c <HAL_GetTick>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	2b64      	cmp	r3, #100	; 0x64
 8005c14:	d901      	bls.n	8005c1a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e20b      	b.n	8006032 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c1a:	4b57      	ldr	r3, [pc, #348]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1f0      	bne.n	8005c08 <HAL_RCC_OscConfig+0x110>
 8005c26:	e000      	b.n	8005c2a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0302 	and.w	r3, r3, #2
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d069      	beq.n	8005d0a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c36:	4b50      	ldr	r3, [pc, #320]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	f003 030c 	and.w	r3, r3, #12
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d00b      	beq.n	8005c5a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c42:	4b4d      	ldr	r3, [pc, #308]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	f003 030c 	and.w	r3, r3, #12
 8005c4a:	2b08      	cmp	r3, #8
 8005c4c:	d11c      	bne.n	8005c88 <HAL_RCC_OscConfig+0x190>
 8005c4e:	4b4a      	ldr	r3, [pc, #296]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d116      	bne.n	8005c88 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c5a:	4b47      	ldr	r3, [pc, #284]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 0302 	and.w	r3, r3, #2
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d005      	beq.n	8005c72 <HAL_RCC_OscConfig+0x17a>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d001      	beq.n	8005c72 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e1df      	b.n	8006032 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c72:	4b41      	ldr	r3, [pc, #260]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	00db      	lsls	r3, r3, #3
 8005c80:	493d      	ldr	r1, [pc, #244]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005c82:	4313      	orrs	r3, r2
 8005c84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c86:	e040      	b.n	8005d0a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d023      	beq.n	8005cd8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c90:	4b39      	ldr	r3, [pc, #228]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a38      	ldr	r2, [pc, #224]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005c96:	f043 0301 	orr.w	r3, r3, #1
 8005c9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c9c:	f7fd f956 	bl	8002f4c <HAL_GetTick>
 8005ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ca2:	e008      	b.n	8005cb6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ca4:	f7fd f952 	bl	8002f4c <HAL_GetTick>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	2b02      	cmp	r3, #2
 8005cb0:	d901      	bls.n	8005cb6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	e1bd      	b.n	8006032 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cb6:	4b30      	ldr	r3, [pc, #192]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0302 	and.w	r3, r3, #2
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d0f0      	beq.n	8005ca4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cc2:	4b2d      	ldr	r3, [pc, #180]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	00db      	lsls	r3, r3, #3
 8005cd0:	4929      	ldr	r1, [pc, #164]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	600b      	str	r3, [r1, #0]
 8005cd6:	e018      	b.n	8005d0a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005cd8:	4b27      	ldr	r3, [pc, #156]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a26      	ldr	r2, [pc, #152]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005cde:	f023 0301 	bic.w	r3, r3, #1
 8005ce2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ce4:	f7fd f932 	bl	8002f4c <HAL_GetTick>
 8005ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cea:	e008      	b.n	8005cfe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cec:	f7fd f92e 	bl	8002f4c <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d901      	bls.n	8005cfe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e199      	b.n	8006032 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cfe:	4b1e      	ldr	r3, [pc, #120]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0302 	and.w	r3, r3, #2
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d1f0      	bne.n	8005cec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f003 0308 	and.w	r3, r3, #8
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d038      	beq.n	8005d88 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d019      	beq.n	8005d52 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d1e:	4b16      	ldr	r3, [pc, #88]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005d20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d22:	4a15      	ldr	r2, [pc, #84]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005d24:	f043 0301 	orr.w	r3, r3, #1
 8005d28:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d2a:	f7fd f90f 	bl	8002f4c <HAL_GetTick>
 8005d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d30:	e008      	b.n	8005d44 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d32:	f7fd f90b 	bl	8002f4c <HAL_GetTick>
 8005d36:	4602      	mov	r2, r0
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	2b02      	cmp	r3, #2
 8005d3e:	d901      	bls.n	8005d44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005d40:	2303      	movs	r3, #3
 8005d42:	e176      	b.n	8006032 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d44:	4b0c      	ldr	r3, [pc, #48]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005d46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d48:	f003 0302 	and.w	r3, r3, #2
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d0f0      	beq.n	8005d32 <HAL_RCC_OscConfig+0x23a>
 8005d50:	e01a      	b.n	8005d88 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d52:	4b09      	ldr	r3, [pc, #36]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005d54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d56:	4a08      	ldr	r2, [pc, #32]	; (8005d78 <HAL_RCC_OscConfig+0x280>)
 8005d58:	f023 0301 	bic.w	r3, r3, #1
 8005d5c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d5e:	f7fd f8f5 	bl	8002f4c <HAL_GetTick>
 8005d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d64:	e00a      	b.n	8005d7c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d66:	f7fd f8f1 	bl	8002f4c <HAL_GetTick>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	2b02      	cmp	r3, #2
 8005d72:	d903      	bls.n	8005d7c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005d74:	2303      	movs	r3, #3
 8005d76:	e15c      	b.n	8006032 <HAL_RCC_OscConfig+0x53a>
 8005d78:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d7c:	4b91      	ldr	r3, [pc, #580]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005d7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d80:	f003 0302 	and.w	r3, r3, #2
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d1ee      	bne.n	8005d66 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 0304 	and.w	r3, r3, #4
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	f000 80a4 	beq.w	8005ede <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d96:	4b8b      	ldr	r3, [pc, #556]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d10d      	bne.n	8005dbe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005da2:	4b88      	ldr	r3, [pc, #544]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da6:	4a87      	ldr	r2, [pc, #540]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dac:	6413      	str	r3, [r2, #64]	; 0x40
 8005dae:	4b85      	ldr	r3, [pc, #532]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005db6:	60bb      	str	r3, [r7, #8]
 8005db8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005dbe:	4b82      	ldr	r3, [pc, #520]	; (8005fc8 <HAL_RCC_OscConfig+0x4d0>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d118      	bne.n	8005dfc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005dca:	4b7f      	ldr	r3, [pc, #508]	; (8005fc8 <HAL_RCC_OscConfig+0x4d0>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a7e      	ldr	r2, [pc, #504]	; (8005fc8 <HAL_RCC_OscConfig+0x4d0>)
 8005dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005dd6:	f7fd f8b9 	bl	8002f4c <HAL_GetTick>
 8005dda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ddc:	e008      	b.n	8005df0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dde:	f7fd f8b5 	bl	8002f4c <HAL_GetTick>
 8005de2:	4602      	mov	r2, r0
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	2b64      	cmp	r3, #100	; 0x64
 8005dea:	d901      	bls.n	8005df0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005dec:	2303      	movs	r3, #3
 8005dee:	e120      	b.n	8006032 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005df0:	4b75      	ldr	r3, [pc, #468]	; (8005fc8 <HAL_RCC_OscConfig+0x4d0>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d0f0      	beq.n	8005dde <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d106      	bne.n	8005e12 <HAL_RCC_OscConfig+0x31a>
 8005e04:	4b6f      	ldr	r3, [pc, #444]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e08:	4a6e      	ldr	r2, [pc, #440]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005e0a:	f043 0301 	orr.w	r3, r3, #1
 8005e0e:	6713      	str	r3, [r2, #112]	; 0x70
 8005e10:	e02d      	b.n	8005e6e <HAL_RCC_OscConfig+0x376>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d10c      	bne.n	8005e34 <HAL_RCC_OscConfig+0x33c>
 8005e1a:	4b6a      	ldr	r3, [pc, #424]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e1e:	4a69      	ldr	r2, [pc, #420]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005e20:	f023 0301 	bic.w	r3, r3, #1
 8005e24:	6713      	str	r3, [r2, #112]	; 0x70
 8005e26:	4b67      	ldr	r3, [pc, #412]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e2a:	4a66      	ldr	r2, [pc, #408]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005e2c:	f023 0304 	bic.w	r3, r3, #4
 8005e30:	6713      	str	r3, [r2, #112]	; 0x70
 8005e32:	e01c      	b.n	8005e6e <HAL_RCC_OscConfig+0x376>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	2b05      	cmp	r3, #5
 8005e3a:	d10c      	bne.n	8005e56 <HAL_RCC_OscConfig+0x35e>
 8005e3c:	4b61      	ldr	r3, [pc, #388]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e40:	4a60      	ldr	r2, [pc, #384]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005e42:	f043 0304 	orr.w	r3, r3, #4
 8005e46:	6713      	str	r3, [r2, #112]	; 0x70
 8005e48:	4b5e      	ldr	r3, [pc, #376]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e4c:	4a5d      	ldr	r2, [pc, #372]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005e4e:	f043 0301 	orr.w	r3, r3, #1
 8005e52:	6713      	str	r3, [r2, #112]	; 0x70
 8005e54:	e00b      	b.n	8005e6e <HAL_RCC_OscConfig+0x376>
 8005e56:	4b5b      	ldr	r3, [pc, #364]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e5a:	4a5a      	ldr	r2, [pc, #360]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005e5c:	f023 0301 	bic.w	r3, r3, #1
 8005e60:	6713      	str	r3, [r2, #112]	; 0x70
 8005e62:	4b58      	ldr	r3, [pc, #352]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e66:	4a57      	ldr	r2, [pc, #348]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005e68:	f023 0304 	bic.w	r3, r3, #4
 8005e6c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d015      	beq.n	8005ea2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e76:	f7fd f869 	bl	8002f4c <HAL_GetTick>
 8005e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e7c:	e00a      	b.n	8005e94 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e7e:	f7fd f865 	bl	8002f4c <HAL_GetTick>
 8005e82:	4602      	mov	r2, r0
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	1ad3      	subs	r3, r2, r3
 8005e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d901      	bls.n	8005e94 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e0ce      	b.n	8006032 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e94:	4b4b      	ldr	r3, [pc, #300]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e98:	f003 0302 	and.w	r3, r3, #2
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d0ee      	beq.n	8005e7e <HAL_RCC_OscConfig+0x386>
 8005ea0:	e014      	b.n	8005ecc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ea2:	f7fd f853 	bl	8002f4c <HAL_GetTick>
 8005ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ea8:	e00a      	b.n	8005ec0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005eaa:	f7fd f84f 	bl	8002f4c <HAL_GetTick>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	1ad3      	subs	r3, r2, r3
 8005eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d901      	bls.n	8005ec0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005ebc:	2303      	movs	r3, #3
 8005ebe:	e0b8      	b.n	8006032 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ec0:	4b40      	ldr	r3, [pc, #256]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ec4:	f003 0302 	and.w	r3, r3, #2
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d1ee      	bne.n	8005eaa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005ecc:	7dfb      	ldrb	r3, [r7, #23]
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d105      	bne.n	8005ede <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ed2:	4b3c      	ldr	r3, [pc, #240]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed6:	4a3b      	ldr	r2, [pc, #236]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005ed8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005edc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	699b      	ldr	r3, [r3, #24]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f000 80a4 	beq.w	8006030 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ee8:	4b36      	ldr	r3, [pc, #216]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	f003 030c 	and.w	r3, r3, #12
 8005ef0:	2b08      	cmp	r3, #8
 8005ef2:	d06b      	beq.n	8005fcc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	699b      	ldr	r3, [r3, #24]
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d149      	bne.n	8005f90 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005efc:	4b31      	ldr	r3, [pc, #196]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a30      	ldr	r2, [pc, #192]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005f02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f08:	f7fd f820 	bl	8002f4c <HAL_GetTick>
 8005f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f0e:	e008      	b.n	8005f22 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f10:	f7fd f81c 	bl	8002f4c <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	d901      	bls.n	8005f22 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e087      	b.n	8006032 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f22:	4b28      	ldr	r3, [pc, #160]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1f0      	bne.n	8005f10 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	69da      	ldr	r2, [r3, #28]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a1b      	ldr	r3, [r3, #32]
 8005f36:	431a      	orrs	r2, r3
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3c:	019b      	lsls	r3, r3, #6
 8005f3e:	431a      	orrs	r2, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f44:	085b      	lsrs	r3, r3, #1
 8005f46:	3b01      	subs	r3, #1
 8005f48:	041b      	lsls	r3, r3, #16
 8005f4a:	431a      	orrs	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f50:	061b      	lsls	r3, r3, #24
 8005f52:	4313      	orrs	r3, r2
 8005f54:	4a1b      	ldr	r2, [pc, #108]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005f56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f5a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f5c:	4b19      	ldr	r3, [pc, #100]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a18      	ldr	r2, [pc, #96]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005f62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f68:	f7fc fff0 	bl	8002f4c <HAL_GetTick>
 8005f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f6e:	e008      	b.n	8005f82 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f70:	f7fc ffec 	bl	8002f4c <HAL_GetTick>
 8005f74:	4602      	mov	r2, r0
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	1ad3      	subs	r3, r2, r3
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	d901      	bls.n	8005f82 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e057      	b.n	8006032 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f82:	4b10      	ldr	r3, [pc, #64]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d0f0      	beq.n	8005f70 <HAL_RCC_OscConfig+0x478>
 8005f8e:	e04f      	b.n	8006030 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f90:	4b0c      	ldr	r3, [pc, #48]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a0b      	ldr	r2, [pc, #44]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005f96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f9c:	f7fc ffd6 	bl	8002f4c <HAL_GetTick>
 8005fa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fa2:	e008      	b.n	8005fb6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fa4:	f7fc ffd2 	bl	8002f4c <HAL_GetTick>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	d901      	bls.n	8005fb6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e03d      	b.n	8006032 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fb6:	4b03      	ldr	r3, [pc, #12]	; (8005fc4 <HAL_RCC_OscConfig+0x4cc>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1f0      	bne.n	8005fa4 <HAL_RCC_OscConfig+0x4ac>
 8005fc2:	e035      	b.n	8006030 <HAL_RCC_OscConfig+0x538>
 8005fc4:	40023800 	.word	0x40023800
 8005fc8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005fcc:	4b1b      	ldr	r3, [pc, #108]	; (800603c <HAL_RCC_OscConfig+0x544>)
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d028      	beq.n	800602c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d121      	bne.n	800602c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d11a      	bne.n	800602c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006002:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006004:	4293      	cmp	r3, r2
 8006006:	d111      	bne.n	800602c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006012:	085b      	lsrs	r3, r3, #1
 8006014:	3b01      	subs	r3, #1
 8006016:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006018:	429a      	cmp	r2, r3
 800601a:	d107      	bne.n	800602c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006026:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006028:	429a      	cmp	r2, r3
 800602a:	d001      	beq.n	8006030 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	e000      	b.n	8006032 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3718      	adds	r7, #24
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	40023800 	.word	0x40023800

08006040 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800604a:	2300      	movs	r3, #0
 800604c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d101      	bne.n	8006058 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	e0d0      	b.n	80061fa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006058:	4b6a      	ldr	r3, [pc, #424]	; (8006204 <HAL_RCC_ClockConfig+0x1c4>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 030f 	and.w	r3, r3, #15
 8006060:	683a      	ldr	r2, [r7, #0]
 8006062:	429a      	cmp	r2, r3
 8006064:	d910      	bls.n	8006088 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006066:	4b67      	ldr	r3, [pc, #412]	; (8006204 <HAL_RCC_ClockConfig+0x1c4>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f023 020f 	bic.w	r2, r3, #15
 800606e:	4965      	ldr	r1, [pc, #404]	; (8006204 <HAL_RCC_ClockConfig+0x1c4>)
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	4313      	orrs	r3, r2
 8006074:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006076:	4b63      	ldr	r3, [pc, #396]	; (8006204 <HAL_RCC_ClockConfig+0x1c4>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 030f 	and.w	r3, r3, #15
 800607e:	683a      	ldr	r2, [r7, #0]
 8006080:	429a      	cmp	r2, r3
 8006082:	d001      	beq.n	8006088 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	e0b8      	b.n	80061fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 0302 	and.w	r3, r3, #2
 8006090:	2b00      	cmp	r3, #0
 8006092:	d020      	beq.n	80060d6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 0304 	and.w	r3, r3, #4
 800609c:	2b00      	cmp	r3, #0
 800609e:	d005      	beq.n	80060ac <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80060a0:	4b59      	ldr	r3, [pc, #356]	; (8006208 <HAL_RCC_ClockConfig+0x1c8>)
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	4a58      	ldr	r2, [pc, #352]	; (8006208 <HAL_RCC_ClockConfig+0x1c8>)
 80060a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80060aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 0308 	and.w	r3, r3, #8
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d005      	beq.n	80060c4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80060b8:	4b53      	ldr	r3, [pc, #332]	; (8006208 <HAL_RCC_ClockConfig+0x1c8>)
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	4a52      	ldr	r2, [pc, #328]	; (8006208 <HAL_RCC_ClockConfig+0x1c8>)
 80060be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80060c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060c4:	4b50      	ldr	r3, [pc, #320]	; (8006208 <HAL_RCC_ClockConfig+0x1c8>)
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	494d      	ldr	r1, [pc, #308]	; (8006208 <HAL_RCC_ClockConfig+0x1c8>)
 80060d2:	4313      	orrs	r3, r2
 80060d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0301 	and.w	r3, r3, #1
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d040      	beq.n	8006164 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d107      	bne.n	80060fa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060ea:	4b47      	ldr	r3, [pc, #284]	; (8006208 <HAL_RCC_ClockConfig+0x1c8>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d115      	bne.n	8006122 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e07f      	b.n	80061fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	2b02      	cmp	r3, #2
 8006100:	d107      	bne.n	8006112 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006102:	4b41      	ldr	r3, [pc, #260]	; (8006208 <HAL_RCC_ClockConfig+0x1c8>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800610a:	2b00      	cmp	r3, #0
 800610c:	d109      	bne.n	8006122 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e073      	b.n	80061fa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006112:	4b3d      	ldr	r3, [pc, #244]	; (8006208 <HAL_RCC_ClockConfig+0x1c8>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 0302 	and.w	r3, r3, #2
 800611a:	2b00      	cmp	r3, #0
 800611c:	d101      	bne.n	8006122 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e06b      	b.n	80061fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006122:	4b39      	ldr	r3, [pc, #228]	; (8006208 <HAL_RCC_ClockConfig+0x1c8>)
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	f023 0203 	bic.w	r2, r3, #3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	4936      	ldr	r1, [pc, #216]	; (8006208 <HAL_RCC_ClockConfig+0x1c8>)
 8006130:	4313      	orrs	r3, r2
 8006132:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006134:	f7fc ff0a 	bl	8002f4c <HAL_GetTick>
 8006138:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800613a:	e00a      	b.n	8006152 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800613c:	f7fc ff06 	bl	8002f4c <HAL_GetTick>
 8006140:	4602      	mov	r2, r0
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	f241 3288 	movw	r2, #5000	; 0x1388
 800614a:	4293      	cmp	r3, r2
 800614c:	d901      	bls.n	8006152 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800614e:	2303      	movs	r3, #3
 8006150:	e053      	b.n	80061fa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006152:	4b2d      	ldr	r3, [pc, #180]	; (8006208 <HAL_RCC_ClockConfig+0x1c8>)
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	f003 020c 	and.w	r2, r3, #12
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	429a      	cmp	r2, r3
 8006162:	d1eb      	bne.n	800613c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006164:	4b27      	ldr	r3, [pc, #156]	; (8006204 <HAL_RCC_ClockConfig+0x1c4>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 030f 	and.w	r3, r3, #15
 800616c:	683a      	ldr	r2, [r7, #0]
 800616e:	429a      	cmp	r2, r3
 8006170:	d210      	bcs.n	8006194 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006172:	4b24      	ldr	r3, [pc, #144]	; (8006204 <HAL_RCC_ClockConfig+0x1c4>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f023 020f 	bic.w	r2, r3, #15
 800617a:	4922      	ldr	r1, [pc, #136]	; (8006204 <HAL_RCC_ClockConfig+0x1c4>)
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	4313      	orrs	r3, r2
 8006180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006182:	4b20      	ldr	r3, [pc, #128]	; (8006204 <HAL_RCC_ClockConfig+0x1c4>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f003 030f 	and.w	r3, r3, #15
 800618a:	683a      	ldr	r2, [r7, #0]
 800618c:	429a      	cmp	r2, r3
 800618e:	d001      	beq.n	8006194 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	e032      	b.n	80061fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 0304 	and.w	r3, r3, #4
 800619c:	2b00      	cmp	r3, #0
 800619e:	d008      	beq.n	80061b2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80061a0:	4b19      	ldr	r3, [pc, #100]	; (8006208 <HAL_RCC_ClockConfig+0x1c8>)
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	4916      	ldr	r1, [pc, #88]	; (8006208 <HAL_RCC_ClockConfig+0x1c8>)
 80061ae:	4313      	orrs	r3, r2
 80061b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 0308 	and.w	r3, r3, #8
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d009      	beq.n	80061d2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80061be:	4b12      	ldr	r3, [pc, #72]	; (8006208 <HAL_RCC_ClockConfig+0x1c8>)
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	00db      	lsls	r3, r3, #3
 80061cc:	490e      	ldr	r1, [pc, #56]	; (8006208 <HAL_RCC_ClockConfig+0x1c8>)
 80061ce:	4313      	orrs	r3, r2
 80061d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80061d2:	f000 f821 	bl	8006218 <HAL_RCC_GetSysClockFreq>
 80061d6:	4601      	mov	r1, r0
 80061d8:	4b0b      	ldr	r3, [pc, #44]	; (8006208 <HAL_RCC_ClockConfig+0x1c8>)
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	091b      	lsrs	r3, r3, #4
 80061de:	f003 030f 	and.w	r3, r3, #15
 80061e2:	4a0a      	ldr	r2, [pc, #40]	; (800620c <HAL_RCC_ClockConfig+0x1cc>)
 80061e4:	5cd3      	ldrb	r3, [r2, r3]
 80061e6:	fa21 f303 	lsr.w	r3, r1, r3
 80061ea:	4a09      	ldr	r2, [pc, #36]	; (8006210 <HAL_RCC_ClockConfig+0x1d0>)
 80061ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80061ee:	4b09      	ldr	r3, [pc, #36]	; (8006214 <HAL_RCC_ClockConfig+0x1d4>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4618      	mov	r0, r3
 80061f4:	f7fc fcf4 	bl	8002be0 <HAL_InitTick>

  return HAL_OK;
 80061f8:	2300      	movs	r3, #0
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3710      	adds	r7, #16
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	40023c00 	.word	0x40023c00
 8006208:	40023800 	.word	0x40023800
 800620c:	08024b18 	.word	0x08024b18
 8006210:	20000018 	.word	0x20000018
 8006214:	2000001c 	.word	0x2000001c

08006218 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800621a:	b085      	sub	sp, #20
 800621c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800621e:	2300      	movs	r3, #0
 8006220:	607b      	str	r3, [r7, #4]
 8006222:	2300      	movs	r3, #0
 8006224:	60fb      	str	r3, [r7, #12]
 8006226:	2300      	movs	r3, #0
 8006228:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800622a:	2300      	movs	r3, #0
 800622c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800622e:	4b50      	ldr	r3, [pc, #320]	; (8006370 <HAL_RCC_GetSysClockFreq+0x158>)
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	f003 030c 	and.w	r3, r3, #12
 8006236:	2b04      	cmp	r3, #4
 8006238:	d007      	beq.n	800624a <HAL_RCC_GetSysClockFreq+0x32>
 800623a:	2b08      	cmp	r3, #8
 800623c:	d008      	beq.n	8006250 <HAL_RCC_GetSysClockFreq+0x38>
 800623e:	2b00      	cmp	r3, #0
 8006240:	f040 808d 	bne.w	800635e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006244:	4b4b      	ldr	r3, [pc, #300]	; (8006374 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006246:	60bb      	str	r3, [r7, #8]
      break;
 8006248:	e08c      	b.n	8006364 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800624a:	4b4b      	ldr	r3, [pc, #300]	; (8006378 <HAL_RCC_GetSysClockFreq+0x160>)
 800624c:	60bb      	str	r3, [r7, #8]
      break;
 800624e:	e089      	b.n	8006364 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006250:	4b47      	ldr	r3, [pc, #284]	; (8006370 <HAL_RCC_GetSysClockFreq+0x158>)
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006258:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800625a:	4b45      	ldr	r3, [pc, #276]	; (8006370 <HAL_RCC_GetSysClockFreq+0x158>)
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006262:	2b00      	cmp	r3, #0
 8006264:	d023      	beq.n	80062ae <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006266:	4b42      	ldr	r3, [pc, #264]	; (8006370 <HAL_RCC_GetSysClockFreq+0x158>)
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	099b      	lsrs	r3, r3, #6
 800626c:	f04f 0400 	mov.w	r4, #0
 8006270:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006274:	f04f 0200 	mov.w	r2, #0
 8006278:	ea03 0501 	and.w	r5, r3, r1
 800627c:	ea04 0602 	and.w	r6, r4, r2
 8006280:	4a3d      	ldr	r2, [pc, #244]	; (8006378 <HAL_RCC_GetSysClockFreq+0x160>)
 8006282:	fb02 f106 	mul.w	r1, r2, r6
 8006286:	2200      	movs	r2, #0
 8006288:	fb02 f205 	mul.w	r2, r2, r5
 800628c:	440a      	add	r2, r1
 800628e:	493a      	ldr	r1, [pc, #232]	; (8006378 <HAL_RCC_GetSysClockFreq+0x160>)
 8006290:	fba5 0101 	umull	r0, r1, r5, r1
 8006294:	1853      	adds	r3, r2, r1
 8006296:	4619      	mov	r1, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f04f 0400 	mov.w	r4, #0
 800629e:	461a      	mov	r2, r3
 80062a0:	4623      	mov	r3, r4
 80062a2:	f7fa f805 	bl	80002b0 <__aeabi_uldivmod>
 80062a6:	4603      	mov	r3, r0
 80062a8:	460c      	mov	r4, r1
 80062aa:	60fb      	str	r3, [r7, #12]
 80062ac:	e049      	b.n	8006342 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062ae:	4b30      	ldr	r3, [pc, #192]	; (8006370 <HAL_RCC_GetSysClockFreq+0x158>)
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	099b      	lsrs	r3, r3, #6
 80062b4:	f04f 0400 	mov.w	r4, #0
 80062b8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80062bc:	f04f 0200 	mov.w	r2, #0
 80062c0:	ea03 0501 	and.w	r5, r3, r1
 80062c4:	ea04 0602 	and.w	r6, r4, r2
 80062c8:	4629      	mov	r1, r5
 80062ca:	4632      	mov	r2, r6
 80062cc:	f04f 0300 	mov.w	r3, #0
 80062d0:	f04f 0400 	mov.w	r4, #0
 80062d4:	0154      	lsls	r4, r2, #5
 80062d6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80062da:	014b      	lsls	r3, r1, #5
 80062dc:	4619      	mov	r1, r3
 80062de:	4622      	mov	r2, r4
 80062e0:	1b49      	subs	r1, r1, r5
 80062e2:	eb62 0206 	sbc.w	r2, r2, r6
 80062e6:	f04f 0300 	mov.w	r3, #0
 80062ea:	f04f 0400 	mov.w	r4, #0
 80062ee:	0194      	lsls	r4, r2, #6
 80062f0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80062f4:	018b      	lsls	r3, r1, #6
 80062f6:	1a5b      	subs	r3, r3, r1
 80062f8:	eb64 0402 	sbc.w	r4, r4, r2
 80062fc:	f04f 0100 	mov.w	r1, #0
 8006300:	f04f 0200 	mov.w	r2, #0
 8006304:	00e2      	lsls	r2, r4, #3
 8006306:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800630a:	00d9      	lsls	r1, r3, #3
 800630c:	460b      	mov	r3, r1
 800630e:	4614      	mov	r4, r2
 8006310:	195b      	adds	r3, r3, r5
 8006312:	eb44 0406 	adc.w	r4, r4, r6
 8006316:	f04f 0100 	mov.w	r1, #0
 800631a:	f04f 0200 	mov.w	r2, #0
 800631e:	02a2      	lsls	r2, r4, #10
 8006320:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006324:	0299      	lsls	r1, r3, #10
 8006326:	460b      	mov	r3, r1
 8006328:	4614      	mov	r4, r2
 800632a:	4618      	mov	r0, r3
 800632c:	4621      	mov	r1, r4
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f04f 0400 	mov.w	r4, #0
 8006334:	461a      	mov	r2, r3
 8006336:	4623      	mov	r3, r4
 8006338:	f7f9 ffba 	bl	80002b0 <__aeabi_uldivmod>
 800633c:	4603      	mov	r3, r0
 800633e:	460c      	mov	r4, r1
 8006340:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006342:	4b0b      	ldr	r3, [pc, #44]	; (8006370 <HAL_RCC_GetSysClockFreq+0x158>)
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	0c1b      	lsrs	r3, r3, #16
 8006348:	f003 0303 	and.w	r3, r3, #3
 800634c:	3301      	adds	r3, #1
 800634e:	005b      	lsls	r3, r3, #1
 8006350:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	fbb2 f3f3 	udiv	r3, r2, r3
 800635a:	60bb      	str	r3, [r7, #8]
      break;
 800635c:	e002      	b.n	8006364 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800635e:	4b05      	ldr	r3, [pc, #20]	; (8006374 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006360:	60bb      	str	r3, [r7, #8]
      break;
 8006362:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006364:	68bb      	ldr	r3, [r7, #8]
}
 8006366:	4618      	mov	r0, r3
 8006368:	3714      	adds	r7, #20
 800636a:	46bd      	mov	sp, r7
 800636c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800636e:	bf00      	nop
 8006370:	40023800 	.word	0x40023800
 8006374:	00f42400 	.word	0x00f42400
 8006378:	017d7840 	.word	0x017d7840

0800637c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800637c:	b480      	push	{r7}
 800637e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006380:	4b03      	ldr	r3, [pc, #12]	; (8006390 <HAL_RCC_GetHCLKFreq+0x14>)
 8006382:	681b      	ldr	r3, [r3, #0]
}
 8006384:	4618      	mov	r0, r3
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	20000018 	.word	0x20000018

08006394 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006398:	f7ff fff0 	bl	800637c <HAL_RCC_GetHCLKFreq>
 800639c:	4601      	mov	r1, r0
 800639e:	4b05      	ldr	r3, [pc, #20]	; (80063b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	0a9b      	lsrs	r3, r3, #10
 80063a4:	f003 0307 	and.w	r3, r3, #7
 80063a8:	4a03      	ldr	r2, [pc, #12]	; (80063b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80063aa:	5cd3      	ldrb	r3, [r2, r3]
 80063ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	40023800 	.word	0x40023800
 80063b8:	08024b28 	.word	0x08024b28

080063bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80063c0:	f7ff ffdc 	bl	800637c <HAL_RCC_GetHCLKFreq>
 80063c4:	4601      	mov	r1, r0
 80063c6:	4b05      	ldr	r3, [pc, #20]	; (80063dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	0b5b      	lsrs	r3, r3, #13
 80063cc:	f003 0307 	and.w	r3, r3, #7
 80063d0:	4a03      	ldr	r2, [pc, #12]	; (80063e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80063d2:	5cd3      	ldrb	r3, [r2, r3]
 80063d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80063d8:	4618      	mov	r0, r3
 80063da:	bd80      	pop	{r7, pc}
 80063dc:	40023800 	.word	0x40023800
 80063e0:	08024b28 	.word	0x08024b28

080063e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	220f      	movs	r2, #15
 80063f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80063f4:	4b12      	ldr	r3, [pc, #72]	; (8006440 <HAL_RCC_GetClockConfig+0x5c>)
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	f003 0203 	and.w	r2, r3, #3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006400:	4b0f      	ldr	r3, [pc, #60]	; (8006440 <HAL_RCC_GetClockConfig+0x5c>)
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800640c:	4b0c      	ldr	r3, [pc, #48]	; (8006440 <HAL_RCC_GetClockConfig+0x5c>)
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006418:	4b09      	ldr	r3, [pc, #36]	; (8006440 <HAL_RCC_GetClockConfig+0x5c>)
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	08db      	lsrs	r3, r3, #3
 800641e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006426:	4b07      	ldr	r3, [pc, #28]	; (8006444 <HAL_RCC_GetClockConfig+0x60>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 020f 	and.w	r2, r3, #15
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	601a      	str	r2, [r3, #0]
}
 8006432:	bf00      	nop
 8006434:	370c      	adds	r7, #12
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr
 800643e:	bf00      	nop
 8006440:	40023800 	.word	0x40023800
 8006444:	40023c00 	.word	0x40023c00

08006448 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b088      	sub	sp, #32
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006450:	2300      	movs	r3, #0
 8006452:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006454:	2300      	movs	r3, #0
 8006456:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006458:	2300      	movs	r3, #0
 800645a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800645c:	2300      	movs	r3, #0
 800645e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006460:	2300      	movs	r3, #0
 8006462:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 0301 	and.w	r3, r3, #1
 800646c:	2b00      	cmp	r3, #0
 800646e:	d012      	beq.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006470:	4b69      	ldr	r3, [pc, #420]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	4a68      	ldr	r2, [pc, #416]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006476:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800647a:	6093      	str	r3, [r2, #8]
 800647c:	4b66      	ldr	r3, [pc, #408]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800647e:	689a      	ldr	r2, [r3, #8]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006484:	4964      	ldr	r1, [pc, #400]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006486:	4313      	orrs	r3, r2
 8006488:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800648e:	2b00      	cmp	r3, #0
 8006490:	d101      	bne.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006492:	2301      	movs	r3, #1
 8006494:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d017      	beq.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80064a2:	4b5d      	ldr	r3, [pc, #372]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064b0:	4959      	ldr	r1, [pc, #356]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064b2:	4313      	orrs	r3, r2
 80064b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064c0:	d101      	bne.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80064c2:	2301      	movs	r3, #1
 80064c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d101      	bne.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80064ce:	2301      	movs	r3, #1
 80064d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d017      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80064de:	4b4e      	ldr	r3, [pc, #312]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ec:	494a      	ldr	r1, [pc, #296]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064ee:	4313      	orrs	r3, r2
 80064f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064fc:	d101      	bne.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80064fe:	2301      	movs	r3, #1
 8006500:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006506:	2b00      	cmp	r3, #0
 8006508:	d101      	bne.n	800650e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800650a:	2301      	movs	r3, #1
 800650c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006516:	2b00      	cmp	r3, #0
 8006518:	d001      	beq.n	800651e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800651a:	2301      	movs	r3, #1
 800651c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 0320 	and.w	r3, r3, #32
 8006526:	2b00      	cmp	r3, #0
 8006528:	f000 808b 	beq.w	8006642 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800652c:	4b3a      	ldr	r3, [pc, #232]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800652e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006530:	4a39      	ldr	r2, [pc, #228]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006536:	6413      	str	r3, [r2, #64]	; 0x40
 8006538:	4b37      	ldr	r3, [pc, #220]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800653a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006540:	60bb      	str	r3, [r7, #8]
 8006542:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006544:	4b35      	ldr	r3, [pc, #212]	; (800661c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a34      	ldr	r2, [pc, #208]	; (800661c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800654a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800654e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006550:	f7fc fcfc 	bl	8002f4c <HAL_GetTick>
 8006554:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006556:	e008      	b.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006558:	f7fc fcf8 	bl	8002f4c <HAL_GetTick>
 800655c:	4602      	mov	r2, r0
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	2b64      	cmp	r3, #100	; 0x64
 8006564:	d901      	bls.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006566:	2303      	movs	r3, #3
 8006568:	e355      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800656a:	4b2c      	ldr	r3, [pc, #176]	; (800661c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006572:	2b00      	cmp	r3, #0
 8006574:	d0f0      	beq.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006576:	4b28      	ldr	r3, [pc, #160]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800657a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800657e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d035      	beq.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800658a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800658e:	693a      	ldr	r2, [r7, #16]
 8006590:	429a      	cmp	r2, r3
 8006592:	d02e      	beq.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006594:	4b20      	ldr	r3, [pc, #128]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006598:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800659c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800659e:	4b1e      	ldr	r3, [pc, #120]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065a2:	4a1d      	ldr	r2, [pc, #116]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065a8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80065aa:	4b1b      	ldr	r3, [pc, #108]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ae:	4a1a      	ldr	r2, [pc, #104]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065b4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80065b6:	4a18      	ldr	r2, [pc, #96]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80065bc:	4b16      	ldr	r3, [pc, #88]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065c0:	f003 0301 	and.w	r3, r3, #1
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d114      	bne.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065c8:	f7fc fcc0 	bl	8002f4c <HAL_GetTick>
 80065cc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065ce:	e00a      	b.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065d0:	f7fc fcbc 	bl	8002f4c <HAL_GetTick>
 80065d4:	4602      	mov	r2, r0
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	f241 3288 	movw	r2, #5000	; 0x1388
 80065de:	4293      	cmp	r3, r2
 80065e0:	d901      	bls.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80065e2:	2303      	movs	r3, #3
 80065e4:	e317      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065e6:	4b0c      	ldr	r3, [pc, #48]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ea:	f003 0302 	and.w	r3, r3, #2
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d0ee      	beq.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065fe:	d111      	bne.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006600:	4b05      	ldr	r3, [pc, #20]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800660c:	4b04      	ldr	r3, [pc, #16]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800660e:	400b      	ands	r3, r1
 8006610:	4901      	ldr	r1, [pc, #4]	; (8006618 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006612:	4313      	orrs	r3, r2
 8006614:	608b      	str	r3, [r1, #8]
 8006616:	e00b      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006618:	40023800 	.word	0x40023800
 800661c:	40007000 	.word	0x40007000
 8006620:	0ffffcff 	.word	0x0ffffcff
 8006624:	4bb0      	ldr	r3, [pc, #704]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	4aaf      	ldr	r2, [pc, #700]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800662a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800662e:	6093      	str	r3, [r2, #8]
 8006630:	4bad      	ldr	r3, [pc, #692]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006632:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006638:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800663c:	49aa      	ldr	r1, [pc, #680]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800663e:	4313      	orrs	r3, r2
 8006640:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 0310 	and.w	r3, r3, #16
 800664a:	2b00      	cmp	r3, #0
 800664c:	d010      	beq.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800664e:	4ba6      	ldr	r3, [pc, #664]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006650:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006654:	4aa4      	ldr	r2, [pc, #656]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006656:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800665a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800665e:	4ba2      	ldr	r3, [pc, #648]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006660:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006668:	499f      	ldr	r1, [pc, #636]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800666a:	4313      	orrs	r3, r2
 800666c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006678:	2b00      	cmp	r3, #0
 800667a:	d00a      	beq.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800667c:	4b9a      	ldr	r3, [pc, #616]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800667e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006682:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800668a:	4997      	ldr	r1, [pc, #604]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800668c:	4313      	orrs	r3, r2
 800668e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00a      	beq.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800669e:	4b92      	ldr	r3, [pc, #584]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066ac:	498e      	ldr	r1, [pc, #568]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066ae:	4313      	orrs	r3, r2
 80066b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d00a      	beq.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80066c0:	4b89      	ldr	r3, [pc, #548]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066ce:	4986      	ldr	r1, [pc, #536]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066d0:	4313      	orrs	r3, r2
 80066d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00a      	beq.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80066e2:	4b81      	ldr	r3, [pc, #516]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066f0:	497d      	ldr	r1, [pc, #500]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066f2:	4313      	orrs	r3, r2
 80066f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00a      	beq.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006704:	4b78      	ldr	r3, [pc, #480]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800670a:	f023 0203 	bic.w	r2, r3, #3
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006712:	4975      	ldr	r1, [pc, #468]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006714:	4313      	orrs	r3, r2
 8006716:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006722:	2b00      	cmp	r3, #0
 8006724:	d00a      	beq.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006726:	4b70      	ldr	r3, [pc, #448]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800672c:	f023 020c 	bic.w	r2, r3, #12
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006734:	496c      	ldr	r1, [pc, #432]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006736:	4313      	orrs	r3, r2
 8006738:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00a      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006748:	4b67      	ldr	r3, [pc, #412]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800674a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800674e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006756:	4964      	ldr	r1, [pc, #400]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006758:	4313      	orrs	r3, r2
 800675a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006766:	2b00      	cmp	r3, #0
 8006768:	d00a      	beq.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800676a:	4b5f      	ldr	r3, [pc, #380]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800676c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006770:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006778:	495b      	ldr	r1, [pc, #364]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800677a:	4313      	orrs	r3, r2
 800677c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006788:	2b00      	cmp	r3, #0
 800678a:	d00a      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800678c:	4b56      	ldr	r3, [pc, #344]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800678e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006792:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800679a:	4953      	ldr	r1, [pc, #332]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800679c:	4313      	orrs	r3, r2
 800679e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00a      	beq.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80067ae:	4b4e      	ldr	r3, [pc, #312]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80067b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067b4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067bc:	494a      	ldr	r1, [pc, #296]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80067be:	4313      	orrs	r3, r2
 80067c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d00a      	beq.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80067d0:	4b45      	ldr	r3, [pc, #276]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80067d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067d6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067de:	4942      	ldr	r1, [pc, #264]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80067e0:	4313      	orrs	r3, r2
 80067e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00a      	beq.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80067f2:	4b3d      	ldr	r3, [pc, #244]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80067f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006800:	4939      	ldr	r1, [pc, #228]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006802:	4313      	orrs	r3, r2
 8006804:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006810:	2b00      	cmp	r3, #0
 8006812:	d00a      	beq.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006814:	4b34      	ldr	r3, [pc, #208]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800681a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006822:	4931      	ldr	r1, [pc, #196]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006824:	4313      	orrs	r3, r2
 8006826:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006832:	2b00      	cmp	r3, #0
 8006834:	d011      	beq.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006836:	4b2c      	ldr	r3, [pc, #176]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800683c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006844:	4928      	ldr	r1, [pc, #160]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006846:	4313      	orrs	r3, r2
 8006848:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006850:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006854:	d101      	bne.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006856:	2301      	movs	r3, #1
 8006858:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 0308 	and.w	r3, r3, #8
 8006862:	2b00      	cmp	r3, #0
 8006864:	d001      	beq.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006866:	2301      	movs	r3, #1
 8006868:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006872:	2b00      	cmp	r3, #0
 8006874:	d00a      	beq.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006876:	4b1c      	ldr	r3, [pc, #112]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800687c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006884:	4918      	ldr	r1, [pc, #96]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006886:	4313      	orrs	r3, r2
 8006888:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006894:	2b00      	cmp	r3, #0
 8006896:	d00b      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006898:	4b13      	ldr	r3, [pc, #76]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800689a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800689e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068a8:	490f      	ldr	r1, [pc, #60]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80068aa:	4313      	orrs	r3, r2
 80068ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d005      	beq.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068be:	f040 80d8 	bne.w	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80068c2:	4b09      	ldr	r3, [pc, #36]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a08      	ldr	r2, [pc, #32]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80068c8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80068cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068ce:	f7fc fb3d 	bl	8002f4c <HAL_GetTick>
 80068d2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80068d4:	e00a      	b.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80068d6:	f7fc fb39 	bl	8002f4c <HAL_GetTick>
 80068da:	4602      	mov	r2, r0
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	1ad3      	subs	r3, r2, r3
 80068e0:	2b64      	cmp	r3, #100	; 0x64
 80068e2:	d903      	bls.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068e4:	2303      	movs	r3, #3
 80068e6:	e196      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80068e8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80068ec:	4b6c      	ldr	r3, [pc, #432]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d1ee      	bne.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f003 0301 	and.w	r3, r3, #1
 8006900:	2b00      	cmp	r3, #0
 8006902:	d021      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006908:	2b00      	cmp	r3, #0
 800690a:	d11d      	bne.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800690c:	4b64      	ldr	r3, [pc, #400]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800690e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006912:	0c1b      	lsrs	r3, r3, #16
 8006914:	f003 0303 	and.w	r3, r3, #3
 8006918:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800691a:	4b61      	ldr	r3, [pc, #388]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800691c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006920:	0e1b      	lsrs	r3, r3, #24
 8006922:	f003 030f 	and.w	r3, r3, #15
 8006926:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	019a      	lsls	r2, r3, #6
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	041b      	lsls	r3, r3, #16
 8006932:	431a      	orrs	r2, r3
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	061b      	lsls	r3, r3, #24
 8006938:	431a      	orrs	r2, r3
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	071b      	lsls	r3, r3, #28
 8006940:	4957      	ldr	r1, [pc, #348]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006942:	4313      	orrs	r3, r2
 8006944:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006950:	2b00      	cmp	r3, #0
 8006952:	d004      	beq.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x516>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006958:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800695c:	d00a      	beq.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006966:	2b00      	cmp	r3, #0
 8006968:	d02e      	beq.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006972:	d129      	bne.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006974:	4b4a      	ldr	r3, [pc, #296]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006976:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800697a:	0c1b      	lsrs	r3, r3, #16
 800697c:	f003 0303 	and.w	r3, r3, #3
 8006980:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006982:	4b47      	ldr	r3, [pc, #284]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006984:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006988:	0f1b      	lsrs	r3, r3, #28
 800698a:	f003 0307 	and.w	r3, r3, #7
 800698e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	019a      	lsls	r2, r3, #6
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	041b      	lsls	r3, r3, #16
 800699a:	431a      	orrs	r2, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	061b      	lsls	r3, r3, #24
 80069a2:	431a      	orrs	r2, r3
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	071b      	lsls	r3, r3, #28
 80069a8:	493d      	ldr	r1, [pc, #244]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80069aa:	4313      	orrs	r3, r2
 80069ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80069b0:	4b3b      	ldr	r3, [pc, #236]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80069b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069b6:	f023 021f 	bic.w	r2, r3, #31
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069be:	3b01      	subs	r3, #1
 80069c0:	4937      	ldr	r1, [pc, #220]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80069c2:	4313      	orrs	r3, r2
 80069c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d01d      	beq.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80069d4:	4b32      	ldr	r3, [pc, #200]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80069d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069da:	0e1b      	lsrs	r3, r3, #24
 80069dc:	f003 030f 	and.w	r3, r3, #15
 80069e0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80069e2:	4b2f      	ldr	r3, [pc, #188]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80069e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069e8:	0f1b      	lsrs	r3, r3, #28
 80069ea:	f003 0307 	and.w	r3, r3, #7
 80069ee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	019a      	lsls	r2, r3, #6
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	041b      	lsls	r3, r3, #16
 80069fc:	431a      	orrs	r2, r3
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	061b      	lsls	r3, r3, #24
 8006a02:	431a      	orrs	r2, r3
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	071b      	lsls	r3, r3, #28
 8006a08:	4925      	ldr	r1, [pc, #148]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d011      	beq.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	019a      	lsls	r2, r3, #6
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	041b      	lsls	r3, r3, #16
 8006a28:	431a      	orrs	r2, r3
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	061b      	lsls	r3, r3, #24
 8006a30:	431a      	orrs	r2, r3
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	071b      	lsls	r3, r3, #28
 8006a38:	4919      	ldr	r1, [pc, #100]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006a40:	4b17      	ldr	r3, [pc, #92]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a16      	ldr	r2, [pc, #88]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a46:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006a4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a4c:	f7fc fa7e 	bl	8002f4c <HAL_GetTick>
 8006a50:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006a52:	e008      	b.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006a54:	f7fc fa7a 	bl	8002f4c <HAL_GetTick>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	1ad3      	subs	r3, r2, r3
 8006a5e:	2b64      	cmp	r3, #100	; 0x64
 8006a60:	d901      	bls.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a62:	2303      	movs	r3, #3
 8006a64:	e0d7      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006a66:	4b0e      	ldr	r3, [pc, #56]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d0f0      	beq.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	f040 80cd 	bne.w	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006a7a:	4b09      	ldr	r3, [pc, #36]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a08      	ldr	r2, [pc, #32]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a86:	f7fc fa61 	bl	8002f4c <HAL_GetTick>
 8006a8a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006a8c:	e00a      	b.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006a8e:	f7fc fa5d 	bl	8002f4c <HAL_GetTick>
 8006a92:	4602      	mov	r2, r0
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	1ad3      	subs	r3, r2, r3
 8006a98:	2b64      	cmp	r3, #100	; 0x64
 8006a9a:	d903      	bls.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a9c:	2303      	movs	r3, #3
 8006a9e:	e0ba      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8006aa0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006aa4:	4b5e      	ldr	r3, [pc, #376]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006aac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ab0:	d0ed      	beq.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d003      	beq.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d009      	beq.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d02e      	beq.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d12a      	bne.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006ada:	4b51      	ldr	r3, [pc, #324]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ae0:	0c1b      	lsrs	r3, r3, #16
 8006ae2:	f003 0303 	and.w	r3, r3, #3
 8006ae6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006ae8:	4b4d      	ldr	r3, [pc, #308]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aee:	0f1b      	lsrs	r3, r3, #28
 8006af0:	f003 0307 	and.w	r3, r3, #7
 8006af4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	695b      	ldr	r3, [r3, #20]
 8006afa:	019a      	lsls	r2, r3, #6
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	041b      	lsls	r3, r3, #16
 8006b00:	431a      	orrs	r2, r3
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	699b      	ldr	r3, [r3, #24]
 8006b06:	061b      	lsls	r3, r3, #24
 8006b08:	431a      	orrs	r2, r3
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	071b      	lsls	r3, r3, #28
 8006b0e:	4944      	ldr	r1, [pc, #272]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006b10:	4313      	orrs	r3, r2
 8006b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006b16:	4b42      	ldr	r3, [pc, #264]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006b18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b1c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b24:	3b01      	subs	r3, #1
 8006b26:	021b      	lsls	r3, r3, #8
 8006b28:	493d      	ldr	r1, [pc, #244]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d022      	beq.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b44:	d11d      	bne.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006b46:	4b36      	ldr	r3, [pc, #216]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b4c:	0e1b      	lsrs	r3, r3, #24
 8006b4e:	f003 030f 	and.w	r3, r3, #15
 8006b52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006b54:	4b32      	ldr	r3, [pc, #200]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b5a:	0f1b      	lsrs	r3, r3, #28
 8006b5c:	f003 0307 	and.w	r3, r3, #7
 8006b60:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	695b      	ldr	r3, [r3, #20]
 8006b66:	019a      	lsls	r2, r3, #6
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6a1b      	ldr	r3, [r3, #32]
 8006b6c:	041b      	lsls	r3, r3, #16
 8006b6e:	431a      	orrs	r2, r3
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	061b      	lsls	r3, r3, #24
 8006b74:	431a      	orrs	r2, r3
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	071b      	lsls	r3, r3, #28
 8006b7a:	4929      	ldr	r1, [pc, #164]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f003 0308 	and.w	r3, r3, #8
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d028      	beq.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006b8e:	4b24      	ldr	r3, [pc, #144]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b94:	0e1b      	lsrs	r3, r3, #24
 8006b96:	f003 030f 	and.w	r3, r3, #15
 8006b9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006b9c:	4b20      	ldr	r3, [pc, #128]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ba2:	0c1b      	lsrs	r3, r3, #16
 8006ba4:	f003 0303 	and.w	r3, r3, #3
 8006ba8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	695b      	ldr	r3, [r3, #20]
 8006bae:	019a      	lsls	r2, r3, #6
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	041b      	lsls	r3, r3, #16
 8006bb4:	431a      	orrs	r2, r3
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	061b      	lsls	r3, r3, #24
 8006bba:	431a      	orrs	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	69db      	ldr	r3, [r3, #28]
 8006bc0:	071b      	lsls	r3, r3, #28
 8006bc2:	4917      	ldr	r1, [pc, #92]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006bca:	4b15      	ldr	r3, [pc, #84]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bd0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd8:	4911      	ldr	r1, [pc, #68]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006be0:	4b0f      	ldr	r3, [pc, #60]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a0e      	ldr	r2, [pc, #56]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bec:	f7fc f9ae 	bl	8002f4c <HAL_GetTick>
 8006bf0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006bf2:	e008      	b.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006bf4:	f7fc f9aa 	bl	8002f4c <HAL_GetTick>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	1ad3      	subs	r3, r2, r3
 8006bfe:	2b64      	cmp	r3, #100	; 0x64
 8006c00:	d901      	bls.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c02:	2303      	movs	r3, #3
 8006c04:	e007      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006c06:	4b06      	ldr	r3, [pc, #24]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c12:	d1ef      	bne.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3720      	adds	r7, #32
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	40023800 	.word	0x40023800

08006c24 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b087      	sub	sp, #28
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8006c30:	2300      	movs	r3, #0
 8006c32:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8006c34:	2300      	movs	r3, #0
 8006c36:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006c42:	f040 8086 	bne.w	8006d52 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 8006c46:	4b8d      	ldr	r3, [pc, #564]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006c48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c4c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006c54:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c5c:	d03e      	beq.n	8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8006c5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c62:	d073      	beq.n	8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d000      	beq.n	8006c6a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8006c68:	e074      	b.n	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006c6a:	4b84      	ldr	r3, [pc, #528]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d108      	bne.n	8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006c76:	4b81      	ldr	r3, [pc, #516]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c7e:	4a80      	ldr	r2, [pc, #512]	; (8006e80 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8006c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c84:	613b      	str	r3, [r7, #16]
 8006c86:	e007      	b.n	8006c98 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006c88:	4b7c      	ldr	r3, [pc, #496]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c90:	4a7c      	ldr	r2, [pc, #496]	; (8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c96:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8006c98:	4b78      	ldr	r3, [pc, #480]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c9e:	0e1b      	lsrs	r3, r3, #24
 8006ca0:	f003 030f 	and.w	r3, r3, #15
 8006ca4:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8006ca6:	4b75      	ldr	r3, [pc, #468]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cac:	099b      	lsrs	r3, r3, #6
 8006cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cb2:	693a      	ldr	r2, [r7, #16]
 8006cb4:	fb02 f203 	mul.w	r2, r2, r3
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cbe:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8006cc0:	4b6e      	ldr	r3, [pc, #440]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006cc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cc6:	0a1b      	lsrs	r3, r3, #8
 8006cc8:	f003 031f 	and.w	r3, r3, #31
 8006ccc:	3301      	adds	r3, #1
 8006cce:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006cd0:	697a      	ldr	r2, [r7, #20]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cd8:	617b      	str	r3, [r7, #20]
        break;
 8006cda:	e03b      	b.n	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006cdc:	4b67      	ldr	r3, [pc, #412]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d108      	bne.n	8006cfa <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006ce8:	4b64      	ldr	r3, [pc, #400]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cf0:	4a63      	ldr	r2, [pc, #396]	; (8006e80 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8006cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cf6:	613b      	str	r3, [r7, #16]
 8006cf8:	e007      	b.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006cfa:	4b60      	ldr	r3, [pc, #384]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d02:	4a60      	ldr	r2, [pc, #384]	; (8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d08:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8006d0a:	4b5c      	ldr	r3, [pc, #368]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006d0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d10:	0e1b      	lsrs	r3, r3, #24
 8006d12:	f003 030f 	and.w	r3, r3, #15
 8006d16:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8006d18:	4b58      	ldr	r3, [pc, #352]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006d1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d1e:	099b      	lsrs	r3, r3, #6
 8006d20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d24:	693a      	ldr	r2, [r7, #16]
 8006d26:	fb02 f203 	mul.w	r2, r2, r3
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d30:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8006d32:	4b52      	ldr	r3, [pc, #328]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006d34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d38:	f003 031f 	and.w	r3, r3, #31
 8006d3c:	3301      	adds	r3, #1
 8006d3e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006d40:	697a      	ldr	r2, [r7, #20]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d48:	617b      	str	r3, [r7, #20]
        break;
 8006d4a:	e003      	b.n	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 8006d4c:	4b4e      	ldr	r3, [pc, #312]	; (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8006d4e:	617b      	str	r3, [r7, #20]
        break;
 8006d50:	e000      	b.n	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 8006d52:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d5a:	f040 8086 	bne.w	8006e6a <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 8006d5e:	4b47      	ldr	r3, [pc, #284]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006d60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d64:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006d6c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d74:	d03e      	beq.n	8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8006d76:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006d7a:	d073      	beq.n	8006e64 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d000      	beq.n	8006d82 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8006d80:	e074      	b.n	8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006d82:	4b3e      	ldr	r3, [pc, #248]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d108      	bne.n	8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006d8e:	4b3b      	ldr	r3, [pc, #236]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d96:	4a3a      	ldr	r2, [pc, #232]	; (8006e80 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8006d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d9c:	613b      	str	r3, [r7, #16]
 8006d9e:	e007      	b.n	8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006da0:	4b36      	ldr	r3, [pc, #216]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006da8:	4a36      	ldr	r2, [pc, #216]	; (8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dae:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8006db0:	4b32      	ldr	r3, [pc, #200]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006db6:	0e1b      	lsrs	r3, r3, #24
 8006db8:	f003 030f 	and.w	r3, r3, #15
 8006dbc:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8006dbe:	4b2f      	ldr	r3, [pc, #188]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dc4:	099b      	lsrs	r3, r3, #6
 8006dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dca:	693a      	ldr	r2, [r7, #16]
 8006dcc:	fb02 f203 	mul.w	r2, r2, r3
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dd6:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8006dd8:	4b28      	ldr	r3, [pc, #160]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006dda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dde:	0a1b      	lsrs	r3, r3, #8
 8006de0:	f003 031f 	and.w	r3, r3, #31
 8006de4:	3301      	adds	r3, #1
 8006de6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006de8:	697a      	ldr	r2, [r7, #20]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8006df0:	617b      	str	r3, [r7, #20]
        break;
 8006df2:	e03b      	b.n	8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006df4:	4b21      	ldr	r3, [pc, #132]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d108      	bne.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006e00:	4b1e      	ldr	r3, [pc, #120]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e08:	4a1d      	ldr	r2, [pc, #116]	; (8006e80 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8006e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e0e:	613b      	str	r3, [r7, #16]
 8006e10:	e007      	b.n	8006e22 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006e12:	4b1a      	ldr	r3, [pc, #104]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e1a:	4a1a      	ldr	r2, [pc, #104]	; (8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e20:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8006e22:	4b16      	ldr	r3, [pc, #88]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006e24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e28:	0e1b      	lsrs	r3, r3, #24
 8006e2a:	f003 030f 	and.w	r3, r3, #15
 8006e2e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8006e30:	4b12      	ldr	r3, [pc, #72]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006e32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e36:	099b      	lsrs	r3, r3, #6
 8006e38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e3c:	693a      	ldr	r2, [r7, #16]
 8006e3e:	fb02 f203 	mul.w	r2, r2, r3
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e48:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8006e4a:	4b0c      	ldr	r3, [pc, #48]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006e4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e50:	f003 031f 	and.w	r3, r3, #31
 8006e54:	3301      	adds	r3, #1
 8006e56:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006e58:	697a      	ldr	r2, [r7, #20]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e60:	617b      	str	r3, [r7, #20]
        break;
 8006e62:	e003      	b.n	8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 8006e64:	4b08      	ldr	r3, [pc, #32]	; (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8006e66:	617b      	str	r3, [r7, #20]
        break;
 8006e68:	e000      	b.n	8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 8006e6a:	bf00      	nop

  return frequency;
 8006e6c:	697b      	ldr	r3, [r7, #20]
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	371c      	adds	r7, #28
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr
 8006e7a:	bf00      	nop
 8006e7c:	40023800 	.word	0x40023800
 8006e80:	00f42400 	.word	0x00f42400
 8006e84:	017d7840 	.word	0x017d7840
 8006e88:	00bb8000 	.word	0x00bb8000

08006e8c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d101      	bne.n	8006e9e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e06b      	b.n	8006f76 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	7f5b      	ldrb	r3, [r3, #29]
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d105      	bne.n	8006eb4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f7fb fa82 	bl	80023b8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2202      	movs	r2, #2
 8006eb8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	22ca      	movs	r2, #202	; 0xca
 8006ec0:	625a      	str	r2, [r3, #36]	; 0x24
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	2253      	movs	r2, #83	; 0x53
 8006ec8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 fb00 	bl	80074d0 <RTC_EnterInitMode>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d008      	beq.n	8006ee8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	22ff      	movs	r2, #255	; 0xff
 8006edc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2204      	movs	r2, #4
 8006ee2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	e046      	b.n	8006f76 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	6899      	ldr	r1, [r3, #8]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	4b23      	ldr	r3, [pc, #140]	; (8006f80 <HAL_RTC_Init+0xf4>)
 8006ef4:	400b      	ands	r3, r1
 8006ef6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	6899      	ldr	r1, [r3, #8]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	685a      	ldr	r2, [r3, #4]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	691b      	ldr	r3, [r3, #16]
 8006f06:	431a      	orrs	r2, r3
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	695b      	ldr	r3, [r3, #20]
 8006f0c:	431a      	orrs	r2, r3
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	430a      	orrs	r2, r1
 8006f14:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	68d2      	ldr	r2, [r2, #12]
 8006f1e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	6919      	ldr	r1, [r3, #16]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	041a      	lsls	r2, r3, #16
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	430a      	orrs	r2, r1
 8006f32:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	68da      	ldr	r2, [r3, #12]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f42:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f022 0208 	bic.w	r2, r2, #8
 8006f52:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	699a      	ldr	r2, [r3, #24]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	430a      	orrs	r2, r1
 8006f64:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	22ff      	movs	r2, #255	; 0xff
 8006f6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2201      	movs	r2, #1
 8006f72:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006f74:	2300      	movs	r3, #0
  }
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3708      	adds	r7, #8
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	ff8fffbf 	.word	0xff8fffbf

08006f84 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006f84:	b590      	push	{r4, r7, lr}
 8006f86:	b087      	sub	sp, #28
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8006f90:	2300      	movs	r3, #0
 8006f92:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	7f1b      	ldrb	r3, [r3, #28]
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d101      	bne.n	8006fa0 <HAL_RTC_SetTime+0x1c>
 8006f9c:	2302      	movs	r3, #2
 8006f9e:	e0a8      	b.n	80070f2 <HAL_RTC_SetTime+0x16e>
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2202      	movs	r2, #2
 8006faa:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d126      	bne.n	8007000 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d102      	bne.n	8006fc6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f000 faac 	bl	8007528 <RTC_ByteToBcd2>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	785b      	ldrb	r3, [r3, #1]
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f000 faa5 	bl	8007528 <RTC_ByteToBcd2>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8006fe2:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	789b      	ldrb	r3, [r3, #2]
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f000 fa9d 	bl	8007528 <RTC_ByteToBcd2>
 8006fee:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8006ff0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	7b1b      	ldrb	r3, [r3, #12]
 8006ff8:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	617b      	str	r3, [r7, #20]
 8006ffe:	e018      	b.n	8007032 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800700a:	2b00      	cmp	r3, #0
 800700c:	d102      	bne.n	8007014 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	2200      	movs	r2, #0
 8007012:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	785b      	ldrb	r3, [r3, #1]
 800701e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007020:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8007022:	68ba      	ldr	r2, [r7, #8]
 8007024:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8007026:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	7b1b      	ldrb	r3, [r3, #12]
 800702c:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800702e:	4313      	orrs	r3, r2
 8007030:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	22ca      	movs	r2, #202	; 0xca
 8007038:	625a      	str	r2, [r3, #36]	; 0x24
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2253      	movs	r2, #83	; 0x53
 8007040:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007042:	68f8      	ldr	r0, [r7, #12]
 8007044:	f000 fa44 	bl	80074d0 <RTC_EnterInitMode>
 8007048:	4603      	mov	r3, r0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00b      	beq.n	8007066 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	22ff      	movs	r2, #255	; 0xff
 8007054:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2204      	movs	r2, #4
 800705a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2200      	movs	r2, #0
 8007060:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	e045      	b.n	80070f2 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	6979      	ldr	r1, [r7, #20]
 800706c:	4b23      	ldr	r3, [pc, #140]	; (80070fc <HAL_RTC_SetTime+0x178>)
 800706e:	400b      	ands	r3, r1
 8007070:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	689a      	ldr	r2, [r3, #8]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007080:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	6899      	ldr	r1, [r3, #8]
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	691a      	ldr	r2, [r3, #16]
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	695b      	ldr	r3, [r3, #20]
 8007090:	431a      	orrs	r2, r3
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	430a      	orrs	r2, r1
 8007098:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	68da      	ldr	r2, [r3, #12]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80070a8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	f003 0320 	and.w	r3, r3, #32
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d111      	bne.n	80070dc <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80070b8:	68f8      	ldr	r0, [r7, #12]
 80070ba:	f000 f9e1 	bl	8007480 <HAL_RTC_WaitForSynchro>
 80070be:	4603      	mov	r3, r0
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d00b      	beq.n	80070dc <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	22ff      	movs	r2, #255	; 0xff
 80070ca:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2204      	movs	r2, #4
 80070d0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2200      	movs	r2, #0
 80070d6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80070d8:	2301      	movs	r3, #1
 80070da:	e00a      	b.n	80070f2 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	22ff      	movs	r2, #255	; 0xff
 80070e2:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2201      	movs	r2, #1
 80070e8:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2200      	movs	r2, #0
 80070ee:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80070f0:	2300      	movs	r3, #0
  }
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	371c      	adds	r7, #28
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd90      	pop	{r4, r7, pc}
 80070fa:	bf00      	nop
 80070fc:	007f7f7f 	.word	0x007f7f7f

08007100 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007100:	b590      	push	{r4, r7, lr}
 8007102:	b087      	sub	sp, #28
 8007104:	af00      	add	r7, sp, #0
 8007106:	60f8      	str	r0, [r7, #12]
 8007108:	60b9      	str	r1, [r7, #8]
 800710a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800710c:	2300      	movs	r3, #0
 800710e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	7f1b      	ldrb	r3, [r3, #28]
 8007114:	2b01      	cmp	r3, #1
 8007116:	d101      	bne.n	800711c <HAL_RTC_SetDate+0x1c>
 8007118:	2302      	movs	r3, #2
 800711a:	e092      	b.n	8007242 <HAL_RTC_SetDate+0x142>
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2201      	movs	r2, #1
 8007120:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2202      	movs	r2, #2
 8007126:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d10e      	bne.n	800714c <HAL_RTC_SetDate+0x4c>
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	785b      	ldrb	r3, [r3, #1]
 8007132:	f003 0310 	and.w	r3, r3, #16
 8007136:	2b00      	cmp	r3, #0
 8007138:	d008      	beq.n	800714c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	785b      	ldrb	r3, [r3, #1]
 800713e:	f023 0310 	bic.w	r3, r3, #16
 8007142:	b2db      	uxtb	r3, r3
 8007144:	330a      	adds	r3, #10
 8007146:	b2da      	uxtb	r2, r3
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d11c      	bne.n	800718c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	78db      	ldrb	r3, [r3, #3]
 8007156:	4618      	mov	r0, r3
 8007158:	f000 f9e6 	bl	8007528 <RTC_ByteToBcd2>
 800715c:	4603      	mov	r3, r0
 800715e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	785b      	ldrb	r3, [r3, #1]
 8007164:	4618      	mov	r0, r3
 8007166:	f000 f9df 	bl	8007528 <RTC_ByteToBcd2>
 800716a:	4603      	mov	r3, r0
 800716c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800716e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	789b      	ldrb	r3, [r3, #2]
 8007174:	4618      	mov	r0, r3
 8007176:	f000 f9d7 	bl	8007528 <RTC_ByteToBcd2>
 800717a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800717c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007186:	4313      	orrs	r3, r2
 8007188:	617b      	str	r3, [r7, #20]
 800718a:	e00e      	b.n	80071aa <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	78db      	ldrb	r3, [r3, #3]
 8007190:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	785b      	ldrb	r3, [r3, #1]
 8007196:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007198:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800719a:	68ba      	ldr	r2, [r7, #8]
 800719c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800719e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80071a6:	4313      	orrs	r3, r2
 80071a8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	22ca      	movs	r2, #202	; 0xca
 80071b0:	625a      	str	r2, [r3, #36]	; 0x24
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	2253      	movs	r2, #83	; 0x53
 80071b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80071ba:	68f8      	ldr	r0, [r7, #12]
 80071bc:	f000 f988 	bl	80074d0 <RTC_EnterInitMode>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d00b      	beq.n	80071de <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	22ff      	movs	r2, #255	; 0xff
 80071cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2204      	movs	r2, #4
 80071d2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2200      	movs	r2, #0
 80071d8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	e031      	b.n	8007242 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	6979      	ldr	r1, [r7, #20]
 80071e4:	4b19      	ldr	r3, [pc, #100]	; (800724c <HAL_RTC_SetDate+0x14c>)
 80071e6:	400b      	ands	r3, r1
 80071e8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	68da      	ldr	r2, [r3, #12]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80071f8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	f003 0320 	and.w	r3, r3, #32
 8007204:	2b00      	cmp	r3, #0
 8007206:	d111      	bne.n	800722c <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007208:	68f8      	ldr	r0, [r7, #12]
 800720a:	f000 f939 	bl	8007480 <HAL_RTC_WaitForSynchro>
 800720e:	4603      	mov	r3, r0
 8007210:	2b00      	cmp	r3, #0
 8007212:	d00b      	beq.n	800722c <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	22ff      	movs	r2, #255	; 0xff
 800721a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2204      	movs	r2, #4
 8007220:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2200      	movs	r2, #0
 8007226:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	e00a      	b.n	8007242 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	22ff      	movs	r2, #255	; 0xff
 8007232:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2201      	movs	r2, #1
 8007238:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2200      	movs	r2, #0
 800723e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007240:	2300      	movs	r3, #0
  }
}
 8007242:	4618      	mov	r0, r3
 8007244:	371c      	adds	r7, #28
 8007246:	46bd      	mov	sp, r7
 8007248:	bd90      	pop	{r4, r7, pc}
 800724a:	bf00      	nop
 800724c:	00ffff3f 	.word	0x00ffff3f

08007250 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007250:	b590      	push	{r4, r7, lr}
 8007252:	b089      	sub	sp, #36	; 0x24
 8007254:	af00      	add	r7, sp, #0
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	60b9      	str	r1, [r7, #8]
 800725a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 800725c:	2300      	movs	r3, #0
 800725e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8007260:	2300      	movs	r3, #0
 8007262:	61fb      	str	r3, [r7, #28]
 8007264:	2300      	movs	r3, #0
 8007266:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	7f1b      	ldrb	r3, [r3, #28]
 800726c:	2b01      	cmp	r3, #1
 800726e:	d101      	bne.n	8007274 <HAL_RTC_SetAlarm+0x24>
 8007270:	2302      	movs	r3, #2
 8007272:	e101      	b.n	8007478 <HAL_RTC_SetAlarm+0x228>
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2201      	movs	r2, #1
 8007278:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2202      	movs	r2, #2
 800727e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d137      	bne.n	80072f6 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007290:	2b00      	cmp	r3, #0
 8007292:	d102      	bne.n	800729a <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	2200      	movs	r2, #0
 8007298:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	4618      	mov	r0, r3
 80072a0:	f000 f942 	bl	8007528 <RTC_ByteToBcd2>
 80072a4:	4603      	mov	r3, r0
 80072a6:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	785b      	ldrb	r3, [r3, #1]
 80072ac:	4618      	mov	r0, r3
 80072ae:	f000 f93b 	bl	8007528 <RTC_ByteToBcd2>
 80072b2:	4603      	mov	r3, r0
 80072b4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80072b6:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	789b      	ldrb	r3, [r3, #2]
 80072bc:	4618      	mov	r0, r3
 80072be:	f000 f933 	bl	8007528 <RTC_ByteToBcd2>
 80072c2:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80072c4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	7b1b      	ldrb	r3, [r3, #12]
 80072cc:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80072ce:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80072d8:	4618      	mov	r0, r3
 80072da:	f000 f925 	bl	8007528 <RTC_ByteToBcd2>
 80072de:	4603      	mov	r3, r0
 80072e0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80072e2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80072ea:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80072f0:	4313      	orrs	r3, r2
 80072f2:	61fb      	str	r3, [r7, #28]
 80072f4:	e023      	b.n	800733e <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007300:	2b00      	cmp	r3, #0
 8007302:	d102      	bne.n	800730a <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	2200      	movs	r2, #0
 8007308:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	785b      	ldrb	r3, [r3, #1]
 8007314:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007316:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007318:	68ba      	ldr	r2, [r7, #8]
 800731a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800731c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	7b1b      	ldrb	r3, [r3, #12]
 8007322:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007324:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800732c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800732e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8007334:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800733a:	4313      	orrs	r3, r2
 800733c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	685a      	ldr	r2, [r3, #4]
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	69db      	ldr	r3, [r3, #28]
 8007346:	4313      	orrs	r3, r2
 8007348:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	22ca      	movs	r2, #202	; 0xca
 8007350:	625a      	str	r2, [r3, #36]	; 0x24
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	2253      	movs	r2, #83	; 0x53
 8007358:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800735e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007362:	d13f      	bne.n	80073e4 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	689a      	ldr	r2, [r3, #8]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007372:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	689a      	ldr	r2, [r3, #8]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007382:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007384:	f7fb fde2 	bl	8002f4c <HAL_GetTick>
 8007388:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800738a:	e013      	b.n	80073b4 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800738c:	f7fb fdde 	bl	8002f4c <HAL_GetTick>
 8007390:	4602      	mov	r2, r0
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	1ad3      	subs	r3, r2, r3
 8007396:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800739a:	d90b      	bls.n	80073b4 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	22ff      	movs	r2, #255	; 0xff
 80073a2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2203      	movs	r2, #3
 80073a8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2200      	movs	r2, #0
 80073ae:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80073b0:	2303      	movs	r3, #3
 80073b2:	e061      	b.n	8007478 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	f003 0301 	and.w	r3, r3, #1
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d0e4      	beq.n	800738c <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	69fa      	ldr	r2, [r7, #28]
 80073c8:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	697a      	ldr	r2, [r7, #20]
 80073d0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	689a      	ldr	r2, [r3, #8]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073e0:	609a      	str	r2, [r3, #8]
 80073e2:	e03e      	b.n	8007462 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	689a      	ldr	r2, [r3, #8]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80073f2:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	689a      	ldr	r2, [r3, #8]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007402:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007404:	f7fb fda2 	bl	8002f4c <HAL_GetTick>
 8007408:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800740a:	e013      	b.n	8007434 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800740c:	f7fb fd9e 	bl	8002f4c <HAL_GetTick>
 8007410:	4602      	mov	r2, r0
 8007412:	69bb      	ldr	r3, [r7, #24]
 8007414:	1ad3      	subs	r3, r2, r3
 8007416:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800741a:	d90b      	bls.n	8007434 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	22ff      	movs	r2, #255	; 0xff
 8007422:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2203      	movs	r2, #3
 8007428:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2200      	movs	r2, #0
 800742e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007430:	2303      	movs	r3, #3
 8007432:	e021      	b.n	8007478 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	f003 0302 	and.w	r3, r3, #2
 800743e:	2b00      	cmp	r3, #0
 8007440:	d0e4      	beq.n	800740c <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	69fa      	ldr	r2, [r7, #28]
 8007448:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	697a      	ldr	r2, [r7, #20]
 8007450:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	689a      	ldr	r2, [r3, #8]
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007460:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	22ff      	movs	r2, #255	; 0xff
 8007468:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2201      	movs	r2, #1
 800746e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2200      	movs	r2, #0
 8007474:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007476:	2300      	movs	r3, #0
}
 8007478:	4618      	mov	r0, r3
 800747a:	3724      	adds	r7, #36	; 0x24
 800747c:	46bd      	mov	sp, r7
 800747e:	bd90      	pop	{r4, r7, pc}

08007480 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007488:	2300      	movs	r3, #0
 800748a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	68da      	ldr	r2, [r3, #12]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800749a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800749c:	f7fb fd56 	bl	8002f4c <HAL_GetTick>
 80074a0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80074a2:	e009      	b.n	80074b8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80074a4:	f7fb fd52 	bl	8002f4c <HAL_GetTick>
 80074a8:	4602      	mov	r2, r0
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	1ad3      	subs	r3, r2, r3
 80074ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074b2:	d901      	bls.n	80074b8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80074b4:	2303      	movs	r3, #3
 80074b6:	e007      	b.n	80074c8 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	f003 0320 	and.w	r3, r3, #32
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d0ee      	beq.n	80074a4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80074c6:	2300      	movs	r3, #0
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3710      	adds	r7, #16
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80074d8:	2300      	movs	r3, #0
 80074da:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	68db      	ldr	r3, [r3, #12]
 80074e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d119      	bne.n	800751e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f04f 32ff 	mov.w	r2, #4294967295
 80074f2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80074f4:	f7fb fd2a 	bl	8002f4c <HAL_GetTick>
 80074f8:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80074fa:	e009      	b.n	8007510 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80074fc:	f7fb fd26 	bl	8002f4c <HAL_GetTick>
 8007500:	4602      	mov	r2, r0
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	1ad3      	subs	r3, r2, r3
 8007506:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800750a:	d901      	bls.n	8007510 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800750c:	2303      	movs	r3, #3
 800750e:	e007      	b.n	8007520 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	68db      	ldr	r3, [r3, #12]
 8007516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800751a:	2b00      	cmp	r3, #0
 800751c:	d0ee      	beq.n	80074fc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800751e:	2300      	movs	r3, #0
}
 8007520:	4618      	mov	r0, r3
 8007522:	3710      	adds	r7, #16
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007528:	b480      	push	{r7}
 800752a:	b085      	sub	sp, #20
 800752c:	af00      	add	r7, sp, #0
 800752e:	4603      	mov	r3, r0
 8007530:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8007532:	2300      	movs	r3, #0
 8007534:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8007536:	e005      	b.n	8007544 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	3301      	adds	r3, #1
 800753c:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800753e:	79fb      	ldrb	r3, [r7, #7]
 8007540:	3b0a      	subs	r3, #10
 8007542:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8007544:	79fb      	ldrb	r3, [r7, #7]
 8007546:	2b09      	cmp	r3, #9
 8007548:	d8f6      	bhi.n	8007538 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	b2db      	uxtb	r3, r3
 800754e:	011b      	lsls	r3, r3, #4
 8007550:	b2da      	uxtb	r2, r3
 8007552:	79fb      	ldrb	r3, [r7, #7]
 8007554:	4313      	orrs	r3, r2
 8007556:	b2db      	uxtb	r3, r3
}
 8007558:	4618      	mov	r0, r3
 800755a:	3714      	adds	r7, #20
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8007564:	b480      	push	{r7}
 8007566:	b087      	sub	sp, #28
 8007568:	af00      	add	r7, sp, #0
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	60b9      	str	r1, [r7, #8]
 800756e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007570:	2300      	movs	r3, #0
 8007572:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	7f1b      	ldrb	r3, [r3, #28]
 8007578:	2b01      	cmp	r3, #1
 800757a:	d101      	bne.n	8007580 <HAL_RTCEx_SetTimeStamp+0x1c>
 800757c:	2302      	movs	r3, #2
 800757e:	e03e      	b.n	80075fe <HAL_RTCEx_SetTimeStamp+0x9a>
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2201      	movs	r2, #1
 8007584:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2202      	movs	r2, #2
 800758a:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	689a      	ldr	r2, [r3, #8]
 8007592:	4b1e      	ldr	r3, [pc, #120]	; (800760c <HAL_RTCEx_SetTimeStamp+0xa8>)
 8007594:	4013      	ands	r3, r2
 8007596:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8007598:	697a      	ldr	r2, [r7, #20]
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	4313      	orrs	r3, r2
 800759e:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	22ca      	movs	r2, #202	; 0xca
 80075a6:	625a      	str	r2, [r3, #36]	; 0x24
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	2253      	movs	r2, #83	; 0x53
 80075ae:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f022 0206 	bic.w	r2, r2, #6
 80075be:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	430a      	orrs	r2, r1
 80075ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	697a      	ldr	r2, [r7, #20]
 80075d6:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	689a      	ldr	r2, [r3, #8]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075e6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	22ff      	movs	r2, #255	; 0xff
 80075ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2201      	movs	r2, #1
 80075f4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2200      	movs	r2, #0
 80075fa:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80075fc:	2300      	movs	r3, #0
}
 80075fe:	4618      	mov	r0, r3
 8007600:	371c      	adds	r7, #28
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr
 800760a:	bf00      	nop
 800760c:	fffff7f7 	.word	0xfffff7f7

08007610 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b088      	sub	sp, #32
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8007618:	2300      	movs	r3, #0
 800761a:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800761c:	2300      	movs	r3, #0
 800761e:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8007620:	2300      	movs	r3, #0
 8007622:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d101      	bne.n	800762e <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	e149      	b.n	80078c2 <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8007634:	b2db      	uxtb	r3, r3
 8007636:	2b00      	cmp	r3, #0
 8007638:	d106      	bne.n	8007648 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f7fb fa62 	bl	8002b0c <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2202      	movs	r2, #2
 800764c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 f94f 	bl	80078f4 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	68db      	ldr	r3, [r3, #12]
 800765a:	2b01      	cmp	r3, #1
 800765c:	d007      	beq.n	800766e <HAL_SAI_Init+0x5e>
 800765e:	2b01      	cmp	r3, #1
 8007660:	d302      	bcc.n	8007668 <HAL_SAI_Init+0x58>
 8007662:	2b02      	cmp	r3, #2
 8007664:	d006      	beq.n	8007674 <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 8007666:	e008      	b.n	800767a <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 8007668:	2300      	movs	r3, #0
 800766a:	61fb      	str	r3, [r7, #28]
      break;
 800766c:	e005      	b.n	800767a <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800766e:	2310      	movs	r3, #16
 8007670:	61fb      	str	r3, [r7, #28]
      break;
 8007672:	e002      	b.n	800767a <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007674:	2320      	movs	r3, #32
 8007676:	61fb      	str	r3, [r7, #28]
      break;
 8007678:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	2b03      	cmp	r3, #3
 8007680:	d81d      	bhi.n	80076be <HAL_SAI_Init+0xae>
 8007682:	a201      	add	r2, pc, #4	; (adr r2, 8007688 <HAL_SAI_Init+0x78>)
 8007684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007688:	08007699 	.word	0x08007699
 800768c:	0800769f 	.word	0x0800769f
 8007690:	080076a7 	.word	0x080076a7
 8007694:	080076af 	.word	0x080076af
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 8007698:	2300      	movs	r3, #0
 800769a:	617b      	str	r3, [r7, #20]
      }
      break;
 800769c:	e010      	b.n	80076c0 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 800769e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076a2:	617b      	str	r3, [r7, #20]
      }
      break;
 80076a4:	e00c      	b.n	80076c0 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 80076a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80076aa:	617b      	str	r3, [r7, #20]
      }
      break;
 80076ac:	e008      	b.n	80076c0 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 80076ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80076b2:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80076b4:	69fb      	ldr	r3, [r7, #28]
 80076b6:	f043 0301 	orr.w	r3, r3, #1
 80076ba:	61fb      	str	r3, [r7, #28]
      }
      break;
 80076bc:	e000      	b.n	80076c0 <HAL_SAI_Init+0xb0>
  default:
    break;
 80076be:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a81      	ldr	r2, [pc, #516]	; (80078cc <HAL_SAI_Init+0x2bc>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d004      	beq.n	80076d4 <HAL_SAI_Init+0xc4>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a80      	ldr	r2, [pc, #512]	; (80078d0 <HAL_SAI_Init+0x2c0>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d103      	bne.n	80076dc <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 80076d4:	4a7f      	ldr	r2, [pc, #508]	; (80078d4 <HAL_SAI_Init+0x2c4>)
 80076d6:	69fb      	ldr	r3, [r7, #28]
 80076d8:	6013      	str	r3, [r2, #0]
 80076da:	e002      	b.n	80076e2 <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80076dc:	4a7e      	ldr	r2, [pc, #504]	; (80078d8 <HAL_SAI_Init+0x2c8>)
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	69db      	ldr	r3, [r3, #28]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d043      	beq.n	8007772 <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 80076ea:	2300      	movs	r3, #0
 80076ec:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a76      	ldr	r2, [pc, #472]	; (80078cc <HAL_SAI_Init+0x2bc>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d004      	beq.n	8007702 <HAL_SAI_Init+0xf2>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a74      	ldr	r2, [pc, #464]	; (80078d0 <HAL_SAI_Init+0x2c0>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d104      	bne.n	800770c <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007702:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007706:	f7ff fa8d 	bl	8006c24 <HAL_RCCEx_GetPeriphCLKFreq>
 800770a:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a72      	ldr	r2, [pc, #456]	; (80078dc <HAL_SAI_Init+0x2cc>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d004      	beq.n	8007720 <HAL_SAI_Init+0x110>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a71      	ldr	r2, [pc, #452]	; (80078e0 <HAL_SAI_Init+0x2d0>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d104      	bne.n	800772a <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8007720:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8007724:	f7ff fa7e 	bl	8006c24 <HAL_RCCEx_GetPeriphCLKFreq>
 8007728:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800772a:	693a      	ldr	r2, [r7, #16]
 800772c:	4613      	mov	r3, r2
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	4413      	add	r3, r2
 8007732:	005b      	lsls	r3, r3, #1
 8007734:	461a      	mov	r2, r3
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	69db      	ldr	r3, [r3, #28]
 800773a:	025b      	lsls	r3, r3, #9
 800773c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007740:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	4a67      	ldr	r2, [pc, #412]	; (80078e4 <HAL_SAI_Init+0x2d4>)
 8007746:	fba2 2303 	umull	r2, r3, r2, r3
 800774a:	08da      	lsrs	r2, r3, #3
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 8007750:	68f9      	ldr	r1, [r7, #12]
 8007752:	4b64      	ldr	r3, [pc, #400]	; (80078e4 <HAL_SAI_Init+0x2d4>)
 8007754:	fba3 2301 	umull	r2, r3, r3, r1
 8007758:	08da      	lsrs	r2, r3, #3
 800775a:	4613      	mov	r3, r2
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	4413      	add	r3, r2
 8007760:	005b      	lsls	r3, r3, #1
 8007762:	1aca      	subs	r2, r1, r3
 8007764:	2a08      	cmp	r2, #8
 8007766:	d904      	bls.n	8007772 <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6a1b      	ldr	r3, [r3, #32]
 800776c:	1c5a      	adds	r2, r3, #1
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d003      	beq.n	8007782 <HAL_SAI_Init+0x172>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	2b02      	cmp	r3, #2
 8007780:	d109      	bne.n	8007796 <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007786:	2b01      	cmp	r3, #1
 8007788:	d101      	bne.n	800778e <HAL_SAI_Init+0x17e>
 800778a:	2300      	movs	r3, #0
 800778c:	e001      	b.n	8007792 <HAL_SAI_Init+0x182>
 800778e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007792:	61bb      	str	r3, [r7, #24]
 8007794:	e008      	b.n	80077a8 <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800779a:	2b01      	cmp	r3, #1
 800779c:	d102      	bne.n	80077a4 <HAL_SAI_Init+0x194>
 800779e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077a2:	e000      	b.n	80077a6 <HAL_SAI_Init+0x196>
 80077a4:	2300      	movs	r3, #0
 80077a6:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	6819      	ldr	r1, [r3, #0]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	4b4d      	ldr	r3, [pc, #308]	; (80078e8 <HAL_SAI_Init+0x2d8>)
 80077b4:	400b      	ands	r3, r1
 80077b6:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	6819      	ldr	r1, [r3, #0]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	685a      	ldr	r2, [r3, #4]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077c6:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80077cc:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d2:	431a      	orrs	r2, r3
 80077d4:	69bb      	ldr	r3, [r7, #24]
 80077d6:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 80077e0:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	691b      	ldr	r3, [r3, #16]
 80077e6:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80077ec:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6a1b      	ldr	r3, [r3, #32]
 80077f2:	051b      	lsls	r3, r3, #20
 80077f4:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	430a      	orrs	r2, r1
 80077fc:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	6859      	ldr	r1, [r3, #4]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	4b38      	ldr	r3, [pc, #224]	; (80078ec <HAL_SAI_Init+0x2dc>)
 800780a:	400b      	ands	r3, r1
 800780c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	6859      	ldr	r1, [r3, #4]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	699a      	ldr	r2, [r3, #24]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800781c:	431a      	orrs	r2, r3
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007822:	431a      	orrs	r2, r3
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	430a      	orrs	r2, r1
 800782a:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	6899      	ldr	r1, [r3, #8]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681a      	ldr	r2, [r3, #0]
 8007836:	4b2e      	ldr	r3, [pc, #184]	; (80078f0 <HAL_SAI_Init+0x2e0>)
 8007838:	400b      	ands	r3, r1
 800783a:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	6899      	ldr	r1, [r3, #8]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007846:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800784c:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 8007852:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 8007858:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800785e:	3b01      	subs	r3, #1
 8007860:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 8007862:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	430a      	orrs	r2, r1
 800786a:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	68d9      	ldr	r1, [r3, #12]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	f24f 0320 	movw	r3, #61472	; 0xf020
 800787a:	400b      	ands	r3, r1
 800787c:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	68d9      	ldr	r1, [r3, #12]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800788c:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007892:	041b      	lsls	r3, r3, #16
 8007894:	431a      	orrs	r2, r3
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800789a:	3b01      	subs	r3, #1
 800789c:	021b      	lsls	r3, r3, #8
 800789e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	430a      	orrs	r2, r1
 80078a6:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2200      	movs	r2, #0
 80078ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2201      	movs	r2, #1
 80078b4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80078c0:	2300      	movs	r3, #0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3720      	adds	r7, #32
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop
 80078cc:	40015804 	.word	0x40015804
 80078d0:	40015824 	.word	0x40015824
 80078d4:	40015800 	.word	0x40015800
 80078d8:	40015c00 	.word	0x40015c00
 80078dc:	40015c04 	.word	0x40015c04
 80078e0:	40015c24 	.word	0x40015c24
 80078e4:	cccccccd 	.word	0xcccccccd
 80078e8:	ff05c010 	.word	0xff05c010
 80078ec:	ffff1ff0 	.word	0xffff1ff0
 80078f0:	fff88000 	.word	0xfff88000

080078f4 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80078f4:	b490      	push	{r4, r7}
 80078f6:	b084      	sub	sp, #16
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 80078fc:	4b16      	ldr	r3, [pc, #88]	; (8007958 <SAI_Disable+0x64>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a16      	ldr	r2, [pc, #88]	; (800795c <SAI_Disable+0x68>)
 8007902:	fba2 2303 	umull	r2, r3, r2, r3
 8007906:	0b1b      	lsrs	r3, r3, #12
 8007908:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 800790a:	2300      	movs	r3, #0
 800790c:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	681a      	ldr	r2, [r3, #0]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800791c:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800791e:	4623      	mov	r3, r4
 8007920:	1e5c      	subs	r4, r3, #1
 8007922:	2b00      	cmp	r3, #0
 8007924:	d10a      	bne.n	800793c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800792c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8007936:	2303      	movs	r3, #3
 8007938:	73fb      	strb	r3, [r7, #15]
      break;
 800793a:	e006      	b.n	800794a <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007946:	2b00      	cmp	r3, #0
 8007948:	d1e9      	bne.n	800791e <SAI_Disable+0x2a>

  return status;
 800794a:	7bfb      	ldrb	r3, [r7, #15]
}
 800794c:	4618      	mov	r0, r3
 800794e:	3710      	adds	r7, #16
 8007950:	46bd      	mov	sp, r7
 8007952:	bc90      	pop	{r4, r7}
 8007954:	4770      	bx	lr
 8007956:	bf00      	nop
 8007958:	20000018 	.word	0x20000018
 800795c:	95cbec1b 	.word	0x95cbec1b

08007960 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d101      	bne.n	8007972 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800796e:	2301      	movs	r3, #1
 8007970:	e022      	b.n	80079b8 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007978:	b2db      	uxtb	r3, r3
 800797a:	2b00      	cmp	r3, #0
 800797c:	d105      	bne.n	800798a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f7fa fd31 	bl	80023ec <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2203      	movs	r2, #3
 800798e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 f814 	bl	80079c0 <HAL_SD_InitCard>
 8007998:	4603      	mov	r3, r0
 800799a:	2b00      	cmp	r3, #0
 800799c:	d001      	beq.n	80079a2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800799e:	2301      	movs	r3, #1
 80079a0:	e00a      	b.n	80079b8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2201      	movs	r2, #1
 80079b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80079b6:	2300      	movs	r3, #0
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3708      	adds	r7, #8
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80079c0:	b5b0      	push	{r4, r5, r7, lr}
 80079c2:	b08e      	sub	sp, #56	; 0x38
 80079c4:	af04      	add	r7, sp, #16
 80079c6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80079c8:	2300      	movs	r3, #0
 80079ca:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80079cc:	2300      	movs	r3, #0
 80079ce:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80079d0:	2300      	movs	r3, #0
 80079d2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80079d4:	2300      	movs	r3, #0
 80079d6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80079d8:	2300      	movs	r3, #0
 80079da:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80079dc:	2376      	movs	r3, #118	; 0x76
 80079de:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681d      	ldr	r5, [r3, #0]
 80079e4:	466c      	mov	r4, sp
 80079e6:	f107 0314 	add.w	r3, r7, #20
 80079ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80079ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80079f2:	f107 0308 	add.w	r3, r7, #8
 80079f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80079f8:	4628      	mov	r0, r5
 80079fa:	f002 ff51 	bl	800a8a0 <SDMMC_Init>
 80079fe:	4603      	mov	r3, r0
 8007a00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8007a04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d001      	beq.n	8007a10 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	e03b      	b.n	8007a88 <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	685a      	ldr	r2, [r3, #4]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a1e:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4618      	mov	r0, r3
 8007a26:	f002 ff74 	bl	800a912 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	685a      	ldr	r2, [r3, #4]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a38:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 fde6 	bl	800860c <SD_PowerON>
 8007a40:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a42:	6a3b      	ldr	r3, [r7, #32]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d00b      	beq.n	8007a60 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a54:	6a3b      	ldr	r3, [r7, #32]
 8007a56:	431a      	orrs	r2, r3
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	e013      	b.n	8007a88 <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 fd05 	bl	8008470 <SD_InitCard>
 8007a66:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a68:	6a3b      	ldr	r3, [r7, #32]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d00b      	beq.n	8007a86 <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2201      	movs	r2, #1
 8007a72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a7a:	6a3b      	ldr	r3, [r7, #32]
 8007a7c:	431a      	orrs	r2, r3
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	e000      	b.n	8007a88 <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 8007a86:	2300      	movs	r3, #0
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3728      	adds	r7, #40	; 0x28
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bdb0      	pop	{r4, r5, r7, pc}

08007a90 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b08c      	sub	sp, #48	; 0x30
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	60f8      	str	r0, [r7, #12]
 8007a98:	60b9      	str	r1, [r7, #8]
 8007a9a:	607a      	str	r2, [r7, #4]
 8007a9c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d107      	bne.n	8007ab8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aac:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	e0cc      	b.n	8007c52 <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	f040 80c5 	bne.w	8007c50 <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007acc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	441a      	add	r2, r3
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d907      	bls.n	8007aea <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ade:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	e0b3      	b.n	8007c52 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2203      	movs	r2, #3
 8007aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	2200      	movs	r2, #0
 8007af8:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8007b08:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b0e:	4a53      	ldr	r2, [pc, #332]	; (8007c5c <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8007b10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b16:	4a52      	ldr	r2, [pc, #328]	; (8007c60 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8007b18:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b1e:	2200      	movs	r2, #0
 8007b20:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	3380      	adds	r3, #128	; 0x80
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	68ba      	ldr	r2, [r7, #8]
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	025b      	lsls	r3, r3, #9
 8007b34:	089b      	lsrs	r3, r3, #2
 8007b36:	f7fc fcb7 	bl	80044a8 <HAL_DMA_Start_IT>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d017      	beq.n	8007b70 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8007b4e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a43      	ldr	r2, [pc, #268]	; (8007c64 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8007b56:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b5c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2201      	movs	r2, #1
 8007b68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e070      	b.n	8007c52 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f042 0208 	orr.w	r2, r2, #8
 8007b7e:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d002      	beq.n	8007b8e <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 8007b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b8a:	025b      	lsls	r3, r3, #9
 8007b8c:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007b96:	4618      	mov	r0, r3
 8007b98:	f002 ff4e 	bl	800aa38 <SDMMC_CmdBlockLength>
 8007b9c:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8007b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d00f      	beq.n	8007bc4 <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a2e      	ldr	r2, [pc, #184]	; (8007c64 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8007baa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb2:	431a      	orrs	r2, r3
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	e046      	b.n	8007c52 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8007bc8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	025b      	lsls	r3, r3, #9
 8007bce:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007bd0:	2390      	movs	r3, #144	; 0x90
 8007bd2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007bd4:	2302      	movs	r3, #2
 8007bd6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f107 0210 	add.w	r2, r7, #16
 8007be8:	4611      	mov	r1, r2
 8007bea:	4618      	mov	r0, r3
 8007bec:	f002 fef8 	bl	800a9e0 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d90a      	bls.n	8007c0c <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2282      	movs	r2, #130	; 0x82
 8007bfa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c02:	4618      	mov	r0, r3
 8007c04:	f002 ff5c 	bl	800aac0 <SDMMC_CmdReadMultiBlock>
 8007c08:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007c0a:	e009      	b.n	8007c20 <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2281      	movs	r2, #129	; 0x81
 8007c10:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f002 ff2f 	bl	800aa7c <SDMMC_CmdReadSingleBlock>
 8007c1e:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8007c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d012      	beq.n	8007c4c <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a0e      	ldr	r2, [pc, #56]	; (8007c64 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8007c2c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c34:	431a      	orrs	r2, r3
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2200      	movs	r2, #0
 8007c46:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	e002      	b.n	8007c52 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	e000      	b.n	8007c52 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
  }
  else
  {
    return HAL_BUSY;
 8007c50:	2302      	movs	r3, #2
  }
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3730      	adds	r7, #48	; 0x30
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	0800835b 	.word	0x0800835b
 8007c60:	080083cd 	.word	0x080083cd
 8007c64:	004005ff 	.word	0x004005ff

08007c68 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b08c      	sub	sp, #48	; 0x30
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	60b9      	str	r1, [r7, #8]
 8007c72:	607a      	str	r2, [r7, #4]
 8007c74:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d107      	bne.n	8007c90 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c84:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	e0cf      	b.n	8007e30 <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	f040 80c8 	bne.w	8007e2e <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007ca4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	441a      	add	r2, r3
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d907      	bls.n	8007cc2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	e0b6      	b.n	8007e30 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2203      	movs	r2, #3
 8007cc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f042 021a 	orr.w	r2, r2, #26
 8007ce0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ce6:	4a54      	ldr	r2, [pc, #336]	; (8007e38 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8007ce8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cee:	4a53      	ldr	r2, [pc, #332]	; (8007e3c <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8007cf0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d002      	beq.n	8007d08 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8007d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d04:	025b      	lsls	r3, r3, #9
 8007d06:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007d10:	4618      	mov	r0, r3
 8007d12:	f002 fe91 	bl	800aa38 <SDMMC_CmdBlockLength>
 8007d16:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d00f      	beq.n	8007d3e <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a47      	ldr	r2, [pc, #284]	; (8007e40 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8007d24:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d2c:	431a      	orrs	r2, r3
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2201      	movs	r2, #1
 8007d36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	e078      	b.n	8007e30 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d90a      	bls.n	8007d5a <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	22a0      	movs	r2, #160	; 0xa0
 8007d48:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d50:	4618      	mov	r0, r3
 8007d52:	f002 fef9 	bl	800ab48 <SDMMC_CmdWriteMultiBlock>
 8007d56:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007d58:	e009      	b.n	8007d6e <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2290      	movs	r2, #144	; 0x90
 8007d5e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d66:	4618      	mov	r0, r3
 8007d68:	f002 fecc 	bl	800ab04 <SDMMC_CmdWriteSingleBlock>
 8007d6c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d012      	beq.n	8007d9a <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a31      	ldr	r2, [pc, #196]	; (8007e40 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8007d7a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d82:	431a      	orrs	r2, r3
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2200      	movs	r2, #0
 8007d94:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007d96:	2301      	movs	r3, #1
 8007d98:	e04a      	b.n	8007e30 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f042 0208 	orr.w	r2, r2, #8
 8007da8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007dae:	68b9      	ldr	r1, [r7, #8]
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	3380      	adds	r3, #128	; 0x80
 8007db6:	461a      	mov	r2, r3
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	025b      	lsls	r3, r3, #9
 8007dbc:	089b      	lsrs	r3, r3, #2
 8007dbe:	f7fc fb73 	bl	80044a8 <HAL_DMA_Start_IT>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d01a      	beq.n	8007dfe <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f022 021a 	bic.w	r2, r2, #26
 8007dd6:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a18      	ldr	r2, [pc, #96]	; (8007e40 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8007dde:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2201      	movs	r2, #1
 8007df0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2200      	movs	r2, #0
 8007df8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	e018      	b.n	8007e30 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8007e02:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	025b      	lsls	r3, r3, #9
 8007e08:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007e0a:	2390      	movs	r3, #144	; 0x90
 8007e0c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007e12:	2300      	movs	r3, #0
 8007e14:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8007e16:	2301      	movs	r3, #1
 8007e18:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f107 0210 	add.w	r2, r7, #16
 8007e22:	4611      	mov	r1, r2
 8007e24:	4618      	mov	r0, r3
 8007e26:	f002 fddb 	bl	800a9e0 <SDMMC_ConfigData>

      return HAL_OK;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	e000      	b.n	8007e30 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
  }
  else
  {
    return HAL_BUSY;
 8007e2e:	2302      	movs	r3, #2
  }
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3730      	adds	r7, #48	; 0x30
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}
 8007e38:	08008331 	.word	0x08008331
 8007e3c:	080083cd 	.word	0x080083cd
 8007e40:	004005ff 	.word	0x004005ff

08007e44 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b083      	sub	sp, #12
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007e4c:	bf00      	nop
 8007e4e:	370c      	adds	r7, #12
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr

08007e58 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b083      	sub	sp, #12
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e66:	0f9b      	lsrs	r3, r3, #30
 8007e68:	b2da      	uxtb	r2, r3
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e72:	0e9b      	lsrs	r3, r3, #26
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	f003 030f 	and.w	r3, r3, #15
 8007e7a:	b2da      	uxtb	r2, r3
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e84:	0e1b      	lsrs	r3, r3, #24
 8007e86:	b2db      	uxtb	r3, r3
 8007e88:	f003 0303 	and.w	r3, r3, #3
 8007e8c:	b2da      	uxtb	r2, r3
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e96:	0c1b      	lsrs	r3, r3, #16
 8007e98:	b2da      	uxtb	r2, r3
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ea2:	0a1b      	lsrs	r3, r3, #8
 8007ea4:	b2da      	uxtb	r2, r3
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007eae:	b2da      	uxtb	r2, r3
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007eb8:	0d1b      	lsrs	r3, r3, #20
 8007eba:	b29a      	uxth	r2, r3
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ec4:	0c1b      	lsrs	r3, r3, #16
 8007ec6:	b2db      	uxtb	r3, r3
 8007ec8:	f003 030f 	and.w	r3, r3, #15
 8007ecc:	b2da      	uxtb	r2, r3
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ed6:	0bdb      	lsrs	r3, r3, #15
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	f003 0301 	and.w	r3, r3, #1
 8007ede:	b2da      	uxtb	r2, r3
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ee8:	0b9b      	lsrs	r3, r3, #14
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	f003 0301 	and.w	r3, r3, #1
 8007ef0:	b2da      	uxtb	r2, r3
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007efa:	0b5b      	lsrs	r3, r3, #13
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	f003 0301 	and.w	r3, r3, #1
 8007f02:	b2da      	uxtb	r2, r3
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f0c:	0b1b      	lsrs	r3, r3, #12
 8007f0e:	b2db      	uxtb	r3, r3
 8007f10:	f003 0301 	and.w	r3, r3, #1
 8007f14:	b2da      	uxtb	r2, r3
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d163      	bne.n	8007ff0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f2c:	009a      	lsls	r2, r3, #2
 8007f2e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007f32:	4013      	ands	r3, r2
 8007f34:	687a      	ldr	r2, [r7, #4]
 8007f36:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007f38:	0f92      	lsrs	r2, r2, #30
 8007f3a:	431a      	orrs	r2, r3
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f44:	0edb      	lsrs	r3, r3, #27
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	f003 0307 	and.w	r3, r3, #7
 8007f4c:	b2da      	uxtb	r2, r3
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f56:	0e1b      	lsrs	r3, r3, #24
 8007f58:	b2db      	uxtb	r3, r3
 8007f5a:	f003 0307 	and.w	r3, r3, #7
 8007f5e:	b2da      	uxtb	r2, r3
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f68:	0d5b      	lsrs	r3, r3, #21
 8007f6a:	b2db      	uxtb	r3, r3
 8007f6c:	f003 0307 	and.w	r3, r3, #7
 8007f70:	b2da      	uxtb	r2, r3
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f7a:	0c9b      	lsrs	r3, r3, #18
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	f003 0307 	and.w	r3, r3, #7
 8007f82:	b2da      	uxtb	r2, r3
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f8c:	0bdb      	lsrs	r3, r3, #15
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	f003 0307 	and.w	r3, r3, #7
 8007f94:	b2da      	uxtb	r2, r3
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	691b      	ldr	r3, [r3, #16]
 8007f9e:	1c5a      	adds	r2, r3, #1
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	7e1b      	ldrb	r3, [r3, #24]
 8007fa8:	b2db      	uxtb	r3, r3
 8007faa:	f003 0307 	and.w	r3, r3, #7
 8007fae:	3302      	adds	r3, #2
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8007fb6:	687a      	ldr	r2, [r7, #4]
 8007fb8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007fba:	fb02 f203 	mul.w	r2, r2, r3
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	7a1b      	ldrb	r3, [r3, #8]
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	f003 030f 	and.w	r3, r3, #15
 8007fcc:	2201      	movs	r2, #1
 8007fce:	409a      	lsls	r2, r3
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007fdc:	0a52      	lsrs	r2, r2, #9
 8007fde:	fb02 f203 	mul.w	r2, r2, r3
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fec:	661a      	str	r2, [r3, #96]	; 0x60
 8007fee:	e031      	b.n	8008054 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	d11d      	bne.n	8008034 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ffc:	041b      	lsls	r3, r3, #16
 8007ffe:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008006:	0c1b      	lsrs	r3, r3, #16
 8008008:	431a      	orrs	r2, r3
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	691b      	ldr	r3, [r3, #16]
 8008012:	3301      	adds	r3, #1
 8008014:	029a      	lsls	r2, r3, #10
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008028:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	661a      	str	r2, [r3, #96]	; 0x60
 8008032:	e00f      	b.n	8008054 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a58      	ldr	r2, [pc, #352]	; (800819c <HAL_SD_GetCardCSD+0x344>)
 800803a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008040:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2201      	movs	r2, #1
 800804c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008050:	2301      	movs	r3, #1
 8008052:	e09d      	b.n	8008190 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008058:	0b9b      	lsrs	r3, r3, #14
 800805a:	b2db      	uxtb	r3, r3
 800805c:	f003 0301 	and.w	r3, r3, #1
 8008060:	b2da      	uxtb	r2, r3
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800806a:	09db      	lsrs	r3, r3, #7
 800806c:	b2db      	uxtb	r3, r3
 800806e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008072:	b2da      	uxtb	r2, r3
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800807c:	b2db      	uxtb	r3, r3
 800807e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008082:	b2da      	uxtb	r2, r3
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800808c:	0fdb      	lsrs	r3, r3, #31
 800808e:	b2da      	uxtb	r2, r3
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008098:	0f5b      	lsrs	r3, r3, #29
 800809a:	b2db      	uxtb	r3, r3
 800809c:	f003 0303 	and.w	r3, r3, #3
 80080a0:	b2da      	uxtb	r2, r3
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080aa:	0e9b      	lsrs	r3, r3, #26
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	f003 0307 	and.w	r3, r3, #7
 80080b2:	b2da      	uxtb	r2, r3
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080bc:	0d9b      	lsrs	r3, r3, #22
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	f003 030f 	and.w	r3, r3, #15
 80080c4:	b2da      	uxtb	r2, r3
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ce:	0d5b      	lsrs	r3, r3, #21
 80080d0:	b2db      	uxtb	r3, r3
 80080d2:	f003 0301 	and.w	r3, r3, #1
 80080d6:	b2da      	uxtb	r2, r3
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	2200      	movs	r2, #0
 80080e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ea:	0c1b      	lsrs	r3, r3, #16
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	f003 0301 	and.w	r3, r3, #1
 80080f2:	b2da      	uxtb	r2, r3
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080fe:	0bdb      	lsrs	r3, r3, #15
 8008100:	b2db      	uxtb	r3, r3
 8008102:	f003 0301 	and.w	r3, r3, #1
 8008106:	b2da      	uxtb	r2, r3
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008112:	0b9b      	lsrs	r3, r3, #14
 8008114:	b2db      	uxtb	r3, r3
 8008116:	f003 0301 	and.w	r3, r3, #1
 800811a:	b2da      	uxtb	r2, r3
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008126:	0b5b      	lsrs	r3, r3, #13
 8008128:	b2db      	uxtb	r3, r3
 800812a:	f003 0301 	and.w	r3, r3, #1
 800812e:	b2da      	uxtb	r2, r3
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800813a:	0b1b      	lsrs	r3, r3, #12
 800813c:	b2db      	uxtb	r3, r3
 800813e:	f003 0301 	and.w	r3, r3, #1
 8008142:	b2da      	uxtb	r2, r3
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800814e:	0a9b      	lsrs	r3, r3, #10
 8008150:	b2db      	uxtb	r3, r3
 8008152:	f003 0303 	and.w	r3, r3, #3
 8008156:	b2da      	uxtb	r2, r3
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008162:	0a1b      	lsrs	r3, r3, #8
 8008164:	b2db      	uxtb	r3, r3
 8008166:	f003 0303 	and.w	r3, r3, #3
 800816a:	b2da      	uxtb	r2, r3
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008176:	085b      	lsrs	r3, r3, #1
 8008178:	b2db      	uxtb	r3, r3
 800817a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800817e:	b2da      	uxtb	r2, r3
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	2201      	movs	r2, #1
 800818a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800818e:	2300      	movs	r3, #0
}
 8008190:	4618      	mov	r0, r3
 8008192:	370c      	adds	r7, #12
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr
 800819c:	004005ff 	.word	0x004005ff

080081a0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b083      	sub	sp, #12
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80081ea:	2300      	movs	r3, #0
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	370c      	adds	r7, #12
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr

080081f8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80081f8:	b5b0      	push	{r4, r5, r7, lr}
 80081fa:	b08e      	sub	sp, #56	; 0x38
 80081fc:	af04      	add	r7, sp, #16
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2203      	movs	r2, #3
 8008206:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800820e:	2b03      	cmp	r3, #3
 8008210:	d02e      	beq.n	8008270 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008218:	d106      	bne.n	8008228 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800821e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	639a      	str	r2, [r3, #56]	; 0x38
 8008226:	e029      	b.n	800827c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800822e:	d10a      	bne.n	8008246 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 faa1 	bl	8008778 <SD_WideBus_Enable>
 8008236:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800823c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823e:	431a      	orrs	r2, r3
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	639a      	str	r2, [r3, #56]	; 0x38
 8008244:	e01a      	b.n	800827c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d10a      	bne.n	8008262 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 fade 	bl	800880e <SD_WideBus_Disable>
 8008252:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825a:	431a      	orrs	r2, r3
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	639a      	str	r2, [r3, #56]	; 0x38
 8008260:	e00c      	b.n	800827c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008266:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	639a      	str	r2, [r3, #56]	; 0x38
 800826e:	e005      	b.n	800827c <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008274:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008280:	2b00      	cmp	r3, #0
 8008282:	d009      	beq.n	8008298 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a18      	ldr	r2, [pc, #96]	; (80082ec <HAL_SD_ConfigWideBusOperation+0xf4>)
 800828a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2201      	movs	r2, #1
 8008290:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008294:	2301      	movs	r3, #1
 8008296:	e024      	b.n	80082e2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	689b      	ldr	r3, [r3, #8]
 80082a2:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	68db      	ldr	r3, [r3, #12]
 80082a8:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	695b      	ldr	r3, [r3, #20]
 80082b2:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	699b      	ldr	r3, [r3, #24]
 80082b8:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681d      	ldr	r5, [r3, #0]
 80082be:	466c      	mov	r4, sp
 80082c0:	f107 0318 	add.w	r3, r7, #24
 80082c4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80082c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80082cc:	f107 030c 	add.w	r3, r7, #12
 80082d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80082d2:	4628      	mov	r0, r5
 80082d4:	f002 fae4 	bl	800a8a0 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2201      	movs	r2, #1
 80082dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80082e0:	2300      	movs	r3, #0
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3728      	adds	r7, #40	; 0x28
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bdb0      	pop	{r4, r5, r7, pc}
 80082ea:	bf00      	nop
 80082ec:	004005ff 	.word	0x004005ff

080082f0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b086      	sub	sp, #24
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80082f8:	2300      	movs	r3, #0
 80082fa:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80082fc:	f107 030c 	add.w	r3, r7, #12
 8008300:	4619      	mov	r1, r3
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 fa10 	bl	8008728 <SD_SendStatus>
 8008308:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d005      	beq.n	800831c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	431a      	orrs	r2, r3
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	0a5b      	lsrs	r3, r3, #9
 8008320:	f003 030f 	and.w	r3, r3, #15
 8008324:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008326:	693b      	ldr	r3, [r7, #16]
}
 8008328:	4618      	mov	r0, r3
 800832a:	3718      	adds	r7, #24
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008330:	b480      	push	{r7}
 8008332:	b085      	sub	sp, #20
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800833c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800834c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800834e:	bf00      	nop
 8008350:	3714      	adds	r7, #20
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr

0800835a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800835a:	b580      	push	{r7, lr}
 800835c:	b084      	sub	sp, #16
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008366:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800836c:	2b82      	cmp	r3, #130	; 0x82
 800836e:	d111      	bne.n	8008394 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4618      	mov	r0, r3
 8008376:	f002 fc09 	bl	800ab8c <SDMMC_CmdStopTransfer>
 800837a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d008      	beq.n	8008394 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	431a      	orrs	r2, r3
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800838e:	68f8      	ldr	r0, [r7, #12]
 8008390:	f7ff fd58 	bl	8007e44 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f022 0208 	bic.w	r2, r2, #8
 80083a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f240 523a 	movw	r2, #1338	; 0x53a
 80083ac:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2201      	movs	r2, #1
 80083b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2200      	movs	r2, #0
 80083ba:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80083bc:	68f8      	ldr	r0, [r7, #12]
 80083be:	f003 f84f 	bl	800b460 <HAL_SD_RxCpltCallback>
#endif
}
 80083c2:	bf00      	nop
 80083c4:	3710      	adds	r7, #16
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
	...

080083cc <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b086      	sub	sp, #24
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083d8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f7fc f8c4 	bl	8004568 <HAL_DMA_GetError>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b02      	cmp	r3, #2
 80083e4:	d03e      	beq.n	8008464 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083ec:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083f4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d002      	beq.n	8008402 <SD_DMAError+0x36>
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2b01      	cmp	r3, #1
 8008400:	d12d      	bne.n	800845e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a19      	ldr	r2, [pc, #100]	; (800846c <SD_DMAError+0xa0>)
 8008408:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008418:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800841e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8008426:	6978      	ldr	r0, [r7, #20]
 8008428:	f7ff ff62 	bl	80082f0 <HAL_SD_GetCardState>
 800842c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	2b06      	cmp	r3, #6
 8008432:	d002      	beq.n	800843a <SD_DMAError+0x6e>
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	2b05      	cmp	r3, #5
 8008438:	d10a      	bne.n	8008450 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4618      	mov	r0, r3
 8008440:	f002 fba4 	bl	800ab8c <SDMMC_CmdStopTransfer>
 8008444:	4602      	mov	r2, r0
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800844a:	431a      	orrs	r2, r3
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	2201      	movs	r2, #1
 8008454:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	2200      	movs	r2, #0
 800845c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800845e:	6978      	ldr	r0, [r7, #20]
 8008460:	f7ff fcf0 	bl	8007e44 <HAL_SD_ErrorCallback>
#endif
  }
}
 8008464:	bf00      	nop
 8008466:	3718      	adds	r7, #24
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}
 800846c:	004005ff 	.word	0x004005ff

08008470 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008470:	b5b0      	push	{r4, r5, r7, lr}
 8008472:	b094      	sub	sp, #80	; 0x50
 8008474:	af04      	add	r7, sp, #16
 8008476:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008478:	2301      	movs	r3, #1
 800847a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4618      	mov	r0, r3
 8008482:	f002 fa55 	bl	800a930 <SDMMC_GetPowerState>
 8008486:	4603      	mov	r3, r0
 8008488:	2b00      	cmp	r3, #0
 800848a:	d102      	bne.n	8008492 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800848c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008490:	e0b7      	b.n	8008602 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008496:	2b03      	cmp	r3, #3
 8008498:	d02f      	beq.n	80084fa <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4618      	mov	r0, r3
 80084a0:	f002 fc7f 	bl	800ada2 <SDMMC_CmdSendCID>
 80084a4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80084a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d001      	beq.n	80084b0 <SD_InitCard+0x40>
    {
      return errorstate;
 80084ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084ae:	e0a8      	b.n	8008602 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	2100      	movs	r1, #0
 80084b6:	4618      	mov	r0, r3
 80084b8:	f002 fa7f 	bl	800a9ba <SDMMC_GetResponse>
 80084bc:	4602      	mov	r2, r0
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	2104      	movs	r1, #4
 80084c8:	4618      	mov	r0, r3
 80084ca:	f002 fa76 	bl	800a9ba <SDMMC_GetResponse>
 80084ce:	4602      	mov	r2, r0
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	2108      	movs	r1, #8
 80084da:	4618      	mov	r0, r3
 80084dc:	f002 fa6d 	bl	800a9ba <SDMMC_GetResponse>
 80084e0:	4602      	mov	r2, r0
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	210c      	movs	r1, #12
 80084ec:	4618      	mov	r0, r3
 80084ee:	f002 fa64 	bl	800a9ba <SDMMC_GetResponse>
 80084f2:	4602      	mov	r2, r0
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084fe:	2b03      	cmp	r3, #3
 8008500:	d00d      	beq.n	800851e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f107 020e 	add.w	r2, r7, #14
 800850a:	4611      	mov	r1, r2
 800850c:	4618      	mov	r0, r3
 800850e:	f002 fc85 	bl	800ae1c <SDMMC_CmdSetRelAdd>
 8008512:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008516:	2b00      	cmp	r3, #0
 8008518:	d001      	beq.n	800851e <SD_InitCard+0xae>
    {
      return errorstate;
 800851a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800851c:	e071      	b.n	8008602 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008522:	2b03      	cmp	r3, #3
 8008524:	d036      	beq.n	8008594 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008526:	89fb      	ldrh	r3, [r7, #14]
 8008528:	461a      	mov	r2, r3
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008536:	041b      	lsls	r3, r3, #16
 8008538:	4619      	mov	r1, r3
 800853a:	4610      	mov	r0, r2
 800853c:	f002 fc4f 	bl	800adde <SDMMC_CmdSendCSD>
 8008540:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008544:	2b00      	cmp	r3, #0
 8008546:	d001      	beq.n	800854c <SD_InitCard+0xdc>
    {
      return errorstate;
 8008548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800854a:	e05a      	b.n	8008602 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	2100      	movs	r1, #0
 8008552:	4618      	mov	r0, r3
 8008554:	f002 fa31 	bl	800a9ba <SDMMC_GetResponse>
 8008558:	4602      	mov	r2, r0
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2104      	movs	r1, #4
 8008564:	4618      	mov	r0, r3
 8008566:	f002 fa28 	bl	800a9ba <SDMMC_GetResponse>
 800856a:	4602      	mov	r2, r0
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	2108      	movs	r1, #8
 8008576:	4618      	mov	r0, r3
 8008578:	f002 fa1f 	bl	800a9ba <SDMMC_GetResponse>
 800857c:	4602      	mov	r2, r0
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	210c      	movs	r1, #12
 8008588:	4618      	mov	r0, r3
 800858a:	f002 fa16 	bl	800a9ba <SDMMC_GetResponse>
 800858e:	4602      	mov	r2, r0
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	2104      	movs	r1, #4
 800859a:	4618      	mov	r0, r3
 800859c:	f002 fa0d 	bl	800a9ba <SDMMC_GetResponse>
 80085a0:	4603      	mov	r3, r0
 80085a2:	0d1a      	lsrs	r2, r3, #20
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80085a8:	f107 0310 	add.w	r3, r7, #16
 80085ac:	4619      	mov	r1, r3
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f7ff fc52 	bl	8007e58 <HAL_SD_GetCardCSD>
 80085b4:	4603      	mov	r3, r0
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d002      	beq.n	80085c0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80085ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80085be:	e020      	b.n	8008602 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6819      	ldr	r1, [r3, #0]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085c8:	041b      	lsls	r3, r3, #16
 80085ca:	f04f 0400 	mov.w	r4, #0
 80085ce:	461a      	mov	r2, r3
 80085d0:	4623      	mov	r3, r4
 80085d2:	4608      	mov	r0, r1
 80085d4:	f002 fafc 	bl	800abd0 <SDMMC_CmdSelDesel>
 80085d8:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80085da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d001      	beq.n	80085e4 <SD_InitCard+0x174>
  {
    return errorstate;
 80085e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085e2:	e00e      	b.n	8008602 <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681d      	ldr	r5, [r3, #0]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	466c      	mov	r4, sp
 80085ec:	f103 0210 	add.w	r2, r3, #16
 80085f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80085f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80085f6:	3304      	adds	r3, #4
 80085f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80085fa:	4628      	mov	r0, r5
 80085fc:	f002 f950 	bl	800a8a0 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008600:	2300      	movs	r3, #0
}
 8008602:	4618      	mov	r0, r3
 8008604:	3740      	adds	r7, #64	; 0x40
 8008606:	46bd      	mov	sp, r7
 8008608:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800860c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b086      	sub	sp, #24
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008614:	2300      	movs	r3, #0
 8008616:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008618:	2300      	movs	r3, #0
 800861a:	617b      	str	r3, [r7, #20]
 800861c:	2300      	movs	r3, #0
 800861e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4618      	mov	r0, r3
 8008626:	f002 faf6 	bl	800ac16 <SDMMC_CmdGoIdleState>
 800862a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d001      	beq.n	8008636 <SD_PowerON+0x2a>
  {
    return errorstate;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	e072      	b.n	800871c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4618      	mov	r0, r3
 800863c:	f002 fb09 	bl	800ac52 <SDMMC_CmdOperCond>
 8008640:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d00d      	beq.n	8008664 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2200      	movs	r2, #0
 800864c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4618      	mov	r0, r3
 8008654:	f002 fadf 	bl	800ac16 <SDMMC_CmdGoIdleState>
 8008658:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d004      	beq.n	800866a <SD_PowerON+0x5e>
    {
      return errorstate;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	e05b      	b.n	800871c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2201      	movs	r2, #1
 8008668:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800866e:	2b01      	cmp	r3, #1
 8008670:	d137      	bne.n	80086e2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	2100      	movs	r1, #0
 8008678:	4618      	mov	r0, r3
 800867a:	f002 fb09 	bl	800ac90 <SDMMC_CmdAppCommand>
 800867e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d02d      	beq.n	80086e2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008686:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800868a:	e047      	b.n	800871c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	2100      	movs	r1, #0
 8008692:	4618      	mov	r0, r3
 8008694:	f002 fafc 	bl	800ac90 <SDMMC_CmdAppCommand>
 8008698:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d001      	beq.n	80086a4 <SD_PowerON+0x98>
    {
      return errorstate;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	e03b      	b.n	800871c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	491e      	ldr	r1, [pc, #120]	; (8008724 <SD_PowerON+0x118>)
 80086aa:	4618      	mov	r0, r3
 80086ac:	f002 fb12 	bl	800acd4 <SDMMC_CmdAppOperCommand>
 80086b0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d002      	beq.n	80086be <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80086b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80086bc:	e02e      	b.n	800871c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	2100      	movs	r1, #0
 80086c4:	4618      	mov	r0, r3
 80086c6:	f002 f978 	bl	800a9ba <SDMMC_GetResponse>
 80086ca:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	0fdb      	lsrs	r3, r3, #31
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d101      	bne.n	80086d8 <SD_PowerON+0xcc>
 80086d4:	2301      	movs	r3, #1
 80086d6:	e000      	b.n	80086da <SD_PowerON+0xce>
 80086d8:	2300      	movs	r3, #0
 80086da:	613b      	str	r3, [r7, #16]

    count++;
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	3301      	adds	r3, #1
 80086e0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d802      	bhi.n	80086f2 <SD_PowerON+0xe6>
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d0cc      	beq.n	800868c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d902      	bls.n	8008702 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80086fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008700:	e00c      	b.n	800871c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008708:	2b00      	cmp	r3, #0
 800870a:	d003      	beq.n	8008714 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2201      	movs	r2, #1
 8008710:	645a      	str	r2, [r3, #68]	; 0x44
 8008712:	e002      	b.n	800871a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2200      	movs	r2, #0
 8008718:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800871a:	2300      	movs	r3, #0
}
 800871c:	4618      	mov	r0, r3
 800871e:	3718      	adds	r7, #24
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}
 8008724:	c1100000 	.word	0xc1100000

08008728 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b084      	sub	sp, #16
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d102      	bne.n	800873e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008738:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800873c:	e018      	b.n	8008770 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681a      	ldr	r2, [r3, #0]
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008746:	041b      	lsls	r3, r3, #16
 8008748:	4619      	mov	r1, r3
 800874a:	4610      	mov	r0, r2
 800874c:	f002 fb87 	bl	800ae5e <SDMMC_CmdSendStatus>
 8008750:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d001      	beq.n	800875c <SD_SendStatus+0x34>
  {
    return errorstate;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	e009      	b.n	8008770 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	2100      	movs	r1, #0
 8008762:	4618      	mov	r0, r3
 8008764:	f002 f929 	bl	800a9ba <SDMMC_GetResponse>
 8008768:	4602      	mov	r2, r0
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800876e:	2300      	movs	r3, #0
}
 8008770:	4618      	mov	r0, r3
 8008772:	3710      	adds	r7, #16
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}

08008778 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b086      	sub	sp, #24
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008780:	2300      	movs	r3, #0
 8008782:	60fb      	str	r3, [r7, #12]
 8008784:	2300      	movs	r3, #0
 8008786:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	2100      	movs	r1, #0
 800878e:	4618      	mov	r0, r3
 8008790:	f002 f913 	bl	800a9ba <SDMMC_GetResponse>
 8008794:	4603      	mov	r3, r0
 8008796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800879a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800879e:	d102      	bne.n	80087a6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80087a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80087a4:	e02f      	b.n	8008806 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80087a6:	f107 030c 	add.w	r3, r7, #12
 80087aa:	4619      	mov	r1, r3
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 f879 	bl	80088a4 <SD_FindSCR>
 80087b2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d001      	beq.n	80087be <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	e023      	b.n	8008806 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d01c      	beq.n	8008802 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087d0:	041b      	lsls	r3, r3, #16
 80087d2:	4619      	mov	r1, r3
 80087d4:	4610      	mov	r0, r2
 80087d6:	f002 fa5b 	bl	800ac90 <SDMMC_CmdAppCommand>
 80087da:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d001      	beq.n	80087e6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	e00f      	b.n	8008806 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	2102      	movs	r1, #2
 80087ec:	4618      	mov	r0, r3
 80087ee:	f002 fa95 	bl	800ad1c <SDMMC_CmdBusWidth>
 80087f2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d001      	beq.n	80087fe <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	e003      	b.n	8008806 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80087fe:	2300      	movs	r3, #0
 8008800:	e001      	b.n	8008806 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008802:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008806:	4618      	mov	r0, r3
 8008808:	3718      	adds	r7, #24
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}

0800880e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800880e:	b580      	push	{r7, lr}
 8008810:	b086      	sub	sp, #24
 8008812:	af00      	add	r7, sp, #0
 8008814:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008816:	2300      	movs	r3, #0
 8008818:	60fb      	str	r3, [r7, #12]
 800881a:	2300      	movs	r3, #0
 800881c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	2100      	movs	r1, #0
 8008824:	4618      	mov	r0, r3
 8008826:	f002 f8c8 	bl	800a9ba <SDMMC_GetResponse>
 800882a:	4603      	mov	r3, r0
 800882c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008830:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008834:	d102      	bne.n	800883c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008836:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800883a:	e02f      	b.n	800889c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800883c:	f107 030c 	add.w	r3, r7, #12
 8008840:	4619      	mov	r1, r3
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 f82e 	bl	80088a4 <SD_FindSCR>
 8008848:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d001      	beq.n	8008854 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	e023      	b.n	800889c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800885a:	2b00      	cmp	r3, #0
 800885c:	d01c      	beq.n	8008898 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681a      	ldr	r2, [r3, #0]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008866:	041b      	lsls	r3, r3, #16
 8008868:	4619      	mov	r1, r3
 800886a:	4610      	mov	r0, r2
 800886c:	f002 fa10 	bl	800ac90 <SDMMC_CmdAppCommand>
 8008870:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d001      	beq.n	800887c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	e00f      	b.n	800889c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	2100      	movs	r1, #0
 8008882:	4618      	mov	r0, r3
 8008884:	f002 fa4a 	bl	800ad1c <SDMMC_CmdBusWidth>
 8008888:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d001      	beq.n	8008894 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	e003      	b.n	800889c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008894:	2300      	movs	r3, #0
 8008896:	e001      	b.n	800889c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008898:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800889c:	4618      	mov	r0, r3
 800889e:	3718      	adds	r7, #24
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80088a4:	b590      	push	{r4, r7, lr}
 80088a6:	b08f      	sub	sp, #60	; 0x3c
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80088ae:	f7fa fb4d 	bl	8002f4c <HAL_GetTick>
 80088b2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80088b4:	2300      	movs	r3, #0
 80088b6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80088b8:	2300      	movs	r3, #0
 80088ba:	60bb      	str	r3, [r7, #8]
 80088bc:	2300      	movs	r3, #0
 80088be:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	2108      	movs	r1, #8
 80088ca:	4618      	mov	r0, r3
 80088cc:	f002 f8b4 	bl	800aa38 <SDMMC_CmdBlockLength>
 80088d0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80088d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d001      	beq.n	80088dc <SD_FindSCR+0x38>
  {
    return errorstate;
 80088d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088da:	e0a9      	b.n	8008a30 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088e4:	041b      	lsls	r3, r3, #16
 80088e6:	4619      	mov	r1, r3
 80088e8:	4610      	mov	r0, r2
 80088ea:	f002 f9d1 	bl	800ac90 <SDMMC_CmdAppCommand>
 80088ee:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80088f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d001      	beq.n	80088fa <SD_FindSCR+0x56>
  {
    return errorstate;
 80088f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f8:	e09a      	b.n	8008a30 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80088fa:	f04f 33ff 	mov.w	r3, #4294967295
 80088fe:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008900:	2308      	movs	r3, #8
 8008902:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008904:	2330      	movs	r3, #48	; 0x30
 8008906:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008908:	2302      	movs	r3, #2
 800890a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800890c:	2300      	movs	r3, #0
 800890e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008910:	2301      	movs	r3, #1
 8008912:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f107 0210 	add.w	r2, r7, #16
 800891c:	4611      	mov	r1, r2
 800891e:	4618      	mov	r0, r3
 8008920:	f002 f85e 	bl	800a9e0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4618      	mov	r0, r3
 800892a:	f002 fa19 	bl	800ad60 <SDMMC_CmdSendSCR>
 800892e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008932:	2b00      	cmp	r3, #0
 8008934:	d022      	beq.n	800897c <SD_FindSCR+0xd8>
  {
    return errorstate;
 8008936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008938:	e07a      	b.n	8008a30 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008940:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008944:	2b00      	cmp	r3, #0
 8008946:	d00e      	beq.n	8008966 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6819      	ldr	r1, [r3, #0]
 800894c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800894e:	009b      	lsls	r3, r3, #2
 8008950:	f107 0208 	add.w	r2, r7, #8
 8008954:	18d4      	adds	r4, r2, r3
 8008956:	4608      	mov	r0, r1
 8008958:	f001 ffce 	bl	800a8f8 <SDMMC_ReadFIFO>
 800895c:	4603      	mov	r3, r0
 800895e:	6023      	str	r3, [r4, #0]
      index++;
 8008960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008962:	3301      	adds	r3, #1
 8008964:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008966:	f7fa faf1 	bl	8002f4c <HAL_GetTick>
 800896a:	4602      	mov	r2, r0
 800896c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800896e:	1ad3      	subs	r3, r2, r3
 8008970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008974:	d102      	bne.n	800897c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008976:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800897a:	e059      	b.n	8008a30 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008982:	f240 432a 	movw	r3, #1066	; 0x42a
 8008986:	4013      	ands	r3, r2
 8008988:	2b00      	cmp	r3, #0
 800898a:	d0d6      	beq.n	800893a <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008992:	f003 0308 	and.w	r3, r3, #8
 8008996:	2b00      	cmp	r3, #0
 8008998:	d005      	beq.n	80089a6 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	2208      	movs	r2, #8
 80089a0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80089a2:	2308      	movs	r3, #8
 80089a4:	e044      	b.n	8008a30 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089ac:	f003 0302 	and.w	r3, r3, #2
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d005      	beq.n	80089c0 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	2202      	movs	r2, #2
 80089ba:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80089bc:	2302      	movs	r3, #2
 80089be:	e037      	b.n	8008a30 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089c6:	f003 0320 	and.w	r3, r3, #32
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d005      	beq.n	80089da <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	2220      	movs	r2, #32
 80089d4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80089d6:	2320      	movs	r3, #32
 80089d8:	e02a      	b.n	8008a30 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f240 523a 	movw	r2, #1338	; 0x53a
 80089e2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	061a      	lsls	r2, r3, #24
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	021b      	lsls	r3, r3, #8
 80089ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80089f0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	0a1b      	lsrs	r3, r3, #8
 80089f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80089fa:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	0e1b      	lsrs	r3, r3, #24
 8008a00:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a04:	601a      	str	r2, [r3, #0]
    scr++;
 8008a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a08:	3304      	adds	r3, #4
 8008a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	061a      	lsls	r2, r3, #24
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	021b      	lsls	r3, r3, #8
 8008a14:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008a18:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	0a1b      	lsrs	r3, r3, #8
 8008a1e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008a22:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	0e1b      	lsrs	r3, r3, #24
 8008a28:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a2c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008a2e:	2300      	movs	r3, #0
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	373c      	adds	r7, #60	; 0x3c
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd90      	pop	{r4, r7, pc}

08008a38 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b082      	sub	sp, #8
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d101      	bne.n	8008a4c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008a48:	2301      	movs	r3, #1
 8008a4a:	e025      	b.n	8008a98 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008a52:	b2db      	uxtb	r3, r3
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d106      	bne.n	8008a66 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f7fa f849 	bl	8002af8 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2202      	movs	r2, #2
 8008a6a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681a      	ldr	r2, [r3, #0]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	3304      	adds	r3, #4
 8008a76:	4619      	mov	r1, r3
 8008a78:	4610      	mov	r0, r2
 8008a7a:	f001 fdeb 	bl	800a654 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6818      	ldr	r0, [r3, #0]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	461a      	mov	r2, r3
 8008a88:	6839      	ldr	r1, [r7, #0]
 8008a8a:	f001 fe55 	bl	800a738 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2201      	movs	r2, #1
 8008a92:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8008a96:	2300      	movs	r3, #0
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3708      	adds	r7, #8
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b084      	sub	sp, #16
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	60f8      	str	r0, [r7, #12]
 8008aa8:	60b9      	str	r1, [r7, #8]
 8008aaa:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008ab2:	b2db      	uxtb	r3, r3
 8008ab4:	2b02      	cmp	r3, #2
 8008ab6:	d101      	bne.n	8008abc <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8008ab8:	2302      	movs	r3, #2
 8008aba:	e018      	b.n	8008aee <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2202      	movs	r2, #2
 8008ac0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	68b9      	ldr	r1, [r7, #8]
 8008acc:	4618      	mov	r0, r3
 8008ace:	f001 feb3 	bl	800a838 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	2b02      	cmp	r3, #2
 8008ad8:	d104      	bne.n	8008ae4 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2205      	movs	r2, #5
 8008ade:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8008ae2:	e003      	b.n	8008aec <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8008aec:	2300      	movs	r3, #0
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3710      	adds	r7, #16
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}

08008af6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008af6:	b580      	push	{r7, lr}
 8008af8:	b082      	sub	sp, #8
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	6078      	str	r0, [r7, #4]
 8008afe:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008b06:	b2db      	uxtb	r3, r3
 8008b08:	2b02      	cmp	r3, #2
 8008b0a:	d101      	bne.n	8008b10 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008b0c:	2302      	movs	r3, #2
 8008b0e:	e00e      	b.n	8008b2e <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2202      	movs	r2, #2
 8008b14:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	6839      	ldr	r1, [r7, #0]
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f001 feab 	bl	800a87a <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2201      	movs	r2, #1
 8008b28:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8008b2c:	2300      	movs	r3, #0
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3708      	adds	r7, #8
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
	...

08008b38 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d101      	bne.n	8008b4a <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8008b46:	2301      	movs	r3, #1
 8008b48:	e04c      	b.n	8008be4 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b50:	b2db      	uxtb	r3, r3
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d106      	bne.n	8008b64 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f7f9 fca6 	bl	80024b0 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2202      	movs	r2, #2
 8008b68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	681a      	ldr	r2, [r3, #0]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f022 0203 	bic.w	r2, r2, #3
 8008b7a:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8008b84:	68fa      	ldr	r2, [r7, #12]
 8008b86:	4b19      	ldr	r3, [pc, #100]	; (8008bec <HAL_SPDIFRX_Init+0xb4>)
 8008b88:	4013      	ands	r3, r2
 8008b8a:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8008b94:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8008b9a:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8008ba0:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8008ba6:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8008bac:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8008bb2:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8008bb8:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 8008bbe:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8008bc4:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8008bc6:	68fa      	ldr	r2, [r7, #12]
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	68fa      	ldr	r2, [r7, #12]
 8008bd2:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2201      	movs	r2, #1
 8008bde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8008be2:	2300      	movs	r3, #0
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3710      	adds	r7, #16
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}
 8008bec:	fff88407 	.word	0xfff88407

08008bf0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d101      	bne.n	8008c02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008bfe:	2301      	movs	r3, #1
 8008c00:	e084      	b.n	8008d0c <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2200      	movs	r2, #0
 8008c06:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008c0e:	b2db      	uxtb	r3, r3
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d106      	bne.n	8008c22 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2200      	movs	r2, #0
 8008c18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f7f9 fc89 	bl	8002534 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2202      	movs	r2, #2
 8008c26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	681a      	ldr	r2, [r3, #0]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c38:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	68db      	ldr	r3, [r3, #12]
 8008c3e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008c42:	d902      	bls.n	8008c4a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008c44:	2300      	movs	r3, #0
 8008c46:	60fb      	str	r3, [r7, #12]
 8008c48:	e002      	b.n	8008c50 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008c4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c4e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	68db      	ldr	r3, [r3, #12]
 8008c54:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008c58:	d007      	beq.n	8008c6a <HAL_SPI_Init+0x7a>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	68db      	ldr	r3, [r3, #12]
 8008c5e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008c62:	d002      	beq.n	8008c6a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2200      	movs	r2, #0
 8008c68:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d10b      	bne.n	8008c8a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	68db      	ldr	r3, [r3, #12]
 8008c76:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008c7a:	d903      	bls.n	8008c84 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2202      	movs	r2, #2
 8008c80:	631a      	str	r2, [r3, #48]	; 0x30
 8008c82:	e002      	b.n	8008c8a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2201      	movs	r2, #1
 8008c88:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	685a      	ldr	r2, [r3, #4]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	689b      	ldr	r3, [r3, #8]
 8008c92:	431a      	orrs	r2, r3
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	691b      	ldr	r3, [r3, #16]
 8008c98:	431a      	orrs	r2, r3
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	695b      	ldr	r3, [r3, #20]
 8008c9e:	431a      	orrs	r2, r3
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	699b      	ldr	r3, [r3, #24]
 8008ca4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ca8:	431a      	orrs	r2, r3
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	69db      	ldr	r3, [r3, #28]
 8008cae:	431a      	orrs	r2, r3
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6a1b      	ldr	r3, [r3, #32]
 8008cb4:	ea42 0103 	orr.w	r1, r2, r3
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	430a      	orrs	r2, r1
 8008cc2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	699b      	ldr	r3, [r3, #24]
 8008cc8:	0c1b      	lsrs	r3, r3, #16
 8008cca:	f003 0204 	and.w	r2, r3, #4
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd2:	431a      	orrs	r2, r3
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cd8:	431a      	orrs	r2, r3
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	68db      	ldr	r3, [r3, #12]
 8008cde:	ea42 0103 	orr.w	r1, r2, r3
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	68fa      	ldr	r2, [r7, #12]
 8008ce8:	430a      	orrs	r2, r1
 8008cea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	69da      	ldr	r2, [r3, #28]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008cfa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2201      	movs	r2, #1
 8008d06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008d0a:	2300      	movs	r3, #0
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3710      	adds	r7, #16
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}

08008d14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b082      	sub	sp, #8
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d101      	bne.n	8008d26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008d22:	2301      	movs	r3, #1
 8008d24:	e01d      	b.n	8008d62 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d2c:	b2db      	uxtb	r3, r3
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d106      	bne.n	8008d40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2200      	movs	r2, #0
 8008d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f7f9 fc5c 	bl	80025f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2202      	movs	r2, #2
 8008d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681a      	ldr	r2, [r3, #0]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	3304      	adds	r3, #4
 8008d50:	4619      	mov	r1, r3
 8008d52:	4610      	mov	r0, r2
 8008d54:	f000 fb78 	bl	8009448 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d60:	2300      	movs	r3, #0
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3708      	adds	r7, #8
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}
	...

08008d6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b085      	sub	sp, #20
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	68da      	ldr	r2, [r3, #12]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f042 0201 	orr.w	r2, r2, #1
 8008d82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	689a      	ldr	r2, [r3, #8]
 8008d8a:	4b0c      	ldr	r3, [pc, #48]	; (8008dbc <HAL_TIM_Base_Start_IT+0x50>)
 8008d8c:	4013      	ands	r3, r2
 8008d8e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2b06      	cmp	r3, #6
 8008d94:	d00b      	beq.n	8008dae <HAL_TIM_Base_Start_IT+0x42>
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d9c:	d007      	beq.n	8008dae <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	681a      	ldr	r2, [r3, #0]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f042 0201 	orr.w	r2, r2, #1
 8008dac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008dae:	2300      	movs	r3, #0
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3714      	adds	r7, #20
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr
 8008dbc:	00010007 	.word	0x00010007

08008dc0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b082      	sub	sp, #8
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d101      	bne.n	8008dd2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	e01d      	b.n	8008e0e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008dd8:	b2db      	uxtb	r3, r3
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d106      	bne.n	8008dec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2200      	movs	r2, #0
 8008de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f7f9 fc74 	bl	80026d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2202      	movs	r2, #2
 8008df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681a      	ldr	r2, [r3, #0]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	3304      	adds	r3, #4
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	4610      	mov	r0, r2
 8008e00:	f000 fb22 	bl	8009448 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2201      	movs	r2, #1
 8008e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e0c:	2300      	movs	r3, #0
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3708      	adds	r7, #8
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}

08008e16 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008e16:	b580      	push	{r7, lr}
 8008e18:	b082      	sub	sp, #8
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	691b      	ldr	r3, [r3, #16]
 8008e24:	f003 0302 	and.w	r3, r3, #2
 8008e28:	2b02      	cmp	r3, #2
 8008e2a:	d122      	bne.n	8008e72 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	68db      	ldr	r3, [r3, #12]
 8008e32:	f003 0302 	and.w	r3, r3, #2
 8008e36:	2b02      	cmp	r3, #2
 8008e38:	d11b      	bne.n	8008e72 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f06f 0202 	mvn.w	r2, #2
 8008e42:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2201      	movs	r2, #1
 8008e48:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	699b      	ldr	r3, [r3, #24]
 8008e50:	f003 0303 	and.w	r3, r3, #3
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d003      	beq.n	8008e60 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f000 fad7 	bl	800940c <HAL_TIM_IC_CaptureCallback>
 8008e5e:	e005      	b.n	8008e6c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f000 fac9 	bl	80093f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 fada 	bl	8009420 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	691b      	ldr	r3, [r3, #16]
 8008e78:	f003 0304 	and.w	r3, r3, #4
 8008e7c:	2b04      	cmp	r3, #4
 8008e7e:	d122      	bne.n	8008ec6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	68db      	ldr	r3, [r3, #12]
 8008e86:	f003 0304 	and.w	r3, r3, #4
 8008e8a:	2b04      	cmp	r3, #4
 8008e8c:	d11b      	bne.n	8008ec6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f06f 0204 	mvn.w	r2, #4
 8008e96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2202      	movs	r2, #2
 8008e9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	699b      	ldr	r3, [r3, #24]
 8008ea4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d003      	beq.n	8008eb4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f000 faad 	bl	800940c <HAL_TIM_IC_CaptureCallback>
 8008eb2:	e005      	b.n	8008ec0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 fa9f 	bl	80093f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 fab0 	bl	8009420 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	691b      	ldr	r3, [r3, #16]
 8008ecc:	f003 0308 	and.w	r3, r3, #8
 8008ed0:	2b08      	cmp	r3, #8
 8008ed2:	d122      	bne.n	8008f1a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	68db      	ldr	r3, [r3, #12]
 8008eda:	f003 0308 	and.w	r3, r3, #8
 8008ede:	2b08      	cmp	r3, #8
 8008ee0:	d11b      	bne.n	8008f1a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f06f 0208 	mvn.w	r2, #8
 8008eea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2204      	movs	r2, #4
 8008ef0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	69db      	ldr	r3, [r3, #28]
 8008ef8:	f003 0303 	and.w	r3, r3, #3
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d003      	beq.n	8008f08 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f000 fa83 	bl	800940c <HAL_TIM_IC_CaptureCallback>
 8008f06:	e005      	b.n	8008f14 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f000 fa75 	bl	80093f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f000 fa86 	bl	8009420 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2200      	movs	r2, #0
 8008f18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	691b      	ldr	r3, [r3, #16]
 8008f20:	f003 0310 	and.w	r3, r3, #16
 8008f24:	2b10      	cmp	r3, #16
 8008f26:	d122      	bne.n	8008f6e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	68db      	ldr	r3, [r3, #12]
 8008f2e:	f003 0310 	and.w	r3, r3, #16
 8008f32:	2b10      	cmp	r3, #16
 8008f34:	d11b      	bne.n	8008f6e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f06f 0210 	mvn.w	r2, #16
 8008f3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2208      	movs	r2, #8
 8008f44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	69db      	ldr	r3, [r3, #28]
 8008f4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d003      	beq.n	8008f5c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f000 fa59 	bl	800940c <HAL_TIM_IC_CaptureCallback>
 8008f5a:	e005      	b.n	8008f68 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f000 fa4b 	bl	80093f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f000 fa5c 	bl	8009420 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	691b      	ldr	r3, [r3, #16]
 8008f74:	f003 0301 	and.w	r3, r3, #1
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	d10e      	bne.n	8008f9a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	68db      	ldr	r3, [r3, #12]
 8008f82:	f003 0301 	and.w	r3, r3, #1
 8008f86:	2b01      	cmp	r3, #1
 8008f88:	d107      	bne.n	8008f9a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f06f 0201 	mvn.w	r2, #1
 8008f92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f7f8 feb1 	bl	8001cfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	691b      	ldr	r3, [r3, #16]
 8008fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fa4:	2b80      	cmp	r3, #128	; 0x80
 8008fa6:	d10e      	bne.n	8008fc6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	68db      	ldr	r3, [r3, #12]
 8008fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fb2:	2b80      	cmp	r3, #128	; 0x80
 8008fb4:	d107      	bne.n	8008fc6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008fbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f000 feef 	bl	8009da4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	691b      	ldr	r3, [r3, #16]
 8008fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fd4:	d10e      	bne.n	8008ff4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	68db      	ldr	r3, [r3, #12]
 8008fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fe0:	2b80      	cmp	r3, #128	; 0x80
 8008fe2:	d107      	bne.n	8008ff4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f000 fee2 	bl	8009db8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	691b      	ldr	r3, [r3, #16]
 8008ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ffe:	2b40      	cmp	r3, #64	; 0x40
 8009000:	d10e      	bne.n	8009020 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	68db      	ldr	r3, [r3, #12]
 8009008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800900c:	2b40      	cmp	r3, #64	; 0x40
 800900e:	d107      	bne.n	8009020 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f000 fa0a 	bl	8009434 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	691b      	ldr	r3, [r3, #16]
 8009026:	f003 0320 	and.w	r3, r3, #32
 800902a:	2b20      	cmp	r3, #32
 800902c:	d10e      	bne.n	800904c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	f003 0320 	and.w	r3, r3, #32
 8009038:	2b20      	cmp	r3, #32
 800903a:	d107      	bne.n	800904c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f06f 0220 	mvn.w	r2, #32
 8009044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 fea2 	bl	8009d90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800904c:	bf00      	nop
 800904e:	3708      	adds	r7, #8
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}

08009054 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b084      	sub	sp, #16
 8009058:	af00      	add	r7, sp, #0
 800905a:	60f8      	str	r0, [r7, #12]
 800905c:	60b9      	str	r1, [r7, #8]
 800905e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009066:	2b01      	cmp	r3, #1
 8009068:	d101      	bne.n	800906e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800906a:	2302      	movs	r3, #2
 800906c:	e105      	b.n	800927a <HAL_TIM_PWM_ConfigChannel+0x226>
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2201      	movs	r2, #1
 8009072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2202      	movs	r2, #2
 800907a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2b14      	cmp	r3, #20
 8009082:	f200 80f0 	bhi.w	8009266 <HAL_TIM_PWM_ConfigChannel+0x212>
 8009086:	a201      	add	r2, pc, #4	; (adr r2, 800908c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800908c:	080090e1 	.word	0x080090e1
 8009090:	08009267 	.word	0x08009267
 8009094:	08009267 	.word	0x08009267
 8009098:	08009267 	.word	0x08009267
 800909c:	08009121 	.word	0x08009121
 80090a0:	08009267 	.word	0x08009267
 80090a4:	08009267 	.word	0x08009267
 80090a8:	08009267 	.word	0x08009267
 80090ac:	08009163 	.word	0x08009163
 80090b0:	08009267 	.word	0x08009267
 80090b4:	08009267 	.word	0x08009267
 80090b8:	08009267 	.word	0x08009267
 80090bc:	080091a3 	.word	0x080091a3
 80090c0:	08009267 	.word	0x08009267
 80090c4:	08009267 	.word	0x08009267
 80090c8:	08009267 	.word	0x08009267
 80090cc:	080091e5 	.word	0x080091e5
 80090d0:	08009267 	.word	0x08009267
 80090d4:	08009267 	.word	0x08009267
 80090d8:	08009267 	.word	0x08009267
 80090dc:	08009225 	.word	0x08009225
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	68b9      	ldr	r1, [r7, #8]
 80090e6:	4618      	mov	r0, r3
 80090e8:	f000 fa4e 	bl	8009588 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	699a      	ldr	r2, [r3, #24]
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f042 0208 	orr.w	r2, r2, #8
 80090fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	699a      	ldr	r2, [r3, #24]
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f022 0204 	bic.w	r2, r2, #4
 800910a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	6999      	ldr	r1, [r3, #24]
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	691a      	ldr	r2, [r3, #16]
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	430a      	orrs	r2, r1
 800911c:	619a      	str	r2, [r3, #24]
      break;
 800911e:	e0a3      	b.n	8009268 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	68b9      	ldr	r1, [r7, #8]
 8009126:	4618      	mov	r0, r3
 8009128:	f000 faa0 	bl	800966c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	699a      	ldr	r2, [r3, #24]
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800913a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	699a      	ldr	r2, [r3, #24]
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800914a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	6999      	ldr	r1, [r3, #24]
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	691b      	ldr	r3, [r3, #16]
 8009156:	021a      	lsls	r2, r3, #8
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	430a      	orrs	r2, r1
 800915e:	619a      	str	r2, [r3, #24]
      break;
 8009160:	e082      	b.n	8009268 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	68b9      	ldr	r1, [r7, #8]
 8009168:	4618      	mov	r0, r3
 800916a:	f000 faf7 	bl	800975c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	69da      	ldr	r2, [r3, #28]
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f042 0208 	orr.w	r2, r2, #8
 800917c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	69da      	ldr	r2, [r3, #28]
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f022 0204 	bic.w	r2, r2, #4
 800918c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	69d9      	ldr	r1, [r3, #28]
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	691a      	ldr	r2, [r3, #16]
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	430a      	orrs	r2, r1
 800919e:	61da      	str	r2, [r3, #28]
      break;
 80091a0:	e062      	b.n	8009268 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	68b9      	ldr	r1, [r7, #8]
 80091a8:	4618      	mov	r0, r3
 80091aa:	f000 fb4d 	bl	8009848 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	69da      	ldr	r2, [r3, #28]
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	69da      	ldr	r2, [r3, #28]
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	69d9      	ldr	r1, [r3, #28]
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	691b      	ldr	r3, [r3, #16]
 80091d8:	021a      	lsls	r2, r3, #8
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	430a      	orrs	r2, r1
 80091e0:	61da      	str	r2, [r3, #28]
      break;
 80091e2:	e041      	b.n	8009268 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	68b9      	ldr	r1, [r7, #8]
 80091ea:	4618      	mov	r0, r3
 80091ec:	f000 fb84 	bl	80098f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f042 0208 	orr.w	r2, r2, #8
 80091fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f022 0204 	bic.w	r2, r2, #4
 800920e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	691a      	ldr	r2, [r3, #16]
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	430a      	orrs	r2, r1
 8009220:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009222:	e021      	b.n	8009268 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	68b9      	ldr	r1, [r7, #8]
 800922a:	4618      	mov	r0, r3
 800922c:	f000 fbb6 	bl	800999c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800923e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800924e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	691b      	ldr	r3, [r3, #16]
 800925a:	021a      	lsls	r2, r3, #8
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	430a      	orrs	r2, r1
 8009262:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009264:	e000      	b.n	8009268 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8009266:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2201      	movs	r2, #1
 800926c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2200      	movs	r2, #0
 8009274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009278:	2300      	movs	r3, #0
}
 800927a:	4618      	mov	r0, r3
 800927c:	3710      	adds	r7, #16
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
 8009282:	bf00      	nop

08009284 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b084      	sub	sp, #16
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009294:	2b01      	cmp	r3, #1
 8009296:	d101      	bne.n	800929c <HAL_TIM_ConfigClockSource+0x18>
 8009298:	2302      	movs	r3, #2
 800929a:	e0a6      	b.n	80093ea <HAL_TIM_ConfigClockSource+0x166>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2201      	movs	r2, #1
 80092a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2202      	movs	r2, #2
 80092a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	689b      	ldr	r3, [r3, #8]
 80092b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80092b4:	68fa      	ldr	r2, [r7, #12]
 80092b6:	4b4f      	ldr	r3, [pc, #316]	; (80093f4 <HAL_TIM_ConfigClockSource+0x170>)
 80092b8:	4013      	ands	r3, r2
 80092ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80092c2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	68fa      	ldr	r2, [r7, #12]
 80092ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	2b40      	cmp	r3, #64	; 0x40
 80092d2:	d067      	beq.n	80093a4 <HAL_TIM_ConfigClockSource+0x120>
 80092d4:	2b40      	cmp	r3, #64	; 0x40
 80092d6:	d80b      	bhi.n	80092f0 <HAL_TIM_ConfigClockSource+0x6c>
 80092d8:	2b10      	cmp	r3, #16
 80092da:	d073      	beq.n	80093c4 <HAL_TIM_ConfigClockSource+0x140>
 80092dc:	2b10      	cmp	r3, #16
 80092de:	d802      	bhi.n	80092e6 <HAL_TIM_ConfigClockSource+0x62>
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d06f      	beq.n	80093c4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80092e4:	e078      	b.n	80093d8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80092e6:	2b20      	cmp	r3, #32
 80092e8:	d06c      	beq.n	80093c4 <HAL_TIM_ConfigClockSource+0x140>
 80092ea:	2b30      	cmp	r3, #48	; 0x30
 80092ec:	d06a      	beq.n	80093c4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80092ee:	e073      	b.n	80093d8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80092f0:	2b70      	cmp	r3, #112	; 0x70
 80092f2:	d00d      	beq.n	8009310 <HAL_TIM_ConfigClockSource+0x8c>
 80092f4:	2b70      	cmp	r3, #112	; 0x70
 80092f6:	d804      	bhi.n	8009302 <HAL_TIM_ConfigClockSource+0x7e>
 80092f8:	2b50      	cmp	r3, #80	; 0x50
 80092fa:	d033      	beq.n	8009364 <HAL_TIM_ConfigClockSource+0xe0>
 80092fc:	2b60      	cmp	r3, #96	; 0x60
 80092fe:	d041      	beq.n	8009384 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8009300:	e06a      	b.n	80093d8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009302:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009306:	d066      	beq.n	80093d6 <HAL_TIM_ConfigClockSource+0x152>
 8009308:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800930c:	d017      	beq.n	800933e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800930e:	e063      	b.n	80093d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6818      	ldr	r0, [r3, #0]
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	6899      	ldr	r1, [r3, #8]
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	685a      	ldr	r2, [r3, #4]
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	68db      	ldr	r3, [r3, #12]
 8009320:	f000 fc0a 	bl	8009b38 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	689b      	ldr	r3, [r3, #8]
 800932a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009332:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	68fa      	ldr	r2, [r7, #12]
 800933a:	609a      	str	r2, [r3, #8]
      break;
 800933c:	e04c      	b.n	80093d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6818      	ldr	r0, [r3, #0]
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	6899      	ldr	r1, [r3, #8]
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	685a      	ldr	r2, [r3, #4]
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	68db      	ldr	r3, [r3, #12]
 800934e:	f000 fbf3 	bl	8009b38 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	689a      	ldr	r2, [r3, #8]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009360:	609a      	str	r2, [r3, #8]
      break;
 8009362:	e039      	b.n	80093d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6818      	ldr	r0, [r3, #0]
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	6859      	ldr	r1, [r3, #4]
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	68db      	ldr	r3, [r3, #12]
 8009370:	461a      	mov	r2, r3
 8009372:	f000 fb67 	bl	8009a44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	2150      	movs	r1, #80	; 0x50
 800937c:	4618      	mov	r0, r3
 800937e:	f000 fbc0 	bl	8009b02 <TIM_ITRx_SetConfig>
      break;
 8009382:	e029      	b.n	80093d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6818      	ldr	r0, [r3, #0]
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	6859      	ldr	r1, [r3, #4]
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	68db      	ldr	r3, [r3, #12]
 8009390:	461a      	mov	r2, r3
 8009392:	f000 fb86 	bl	8009aa2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	2160      	movs	r1, #96	; 0x60
 800939c:	4618      	mov	r0, r3
 800939e:	f000 fbb0 	bl	8009b02 <TIM_ITRx_SetConfig>
      break;
 80093a2:	e019      	b.n	80093d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6818      	ldr	r0, [r3, #0]
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	6859      	ldr	r1, [r3, #4]
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	68db      	ldr	r3, [r3, #12]
 80093b0:	461a      	mov	r2, r3
 80093b2:	f000 fb47 	bl	8009a44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	2140      	movs	r1, #64	; 0x40
 80093bc:	4618      	mov	r0, r3
 80093be:	f000 fba0 	bl	8009b02 <TIM_ITRx_SetConfig>
      break;
 80093c2:	e009      	b.n	80093d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681a      	ldr	r2, [r3, #0]
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	4619      	mov	r1, r3
 80093ce:	4610      	mov	r0, r2
 80093d0:	f000 fb97 	bl	8009b02 <TIM_ITRx_SetConfig>
      break;
 80093d4:	e000      	b.n	80093d8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80093d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2201      	movs	r2, #1
 80093dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2200      	movs	r2, #0
 80093e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80093e8:	2300      	movs	r3, #0
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3710      	adds	r7, #16
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}
 80093f2:	bf00      	nop
 80093f4:	fffeff88 	.word	0xfffeff88

080093f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b083      	sub	sp, #12
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009400:	bf00      	nop
 8009402:	370c      	adds	r7, #12
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr

0800940c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800940c:	b480      	push	{r7}
 800940e:	b083      	sub	sp, #12
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009414:	bf00      	nop
 8009416:	370c      	adds	r7, #12
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr

08009420 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009420:	b480      	push	{r7}
 8009422:	b083      	sub	sp, #12
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009428:	bf00      	nop
 800942a:	370c      	adds	r7, #12
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr

08009434 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009434:	b480      	push	{r7}
 8009436:	b083      	sub	sp, #12
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800943c:	bf00      	nop
 800943e:	370c      	adds	r7, #12
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr

08009448 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009448:	b480      	push	{r7}
 800944a:	b085      	sub	sp, #20
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	4a40      	ldr	r2, [pc, #256]	; (800955c <TIM_Base_SetConfig+0x114>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d013      	beq.n	8009488 <TIM_Base_SetConfig+0x40>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009466:	d00f      	beq.n	8009488 <TIM_Base_SetConfig+0x40>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	4a3d      	ldr	r2, [pc, #244]	; (8009560 <TIM_Base_SetConfig+0x118>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d00b      	beq.n	8009488 <TIM_Base_SetConfig+0x40>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	4a3c      	ldr	r2, [pc, #240]	; (8009564 <TIM_Base_SetConfig+0x11c>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d007      	beq.n	8009488 <TIM_Base_SetConfig+0x40>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	4a3b      	ldr	r2, [pc, #236]	; (8009568 <TIM_Base_SetConfig+0x120>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d003      	beq.n	8009488 <TIM_Base_SetConfig+0x40>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	4a3a      	ldr	r2, [pc, #232]	; (800956c <TIM_Base_SetConfig+0x124>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d108      	bne.n	800949a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800948e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	685b      	ldr	r3, [r3, #4]
 8009494:	68fa      	ldr	r2, [r7, #12]
 8009496:	4313      	orrs	r3, r2
 8009498:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	4a2f      	ldr	r2, [pc, #188]	; (800955c <TIM_Base_SetConfig+0x114>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d02b      	beq.n	80094fa <TIM_Base_SetConfig+0xb2>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094a8:	d027      	beq.n	80094fa <TIM_Base_SetConfig+0xb2>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	4a2c      	ldr	r2, [pc, #176]	; (8009560 <TIM_Base_SetConfig+0x118>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d023      	beq.n	80094fa <TIM_Base_SetConfig+0xb2>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	4a2b      	ldr	r2, [pc, #172]	; (8009564 <TIM_Base_SetConfig+0x11c>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d01f      	beq.n	80094fa <TIM_Base_SetConfig+0xb2>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	4a2a      	ldr	r2, [pc, #168]	; (8009568 <TIM_Base_SetConfig+0x120>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d01b      	beq.n	80094fa <TIM_Base_SetConfig+0xb2>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	4a29      	ldr	r2, [pc, #164]	; (800956c <TIM_Base_SetConfig+0x124>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d017      	beq.n	80094fa <TIM_Base_SetConfig+0xb2>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	4a28      	ldr	r2, [pc, #160]	; (8009570 <TIM_Base_SetConfig+0x128>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d013      	beq.n	80094fa <TIM_Base_SetConfig+0xb2>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	4a27      	ldr	r2, [pc, #156]	; (8009574 <TIM_Base_SetConfig+0x12c>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d00f      	beq.n	80094fa <TIM_Base_SetConfig+0xb2>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	4a26      	ldr	r2, [pc, #152]	; (8009578 <TIM_Base_SetConfig+0x130>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d00b      	beq.n	80094fa <TIM_Base_SetConfig+0xb2>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	4a25      	ldr	r2, [pc, #148]	; (800957c <TIM_Base_SetConfig+0x134>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d007      	beq.n	80094fa <TIM_Base_SetConfig+0xb2>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	4a24      	ldr	r2, [pc, #144]	; (8009580 <TIM_Base_SetConfig+0x138>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d003      	beq.n	80094fa <TIM_Base_SetConfig+0xb2>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	4a23      	ldr	r2, [pc, #140]	; (8009584 <TIM_Base_SetConfig+0x13c>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d108      	bne.n	800950c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009500:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	68db      	ldr	r3, [r3, #12]
 8009506:	68fa      	ldr	r2, [r7, #12]
 8009508:	4313      	orrs	r3, r2
 800950a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	695b      	ldr	r3, [r3, #20]
 8009516:	4313      	orrs	r3, r2
 8009518:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	68fa      	ldr	r2, [r7, #12]
 800951e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	689a      	ldr	r2, [r3, #8]
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	681a      	ldr	r2, [r3, #0]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	4a0a      	ldr	r2, [pc, #40]	; (800955c <TIM_Base_SetConfig+0x114>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d003      	beq.n	8009540 <TIM_Base_SetConfig+0xf8>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	4a0c      	ldr	r2, [pc, #48]	; (800956c <TIM_Base_SetConfig+0x124>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d103      	bne.n	8009548 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	691a      	ldr	r2, [r3, #16]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2201      	movs	r2, #1
 800954c:	615a      	str	r2, [r3, #20]
}
 800954e:	bf00      	nop
 8009550:	3714      	adds	r7, #20
 8009552:	46bd      	mov	sp, r7
 8009554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009558:	4770      	bx	lr
 800955a:	bf00      	nop
 800955c:	40010000 	.word	0x40010000
 8009560:	40000400 	.word	0x40000400
 8009564:	40000800 	.word	0x40000800
 8009568:	40000c00 	.word	0x40000c00
 800956c:	40010400 	.word	0x40010400
 8009570:	40014000 	.word	0x40014000
 8009574:	40014400 	.word	0x40014400
 8009578:	40014800 	.word	0x40014800
 800957c:	40001800 	.word	0x40001800
 8009580:	40001c00 	.word	0x40001c00
 8009584:	40002000 	.word	0x40002000

08009588 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009588:	b480      	push	{r7}
 800958a:	b087      	sub	sp, #28
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
 8009590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6a1b      	ldr	r3, [r3, #32]
 8009596:	f023 0201 	bic.w	r2, r3, #1
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6a1b      	ldr	r3, [r3, #32]
 80095a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	699b      	ldr	r3, [r3, #24]
 80095ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80095b0:	68fa      	ldr	r2, [r7, #12]
 80095b2:	4b2b      	ldr	r3, [pc, #172]	; (8009660 <TIM_OC1_SetConfig+0xd8>)
 80095b4:	4013      	ands	r3, r2
 80095b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	f023 0303 	bic.w	r3, r3, #3
 80095be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	68fa      	ldr	r2, [r7, #12]
 80095c6:	4313      	orrs	r3, r2
 80095c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	f023 0302 	bic.w	r3, r3, #2
 80095d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	689b      	ldr	r3, [r3, #8]
 80095d6:	697a      	ldr	r2, [r7, #20]
 80095d8:	4313      	orrs	r3, r2
 80095da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	4a21      	ldr	r2, [pc, #132]	; (8009664 <TIM_OC1_SetConfig+0xdc>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d003      	beq.n	80095ec <TIM_OC1_SetConfig+0x64>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	4a20      	ldr	r2, [pc, #128]	; (8009668 <TIM_OC1_SetConfig+0xe0>)
 80095e8:	4293      	cmp	r3, r2
 80095ea:	d10c      	bne.n	8009606 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	f023 0308 	bic.w	r3, r3, #8
 80095f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	68db      	ldr	r3, [r3, #12]
 80095f8:	697a      	ldr	r2, [r7, #20]
 80095fa:	4313      	orrs	r3, r2
 80095fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	f023 0304 	bic.w	r3, r3, #4
 8009604:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	4a16      	ldr	r2, [pc, #88]	; (8009664 <TIM_OC1_SetConfig+0xdc>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d003      	beq.n	8009616 <TIM_OC1_SetConfig+0x8e>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	4a15      	ldr	r2, [pc, #84]	; (8009668 <TIM_OC1_SetConfig+0xe0>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d111      	bne.n	800963a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800961c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009624:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	695b      	ldr	r3, [r3, #20]
 800962a:	693a      	ldr	r2, [r7, #16]
 800962c:	4313      	orrs	r3, r2
 800962e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	699b      	ldr	r3, [r3, #24]
 8009634:	693a      	ldr	r2, [r7, #16]
 8009636:	4313      	orrs	r3, r2
 8009638:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	693a      	ldr	r2, [r7, #16]
 800963e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	68fa      	ldr	r2, [r7, #12]
 8009644:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	685a      	ldr	r2, [r3, #4]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	697a      	ldr	r2, [r7, #20]
 8009652:	621a      	str	r2, [r3, #32]
}
 8009654:	bf00      	nop
 8009656:	371c      	adds	r7, #28
 8009658:	46bd      	mov	sp, r7
 800965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965e:	4770      	bx	lr
 8009660:	fffeff8f 	.word	0xfffeff8f
 8009664:	40010000 	.word	0x40010000
 8009668:	40010400 	.word	0x40010400

0800966c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800966c:	b480      	push	{r7}
 800966e:	b087      	sub	sp, #28
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6a1b      	ldr	r3, [r3, #32]
 800967a:	f023 0210 	bic.w	r2, r3, #16
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6a1b      	ldr	r3, [r3, #32]
 8009686:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	685b      	ldr	r3, [r3, #4]
 800968c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	699b      	ldr	r3, [r3, #24]
 8009692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009694:	68fa      	ldr	r2, [r7, #12]
 8009696:	4b2e      	ldr	r3, [pc, #184]	; (8009750 <TIM_OC2_SetConfig+0xe4>)
 8009698:	4013      	ands	r3, r2
 800969a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	021b      	lsls	r3, r3, #8
 80096aa:	68fa      	ldr	r2, [r7, #12]
 80096ac:	4313      	orrs	r3, r2
 80096ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	f023 0320 	bic.w	r3, r3, #32
 80096b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	689b      	ldr	r3, [r3, #8]
 80096bc:	011b      	lsls	r3, r3, #4
 80096be:	697a      	ldr	r2, [r7, #20]
 80096c0:	4313      	orrs	r3, r2
 80096c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	4a23      	ldr	r2, [pc, #140]	; (8009754 <TIM_OC2_SetConfig+0xe8>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d003      	beq.n	80096d4 <TIM_OC2_SetConfig+0x68>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	4a22      	ldr	r2, [pc, #136]	; (8009758 <TIM_OC2_SetConfig+0xec>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d10d      	bne.n	80096f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80096da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	68db      	ldr	r3, [r3, #12]
 80096e0:	011b      	lsls	r3, r3, #4
 80096e2:	697a      	ldr	r2, [r7, #20]
 80096e4:	4313      	orrs	r3, r2
 80096e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	4a18      	ldr	r2, [pc, #96]	; (8009754 <TIM_OC2_SetConfig+0xe8>)
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d003      	beq.n	8009700 <TIM_OC2_SetConfig+0x94>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	4a17      	ldr	r2, [pc, #92]	; (8009758 <TIM_OC2_SetConfig+0xec>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d113      	bne.n	8009728 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009700:	693b      	ldr	r3, [r7, #16]
 8009702:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009706:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009708:	693b      	ldr	r3, [r7, #16]
 800970a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800970e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	695b      	ldr	r3, [r3, #20]
 8009714:	009b      	lsls	r3, r3, #2
 8009716:	693a      	ldr	r2, [r7, #16]
 8009718:	4313      	orrs	r3, r2
 800971a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	699b      	ldr	r3, [r3, #24]
 8009720:	009b      	lsls	r3, r3, #2
 8009722:	693a      	ldr	r2, [r7, #16]
 8009724:	4313      	orrs	r3, r2
 8009726:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	693a      	ldr	r2, [r7, #16]
 800972c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	68fa      	ldr	r2, [r7, #12]
 8009732:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	685a      	ldr	r2, [r3, #4]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	697a      	ldr	r2, [r7, #20]
 8009740:	621a      	str	r2, [r3, #32]
}
 8009742:	bf00      	nop
 8009744:	371c      	adds	r7, #28
 8009746:	46bd      	mov	sp, r7
 8009748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974c:	4770      	bx	lr
 800974e:	bf00      	nop
 8009750:	feff8fff 	.word	0xfeff8fff
 8009754:	40010000 	.word	0x40010000
 8009758:	40010400 	.word	0x40010400

0800975c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800975c:	b480      	push	{r7}
 800975e:	b087      	sub	sp, #28
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6a1b      	ldr	r3, [r3, #32]
 800976a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6a1b      	ldr	r3, [r3, #32]
 8009776:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	685b      	ldr	r3, [r3, #4]
 800977c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	69db      	ldr	r3, [r3, #28]
 8009782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009784:	68fa      	ldr	r2, [r7, #12]
 8009786:	4b2d      	ldr	r3, [pc, #180]	; (800983c <TIM_OC3_SetConfig+0xe0>)
 8009788:	4013      	ands	r3, r2
 800978a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	f023 0303 	bic.w	r3, r3, #3
 8009792:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	68fa      	ldr	r2, [r7, #12]
 800979a:	4313      	orrs	r3, r2
 800979c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80097a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	689b      	ldr	r3, [r3, #8]
 80097aa:	021b      	lsls	r3, r3, #8
 80097ac:	697a      	ldr	r2, [r7, #20]
 80097ae:	4313      	orrs	r3, r2
 80097b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	4a22      	ldr	r2, [pc, #136]	; (8009840 <TIM_OC3_SetConfig+0xe4>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d003      	beq.n	80097c2 <TIM_OC3_SetConfig+0x66>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	4a21      	ldr	r2, [pc, #132]	; (8009844 <TIM_OC3_SetConfig+0xe8>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d10d      	bne.n	80097de <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80097c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	68db      	ldr	r3, [r3, #12]
 80097ce:	021b      	lsls	r3, r3, #8
 80097d0:	697a      	ldr	r2, [r7, #20]
 80097d2:	4313      	orrs	r3, r2
 80097d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80097dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	4a17      	ldr	r2, [pc, #92]	; (8009840 <TIM_OC3_SetConfig+0xe4>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d003      	beq.n	80097ee <TIM_OC3_SetConfig+0x92>
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	4a16      	ldr	r2, [pc, #88]	; (8009844 <TIM_OC3_SetConfig+0xe8>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	d113      	bne.n	8009816 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80097f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80097fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	695b      	ldr	r3, [r3, #20]
 8009802:	011b      	lsls	r3, r3, #4
 8009804:	693a      	ldr	r2, [r7, #16]
 8009806:	4313      	orrs	r3, r2
 8009808:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	699b      	ldr	r3, [r3, #24]
 800980e:	011b      	lsls	r3, r3, #4
 8009810:	693a      	ldr	r2, [r7, #16]
 8009812:	4313      	orrs	r3, r2
 8009814:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	693a      	ldr	r2, [r7, #16]
 800981a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	68fa      	ldr	r2, [r7, #12]
 8009820:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	685a      	ldr	r2, [r3, #4]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	697a      	ldr	r2, [r7, #20]
 800982e:	621a      	str	r2, [r3, #32]
}
 8009830:	bf00      	nop
 8009832:	371c      	adds	r7, #28
 8009834:	46bd      	mov	sp, r7
 8009836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983a:	4770      	bx	lr
 800983c:	fffeff8f 	.word	0xfffeff8f
 8009840:	40010000 	.word	0x40010000
 8009844:	40010400 	.word	0x40010400

08009848 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009848:	b480      	push	{r7}
 800984a:	b087      	sub	sp, #28
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6a1b      	ldr	r3, [r3, #32]
 8009856:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6a1b      	ldr	r3, [r3, #32]
 8009862:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	685b      	ldr	r3, [r3, #4]
 8009868:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	69db      	ldr	r3, [r3, #28]
 800986e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009870:	68fa      	ldr	r2, [r7, #12]
 8009872:	4b1e      	ldr	r3, [pc, #120]	; (80098ec <TIM_OC4_SetConfig+0xa4>)
 8009874:	4013      	ands	r3, r2
 8009876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800987e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	021b      	lsls	r3, r3, #8
 8009886:	68fa      	ldr	r2, [r7, #12]
 8009888:	4313      	orrs	r3, r2
 800988a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009892:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	689b      	ldr	r3, [r3, #8]
 8009898:	031b      	lsls	r3, r3, #12
 800989a:	693a      	ldr	r2, [r7, #16]
 800989c:	4313      	orrs	r3, r2
 800989e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	4a13      	ldr	r2, [pc, #76]	; (80098f0 <TIM_OC4_SetConfig+0xa8>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d003      	beq.n	80098b0 <TIM_OC4_SetConfig+0x68>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	4a12      	ldr	r2, [pc, #72]	; (80098f4 <TIM_OC4_SetConfig+0xac>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d109      	bne.n	80098c4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80098b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	695b      	ldr	r3, [r3, #20]
 80098bc:	019b      	lsls	r3, r3, #6
 80098be:	697a      	ldr	r2, [r7, #20]
 80098c0:	4313      	orrs	r3, r2
 80098c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	697a      	ldr	r2, [r7, #20]
 80098c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	68fa      	ldr	r2, [r7, #12]
 80098ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	685a      	ldr	r2, [r3, #4]
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	693a      	ldr	r2, [r7, #16]
 80098dc:	621a      	str	r2, [r3, #32]
}
 80098de:	bf00      	nop
 80098e0:	371c      	adds	r7, #28
 80098e2:	46bd      	mov	sp, r7
 80098e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e8:	4770      	bx	lr
 80098ea:	bf00      	nop
 80098ec:	feff8fff 	.word	0xfeff8fff
 80098f0:	40010000 	.word	0x40010000
 80098f4:	40010400 	.word	0x40010400

080098f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b087      	sub	sp, #28
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
 8009900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6a1b      	ldr	r3, [r3, #32]
 8009906:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6a1b      	ldr	r3, [r3, #32]
 8009912:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800991e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009920:	68fa      	ldr	r2, [r7, #12]
 8009922:	4b1b      	ldr	r3, [pc, #108]	; (8009990 <TIM_OC5_SetConfig+0x98>)
 8009924:	4013      	ands	r3, r2
 8009926:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	68fa      	ldr	r2, [r7, #12]
 800992e:	4313      	orrs	r3, r2
 8009930:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009938:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	689b      	ldr	r3, [r3, #8]
 800993e:	041b      	lsls	r3, r3, #16
 8009940:	693a      	ldr	r2, [r7, #16]
 8009942:	4313      	orrs	r3, r2
 8009944:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	4a12      	ldr	r2, [pc, #72]	; (8009994 <TIM_OC5_SetConfig+0x9c>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d003      	beq.n	8009956 <TIM_OC5_SetConfig+0x5e>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	4a11      	ldr	r2, [pc, #68]	; (8009998 <TIM_OC5_SetConfig+0xa0>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d109      	bne.n	800996a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800995c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	695b      	ldr	r3, [r3, #20]
 8009962:	021b      	lsls	r3, r3, #8
 8009964:	697a      	ldr	r2, [r7, #20]
 8009966:	4313      	orrs	r3, r2
 8009968:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	697a      	ldr	r2, [r7, #20]
 800996e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	68fa      	ldr	r2, [r7, #12]
 8009974:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	685a      	ldr	r2, [r3, #4]
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	693a      	ldr	r2, [r7, #16]
 8009982:	621a      	str	r2, [r3, #32]
}
 8009984:	bf00      	nop
 8009986:	371c      	adds	r7, #28
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr
 8009990:	fffeff8f 	.word	0xfffeff8f
 8009994:	40010000 	.word	0x40010000
 8009998:	40010400 	.word	0x40010400

0800999c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800999c:	b480      	push	{r7}
 800999e:	b087      	sub	sp, #28
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6a1b      	ldr	r3, [r3, #32]
 80099aa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6a1b      	ldr	r3, [r3, #32]
 80099b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	685b      	ldr	r3, [r3, #4]
 80099bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80099c4:	68fa      	ldr	r2, [r7, #12]
 80099c6:	4b1c      	ldr	r3, [pc, #112]	; (8009a38 <TIM_OC6_SetConfig+0x9c>)
 80099c8:	4013      	ands	r3, r2
 80099ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	021b      	lsls	r3, r3, #8
 80099d2:	68fa      	ldr	r2, [r7, #12]
 80099d4:	4313      	orrs	r3, r2
 80099d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80099de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	689b      	ldr	r3, [r3, #8]
 80099e4:	051b      	lsls	r3, r3, #20
 80099e6:	693a      	ldr	r2, [r7, #16]
 80099e8:	4313      	orrs	r3, r2
 80099ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	4a13      	ldr	r2, [pc, #76]	; (8009a3c <TIM_OC6_SetConfig+0xa0>)
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d003      	beq.n	80099fc <TIM_OC6_SetConfig+0x60>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	4a12      	ldr	r2, [pc, #72]	; (8009a40 <TIM_OC6_SetConfig+0xa4>)
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d109      	bne.n	8009a10 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009a02:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	695b      	ldr	r3, [r3, #20]
 8009a08:	029b      	lsls	r3, r3, #10
 8009a0a:	697a      	ldr	r2, [r7, #20]
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	697a      	ldr	r2, [r7, #20]
 8009a14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	68fa      	ldr	r2, [r7, #12]
 8009a1a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	685a      	ldr	r2, [r3, #4]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	693a      	ldr	r2, [r7, #16]
 8009a28:	621a      	str	r2, [r3, #32]
}
 8009a2a:	bf00      	nop
 8009a2c:	371c      	adds	r7, #28
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a34:	4770      	bx	lr
 8009a36:	bf00      	nop
 8009a38:	feff8fff 	.word	0xfeff8fff
 8009a3c:	40010000 	.word	0x40010000
 8009a40:	40010400 	.word	0x40010400

08009a44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b087      	sub	sp, #28
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	60f8      	str	r0, [r7, #12]
 8009a4c:	60b9      	str	r1, [r7, #8]
 8009a4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	6a1b      	ldr	r3, [r3, #32]
 8009a54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	6a1b      	ldr	r3, [r3, #32]
 8009a5a:	f023 0201 	bic.w	r2, r3, #1
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	699b      	ldr	r3, [r3, #24]
 8009a66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009a6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	011b      	lsls	r3, r3, #4
 8009a74:	693a      	ldr	r2, [r7, #16]
 8009a76:	4313      	orrs	r3, r2
 8009a78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	f023 030a 	bic.w	r3, r3, #10
 8009a80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009a82:	697a      	ldr	r2, [r7, #20]
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	4313      	orrs	r3, r2
 8009a88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	693a      	ldr	r2, [r7, #16]
 8009a8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	697a      	ldr	r2, [r7, #20]
 8009a94:	621a      	str	r2, [r3, #32]
}
 8009a96:	bf00      	nop
 8009a98:	371c      	adds	r7, #28
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa0:	4770      	bx	lr

08009aa2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009aa2:	b480      	push	{r7}
 8009aa4:	b087      	sub	sp, #28
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	60f8      	str	r0, [r7, #12]
 8009aaa:	60b9      	str	r1, [r7, #8]
 8009aac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	6a1b      	ldr	r3, [r3, #32]
 8009ab2:	f023 0210 	bic.w	r2, r3, #16
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	699b      	ldr	r3, [r3, #24]
 8009abe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	6a1b      	ldr	r3, [r3, #32]
 8009ac4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009acc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	031b      	lsls	r3, r3, #12
 8009ad2:	697a      	ldr	r2, [r7, #20]
 8009ad4:	4313      	orrs	r3, r2
 8009ad6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009ade:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	011b      	lsls	r3, r3, #4
 8009ae4:	693a      	ldr	r2, [r7, #16]
 8009ae6:	4313      	orrs	r3, r2
 8009ae8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	697a      	ldr	r2, [r7, #20]
 8009aee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	693a      	ldr	r2, [r7, #16]
 8009af4:	621a      	str	r2, [r3, #32]
}
 8009af6:	bf00      	nop
 8009af8:	371c      	adds	r7, #28
 8009afa:	46bd      	mov	sp, r7
 8009afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b00:	4770      	bx	lr

08009b02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009b02:	b480      	push	{r7}
 8009b04:	b085      	sub	sp, #20
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	6078      	str	r0, [r7, #4]
 8009b0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	689b      	ldr	r3, [r3, #8]
 8009b10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009b1a:	683a      	ldr	r2, [r7, #0]
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	f043 0307 	orr.w	r3, r3, #7
 8009b24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	68fa      	ldr	r2, [r7, #12]
 8009b2a:	609a      	str	r2, [r3, #8]
}
 8009b2c:	bf00      	nop
 8009b2e:	3714      	adds	r7, #20
 8009b30:	46bd      	mov	sp, r7
 8009b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b36:	4770      	bx	lr

08009b38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b087      	sub	sp, #28
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	60f8      	str	r0, [r7, #12]
 8009b40:	60b9      	str	r1, [r7, #8]
 8009b42:	607a      	str	r2, [r7, #4]
 8009b44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	689b      	ldr	r3, [r3, #8]
 8009b4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009b52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	021a      	lsls	r2, r3, #8
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	431a      	orrs	r2, r3
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	697a      	ldr	r2, [r7, #20]
 8009b62:	4313      	orrs	r3, r2
 8009b64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	697a      	ldr	r2, [r7, #20]
 8009b6a:	609a      	str	r2, [r3, #8]
}
 8009b6c:	bf00      	nop
 8009b6e:	371c      	adds	r7, #28
 8009b70:	46bd      	mov	sp, r7
 8009b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b76:	4770      	bx	lr

08009b78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b085      	sub	sp, #20
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b88:	2b01      	cmp	r3, #1
 8009b8a:	d101      	bne.n	8009b90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009b8c:	2302      	movs	r3, #2
 8009b8e:	e06d      	b.n	8009c6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2201      	movs	r2, #1
 8009b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2202      	movs	r2, #2
 8009b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	685b      	ldr	r3, [r3, #4]
 8009ba6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	689b      	ldr	r3, [r3, #8]
 8009bae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	4a30      	ldr	r2, [pc, #192]	; (8009c78 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d004      	beq.n	8009bc4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	4a2f      	ldr	r2, [pc, #188]	; (8009c7c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d108      	bne.n	8009bd6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009bca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	685b      	ldr	r3, [r3, #4]
 8009bd0:	68fa      	ldr	r2, [r7, #12]
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bdc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	68fa      	ldr	r2, [r7, #12]
 8009be4:	4313      	orrs	r3, r2
 8009be6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	68fa      	ldr	r2, [r7, #12]
 8009bee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	4a20      	ldr	r2, [pc, #128]	; (8009c78 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	d022      	beq.n	8009c40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c02:	d01d      	beq.n	8009c40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	4a1d      	ldr	r2, [pc, #116]	; (8009c80 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d018      	beq.n	8009c40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	4a1c      	ldr	r2, [pc, #112]	; (8009c84 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d013      	beq.n	8009c40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	4a1a      	ldr	r2, [pc, #104]	; (8009c88 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d00e      	beq.n	8009c40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	4a15      	ldr	r2, [pc, #84]	; (8009c7c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009c28:	4293      	cmp	r3, r2
 8009c2a:	d009      	beq.n	8009c40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	4a16      	ldr	r2, [pc, #88]	; (8009c8c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d004      	beq.n	8009c40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	4a15      	ldr	r2, [pc, #84]	; (8009c90 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d10c      	bne.n	8009c5a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c46:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	689b      	ldr	r3, [r3, #8]
 8009c4c:	68ba      	ldr	r2, [r7, #8]
 8009c4e:	4313      	orrs	r3, r2
 8009c50:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	68ba      	ldr	r2, [r7, #8]
 8009c58:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2201      	movs	r2, #1
 8009c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2200      	movs	r2, #0
 8009c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009c6a:	2300      	movs	r3, #0
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	3714      	adds	r7, #20
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr
 8009c78:	40010000 	.word	0x40010000
 8009c7c:	40010400 	.word	0x40010400
 8009c80:	40000400 	.word	0x40000400
 8009c84:	40000800 	.word	0x40000800
 8009c88:	40000c00 	.word	0x40000c00
 8009c8c:	40014000 	.word	0x40014000
 8009c90:	40001800 	.word	0x40001800

08009c94 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b085      	sub	sp, #20
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ca8:	2b01      	cmp	r3, #1
 8009caa:	d101      	bne.n	8009cb0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009cac:	2302      	movs	r3, #2
 8009cae:	e065      	b.n	8009d7c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	68db      	ldr	r3, [r3, #12]
 8009cc2:	4313      	orrs	r3, r2
 8009cc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	689b      	ldr	r3, [r3, #8]
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	685b      	ldr	r3, [r3, #4]
 8009cde:	4313      	orrs	r3, r2
 8009ce0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	4313      	orrs	r3, r2
 8009cee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	691b      	ldr	r3, [r3, #16]
 8009cfa:	4313      	orrs	r3, r2
 8009cfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	695b      	ldr	r3, [r3, #20]
 8009d08:	4313      	orrs	r3, r2
 8009d0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d16:	4313      	orrs	r3, r2
 8009d18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	699b      	ldr	r3, [r3, #24]
 8009d24:	041b      	lsls	r3, r3, #16
 8009d26:	4313      	orrs	r3, r2
 8009d28:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	4a16      	ldr	r2, [pc, #88]	; (8009d88 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d004      	beq.n	8009d3e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	4a14      	ldr	r2, [pc, #80]	; (8009d8c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d115      	bne.n	8009d6a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d48:	051b      	lsls	r3, r3, #20
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	69db      	ldr	r3, [r3, #28]
 8009d58:	4313      	orrs	r3, r2
 8009d5a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	6a1b      	ldr	r3, [r3, #32]
 8009d66:	4313      	orrs	r3, r2
 8009d68:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	68fa      	ldr	r2, [r7, #12]
 8009d70:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2200      	movs	r2, #0
 8009d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009d7a:	2300      	movs	r3, #0
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3714      	adds	r7, #20
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr
 8009d88:	40010000 	.word	0x40010000
 8009d8c:	40010400 	.word	0x40010400

08009d90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b083      	sub	sp, #12
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009d98:	bf00      	nop
 8009d9a:	370c      	adds	r7, #12
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da2:	4770      	bx	lr

08009da4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b083      	sub	sp, #12
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009dac:	bf00      	nop
 8009dae:	370c      	adds	r7, #12
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr

08009db8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b083      	sub	sp, #12
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009dc0:	bf00      	nop
 8009dc2:	370c      	adds	r7, #12
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr

08009dcc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b082      	sub	sp, #8
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d101      	bne.n	8009dde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009dda:	2301      	movs	r3, #1
 8009ddc:	e040      	b.n	8009e60 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d106      	bne.n	8009df4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2200      	movs	r2, #0
 8009dea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f7f8 fd5e 	bl	80028b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2224      	movs	r2, #36	; 0x24
 8009df8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	681a      	ldr	r2, [r3, #0]
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f022 0201 	bic.w	r2, r2, #1
 8009e08:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f000 f82c 	bl	8009e68 <UART_SetConfig>
 8009e10:	4603      	mov	r3, r0
 8009e12:	2b01      	cmp	r3, #1
 8009e14:	d101      	bne.n	8009e1a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009e16:	2301      	movs	r3, #1
 8009e18:	e022      	b.n	8009e60 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d002      	beq.n	8009e28 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f000 faca 	bl	800a3bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	685a      	ldr	r2, [r3, #4]
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009e36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	689a      	ldr	r2, [r3, #8]
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009e46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	681a      	ldr	r2, [r3, #0]
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f042 0201 	orr.w	r2, r2, #1
 8009e56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f000 fb51 	bl	800a500 <UART_CheckIdleState>
 8009e5e:	4603      	mov	r3, r0
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3708      	adds	r7, #8
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}

08009e68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b088      	sub	sp, #32
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8009e70:	2300      	movs	r3, #0
 8009e72:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8009e74:	2300      	movs	r3, #0
 8009e76:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	689a      	ldr	r2, [r3, #8]
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	691b      	ldr	r3, [r3, #16]
 8009e80:	431a      	orrs	r2, r3
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	695b      	ldr	r3, [r3, #20]
 8009e86:	431a      	orrs	r2, r3
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	69db      	ldr	r3, [r3, #28]
 8009e8c:	4313      	orrs	r3, r2
 8009e8e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	681a      	ldr	r2, [r3, #0]
 8009e96:	4bb1      	ldr	r3, [pc, #708]	; (800a15c <UART_SetConfig+0x2f4>)
 8009e98:	4013      	ands	r3, r2
 8009e9a:	687a      	ldr	r2, [r7, #4]
 8009e9c:	6812      	ldr	r2, [r2, #0]
 8009e9e:	6939      	ldr	r1, [r7, #16]
 8009ea0:	430b      	orrs	r3, r1
 8009ea2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	685b      	ldr	r3, [r3, #4]
 8009eaa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	68da      	ldr	r2, [r3, #12]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	430a      	orrs	r2, r1
 8009eb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	699b      	ldr	r3, [r3, #24]
 8009ebe:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6a1b      	ldr	r3, [r3, #32]
 8009ec4:	693a      	ldr	r2, [r7, #16]
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	689b      	ldr	r3, [r3, #8]
 8009ed0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	693a      	ldr	r2, [r7, #16]
 8009eda:	430a      	orrs	r2, r1
 8009edc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	4a9f      	ldr	r2, [pc, #636]	; (800a160 <UART_SetConfig+0x2f8>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d121      	bne.n	8009f2c <UART_SetConfig+0xc4>
 8009ee8:	4b9e      	ldr	r3, [pc, #632]	; (800a164 <UART_SetConfig+0x2fc>)
 8009eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009eee:	f003 0303 	and.w	r3, r3, #3
 8009ef2:	2b03      	cmp	r3, #3
 8009ef4:	d816      	bhi.n	8009f24 <UART_SetConfig+0xbc>
 8009ef6:	a201      	add	r2, pc, #4	; (adr r2, 8009efc <UART_SetConfig+0x94>)
 8009ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009efc:	08009f0d 	.word	0x08009f0d
 8009f00:	08009f19 	.word	0x08009f19
 8009f04:	08009f13 	.word	0x08009f13
 8009f08:	08009f1f 	.word	0x08009f1f
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	77fb      	strb	r3, [r7, #31]
 8009f10:	e151      	b.n	800a1b6 <UART_SetConfig+0x34e>
 8009f12:	2302      	movs	r3, #2
 8009f14:	77fb      	strb	r3, [r7, #31]
 8009f16:	e14e      	b.n	800a1b6 <UART_SetConfig+0x34e>
 8009f18:	2304      	movs	r3, #4
 8009f1a:	77fb      	strb	r3, [r7, #31]
 8009f1c:	e14b      	b.n	800a1b6 <UART_SetConfig+0x34e>
 8009f1e:	2308      	movs	r3, #8
 8009f20:	77fb      	strb	r3, [r7, #31]
 8009f22:	e148      	b.n	800a1b6 <UART_SetConfig+0x34e>
 8009f24:	2310      	movs	r3, #16
 8009f26:	77fb      	strb	r3, [r7, #31]
 8009f28:	bf00      	nop
 8009f2a:	e144      	b.n	800a1b6 <UART_SetConfig+0x34e>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4a8d      	ldr	r2, [pc, #564]	; (800a168 <UART_SetConfig+0x300>)
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d134      	bne.n	8009fa0 <UART_SetConfig+0x138>
 8009f36:	4b8b      	ldr	r3, [pc, #556]	; (800a164 <UART_SetConfig+0x2fc>)
 8009f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f3c:	f003 030c 	and.w	r3, r3, #12
 8009f40:	2b0c      	cmp	r3, #12
 8009f42:	d829      	bhi.n	8009f98 <UART_SetConfig+0x130>
 8009f44:	a201      	add	r2, pc, #4	; (adr r2, 8009f4c <UART_SetConfig+0xe4>)
 8009f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f4a:	bf00      	nop
 8009f4c:	08009f81 	.word	0x08009f81
 8009f50:	08009f99 	.word	0x08009f99
 8009f54:	08009f99 	.word	0x08009f99
 8009f58:	08009f99 	.word	0x08009f99
 8009f5c:	08009f8d 	.word	0x08009f8d
 8009f60:	08009f99 	.word	0x08009f99
 8009f64:	08009f99 	.word	0x08009f99
 8009f68:	08009f99 	.word	0x08009f99
 8009f6c:	08009f87 	.word	0x08009f87
 8009f70:	08009f99 	.word	0x08009f99
 8009f74:	08009f99 	.word	0x08009f99
 8009f78:	08009f99 	.word	0x08009f99
 8009f7c:	08009f93 	.word	0x08009f93
 8009f80:	2300      	movs	r3, #0
 8009f82:	77fb      	strb	r3, [r7, #31]
 8009f84:	e117      	b.n	800a1b6 <UART_SetConfig+0x34e>
 8009f86:	2302      	movs	r3, #2
 8009f88:	77fb      	strb	r3, [r7, #31]
 8009f8a:	e114      	b.n	800a1b6 <UART_SetConfig+0x34e>
 8009f8c:	2304      	movs	r3, #4
 8009f8e:	77fb      	strb	r3, [r7, #31]
 8009f90:	e111      	b.n	800a1b6 <UART_SetConfig+0x34e>
 8009f92:	2308      	movs	r3, #8
 8009f94:	77fb      	strb	r3, [r7, #31]
 8009f96:	e10e      	b.n	800a1b6 <UART_SetConfig+0x34e>
 8009f98:	2310      	movs	r3, #16
 8009f9a:	77fb      	strb	r3, [r7, #31]
 8009f9c:	bf00      	nop
 8009f9e:	e10a      	b.n	800a1b6 <UART_SetConfig+0x34e>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4a71      	ldr	r2, [pc, #452]	; (800a16c <UART_SetConfig+0x304>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d120      	bne.n	8009fec <UART_SetConfig+0x184>
 8009faa:	4b6e      	ldr	r3, [pc, #440]	; (800a164 <UART_SetConfig+0x2fc>)
 8009fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fb0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009fb4:	2b10      	cmp	r3, #16
 8009fb6:	d00f      	beq.n	8009fd8 <UART_SetConfig+0x170>
 8009fb8:	2b10      	cmp	r3, #16
 8009fba:	d802      	bhi.n	8009fc2 <UART_SetConfig+0x15a>
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d005      	beq.n	8009fcc <UART_SetConfig+0x164>
 8009fc0:	e010      	b.n	8009fe4 <UART_SetConfig+0x17c>
 8009fc2:	2b20      	cmp	r3, #32
 8009fc4:	d005      	beq.n	8009fd2 <UART_SetConfig+0x16a>
 8009fc6:	2b30      	cmp	r3, #48	; 0x30
 8009fc8:	d009      	beq.n	8009fde <UART_SetConfig+0x176>
 8009fca:	e00b      	b.n	8009fe4 <UART_SetConfig+0x17c>
 8009fcc:	2300      	movs	r3, #0
 8009fce:	77fb      	strb	r3, [r7, #31]
 8009fd0:	e0f1      	b.n	800a1b6 <UART_SetConfig+0x34e>
 8009fd2:	2302      	movs	r3, #2
 8009fd4:	77fb      	strb	r3, [r7, #31]
 8009fd6:	e0ee      	b.n	800a1b6 <UART_SetConfig+0x34e>
 8009fd8:	2304      	movs	r3, #4
 8009fda:	77fb      	strb	r3, [r7, #31]
 8009fdc:	e0eb      	b.n	800a1b6 <UART_SetConfig+0x34e>
 8009fde:	2308      	movs	r3, #8
 8009fe0:	77fb      	strb	r3, [r7, #31]
 8009fe2:	e0e8      	b.n	800a1b6 <UART_SetConfig+0x34e>
 8009fe4:	2310      	movs	r3, #16
 8009fe6:	77fb      	strb	r3, [r7, #31]
 8009fe8:	bf00      	nop
 8009fea:	e0e4      	b.n	800a1b6 <UART_SetConfig+0x34e>
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	4a5f      	ldr	r2, [pc, #380]	; (800a170 <UART_SetConfig+0x308>)
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d120      	bne.n	800a038 <UART_SetConfig+0x1d0>
 8009ff6:	4b5b      	ldr	r3, [pc, #364]	; (800a164 <UART_SetConfig+0x2fc>)
 8009ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ffc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a000:	2b40      	cmp	r3, #64	; 0x40
 800a002:	d00f      	beq.n	800a024 <UART_SetConfig+0x1bc>
 800a004:	2b40      	cmp	r3, #64	; 0x40
 800a006:	d802      	bhi.n	800a00e <UART_SetConfig+0x1a6>
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d005      	beq.n	800a018 <UART_SetConfig+0x1b0>
 800a00c:	e010      	b.n	800a030 <UART_SetConfig+0x1c8>
 800a00e:	2b80      	cmp	r3, #128	; 0x80
 800a010:	d005      	beq.n	800a01e <UART_SetConfig+0x1b6>
 800a012:	2bc0      	cmp	r3, #192	; 0xc0
 800a014:	d009      	beq.n	800a02a <UART_SetConfig+0x1c2>
 800a016:	e00b      	b.n	800a030 <UART_SetConfig+0x1c8>
 800a018:	2300      	movs	r3, #0
 800a01a:	77fb      	strb	r3, [r7, #31]
 800a01c:	e0cb      	b.n	800a1b6 <UART_SetConfig+0x34e>
 800a01e:	2302      	movs	r3, #2
 800a020:	77fb      	strb	r3, [r7, #31]
 800a022:	e0c8      	b.n	800a1b6 <UART_SetConfig+0x34e>
 800a024:	2304      	movs	r3, #4
 800a026:	77fb      	strb	r3, [r7, #31]
 800a028:	e0c5      	b.n	800a1b6 <UART_SetConfig+0x34e>
 800a02a:	2308      	movs	r3, #8
 800a02c:	77fb      	strb	r3, [r7, #31]
 800a02e:	e0c2      	b.n	800a1b6 <UART_SetConfig+0x34e>
 800a030:	2310      	movs	r3, #16
 800a032:	77fb      	strb	r3, [r7, #31]
 800a034:	bf00      	nop
 800a036:	e0be      	b.n	800a1b6 <UART_SetConfig+0x34e>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	4a4d      	ldr	r2, [pc, #308]	; (800a174 <UART_SetConfig+0x30c>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d124      	bne.n	800a08c <UART_SetConfig+0x224>
 800a042:	4b48      	ldr	r3, [pc, #288]	; (800a164 <UART_SetConfig+0x2fc>)
 800a044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a048:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a04c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a050:	d012      	beq.n	800a078 <UART_SetConfig+0x210>
 800a052:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a056:	d802      	bhi.n	800a05e <UART_SetConfig+0x1f6>
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d007      	beq.n	800a06c <UART_SetConfig+0x204>
 800a05c:	e012      	b.n	800a084 <UART_SetConfig+0x21c>
 800a05e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a062:	d006      	beq.n	800a072 <UART_SetConfig+0x20a>
 800a064:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a068:	d009      	beq.n	800a07e <UART_SetConfig+0x216>
 800a06a:	e00b      	b.n	800a084 <UART_SetConfig+0x21c>
 800a06c:	2300      	movs	r3, #0
 800a06e:	77fb      	strb	r3, [r7, #31]
 800a070:	e0a1      	b.n	800a1b6 <UART_SetConfig+0x34e>
 800a072:	2302      	movs	r3, #2
 800a074:	77fb      	strb	r3, [r7, #31]
 800a076:	e09e      	b.n	800a1b6 <UART_SetConfig+0x34e>
 800a078:	2304      	movs	r3, #4
 800a07a:	77fb      	strb	r3, [r7, #31]
 800a07c:	e09b      	b.n	800a1b6 <UART_SetConfig+0x34e>
 800a07e:	2308      	movs	r3, #8
 800a080:	77fb      	strb	r3, [r7, #31]
 800a082:	e098      	b.n	800a1b6 <UART_SetConfig+0x34e>
 800a084:	2310      	movs	r3, #16
 800a086:	77fb      	strb	r3, [r7, #31]
 800a088:	bf00      	nop
 800a08a:	e094      	b.n	800a1b6 <UART_SetConfig+0x34e>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	4a39      	ldr	r2, [pc, #228]	; (800a178 <UART_SetConfig+0x310>)
 800a092:	4293      	cmp	r3, r2
 800a094:	d124      	bne.n	800a0e0 <UART_SetConfig+0x278>
 800a096:	4b33      	ldr	r3, [pc, #204]	; (800a164 <UART_SetConfig+0x2fc>)
 800a098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a09c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a0a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0a4:	d012      	beq.n	800a0cc <UART_SetConfig+0x264>
 800a0a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0aa:	d802      	bhi.n	800a0b2 <UART_SetConfig+0x24a>
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d007      	beq.n	800a0c0 <UART_SetConfig+0x258>
 800a0b0:	e012      	b.n	800a0d8 <UART_SetConfig+0x270>
 800a0b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a0b6:	d006      	beq.n	800a0c6 <UART_SetConfig+0x25e>
 800a0b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a0bc:	d009      	beq.n	800a0d2 <UART_SetConfig+0x26a>
 800a0be:	e00b      	b.n	800a0d8 <UART_SetConfig+0x270>
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	77fb      	strb	r3, [r7, #31]
 800a0c4:	e077      	b.n	800a1b6 <UART_SetConfig+0x34e>
 800a0c6:	2302      	movs	r3, #2
 800a0c8:	77fb      	strb	r3, [r7, #31]
 800a0ca:	e074      	b.n	800a1b6 <UART_SetConfig+0x34e>
 800a0cc:	2304      	movs	r3, #4
 800a0ce:	77fb      	strb	r3, [r7, #31]
 800a0d0:	e071      	b.n	800a1b6 <UART_SetConfig+0x34e>
 800a0d2:	2308      	movs	r3, #8
 800a0d4:	77fb      	strb	r3, [r7, #31]
 800a0d6:	e06e      	b.n	800a1b6 <UART_SetConfig+0x34e>
 800a0d8:	2310      	movs	r3, #16
 800a0da:	77fb      	strb	r3, [r7, #31]
 800a0dc:	bf00      	nop
 800a0de:	e06a      	b.n	800a1b6 <UART_SetConfig+0x34e>
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	4a25      	ldr	r2, [pc, #148]	; (800a17c <UART_SetConfig+0x314>)
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d124      	bne.n	800a134 <UART_SetConfig+0x2cc>
 800a0ea:	4b1e      	ldr	r3, [pc, #120]	; (800a164 <UART_SetConfig+0x2fc>)
 800a0ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0f0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a0f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0f8:	d012      	beq.n	800a120 <UART_SetConfig+0x2b8>
 800a0fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0fe:	d802      	bhi.n	800a106 <UART_SetConfig+0x29e>
 800a100:	2b00      	cmp	r3, #0
 800a102:	d007      	beq.n	800a114 <UART_SetConfig+0x2ac>
 800a104:	e012      	b.n	800a12c <UART_SetConfig+0x2c4>
 800a106:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a10a:	d006      	beq.n	800a11a <UART_SetConfig+0x2b2>
 800a10c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a110:	d009      	beq.n	800a126 <UART_SetConfig+0x2be>
 800a112:	e00b      	b.n	800a12c <UART_SetConfig+0x2c4>
 800a114:	2300      	movs	r3, #0
 800a116:	77fb      	strb	r3, [r7, #31]
 800a118:	e04d      	b.n	800a1b6 <UART_SetConfig+0x34e>
 800a11a:	2302      	movs	r3, #2
 800a11c:	77fb      	strb	r3, [r7, #31]
 800a11e:	e04a      	b.n	800a1b6 <UART_SetConfig+0x34e>
 800a120:	2304      	movs	r3, #4
 800a122:	77fb      	strb	r3, [r7, #31]
 800a124:	e047      	b.n	800a1b6 <UART_SetConfig+0x34e>
 800a126:	2308      	movs	r3, #8
 800a128:	77fb      	strb	r3, [r7, #31]
 800a12a:	e044      	b.n	800a1b6 <UART_SetConfig+0x34e>
 800a12c:	2310      	movs	r3, #16
 800a12e:	77fb      	strb	r3, [r7, #31]
 800a130:	bf00      	nop
 800a132:	e040      	b.n	800a1b6 <UART_SetConfig+0x34e>
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	4a11      	ldr	r2, [pc, #68]	; (800a180 <UART_SetConfig+0x318>)
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d139      	bne.n	800a1b2 <UART_SetConfig+0x34a>
 800a13e:	4b09      	ldr	r3, [pc, #36]	; (800a164 <UART_SetConfig+0x2fc>)
 800a140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a144:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a148:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a14c:	d027      	beq.n	800a19e <UART_SetConfig+0x336>
 800a14e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a152:	d817      	bhi.n	800a184 <UART_SetConfig+0x31c>
 800a154:	2b00      	cmp	r3, #0
 800a156:	d01c      	beq.n	800a192 <UART_SetConfig+0x32a>
 800a158:	e027      	b.n	800a1aa <UART_SetConfig+0x342>
 800a15a:	bf00      	nop
 800a15c:	efff69f3 	.word	0xefff69f3
 800a160:	40011000 	.word	0x40011000
 800a164:	40023800 	.word	0x40023800
 800a168:	40004400 	.word	0x40004400
 800a16c:	40004800 	.word	0x40004800
 800a170:	40004c00 	.word	0x40004c00
 800a174:	40005000 	.word	0x40005000
 800a178:	40011400 	.word	0x40011400
 800a17c:	40007800 	.word	0x40007800
 800a180:	40007c00 	.word	0x40007c00
 800a184:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a188:	d006      	beq.n	800a198 <UART_SetConfig+0x330>
 800a18a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a18e:	d009      	beq.n	800a1a4 <UART_SetConfig+0x33c>
 800a190:	e00b      	b.n	800a1aa <UART_SetConfig+0x342>
 800a192:	2300      	movs	r3, #0
 800a194:	77fb      	strb	r3, [r7, #31]
 800a196:	e00e      	b.n	800a1b6 <UART_SetConfig+0x34e>
 800a198:	2302      	movs	r3, #2
 800a19a:	77fb      	strb	r3, [r7, #31]
 800a19c:	e00b      	b.n	800a1b6 <UART_SetConfig+0x34e>
 800a19e:	2304      	movs	r3, #4
 800a1a0:	77fb      	strb	r3, [r7, #31]
 800a1a2:	e008      	b.n	800a1b6 <UART_SetConfig+0x34e>
 800a1a4:	2308      	movs	r3, #8
 800a1a6:	77fb      	strb	r3, [r7, #31]
 800a1a8:	e005      	b.n	800a1b6 <UART_SetConfig+0x34e>
 800a1aa:	2310      	movs	r3, #16
 800a1ac:	77fb      	strb	r3, [r7, #31]
 800a1ae:	bf00      	nop
 800a1b0:	e001      	b.n	800a1b6 <UART_SetConfig+0x34e>
 800a1b2:	2310      	movs	r3, #16
 800a1b4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	69db      	ldr	r3, [r3, #28]
 800a1ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1be:	d17f      	bne.n	800a2c0 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800a1c0:	7ffb      	ldrb	r3, [r7, #31]
 800a1c2:	2b08      	cmp	r3, #8
 800a1c4:	d85c      	bhi.n	800a280 <UART_SetConfig+0x418>
 800a1c6:	a201      	add	r2, pc, #4	; (adr r2, 800a1cc <UART_SetConfig+0x364>)
 800a1c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1cc:	0800a1f1 	.word	0x0800a1f1
 800a1d0:	0800a211 	.word	0x0800a211
 800a1d4:	0800a231 	.word	0x0800a231
 800a1d8:	0800a281 	.word	0x0800a281
 800a1dc:	0800a249 	.word	0x0800a249
 800a1e0:	0800a281 	.word	0x0800a281
 800a1e4:	0800a281 	.word	0x0800a281
 800a1e8:	0800a281 	.word	0x0800a281
 800a1ec:	0800a269 	.word	0x0800a269
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a1f0:	f7fc f8d0 	bl	8006394 <HAL_RCC_GetPCLK1Freq>
 800a1f4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	005a      	lsls	r2, r3, #1
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	685b      	ldr	r3, [r3, #4]
 800a1fe:	085b      	lsrs	r3, r3, #1
 800a200:	441a      	add	r2, r3
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	fbb2 f3f3 	udiv	r3, r2, r3
 800a20a:	b29b      	uxth	r3, r3
 800a20c:	61bb      	str	r3, [r7, #24]
        break;
 800a20e:	e03a      	b.n	800a286 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a210:	f7fc f8d4 	bl	80063bc <HAL_RCC_GetPCLK2Freq>
 800a214:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	005a      	lsls	r2, r3, #1
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	685b      	ldr	r3, [r3, #4]
 800a21e:	085b      	lsrs	r3, r3, #1
 800a220:	441a      	add	r2, r3
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	685b      	ldr	r3, [r3, #4]
 800a226:	fbb2 f3f3 	udiv	r3, r2, r3
 800a22a:	b29b      	uxth	r3, r3
 800a22c:	61bb      	str	r3, [r7, #24]
        break;
 800a22e:	e02a      	b.n	800a286 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	685b      	ldr	r3, [r3, #4]
 800a234:	085a      	lsrs	r2, r3, #1
 800a236:	4b5f      	ldr	r3, [pc, #380]	; (800a3b4 <UART_SetConfig+0x54c>)
 800a238:	4413      	add	r3, r2
 800a23a:	687a      	ldr	r2, [r7, #4]
 800a23c:	6852      	ldr	r2, [r2, #4]
 800a23e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a242:	b29b      	uxth	r3, r3
 800a244:	61bb      	str	r3, [r7, #24]
        break;
 800a246:	e01e      	b.n	800a286 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a248:	f7fb ffe6 	bl	8006218 <HAL_RCC_GetSysClockFreq>
 800a24c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	005a      	lsls	r2, r3, #1
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	685b      	ldr	r3, [r3, #4]
 800a256:	085b      	lsrs	r3, r3, #1
 800a258:	441a      	add	r2, r3
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	685b      	ldr	r3, [r3, #4]
 800a25e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a262:	b29b      	uxth	r3, r3
 800a264:	61bb      	str	r3, [r7, #24]
        break;
 800a266:	e00e      	b.n	800a286 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	685b      	ldr	r3, [r3, #4]
 800a26c:	085b      	lsrs	r3, r3, #1
 800a26e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	fbb2 f3f3 	udiv	r3, r2, r3
 800a27a:	b29b      	uxth	r3, r3
 800a27c:	61bb      	str	r3, [r7, #24]
        break;
 800a27e:	e002      	b.n	800a286 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800a280:	2301      	movs	r3, #1
 800a282:	75fb      	strb	r3, [r7, #23]
        break;
 800a284:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a286:	69bb      	ldr	r3, [r7, #24]
 800a288:	2b0f      	cmp	r3, #15
 800a28a:	d916      	bls.n	800a2ba <UART_SetConfig+0x452>
 800a28c:	69bb      	ldr	r3, [r7, #24]
 800a28e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a292:	d212      	bcs.n	800a2ba <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a294:	69bb      	ldr	r3, [r7, #24]
 800a296:	b29b      	uxth	r3, r3
 800a298:	f023 030f 	bic.w	r3, r3, #15
 800a29c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a29e:	69bb      	ldr	r3, [r7, #24]
 800a2a0:	085b      	lsrs	r3, r3, #1
 800a2a2:	b29b      	uxth	r3, r3
 800a2a4:	f003 0307 	and.w	r3, r3, #7
 800a2a8:	b29a      	uxth	r2, r3
 800a2aa:	897b      	ldrh	r3, [r7, #10]
 800a2ac:	4313      	orrs	r3, r2
 800a2ae:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	897a      	ldrh	r2, [r7, #10]
 800a2b6:	60da      	str	r2, [r3, #12]
 800a2b8:	e070      	b.n	800a39c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	75fb      	strb	r3, [r7, #23]
 800a2be:	e06d      	b.n	800a39c <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800a2c0:	7ffb      	ldrb	r3, [r7, #31]
 800a2c2:	2b08      	cmp	r3, #8
 800a2c4:	d859      	bhi.n	800a37a <UART_SetConfig+0x512>
 800a2c6:	a201      	add	r2, pc, #4	; (adr r2, 800a2cc <UART_SetConfig+0x464>)
 800a2c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2cc:	0800a2f1 	.word	0x0800a2f1
 800a2d0:	0800a30f 	.word	0x0800a30f
 800a2d4:	0800a32d 	.word	0x0800a32d
 800a2d8:	0800a37b 	.word	0x0800a37b
 800a2dc:	0800a345 	.word	0x0800a345
 800a2e0:	0800a37b 	.word	0x0800a37b
 800a2e4:	0800a37b 	.word	0x0800a37b
 800a2e8:	0800a37b 	.word	0x0800a37b
 800a2ec:	0800a363 	.word	0x0800a363
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a2f0:	f7fc f850 	bl	8006394 <HAL_RCC_GetPCLK1Freq>
 800a2f4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	685b      	ldr	r3, [r3, #4]
 800a2fa:	085a      	lsrs	r2, r3, #1
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	441a      	add	r2, r3
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	685b      	ldr	r3, [r3, #4]
 800a304:	fbb2 f3f3 	udiv	r3, r2, r3
 800a308:	b29b      	uxth	r3, r3
 800a30a:	61bb      	str	r3, [r7, #24]
        break;
 800a30c:	e038      	b.n	800a380 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a30e:	f7fc f855 	bl	80063bc <HAL_RCC_GetPCLK2Freq>
 800a312:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	685b      	ldr	r3, [r3, #4]
 800a318:	085a      	lsrs	r2, r3, #1
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	441a      	add	r2, r3
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	685b      	ldr	r3, [r3, #4]
 800a322:	fbb2 f3f3 	udiv	r3, r2, r3
 800a326:	b29b      	uxth	r3, r3
 800a328:	61bb      	str	r3, [r7, #24]
        break;
 800a32a:	e029      	b.n	800a380 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	685b      	ldr	r3, [r3, #4]
 800a330:	085a      	lsrs	r2, r3, #1
 800a332:	4b21      	ldr	r3, [pc, #132]	; (800a3b8 <UART_SetConfig+0x550>)
 800a334:	4413      	add	r3, r2
 800a336:	687a      	ldr	r2, [r7, #4]
 800a338:	6852      	ldr	r2, [r2, #4]
 800a33a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a33e:	b29b      	uxth	r3, r3
 800a340:	61bb      	str	r3, [r7, #24]
        break;
 800a342:	e01d      	b.n	800a380 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a344:	f7fb ff68 	bl	8006218 <HAL_RCC_GetSysClockFreq>
 800a348:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	685b      	ldr	r3, [r3, #4]
 800a34e:	085a      	lsrs	r2, r3, #1
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	441a      	add	r2, r3
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	685b      	ldr	r3, [r3, #4]
 800a358:	fbb2 f3f3 	udiv	r3, r2, r3
 800a35c:	b29b      	uxth	r3, r3
 800a35e:	61bb      	str	r3, [r7, #24]
        break;
 800a360:	e00e      	b.n	800a380 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	685b      	ldr	r3, [r3, #4]
 800a366:	085b      	lsrs	r3, r3, #1
 800a368:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	fbb2 f3f3 	udiv	r3, r2, r3
 800a374:	b29b      	uxth	r3, r3
 800a376:	61bb      	str	r3, [r7, #24]
        break;
 800a378:	e002      	b.n	800a380 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800a37a:	2301      	movs	r3, #1
 800a37c:	75fb      	strb	r3, [r7, #23]
        break;
 800a37e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a380:	69bb      	ldr	r3, [r7, #24]
 800a382:	2b0f      	cmp	r3, #15
 800a384:	d908      	bls.n	800a398 <UART_SetConfig+0x530>
 800a386:	69bb      	ldr	r3, [r7, #24]
 800a388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a38c:	d204      	bcs.n	800a398 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	69ba      	ldr	r2, [r7, #24]
 800a394:	60da      	str	r2, [r3, #12]
 800a396:	e001      	b.n	800a39c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800a398:	2301      	movs	r3, #1
 800a39a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2200      	movs	r2, #0
 800a3a0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800a3a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3720      	adds	r7, #32
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}
 800a3b2:	bf00      	nop
 800a3b4:	01e84800 	.word	0x01e84800
 800a3b8:	00f42400 	.word	0x00f42400

0800a3bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b083      	sub	sp, #12
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c8:	f003 0301 	and.w	r3, r3, #1
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d00a      	beq.n	800a3e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	685b      	ldr	r3, [r3, #4]
 800a3d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	430a      	orrs	r2, r1
 800a3e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ea:	f003 0302 	and.w	r3, r3, #2
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d00a      	beq.n	800a408 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	685b      	ldr	r3, [r3, #4]
 800a3f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	430a      	orrs	r2, r1
 800a406:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a40c:	f003 0304 	and.w	r3, r3, #4
 800a410:	2b00      	cmp	r3, #0
 800a412:	d00a      	beq.n	800a42a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	685b      	ldr	r3, [r3, #4]
 800a41a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	430a      	orrs	r2, r1
 800a428:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a42e:	f003 0308 	and.w	r3, r3, #8
 800a432:	2b00      	cmp	r3, #0
 800a434:	d00a      	beq.n	800a44c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	685b      	ldr	r3, [r3, #4]
 800a43c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	430a      	orrs	r2, r1
 800a44a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a450:	f003 0310 	and.w	r3, r3, #16
 800a454:	2b00      	cmp	r3, #0
 800a456:	d00a      	beq.n	800a46e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	689b      	ldr	r3, [r3, #8]
 800a45e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	430a      	orrs	r2, r1
 800a46c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a472:	f003 0320 	and.w	r3, r3, #32
 800a476:	2b00      	cmp	r3, #0
 800a478:	d00a      	beq.n	800a490 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	689b      	ldr	r3, [r3, #8]
 800a480:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	430a      	orrs	r2, r1
 800a48e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d01a      	beq.n	800a4d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	685b      	ldr	r3, [r3, #4]
 800a4a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	430a      	orrs	r2, r1
 800a4b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a4ba:	d10a      	bne.n	800a4d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	430a      	orrs	r2, r1
 800a4d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d00a      	beq.n	800a4f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	430a      	orrs	r2, r1
 800a4f2:	605a      	str	r2, [r3, #4]
  }
}
 800a4f4:	bf00      	nop
 800a4f6:	370c      	adds	r7, #12
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fe:	4770      	bx	lr

0800a500 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b086      	sub	sp, #24
 800a504:	af02      	add	r7, sp, #8
 800a506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2200      	movs	r2, #0
 800a50c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a50e:	f7f8 fd1d 	bl	8002f4c <HAL_GetTick>
 800a512:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f003 0308 	and.w	r3, r3, #8
 800a51e:	2b08      	cmp	r3, #8
 800a520:	d10e      	bne.n	800a540 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a522:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a526:	9300      	str	r3, [sp, #0]
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	2200      	movs	r2, #0
 800a52c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f000 f814 	bl	800a55e <UART_WaitOnFlagUntilTimeout>
 800a536:	4603      	mov	r3, r0
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d001      	beq.n	800a540 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a53c:	2303      	movs	r3, #3
 800a53e:	e00a      	b.n	800a556 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2220      	movs	r2, #32
 800a544:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2220      	movs	r2, #32
 800a54a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2200      	movs	r2, #0
 800a550:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800a554:	2300      	movs	r3, #0
}
 800a556:	4618      	mov	r0, r3
 800a558:	3710      	adds	r7, #16
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}

0800a55e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a55e:	b580      	push	{r7, lr}
 800a560:	b084      	sub	sp, #16
 800a562:	af00      	add	r7, sp, #0
 800a564:	60f8      	str	r0, [r7, #12]
 800a566:	60b9      	str	r1, [r7, #8]
 800a568:	603b      	str	r3, [r7, #0]
 800a56a:	4613      	mov	r3, r2
 800a56c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a56e:	e05d      	b.n	800a62c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a570:	69bb      	ldr	r3, [r7, #24]
 800a572:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a576:	d059      	beq.n	800a62c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a578:	f7f8 fce8 	bl	8002f4c <HAL_GetTick>
 800a57c:	4602      	mov	r2, r0
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	1ad3      	subs	r3, r2, r3
 800a582:	69ba      	ldr	r2, [r7, #24]
 800a584:	429a      	cmp	r2, r3
 800a586:	d302      	bcc.n	800a58e <UART_WaitOnFlagUntilTimeout+0x30>
 800a588:	69bb      	ldr	r3, [r7, #24]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d11b      	bne.n	800a5c6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	681a      	ldr	r2, [r3, #0]
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a59c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	689a      	ldr	r2, [r3, #8]
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f022 0201 	bic.w	r2, r2, #1
 800a5ac:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2220      	movs	r2, #32
 800a5b2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	2220      	movs	r2, #32
 800a5b8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800a5c2:	2303      	movs	r3, #3
 800a5c4:	e042      	b.n	800a64c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f003 0304 	and.w	r3, r3, #4
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d02b      	beq.n	800a62c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	69db      	ldr	r3, [r3, #28]
 800a5da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a5de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a5e2:	d123      	bne.n	800a62c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a5ec:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	681a      	ldr	r2, [r3, #0]
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a5fc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	689a      	ldr	r2, [r3, #8]
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f022 0201 	bic.w	r2, r2, #1
 800a60c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	2220      	movs	r2, #32
 800a612:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	2220      	movs	r2, #32
 800a618:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	2220      	movs	r2, #32
 800a61e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	2200      	movs	r2, #0
 800a624:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800a628:	2303      	movs	r3, #3
 800a62a:	e00f      	b.n	800a64c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	69da      	ldr	r2, [r3, #28]
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	4013      	ands	r3, r2
 800a636:	68ba      	ldr	r2, [r7, #8]
 800a638:	429a      	cmp	r2, r3
 800a63a:	bf0c      	ite	eq
 800a63c:	2301      	moveq	r3, #1
 800a63e:	2300      	movne	r3, #0
 800a640:	b2db      	uxtb	r3, r3
 800a642:	461a      	mov	r2, r3
 800a644:	79fb      	ldrb	r3, [r7, #7]
 800a646:	429a      	cmp	r2, r3
 800a648:	d092      	beq.n	800a570 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a64a:	2300      	movs	r3, #0
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3710      	adds	r7, #16
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}

0800a654 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a654:	b480      	push	{r7}
 800a656:	b085      	sub	sp, #20
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
 800a65c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800a65e:	2300      	movs	r3, #0
 800a660:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800a662:	2300      	movs	r3, #0
 800a664:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	2b01      	cmp	r3, #1
 800a66c:	d027      	beq.n	800a6be <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a674:	68fa      	ldr	r2, [r7, #12]
 800a676:	4b2f      	ldr	r3, [pc, #188]	; (800a734 <FMC_SDRAM_Init+0xe0>)
 800a678:	4013      	ands	r3, r2
 800a67a:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a684:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800a68a:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800a690:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800a696:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800a69c:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800a6a2:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800a6a8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800a6ae:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a6b0:	68fa      	ldr	r2, [r7, #12]
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	68fa      	ldr	r2, [r7, #12]
 800a6ba:	601a      	str	r2, [r3, #0]
 800a6bc:	e032      	b.n	800a724 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a6ca:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a6d4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800a6da:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a6dc:	68fa      	ldr	r2, [r7, #12]
 800a6de:	4313      	orrs	r3, r2
 800a6e0:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	685b      	ldr	r3, [r3, #4]
 800a6e6:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a6e8:	68ba      	ldr	r2, [r7, #8]
 800a6ea:	4b12      	ldr	r3, [pc, #72]	; (800a734 <FMC_SDRAM_Init+0xe0>)
 800a6ec:	4013      	ands	r3, r2
 800a6ee:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a6f8:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800a6fe:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800a704:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800a70a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800a710:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a712:	68ba      	ldr	r2, [r7, #8]
 800a714:	4313      	orrs	r3, r2
 800a716:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	68fa      	ldr	r2, [r7, #12]
 800a71c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	68ba      	ldr	r2, [r7, #8]
 800a722:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800a724:	2300      	movs	r3, #0
}
 800a726:	4618      	mov	r0, r3
 800a728:	3714      	adds	r7, #20
 800a72a:	46bd      	mov	sp, r7
 800a72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a730:	4770      	bx	lr
 800a732:	bf00      	nop
 800a734:	ffff8000 	.word	0xffff8000

0800a738 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a738:	b480      	push	{r7}
 800a73a:	b087      	sub	sp, #28
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	60f8      	str	r0, [r7, #12]
 800a740:	60b9      	str	r1, [r7, #8]
 800a742:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800a744:	2300      	movs	r3, #0
 800a746:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800a748:	2300      	movs	r3, #0
 800a74a:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2b01      	cmp	r3, #1
 800a750:	d02e      	beq.n	800a7b0 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	689b      	ldr	r3, [r3, #8]
 800a756:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a758:	697b      	ldr	r3, [r7, #20]
 800a75a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a75e:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	685b      	ldr	r3, [r3, #4]
 800a76a:	3b01      	subs	r3, #1
 800a76c:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a76e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	689b      	ldr	r3, [r3, #8]
 800a774:	3b01      	subs	r3, #1
 800a776:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800a778:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	68db      	ldr	r3, [r3, #12]
 800a77e:	3b01      	subs	r3, #1
 800a780:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800a782:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	691b      	ldr	r3, [r3, #16]
 800a788:	3b01      	subs	r3, #1
 800a78a:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800a78c:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	695b      	ldr	r3, [r3, #20]
 800a792:	3b01      	subs	r3, #1
 800a794:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800a796:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	699b      	ldr	r3, [r3, #24]
 800a79c:	3b01      	subs	r3, #1
 800a79e:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a7a0:	4313      	orrs	r3, r2
 800a7a2:	697a      	ldr	r2, [r7, #20]
 800a7a4:	4313      	orrs	r3, r2
 800a7a6:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	697a      	ldr	r2, [r7, #20]
 800a7ac:	609a      	str	r2, [r3, #8]
 800a7ae:	e039      	b.n	800a824 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	689b      	ldr	r3, [r3, #8]
 800a7b4:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800a7b6:	697a      	ldr	r2, [r7, #20]
 800a7b8:	4b1e      	ldr	r3, [pc, #120]	; (800a834 <FMC_SDRAM_Timing_Init+0xfc>)
 800a7ba:	4013      	ands	r3, r2
 800a7bc:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	68db      	ldr	r3, [r3, #12]
 800a7c2:	3b01      	subs	r3, #1
 800a7c4:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	695b      	ldr	r3, [r3, #20]
 800a7ca:	3b01      	subs	r3, #1
 800a7cc:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800a7ce:	4313      	orrs	r3, r2
 800a7d0:	697a      	ldr	r2, [r7, #20]
 800a7d2:	4313      	orrs	r3, r2
 800a7d4:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	68db      	ldr	r3, [r3, #12]
 800a7da:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a7e2:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	685b      	ldr	r3, [r3, #4]
 800a7ee:	3b01      	subs	r3, #1
 800a7f0:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a7f2:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	689b      	ldr	r3, [r3, #8]
 800a7f8:	3b01      	subs	r3, #1
 800a7fa:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800a7fc:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	691b      	ldr	r3, [r3, #16]
 800a802:	3b01      	subs	r3, #1
 800a804:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800a806:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	699b      	ldr	r3, [r3, #24]
 800a80c:	3b01      	subs	r3, #1
 800a80e:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a810:	4313      	orrs	r3, r2
 800a812:	693a      	ldr	r2, [r7, #16]
 800a814:	4313      	orrs	r3, r2
 800a816:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	697a      	ldr	r2, [r7, #20]
 800a81c:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	693a      	ldr	r2, [r7, #16]
 800a822:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800a824:	2300      	movs	r3, #0
}
 800a826:	4618      	mov	r0, r3
 800a828:	371c      	adds	r7, #28
 800a82a:	46bd      	mov	sp, r7
 800a82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a830:	4770      	bx	lr
 800a832:	bf00      	nop
 800a834:	ff0f0fff 	.word	0xff0f0fff

0800a838 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a838:	b480      	push	{r7}
 800a83a:	b087      	sub	sp, #28
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	60f8      	str	r0, [r7, #12]
 800a840:	60b9      	str	r1, [r7, #8]
 800a842:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800a844:	2300      	movs	r3, #0
 800a846:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a850:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	689b      	ldr	r3, [r3, #8]
 800a856:	3b01      	subs	r3, #1
 800a858:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800a85a:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	68db      	ldr	r3, [r3, #12]
 800a860:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a862:	4313      	orrs	r3, r2
 800a864:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800a866:	697a      	ldr	r2, [r7, #20]
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800a86c:	2300      	movs	r3, #0
}
 800a86e:	4618      	mov	r0, r3
 800a870:	371c      	adds	r7, #28
 800a872:	46bd      	mov	sp, r7
 800a874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a878:	4770      	bx	lr

0800a87a <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800a87a:	b480      	push	{r7}
 800a87c:	b083      	sub	sp, #12
 800a87e:	af00      	add	r7, sp, #0
 800a880:	6078      	str	r0, [r7, #4]
 800a882:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	695a      	ldr	r2, [r3, #20]
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	005b      	lsls	r3, r3, #1
 800a88c:	431a      	orrs	r2, r3
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800a892:	2300      	movs	r3, #0
}
 800a894:	4618      	mov	r0, r3
 800a896:	370c      	adds	r7, #12
 800a898:	46bd      	mov	sp, r7
 800a89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89e:	4770      	bx	lr

0800a8a0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800a8a0:	b084      	sub	sp, #16
 800a8a2:	b480      	push	{r7}
 800a8a4:	b085      	sub	sp, #20
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	6078      	str	r0, [r7, #4]
 800a8aa:	f107 001c 	add.w	r0, r7, #28
 800a8ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a8b6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a8b8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a8ba:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800a8be:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800a8c2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a8c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800a8c6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a8c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800a8ca:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a8cc:	68fa      	ldr	r2, [r7, #12]
 800a8ce:	4313      	orrs	r3, r2
 800a8d0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	685a      	ldr	r2, [r3, #4]
 800a8d6:	4b07      	ldr	r3, [pc, #28]	; (800a8f4 <SDMMC_Init+0x54>)
 800a8d8:	4013      	ands	r3, r2
 800a8da:	68fa      	ldr	r2, [r7, #12]
 800a8dc:	431a      	orrs	r2, r3
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a8e2:	2300      	movs	r3, #0
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3714      	adds	r7, #20
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ee:	b004      	add	sp, #16
 800a8f0:	4770      	bx	lr
 800a8f2:	bf00      	nop
 800a8f4:	ffff8100 	.word	0xffff8100

0800a8f8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b083      	sub	sp, #12
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a906:	4618      	mov	r0, r3
 800a908:	370c      	adds	r7, #12
 800a90a:	46bd      	mov	sp, r7
 800a90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a910:	4770      	bx	lr

0800a912 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800a912:	b580      	push	{r7, lr}
 800a914:	b082      	sub	sp, #8
 800a916:	af00      	add	r7, sp, #0
 800a918:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2203      	movs	r2, #3
 800a91e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800a920:	2002      	movs	r0, #2
 800a922:	f7f8 fb1f 	bl	8002f64 <HAL_Delay>
  
  return HAL_OK;
 800a926:	2300      	movs	r3, #0
}
 800a928:	4618      	mov	r0, r3
 800a92a:	3708      	adds	r7, #8
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}

0800a930 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800a930:	b480      	push	{r7}
 800a932:	b083      	sub	sp, #12
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f003 0303 	and.w	r3, r3, #3
}
 800a940:	4618      	mov	r0, r3
 800a942:	370c      	adds	r7, #12
 800a944:	46bd      	mov	sp, r7
 800a946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94a:	4770      	bx	lr

0800a94c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800a94c:	b480      	push	{r7}
 800a94e:	b085      	sub	sp, #20
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
 800a954:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a956:	2300      	movs	r3, #0
 800a958:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	681a      	ldr	r2, [r3, #0]
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a96a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a970:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a976:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a978:	68fa      	ldr	r2, [r7, #12]
 800a97a:	4313      	orrs	r3, r2
 800a97c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	68da      	ldr	r2, [r3, #12]
 800a982:	4b06      	ldr	r3, [pc, #24]	; (800a99c <SDMMC_SendCommand+0x50>)
 800a984:	4013      	ands	r3, r2
 800a986:	68fa      	ldr	r2, [r7, #12]
 800a988:	431a      	orrs	r2, r3
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a98e:	2300      	movs	r3, #0
}
 800a990:	4618      	mov	r0, r3
 800a992:	3714      	adds	r7, #20
 800a994:	46bd      	mov	sp, r7
 800a996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99a:	4770      	bx	lr
 800a99c:	fffff000 	.word	0xfffff000

0800a9a0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	b083      	sub	sp, #12
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	691b      	ldr	r3, [r3, #16]
 800a9ac:	b2db      	uxtb	r3, r3
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	370c      	adds	r7, #12
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b8:	4770      	bx	lr

0800a9ba <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800a9ba:	b480      	push	{r7}
 800a9bc:	b085      	sub	sp, #20
 800a9be:	af00      	add	r7, sp, #0
 800a9c0:	6078      	str	r0, [r7, #4]
 800a9c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	3314      	adds	r3, #20
 800a9c8:	461a      	mov	r2, r3
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	4413      	add	r3, r2
 800a9ce:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	681b      	ldr	r3, [r3, #0]
}  
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3714      	adds	r7, #20
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9de:	4770      	bx	lr

0800a9e0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b085      	sub	sp, #20
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
 800a9e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	681a      	ldr	r2, [r3, #0]
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	685a      	ldr	r2, [r3, #4]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800aa06:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800aa0c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800aa12:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800aa14:	68fa      	ldr	r2, [r7, #12]
 800aa16:	4313      	orrs	r3, r2
 800aa18:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa1e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	431a      	orrs	r2, r3
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800aa2a:	2300      	movs	r3, #0

}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	3714      	adds	r7, #20
 800aa30:	46bd      	mov	sp, r7
 800aa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa36:	4770      	bx	lr

0800aa38 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b088      	sub	sp, #32
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
 800aa40:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800aa46:	2310      	movs	r3, #16
 800aa48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aa4a:	2340      	movs	r3, #64	; 0x40
 800aa4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa56:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa58:	f107 0308 	add.w	r3, r7, #8
 800aa5c:	4619      	mov	r1, r3
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f7ff ff74 	bl	800a94c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800aa64:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa68:	2110      	movs	r1, #16
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f000 fa42 	bl	800aef4 <SDMMC_GetCmdResp1>
 800aa70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa72:	69fb      	ldr	r3, [r7, #28]
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	3720      	adds	r7, #32
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b088      	sub	sp, #32
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800aa8a:	2311      	movs	r3, #17
 800aa8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aa8e:	2340      	movs	r3, #64	; 0x40
 800aa90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa92:	2300      	movs	r3, #0
 800aa94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa9a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa9c:	f107 0308 	add.w	r3, r7, #8
 800aaa0:	4619      	mov	r1, r3
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f7ff ff52 	bl	800a94c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800aaa8:	f241 3288 	movw	r2, #5000	; 0x1388
 800aaac:	2111      	movs	r1, #17
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f000 fa20 	bl	800aef4 <SDMMC_GetCmdResp1>
 800aab4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aab6:	69fb      	ldr	r3, [r7, #28]
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3720      	adds	r7, #32
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}

0800aac0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b088      	sub	sp, #32
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800aace:	2312      	movs	r3, #18
 800aad0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aad2:	2340      	movs	r3, #64	; 0x40
 800aad4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aad6:	2300      	movs	r3, #0
 800aad8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aada:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aade:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aae0:	f107 0308 	add.w	r3, r7, #8
 800aae4:	4619      	mov	r1, r3
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f7ff ff30 	bl	800a94c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800aaec:	f241 3288 	movw	r2, #5000	; 0x1388
 800aaf0:	2112      	movs	r1, #18
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f000 f9fe 	bl	800aef4 <SDMMC_GetCmdResp1>
 800aaf8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aafa:	69fb      	ldr	r3, [r7, #28]
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	3720      	adds	r7, #32
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}

0800ab04 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b088      	sub	sp, #32
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
 800ab0c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ab12:	2318      	movs	r3, #24
 800ab14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab16:	2340      	movs	r3, #64	; 0x40
 800ab18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab22:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab24:	f107 0308 	add.w	r3, r7, #8
 800ab28:	4619      	mov	r1, r3
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f7ff ff0e 	bl	800a94c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ab30:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab34:	2118      	movs	r1, #24
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f000 f9dc 	bl	800aef4 <SDMMC_GetCmdResp1>
 800ab3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab3e:	69fb      	ldr	r3, [r7, #28]
}
 800ab40:	4618      	mov	r0, r3
 800ab42:	3720      	adds	r7, #32
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}

0800ab48 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b088      	sub	sp, #32
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ab56:	2319      	movs	r3, #25
 800ab58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab5a:	2340      	movs	r3, #64	; 0x40
 800ab5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab66:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab68:	f107 0308 	add.w	r3, r7, #8
 800ab6c:	4619      	mov	r1, r3
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f7ff feec 	bl	800a94c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ab74:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab78:	2119      	movs	r1, #25
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	f000 f9ba 	bl	800aef4 <SDMMC_GetCmdResp1>
 800ab80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab82:	69fb      	ldr	r3, [r7, #28]
}
 800ab84:	4618      	mov	r0, r3
 800ab86:	3720      	adds	r7, #32
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}

0800ab8c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b088      	sub	sp, #32
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ab94:	2300      	movs	r3, #0
 800ab96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ab98:	230c      	movs	r3, #12
 800ab9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab9c:	2340      	movs	r3, #64	; 0x40
 800ab9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aba0:	2300      	movs	r3, #0
 800aba2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aba4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aba8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800abaa:	f107 0308 	add.w	r3, r7, #8
 800abae:	4619      	mov	r1, r3
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f7ff fecb 	bl	800a94c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800abb6:	4a05      	ldr	r2, [pc, #20]	; (800abcc <SDMMC_CmdStopTransfer+0x40>)
 800abb8:	210c      	movs	r1, #12
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f000 f99a 	bl	800aef4 <SDMMC_GetCmdResp1>
 800abc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800abc2:	69fb      	ldr	r3, [r7, #28]
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	3720      	adds	r7, #32
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}
 800abcc:	05f5e100 	.word	0x05f5e100

0800abd0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b08a      	sub	sp, #40	; 0x28
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	60f8      	str	r0, [r7, #12]
 800abd8:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800abe0:	2307      	movs	r3, #7
 800abe2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800abe4:	2340      	movs	r3, #64	; 0x40
 800abe6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800abe8:	2300      	movs	r3, #0
 800abea:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800abec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abf0:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800abf2:	f107 0310 	add.w	r3, r7, #16
 800abf6:	4619      	mov	r1, r3
 800abf8:	68f8      	ldr	r0, [r7, #12]
 800abfa:	f7ff fea7 	bl	800a94c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800abfe:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac02:	2107      	movs	r1, #7
 800ac04:	68f8      	ldr	r0, [r7, #12]
 800ac06:	f000 f975 	bl	800aef4 <SDMMC_GetCmdResp1>
 800ac0a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800ac0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3728      	adds	r7, #40	; 0x28
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}

0800ac16 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800ac16:	b580      	push	{r7, lr}
 800ac18:	b088      	sub	sp, #32
 800ac1a:	af00      	add	r7, sp, #0
 800ac1c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ac22:	2300      	movs	r3, #0
 800ac24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800ac26:	2300      	movs	r3, #0
 800ac28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac32:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac34:	f107 0308 	add.w	r3, r7, #8
 800ac38:	4619      	mov	r1, r3
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f7ff fe86 	bl	800a94c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f000 f92f 	bl	800aea4 <SDMMC_GetCmdError>
 800ac46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac48:	69fb      	ldr	r3, [r7, #28]
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3720      	adds	r7, #32
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}

0800ac52 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800ac52:	b580      	push	{r7, lr}
 800ac54:	b088      	sub	sp, #32
 800ac56:	af00      	add	r7, sp, #0
 800ac58:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ac5a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800ac5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ac60:	2308      	movs	r3, #8
 800ac62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac64:	2340      	movs	r3, #64	; 0x40
 800ac66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac70:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac72:	f107 0308 	add.w	r3, r7, #8
 800ac76:	4619      	mov	r1, r3
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f7ff fe67 	bl	800a94c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f000 fb18 	bl	800b2b4 <SDMMC_GetCmdResp7>
 800ac84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac86:	69fb      	ldr	r3, [r7, #28]
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	3720      	adds	r7, #32
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}

0800ac90 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b088      	sub	sp, #32
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
 800ac98:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ac9e:	2337      	movs	r3, #55	; 0x37
 800aca0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aca2:	2340      	movs	r3, #64	; 0x40
 800aca4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aca6:	2300      	movs	r3, #0
 800aca8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800acaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800acb0:	f107 0308 	add.w	r3, r7, #8
 800acb4:	4619      	mov	r1, r3
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f7ff fe48 	bl	800a94c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800acbc:	f241 3288 	movw	r2, #5000	; 0x1388
 800acc0:	2137      	movs	r1, #55	; 0x37
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f000 f916 	bl	800aef4 <SDMMC_GetCmdResp1>
 800acc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800acca:	69fb      	ldr	r3, [r7, #28]
}
 800accc:	4618      	mov	r0, r3
 800acce:	3720      	adds	r7, #32
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}

0800acd4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b088      	sub	sp, #32
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
 800acdc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800acde:	683a      	ldr	r2, [r7, #0]
 800ace0:	4b0d      	ldr	r3, [pc, #52]	; (800ad18 <SDMMC_CmdAppOperCommand+0x44>)
 800ace2:	4313      	orrs	r3, r2
 800ace4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ace6:	2329      	movs	r3, #41	; 0x29
 800ace8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800acea:	2340      	movs	r3, #64	; 0x40
 800acec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800acee:	2300      	movs	r3, #0
 800acf0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800acf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acf6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800acf8:	f107 0308 	add.w	r3, r7, #8
 800acfc:	4619      	mov	r1, r3
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f7ff fe24 	bl	800a94c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f000 fa27 	bl	800b158 <SDMMC_GetCmdResp3>
 800ad0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad0c:	69fb      	ldr	r3, [r7, #28]
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	3720      	adds	r7, #32
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}
 800ad16:	bf00      	nop
 800ad18:	80100000 	.word	0x80100000

0800ad1c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b088      	sub	sp, #32
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
 800ad24:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ad2a:	2306      	movs	r3, #6
 800ad2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad2e:	2340      	movs	r3, #64	; 0x40
 800ad30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad32:	2300      	movs	r3, #0
 800ad34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad3a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad3c:	f107 0308 	add.w	r3, r7, #8
 800ad40:	4619      	mov	r1, r3
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f7ff fe02 	bl	800a94c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800ad48:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad4c:	2106      	movs	r1, #6
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f000 f8d0 	bl	800aef4 <SDMMC_GetCmdResp1>
 800ad54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad56:	69fb      	ldr	r3, [r7, #28]
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	3720      	adds	r7, #32
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}

0800ad60 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b088      	sub	sp, #32
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800ad68:	2300      	movs	r3, #0
 800ad6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800ad6c:	2333      	movs	r3, #51	; 0x33
 800ad6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad70:	2340      	movs	r3, #64	; 0x40
 800ad72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad74:	2300      	movs	r3, #0
 800ad76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad7c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad7e:	f107 0308 	add.w	r3, r7, #8
 800ad82:	4619      	mov	r1, r3
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f7ff fde1 	bl	800a94c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800ad8a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad8e:	2133      	movs	r1, #51	; 0x33
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f000 f8af 	bl	800aef4 <SDMMC_GetCmdResp1>
 800ad96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad98:	69fb      	ldr	r3, [r7, #28]
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3720      	adds	r7, #32
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}

0800ada2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800ada2:	b580      	push	{r7, lr}
 800ada4:	b088      	sub	sp, #32
 800ada6:	af00      	add	r7, sp, #0
 800ada8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800adaa:	2300      	movs	r3, #0
 800adac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800adae:	2302      	movs	r3, #2
 800adb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800adb2:	23c0      	movs	r3, #192	; 0xc0
 800adb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800adb6:	2300      	movs	r3, #0
 800adb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800adba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800adbe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800adc0:	f107 0308 	add.w	r3, r7, #8
 800adc4:	4619      	mov	r1, r3
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f7ff fdc0 	bl	800a94c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	f000 f97d 	bl	800b0cc <SDMMC_GetCmdResp2>
 800add2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800add4:	69fb      	ldr	r3, [r7, #28]
}
 800add6:	4618      	mov	r0, r3
 800add8:	3720      	adds	r7, #32
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}

0800adde <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800adde:	b580      	push	{r7, lr}
 800ade0:	b088      	sub	sp, #32
 800ade2:	af00      	add	r7, sp, #0
 800ade4:	6078      	str	r0, [r7, #4]
 800ade6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800adec:	2309      	movs	r3, #9
 800adee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800adf0:	23c0      	movs	r3, #192	; 0xc0
 800adf2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800adf4:	2300      	movs	r3, #0
 800adf6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800adf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800adfc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800adfe:	f107 0308 	add.w	r3, r7, #8
 800ae02:	4619      	mov	r1, r3
 800ae04:	6878      	ldr	r0, [r7, #4]
 800ae06:	f7ff fda1 	bl	800a94c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f000 f95e 	bl	800b0cc <SDMMC_GetCmdResp2>
 800ae10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae12:	69fb      	ldr	r3, [r7, #28]
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3720      	adds	r7, #32
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}

0800ae1c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b088      	sub	sp, #32
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ae26:	2300      	movs	r3, #0
 800ae28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ae2a:	2303      	movs	r3, #3
 800ae2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae2e:	2340      	movs	r3, #64	; 0x40
 800ae30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae32:	2300      	movs	r3, #0
 800ae34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae3a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae3c:	f107 0308 	add.w	r3, r7, #8
 800ae40:	4619      	mov	r1, r3
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f7ff fd82 	bl	800a94c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ae48:	683a      	ldr	r2, [r7, #0]
 800ae4a:	2103      	movs	r1, #3
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f000 f9bd 	bl	800b1cc <SDMMC_GetCmdResp6>
 800ae52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae54:	69fb      	ldr	r3, [r7, #28]
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3720      	adds	r7, #32
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}

0800ae5e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ae5e:	b580      	push	{r7, lr}
 800ae60:	b088      	sub	sp, #32
 800ae62:	af00      	add	r7, sp, #0
 800ae64:	6078      	str	r0, [r7, #4]
 800ae66:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ae6c:	230d      	movs	r3, #13
 800ae6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae70:	2340      	movs	r3, #64	; 0x40
 800ae72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae74:	2300      	movs	r3, #0
 800ae76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae7c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae7e:	f107 0308 	add.w	r3, r7, #8
 800ae82:	4619      	mov	r1, r3
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f7ff fd61 	bl	800a94c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800ae8a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae8e:	210d      	movs	r1, #13
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f000 f82f 	bl	800aef4 <SDMMC_GetCmdResp1>
 800ae96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae98:	69fb      	ldr	r3, [r7, #28]
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3720      	adds	r7, #32
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}
	...

0800aea4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800aea4:	b490      	push	{r4, r7}
 800aea6:	b082      	sub	sp, #8
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aeac:	4b0f      	ldr	r3, [pc, #60]	; (800aeec <SDMMC_GetCmdError+0x48>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	4a0f      	ldr	r2, [pc, #60]	; (800aef0 <SDMMC_GetCmdError+0x4c>)
 800aeb2:	fba2 2303 	umull	r2, r3, r2, r3
 800aeb6:	0a5b      	lsrs	r3, r3, #9
 800aeb8:	f241 3288 	movw	r2, #5000	; 0x1388
 800aebc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800aec0:	4623      	mov	r3, r4
 800aec2:	1e5c      	subs	r4, r3, #1
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d102      	bne.n	800aece <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aec8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aecc:	e009      	b.n	800aee2 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d0f2      	beq.n	800aec0 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	22c5      	movs	r2, #197	; 0xc5
 800aede:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800aee0:	2300      	movs	r3, #0
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	3708      	adds	r7, #8
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bc90      	pop	{r4, r7}
 800aeea:	4770      	bx	lr
 800aeec:	20000018 	.word	0x20000018
 800aef0:	10624dd3 	.word	0x10624dd3

0800aef4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800aef4:	b590      	push	{r4, r7, lr}
 800aef6:	b087      	sub	sp, #28
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	60f8      	str	r0, [r7, #12]
 800aefc:	460b      	mov	r3, r1
 800aefe:	607a      	str	r2, [r7, #4]
 800af00:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800af02:	4b6f      	ldr	r3, [pc, #444]	; (800b0c0 <SDMMC_GetCmdResp1+0x1cc>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	4a6f      	ldr	r2, [pc, #444]	; (800b0c4 <SDMMC_GetCmdResp1+0x1d0>)
 800af08:	fba2 2303 	umull	r2, r3, r2, r3
 800af0c:	0a5b      	lsrs	r3, r3, #9
 800af0e:	687a      	ldr	r2, [r7, #4]
 800af10:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800af14:	4623      	mov	r3, r4
 800af16:	1e5c      	subs	r4, r3, #1
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d102      	bne.n	800af22 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800af1c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800af20:	e0c9      	b.n	800b0b6 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af26:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d0f0      	beq.n	800af14 <SDMMC_GetCmdResp1+0x20>
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d1eb      	bne.n	800af14 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af40:	f003 0304 	and.w	r3, r3, #4
 800af44:	2b00      	cmp	r3, #0
 800af46:	d004      	beq.n	800af52 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	2204      	movs	r2, #4
 800af4c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800af4e:	2304      	movs	r3, #4
 800af50:	e0b1      	b.n	800b0b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af56:	f003 0301 	and.w	r3, r3, #1
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d004      	beq.n	800af68 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	2201      	movs	r2, #1
 800af62:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800af64:	2301      	movs	r3, #1
 800af66:	e0a6      	b.n	800b0b6 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	22c5      	movs	r2, #197	; 0xc5
 800af6c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800af6e:	68f8      	ldr	r0, [r7, #12]
 800af70:	f7ff fd16 	bl	800a9a0 <SDMMC_GetCommandResponse>
 800af74:	4603      	mov	r3, r0
 800af76:	461a      	mov	r2, r3
 800af78:	7afb      	ldrb	r3, [r7, #11]
 800af7a:	4293      	cmp	r3, r2
 800af7c:	d001      	beq.n	800af82 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800af7e:	2301      	movs	r3, #1
 800af80:	e099      	b.n	800b0b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800af82:	2100      	movs	r1, #0
 800af84:	68f8      	ldr	r0, [r7, #12]
 800af86:	f7ff fd18 	bl	800a9ba <SDMMC_GetResponse>
 800af8a:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800af8c:	693a      	ldr	r2, [r7, #16]
 800af8e:	4b4e      	ldr	r3, [pc, #312]	; (800b0c8 <SDMMC_GetCmdResp1+0x1d4>)
 800af90:	4013      	ands	r3, r2
 800af92:	2b00      	cmp	r3, #0
 800af94:	d101      	bne.n	800af9a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800af96:	2300      	movs	r3, #0
 800af98:	e08d      	b.n	800b0b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800af9a:	693b      	ldr	r3, [r7, #16]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	da02      	bge.n	800afa6 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800afa0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800afa4:	e087      	b.n	800b0b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800afac:	2b00      	cmp	r3, #0
 800afae:	d001      	beq.n	800afb4 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800afb0:	2340      	movs	r3, #64	; 0x40
 800afb2:	e080      	b.n	800b0b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800afb4:	693b      	ldr	r3, [r7, #16]
 800afb6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d001      	beq.n	800afc2 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800afbe:	2380      	movs	r3, #128	; 0x80
 800afc0:	e079      	b.n	800b0b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d002      	beq.n	800afd2 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800afcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800afd0:	e071      	b.n	800b0b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800afd2:	693b      	ldr	r3, [r7, #16]
 800afd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d002      	beq.n	800afe2 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800afdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800afe0:	e069      	b.n	800b0b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800afe2:	693b      	ldr	r3, [r7, #16]
 800afe4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d002      	beq.n	800aff2 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800afec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aff0:	e061      	b.n	800b0b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d002      	beq.n	800b002 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800affc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b000:	e059      	b.n	800b0b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b002:	693b      	ldr	r3, [r7, #16]
 800b004:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d002      	beq.n	800b012 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b00c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b010:	e051      	b.n	800b0b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b012:	693b      	ldr	r3, [r7, #16]
 800b014:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d002      	beq.n	800b022 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b01c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b020:	e049      	b.n	800b0b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b022:	693b      	ldr	r3, [r7, #16]
 800b024:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d002      	beq.n	800b032 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b02c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b030:	e041      	b.n	800b0b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d002      	beq.n	800b042 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800b03c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b040:	e039      	b.n	800b0b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b042:	693b      	ldr	r3, [r7, #16]
 800b044:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d002      	beq.n	800b052 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b04c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b050:	e031      	b.n	800b0b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b052:	693b      	ldr	r3, [r7, #16]
 800b054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d002      	beq.n	800b062 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b05c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b060:	e029      	b.n	800b0b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b062:	693b      	ldr	r3, [r7, #16]
 800b064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d002      	beq.n	800b072 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b06c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b070:	e021      	b.n	800b0b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b072:	693b      	ldr	r3, [r7, #16]
 800b074:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d002      	beq.n	800b082 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b07c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b080:	e019      	b.n	800b0b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b082:	693b      	ldr	r3, [r7, #16]
 800b084:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d002      	beq.n	800b092 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b08c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b090:	e011      	b.n	800b0b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d002      	beq.n	800b0a2 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b09c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b0a0:	e009      	b.n	800b0b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b0a2:	693b      	ldr	r3, [r7, #16]
 800b0a4:	f003 0308 	and.w	r3, r3, #8
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d002      	beq.n	800b0b2 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b0ac:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b0b0:	e001      	b.n	800b0b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b0b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	371c      	adds	r7, #28
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd90      	pop	{r4, r7, pc}
 800b0be:	bf00      	nop
 800b0c0:	20000018 	.word	0x20000018
 800b0c4:	10624dd3 	.word	0x10624dd3
 800b0c8:	fdffe008 	.word	0xfdffe008

0800b0cc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b0cc:	b490      	push	{r4, r7}
 800b0ce:	b084      	sub	sp, #16
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b0d4:	4b1e      	ldr	r3, [pc, #120]	; (800b150 <SDMMC_GetCmdResp2+0x84>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	4a1e      	ldr	r2, [pc, #120]	; (800b154 <SDMMC_GetCmdResp2+0x88>)
 800b0da:	fba2 2303 	umull	r2, r3, r2, r3
 800b0de:	0a5b      	lsrs	r3, r3, #9
 800b0e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0e4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b0e8:	4623      	mov	r3, r4
 800b0ea:	1e5c      	subs	r4, r3, #1
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d102      	bne.n	800b0f6 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b0f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b0f4:	e026      	b.n	800b144 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0fa:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b102:	2b00      	cmp	r3, #0
 800b104:	d0f0      	beq.n	800b0e8 <SDMMC_GetCmdResp2+0x1c>
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d1eb      	bne.n	800b0e8 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b114:	f003 0304 	and.w	r3, r3, #4
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d004      	beq.n	800b126 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2204      	movs	r2, #4
 800b120:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b122:	2304      	movs	r3, #4
 800b124:	e00e      	b.n	800b144 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b12a:	f003 0301 	and.w	r3, r3, #1
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d004      	beq.n	800b13c <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2201      	movs	r2, #1
 800b136:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b138:	2301      	movs	r3, #1
 800b13a:	e003      	b.n	800b144 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	22c5      	movs	r2, #197	; 0xc5
 800b140:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b142:	2300      	movs	r3, #0
}
 800b144:	4618      	mov	r0, r3
 800b146:	3710      	adds	r7, #16
 800b148:	46bd      	mov	sp, r7
 800b14a:	bc90      	pop	{r4, r7}
 800b14c:	4770      	bx	lr
 800b14e:	bf00      	nop
 800b150:	20000018 	.word	0x20000018
 800b154:	10624dd3 	.word	0x10624dd3

0800b158 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b158:	b490      	push	{r4, r7}
 800b15a:	b084      	sub	sp, #16
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b160:	4b18      	ldr	r3, [pc, #96]	; (800b1c4 <SDMMC_GetCmdResp3+0x6c>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	4a18      	ldr	r2, [pc, #96]	; (800b1c8 <SDMMC_GetCmdResp3+0x70>)
 800b166:	fba2 2303 	umull	r2, r3, r2, r3
 800b16a:	0a5b      	lsrs	r3, r3, #9
 800b16c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b170:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b174:	4623      	mov	r3, r4
 800b176:	1e5c      	subs	r4, r3, #1
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d102      	bne.n	800b182 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b17c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b180:	e01b      	b.n	800b1ba <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b186:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d0f0      	beq.n	800b174 <SDMMC_GetCmdResp3+0x1c>
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d1eb      	bne.n	800b174 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1a0:	f003 0304 	and.w	r3, r3, #4
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d004      	beq.n	800b1b2 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2204      	movs	r2, #4
 800b1ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b1ae:	2304      	movs	r3, #4
 800b1b0:	e003      	b.n	800b1ba <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	22c5      	movs	r2, #197	; 0xc5
 800b1b6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b1b8:	2300      	movs	r3, #0
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	3710      	adds	r7, #16
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bc90      	pop	{r4, r7}
 800b1c2:	4770      	bx	lr
 800b1c4:	20000018 	.word	0x20000018
 800b1c8:	10624dd3 	.word	0x10624dd3

0800b1cc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b1cc:	b590      	push	{r4, r7, lr}
 800b1ce:	b087      	sub	sp, #28
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	60f8      	str	r0, [r7, #12]
 800b1d4:	460b      	mov	r3, r1
 800b1d6:	607a      	str	r2, [r7, #4]
 800b1d8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b1da:	4b34      	ldr	r3, [pc, #208]	; (800b2ac <SDMMC_GetCmdResp6+0xe0>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	4a34      	ldr	r2, [pc, #208]	; (800b2b0 <SDMMC_GetCmdResp6+0xe4>)
 800b1e0:	fba2 2303 	umull	r2, r3, r2, r3
 800b1e4:	0a5b      	lsrs	r3, r3, #9
 800b1e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1ea:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b1ee:	4623      	mov	r3, r4
 800b1f0:	1e5c      	subs	r4, r3, #1
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d102      	bne.n	800b1fc <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b1f6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b1fa:	e052      	b.n	800b2a2 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b200:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b202:	697b      	ldr	r3, [r7, #20]
 800b204:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d0f0      	beq.n	800b1ee <SDMMC_GetCmdResp6+0x22>
 800b20c:	697b      	ldr	r3, [r7, #20]
 800b20e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b212:	2b00      	cmp	r3, #0
 800b214:	d1eb      	bne.n	800b1ee <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b21a:	f003 0304 	and.w	r3, r3, #4
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d004      	beq.n	800b22c <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	2204      	movs	r2, #4
 800b226:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b228:	2304      	movs	r3, #4
 800b22a:	e03a      	b.n	800b2a2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b230:	f003 0301 	and.w	r3, r3, #1
 800b234:	2b00      	cmp	r3, #0
 800b236:	d004      	beq.n	800b242 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	2201      	movs	r2, #1
 800b23c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b23e:	2301      	movs	r3, #1
 800b240:	e02f      	b.n	800b2a2 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b242:	68f8      	ldr	r0, [r7, #12]
 800b244:	f7ff fbac 	bl	800a9a0 <SDMMC_GetCommandResponse>
 800b248:	4603      	mov	r3, r0
 800b24a:	461a      	mov	r2, r3
 800b24c:	7afb      	ldrb	r3, [r7, #11]
 800b24e:	4293      	cmp	r3, r2
 800b250:	d001      	beq.n	800b256 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b252:	2301      	movs	r3, #1
 800b254:	e025      	b.n	800b2a2 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	22c5      	movs	r2, #197	; 0xc5
 800b25a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b25c:	2100      	movs	r1, #0
 800b25e:	68f8      	ldr	r0, [r7, #12]
 800b260:	f7ff fbab 	bl	800a9ba <SDMMC_GetResponse>
 800b264:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b266:	693b      	ldr	r3, [r7, #16]
 800b268:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d106      	bne.n	800b27e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b270:	693b      	ldr	r3, [r7, #16]
 800b272:	0c1b      	lsrs	r3, r3, #16
 800b274:	b29a      	uxth	r2, r3
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b27a:	2300      	movs	r3, #0
 800b27c:	e011      	b.n	800b2a2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b284:	2b00      	cmp	r3, #0
 800b286:	d002      	beq.n	800b28e <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b288:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b28c:	e009      	b.n	800b2a2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b28e:	693b      	ldr	r3, [r7, #16]
 800b290:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b294:	2b00      	cmp	r3, #0
 800b296:	d002      	beq.n	800b29e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b298:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b29c:	e001      	b.n	800b2a2 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b29e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	371c      	adds	r7, #28
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd90      	pop	{r4, r7, pc}
 800b2aa:	bf00      	nop
 800b2ac:	20000018 	.word	0x20000018
 800b2b0:	10624dd3 	.word	0x10624dd3

0800b2b4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b2b4:	b490      	push	{r4, r7}
 800b2b6:	b084      	sub	sp, #16
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b2bc:	4b21      	ldr	r3, [pc, #132]	; (800b344 <SDMMC_GetCmdResp7+0x90>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	4a21      	ldr	r2, [pc, #132]	; (800b348 <SDMMC_GetCmdResp7+0x94>)
 800b2c2:	fba2 2303 	umull	r2, r3, r2, r3
 800b2c6:	0a5b      	lsrs	r3, r3, #9
 800b2c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2cc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b2d0:	4623      	mov	r3, r4
 800b2d2:	1e5c      	subs	r4, r3, #1
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d102      	bne.n	800b2de <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b2d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b2dc:	e02c      	b.n	800b338 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2e2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d0f0      	beq.n	800b2d0 <SDMMC_GetCmdResp7+0x1c>
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d1eb      	bne.n	800b2d0 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2fc:	f003 0304 	and.w	r3, r3, #4
 800b300:	2b00      	cmp	r3, #0
 800b302:	d004      	beq.n	800b30e <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2204      	movs	r2, #4
 800b308:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b30a:	2304      	movs	r3, #4
 800b30c:	e014      	b.n	800b338 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b312:	f003 0301 	and.w	r3, r3, #1
 800b316:	2b00      	cmp	r3, #0
 800b318:	d004      	beq.n	800b324 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2201      	movs	r2, #1
 800b31e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b320:	2301      	movs	r3, #1
 800b322:	e009      	b.n	800b338 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d002      	beq.n	800b336 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2240      	movs	r2, #64	; 0x40
 800b334:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b336:	2300      	movs	r3, #0
  
}
 800b338:	4618      	mov	r0, r3
 800b33a:	3710      	adds	r7, #16
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bc90      	pop	{r4, r7}
 800b340:	4770      	bx	lr
 800b342:	bf00      	nop
 800b344:	20000018 	.word	0x20000018
 800b348:	10624dd3 	.word	0x10624dd3

0800b34c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b350:	4904      	ldr	r1, [pc, #16]	; (800b364 <MX_FATFS_Init+0x18>)
 800b352:	4805      	ldr	r0, [pc, #20]	; (800b368 <MX_FATFS_Init+0x1c>)
 800b354:	f000 fa96 	bl	800b884 <FATFS_LinkDriver>
 800b358:	4603      	mov	r3, r0
 800b35a:	461a      	mov	r2, r3
 800b35c:	4b03      	ldr	r3, [pc, #12]	; (800b36c <MX_FATFS_Init+0x20>)
 800b35e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800b360:	bf00      	nop
 800b362:	bd80      	pop	{r7, pc}
 800b364:	2000c530 	.word	0x2000c530
 800b368:	08024b30 	.word	0x08024b30
 800b36c:	2000c52c 	.word	0x2000c52c

0800b370 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b082      	sub	sp, #8
 800b374:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b376:	2300      	movs	r3, #0
 800b378:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b37a:	f000 f87b 	bl	800b474 <BSP_SD_IsDetected>
 800b37e:	4603      	mov	r3, r0
 800b380:	2b01      	cmp	r3, #1
 800b382:	d001      	beq.n	800b388 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800b384:	2302      	movs	r3, #2
 800b386:	e012      	b.n	800b3ae <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800b388:	480b      	ldr	r0, [pc, #44]	; (800b3b8 <BSP_SD_Init+0x48>)
 800b38a:	f7fc fae9 	bl	8007960 <HAL_SD_Init>
 800b38e:	4603      	mov	r3, r0
 800b390:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800b392:	79fb      	ldrb	r3, [r7, #7]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d109      	bne.n	800b3ac <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800b398:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b39c:	4806      	ldr	r0, [pc, #24]	; (800b3b8 <BSP_SD_Init+0x48>)
 800b39e:	f7fc ff2b 	bl	80081f8 <HAL_SD_ConfigWideBusOperation>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d001      	beq.n	800b3ac <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800b3ac:	79fb      	ldrb	r3, [r7, #7]
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3708      	adds	r7, #8
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}
 800b3b6:	bf00      	nop
 800b3b8:	2000bfb8 	.word	0x2000bfb8

0800b3bc <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b086      	sub	sp, #24
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	60f8      	str	r0, [r7, #12]
 800b3c4:	60b9      	str	r1, [r7, #8]
 800b3c6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	68ba      	ldr	r2, [r7, #8]
 800b3d0:	68f9      	ldr	r1, [r7, #12]
 800b3d2:	4806      	ldr	r0, [pc, #24]	; (800b3ec <BSP_SD_ReadBlocks_DMA+0x30>)
 800b3d4:	f7fc fb5c 	bl	8007a90 <HAL_SD_ReadBlocks_DMA>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d001      	beq.n	800b3e2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b3de:	2301      	movs	r3, #1
 800b3e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800b3e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	3718      	adds	r7, #24
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd80      	pop	{r7, pc}
 800b3ec:	2000bfb8 	.word	0x2000bfb8

0800b3f0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b086      	sub	sp, #24
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	60f8      	str	r0, [r7, #12]
 800b3f8:	60b9      	str	r1, [r7, #8]
 800b3fa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	68ba      	ldr	r2, [r7, #8]
 800b404:	68f9      	ldr	r1, [r7, #12]
 800b406:	4806      	ldr	r0, [pc, #24]	; (800b420 <BSP_SD_WriteBlocks_DMA+0x30>)
 800b408:	f7fc fc2e 	bl	8007c68 <HAL_SD_WriteBlocks_DMA>
 800b40c:	4603      	mov	r3, r0
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d001      	beq.n	800b416 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b412:	2301      	movs	r3, #1
 800b414:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800b416:	7dfb      	ldrb	r3, [r7, #23]
}
 800b418:	4618      	mov	r0, r3
 800b41a:	3718      	adds	r7, #24
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}
 800b420:	2000bfb8 	.word	0x2000bfb8

0800b424 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b428:	4805      	ldr	r0, [pc, #20]	; (800b440 <BSP_SD_GetCardState+0x1c>)
 800b42a:	f7fc ff61 	bl	80082f0 <HAL_SD_GetCardState>
 800b42e:	4603      	mov	r3, r0
 800b430:	2b04      	cmp	r3, #4
 800b432:	bf14      	ite	ne
 800b434:	2301      	movne	r3, #1
 800b436:	2300      	moveq	r3, #0
 800b438:	b2db      	uxtb	r3, r3
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	bd80      	pop	{r7, pc}
 800b43e:	bf00      	nop
 800b440:	2000bfb8 	.word	0x2000bfb8

0800b444 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b082      	sub	sp, #8
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800b44c:	6879      	ldr	r1, [r7, #4]
 800b44e:	4803      	ldr	r0, [pc, #12]	; (800b45c <BSP_SD_GetCardInfo+0x18>)
 800b450:	f7fc fea6 	bl	80081a0 <HAL_SD_GetCardInfo>
}
 800b454:	bf00      	nop
 800b456:	3708      	adds	r7, #8
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}
 800b45c:	2000bfb8 	.word	0x2000bfb8

0800b460 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b082      	sub	sp, #8
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800b468:	f000 f9b2 	bl	800b7d0 <BSP_SD_ReadCpltCallback>
}
 800b46c:	bf00      	nop
 800b46e:	3708      	adds	r7, #8
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}

0800b474 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b082      	sub	sp, #8
 800b478:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b47a:	2301      	movs	r3, #1
 800b47c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800b47e:	f000 f80b 	bl	800b498 <BSP_PlatformIsDetected>
 800b482:	4603      	mov	r3, r0
 800b484:	2b00      	cmp	r3, #0
 800b486:	d101      	bne.n	800b48c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800b488:	2300      	movs	r3, #0
 800b48a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800b48c:	79fb      	ldrb	r3, [r7, #7]
 800b48e:	b2db      	uxtb	r3, r3
}
 800b490:	4618      	mov	r0, r3
 800b492:	3708      	adds	r7, #8
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}

0800b498 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800b498:	b580      	push	{r7, lr}
 800b49a:	b082      	sub	sp, #8
 800b49c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800b49e:	2301      	movs	r3, #1
 800b4a0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800b4a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b4a6:	4806      	ldr	r0, [pc, #24]	; (800b4c0 <BSP_PlatformIsDetected+0x28>)
 800b4a8:	f7f9 fe3a 	bl	8005120 <HAL_GPIO_ReadPin>
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d001      	beq.n	800b4b6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800b4b6:	79fb      	ldrb	r3, [r7, #7]
}  
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	3708      	adds	r7, #8
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}
 800b4c0:	40020800 	.word	0x40020800

0800b4c4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b084      	sub	sp, #16
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800b4cc:	f000 fa26 	bl	800b91c <osKernelSysTick>
 800b4d0:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800b4d2:	e006      	b.n	800b4e2 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b4d4:	f7ff ffa6 	bl	800b424 <BSP_SD_GetCardState>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d101      	bne.n	800b4e2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	e009      	b.n	800b4f6 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800b4e2:	f000 fa1b 	bl	800b91c <osKernelSysTick>
 800b4e6:	4602      	mov	r2, r0
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	1ad3      	subs	r3, r2, r3
 800b4ec:	687a      	ldr	r2, [r7, #4]
 800b4ee:	429a      	cmp	r2, r3
 800b4f0:	d8f0      	bhi.n	800b4d4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800b4f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	3710      	adds	r7, #16
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}
	...

0800b500 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b082      	sub	sp, #8
 800b504:	af00      	add	r7, sp, #0
 800b506:	4603      	mov	r3, r0
 800b508:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b50a:	4b0b      	ldr	r3, [pc, #44]	; (800b538 <SD_CheckStatus+0x38>)
 800b50c:	2201      	movs	r2, #1
 800b50e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b510:	f7ff ff88 	bl	800b424 <BSP_SD_GetCardState>
 800b514:	4603      	mov	r3, r0
 800b516:	2b00      	cmp	r3, #0
 800b518:	d107      	bne.n	800b52a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b51a:	4b07      	ldr	r3, [pc, #28]	; (800b538 <SD_CheckStatus+0x38>)
 800b51c:	781b      	ldrb	r3, [r3, #0]
 800b51e:	b2db      	uxtb	r3, r3
 800b520:	f023 0301 	bic.w	r3, r3, #1
 800b524:	b2da      	uxtb	r2, r3
 800b526:	4b04      	ldr	r3, [pc, #16]	; (800b538 <SD_CheckStatus+0x38>)
 800b528:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b52a:	4b03      	ldr	r3, [pc, #12]	; (800b538 <SD_CheckStatus+0x38>)
 800b52c:	781b      	ldrb	r3, [r3, #0]
 800b52e:	b2db      	uxtb	r3, r3
}
 800b530:	4618      	mov	r0, r3
 800b532:	3708      	adds	r7, #8
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}
 800b538:	20000021 	.word	0x20000021

0800b53c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b53c:	b590      	push	{r4, r7, lr}
 800b53e:	b087      	sub	sp, #28
 800b540:	af00      	add	r7, sp, #0
 800b542:	4603      	mov	r3, r0
 800b544:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 800b546:	4b20      	ldr	r3, [pc, #128]	; (800b5c8 <SD_initialize+0x8c>)
 800b548:	2201      	movs	r2, #1
 800b54a:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800b54c:	f000 f9da 	bl	800b904 <osKernelRunning>
 800b550:	4603      	mov	r3, r0
 800b552:	2b00      	cmp	r3, #0
 800b554:	d030      	beq.n	800b5b8 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800b556:	f7ff ff0b 	bl	800b370 <BSP_SD_Init>
 800b55a:	4603      	mov	r3, r0
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d107      	bne.n	800b570 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800b560:	79fb      	ldrb	r3, [r7, #7]
 800b562:	4618      	mov	r0, r3
 800b564:	f7ff ffcc 	bl	800b500 <SD_CheckStatus>
 800b568:	4603      	mov	r3, r0
 800b56a:	461a      	mov	r2, r3
 800b56c:	4b16      	ldr	r3, [pc, #88]	; (800b5c8 <SD_initialize+0x8c>)
 800b56e:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800b570:	4b15      	ldr	r3, [pc, #84]	; (800b5c8 <SD_initialize+0x8c>)
 800b572:	781b      	ldrb	r3, [r3, #0]
 800b574:	b2db      	uxtb	r3, r3
 800b576:	2b01      	cmp	r3, #1
 800b578:	d01e      	beq.n	800b5b8 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800b57a:	4b14      	ldr	r3, [pc, #80]	; (800b5cc <SD_initialize+0x90>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d10e      	bne.n	800b5a0 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800b582:	4b13      	ldr	r3, [pc, #76]	; (800b5d0 <SD_initialize+0x94>)
 800b584:	f107 0408 	add.w	r4, r7, #8
 800b588:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b58a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800b58e:	f107 0308 	add.w	r3, r7, #8
 800b592:	2100      	movs	r1, #0
 800b594:	4618      	mov	r0, r3
 800b596:	f000 fa31 	bl	800b9fc <osMessageCreate>
 800b59a:	4602      	mov	r2, r0
 800b59c:	4b0b      	ldr	r3, [pc, #44]	; (800b5cc <SD_initialize+0x90>)
 800b59e:	601a      	str	r2, [r3, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800b5a0:	4b0a      	ldr	r3, [pc, #40]	; (800b5cc <SD_initialize+0x90>)
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d107      	bne.n	800b5b8 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800b5a8:	4b07      	ldr	r3, [pc, #28]	; (800b5c8 <SD_initialize+0x8c>)
 800b5aa:	781b      	ldrb	r3, [r3, #0]
 800b5ac:	b2db      	uxtb	r3, r3
 800b5ae:	f043 0301 	orr.w	r3, r3, #1
 800b5b2:	b2da      	uxtb	r2, r3
 800b5b4:	4b04      	ldr	r3, [pc, #16]	; (800b5c8 <SD_initialize+0x8c>)
 800b5b6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800b5b8:	4b03      	ldr	r3, [pc, #12]	; (800b5c8 <SD_initialize+0x8c>)
 800b5ba:	781b      	ldrb	r3, [r3, #0]
 800b5bc:	b2db      	uxtb	r3, r3
}
 800b5be:	4618      	mov	r0, r3
 800b5c0:	371c      	adds	r7, #28
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd90      	pop	{r4, r7, pc}
 800b5c6:	bf00      	nop
 800b5c8:	20000021 	.word	0x20000021
 800b5cc:	2000038c 	.word	0x2000038c
 800b5d0:	080244a8 	.word	0x080244a8

0800b5d4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b082      	sub	sp, #8
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	4603      	mov	r3, r0
 800b5dc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b5de:	79fb      	ldrb	r3, [r7, #7]
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	f7ff ff8d 	bl	800b500 <SD_CheckStatus>
 800b5e6:	4603      	mov	r3, r0
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	3708      	adds	r7, #8
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd80      	pop	{r7, pc}

0800b5f0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b08a      	sub	sp, #40	; 0x28
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	60b9      	str	r1, [r7, #8]
 800b5f8:	607a      	str	r2, [r7, #4]
 800b5fa:	603b      	str	r3, [r7, #0]
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b600:	2301      	movs	r3, #1
 800b602:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b606:	f247 5030 	movw	r0, #30000	; 0x7530
 800b60a:	f7ff ff5b 	bl	800b4c4 <SD_CheckStatusWithTimeout>
 800b60e:	4603      	mov	r3, r0
 800b610:	2b00      	cmp	r3, #0
 800b612:	da02      	bge.n	800b61a <SD_read+0x2a>
  {
    return res;
 800b614:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b618:	e032      	b.n	800b680 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800b61a:	683a      	ldr	r2, [r7, #0]
 800b61c:	6879      	ldr	r1, [r7, #4]
 800b61e:	68b8      	ldr	r0, [r7, #8]
 800b620:	f7ff fecc 	bl	800b3bc <BSP_SD_ReadBlocks_DMA>
 800b624:	4603      	mov	r3, r0
 800b626:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800b62a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d124      	bne.n	800b67c <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800b632:	4b15      	ldr	r3, [pc, #84]	; (800b688 <SD_read+0x98>)
 800b634:	6819      	ldr	r1, [r3, #0]
 800b636:	f107 0314 	add.w	r3, r7, #20
 800b63a:	f247 5230 	movw	r2, #30000	; 0x7530
 800b63e:	4618      	mov	r0, r3
 800b640:	f000 fa46 	bl	800bad0 <osMessageGet>

    if (event.status == osEventMessage)
 800b644:	697b      	ldr	r3, [r7, #20]
 800b646:	2b10      	cmp	r3, #16
 800b648:	d118      	bne.n	800b67c <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800b64a:	69bb      	ldr	r3, [r7, #24]
 800b64c:	2b01      	cmp	r3, #1
 800b64e:	d115      	bne.n	800b67c <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800b650:	f000 f964 	bl	800b91c <osKernelSysTick>
 800b654:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800b656:	e008      	b.n	800b66a <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b658:	f7ff fee4 	bl	800b424 <BSP_SD_GetCardState>
 800b65c:	4603      	mov	r3, r0
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d103      	bne.n	800b66a <SD_read+0x7a>
              {
                res = RES_OK;
 800b662:	2300      	movs	r3, #0
 800b664:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800b668:	e008      	b.n	800b67c <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800b66a:	f000 f957 	bl	800b91c <osKernelSysTick>
 800b66e:	4602      	mov	r2, r0
 800b670:	6a3b      	ldr	r3, [r7, #32]
 800b672:	1ad3      	subs	r3, r2, r3
 800b674:	f247 522f 	movw	r2, #29999	; 0x752f
 800b678:	4293      	cmp	r3, r2
 800b67a:	d9ed      	bls.n	800b658 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800b67c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b680:	4618      	mov	r0, r3
 800b682:	3728      	adds	r7, #40	; 0x28
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}
 800b688:	2000038c 	.word	0x2000038c

0800b68c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b08a      	sub	sp, #40	; 0x28
 800b690:	af00      	add	r7, sp, #0
 800b692:	60b9      	str	r1, [r7, #8]
 800b694:	607a      	str	r2, [r7, #4]
 800b696:	603b      	str	r3, [r7, #0]
 800b698:	4603      	mov	r3, r0
 800b69a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b69c:	2301      	movs	r3, #1
 800b69e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b6a2:	f247 5030 	movw	r0, #30000	; 0x7530
 800b6a6:	f7ff ff0d 	bl	800b4c4 <SD_CheckStatusWithTimeout>
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	da02      	bge.n	800b6b6 <SD_write+0x2a>
  {
    return res;
 800b6b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6b4:	e02e      	b.n	800b714 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800b6b6:	683a      	ldr	r2, [r7, #0]
 800b6b8:	6879      	ldr	r1, [r7, #4]
 800b6ba:	68b8      	ldr	r0, [r7, #8]
 800b6bc:	f7ff fe98 	bl	800b3f0 <BSP_SD_WriteBlocks_DMA>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d124      	bne.n	800b710 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800b6c6:	4b15      	ldr	r3, [pc, #84]	; (800b71c <SD_write+0x90>)
 800b6c8:	6819      	ldr	r1, [r3, #0]
 800b6ca:	f107 0314 	add.w	r3, r7, #20
 800b6ce:	f247 5230 	movw	r2, #30000	; 0x7530
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f000 f9fc 	bl	800bad0 <osMessageGet>

    if (event.status == osEventMessage)
 800b6d8:	697b      	ldr	r3, [r7, #20]
 800b6da:	2b10      	cmp	r3, #16
 800b6dc:	d118      	bne.n	800b710 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800b6de:	69bb      	ldr	r3, [r7, #24]
 800b6e0:	2b02      	cmp	r3, #2
 800b6e2:	d115      	bne.n	800b710 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800b6e4:	f000 f91a 	bl	800b91c <osKernelSysTick>
 800b6e8:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800b6ea:	e008      	b.n	800b6fe <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b6ec:	f7ff fe9a 	bl	800b424 <BSP_SD_GetCardState>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d103      	bne.n	800b6fe <SD_write+0x72>
          {
            res = RES_OK;
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800b6fc:	e008      	b.n	800b710 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800b6fe:	f000 f90d 	bl	800b91c <osKernelSysTick>
 800b702:	4602      	mov	r2, r0
 800b704:	6a3b      	ldr	r3, [r7, #32]
 800b706:	1ad3      	subs	r3, r2, r3
 800b708:	f247 522f 	movw	r2, #29999	; 0x752f
 800b70c:	4293      	cmp	r3, r2
 800b70e:	d9ed      	bls.n	800b6ec <SD_write+0x60>
    }

  }
#endif

  return res;
 800b710:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b714:	4618      	mov	r0, r3
 800b716:	3728      	adds	r7, #40	; 0x28
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}
 800b71c:	2000038c 	.word	0x2000038c

0800b720 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b08c      	sub	sp, #48	; 0x30
 800b724:	af00      	add	r7, sp, #0
 800b726:	4603      	mov	r3, r0
 800b728:	603a      	str	r2, [r7, #0]
 800b72a:	71fb      	strb	r3, [r7, #7]
 800b72c:	460b      	mov	r3, r1
 800b72e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b730:	2301      	movs	r3, #1
 800b732:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b736:	4b25      	ldr	r3, [pc, #148]	; (800b7cc <SD_ioctl+0xac>)
 800b738:	781b      	ldrb	r3, [r3, #0]
 800b73a:	b2db      	uxtb	r3, r3
 800b73c:	f003 0301 	and.w	r3, r3, #1
 800b740:	2b00      	cmp	r3, #0
 800b742:	d001      	beq.n	800b748 <SD_ioctl+0x28>
 800b744:	2303      	movs	r3, #3
 800b746:	e03c      	b.n	800b7c2 <SD_ioctl+0xa2>

  switch (cmd)
 800b748:	79bb      	ldrb	r3, [r7, #6]
 800b74a:	2b03      	cmp	r3, #3
 800b74c:	d834      	bhi.n	800b7b8 <SD_ioctl+0x98>
 800b74e:	a201      	add	r2, pc, #4	; (adr r2, 800b754 <SD_ioctl+0x34>)
 800b750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b754:	0800b765 	.word	0x0800b765
 800b758:	0800b76d 	.word	0x0800b76d
 800b75c:	0800b785 	.word	0x0800b785
 800b760:	0800b79f 	.word	0x0800b79f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b764:	2300      	movs	r3, #0
 800b766:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b76a:	e028      	b.n	800b7be <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b76c:	f107 030c 	add.w	r3, r7, #12
 800b770:	4618      	mov	r0, r3
 800b772:	f7ff fe67 	bl	800b444 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b77c:	2300      	movs	r3, #0
 800b77e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b782:	e01c      	b.n	800b7be <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b784:	f107 030c 	add.w	r3, r7, #12
 800b788:	4618      	mov	r0, r3
 800b78a:	f7ff fe5b 	bl	800b444 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b78e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b790:	b29a      	uxth	r2, r3
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b796:	2300      	movs	r3, #0
 800b798:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b79c:	e00f      	b.n	800b7be <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b79e:	f107 030c 	add.w	r3, r7, #12
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	f7ff fe4e 	bl	800b444 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7aa:	0a5a      	lsrs	r2, r3, #9
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b7b6:	e002      	b.n	800b7be <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b7b8:	2304      	movs	r3, #4
 800b7ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800b7be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	3730      	adds	r7, #48	; 0x30
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}
 800b7ca:	bf00      	nop
 800b7cc:	20000021 	.word	0x20000021

0800b7d0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800b7d4:	4b04      	ldr	r3, [pc, #16]	; (800b7e8 <BSP_SD_ReadCpltCallback+0x18>)
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	2200      	movs	r2, #0
 800b7da:	2101      	movs	r1, #1
 800b7dc:	4618      	mov	r0, r3
 800b7de:	f000 f937 	bl	800ba50 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800b7e2:	bf00      	nop
 800b7e4:	bd80      	pop	{r7, pc}
 800b7e6:	bf00      	nop
 800b7e8:	2000038c 	.word	0x2000038c

0800b7ec <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	b087      	sub	sp, #28
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	60f8      	str	r0, [r7, #12]
 800b7f4:	60b9      	str	r1, [r7, #8]
 800b7f6:	4613      	mov	r3, r2
 800b7f8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b7fa:	2301      	movs	r3, #1
 800b7fc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b7fe:	2300      	movs	r3, #0
 800b800:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b802:	4b1f      	ldr	r3, [pc, #124]	; (800b880 <FATFS_LinkDriverEx+0x94>)
 800b804:	7a5b      	ldrb	r3, [r3, #9]
 800b806:	b2db      	uxtb	r3, r3
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d131      	bne.n	800b870 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b80c:	4b1c      	ldr	r3, [pc, #112]	; (800b880 <FATFS_LinkDriverEx+0x94>)
 800b80e:	7a5b      	ldrb	r3, [r3, #9]
 800b810:	b2db      	uxtb	r3, r3
 800b812:	461a      	mov	r2, r3
 800b814:	4b1a      	ldr	r3, [pc, #104]	; (800b880 <FATFS_LinkDriverEx+0x94>)
 800b816:	2100      	movs	r1, #0
 800b818:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b81a:	4b19      	ldr	r3, [pc, #100]	; (800b880 <FATFS_LinkDriverEx+0x94>)
 800b81c:	7a5b      	ldrb	r3, [r3, #9]
 800b81e:	b2db      	uxtb	r3, r3
 800b820:	4a17      	ldr	r2, [pc, #92]	; (800b880 <FATFS_LinkDriverEx+0x94>)
 800b822:	009b      	lsls	r3, r3, #2
 800b824:	4413      	add	r3, r2
 800b826:	68fa      	ldr	r2, [r7, #12]
 800b828:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b82a:	4b15      	ldr	r3, [pc, #84]	; (800b880 <FATFS_LinkDriverEx+0x94>)
 800b82c:	7a5b      	ldrb	r3, [r3, #9]
 800b82e:	b2db      	uxtb	r3, r3
 800b830:	461a      	mov	r2, r3
 800b832:	4b13      	ldr	r3, [pc, #76]	; (800b880 <FATFS_LinkDriverEx+0x94>)
 800b834:	4413      	add	r3, r2
 800b836:	79fa      	ldrb	r2, [r7, #7]
 800b838:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b83a:	4b11      	ldr	r3, [pc, #68]	; (800b880 <FATFS_LinkDriverEx+0x94>)
 800b83c:	7a5b      	ldrb	r3, [r3, #9]
 800b83e:	b2db      	uxtb	r3, r3
 800b840:	1c5a      	adds	r2, r3, #1
 800b842:	b2d1      	uxtb	r1, r2
 800b844:	4a0e      	ldr	r2, [pc, #56]	; (800b880 <FATFS_LinkDriverEx+0x94>)
 800b846:	7251      	strb	r1, [r2, #9]
 800b848:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b84a:	7dbb      	ldrb	r3, [r7, #22]
 800b84c:	3330      	adds	r3, #48	; 0x30
 800b84e:	b2da      	uxtb	r2, r3
 800b850:	68bb      	ldr	r3, [r7, #8]
 800b852:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	3301      	adds	r3, #1
 800b858:	223a      	movs	r2, #58	; 0x3a
 800b85a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	3302      	adds	r3, #2
 800b860:	222f      	movs	r2, #47	; 0x2f
 800b862:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	3303      	adds	r3, #3
 800b868:	2200      	movs	r2, #0
 800b86a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b86c:	2300      	movs	r3, #0
 800b86e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b870:	7dfb      	ldrb	r3, [r7, #23]
}
 800b872:	4618      	mov	r0, r3
 800b874:	371c      	adds	r7, #28
 800b876:	46bd      	mov	sp, r7
 800b878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87c:	4770      	bx	lr
 800b87e:	bf00      	nop
 800b880:	20000390 	.word	0x20000390

0800b884 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b082      	sub	sp, #8
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
 800b88c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b88e:	2200      	movs	r2, #0
 800b890:	6839      	ldr	r1, [r7, #0]
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f7ff ffaa 	bl	800b7ec <FATFS_LinkDriverEx>
 800b898:	4603      	mov	r3, r0
}
 800b89a:	4618      	mov	r0, r3
 800b89c:	3708      	adds	r7, #8
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}

0800b8a2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b8a2:	b480      	push	{r7}
 800b8a4:	b085      	sub	sp, #20
 800b8a6:	af00      	add	r7, sp, #0
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b8b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b8b4:	2b84      	cmp	r3, #132	; 0x84
 800b8b6:	d005      	beq.n	800b8c4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b8b8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	4413      	add	r3, r2
 800b8c0:	3303      	adds	r3, #3
 800b8c2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
}
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	3714      	adds	r7, #20
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d0:	4770      	bx	lr

0800b8d2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800b8d2:	b480      	push	{r7}
 800b8d4:	b083      	sub	sp, #12
 800b8d6:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b8d8:	f3ef 8305 	mrs	r3, IPSR
 800b8dc:	607b      	str	r3, [r7, #4]
  return(result);
 800b8de:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	bf14      	ite	ne
 800b8e4:	2301      	movne	r3, #1
 800b8e6:	2300      	moveq	r3, #0
 800b8e8:	b2db      	uxtb	r3, r3
}
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	370c      	adds	r7, #12
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f4:	4770      	bx	lr

0800b8f6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b8f6:	b580      	push	{r7, lr}
 800b8f8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b8fa:	f001 faff 	bl	800cefc <vTaskStartScheduler>
  
  return osOK;
 800b8fe:	2300      	movs	r3, #0
}
 800b900:	4618      	mov	r0, r3
 800b902:	bd80      	pop	{r7, pc}

0800b904 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800b908:	f001 ff4a 	bl	800d7a0 <xTaskGetSchedulerState>
 800b90c:	4603      	mov	r3, r0
 800b90e:	2b01      	cmp	r3, #1
 800b910:	d101      	bne.n	800b916 <osKernelRunning+0x12>
    return 0;
 800b912:	2300      	movs	r3, #0
 800b914:	e000      	b.n	800b918 <osKernelRunning+0x14>
  else
    return 1;
 800b916:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800b918:	4618      	mov	r0, r3
 800b91a:	bd80      	pop	{r7, pc}

0800b91c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800b920:	f7ff ffd7 	bl	800b8d2 <inHandlerMode>
 800b924:	4603      	mov	r3, r0
 800b926:	2b00      	cmp	r3, #0
 800b928:	d003      	beq.n	800b932 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800b92a:	f001 fc05 	bl	800d138 <xTaskGetTickCountFromISR>
 800b92e:	4603      	mov	r3, r0
 800b930:	e002      	b.n	800b938 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800b932:	f001 fbf1 	bl	800d118 <xTaskGetTickCount>
 800b936:	4603      	mov	r3, r0
  }
}
 800b938:	4618      	mov	r0, r3
 800b93a:	bd80      	pop	{r7, pc}

0800b93c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b93c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b93e:	b089      	sub	sp, #36	; 0x24
 800b940:	af04      	add	r7, sp, #16
 800b942:	6078      	str	r0, [r7, #4]
 800b944:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	695b      	ldr	r3, [r3, #20]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d020      	beq.n	800b990 <osThreadCreate+0x54>
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	699b      	ldr	r3, [r3, #24]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d01c      	beq.n	800b990 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	685c      	ldr	r4, [r3, #4]
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681d      	ldr	r5, [r3, #0]
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	691e      	ldr	r6, [r3, #16]
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b968:	4618      	mov	r0, r3
 800b96a:	f7ff ff9a 	bl	800b8a2 <makeFreeRtosPriority>
 800b96e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	695b      	ldr	r3, [r3, #20]
 800b974:	687a      	ldr	r2, [r7, #4]
 800b976:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b978:	9202      	str	r2, [sp, #8]
 800b97a:	9301      	str	r3, [sp, #4]
 800b97c:	9100      	str	r1, [sp, #0]
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	4632      	mov	r2, r6
 800b982:	4629      	mov	r1, r5
 800b984:	4620      	mov	r0, r4
 800b986:	f001 f8e0 	bl	800cb4a <xTaskCreateStatic>
 800b98a:	4603      	mov	r3, r0
 800b98c:	60fb      	str	r3, [r7, #12]
 800b98e:	e01c      	b.n	800b9ca <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	685c      	ldr	r4, [r3, #4]
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b99c:	b29e      	uxth	r6, r3
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f7ff ff7c 	bl	800b8a2 <makeFreeRtosPriority>
 800b9aa:	4602      	mov	r2, r0
 800b9ac:	f107 030c 	add.w	r3, r7, #12
 800b9b0:	9301      	str	r3, [sp, #4]
 800b9b2:	9200      	str	r2, [sp, #0]
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	4632      	mov	r2, r6
 800b9b8:	4629      	mov	r1, r5
 800b9ba:	4620      	mov	r0, r4
 800b9bc:	f001 f925 	bl	800cc0a <xTaskCreate>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	2b01      	cmp	r3, #1
 800b9c4:	d001      	beq.n	800b9ca <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	e000      	b.n	800b9cc <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
}
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	3714      	adds	r7, #20
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b9d4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b084      	sub	sp, #16
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d001      	beq.n	800b9ea <osDelay+0x16>
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	e000      	b.n	800b9ec <osDelay+0x18>
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f001 fa4f 	bl	800ce90 <vTaskDelay>
  
  return osOK;
 800b9f2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	3710      	adds	r7, #16
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}

0800b9fc <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800b9fc:	b590      	push	{r4, r7, lr}
 800b9fe:	b085      	sub	sp, #20
 800ba00:	af02      	add	r7, sp, #8
 800ba02:	6078      	str	r0, [r7, #4]
 800ba04:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	689b      	ldr	r3, [r3, #8]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d012      	beq.n	800ba34 <osMessageCreate+0x38>
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	68db      	ldr	r3, [r3, #12]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d00e      	beq.n	800ba34 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	6818      	ldr	r0, [r3, #0]
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	6859      	ldr	r1, [r3, #4]
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	689a      	ldr	r2, [r3, #8]
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	68dc      	ldr	r4, [r3, #12]
 800ba26:	2300      	movs	r3, #0
 800ba28:	9300      	str	r3, [sp, #0]
 800ba2a:	4623      	mov	r3, r4
 800ba2c:	f000 f9e2 	bl	800bdf4 <xQueueGenericCreateStatic>
 800ba30:	4603      	mov	r3, r0
 800ba32:	e008      	b.n	800ba46 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6818      	ldr	r0, [r3, #0]
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	685b      	ldr	r3, [r3, #4]
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	4619      	mov	r1, r3
 800ba40:	f000 fa55 	bl	800beee <xQueueGenericCreate>
 800ba44:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	370c      	adds	r7, #12
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd90      	pop	{r4, r7, pc}
	...

0800ba50 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b086      	sub	sp, #24
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	60f8      	str	r0, [r7, #12]
 800ba58:	60b9      	str	r1, [r7, #8]
 800ba5a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800ba64:	697b      	ldr	r3, [r7, #20]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d101      	bne.n	800ba6e <osMessagePut+0x1e>
    ticks = 1;
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800ba6e:	f7ff ff30 	bl	800b8d2 <inHandlerMode>
 800ba72:	4603      	mov	r3, r0
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d018      	beq.n	800baaa <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800ba78:	f107 0210 	add.w	r2, r7, #16
 800ba7c:	f107 0108 	add.w	r1, r7, #8
 800ba80:	2300      	movs	r3, #0
 800ba82:	68f8      	ldr	r0, [r7, #12]
 800ba84:	f000 fb96 	bl	800c1b4 <xQueueGenericSendFromISR>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	2b01      	cmp	r3, #1
 800ba8c:	d001      	beq.n	800ba92 <osMessagePut+0x42>
      return osErrorOS;
 800ba8e:	23ff      	movs	r3, #255	; 0xff
 800ba90:	e018      	b.n	800bac4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d014      	beq.n	800bac2 <osMessagePut+0x72>
 800ba98:	4b0c      	ldr	r3, [pc, #48]	; (800bacc <osMessagePut+0x7c>)
 800ba9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba9e:	601a      	str	r2, [r3, #0]
 800baa0:	f3bf 8f4f 	dsb	sy
 800baa4:	f3bf 8f6f 	isb	sy
 800baa8:	e00b      	b.n	800bac2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800baaa:	f107 0108 	add.w	r1, r7, #8
 800baae:	2300      	movs	r3, #0
 800bab0:	697a      	ldr	r2, [r7, #20]
 800bab2:	68f8      	ldr	r0, [r7, #12]
 800bab4:	f000 fa7c 	bl	800bfb0 <xQueueGenericSend>
 800bab8:	4603      	mov	r3, r0
 800baba:	2b01      	cmp	r3, #1
 800babc:	d001      	beq.n	800bac2 <osMessagePut+0x72>
      return osErrorOS;
 800babe:	23ff      	movs	r3, #255	; 0xff
 800bac0:	e000      	b.n	800bac4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800bac2:	2300      	movs	r3, #0
}
 800bac4:	4618      	mov	r0, r3
 800bac6:	3718      	adds	r7, #24
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}
 800bacc:	e000ed04 	.word	0xe000ed04

0800bad0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800bad0:	b590      	push	{r4, r7, lr}
 800bad2:	b08b      	sub	sp, #44	; 0x2c
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	60f8      	str	r0, [r7, #12]
 800bad8:	60b9      	str	r1, [r7, #8]
 800bada:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800badc:	68bb      	ldr	r3, [r7, #8]
 800bade:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800bae0:	2300      	movs	r3, #0
 800bae2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d10a      	bne.n	800bb00 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800baea:	2380      	movs	r3, #128	; 0x80
 800baec:	617b      	str	r3, [r7, #20]
    return event;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	461c      	mov	r4, r3
 800baf2:	f107 0314 	add.w	r3, r7, #20
 800baf6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bafa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bafe:	e054      	b.n	800bbaa <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800bb00:	2300      	movs	r3, #0
 800bb02:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800bb04:	2300      	movs	r3, #0
 800bb06:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb0e:	d103      	bne.n	800bb18 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800bb10:	f04f 33ff 	mov.w	r3, #4294967295
 800bb14:	627b      	str	r3, [r7, #36]	; 0x24
 800bb16:	e009      	b.n	800bb2c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d006      	beq.n	800bb2c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800bb22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d101      	bne.n	800bb2c <osMessageGet+0x5c>
      ticks = 1;
 800bb28:	2301      	movs	r3, #1
 800bb2a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800bb2c:	f7ff fed1 	bl	800b8d2 <inHandlerMode>
 800bb30:	4603      	mov	r3, r0
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d01c      	beq.n	800bb70 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800bb36:	f107 0220 	add.w	r2, r7, #32
 800bb3a:	f107 0314 	add.w	r3, r7, #20
 800bb3e:	3304      	adds	r3, #4
 800bb40:	4619      	mov	r1, r3
 800bb42:	68b8      	ldr	r0, [r7, #8]
 800bb44:	f000 fe56 	bl	800c7f4 <xQueueReceiveFromISR>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	2b01      	cmp	r3, #1
 800bb4c:	d102      	bne.n	800bb54 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800bb4e:	2310      	movs	r3, #16
 800bb50:	617b      	str	r3, [r7, #20]
 800bb52:	e001      	b.n	800bb58 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800bb54:	2300      	movs	r3, #0
 800bb56:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800bb58:	6a3b      	ldr	r3, [r7, #32]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d01d      	beq.n	800bb9a <osMessageGet+0xca>
 800bb5e:	4b15      	ldr	r3, [pc, #84]	; (800bbb4 <osMessageGet+0xe4>)
 800bb60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb64:	601a      	str	r2, [r3, #0]
 800bb66:	f3bf 8f4f 	dsb	sy
 800bb6a:	f3bf 8f6f 	isb	sy
 800bb6e:	e014      	b.n	800bb9a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800bb70:	f107 0314 	add.w	r3, r7, #20
 800bb74:	3304      	adds	r3, #4
 800bb76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb78:	4619      	mov	r1, r3
 800bb7a:	68b8      	ldr	r0, [r7, #8]
 800bb7c:	f000 fc48 	bl	800c410 <xQueueReceive>
 800bb80:	4603      	mov	r3, r0
 800bb82:	2b01      	cmp	r3, #1
 800bb84:	d102      	bne.n	800bb8c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800bb86:	2310      	movs	r3, #16
 800bb88:	617b      	str	r3, [r7, #20]
 800bb8a:	e006      	b.n	800bb9a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800bb8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d101      	bne.n	800bb96 <osMessageGet+0xc6>
 800bb92:	2300      	movs	r3, #0
 800bb94:	e000      	b.n	800bb98 <osMessageGet+0xc8>
 800bb96:	2340      	movs	r3, #64	; 0x40
 800bb98:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	461c      	mov	r4, r3
 800bb9e:	f107 0314 	add.w	r3, r7, #20
 800bba2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bba6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800bbaa:	68f8      	ldr	r0, [r7, #12]
 800bbac:	372c      	adds	r7, #44	; 0x2c
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd90      	pop	{r4, r7, pc}
 800bbb2:	bf00      	nop
 800bbb4:	e000ed04 	.word	0xe000ed04

0800bbb8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bbb8:	b480      	push	{r7}
 800bbba:	b083      	sub	sp, #12
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f103 0208 	add.w	r2, r3, #8
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	f04f 32ff 	mov.w	r2, #4294967295
 800bbd0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	f103 0208 	add.w	r2, r3, #8
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f103 0208 	add.w	r2, r3, #8
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2200      	movs	r2, #0
 800bbea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bbec:	bf00      	nop
 800bbee:	370c      	adds	r7, #12
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf6:	4770      	bx	lr

0800bbf8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bbf8:	b480      	push	{r7}
 800bbfa:	b083      	sub	sp, #12
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2200      	movs	r2, #0
 800bc04:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bc06:	bf00      	nop
 800bc08:	370c      	adds	r7, #12
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc10:	4770      	bx	lr

0800bc12 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bc12:	b480      	push	{r7}
 800bc14:	b085      	sub	sp, #20
 800bc16:	af00      	add	r7, sp, #0
 800bc18:	6078      	str	r0, [r7, #4]
 800bc1a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	685b      	ldr	r3, [r3, #4]
 800bc20:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	68fa      	ldr	r2, [r7, #12]
 800bc26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	689a      	ldr	r2, [r3, #8]
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	689b      	ldr	r3, [r3, #8]
 800bc34:	683a      	ldr	r2, [r7, #0]
 800bc36:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	683a      	ldr	r2, [r7, #0]
 800bc3c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	687a      	ldr	r2, [r7, #4]
 800bc42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	1c5a      	adds	r2, r3, #1
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	601a      	str	r2, [r3, #0]
}
 800bc4e:	bf00      	nop
 800bc50:	3714      	adds	r7, #20
 800bc52:	46bd      	mov	sp, r7
 800bc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc58:	4770      	bx	lr

0800bc5a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bc5a:	b480      	push	{r7}
 800bc5c:	b085      	sub	sp, #20
 800bc5e:	af00      	add	r7, sp, #0
 800bc60:	6078      	str	r0, [r7, #4]
 800bc62:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bc6a:	68bb      	ldr	r3, [r7, #8]
 800bc6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc70:	d103      	bne.n	800bc7a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	691b      	ldr	r3, [r3, #16]
 800bc76:	60fb      	str	r3, [r7, #12]
 800bc78:	e00c      	b.n	800bc94 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	3308      	adds	r3, #8
 800bc7e:	60fb      	str	r3, [r7, #12]
 800bc80:	e002      	b.n	800bc88 <vListInsert+0x2e>
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	685b      	ldr	r3, [r3, #4]
 800bc86:	60fb      	str	r3, [r7, #12]
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	685b      	ldr	r3, [r3, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	68ba      	ldr	r2, [r7, #8]
 800bc90:	429a      	cmp	r2, r3
 800bc92:	d2f6      	bcs.n	800bc82 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	685a      	ldr	r2, [r3, #4]
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	685b      	ldr	r3, [r3, #4]
 800bca0:	683a      	ldr	r2, [r7, #0]
 800bca2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	68fa      	ldr	r2, [r7, #12]
 800bca8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	683a      	ldr	r2, [r7, #0]
 800bcae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	687a      	ldr	r2, [r7, #4]
 800bcb4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	1c5a      	adds	r2, r3, #1
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	601a      	str	r2, [r3, #0]
}
 800bcc0:	bf00      	nop
 800bcc2:	3714      	adds	r7, #20
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcca:	4770      	bx	lr

0800bccc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bccc:	b480      	push	{r7}
 800bcce:	b085      	sub	sp, #20
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	691b      	ldr	r3, [r3, #16]
 800bcd8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	685b      	ldr	r3, [r3, #4]
 800bcde:	687a      	ldr	r2, [r7, #4]
 800bce0:	6892      	ldr	r2, [r2, #8]
 800bce2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	689b      	ldr	r3, [r3, #8]
 800bce8:	687a      	ldr	r2, [r7, #4]
 800bcea:	6852      	ldr	r2, [r2, #4]
 800bcec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	685b      	ldr	r3, [r3, #4]
 800bcf2:	687a      	ldr	r2, [r7, #4]
 800bcf4:	429a      	cmp	r2, r3
 800bcf6:	d103      	bne.n	800bd00 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	689a      	ldr	r2, [r3, #8]
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2200      	movs	r2, #0
 800bd04:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	1e5a      	subs	r2, r3, #1
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	681b      	ldr	r3, [r3, #0]
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	3714      	adds	r7, #20
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1e:	4770      	bx	lr

0800bd20 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b084      	sub	sp, #16
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
 800bd28:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d10b      	bne.n	800bd4c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bd34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd38:	b672      	cpsid	i
 800bd3a:	f383 8811 	msr	BASEPRI, r3
 800bd3e:	f3bf 8f6f 	isb	sy
 800bd42:	f3bf 8f4f 	dsb	sy
 800bd46:	b662      	cpsie	i
 800bd48:	60bb      	str	r3, [r7, #8]
 800bd4a:	e7fe      	b.n	800bd4a <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800bd4c:	f002 f86c 	bl	800de28 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	681a      	ldr	r2, [r3, #0]
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd58:	68f9      	ldr	r1, [r7, #12]
 800bd5a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bd5c:	fb01 f303 	mul.w	r3, r1, r3
 800bd60:	441a      	add	r2, r3
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	2200      	movs	r2, #0
 800bd6a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	681a      	ldr	r2, [r3, #0]
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	681a      	ldr	r2, [r3, #0]
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd7c:	3b01      	subs	r3, #1
 800bd7e:	68f9      	ldr	r1, [r7, #12]
 800bd80:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bd82:	fb01 f303 	mul.w	r3, r1, r3
 800bd86:	441a      	add	r2, r3
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	22ff      	movs	r2, #255	; 0xff
 800bd90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	22ff      	movs	r2, #255	; 0xff
 800bd98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d114      	bne.n	800bdcc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	691b      	ldr	r3, [r3, #16]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d01a      	beq.n	800bde0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	3310      	adds	r3, #16
 800bdae:	4618      	mov	r0, r3
 800bdb0:	f001 fb36 	bl	800d420 <xTaskRemoveFromEventList>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d012      	beq.n	800bde0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bdba:	4b0d      	ldr	r3, [pc, #52]	; (800bdf0 <xQueueGenericReset+0xd0>)
 800bdbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdc0:	601a      	str	r2, [r3, #0]
 800bdc2:	f3bf 8f4f 	dsb	sy
 800bdc6:	f3bf 8f6f 	isb	sy
 800bdca:	e009      	b.n	800bde0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	3310      	adds	r3, #16
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f7ff fef1 	bl	800bbb8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	3324      	adds	r3, #36	; 0x24
 800bdda:	4618      	mov	r0, r3
 800bddc:	f7ff feec 	bl	800bbb8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bde0:	f002 f854 	bl	800de8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bde4:	2301      	movs	r3, #1
}
 800bde6:	4618      	mov	r0, r3
 800bde8:	3710      	adds	r7, #16
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}
 800bdee:	bf00      	nop
 800bdf0:	e000ed04 	.word	0xe000ed04

0800bdf4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b08e      	sub	sp, #56	; 0x38
 800bdf8:	af02      	add	r7, sp, #8
 800bdfa:	60f8      	str	r0, [r7, #12]
 800bdfc:	60b9      	str	r1, [r7, #8]
 800bdfe:	607a      	str	r2, [r7, #4]
 800be00:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d10b      	bne.n	800be20 <xQueueGenericCreateStatic+0x2c>
 800be08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be0c:	b672      	cpsid	i
 800be0e:	f383 8811 	msr	BASEPRI, r3
 800be12:	f3bf 8f6f 	isb	sy
 800be16:	f3bf 8f4f 	dsb	sy
 800be1a:	b662      	cpsie	i
 800be1c:	62bb      	str	r3, [r7, #40]	; 0x28
 800be1e:	e7fe      	b.n	800be1e <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d10b      	bne.n	800be3e <xQueueGenericCreateStatic+0x4a>
 800be26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be2a:	b672      	cpsid	i
 800be2c:	f383 8811 	msr	BASEPRI, r3
 800be30:	f3bf 8f6f 	isb	sy
 800be34:	f3bf 8f4f 	dsb	sy
 800be38:	b662      	cpsie	i
 800be3a:	627b      	str	r3, [r7, #36]	; 0x24
 800be3c:	e7fe      	b.n	800be3c <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d002      	beq.n	800be4a <xQueueGenericCreateStatic+0x56>
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d001      	beq.n	800be4e <xQueueGenericCreateStatic+0x5a>
 800be4a:	2301      	movs	r3, #1
 800be4c:	e000      	b.n	800be50 <xQueueGenericCreateStatic+0x5c>
 800be4e:	2300      	movs	r3, #0
 800be50:	2b00      	cmp	r3, #0
 800be52:	d10b      	bne.n	800be6c <xQueueGenericCreateStatic+0x78>
 800be54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be58:	b672      	cpsid	i
 800be5a:	f383 8811 	msr	BASEPRI, r3
 800be5e:	f3bf 8f6f 	isb	sy
 800be62:	f3bf 8f4f 	dsb	sy
 800be66:	b662      	cpsie	i
 800be68:	623b      	str	r3, [r7, #32]
 800be6a:	e7fe      	b.n	800be6a <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d102      	bne.n	800be78 <xQueueGenericCreateStatic+0x84>
 800be72:	68bb      	ldr	r3, [r7, #8]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d101      	bne.n	800be7c <xQueueGenericCreateStatic+0x88>
 800be78:	2301      	movs	r3, #1
 800be7a:	e000      	b.n	800be7e <xQueueGenericCreateStatic+0x8a>
 800be7c:	2300      	movs	r3, #0
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d10b      	bne.n	800be9a <xQueueGenericCreateStatic+0xa6>
 800be82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be86:	b672      	cpsid	i
 800be88:	f383 8811 	msr	BASEPRI, r3
 800be8c:	f3bf 8f6f 	isb	sy
 800be90:	f3bf 8f4f 	dsb	sy
 800be94:	b662      	cpsie	i
 800be96:	61fb      	str	r3, [r7, #28]
 800be98:	e7fe      	b.n	800be98 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800be9a:	2348      	movs	r3, #72	; 0x48
 800be9c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800be9e:	697b      	ldr	r3, [r7, #20]
 800bea0:	2b48      	cmp	r3, #72	; 0x48
 800bea2:	d00b      	beq.n	800bebc <xQueueGenericCreateStatic+0xc8>
 800bea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bea8:	b672      	cpsid	i
 800beaa:	f383 8811 	msr	BASEPRI, r3
 800beae:	f3bf 8f6f 	isb	sy
 800beb2:	f3bf 8f4f 	dsb	sy
 800beb6:	b662      	cpsie	i
 800beb8:	61bb      	str	r3, [r7, #24]
 800beba:	e7fe      	b.n	800beba <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bebc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d00d      	beq.n	800bee4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beca:	2201      	movs	r2, #1
 800becc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bed0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bed6:	9300      	str	r3, [sp, #0]
 800bed8:	4613      	mov	r3, r2
 800beda:	687a      	ldr	r2, [r7, #4]
 800bedc:	68b9      	ldr	r1, [r7, #8]
 800bede:	68f8      	ldr	r0, [r7, #12]
 800bee0:	f000 f846 	bl	800bf70 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bee6:	4618      	mov	r0, r3
 800bee8:	3730      	adds	r7, #48	; 0x30
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}

0800beee <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800beee:	b580      	push	{r7, lr}
 800bef0:	b08a      	sub	sp, #40	; 0x28
 800bef2:	af02      	add	r7, sp, #8
 800bef4:	60f8      	str	r0, [r7, #12]
 800bef6:	60b9      	str	r1, [r7, #8]
 800bef8:	4613      	mov	r3, r2
 800befa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d10b      	bne.n	800bf1a <xQueueGenericCreate+0x2c>
 800bf02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf06:	b672      	cpsid	i
 800bf08:	f383 8811 	msr	BASEPRI, r3
 800bf0c:	f3bf 8f6f 	isb	sy
 800bf10:	f3bf 8f4f 	dsb	sy
 800bf14:	b662      	cpsie	i
 800bf16:	613b      	str	r3, [r7, #16]
 800bf18:	e7fe      	b.n	800bf18 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800bf1a:	68bb      	ldr	r3, [r7, #8]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d102      	bne.n	800bf26 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800bf20:	2300      	movs	r3, #0
 800bf22:	61fb      	str	r3, [r7, #28]
 800bf24:	e004      	b.n	800bf30 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	68ba      	ldr	r2, [r7, #8]
 800bf2a:	fb02 f303 	mul.w	r3, r2, r3
 800bf2e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bf30:	69fb      	ldr	r3, [r7, #28]
 800bf32:	3348      	adds	r3, #72	; 0x48
 800bf34:	4618      	mov	r0, r3
 800bf36:	f002 f899 	bl	800e06c <pvPortMalloc>
 800bf3a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bf3c:	69bb      	ldr	r3, [r7, #24]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d011      	beq.n	800bf66 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bf42:	69bb      	ldr	r3, [r7, #24]
 800bf44:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bf46:	697b      	ldr	r3, [r7, #20]
 800bf48:	3348      	adds	r3, #72	; 0x48
 800bf4a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bf4c:	69bb      	ldr	r3, [r7, #24]
 800bf4e:	2200      	movs	r2, #0
 800bf50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bf54:	79fa      	ldrb	r2, [r7, #7]
 800bf56:	69bb      	ldr	r3, [r7, #24]
 800bf58:	9300      	str	r3, [sp, #0]
 800bf5a:	4613      	mov	r3, r2
 800bf5c:	697a      	ldr	r2, [r7, #20]
 800bf5e:	68b9      	ldr	r1, [r7, #8]
 800bf60:	68f8      	ldr	r0, [r7, #12]
 800bf62:	f000 f805 	bl	800bf70 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bf66:	69bb      	ldr	r3, [r7, #24]
	}
 800bf68:	4618      	mov	r0, r3
 800bf6a:	3720      	adds	r7, #32
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bd80      	pop	{r7, pc}

0800bf70 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b084      	sub	sp, #16
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	60f8      	str	r0, [r7, #12]
 800bf78:	60b9      	str	r1, [r7, #8]
 800bf7a:	607a      	str	r2, [r7, #4]
 800bf7c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bf7e:	68bb      	ldr	r3, [r7, #8]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d103      	bne.n	800bf8c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bf84:	69bb      	ldr	r3, [r7, #24]
 800bf86:	69ba      	ldr	r2, [r7, #24]
 800bf88:	601a      	str	r2, [r3, #0]
 800bf8a:	e002      	b.n	800bf92 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bf8c:	69bb      	ldr	r3, [r7, #24]
 800bf8e:	687a      	ldr	r2, [r7, #4]
 800bf90:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bf92:	69bb      	ldr	r3, [r7, #24]
 800bf94:	68fa      	ldr	r2, [r7, #12]
 800bf96:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bf98:	69bb      	ldr	r3, [r7, #24]
 800bf9a:	68ba      	ldr	r2, [r7, #8]
 800bf9c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bf9e:	2101      	movs	r1, #1
 800bfa0:	69b8      	ldr	r0, [r7, #24]
 800bfa2:	f7ff febd 	bl	800bd20 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bfa6:	bf00      	nop
 800bfa8:	3710      	adds	r7, #16
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	bd80      	pop	{r7, pc}
	...

0800bfb0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b08e      	sub	sp, #56	; 0x38
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	60f8      	str	r0, [r7, #12]
 800bfb8:	60b9      	str	r1, [r7, #8]
 800bfba:	607a      	str	r2, [r7, #4]
 800bfbc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bfc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d10b      	bne.n	800bfe4 <xQueueGenericSend+0x34>
 800bfcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfd0:	b672      	cpsid	i
 800bfd2:	f383 8811 	msr	BASEPRI, r3
 800bfd6:	f3bf 8f6f 	isb	sy
 800bfda:	f3bf 8f4f 	dsb	sy
 800bfde:	b662      	cpsie	i
 800bfe0:	62bb      	str	r3, [r7, #40]	; 0x28
 800bfe2:	e7fe      	b.n	800bfe2 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d103      	bne.n	800bff2 <xQueueGenericSend+0x42>
 800bfea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d101      	bne.n	800bff6 <xQueueGenericSend+0x46>
 800bff2:	2301      	movs	r3, #1
 800bff4:	e000      	b.n	800bff8 <xQueueGenericSend+0x48>
 800bff6:	2300      	movs	r3, #0
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d10b      	bne.n	800c014 <xQueueGenericSend+0x64>
 800bffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c000:	b672      	cpsid	i
 800c002:	f383 8811 	msr	BASEPRI, r3
 800c006:	f3bf 8f6f 	isb	sy
 800c00a:	f3bf 8f4f 	dsb	sy
 800c00e:	b662      	cpsie	i
 800c010:	627b      	str	r3, [r7, #36]	; 0x24
 800c012:	e7fe      	b.n	800c012 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	2b02      	cmp	r3, #2
 800c018:	d103      	bne.n	800c022 <xQueueGenericSend+0x72>
 800c01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c01c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c01e:	2b01      	cmp	r3, #1
 800c020:	d101      	bne.n	800c026 <xQueueGenericSend+0x76>
 800c022:	2301      	movs	r3, #1
 800c024:	e000      	b.n	800c028 <xQueueGenericSend+0x78>
 800c026:	2300      	movs	r3, #0
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d10b      	bne.n	800c044 <xQueueGenericSend+0x94>
 800c02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c030:	b672      	cpsid	i
 800c032:	f383 8811 	msr	BASEPRI, r3
 800c036:	f3bf 8f6f 	isb	sy
 800c03a:	f3bf 8f4f 	dsb	sy
 800c03e:	b662      	cpsie	i
 800c040:	623b      	str	r3, [r7, #32]
 800c042:	e7fe      	b.n	800c042 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c044:	f001 fbac 	bl	800d7a0 <xTaskGetSchedulerState>
 800c048:	4603      	mov	r3, r0
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d102      	bne.n	800c054 <xQueueGenericSend+0xa4>
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d101      	bne.n	800c058 <xQueueGenericSend+0xa8>
 800c054:	2301      	movs	r3, #1
 800c056:	e000      	b.n	800c05a <xQueueGenericSend+0xaa>
 800c058:	2300      	movs	r3, #0
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d10b      	bne.n	800c076 <xQueueGenericSend+0xc6>
 800c05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c062:	b672      	cpsid	i
 800c064:	f383 8811 	msr	BASEPRI, r3
 800c068:	f3bf 8f6f 	isb	sy
 800c06c:	f3bf 8f4f 	dsb	sy
 800c070:	b662      	cpsie	i
 800c072:	61fb      	str	r3, [r7, #28]
 800c074:	e7fe      	b.n	800c074 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c076:	f001 fed7 	bl	800de28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c07c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c082:	429a      	cmp	r2, r3
 800c084:	d302      	bcc.n	800c08c <xQueueGenericSend+0xdc>
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	2b02      	cmp	r3, #2
 800c08a:	d129      	bne.n	800c0e0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c08c:	683a      	ldr	r2, [r7, #0]
 800c08e:	68b9      	ldr	r1, [r7, #8]
 800c090:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c092:	f000 fc4a 	bl	800c92a <prvCopyDataToQueue>
 800c096:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c09a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d010      	beq.n	800c0c2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c0a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a2:	3324      	adds	r3, #36	; 0x24
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	f001 f9bb 	bl	800d420 <xTaskRemoveFromEventList>
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d013      	beq.n	800c0d8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c0b0:	4b3f      	ldr	r3, [pc, #252]	; (800c1b0 <xQueueGenericSend+0x200>)
 800c0b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0b6:	601a      	str	r2, [r3, #0]
 800c0b8:	f3bf 8f4f 	dsb	sy
 800c0bc:	f3bf 8f6f 	isb	sy
 800c0c0:	e00a      	b.n	800c0d8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c0c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d007      	beq.n	800c0d8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c0c8:	4b39      	ldr	r3, [pc, #228]	; (800c1b0 <xQueueGenericSend+0x200>)
 800c0ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0ce:	601a      	str	r2, [r3, #0]
 800c0d0:	f3bf 8f4f 	dsb	sy
 800c0d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c0d8:	f001 fed8 	bl	800de8c <vPortExitCritical>
				return pdPASS;
 800c0dc:	2301      	movs	r3, #1
 800c0de:	e063      	b.n	800c1a8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d103      	bne.n	800c0ee <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c0e6:	f001 fed1 	bl	800de8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	e05c      	b.n	800c1a8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c0ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d106      	bne.n	800c102 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c0f4:	f107 0314 	add.w	r3, r7, #20
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	f001 f9f5 	bl	800d4e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c0fe:	2301      	movs	r3, #1
 800c100:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c102:	f001 fec3 	bl	800de8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c106:	f000 ff5b 	bl	800cfc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c10a:	f001 fe8d 	bl	800de28 <vPortEnterCritical>
 800c10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c110:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c114:	b25b      	sxtb	r3, r3
 800c116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c11a:	d103      	bne.n	800c124 <xQueueGenericSend+0x174>
 800c11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c11e:	2200      	movs	r2, #0
 800c120:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c126:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c12a:	b25b      	sxtb	r3, r3
 800c12c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c130:	d103      	bne.n	800c13a <xQueueGenericSend+0x18a>
 800c132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c134:	2200      	movs	r2, #0
 800c136:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c13a:	f001 fea7 	bl	800de8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c13e:	1d3a      	adds	r2, r7, #4
 800c140:	f107 0314 	add.w	r3, r7, #20
 800c144:	4611      	mov	r1, r2
 800c146:	4618      	mov	r0, r3
 800c148:	f001 f9e4 	bl	800d514 <xTaskCheckForTimeOut>
 800c14c:	4603      	mov	r3, r0
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d124      	bne.n	800c19c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c152:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c154:	f000 fce1 	bl	800cb1a <prvIsQueueFull>
 800c158:	4603      	mov	r3, r0
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d018      	beq.n	800c190 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c160:	3310      	adds	r3, #16
 800c162:	687a      	ldr	r2, [r7, #4]
 800c164:	4611      	mov	r1, r2
 800c166:	4618      	mov	r0, r3
 800c168:	f001 f934 	bl	800d3d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c16c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c16e:	f000 fc6c 	bl	800ca4a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c172:	f000 ff33 	bl	800cfdc <xTaskResumeAll>
 800c176:	4603      	mov	r3, r0
 800c178:	2b00      	cmp	r3, #0
 800c17a:	f47f af7c 	bne.w	800c076 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c17e:	4b0c      	ldr	r3, [pc, #48]	; (800c1b0 <xQueueGenericSend+0x200>)
 800c180:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c184:	601a      	str	r2, [r3, #0]
 800c186:	f3bf 8f4f 	dsb	sy
 800c18a:	f3bf 8f6f 	isb	sy
 800c18e:	e772      	b.n	800c076 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c190:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c192:	f000 fc5a 	bl	800ca4a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c196:	f000 ff21 	bl	800cfdc <xTaskResumeAll>
 800c19a:	e76c      	b.n	800c076 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c19c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c19e:	f000 fc54 	bl	800ca4a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c1a2:	f000 ff1b 	bl	800cfdc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c1a6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	3738      	adds	r7, #56	; 0x38
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bd80      	pop	{r7, pc}
 800c1b0:	e000ed04 	.word	0xe000ed04

0800c1b4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b08e      	sub	sp, #56	; 0x38
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	60f8      	str	r0, [r7, #12]
 800c1bc:	60b9      	str	r1, [r7, #8]
 800c1be:	607a      	str	r2, [r7, #4]
 800c1c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c1c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d10b      	bne.n	800c1e4 <xQueueGenericSendFromISR+0x30>
 800c1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1d0:	b672      	cpsid	i
 800c1d2:	f383 8811 	msr	BASEPRI, r3
 800c1d6:	f3bf 8f6f 	isb	sy
 800c1da:	f3bf 8f4f 	dsb	sy
 800c1de:	b662      	cpsie	i
 800c1e0:	627b      	str	r3, [r7, #36]	; 0x24
 800c1e2:	e7fe      	b.n	800c1e2 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d103      	bne.n	800c1f2 <xQueueGenericSendFromISR+0x3e>
 800c1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d101      	bne.n	800c1f6 <xQueueGenericSendFromISR+0x42>
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	e000      	b.n	800c1f8 <xQueueGenericSendFromISR+0x44>
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d10b      	bne.n	800c214 <xQueueGenericSendFromISR+0x60>
 800c1fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c200:	b672      	cpsid	i
 800c202:	f383 8811 	msr	BASEPRI, r3
 800c206:	f3bf 8f6f 	isb	sy
 800c20a:	f3bf 8f4f 	dsb	sy
 800c20e:	b662      	cpsie	i
 800c210:	623b      	str	r3, [r7, #32]
 800c212:	e7fe      	b.n	800c212 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	2b02      	cmp	r3, #2
 800c218:	d103      	bne.n	800c222 <xQueueGenericSendFromISR+0x6e>
 800c21a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c21c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c21e:	2b01      	cmp	r3, #1
 800c220:	d101      	bne.n	800c226 <xQueueGenericSendFromISR+0x72>
 800c222:	2301      	movs	r3, #1
 800c224:	e000      	b.n	800c228 <xQueueGenericSendFromISR+0x74>
 800c226:	2300      	movs	r3, #0
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d10b      	bne.n	800c244 <xQueueGenericSendFromISR+0x90>
 800c22c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c230:	b672      	cpsid	i
 800c232:	f383 8811 	msr	BASEPRI, r3
 800c236:	f3bf 8f6f 	isb	sy
 800c23a:	f3bf 8f4f 	dsb	sy
 800c23e:	b662      	cpsie	i
 800c240:	61fb      	str	r3, [r7, #28]
 800c242:	e7fe      	b.n	800c242 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c244:	f001 fed0 	bl	800dfe8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c248:	f3ef 8211 	mrs	r2, BASEPRI
 800c24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c250:	b672      	cpsid	i
 800c252:	f383 8811 	msr	BASEPRI, r3
 800c256:	f3bf 8f6f 	isb	sy
 800c25a:	f3bf 8f4f 	dsb	sy
 800c25e:	b662      	cpsie	i
 800c260:	61ba      	str	r2, [r7, #24]
 800c262:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c264:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c266:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c26a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c26c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c26e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c270:	429a      	cmp	r2, r3
 800c272:	d302      	bcc.n	800c27a <xQueueGenericSendFromISR+0xc6>
 800c274:	683b      	ldr	r3, [r7, #0]
 800c276:	2b02      	cmp	r3, #2
 800c278:	d12c      	bne.n	800c2d4 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c27a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c27c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c280:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c284:	683a      	ldr	r2, [r7, #0]
 800c286:	68b9      	ldr	r1, [r7, #8]
 800c288:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c28a:	f000 fb4e 	bl	800c92a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c28e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800c292:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c296:	d112      	bne.n	800c2be <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c29a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d016      	beq.n	800c2ce <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c2a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2a2:	3324      	adds	r3, #36	; 0x24
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	f001 f8bb 	bl	800d420 <xTaskRemoveFromEventList>
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d00e      	beq.n	800c2ce <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d00b      	beq.n	800c2ce <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	2201      	movs	r2, #1
 800c2ba:	601a      	str	r2, [r3, #0]
 800c2bc:	e007      	b.n	800c2ce <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c2be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c2c2:	3301      	adds	r3, #1
 800c2c4:	b2db      	uxtb	r3, r3
 800c2c6:	b25a      	sxtb	r2, r3
 800c2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c2ce:	2301      	movs	r3, #1
 800c2d0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800c2d2:	e001      	b.n	800c2d8 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	637b      	str	r3, [r7, #52]	; 0x34
 800c2d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2da:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c2dc:	693b      	ldr	r3, [r7, #16]
 800c2de:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c2e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	3738      	adds	r7, #56	; 0x38
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}

0800c2ec <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b08e      	sub	sp, #56	; 0x38
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
 800c2f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d10b      	bne.n	800c318 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800c300:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c304:	b672      	cpsid	i
 800c306:	f383 8811 	msr	BASEPRI, r3
 800c30a:	f3bf 8f6f 	isb	sy
 800c30e:	f3bf 8f4f 	dsb	sy
 800c312:	b662      	cpsie	i
 800c314:	623b      	str	r3, [r7, #32]
 800c316:	e7fe      	b.n	800c316 <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c31a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d00b      	beq.n	800c338 <xQueueGiveFromISR+0x4c>
 800c320:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c324:	b672      	cpsid	i
 800c326:	f383 8811 	msr	BASEPRI, r3
 800c32a:	f3bf 8f6f 	isb	sy
 800c32e:	f3bf 8f4f 	dsb	sy
 800c332:	b662      	cpsie	i
 800c334:	61fb      	str	r3, [r7, #28]
 800c336:	e7fe      	b.n	800c336 <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d103      	bne.n	800c348 <xQueueGiveFromISR+0x5c>
 800c340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c342:	689b      	ldr	r3, [r3, #8]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d101      	bne.n	800c34c <xQueueGiveFromISR+0x60>
 800c348:	2301      	movs	r3, #1
 800c34a:	e000      	b.n	800c34e <xQueueGiveFromISR+0x62>
 800c34c:	2300      	movs	r3, #0
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d10b      	bne.n	800c36a <xQueueGiveFromISR+0x7e>
 800c352:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c356:	b672      	cpsid	i
 800c358:	f383 8811 	msr	BASEPRI, r3
 800c35c:	f3bf 8f6f 	isb	sy
 800c360:	f3bf 8f4f 	dsb	sy
 800c364:	b662      	cpsie	i
 800c366:	61bb      	str	r3, [r7, #24]
 800c368:	e7fe      	b.n	800c368 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c36a:	f001 fe3d 	bl	800dfe8 <vPortValidateInterruptPriority>
	__asm volatile
 800c36e:	f3ef 8211 	mrs	r2, BASEPRI
 800c372:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c376:	b672      	cpsid	i
 800c378:	f383 8811 	msr	BASEPRI, r3
 800c37c:	f3bf 8f6f 	isb	sy
 800c380:	f3bf 8f4f 	dsb	sy
 800c384:	b662      	cpsie	i
 800c386:	617a      	str	r2, [r7, #20]
 800c388:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c38a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c38c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c392:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c398:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c39a:	429a      	cmp	r2, r3
 800c39c:	d22b      	bcs.n	800c3f6 <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c3a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3aa:	1c5a      	adds	r2, r3, #1
 800c3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ae:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c3b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c3b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3b8:	d112      	bne.n	800c3e0 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d016      	beq.n	800c3f0 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c4:	3324      	adds	r3, #36	; 0x24
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f001 f82a 	bl	800d420 <xTaskRemoveFromEventList>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d00e      	beq.n	800c3f0 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d00b      	beq.n	800c3f0 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	2201      	movs	r2, #1
 800c3dc:	601a      	str	r2, [r3, #0]
 800c3de:	e007      	b.n	800c3f0 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c3e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c3e4:	3301      	adds	r3, #1
 800c3e6:	b2db      	uxtb	r3, r3
 800c3e8:	b25a      	sxtb	r2, r3
 800c3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c3f0:	2301      	movs	r3, #1
 800c3f2:	637b      	str	r3, [r7, #52]	; 0x34
 800c3f4:	e001      	b.n	800c3fa <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	637b      	str	r3, [r7, #52]	; 0x34
 800c3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3fc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c406:	4618      	mov	r0, r3
 800c408:	3738      	adds	r7, #56	; 0x38
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}
	...

0800c410 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b08c      	sub	sp, #48	; 0x30
 800c414:	af00      	add	r7, sp, #0
 800c416:	60f8      	str	r0, [r7, #12]
 800c418:	60b9      	str	r1, [r7, #8]
 800c41a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c41c:	2300      	movs	r3, #0
 800c41e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c426:	2b00      	cmp	r3, #0
 800c428:	d10b      	bne.n	800c442 <xQueueReceive+0x32>
	__asm volatile
 800c42a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c42e:	b672      	cpsid	i
 800c430:	f383 8811 	msr	BASEPRI, r3
 800c434:	f3bf 8f6f 	isb	sy
 800c438:	f3bf 8f4f 	dsb	sy
 800c43c:	b662      	cpsie	i
 800c43e:	623b      	str	r3, [r7, #32]
 800c440:	e7fe      	b.n	800c440 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c442:	68bb      	ldr	r3, [r7, #8]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d103      	bne.n	800c450 <xQueueReceive+0x40>
 800c448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c44a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d101      	bne.n	800c454 <xQueueReceive+0x44>
 800c450:	2301      	movs	r3, #1
 800c452:	e000      	b.n	800c456 <xQueueReceive+0x46>
 800c454:	2300      	movs	r3, #0
 800c456:	2b00      	cmp	r3, #0
 800c458:	d10b      	bne.n	800c472 <xQueueReceive+0x62>
 800c45a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c45e:	b672      	cpsid	i
 800c460:	f383 8811 	msr	BASEPRI, r3
 800c464:	f3bf 8f6f 	isb	sy
 800c468:	f3bf 8f4f 	dsb	sy
 800c46c:	b662      	cpsie	i
 800c46e:	61fb      	str	r3, [r7, #28]
 800c470:	e7fe      	b.n	800c470 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c472:	f001 f995 	bl	800d7a0 <xTaskGetSchedulerState>
 800c476:	4603      	mov	r3, r0
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d102      	bne.n	800c482 <xQueueReceive+0x72>
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d101      	bne.n	800c486 <xQueueReceive+0x76>
 800c482:	2301      	movs	r3, #1
 800c484:	e000      	b.n	800c488 <xQueueReceive+0x78>
 800c486:	2300      	movs	r3, #0
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d10b      	bne.n	800c4a4 <xQueueReceive+0x94>
 800c48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c490:	b672      	cpsid	i
 800c492:	f383 8811 	msr	BASEPRI, r3
 800c496:	f3bf 8f6f 	isb	sy
 800c49a:	f3bf 8f4f 	dsb	sy
 800c49e:	b662      	cpsie	i
 800c4a0:	61bb      	str	r3, [r7, #24]
 800c4a2:	e7fe      	b.n	800c4a2 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c4a4:	f001 fcc0 	bl	800de28 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4ac:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d01f      	beq.n	800c4f4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c4b4:	68b9      	ldr	r1, [r7, #8]
 800c4b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4b8:	f000 faa1 	bl	800c9fe <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4be:	1e5a      	subs	r2, r3, #1
 800c4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4c2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c4c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4c6:	691b      	ldr	r3, [r3, #16]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d00f      	beq.n	800c4ec <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ce:	3310      	adds	r3, #16
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	f000 ffa5 	bl	800d420 <xTaskRemoveFromEventList>
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d007      	beq.n	800c4ec <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c4dc:	4b3c      	ldr	r3, [pc, #240]	; (800c5d0 <xQueueReceive+0x1c0>)
 800c4de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4e2:	601a      	str	r2, [r3, #0]
 800c4e4:	f3bf 8f4f 	dsb	sy
 800c4e8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c4ec:	f001 fcce 	bl	800de8c <vPortExitCritical>
				return pdPASS;
 800c4f0:	2301      	movs	r3, #1
 800c4f2:	e069      	b.n	800c5c8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d103      	bne.n	800c502 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c4fa:	f001 fcc7 	bl	800de8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c4fe:	2300      	movs	r3, #0
 800c500:	e062      	b.n	800c5c8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c504:	2b00      	cmp	r3, #0
 800c506:	d106      	bne.n	800c516 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c508:	f107 0310 	add.w	r3, r7, #16
 800c50c:	4618      	mov	r0, r3
 800c50e:	f000 ffeb 	bl	800d4e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c512:	2301      	movs	r3, #1
 800c514:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c516:	f001 fcb9 	bl	800de8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c51a:	f000 fd51 	bl	800cfc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c51e:	f001 fc83 	bl	800de28 <vPortEnterCritical>
 800c522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c524:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c528:	b25b      	sxtb	r3, r3
 800c52a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c52e:	d103      	bne.n	800c538 <xQueueReceive+0x128>
 800c530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c532:	2200      	movs	r2, #0
 800c534:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c53a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c53e:	b25b      	sxtb	r3, r3
 800c540:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c544:	d103      	bne.n	800c54e <xQueueReceive+0x13e>
 800c546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c548:	2200      	movs	r2, #0
 800c54a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c54e:	f001 fc9d 	bl	800de8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c552:	1d3a      	adds	r2, r7, #4
 800c554:	f107 0310 	add.w	r3, r7, #16
 800c558:	4611      	mov	r1, r2
 800c55a:	4618      	mov	r0, r3
 800c55c:	f000 ffda 	bl	800d514 <xTaskCheckForTimeOut>
 800c560:	4603      	mov	r3, r0
 800c562:	2b00      	cmp	r3, #0
 800c564:	d123      	bne.n	800c5ae <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c566:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c568:	f000 fac1 	bl	800caee <prvIsQueueEmpty>
 800c56c:	4603      	mov	r3, r0
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d017      	beq.n	800c5a2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c574:	3324      	adds	r3, #36	; 0x24
 800c576:	687a      	ldr	r2, [r7, #4]
 800c578:	4611      	mov	r1, r2
 800c57a:	4618      	mov	r0, r3
 800c57c:	f000 ff2a 	bl	800d3d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c580:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c582:	f000 fa62 	bl	800ca4a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c586:	f000 fd29 	bl	800cfdc <xTaskResumeAll>
 800c58a:	4603      	mov	r3, r0
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d189      	bne.n	800c4a4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800c590:	4b0f      	ldr	r3, [pc, #60]	; (800c5d0 <xQueueReceive+0x1c0>)
 800c592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c596:	601a      	str	r2, [r3, #0]
 800c598:	f3bf 8f4f 	dsb	sy
 800c59c:	f3bf 8f6f 	isb	sy
 800c5a0:	e780      	b.n	800c4a4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c5a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c5a4:	f000 fa51 	bl	800ca4a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c5a8:	f000 fd18 	bl	800cfdc <xTaskResumeAll>
 800c5ac:	e77a      	b.n	800c4a4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c5ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c5b0:	f000 fa4b 	bl	800ca4a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c5b4:	f000 fd12 	bl	800cfdc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c5b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c5ba:	f000 fa98 	bl	800caee <prvIsQueueEmpty>
 800c5be:	4603      	mov	r3, r0
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	f43f af6f 	beq.w	800c4a4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c5c6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	3730      	adds	r7, #48	; 0x30
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	bd80      	pop	{r7, pc}
 800c5d0:	e000ed04 	.word	0xe000ed04

0800c5d4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b08e      	sub	sp, #56	; 0x38
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
 800c5dc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c5de:	2300      	movs	r3, #0
 800c5e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c5ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d10b      	bne.n	800c608 <xQueueSemaphoreTake+0x34>
 800c5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5f4:	b672      	cpsid	i
 800c5f6:	f383 8811 	msr	BASEPRI, r3
 800c5fa:	f3bf 8f6f 	isb	sy
 800c5fe:	f3bf 8f4f 	dsb	sy
 800c602:	b662      	cpsie	i
 800c604:	623b      	str	r3, [r7, #32]
 800c606:	e7fe      	b.n	800c606 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c60a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d00b      	beq.n	800c628 <xQueueSemaphoreTake+0x54>
 800c610:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c614:	b672      	cpsid	i
 800c616:	f383 8811 	msr	BASEPRI, r3
 800c61a:	f3bf 8f6f 	isb	sy
 800c61e:	f3bf 8f4f 	dsb	sy
 800c622:	b662      	cpsie	i
 800c624:	61fb      	str	r3, [r7, #28]
 800c626:	e7fe      	b.n	800c626 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c628:	f001 f8ba 	bl	800d7a0 <xTaskGetSchedulerState>
 800c62c:	4603      	mov	r3, r0
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d102      	bne.n	800c638 <xQueueSemaphoreTake+0x64>
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d101      	bne.n	800c63c <xQueueSemaphoreTake+0x68>
 800c638:	2301      	movs	r3, #1
 800c63a:	e000      	b.n	800c63e <xQueueSemaphoreTake+0x6a>
 800c63c:	2300      	movs	r3, #0
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d10b      	bne.n	800c65a <xQueueSemaphoreTake+0x86>
 800c642:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c646:	b672      	cpsid	i
 800c648:	f383 8811 	msr	BASEPRI, r3
 800c64c:	f3bf 8f6f 	isb	sy
 800c650:	f3bf 8f4f 	dsb	sy
 800c654:	b662      	cpsie	i
 800c656:	61bb      	str	r3, [r7, #24]
 800c658:	e7fe      	b.n	800c658 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c65a:	f001 fbe5 	bl	800de28 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c65e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c662:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c666:	2b00      	cmp	r3, #0
 800c668:	d024      	beq.n	800c6b4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c66a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c66c:	1e5a      	subs	r2, r3, #1
 800c66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c670:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d104      	bne.n	800c684 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c67a:	f001 fa53 	bl	800db24 <pvTaskIncrementMutexHeldCount>
 800c67e:	4602      	mov	r2, r0
 800c680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c682:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c686:	691b      	ldr	r3, [r3, #16]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d00f      	beq.n	800c6ac <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c68e:	3310      	adds	r3, #16
 800c690:	4618      	mov	r0, r3
 800c692:	f000 fec5 	bl	800d420 <xTaskRemoveFromEventList>
 800c696:	4603      	mov	r3, r0
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d007      	beq.n	800c6ac <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c69c:	4b54      	ldr	r3, [pc, #336]	; (800c7f0 <xQueueSemaphoreTake+0x21c>)
 800c69e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6a2:	601a      	str	r2, [r3, #0]
 800c6a4:	f3bf 8f4f 	dsb	sy
 800c6a8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c6ac:	f001 fbee 	bl	800de8c <vPortExitCritical>
				return pdPASS;
 800c6b0:	2301      	movs	r3, #1
 800c6b2:	e098      	b.n	800c7e6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c6b4:	683b      	ldr	r3, [r7, #0]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d112      	bne.n	800c6e0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d00b      	beq.n	800c6d8 <xQueueSemaphoreTake+0x104>
 800c6c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6c4:	b672      	cpsid	i
 800c6c6:	f383 8811 	msr	BASEPRI, r3
 800c6ca:	f3bf 8f6f 	isb	sy
 800c6ce:	f3bf 8f4f 	dsb	sy
 800c6d2:	b662      	cpsie	i
 800c6d4:	617b      	str	r3, [r7, #20]
 800c6d6:	e7fe      	b.n	800c6d6 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c6d8:	f001 fbd8 	bl	800de8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c6dc:	2300      	movs	r3, #0
 800c6de:	e082      	b.n	800c7e6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c6e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d106      	bne.n	800c6f4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c6e6:	f107 030c 	add.w	r3, r7, #12
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	f000 fefc 	bl	800d4e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c6f0:	2301      	movs	r3, #1
 800c6f2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c6f4:	f001 fbca 	bl	800de8c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c6f8:	f000 fc62 	bl	800cfc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c6fc:	f001 fb94 	bl	800de28 <vPortEnterCritical>
 800c700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c702:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c706:	b25b      	sxtb	r3, r3
 800c708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c70c:	d103      	bne.n	800c716 <xQueueSemaphoreTake+0x142>
 800c70e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c710:	2200      	movs	r2, #0
 800c712:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c718:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c71c:	b25b      	sxtb	r3, r3
 800c71e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c722:	d103      	bne.n	800c72c <xQueueSemaphoreTake+0x158>
 800c724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c726:	2200      	movs	r2, #0
 800c728:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c72c:	f001 fbae 	bl	800de8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c730:	463a      	mov	r2, r7
 800c732:	f107 030c 	add.w	r3, r7, #12
 800c736:	4611      	mov	r1, r2
 800c738:	4618      	mov	r0, r3
 800c73a:	f000 feeb 	bl	800d514 <xTaskCheckForTimeOut>
 800c73e:	4603      	mov	r3, r0
 800c740:	2b00      	cmp	r3, #0
 800c742:	d132      	bne.n	800c7aa <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c744:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c746:	f000 f9d2 	bl	800caee <prvIsQueueEmpty>
 800c74a:	4603      	mov	r3, r0
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d026      	beq.n	800c79e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d109      	bne.n	800c76c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800c758:	f001 fb66 	bl	800de28 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c75c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c75e:	689b      	ldr	r3, [r3, #8]
 800c760:	4618      	mov	r0, r3
 800c762:	f001 f83b 	bl	800d7dc <xTaskPriorityInherit>
 800c766:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c768:	f001 fb90 	bl	800de8c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c76e:	3324      	adds	r3, #36	; 0x24
 800c770:	683a      	ldr	r2, [r7, #0]
 800c772:	4611      	mov	r1, r2
 800c774:	4618      	mov	r0, r3
 800c776:	f000 fe2d 	bl	800d3d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c77a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c77c:	f000 f965 	bl	800ca4a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c780:	f000 fc2c 	bl	800cfdc <xTaskResumeAll>
 800c784:	4603      	mov	r3, r0
 800c786:	2b00      	cmp	r3, #0
 800c788:	f47f af67 	bne.w	800c65a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800c78c:	4b18      	ldr	r3, [pc, #96]	; (800c7f0 <xQueueSemaphoreTake+0x21c>)
 800c78e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c792:	601a      	str	r2, [r3, #0]
 800c794:	f3bf 8f4f 	dsb	sy
 800c798:	f3bf 8f6f 	isb	sy
 800c79c:	e75d      	b.n	800c65a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c79e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c7a0:	f000 f953 	bl	800ca4a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c7a4:	f000 fc1a 	bl	800cfdc <xTaskResumeAll>
 800c7a8:	e757      	b.n	800c65a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c7aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c7ac:	f000 f94d 	bl	800ca4a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c7b0:	f000 fc14 	bl	800cfdc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c7b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c7b6:	f000 f99a 	bl	800caee <prvIsQueueEmpty>
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	f43f af4c 	beq.w	800c65a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d00d      	beq.n	800c7e4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800c7c8:	f001 fb2e 	bl	800de28 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c7cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c7ce:	f000 f894 	bl	800c8fa <prvGetDisinheritPriorityAfterTimeout>
 800c7d2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c7d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7d6:	689b      	ldr	r3, [r3, #8]
 800c7d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f001 f906 	bl	800d9ec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c7e0:	f001 fb54 	bl	800de8c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c7e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	3738      	adds	r7, #56	; 0x38
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	bd80      	pop	{r7, pc}
 800c7ee:	bf00      	nop
 800c7f0:	e000ed04 	.word	0xe000ed04

0800c7f4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b08e      	sub	sp, #56	; 0x38
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	60f8      	str	r0, [r7, #12]
 800c7fc:	60b9      	str	r1, [r7, #8]
 800c7fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c806:	2b00      	cmp	r3, #0
 800c808:	d10b      	bne.n	800c822 <xQueueReceiveFromISR+0x2e>
 800c80a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c80e:	b672      	cpsid	i
 800c810:	f383 8811 	msr	BASEPRI, r3
 800c814:	f3bf 8f6f 	isb	sy
 800c818:	f3bf 8f4f 	dsb	sy
 800c81c:	b662      	cpsie	i
 800c81e:	623b      	str	r3, [r7, #32]
 800c820:	e7fe      	b.n	800c820 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c822:	68bb      	ldr	r3, [r7, #8]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d103      	bne.n	800c830 <xQueueReceiveFromISR+0x3c>
 800c828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c82a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d101      	bne.n	800c834 <xQueueReceiveFromISR+0x40>
 800c830:	2301      	movs	r3, #1
 800c832:	e000      	b.n	800c836 <xQueueReceiveFromISR+0x42>
 800c834:	2300      	movs	r3, #0
 800c836:	2b00      	cmp	r3, #0
 800c838:	d10b      	bne.n	800c852 <xQueueReceiveFromISR+0x5e>
 800c83a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c83e:	b672      	cpsid	i
 800c840:	f383 8811 	msr	BASEPRI, r3
 800c844:	f3bf 8f6f 	isb	sy
 800c848:	f3bf 8f4f 	dsb	sy
 800c84c:	b662      	cpsie	i
 800c84e:	61fb      	str	r3, [r7, #28]
 800c850:	e7fe      	b.n	800c850 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c852:	f001 fbc9 	bl	800dfe8 <vPortValidateInterruptPriority>
	__asm volatile
 800c856:	f3ef 8211 	mrs	r2, BASEPRI
 800c85a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c85e:	b672      	cpsid	i
 800c860:	f383 8811 	msr	BASEPRI, r3
 800c864:	f3bf 8f6f 	isb	sy
 800c868:	f3bf 8f4f 	dsb	sy
 800c86c:	b662      	cpsie	i
 800c86e:	61ba      	str	r2, [r7, #24]
 800c870:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c872:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c874:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c87a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c87c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d02f      	beq.n	800c8e2 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c884:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c888:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c88c:	68b9      	ldr	r1, [r7, #8]
 800c88e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c890:	f000 f8b5 	bl	800c9fe <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c896:	1e5a      	subs	r2, r3, #1
 800c898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c89a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c89c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c8a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8a4:	d112      	bne.n	800c8cc <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c8a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8a8:	691b      	ldr	r3, [r3, #16]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d016      	beq.n	800c8dc <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c8ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8b0:	3310      	adds	r3, #16
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	f000 fdb4 	bl	800d420 <xTaskRemoveFromEventList>
 800c8b8:	4603      	mov	r3, r0
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d00e      	beq.n	800c8dc <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d00b      	beq.n	800c8dc <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	2201      	movs	r2, #1
 800c8c8:	601a      	str	r2, [r3, #0]
 800c8ca:	e007      	b.n	800c8dc <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c8cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8d0:	3301      	adds	r3, #1
 800c8d2:	b2db      	uxtb	r3, r3
 800c8d4:	b25a      	sxtb	r2, r3
 800c8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c8dc:	2301      	movs	r3, #1
 800c8de:	637b      	str	r3, [r7, #52]	; 0x34
 800c8e0:	e001      	b.n	800c8e6 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	637b      	str	r3, [r7, #52]	; 0x34
 800c8e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8e8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c8ea:	693b      	ldr	r3, [r7, #16]
 800c8ec:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c8f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	3738      	adds	r7, #56	; 0x38
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd80      	pop	{r7, pc}

0800c8fa <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c8fa:	b480      	push	{r7}
 800c8fc:	b085      	sub	sp, #20
 800c8fe:	af00      	add	r7, sp, #0
 800c900:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c906:	2b00      	cmp	r3, #0
 800c908:	d006      	beq.n	800c918 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	f1c3 0307 	rsb	r3, r3, #7
 800c914:	60fb      	str	r3, [r7, #12]
 800c916:	e001      	b.n	800c91c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c918:	2300      	movs	r3, #0
 800c91a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c91c:	68fb      	ldr	r3, [r7, #12]
	}
 800c91e:	4618      	mov	r0, r3
 800c920:	3714      	adds	r7, #20
 800c922:	46bd      	mov	sp, r7
 800c924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c928:	4770      	bx	lr

0800c92a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c92a:	b580      	push	{r7, lr}
 800c92c:	b086      	sub	sp, #24
 800c92e:	af00      	add	r7, sp, #0
 800c930:	60f8      	str	r0, [r7, #12]
 800c932:	60b9      	str	r1, [r7, #8]
 800c934:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c936:	2300      	movs	r3, #0
 800c938:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c93e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c944:	2b00      	cmp	r3, #0
 800c946:	d10d      	bne.n	800c964 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d14d      	bne.n	800c9ec <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	689b      	ldr	r3, [r3, #8]
 800c954:	4618      	mov	r0, r3
 800c956:	f000 ffc1 	bl	800d8dc <xTaskPriorityDisinherit>
 800c95a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	2200      	movs	r2, #0
 800c960:	609a      	str	r2, [r3, #8]
 800c962:	e043      	b.n	800c9ec <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d119      	bne.n	800c99e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	6858      	ldr	r0, [r3, #4]
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c972:	461a      	mov	r2, r3
 800c974:	68b9      	ldr	r1, [r7, #8]
 800c976:	f016 fddd 	bl	8023534 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	685a      	ldr	r2, [r3, #4]
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c982:	441a      	add	r2, r3
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	685a      	ldr	r2, [r3, #4]
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	689b      	ldr	r3, [r3, #8]
 800c990:	429a      	cmp	r2, r3
 800c992:	d32b      	bcc.n	800c9ec <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	681a      	ldr	r2, [r3, #0]
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	605a      	str	r2, [r3, #4]
 800c99c:	e026      	b.n	800c9ec <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	68d8      	ldr	r0, [r3, #12]
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9a6:	461a      	mov	r2, r3
 800c9a8:	68b9      	ldr	r1, [r7, #8]
 800c9aa:	f016 fdc3 	bl	8023534 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	68da      	ldr	r2, [r3, #12]
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9b6:	425b      	negs	r3, r3
 800c9b8:	441a      	add	r2, r3
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	68da      	ldr	r2, [r3, #12]
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	429a      	cmp	r2, r3
 800c9c8:	d207      	bcs.n	800c9da <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	689a      	ldr	r2, [r3, #8]
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9d2:	425b      	negs	r3, r3
 800c9d4:	441a      	add	r2, r3
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	2b02      	cmp	r3, #2
 800c9de:	d105      	bne.n	800c9ec <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c9e0:	693b      	ldr	r3, [r7, #16]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d002      	beq.n	800c9ec <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c9e6:	693b      	ldr	r3, [r7, #16]
 800c9e8:	3b01      	subs	r3, #1
 800c9ea:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c9ec:	693b      	ldr	r3, [r7, #16]
 800c9ee:	1c5a      	adds	r2, r3, #1
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c9f4:	697b      	ldr	r3, [r7, #20]
}
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	3718      	adds	r7, #24
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}

0800c9fe <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c9fe:	b580      	push	{r7, lr}
 800ca00:	b082      	sub	sp, #8
 800ca02:	af00      	add	r7, sp, #0
 800ca04:	6078      	str	r0, [r7, #4]
 800ca06:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d018      	beq.n	800ca42 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	68da      	ldr	r2, [r3, #12]
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca18:	441a      	add	r2, r3
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	68da      	ldr	r2, [r3, #12]
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	689b      	ldr	r3, [r3, #8]
 800ca26:	429a      	cmp	r2, r3
 800ca28:	d303      	bcc.n	800ca32 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681a      	ldr	r2, [r3, #0]
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	68d9      	ldr	r1, [r3, #12]
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca3a:	461a      	mov	r2, r3
 800ca3c:	6838      	ldr	r0, [r7, #0]
 800ca3e:	f016 fd79 	bl	8023534 <memcpy>
	}
}
 800ca42:	bf00      	nop
 800ca44:	3708      	adds	r7, #8
 800ca46:	46bd      	mov	sp, r7
 800ca48:	bd80      	pop	{r7, pc}

0800ca4a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ca4a:	b580      	push	{r7, lr}
 800ca4c:	b084      	sub	sp, #16
 800ca4e:	af00      	add	r7, sp, #0
 800ca50:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ca52:	f001 f9e9 	bl	800de28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ca5c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ca5e:	e011      	b.n	800ca84 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d012      	beq.n	800ca8e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	3324      	adds	r3, #36	; 0x24
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	f000 fcd7 	bl	800d420 <xTaskRemoveFromEventList>
 800ca72:	4603      	mov	r3, r0
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d001      	beq.n	800ca7c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ca78:	f000 fdb0 	bl	800d5dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ca7c:	7bfb      	ldrb	r3, [r7, #15]
 800ca7e:	3b01      	subs	r3, #1
 800ca80:	b2db      	uxtb	r3, r3
 800ca82:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ca84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	dce9      	bgt.n	800ca60 <prvUnlockQueue+0x16>
 800ca8c:	e000      	b.n	800ca90 <prvUnlockQueue+0x46>
					break;
 800ca8e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	22ff      	movs	r2, #255	; 0xff
 800ca94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ca98:	f001 f9f8 	bl	800de8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ca9c:	f001 f9c4 	bl	800de28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800caa6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800caa8:	e011      	b.n	800cace <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	691b      	ldr	r3, [r3, #16]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d012      	beq.n	800cad8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	3310      	adds	r3, #16
 800cab6:	4618      	mov	r0, r3
 800cab8:	f000 fcb2 	bl	800d420 <xTaskRemoveFromEventList>
 800cabc:	4603      	mov	r3, r0
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d001      	beq.n	800cac6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cac2:	f000 fd8b 	bl	800d5dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cac6:	7bbb      	ldrb	r3, [r7, #14]
 800cac8:	3b01      	subs	r3, #1
 800caca:	b2db      	uxtb	r3, r3
 800cacc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cace:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	dce9      	bgt.n	800caaa <prvUnlockQueue+0x60>
 800cad6:	e000      	b.n	800cada <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cad8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	22ff      	movs	r2, #255	; 0xff
 800cade:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800cae2:	f001 f9d3 	bl	800de8c <vPortExitCritical>
}
 800cae6:	bf00      	nop
 800cae8:	3710      	adds	r7, #16
 800caea:	46bd      	mov	sp, r7
 800caec:	bd80      	pop	{r7, pc}

0800caee <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800caee:	b580      	push	{r7, lr}
 800caf0:	b084      	sub	sp, #16
 800caf2:	af00      	add	r7, sp, #0
 800caf4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800caf6:	f001 f997 	bl	800de28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d102      	bne.n	800cb08 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cb02:	2301      	movs	r3, #1
 800cb04:	60fb      	str	r3, [r7, #12]
 800cb06:	e001      	b.n	800cb0c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cb08:	2300      	movs	r3, #0
 800cb0a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cb0c:	f001 f9be 	bl	800de8c <vPortExitCritical>

	return xReturn;
 800cb10:	68fb      	ldr	r3, [r7, #12]
}
 800cb12:	4618      	mov	r0, r3
 800cb14:	3710      	adds	r7, #16
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bd80      	pop	{r7, pc}

0800cb1a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cb1a:	b580      	push	{r7, lr}
 800cb1c:	b084      	sub	sp, #16
 800cb1e:	af00      	add	r7, sp, #0
 800cb20:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cb22:	f001 f981 	bl	800de28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb2e:	429a      	cmp	r2, r3
 800cb30:	d102      	bne.n	800cb38 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cb32:	2301      	movs	r3, #1
 800cb34:	60fb      	str	r3, [r7, #12]
 800cb36:	e001      	b.n	800cb3c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cb38:	2300      	movs	r3, #0
 800cb3a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cb3c:	f001 f9a6 	bl	800de8c <vPortExitCritical>

	return xReturn;
 800cb40:	68fb      	ldr	r3, [r7, #12]
}
 800cb42:	4618      	mov	r0, r3
 800cb44:	3710      	adds	r7, #16
 800cb46:	46bd      	mov	sp, r7
 800cb48:	bd80      	pop	{r7, pc}

0800cb4a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cb4a:	b580      	push	{r7, lr}
 800cb4c:	b08e      	sub	sp, #56	; 0x38
 800cb4e:	af04      	add	r7, sp, #16
 800cb50:	60f8      	str	r0, [r7, #12]
 800cb52:	60b9      	str	r1, [r7, #8]
 800cb54:	607a      	str	r2, [r7, #4]
 800cb56:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cb58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d10b      	bne.n	800cb76 <xTaskCreateStatic+0x2c>
	__asm volatile
 800cb5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb62:	b672      	cpsid	i
 800cb64:	f383 8811 	msr	BASEPRI, r3
 800cb68:	f3bf 8f6f 	isb	sy
 800cb6c:	f3bf 8f4f 	dsb	sy
 800cb70:	b662      	cpsie	i
 800cb72:	623b      	str	r3, [r7, #32]
 800cb74:	e7fe      	b.n	800cb74 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800cb76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d10b      	bne.n	800cb94 <xTaskCreateStatic+0x4a>
 800cb7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb80:	b672      	cpsid	i
 800cb82:	f383 8811 	msr	BASEPRI, r3
 800cb86:	f3bf 8f6f 	isb	sy
 800cb8a:	f3bf 8f4f 	dsb	sy
 800cb8e:	b662      	cpsie	i
 800cb90:	61fb      	str	r3, [r7, #28]
 800cb92:	e7fe      	b.n	800cb92 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cb94:	2358      	movs	r3, #88	; 0x58
 800cb96:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cb98:	693b      	ldr	r3, [r7, #16]
 800cb9a:	2b58      	cmp	r3, #88	; 0x58
 800cb9c:	d00b      	beq.n	800cbb6 <xTaskCreateStatic+0x6c>
 800cb9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cba2:	b672      	cpsid	i
 800cba4:	f383 8811 	msr	BASEPRI, r3
 800cba8:	f3bf 8f6f 	isb	sy
 800cbac:	f3bf 8f4f 	dsb	sy
 800cbb0:	b662      	cpsie	i
 800cbb2:	61bb      	str	r3, [r7, #24]
 800cbb4:	e7fe      	b.n	800cbb4 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cbb6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cbb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d01e      	beq.n	800cbfc <xTaskCreateStatic+0xb2>
 800cbbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d01b      	beq.n	800cbfc <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cbc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbc6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cbc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cbcc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cbce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbd0:	2202      	movs	r2, #2
 800cbd2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	9303      	str	r3, [sp, #12]
 800cbda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbdc:	9302      	str	r3, [sp, #8]
 800cbde:	f107 0314 	add.w	r3, r7, #20
 800cbe2:	9301      	str	r3, [sp, #4]
 800cbe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbe6:	9300      	str	r3, [sp, #0]
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	687a      	ldr	r2, [r7, #4]
 800cbec:	68b9      	ldr	r1, [r7, #8]
 800cbee:	68f8      	ldr	r0, [r7, #12]
 800cbf0:	f000 f850 	bl	800cc94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cbf4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cbf6:	f000 f8e1 	bl	800cdbc <prvAddNewTaskToReadyList>
 800cbfa:	e001      	b.n	800cc00 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cc00:	697b      	ldr	r3, [r7, #20]
	}
 800cc02:	4618      	mov	r0, r3
 800cc04:	3728      	adds	r7, #40	; 0x28
 800cc06:	46bd      	mov	sp, r7
 800cc08:	bd80      	pop	{r7, pc}

0800cc0a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cc0a:	b580      	push	{r7, lr}
 800cc0c:	b08c      	sub	sp, #48	; 0x30
 800cc0e:	af04      	add	r7, sp, #16
 800cc10:	60f8      	str	r0, [r7, #12]
 800cc12:	60b9      	str	r1, [r7, #8]
 800cc14:	603b      	str	r3, [r7, #0]
 800cc16:	4613      	mov	r3, r2
 800cc18:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cc1a:	88fb      	ldrh	r3, [r7, #6]
 800cc1c:	009b      	lsls	r3, r3, #2
 800cc1e:	4618      	mov	r0, r3
 800cc20:	f001 fa24 	bl	800e06c <pvPortMalloc>
 800cc24:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cc26:	697b      	ldr	r3, [r7, #20]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d00e      	beq.n	800cc4a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cc2c:	2058      	movs	r0, #88	; 0x58
 800cc2e:	f001 fa1d 	bl	800e06c <pvPortMalloc>
 800cc32:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cc34:	69fb      	ldr	r3, [r7, #28]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d003      	beq.n	800cc42 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cc3a:	69fb      	ldr	r3, [r7, #28]
 800cc3c:	697a      	ldr	r2, [r7, #20]
 800cc3e:	631a      	str	r2, [r3, #48]	; 0x30
 800cc40:	e005      	b.n	800cc4e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cc42:	6978      	ldr	r0, [r7, #20]
 800cc44:	f001 fade 	bl	800e204 <vPortFree>
 800cc48:	e001      	b.n	800cc4e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cc4e:	69fb      	ldr	r3, [r7, #28]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d017      	beq.n	800cc84 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cc54:	69fb      	ldr	r3, [r7, #28]
 800cc56:	2200      	movs	r2, #0
 800cc58:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cc5c:	88fa      	ldrh	r2, [r7, #6]
 800cc5e:	2300      	movs	r3, #0
 800cc60:	9303      	str	r3, [sp, #12]
 800cc62:	69fb      	ldr	r3, [r7, #28]
 800cc64:	9302      	str	r3, [sp, #8]
 800cc66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc68:	9301      	str	r3, [sp, #4]
 800cc6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc6c:	9300      	str	r3, [sp, #0]
 800cc6e:	683b      	ldr	r3, [r7, #0]
 800cc70:	68b9      	ldr	r1, [r7, #8]
 800cc72:	68f8      	ldr	r0, [r7, #12]
 800cc74:	f000 f80e 	bl	800cc94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cc78:	69f8      	ldr	r0, [r7, #28]
 800cc7a:	f000 f89f 	bl	800cdbc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cc7e:	2301      	movs	r3, #1
 800cc80:	61bb      	str	r3, [r7, #24]
 800cc82:	e002      	b.n	800cc8a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cc84:	f04f 33ff 	mov.w	r3, #4294967295
 800cc88:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cc8a:	69bb      	ldr	r3, [r7, #24]
	}
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	3720      	adds	r7, #32
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}

0800cc94 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b088      	sub	sp, #32
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	60f8      	str	r0, [r7, #12]
 800cc9c:	60b9      	str	r1, [r7, #8]
 800cc9e:	607a      	str	r2, [r7, #4]
 800cca0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	009b      	lsls	r3, r3, #2
 800ccaa:	461a      	mov	r2, r3
 800ccac:	21a5      	movs	r1, #165	; 0xa5
 800ccae:	f016 fc4c 	bl	802354a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ccb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ccb6:	6879      	ldr	r1, [r7, #4]
 800ccb8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800ccbc:	440b      	add	r3, r1
 800ccbe:	009b      	lsls	r3, r3, #2
 800ccc0:	4413      	add	r3, r2
 800ccc2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ccc4:	69bb      	ldr	r3, [r7, #24]
 800ccc6:	f023 0307 	bic.w	r3, r3, #7
 800ccca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cccc:	69bb      	ldr	r3, [r7, #24]
 800ccce:	f003 0307 	and.w	r3, r3, #7
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d00b      	beq.n	800ccee <prvInitialiseNewTask+0x5a>
 800ccd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccda:	b672      	cpsid	i
 800ccdc:	f383 8811 	msr	BASEPRI, r3
 800cce0:	f3bf 8f6f 	isb	sy
 800cce4:	f3bf 8f4f 	dsb	sy
 800cce8:	b662      	cpsie	i
 800ccea:	617b      	str	r3, [r7, #20]
 800ccec:	e7fe      	b.n	800ccec <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ccee:	68bb      	ldr	r3, [r7, #8]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d01f      	beq.n	800cd34 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	61fb      	str	r3, [r7, #28]
 800ccf8:	e012      	b.n	800cd20 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ccfa:	68ba      	ldr	r2, [r7, #8]
 800ccfc:	69fb      	ldr	r3, [r7, #28]
 800ccfe:	4413      	add	r3, r2
 800cd00:	7819      	ldrb	r1, [r3, #0]
 800cd02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd04:	69fb      	ldr	r3, [r7, #28]
 800cd06:	4413      	add	r3, r2
 800cd08:	3334      	adds	r3, #52	; 0x34
 800cd0a:	460a      	mov	r2, r1
 800cd0c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cd0e:	68ba      	ldr	r2, [r7, #8]
 800cd10:	69fb      	ldr	r3, [r7, #28]
 800cd12:	4413      	add	r3, r2
 800cd14:	781b      	ldrb	r3, [r3, #0]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d006      	beq.n	800cd28 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cd1a:	69fb      	ldr	r3, [r7, #28]
 800cd1c:	3301      	adds	r3, #1
 800cd1e:	61fb      	str	r3, [r7, #28]
 800cd20:	69fb      	ldr	r3, [r7, #28]
 800cd22:	2b0f      	cmp	r3, #15
 800cd24:	d9e9      	bls.n	800ccfa <prvInitialiseNewTask+0x66>
 800cd26:	e000      	b.n	800cd2a <prvInitialiseNewTask+0x96>
			{
				break;
 800cd28:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cd2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cd32:	e003      	b.n	800cd3c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cd34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd36:	2200      	movs	r2, #0
 800cd38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cd3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd3e:	2b06      	cmp	r3, #6
 800cd40:	d901      	bls.n	800cd46 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cd42:	2306      	movs	r3, #6
 800cd44:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cd46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd4a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cd4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd50:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800cd52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd54:	2200      	movs	r2, #0
 800cd56:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cd58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd5a:	3304      	adds	r3, #4
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	f7fe ff4b 	bl	800bbf8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cd62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd64:	3318      	adds	r3, #24
 800cd66:	4618      	mov	r0, r3
 800cd68:	f7fe ff46 	bl	800bbf8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cd6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd70:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd74:	f1c3 0207 	rsb	r2, r3, #7
 800cd78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd7a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cd7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd80:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800cd82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd84:	2200      	movs	r2, #0
 800cd86:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cd88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cd8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd90:	2200      	movs	r2, #0
 800cd92:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cd96:	683a      	ldr	r2, [r7, #0]
 800cd98:	68f9      	ldr	r1, [r7, #12]
 800cd9a:	69b8      	ldr	r0, [r7, #24]
 800cd9c:	f000 ff3c 	bl	800dc18 <pxPortInitialiseStack>
 800cda0:	4602      	mov	r2, r0
 800cda2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cda4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cda6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d002      	beq.n	800cdb2 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cdac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cdb0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cdb2:	bf00      	nop
 800cdb4:	3720      	adds	r7, #32
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bd80      	pop	{r7, pc}
	...

0800cdbc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b082      	sub	sp, #8
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cdc4:	f001 f830 	bl	800de28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cdc8:	4b2a      	ldr	r3, [pc, #168]	; (800ce74 <prvAddNewTaskToReadyList+0xb8>)
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	3301      	adds	r3, #1
 800cdce:	4a29      	ldr	r2, [pc, #164]	; (800ce74 <prvAddNewTaskToReadyList+0xb8>)
 800cdd0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cdd2:	4b29      	ldr	r3, [pc, #164]	; (800ce78 <prvAddNewTaskToReadyList+0xbc>)
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d109      	bne.n	800cdee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cdda:	4a27      	ldr	r2, [pc, #156]	; (800ce78 <prvAddNewTaskToReadyList+0xbc>)
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cde0:	4b24      	ldr	r3, [pc, #144]	; (800ce74 <prvAddNewTaskToReadyList+0xb8>)
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	2b01      	cmp	r3, #1
 800cde6:	d110      	bne.n	800ce0a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cde8:	f000 fc1e 	bl	800d628 <prvInitialiseTaskLists>
 800cdec:	e00d      	b.n	800ce0a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cdee:	4b23      	ldr	r3, [pc, #140]	; (800ce7c <prvAddNewTaskToReadyList+0xc0>)
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d109      	bne.n	800ce0a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cdf6:	4b20      	ldr	r3, [pc, #128]	; (800ce78 <prvAddNewTaskToReadyList+0xbc>)
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce00:	429a      	cmp	r2, r3
 800ce02:	d802      	bhi.n	800ce0a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ce04:	4a1c      	ldr	r2, [pc, #112]	; (800ce78 <prvAddNewTaskToReadyList+0xbc>)
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ce0a:	4b1d      	ldr	r3, [pc, #116]	; (800ce80 <prvAddNewTaskToReadyList+0xc4>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	3301      	adds	r3, #1
 800ce10:	4a1b      	ldr	r2, [pc, #108]	; (800ce80 <prvAddNewTaskToReadyList+0xc4>)
 800ce12:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce18:	2201      	movs	r2, #1
 800ce1a:	409a      	lsls	r2, r3
 800ce1c:	4b19      	ldr	r3, [pc, #100]	; (800ce84 <prvAddNewTaskToReadyList+0xc8>)
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	4313      	orrs	r3, r2
 800ce22:	4a18      	ldr	r2, [pc, #96]	; (800ce84 <prvAddNewTaskToReadyList+0xc8>)
 800ce24:	6013      	str	r3, [r2, #0]
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce2a:	4613      	mov	r3, r2
 800ce2c:	009b      	lsls	r3, r3, #2
 800ce2e:	4413      	add	r3, r2
 800ce30:	009b      	lsls	r3, r3, #2
 800ce32:	4a15      	ldr	r2, [pc, #84]	; (800ce88 <prvAddNewTaskToReadyList+0xcc>)
 800ce34:	441a      	add	r2, r3
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	3304      	adds	r3, #4
 800ce3a:	4619      	mov	r1, r3
 800ce3c:	4610      	mov	r0, r2
 800ce3e:	f7fe fee8 	bl	800bc12 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ce42:	f001 f823 	bl	800de8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ce46:	4b0d      	ldr	r3, [pc, #52]	; (800ce7c <prvAddNewTaskToReadyList+0xc0>)
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d00e      	beq.n	800ce6c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ce4e:	4b0a      	ldr	r3, [pc, #40]	; (800ce78 <prvAddNewTaskToReadyList+0xbc>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce58:	429a      	cmp	r2, r3
 800ce5a:	d207      	bcs.n	800ce6c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ce5c:	4b0b      	ldr	r3, [pc, #44]	; (800ce8c <prvAddNewTaskToReadyList+0xd0>)
 800ce5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce62:	601a      	str	r2, [r3, #0]
 800ce64:	f3bf 8f4f 	dsb	sy
 800ce68:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ce6c:	bf00      	nop
 800ce6e:	3708      	adds	r7, #8
 800ce70:	46bd      	mov	sp, r7
 800ce72:	bd80      	pop	{r7, pc}
 800ce74:	2000049c 	.word	0x2000049c
 800ce78:	2000039c 	.word	0x2000039c
 800ce7c:	200004a8 	.word	0x200004a8
 800ce80:	200004b8 	.word	0x200004b8
 800ce84:	200004a4 	.word	0x200004a4
 800ce88:	200003a0 	.word	0x200003a0
 800ce8c:	e000ed04 	.word	0xe000ed04

0800ce90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b084      	sub	sp, #16
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ce98:	2300      	movs	r3, #0
 800ce9a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d018      	beq.n	800ced4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cea2:	4b14      	ldr	r3, [pc, #80]	; (800cef4 <vTaskDelay+0x64>)
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d00b      	beq.n	800cec2 <vTaskDelay+0x32>
 800ceaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceae:	b672      	cpsid	i
 800ceb0:	f383 8811 	msr	BASEPRI, r3
 800ceb4:	f3bf 8f6f 	isb	sy
 800ceb8:	f3bf 8f4f 	dsb	sy
 800cebc:	b662      	cpsie	i
 800cebe:	60bb      	str	r3, [r7, #8]
 800cec0:	e7fe      	b.n	800cec0 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800cec2:	f000 f87d 	bl	800cfc0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cec6:	2100      	movs	r1, #0
 800cec8:	6878      	ldr	r0, [r7, #4]
 800ceca:	f000 fe3f 	bl	800db4c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cece:	f000 f885 	bl	800cfdc <xTaskResumeAll>
 800ced2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d107      	bne.n	800ceea <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800ceda:	4b07      	ldr	r3, [pc, #28]	; (800cef8 <vTaskDelay+0x68>)
 800cedc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cee0:	601a      	str	r2, [r3, #0]
 800cee2:	f3bf 8f4f 	dsb	sy
 800cee6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ceea:	bf00      	nop
 800ceec:	3710      	adds	r7, #16
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bd80      	pop	{r7, pc}
 800cef2:	bf00      	nop
 800cef4:	200004c4 	.word	0x200004c4
 800cef8:	e000ed04 	.word	0xe000ed04

0800cefc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b08a      	sub	sp, #40	; 0x28
 800cf00:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cf02:	2300      	movs	r3, #0
 800cf04:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cf06:	2300      	movs	r3, #0
 800cf08:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cf0a:	463a      	mov	r2, r7
 800cf0c:	1d39      	adds	r1, r7, #4
 800cf0e:	f107 0308 	add.w	r3, r7, #8
 800cf12:	4618      	mov	r0, r3
 800cf14:	f7f3 fb66 	bl	80005e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cf18:	6839      	ldr	r1, [r7, #0]
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	68ba      	ldr	r2, [r7, #8]
 800cf1e:	9202      	str	r2, [sp, #8]
 800cf20:	9301      	str	r3, [sp, #4]
 800cf22:	2300      	movs	r3, #0
 800cf24:	9300      	str	r3, [sp, #0]
 800cf26:	2300      	movs	r3, #0
 800cf28:	460a      	mov	r2, r1
 800cf2a:	491f      	ldr	r1, [pc, #124]	; (800cfa8 <vTaskStartScheduler+0xac>)
 800cf2c:	481f      	ldr	r0, [pc, #124]	; (800cfac <vTaskStartScheduler+0xb0>)
 800cf2e:	f7ff fe0c 	bl	800cb4a <xTaskCreateStatic>
 800cf32:	4602      	mov	r2, r0
 800cf34:	4b1e      	ldr	r3, [pc, #120]	; (800cfb0 <vTaskStartScheduler+0xb4>)
 800cf36:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cf38:	4b1d      	ldr	r3, [pc, #116]	; (800cfb0 <vTaskStartScheduler+0xb4>)
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d002      	beq.n	800cf46 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cf40:	2301      	movs	r3, #1
 800cf42:	617b      	str	r3, [r7, #20]
 800cf44:	e001      	b.n	800cf4a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cf46:	2300      	movs	r3, #0
 800cf48:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cf4a:	697b      	ldr	r3, [r7, #20]
 800cf4c:	2b01      	cmp	r3, #1
 800cf4e:	d117      	bne.n	800cf80 <vTaskStartScheduler+0x84>
 800cf50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf54:	b672      	cpsid	i
 800cf56:	f383 8811 	msr	BASEPRI, r3
 800cf5a:	f3bf 8f6f 	isb	sy
 800cf5e:	f3bf 8f4f 	dsb	sy
 800cf62:	b662      	cpsie	i
 800cf64:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cf66:	4b13      	ldr	r3, [pc, #76]	; (800cfb4 <vTaskStartScheduler+0xb8>)
 800cf68:	f04f 32ff 	mov.w	r2, #4294967295
 800cf6c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cf6e:	4b12      	ldr	r3, [pc, #72]	; (800cfb8 <vTaskStartScheduler+0xbc>)
 800cf70:	2201      	movs	r2, #1
 800cf72:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cf74:	4b11      	ldr	r3, [pc, #68]	; (800cfbc <vTaskStartScheduler+0xc0>)
 800cf76:	2200      	movs	r2, #0
 800cf78:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cf7a:	f000 fed9 	bl	800dd30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cf7e:	e00f      	b.n	800cfa0 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cf80:	697b      	ldr	r3, [r7, #20]
 800cf82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf86:	d10b      	bne.n	800cfa0 <vTaskStartScheduler+0xa4>
 800cf88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf8c:	b672      	cpsid	i
 800cf8e:	f383 8811 	msr	BASEPRI, r3
 800cf92:	f3bf 8f6f 	isb	sy
 800cf96:	f3bf 8f4f 	dsb	sy
 800cf9a:	b662      	cpsie	i
 800cf9c:	60fb      	str	r3, [r7, #12]
 800cf9e:	e7fe      	b.n	800cf9e <vTaskStartScheduler+0xa2>
}
 800cfa0:	bf00      	nop
 800cfa2:	3718      	adds	r7, #24
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	bd80      	pop	{r7, pc}
 800cfa8:	080244b8 	.word	0x080244b8
 800cfac:	0800d5f5 	.word	0x0800d5f5
 800cfb0:	200004c0 	.word	0x200004c0
 800cfb4:	200004bc 	.word	0x200004bc
 800cfb8:	200004a8 	.word	0x200004a8
 800cfbc:	200004a0 	.word	0x200004a0

0800cfc0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cfc0:	b480      	push	{r7}
 800cfc2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800cfc4:	4b04      	ldr	r3, [pc, #16]	; (800cfd8 <vTaskSuspendAll+0x18>)
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	3301      	adds	r3, #1
 800cfca:	4a03      	ldr	r2, [pc, #12]	; (800cfd8 <vTaskSuspendAll+0x18>)
 800cfcc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800cfce:	bf00      	nop
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd6:	4770      	bx	lr
 800cfd8:	200004c4 	.word	0x200004c4

0800cfdc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b084      	sub	sp, #16
 800cfe0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cfea:	4b42      	ldr	r3, [pc, #264]	; (800d0f4 <xTaskResumeAll+0x118>)
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d10b      	bne.n	800d00a <xTaskResumeAll+0x2e>
 800cff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cff6:	b672      	cpsid	i
 800cff8:	f383 8811 	msr	BASEPRI, r3
 800cffc:	f3bf 8f6f 	isb	sy
 800d000:	f3bf 8f4f 	dsb	sy
 800d004:	b662      	cpsie	i
 800d006:	603b      	str	r3, [r7, #0]
 800d008:	e7fe      	b.n	800d008 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d00a:	f000 ff0d 	bl	800de28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d00e:	4b39      	ldr	r3, [pc, #228]	; (800d0f4 <xTaskResumeAll+0x118>)
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	3b01      	subs	r3, #1
 800d014:	4a37      	ldr	r2, [pc, #220]	; (800d0f4 <xTaskResumeAll+0x118>)
 800d016:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d018:	4b36      	ldr	r3, [pc, #216]	; (800d0f4 <xTaskResumeAll+0x118>)
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d161      	bne.n	800d0e4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d020:	4b35      	ldr	r3, [pc, #212]	; (800d0f8 <xTaskResumeAll+0x11c>)
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d05d      	beq.n	800d0e4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d028:	e02e      	b.n	800d088 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d02a:	4b34      	ldr	r3, [pc, #208]	; (800d0fc <xTaskResumeAll+0x120>)
 800d02c:	68db      	ldr	r3, [r3, #12]
 800d02e:	68db      	ldr	r3, [r3, #12]
 800d030:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	3318      	adds	r3, #24
 800d036:	4618      	mov	r0, r3
 800d038:	f7fe fe48 	bl	800bccc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	3304      	adds	r3, #4
 800d040:	4618      	mov	r0, r3
 800d042:	f7fe fe43 	bl	800bccc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d04a:	2201      	movs	r2, #1
 800d04c:	409a      	lsls	r2, r3
 800d04e:	4b2c      	ldr	r3, [pc, #176]	; (800d100 <xTaskResumeAll+0x124>)
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	4313      	orrs	r3, r2
 800d054:	4a2a      	ldr	r2, [pc, #168]	; (800d100 <xTaskResumeAll+0x124>)
 800d056:	6013      	str	r3, [r2, #0]
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d05c:	4613      	mov	r3, r2
 800d05e:	009b      	lsls	r3, r3, #2
 800d060:	4413      	add	r3, r2
 800d062:	009b      	lsls	r3, r3, #2
 800d064:	4a27      	ldr	r2, [pc, #156]	; (800d104 <xTaskResumeAll+0x128>)
 800d066:	441a      	add	r2, r3
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	3304      	adds	r3, #4
 800d06c:	4619      	mov	r1, r3
 800d06e:	4610      	mov	r0, r2
 800d070:	f7fe fdcf 	bl	800bc12 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d078:	4b23      	ldr	r3, [pc, #140]	; (800d108 <xTaskResumeAll+0x12c>)
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d07e:	429a      	cmp	r2, r3
 800d080:	d302      	bcc.n	800d088 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d082:	4b22      	ldr	r3, [pc, #136]	; (800d10c <xTaskResumeAll+0x130>)
 800d084:	2201      	movs	r2, #1
 800d086:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d088:	4b1c      	ldr	r3, [pc, #112]	; (800d0fc <xTaskResumeAll+0x120>)
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d1cc      	bne.n	800d02a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d001      	beq.n	800d09a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d096:	f000 fb63 	bl	800d760 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800d09a:	4b1d      	ldr	r3, [pc, #116]	; (800d110 <xTaskResumeAll+0x134>)
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d010      	beq.n	800d0c8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d0a6:	f000 f859 	bl	800d15c <xTaskIncrementTick>
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d002      	beq.n	800d0b6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d0b0:	4b16      	ldr	r3, [pc, #88]	; (800d10c <xTaskResumeAll+0x130>)
 800d0b2:	2201      	movs	r2, #1
 800d0b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	3b01      	subs	r3, #1
 800d0ba:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d1f1      	bne.n	800d0a6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800d0c2:	4b13      	ldr	r3, [pc, #76]	; (800d110 <xTaskResumeAll+0x134>)
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d0c8:	4b10      	ldr	r3, [pc, #64]	; (800d10c <xTaskResumeAll+0x130>)
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d009      	beq.n	800d0e4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d0d0:	2301      	movs	r3, #1
 800d0d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d0d4:	4b0f      	ldr	r3, [pc, #60]	; (800d114 <xTaskResumeAll+0x138>)
 800d0d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0da:	601a      	str	r2, [r3, #0]
 800d0dc:	f3bf 8f4f 	dsb	sy
 800d0e0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d0e4:	f000 fed2 	bl	800de8c <vPortExitCritical>

	return xAlreadyYielded;
 800d0e8:	68bb      	ldr	r3, [r7, #8]
}
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	3710      	adds	r7, #16
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	bd80      	pop	{r7, pc}
 800d0f2:	bf00      	nop
 800d0f4:	200004c4 	.word	0x200004c4
 800d0f8:	2000049c 	.word	0x2000049c
 800d0fc:	2000045c 	.word	0x2000045c
 800d100:	200004a4 	.word	0x200004a4
 800d104:	200003a0 	.word	0x200003a0
 800d108:	2000039c 	.word	0x2000039c
 800d10c:	200004b0 	.word	0x200004b0
 800d110:	200004ac 	.word	0x200004ac
 800d114:	e000ed04 	.word	0xe000ed04

0800d118 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d118:	b480      	push	{r7}
 800d11a:	b083      	sub	sp, #12
 800d11c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d11e:	4b05      	ldr	r3, [pc, #20]	; (800d134 <xTaskGetTickCount+0x1c>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d124:	687b      	ldr	r3, [r7, #4]
}
 800d126:	4618      	mov	r0, r3
 800d128:	370c      	adds	r7, #12
 800d12a:	46bd      	mov	sp, r7
 800d12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d130:	4770      	bx	lr
 800d132:	bf00      	nop
 800d134:	200004a0 	.word	0x200004a0

0800d138 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b082      	sub	sp, #8
 800d13c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d13e:	f000 ff53 	bl	800dfe8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800d142:	2300      	movs	r3, #0
 800d144:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800d146:	4b04      	ldr	r3, [pc, #16]	; (800d158 <xTaskGetTickCountFromISR+0x20>)
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d14c:	683b      	ldr	r3, [r7, #0]
}
 800d14e:	4618      	mov	r0, r3
 800d150:	3708      	adds	r7, #8
 800d152:	46bd      	mov	sp, r7
 800d154:	bd80      	pop	{r7, pc}
 800d156:	bf00      	nop
 800d158:	200004a0 	.word	0x200004a0

0800d15c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b086      	sub	sp, #24
 800d160:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d162:	2300      	movs	r3, #0
 800d164:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d166:	4b4f      	ldr	r3, [pc, #316]	; (800d2a4 <xTaskIncrementTick+0x148>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	f040 8089 	bne.w	800d282 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d170:	4b4d      	ldr	r3, [pc, #308]	; (800d2a8 <xTaskIncrementTick+0x14c>)
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	3301      	adds	r3, #1
 800d176:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d178:	4a4b      	ldr	r2, [pc, #300]	; (800d2a8 <xTaskIncrementTick+0x14c>)
 800d17a:	693b      	ldr	r3, [r7, #16]
 800d17c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d17e:	693b      	ldr	r3, [r7, #16]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d121      	bne.n	800d1c8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800d184:	4b49      	ldr	r3, [pc, #292]	; (800d2ac <xTaskIncrementTick+0x150>)
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d00b      	beq.n	800d1a6 <xTaskIncrementTick+0x4a>
 800d18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d192:	b672      	cpsid	i
 800d194:	f383 8811 	msr	BASEPRI, r3
 800d198:	f3bf 8f6f 	isb	sy
 800d19c:	f3bf 8f4f 	dsb	sy
 800d1a0:	b662      	cpsie	i
 800d1a2:	603b      	str	r3, [r7, #0]
 800d1a4:	e7fe      	b.n	800d1a4 <xTaskIncrementTick+0x48>
 800d1a6:	4b41      	ldr	r3, [pc, #260]	; (800d2ac <xTaskIncrementTick+0x150>)
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	60fb      	str	r3, [r7, #12]
 800d1ac:	4b40      	ldr	r3, [pc, #256]	; (800d2b0 <xTaskIncrementTick+0x154>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	4a3e      	ldr	r2, [pc, #248]	; (800d2ac <xTaskIncrementTick+0x150>)
 800d1b2:	6013      	str	r3, [r2, #0]
 800d1b4:	4a3e      	ldr	r2, [pc, #248]	; (800d2b0 <xTaskIncrementTick+0x154>)
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	6013      	str	r3, [r2, #0]
 800d1ba:	4b3e      	ldr	r3, [pc, #248]	; (800d2b4 <xTaskIncrementTick+0x158>)
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	3301      	adds	r3, #1
 800d1c0:	4a3c      	ldr	r2, [pc, #240]	; (800d2b4 <xTaskIncrementTick+0x158>)
 800d1c2:	6013      	str	r3, [r2, #0]
 800d1c4:	f000 facc 	bl	800d760 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d1c8:	4b3b      	ldr	r3, [pc, #236]	; (800d2b8 <xTaskIncrementTick+0x15c>)
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	693a      	ldr	r2, [r7, #16]
 800d1ce:	429a      	cmp	r2, r3
 800d1d0:	d348      	bcc.n	800d264 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d1d2:	4b36      	ldr	r3, [pc, #216]	; (800d2ac <xTaskIncrementTick+0x150>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d104      	bne.n	800d1e6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d1dc:	4b36      	ldr	r3, [pc, #216]	; (800d2b8 <xTaskIncrementTick+0x15c>)
 800d1de:	f04f 32ff 	mov.w	r2, #4294967295
 800d1e2:	601a      	str	r2, [r3, #0]
					break;
 800d1e4:	e03e      	b.n	800d264 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1e6:	4b31      	ldr	r3, [pc, #196]	; (800d2ac <xTaskIncrementTick+0x150>)
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	68db      	ldr	r3, [r3, #12]
 800d1ec:	68db      	ldr	r3, [r3, #12]
 800d1ee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d1f0:	68bb      	ldr	r3, [r7, #8]
 800d1f2:	685b      	ldr	r3, [r3, #4]
 800d1f4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d1f6:	693a      	ldr	r2, [r7, #16]
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	429a      	cmp	r2, r3
 800d1fc:	d203      	bcs.n	800d206 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d1fe:	4a2e      	ldr	r2, [pc, #184]	; (800d2b8 <xTaskIncrementTick+0x15c>)
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d204:	e02e      	b.n	800d264 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d206:	68bb      	ldr	r3, [r7, #8]
 800d208:	3304      	adds	r3, #4
 800d20a:	4618      	mov	r0, r3
 800d20c:	f7fe fd5e 	bl	800bccc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d214:	2b00      	cmp	r3, #0
 800d216:	d004      	beq.n	800d222 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d218:	68bb      	ldr	r3, [r7, #8]
 800d21a:	3318      	adds	r3, #24
 800d21c:	4618      	mov	r0, r3
 800d21e:	f7fe fd55 	bl	800bccc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d222:	68bb      	ldr	r3, [r7, #8]
 800d224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d226:	2201      	movs	r2, #1
 800d228:	409a      	lsls	r2, r3
 800d22a:	4b24      	ldr	r3, [pc, #144]	; (800d2bc <xTaskIncrementTick+0x160>)
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	4313      	orrs	r3, r2
 800d230:	4a22      	ldr	r2, [pc, #136]	; (800d2bc <xTaskIncrementTick+0x160>)
 800d232:	6013      	str	r3, [r2, #0]
 800d234:	68bb      	ldr	r3, [r7, #8]
 800d236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d238:	4613      	mov	r3, r2
 800d23a:	009b      	lsls	r3, r3, #2
 800d23c:	4413      	add	r3, r2
 800d23e:	009b      	lsls	r3, r3, #2
 800d240:	4a1f      	ldr	r2, [pc, #124]	; (800d2c0 <xTaskIncrementTick+0x164>)
 800d242:	441a      	add	r2, r3
 800d244:	68bb      	ldr	r3, [r7, #8]
 800d246:	3304      	adds	r3, #4
 800d248:	4619      	mov	r1, r3
 800d24a:	4610      	mov	r0, r2
 800d24c:	f7fe fce1 	bl	800bc12 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d250:	68bb      	ldr	r3, [r7, #8]
 800d252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d254:	4b1b      	ldr	r3, [pc, #108]	; (800d2c4 <xTaskIncrementTick+0x168>)
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d25a:	429a      	cmp	r2, r3
 800d25c:	d3b9      	bcc.n	800d1d2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800d25e:	2301      	movs	r3, #1
 800d260:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d262:	e7b6      	b.n	800d1d2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d264:	4b17      	ldr	r3, [pc, #92]	; (800d2c4 <xTaskIncrementTick+0x168>)
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d26a:	4915      	ldr	r1, [pc, #84]	; (800d2c0 <xTaskIncrementTick+0x164>)
 800d26c:	4613      	mov	r3, r2
 800d26e:	009b      	lsls	r3, r3, #2
 800d270:	4413      	add	r3, r2
 800d272:	009b      	lsls	r3, r3, #2
 800d274:	440b      	add	r3, r1
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	2b01      	cmp	r3, #1
 800d27a:	d907      	bls.n	800d28c <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800d27c:	2301      	movs	r3, #1
 800d27e:	617b      	str	r3, [r7, #20]
 800d280:	e004      	b.n	800d28c <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800d282:	4b11      	ldr	r3, [pc, #68]	; (800d2c8 <xTaskIncrementTick+0x16c>)
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	3301      	adds	r3, #1
 800d288:	4a0f      	ldr	r2, [pc, #60]	; (800d2c8 <xTaskIncrementTick+0x16c>)
 800d28a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800d28c:	4b0f      	ldr	r3, [pc, #60]	; (800d2cc <xTaskIncrementTick+0x170>)
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d001      	beq.n	800d298 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800d294:	2301      	movs	r3, #1
 800d296:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800d298:	697b      	ldr	r3, [r7, #20]
}
 800d29a:	4618      	mov	r0, r3
 800d29c:	3718      	adds	r7, #24
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	bd80      	pop	{r7, pc}
 800d2a2:	bf00      	nop
 800d2a4:	200004c4 	.word	0x200004c4
 800d2a8:	200004a0 	.word	0x200004a0
 800d2ac:	20000454 	.word	0x20000454
 800d2b0:	20000458 	.word	0x20000458
 800d2b4:	200004b4 	.word	0x200004b4
 800d2b8:	200004bc 	.word	0x200004bc
 800d2bc:	200004a4 	.word	0x200004a4
 800d2c0:	200003a0 	.word	0x200003a0
 800d2c4:	2000039c 	.word	0x2000039c
 800d2c8:	200004ac 	.word	0x200004ac
 800d2cc:	200004b0 	.word	0x200004b0

0800d2d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b088      	sub	sp, #32
 800d2d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d2d6:	4b3a      	ldr	r3, [pc, #232]	; (800d3c0 <vTaskSwitchContext+0xf0>)
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d003      	beq.n	800d2e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d2de:	4b39      	ldr	r3, [pc, #228]	; (800d3c4 <vTaskSwitchContext+0xf4>)
 800d2e0:	2201      	movs	r2, #1
 800d2e2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d2e4:	e067      	b.n	800d3b6 <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 800d2e6:	4b37      	ldr	r3, [pc, #220]	; (800d3c4 <vTaskSwitchContext+0xf4>)
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800d2ec:	4b36      	ldr	r3, [pc, #216]	; (800d3c8 <vTaskSwitchContext+0xf8>)
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2f2:	61fb      	str	r3, [r7, #28]
 800d2f4:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800d2f8:	61bb      	str	r3, [r7, #24]
 800d2fa:	69fb      	ldr	r3, [r7, #28]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	69ba      	ldr	r2, [r7, #24]
 800d300:	429a      	cmp	r2, r3
 800d302:	d111      	bne.n	800d328 <vTaskSwitchContext+0x58>
 800d304:	69fb      	ldr	r3, [r7, #28]
 800d306:	3304      	adds	r3, #4
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	69ba      	ldr	r2, [r7, #24]
 800d30c:	429a      	cmp	r2, r3
 800d30e:	d10b      	bne.n	800d328 <vTaskSwitchContext+0x58>
 800d310:	69fb      	ldr	r3, [r7, #28]
 800d312:	3308      	adds	r3, #8
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	69ba      	ldr	r2, [r7, #24]
 800d318:	429a      	cmp	r2, r3
 800d31a:	d105      	bne.n	800d328 <vTaskSwitchContext+0x58>
 800d31c:	69fb      	ldr	r3, [r7, #28]
 800d31e:	330c      	adds	r3, #12
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	69ba      	ldr	r2, [r7, #24]
 800d324:	429a      	cmp	r2, r3
 800d326:	d008      	beq.n	800d33a <vTaskSwitchContext+0x6a>
 800d328:	4b27      	ldr	r3, [pc, #156]	; (800d3c8 <vTaskSwitchContext+0xf8>)
 800d32a:	681a      	ldr	r2, [r3, #0]
 800d32c:	4b26      	ldr	r3, [pc, #152]	; (800d3c8 <vTaskSwitchContext+0xf8>)
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	3334      	adds	r3, #52	; 0x34
 800d332:	4619      	mov	r1, r3
 800d334:	4610      	mov	r0, r2
 800d336:	f7f3 f942 	bl	80005be <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d33a:	4b24      	ldr	r3, [pc, #144]	; (800d3cc <vTaskSwitchContext+0xfc>)
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	fab3 f383 	clz	r3, r3
 800d346:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d348:	7afb      	ldrb	r3, [r7, #11]
 800d34a:	f1c3 031f 	rsb	r3, r3, #31
 800d34e:	617b      	str	r3, [r7, #20]
 800d350:	491f      	ldr	r1, [pc, #124]	; (800d3d0 <vTaskSwitchContext+0x100>)
 800d352:	697a      	ldr	r2, [r7, #20]
 800d354:	4613      	mov	r3, r2
 800d356:	009b      	lsls	r3, r3, #2
 800d358:	4413      	add	r3, r2
 800d35a:	009b      	lsls	r3, r3, #2
 800d35c:	440b      	add	r3, r1
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d10b      	bne.n	800d37c <vTaskSwitchContext+0xac>
	__asm volatile
 800d364:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d368:	b672      	cpsid	i
 800d36a:	f383 8811 	msr	BASEPRI, r3
 800d36e:	f3bf 8f6f 	isb	sy
 800d372:	f3bf 8f4f 	dsb	sy
 800d376:	b662      	cpsie	i
 800d378:	607b      	str	r3, [r7, #4]
 800d37a:	e7fe      	b.n	800d37a <vTaskSwitchContext+0xaa>
 800d37c:	697a      	ldr	r2, [r7, #20]
 800d37e:	4613      	mov	r3, r2
 800d380:	009b      	lsls	r3, r3, #2
 800d382:	4413      	add	r3, r2
 800d384:	009b      	lsls	r3, r3, #2
 800d386:	4a12      	ldr	r2, [pc, #72]	; (800d3d0 <vTaskSwitchContext+0x100>)
 800d388:	4413      	add	r3, r2
 800d38a:	613b      	str	r3, [r7, #16]
 800d38c:	693b      	ldr	r3, [r7, #16]
 800d38e:	685b      	ldr	r3, [r3, #4]
 800d390:	685a      	ldr	r2, [r3, #4]
 800d392:	693b      	ldr	r3, [r7, #16]
 800d394:	605a      	str	r2, [r3, #4]
 800d396:	693b      	ldr	r3, [r7, #16]
 800d398:	685a      	ldr	r2, [r3, #4]
 800d39a:	693b      	ldr	r3, [r7, #16]
 800d39c:	3308      	adds	r3, #8
 800d39e:	429a      	cmp	r2, r3
 800d3a0:	d104      	bne.n	800d3ac <vTaskSwitchContext+0xdc>
 800d3a2:	693b      	ldr	r3, [r7, #16]
 800d3a4:	685b      	ldr	r3, [r3, #4]
 800d3a6:	685a      	ldr	r2, [r3, #4]
 800d3a8:	693b      	ldr	r3, [r7, #16]
 800d3aa:	605a      	str	r2, [r3, #4]
 800d3ac:	693b      	ldr	r3, [r7, #16]
 800d3ae:	685b      	ldr	r3, [r3, #4]
 800d3b0:	68db      	ldr	r3, [r3, #12]
 800d3b2:	4a05      	ldr	r2, [pc, #20]	; (800d3c8 <vTaskSwitchContext+0xf8>)
 800d3b4:	6013      	str	r3, [r2, #0]
}
 800d3b6:	bf00      	nop
 800d3b8:	3720      	adds	r7, #32
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	bd80      	pop	{r7, pc}
 800d3be:	bf00      	nop
 800d3c0:	200004c4 	.word	0x200004c4
 800d3c4:	200004b0 	.word	0x200004b0
 800d3c8:	2000039c 	.word	0x2000039c
 800d3cc:	200004a4 	.word	0x200004a4
 800d3d0:	200003a0 	.word	0x200003a0

0800d3d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b084      	sub	sp, #16
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
 800d3dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d10b      	bne.n	800d3fc <vTaskPlaceOnEventList+0x28>
 800d3e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3e8:	b672      	cpsid	i
 800d3ea:	f383 8811 	msr	BASEPRI, r3
 800d3ee:	f3bf 8f6f 	isb	sy
 800d3f2:	f3bf 8f4f 	dsb	sy
 800d3f6:	b662      	cpsie	i
 800d3f8:	60fb      	str	r3, [r7, #12]
 800d3fa:	e7fe      	b.n	800d3fa <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d3fc:	4b07      	ldr	r3, [pc, #28]	; (800d41c <vTaskPlaceOnEventList+0x48>)
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	3318      	adds	r3, #24
 800d402:	4619      	mov	r1, r3
 800d404:	6878      	ldr	r0, [r7, #4]
 800d406:	f7fe fc28 	bl	800bc5a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d40a:	2101      	movs	r1, #1
 800d40c:	6838      	ldr	r0, [r7, #0]
 800d40e:	f000 fb9d 	bl	800db4c <prvAddCurrentTaskToDelayedList>
}
 800d412:	bf00      	nop
 800d414:	3710      	adds	r7, #16
 800d416:	46bd      	mov	sp, r7
 800d418:	bd80      	pop	{r7, pc}
 800d41a:	bf00      	nop
 800d41c:	2000039c 	.word	0x2000039c

0800d420 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b086      	sub	sp, #24
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	68db      	ldr	r3, [r3, #12]
 800d42c:	68db      	ldr	r3, [r3, #12]
 800d42e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d430:	693b      	ldr	r3, [r7, #16]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d10b      	bne.n	800d44e <xTaskRemoveFromEventList+0x2e>
 800d436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d43a:	b672      	cpsid	i
 800d43c:	f383 8811 	msr	BASEPRI, r3
 800d440:	f3bf 8f6f 	isb	sy
 800d444:	f3bf 8f4f 	dsb	sy
 800d448:	b662      	cpsie	i
 800d44a:	60fb      	str	r3, [r7, #12]
 800d44c:	e7fe      	b.n	800d44c <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d44e:	693b      	ldr	r3, [r7, #16]
 800d450:	3318      	adds	r3, #24
 800d452:	4618      	mov	r0, r3
 800d454:	f7fe fc3a 	bl	800bccc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d458:	4b1d      	ldr	r3, [pc, #116]	; (800d4d0 <xTaskRemoveFromEventList+0xb0>)
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d11c      	bne.n	800d49a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d460:	693b      	ldr	r3, [r7, #16]
 800d462:	3304      	adds	r3, #4
 800d464:	4618      	mov	r0, r3
 800d466:	f7fe fc31 	bl	800bccc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d46a:	693b      	ldr	r3, [r7, #16]
 800d46c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d46e:	2201      	movs	r2, #1
 800d470:	409a      	lsls	r2, r3
 800d472:	4b18      	ldr	r3, [pc, #96]	; (800d4d4 <xTaskRemoveFromEventList+0xb4>)
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	4313      	orrs	r3, r2
 800d478:	4a16      	ldr	r2, [pc, #88]	; (800d4d4 <xTaskRemoveFromEventList+0xb4>)
 800d47a:	6013      	str	r3, [r2, #0]
 800d47c:	693b      	ldr	r3, [r7, #16]
 800d47e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d480:	4613      	mov	r3, r2
 800d482:	009b      	lsls	r3, r3, #2
 800d484:	4413      	add	r3, r2
 800d486:	009b      	lsls	r3, r3, #2
 800d488:	4a13      	ldr	r2, [pc, #76]	; (800d4d8 <xTaskRemoveFromEventList+0xb8>)
 800d48a:	441a      	add	r2, r3
 800d48c:	693b      	ldr	r3, [r7, #16]
 800d48e:	3304      	adds	r3, #4
 800d490:	4619      	mov	r1, r3
 800d492:	4610      	mov	r0, r2
 800d494:	f7fe fbbd 	bl	800bc12 <vListInsertEnd>
 800d498:	e005      	b.n	800d4a6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d49a:	693b      	ldr	r3, [r7, #16]
 800d49c:	3318      	adds	r3, #24
 800d49e:	4619      	mov	r1, r3
 800d4a0:	480e      	ldr	r0, [pc, #56]	; (800d4dc <xTaskRemoveFromEventList+0xbc>)
 800d4a2:	f7fe fbb6 	bl	800bc12 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d4a6:	693b      	ldr	r3, [r7, #16]
 800d4a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4aa:	4b0d      	ldr	r3, [pc, #52]	; (800d4e0 <xTaskRemoveFromEventList+0xc0>)
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4b0:	429a      	cmp	r2, r3
 800d4b2:	d905      	bls.n	800d4c0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d4b4:	2301      	movs	r3, #1
 800d4b6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d4b8:	4b0a      	ldr	r3, [pc, #40]	; (800d4e4 <xTaskRemoveFromEventList+0xc4>)
 800d4ba:	2201      	movs	r2, #1
 800d4bc:	601a      	str	r2, [r3, #0]
 800d4be:	e001      	b.n	800d4c4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d4c4:	697b      	ldr	r3, [r7, #20]
}
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	3718      	adds	r7, #24
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bd80      	pop	{r7, pc}
 800d4ce:	bf00      	nop
 800d4d0:	200004c4 	.word	0x200004c4
 800d4d4:	200004a4 	.word	0x200004a4
 800d4d8:	200003a0 	.word	0x200003a0
 800d4dc:	2000045c 	.word	0x2000045c
 800d4e0:	2000039c 	.word	0x2000039c
 800d4e4:	200004b0 	.word	0x200004b0

0800d4e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d4e8:	b480      	push	{r7}
 800d4ea:	b083      	sub	sp, #12
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d4f0:	4b06      	ldr	r3, [pc, #24]	; (800d50c <vTaskInternalSetTimeOutState+0x24>)
 800d4f2:	681a      	ldr	r2, [r3, #0]
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d4f8:	4b05      	ldr	r3, [pc, #20]	; (800d510 <vTaskInternalSetTimeOutState+0x28>)
 800d4fa:	681a      	ldr	r2, [r3, #0]
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	605a      	str	r2, [r3, #4]
}
 800d500:	bf00      	nop
 800d502:	370c      	adds	r7, #12
 800d504:	46bd      	mov	sp, r7
 800d506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50a:	4770      	bx	lr
 800d50c:	200004b4 	.word	0x200004b4
 800d510:	200004a0 	.word	0x200004a0

0800d514 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d514:	b580      	push	{r7, lr}
 800d516:	b088      	sub	sp, #32
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
 800d51c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d10b      	bne.n	800d53c <xTaskCheckForTimeOut+0x28>
 800d524:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d528:	b672      	cpsid	i
 800d52a:	f383 8811 	msr	BASEPRI, r3
 800d52e:	f3bf 8f6f 	isb	sy
 800d532:	f3bf 8f4f 	dsb	sy
 800d536:	b662      	cpsie	i
 800d538:	613b      	str	r3, [r7, #16]
 800d53a:	e7fe      	b.n	800d53a <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800d53c:	683b      	ldr	r3, [r7, #0]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d10b      	bne.n	800d55a <xTaskCheckForTimeOut+0x46>
 800d542:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d546:	b672      	cpsid	i
 800d548:	f383 8811 	msr	BASEPRI, r3
 800d54c:	f3bf 8f6f 	isb	sy
 800d550:	f3bf 8f4f 	dsb	sy
 800d554:	b662      	cpsie	i
 800d556:	60fb      	str	r3, [r7, #12]
 800d558:	e7fe      	b.n	800d558 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800d55a:	f000 fc65 	bl	800de28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d55e:	4b1d      	ldr	r3, [pc, #116]	; (800d5d4 <xTaskCheckForTimeOut+0xc0>)
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	685b      	ldr	r3, [r3, #4]
 800d568:	69ba      	ldr	r2, [r7, #24]
 800d56a:	1ad3      	subs	r3, r2, r3
 800d56c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d576:	d102      	bne.n	800d57e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d578:	2300      	movs	r3, #0
 800d57a:	61fb      	str	r3, [r7, #28]
 800d57c:	e023      	b.n	800d5c6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	681a      	ldr	r2, [r3, #0]
 800d582:	4b15      	ldr	r3, [pc, #84]	; (800d5d8 <xTaskCheckForTimeOut+0xc4>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	429a      	cmp	r2, r3
 800d588:	d007      	beq.n	800d59a <xTaskCheckForTimeOut+0x86>
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	685b      	ldr	r3, [r3, #4]
 800d58e:	69ba      	ldr	r2, [r7, #24]
 800d590:	429a      	cmp	r2, r3
 800d592:	d302      	bcc.n	800d59a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d594:	2301      	movs	r3, #1
 800d596:	61fb      	str	r3, [r7, #28]
 800d598:	e015      	b.n	800d5c6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d59a:	683b      	ldr	r3, [r7, #0]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	697a      	ldr	r2, [r7, #20]
 800d5a0:	429a      	cmp	r2, r3
 800d5a2:	d20b      	bcs.n	800d5bc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d5a4:	683b      	ldr	r3, [r7, #0]
 800d5a6:	681a      	ldr	r2, [r3, #0]
 800d5a8:	697b      	ldr	r3, [r7, #20]
 800d5aa:	1ad2      	subs	r2, r2, r3
 800d5ac:	683b      	ldr	r3, [r7, #0]
 800d5ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d5b0:	6878      	ldr	r0, [r7, #4]
 800d5b2:	f7ff ff99 	bl	800d4e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	61fb      	str	r3, [r7, #28]
 800d5ba:	e004      	b.n	800d5c6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800d5bc:	683b      	ldr	r3, [r7, #0]
 800d5be:	2200      	movs	r2, #0
 800d5c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d5c2:	2301      	movs	r3, #1
 800d5c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d5c6:	f000 fc61 	bl	800de8c <vPortExitCritical>

	return xReturn;
 800d5ca:	69fb      	ldr	r3, [r7, #28]
}
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	3720      	adds	r7, #32
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd80      	pop	{r7, pc}
 800d5d4:	200004a0 	.word	0x200004a0
 800d5d8:	200004b4 	.word	0x200004b4

0800d5dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d5dc:	b480      	push	{r7}
 800d5de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d5e0:	4b03      	ldr	r3, [pc, #12]	; (800d5f0 <vTaskMissedYield+0x14>)
 800d5e2:	2201      	movs	r2, #1
 800d5e4:	601a      	str	r2, [r3, #0]
}
 800d5e6:	bf00      	nop
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ee:	4770      	bx	lr
 800d5f0:	200004b0 	.word	0x200004b0

0800d5f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b082      	sub	sp, #8
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d5fc:	f000 f854 	bl	800d6a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d600:	4b07      	ldr	r3, [pc, #28]	; (800d620 <prvIdleTask+0x2c>)
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	2b01      	cmp	r3, #1
 800d606:	d907      	bls.n	800d618 <prvIdleTask+0x24>
			{
				taskYIELD();
 800d608:	4b06      	ldr	r3, [pc, #24]	; (800d624 <prvIdleTask+0x30>)
 800d60a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d60e:	601a      	str	r2, [r3, #0]
 800d610:	f3bf 8f4f 	dsb	sy
 800d614:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800d618:	f7f2 ffca 	bl	80005b0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800d61c:	e7ee      	b.n	800d5fc <prvIdleTask+0x8>
 800d61e:	bf00      	nop
 800d620:	200003a0 	.word	0x200003a0
 800d624:	e000ed04 	.word	0xe000ed04

0800d628 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b082      	sub	sp, #8
 800d62c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d62e:	2300      	movs	r3, #0
 800d630:	607b      	str	r3, [r7, #4]
 800d632:	e00c      	b.n	800d64e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d634:	687a      	ldr	r2, [r7, #4]
 800d636:	4613      	mov	r3, r2
 800d638:	009b      	lsls	r3, r3, #2
 800d63a:	4413      	add	r3, r2
 800d63c:	009b      	lsls	r3, r3, #2
 800d63e:	4a12      	ldr	r2, [pc, #72]	; (800d688 <prvInitialiseTaskLists+0x60>)
 800d640:	4413      	add	r3, r2
 800d642:	4618      	mov	r0, r3
 800d644:	f7fe fab8 	bl	800bbb8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	3301      	adds	r3, #1
 800d64c:	607b      	str	r3, [r7, #4]
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	2b06      	cmp	r3, #6
 800d652:	d9ef      	bls.n	800d634 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d654:	480d      	ldr	r0, [pc, #52]	; (800d68c <prvInitialiseTaskLists+0x64>)
 800d656:	f7fe faaf 	bl	800bbb8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d65a:	480d      	ldr	r0, [pc, #52]	; (800d690 <prvInitialiseTaskLists+0x68>)
 800d65c:	f7fe faac 	bl	800bbb8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d660:	480c      	ldr	r0, [pc, #48]	; (800d694 <prvInitialiseTaskLists+0x6c>)
 800d662:	f7fe faa9 	bl	800bbb8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d666:	480c      	ldr	r0, [pc, #48]	; (800d698 <prvInitialiseTaskLists+0x70>)
 800d668:	f7fe faa6 	bl	800bbb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d66c:	480b      	ldr	r0, [pc, #44]	; (800d69c <prvInitialiseTaskLists+0x74>)
 800d66e:	f7fe faa3 	bl	800bbb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d672:	4b0b      	ldr	r3, [pc, #44]	; (800d6a0 <prvInitialiseTaskLists+0x78>)
 800d674:	4a05      	ldr	r2, [pc, #20]	; (800d68c <prvInitialiseTaskLists+0x64>)
 800d676:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d678:	4b0a      	ldr	r3, [pc, #40]	; (800d6a4 <prvInitialiseTaskLists+0x7c>)
 800d67a:	4a05      	ldr	r2, [pc, #20]	; (800d690 <prvInitialiseTaskLists+0x68>)
 800d67c:	601a      	str	r2, [r3, #0]
}
 800d67e:	bf00      	nop
 800d680:	3708      	adds	r7, #8
 800d682:	46bd      	mov	sp, r7
 800d684:	bd80      	pop	{r7, pc}
 800d686:	bf00      	nop
 800d688:	200003a0 	.word	0x200003a0
 800d68c:	2000042c 	.word	0x2000042c
 800d690:	20000440 	.word	0x20000440
 800d694:	2000045c 	.word	0x2000045c
 800d698:	20000470 	.word	0x20000470
 800d69c:	20000488 	.word	0x20000488
 800d6a0:	20000454 	.word	0x20000454
 800d6a4:	20000458 	.word	0x20000458

0800d6a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b082      	sub	sp, #8
 800d6ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d6ae:	e019      	b.n	800d6e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d6b0:	f000 fbba 	bl	800de28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6b4:	4b0f      	ldr	r3, [pc, #60]	; (800d6f4 <prvCheckTasksWaitingTermination+0x4c>)
 800d6b6:	68db      	ldr	r3, [r3, #12]
 800d6b8:	68db      	ldr	r3, [r3, #12]
 800d6ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	3304      	adds	r3, #4
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	f7fe fb03 	bl	800bccc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d6c6:	4b0c      	ldr	r3, [pc, #48]	; (800d6f8 <prvCheckTasksWaitingTermination+0x50>)
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	3b01      	subs	r3, #1
 800d6cc:	4a0a      	ldr	r2, [pc, #40]	; (800d6f8 <prvCheckTasksWaitingTermination+0x50>)
 800d6ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d6d0:	4b0a      	ldr	r3, [pc, #40]	; (800d6fc <prvCheckTasksWaitingTermination+0x54>)
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	3b01      	subs	r3, #1
 800d6d6:	4a09      	ldr	r2, [pc, #36]	; (800d6fc <prvCheckTasksWaitingTermination+0x54>)
 800d6d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d6da:	f000 fbd7 	bl	800de8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d6de:	6878      	ldr	r0, [r7, #4]
 800d6e0:	f000 f80e 	bl	800d700 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d6e4:	4b05      	ldr	r3, [pc, #20]	; (800d6fc <prvCheckTasksWaitingTermination+0x54>)
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d1e1      	bne.n	800d6b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d6ec:	bf00      	nop
 800d6ee:	3708      	adds	r7, #8
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	bd80      	pop	{r7, pc}
 800d6f4:	20000470 	.word	0x20000470
 800d6f8:	2000049c 	.word	0x2000049c
 800d6fc:	20000484 	.word	0x20000484

0800d700 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d700:	b580      	push	{r7, lr}
 800d702:	b084      	sub	sp, #16
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d108      	bne.n	800d724 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d716:	4618      	mov	r0, r3
 800d718:	f000 fd74 	bl	800e204 <vPortFree>
				vPortFree( pxTCB );
 800d71c:	6878      	ldr	r0, [r7, #4]
 800d71e:	f000 fd71 	bl	800e204 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d722:	e019      	b.n	800d758 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800d72a:	2b01      	cmp	r3, #1
 800d72c:	d103      	bne.n	800d736 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d72e:	6878      	ldr	r0, [r7, #4]
 800d730:	f000 fd68 	bl	800e204 <vPortFree>
	}
 800d734:	e010      	b.n	800d758 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800d73c:	2b02      	cmp	r3, #2
 800d73e:	d00b      	beq.n	800d758 <prvDeleteTCB+0x58>
 800d740:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d744:	b672      	cpsid	i
 800d746:	f383 8811 	msr	BASEPRI, r3
 800d74a:	f3bf 8f6f 	isb	sy
 800d74e:	f3bf 8f4f 	dsb	sy
 800d752:	b662      	cpsie	i
 800d754:	60fb      	str	r3, [r7, #12]
 800d756:	e7fe      	b.n	800d756 <prvDeleteTCB+0x56>
	}
 800d758:	bf00      	nop
 800d75a:	3710      	adds	r7, #16
 800d75c:	46bd      	mov	sp, r7
 800d75e:	bd80      	pop	{r7, pc}

0800d760 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d760:	b480      	push	{r7}
 800d762:	b083      	sub	sp, #12
 800d764:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d766:	4b0c      	ldr	r3, [pc, #48]	; (800d798 <prvResetNextTaskUnblockTime+0x38>)
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d104      	bne.n	800d77a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d770:	4b0a      	ldr	r3, [pc, #40]	; (800d79c <prvResetNextTaskUnblockTime+0x3c>)
 800d772:	f04f 32ff 	mov.w	r2, #4294967295
 800d776:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d778:	e008      	b.n	800d78c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d77a:	4b07      	ldr	r3, [pc, #28]	; (800d798 <prvResetNextTaskUnblockTime+0x38>)
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	68db      	ldr	r3, [r3, #12]
 800d780:	68db      	ldr	r3, [r3, #12]
 800d782:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	685b      	ldr	r3, [r3, #4]
 800d788:	4a04      	ldr	r2, [pc, #16]	; (800d79c <prvResetNextTaskUnblockTime+0x3c>)
 800d78a:	6013      	str	r3, [r2, #0]
}
 800d78c:	bf00      	nop
 800d78e:	370c      	adds	r7, #12
 800d790:	46bd      	mov	sp, r7
 800d792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d796:	4770      	bx	lr
 800d798:	20000454 	.word	0x20000454
 800d79c:	200004bc 	.word	0x200004bc

0800d7a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d7a0:	b480      	push	{r7}
 800d7a2:	b083      	sub	sp, #12
 800d7a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d7a6:	4b0b      	ldr	r3, [pc, #44]	; (800d7d4 <xTaskGetSchedulerState+0x34>)
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d102      	bne.n	800d7b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d7ae:	2301      	movs	r3, #1
 800d7b0:	607b      	str	r3, [r7, #4]
 800d7b2:	e008      	b.n	800d7c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d7b4:	4b08      	ldr	r3, [pc, #32]	; (800d7d8 <xTaskGetSchedulerState+0x38>)
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d102      	bne.n	800d7c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d7bc:	2302      	movs	r3, #2
 800d7be:	607b      	str	r3, [r7, #4]
 800d7c0:	e001      	b.n	800d7c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d7c6:	687b      	ldr	r3, [r7, #4]
	}
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	370c      	adds	r7, #12
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d2:	4770      	bx	lr
 800d7d4:	200004a8 	.word	0x200004a8
 800d7d8:	200004c4 	.word	0x200004c4

0800d7dc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b084      	sub	sp, #16
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d069      	beq.n	800d8c6 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d7f2:	68bb      	ldr	r3, [r7, #8]
 800d7f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7f6:	4b36      	ldr	r3, [pc, #216]	; (800d8d0 <xTaskPriorityInherit+0xf4>)
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7fc:	429a      	cmp	r2, r3
 800d7fe:	d259      	bcs.n	800d8b4 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d800:	68bb      	ldr	r3, [r7, #8]
 800d802:	699b      	ldr	r3, [r3, #24]
 800d804:	2b00      	cmp	r3, #0
 800d806:	db06      	blt.n	800d816 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d808:	4b31      	ldr	r3, [pc, #196]	; (800d8d0 <xTaskPriorityInherit+0xf4>)
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d80e:	f1c3 0207 	rsb	r2, r3, #7
 800d812:	68bb      	ldr	r3, [r7, #8]
 800d814:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d816:	68bb      	ldr	r3, [r7, #8]
 800d818:	6959      	ldr	r1, [r3, #20]
 800d81a:	68bb      	ldr	r3, [r7, #8]
 800d81c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d81e:	4613      	mov	r3, r2
 800d820:	009b      	lsls	r3, r3, #2
 800d822:	4413      	add	r3, r2
 800d824:	009b      	lsls	r3, r3, #2
 800d826:	4a2b      	ldr	r2, [pc, #172]	; (800d8d4 <xTaskPriorityInherit+0xf8>)
 800d828:	4413      	add	r3, r2
 800d82a:	4299      	cmp	r1, r3
 800d82c:	d13a      	bne.n	800d8a4 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d82e:	68bb      	ldr	r3, [r7, #8]
 800d830:	3304      	adds	r3, #4
 800d832:	4618      	mov	r0, r3
 800d834:	f7fe fa4a 	bl	800bccc <uxListRemove>
 800d838:	4603      	mov	r3, r0
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d115      	bne.n	800d86a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800d83e:	68bb      	ldr	r3, [r7, #8]
 800d840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d842:	4924      	ldr	r1, [pc, #144]	; (800d8d4 <xTaskPriorityInherit+0xf8>)
 800d844:	4613      	mov	r3, r2
 800d846:	009b      	lsls	r3, r3, #2
 800d848:	4413      	add	r3, r2
 800d84a:	009b      	lsls	r3, r3, #2
 800d84c:	440b      	add	r3, r1
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d10a      	bne.n	800d86a <xTaskPriorityInherit+0x8e>
 800d854:	68bb      	ldr	r3, [r7, #8]
 800d856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d858:	2201      	movs	r2, #1
 800d85a:	fa02 f303 	lsl.w	r3, r2, r3
 800d85e:	43da      	mvns	r2, r3
 800d860:	4b1d      	ldr	r3, [pc, #116]	; (800d8d8 <xTaskPriorityInherit+0xfc>)
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	4013      	ands	r3, r2
 800d866:	4a1c      	ldr	r2, [pc, #112]	; (800d8d8 <xTaskPriorityInherit+0xfc>)
 800d868:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d86a:	4b19      	ldr	r3, [pc, #100]	; (800d8d0 <xTaskPriorityInherit+0xf4>)
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d870:	68bb      	ldr	r3, [r7, #8]
 800d872:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d874:	68bb      	ldr	r3, [r7, #8]
 800d876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d878:	2201      	movs	r2, #1
 800d87a:	409a      	lsls	r2, r3
 800d87c:	4b16      	ldr	r3, [pc, #88]	; (800d8d8 <xTaskPriorityInherit+0xfc>)
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	4313      	orrs	r3, r2
 800d882:	4a15      	ldr	r2, [pc, #84]	; (800d8d8 <xTaskPriorityInherit+0xfc>)
 800d884:	6013      	str	r3, [r2, #0]
 800d886:	68bb      	ldr	r3, [r7, #8]
 800d888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d88a:	4613      	mov	r3, r2
 800d88c:	009b      	lsls	r3, r3, #2
 800d88e:	4413      	add	r3, r2
 800d890:	009b      	lsls	r3, r3, #2
 800d892:	4a10      	ldr	r2, [pc, #64]	; (800d8d4 <xTaskPriorityInherit+0xf8>)
 800d894:	441a      	add	r2, r3
 800d896:	68bb      	ldr	r3, [r7, #8]
 800d898:	3304      	adds	r3, #4
 800d89a:	4619      	mov	r1, r3
 800d89c:	4610      	mov	r0, r2
 800d89e:	f7fe f9b8 	bl	800bc12 <vListInsertEnd>
 800d8a2:	e004      	b.n	800d8ae <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d8a4:	4b0a      	ldr	r3, [pc, #40]	; (800d8d0 <xTaskPriorityInherit+0xf4>)
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8aa:	68bb      	ldr	r3, [r7, #8]
 800d8ac:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d8ae:	2301      	movs	r3, #1
 800d8b0:	60fb      	str	r3, [r7, #12]
 800d8b2:	e008      	b.n	800d8c6 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d8b4:	68bb      	ldr	r3, [r7, #8]
 800d8b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d8b8:	4b05      	ldr	r3, [pc, #20]	; (800d8d0 <xTaskPriorityInherit+0xf4>)
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8be:	429a      	cmp	r2, r3
 800d8c0:	d201      	bcs.n	800d8c6 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d8c2:	2301      	movs	r3, #1
 800d8c4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d8c6:	68fb      	ldr	r3, [r7, #12]
	}
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	3710      	adds	r7, #16
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bd80      	pop	{r7, pc}
 800d8d0:	2000039c 	.word	0x2000039c
 800d8d4:	200003a0 	.word	0x200003a0
 800d8d8:	200004a4 	.word	0x200004a4

0800d8dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b086      	sub	sp, #24
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d070      	beq.n	800d9d4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d8f2:	4b3b      	ldr	r3, [pc, #236]	; (800d9e0 <xTaskPriorityDisinherit+0x104>)
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	693a      	ldr	r2, [r7, #16]
 800d8f8:	429a      	cmp	r2, r3
 800d8fa:	d00b      	beq.n	800d914 <xTaskPriorityDisinherit+0x38>
 800d8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d900:	b672      	cpsid	i
 800d902:	f383 8811 	msr	BASEPRI, r3
 800d906:	f3bf 8f6f 	isb	sy
 800d90a:	f3bf 8f4f 	dsb	sy
 800d90e:	b662      	cpsie	i
 800d910:	60fb      	str	r3, [r7, #12]
 800d912:	e7fe      	b.n	800d912 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800d914:	693b      	ldr	r3, [r7, #16]
 800d916:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d10b      	bne.n	800d934 <xTaskPriorityDisinherit+0x58>
 800d91c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d920:	b672      	cpsid	i
 800d922:	f383 8811 	msr	BASEPRI, r3
 800d926:	f3bf 8f6f 	isb	sy
 800d92a:	f3bf 8f4f 	dsb	sy
 800d92e:	b662      	cpsie	i
 800d930:	60bb      	str	r3, [r7, #8]
 800d932:	e7fe      	b.n	800d932 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800d934:	693b      	ldr	r3, [r7, #16]
 800d936:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d938:	1e5a      	subs	r2, r3, #1
 800d93a:	693b      	ldr	r3, [r7, #16]
 800d93c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d93e:	693b      	ldr	r3, [r7, #16]
 800d940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d942:	693b      	ldr	r3, [r7, #16]
 800d944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d946:	429a      	cmp	r2, r3
 800d948:	d044      	beq.n	800d9d4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d94a:	693b      	ldr	r3, [r7, #16]
 800d94c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d140      	bne.n	800d9d4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d952:	693b      	ldr	r3, [r7, #16]
 800d954:	3304      	adds	r3, #4
 800d956:	4618      	mov	r0, r3
 800d958:	f7fe f9b8 	bl	800bccc <uxListRemove>
 800d95c:	4603      	mov	r3, r0
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d115      	bne.n	800d98e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d962:	693b      	ldr	r3, [r7, #16]
 800d964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d966:	491f      	ldr	r1, [pc, #124]	; (800d9e4 <xTaskPriorityDisinherit+0x108>)
 800d968:	4613      	mov	r3, r2
 800d96a:	009b      	lsls	r3, r3, #2
 800d96c:	4413      	add	r3, r2
 800d96e:	009b      	lsls	r3, r3, #2
 800d970:	440b      	add	r3, r1
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d10a      	bne.n	800d98e <xTaskPriorityDisinherit+0xb2>
 800d978:	693b      	ldr	r3, [r7, #16]
 800d97a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d97c:	2201      	movs	r2, #1
 800d97e:	fa02 f303 	lsl.w	r3, r2, r3
 800d982:	43da      	mvns	r2, r3
 800d984:	4b18      	ldr	r3, [pc, #96]	; (800d9e8 <xTaskPriorityDisinherit+0x10c>)
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	4013      	ands	r3, r2
 800d98a:	4a17      	ldr	r2, [pc, #92]	; (800d9e8 <xTaskPriorityDisinherit+0x10c>)
 800d98c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d98e:	693b      	ldr	r3, [r7, #16]
 800d990:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d992:	693b      	ldr	r3, [r7, #16]
 800d994:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d996:	693b      	ldr	r3, [r7, #16]
 800d998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d99a:	f1c3 0207 	rsb	r2, r3, #7
 800d99e:	693b      	ldr	r3, [r7, #16]
 800d9a0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d9a2:	693b      	ldr	r3, [r7, #16]
 800d9a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9a6:	2201      	movs	r2, #1
 800d9a8:	409a      	lsls	r2, r3
 800d9aa:	4b0f      	ldr	r3, [pc, #60]	; (800d9e8 <xTaskPriorityDisinherit+0x10c>)
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	4313      	orrs	r3, r2
 800d9b0:	4a0d      	ldr	r2, [pc, #52]	; (800d9e8 <xTaskPriorityDisinherit+0x10c>)
 800d9b2:	6013      	str	r3, [r2, #0]
 800d9b4:	693b      	ldr	r3, [r7, #16]
 800d9b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9b8:	4613      	mov	r3, r2
 800d9ba:	009b      	lsls	r3, r3, #2
 800d9bc:	4413      	add	r3, r2
 800d9be:	009b      	lsls	r3, r3, #2
 800d9c0:	4a08      	ldr	r2, [pc, #32]	; (800d9e4 <xTaskPriorityDisinherit+0x108>)
 800d9c2:	441a      	add	r2, r3
 800d9c4:	693b      	ldr	r3, [r7, #16]
 800d9c6:	3304      	adds	r3, #4
 800d9c8:	4619      	mov	r1, r3
 800d9ca:	4610      	mov	r0, r2
 800d9cc:	f7fe f921 	bl	800bc12 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d9d0:	2301      	movs	r3, #1
 800d9d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d9d4:	697b      	ldr	r3, [r7, #20]
	}
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	3718      	adds	r7, #24
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	bd80      	pop	{r7, pc}
 800d9de:	bf00      	nop
 800d9e0:	2000039c 	.word	0x2000039c
 800d9e4:	200003a0 	.word	0x200003a0
 800d9e8:	200004a4 	.word	0x200004a4

0800d9ec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	b088      	sub	sp, #32
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]
 800d9f4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d9fa:	2301      	movs	r3, #1
 800d9fc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	2b00      	cmp	r3, #0
 800da02:	f000 8085 	beq.w	800db10 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800da06:	69bb      	ldr	r3, [r7, #24]
 800da08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d10b      	bne.n	800da26 <vTaskPriorityDisinheritAfterTimeout+0x3a>
 800da0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da12:	b672      	cpsid	i
 800da14:	f383 8811 	msr	BASEPRI, r3
 800da18:	f3bf 8f6f 	isb	sy
 800da1c:	f3bf 8f4f 	dsb	sy
 800da20:	b662      	cpsie	i
 800da22:	60fb      	str	r3, [r7, #12]
 800da24:	e7fe      	b.n	800da24 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800da26:	69bb      	ldr	r3, [r7, #24]
 800da28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da2a:	683a      	ldr	r2, [r7, #0]
 800da2c:	429a      	cmp	r2, r3
 800da2e:	d902      	bls.n	800da36 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800da30:	683b      	ldr	r3, [r7, #0]
 800da32:	61fb      	str	r3, [r7, #28]
 800da34:	e002      	b.n	800da3c <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800da36:	69bb      	ldr	r3, [r7, #24]
 800da38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da3a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800da3c:	69bb      	ldr	r3, [r7, #24]
 800da3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da40:	69fa      	ldr	r2, [r7, #28]
 800da42:	429a      	cmp	r2, r3
 800da44:	d064      	beq.n	800db10 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800da46:	69bb      	ldr	r3, [r7, #24]
 800da48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da4a:	697a      	ldr	r2, [r7, #20]
 800da4c:	429a      	cmp	r2, r3
 800da4e:	d15f      	bne.n	800db10 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800da50:	4b31      	ldr	r3, [pc, #196]	; (800db18 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	69ba      	ldr	r2, [r7, #24]
 800da56:	429a      	cmp	r2, r3
 800da58:	d10b      	bne.n	800da72 <vTaskPriorityDisinheritAfterTimeout+0x86>
 800da5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da5e:	b672      	cpsid	i
 800da60:	f383 8811 	msr	BASEPRI, r3
 800da64:	f3bf 8f6f 	isb	sy
 800da68:	f3bf 8f4f 	dsb	sy
 800da6c:	b662      	cpsie	i
 800da6e:	60bb      	str	r3, [r7, #8]
 800da70:	e7fe      	b.n	800da70 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800da72:	69bb      	ldr	r3, [r7, #24]
 800da74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da76:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800da78:	69bb      	ldr	r3, [r7, #24]
 800da7a:	69fa      	ldr	r2, [r7, #28]
 800da7c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800da7e:	69bb      	ldr	r3, [r7, #24]
 800da80:	699b      	ldr	r3, [r3, #24]
 800da82:	2b00      	cmp	r3, #0
 800da84:	db04      	blt.n	800da90 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da86:	69fb      	ldr	r3, [r7, #28]
 800da88:	f1c3 0207 	rsb	r2, r3, #7
 800da8c:	69bb      	ldr	r3, [r7, #24]
 800da8e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800da90:	69bb      	ldr	r3, [r7, #24]
 800da92:	6959      	ldr	r1, [r3, #20]
 800da94:	693a      	ldr	r2, [r7, #16]
 800da96:	4613      	mov	r3, r2
 800da98:	009b      	lsls	r3, r3, #2
 800da9a:	4413      	add	r3, r2
 800da9c:	009b      	lsls	r3, r3, #2
 800da9e:	4a1f      	ldr	r2, [pc, #124]	; (800db1c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800daa0:	4413      	add	r3, r2
 800daa2:	4299      	cmp	r1, r3
 800daa4:	d134      	bne.n	800db10 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800daa6:	69bb      	ldr	r3, [r7, #24]
 800daa8:	3304      	adds	r3, #4
 800daaa:	4618      	mov	r0, r3
 800daac:	f7fe f90e 	bl	800bccc <uxListRemove>
 800dab0:	4603      	mov	r3, r0
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d115      	bne.n	800dae2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800dab6:	69bb      	ldr	r3, [r7, #24]
 800dab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daba:	4918      	ldr	r1, [pc, #96]	; (800db1c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800dabc:	4613      	mov	r3, r2
 800dabe:	009b      	lsls	r3, r3, #2
 800dac0:	4413      	add	r3, r2
 800dac2:	009b      	lsls	r3, r3, #2
 800dac4:	440b      	add	r3, r1
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d10a      	bne.n	800dae2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
 800dacc:	69bb      	ldr	r3, [r7, #24]
 800dace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dad0:	2201      	movs	r2, #1
 800dad2:	fa02 f303 	lsl.w	r3, r2, r3
 800dad6:	43da      	mvns	r2, r3
 800dad8:	4b11      	ldr	r3, [pc, #68]	; (800db20 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	4013      	ands	r3, r2
 800dade:	4a10      	ldr	r2, [pc, #64]	; (800db20 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800dae0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800dae2:	69bb      	ldr	r3, [r7, #24]
 800dae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dae6:	2201      	movs	r2, #1
 800dae8:	409a      	lsls	r2, r3
 800daea:	4b0d      	ldr	r3, [pc, #52]	; (800db20 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	4313      	orrs	r3, r2
 800daf0:	4a0b      	ldr	r2, [pc, #44]	; (800db20 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800daf2:	6013      	str	r3, [r2, #0]
 800daf4:	69bb      	ldr	r3, [r7, #24]
 800daf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daf8:	4613      	mov	r3, r2
 800dafa:	009b      	lsls	r3, r3, #2
 800dafc:	4413      	add	r3, r2
 800dafe:	009b      	lsls	r3, r3, #2
 800db00:	4a06      	ldr	r2, [pc, #24]	; (800db1c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800db02:	441a      	add	r2, r3
 800db04:	69bb      	ldr	r3, [r7, #24]
 800db06:	3304      	adds	r3, #4
 800db08:	4619      	mov	r1, r3
 800db0a:	4610      	mov	r0, r2
 800db0c:	f7fe f881 	bl	800bc12 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800db10:	bf00      	nop
 800db12:	3720      	adds	r7, #32
 800db14:	46bd      	mov	sp, r7
 800db16:	bd80      	pop	{r7, pc}
 800db18:	2000039c 	.word	0x2000039c
 800db1c:	200003a0 	.word	0x200003a0
 800db20:	200004a4 	.word	0x200004a4

0800db24 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800db24:	b480      	push	{r7}
 800db26:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800db28:	4b07      	ldr	r3, [pc, #28]	; (800db48 <pvTaskIncrementMutexHeldCount+0x24>)
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d004      	beq.n	800db3a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800db30:	4b05      	ldr	r3, [pc, #20]	; (800db48 <pvTaskIncrementMutexHeldCount+0x24>)
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800db36:	3201      	adds	r2, #1
 800db38:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800db3a:	4b03      	ldr	r3, [pc, #12]	; (800db48 <pvTaskIncrementMutexHeldCount+0x24>)
 800db3c:	681b      	ldr	r3, [r3, #0]
	}
 800db3e:	4618      	mov	r0, r3
 800db40:	46bd      	mov	sp, r7
 800db42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db46:	4770      	bx	lr
 800db48:	2000039c 	.word	0x2000039c

0800db4c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b084      	sub	sp, #16
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
 800db54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800db56:	4b29      	ldr	r3, [pc, #164]	; (800dbfc <prvAddCurrentTaskToDelayedList+0xb0>)
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800db5c:	4b28      	ldr	r3, [pc, #160]	; (800dc00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	3304      	adds	r3, #4
 800db62:	4618      	mov	r0, r3
 800db64:	f7fe f8b2 	bl	800bccc <uxListRemove>
 800db68:	4603      	mov	r3, r0
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d10b      	bne.n	800db86 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800db6e:	4b24      	ldr	r3, [pc, #144]	; (800dc00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db74:	2201      	movs	r2, #1
 800db76:	fa02 f303 	lsl.w	r3, r2, r3
 800db7a:	43da      	mvns	r2, r3
 800db7c:	4b21      	ldr	r3, [pc, #132]	; (800dc04 <prvAddCurrentTaskToDelayedList+0xb8>)
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	4013      	ands	r3, r2
 800db82:	4a20      	ldr	r2, [pc, #128]	; (800dc04 <prvAddCurrentTaskToDelayedList+0xb8>)
 800db84:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db8c:	d10a      	bne.n	800dba4 <prvAddCurrentTaskToDelayedList+0x58>
 800db8e:	683b      	ldr	r3, [r7, #0]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d007      	beq.n	800dba4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db94:	4b1a      	ldr	r3, [pc, #104]	; (800dc00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	3304      	adds	r3, #4
 800db9a:	4619      	mov	r1, r3
 800db9c:	481a      	ldr	r0, [pc, #104]	; (800dc08 <prvAddCurrentTaskToDelayedList+0xbc>)
 800db9e:	f7fe f838 	bl	800bc12 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dba2:	e026      	b.n	800dbf2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dba4:	68fa      	ldr	r2, [r7, #12]
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	4413      	add	r3, r2
 800dbaa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dbac:	4b14      	ldr	r3, [pc, #80]	; (800dc00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	68ba      	ldr	r2, [r7, #8]
 800dbb2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dbb4:	68ba      	ldr	r2, [r7, #8]
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	429a      	cmp	r2, r3
 800dbba:	d209      	bcs.n	800dbd0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dbbc:	4b13      	ldr	r3, [pc, #76]	; (800dc0c <prvAddCurrentTaskToDelayedList+0xc0>)
 800dbbe:	681a      	ldr	r2, [r3, #0]
 800dbc0:	4b0f      	ldr	r3, [pc, #60]	; (800dc00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	3304      	adds	r3, #4
 800dbc6:	4619      	mov	r1, r3
 800dbc8:	4610      	mov	r0, r2
 800dbca:	f7fe f846 	bl	800bc5a <vListInsert>
}
 800dbce:	e010      	b.n	800dbf2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dbd0:	4b0f      	ldr	r3, [pc, #60]	; (800dc10 <prvAddCurrentTaskToDelayedList+0xc4>)
 800dbd2:	681a      	ldr	r2, [r3, #0]
 800dbd4:	4b0a      	ldr	r3, [pc, #40]	; (800dc00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	3304      	adds	r3, #4
 800dbda:	4619      	mov	r1, r3
 800dbdc:	4610      	mov	r0, r2
 800dbde:	f7fe f83c 	bl	800bc5a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dbe2:	4b0c      	ldr	r3, [pc, #48]	; (800dc14 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	68ba      	ldr	r2, [r7, #8]
 800dbe8:	429a      	cmp	r2, r3
 800dbea:	d202      	bcs.n	800dbf2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800dbec:	4a09      	ldr	r2, [pc, #36]	; (800dc14 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dbee:	68bb      	ldr	r3, [r7, #8]
 800dbf0:	6013      	str	r3, [r2, #0]
}
 800dbf2:	bf00      	nop
 800dbf4:	3710      	adds	r7, #16
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	bd80      	pop	{r7, pc}
 800dbfa:	bf00      	nop
 800dbfc:	200004a0 	.word	0x200004a0
 800dc00:	2000039c 	.word	0x2000039c
 800dc04:	200004a4 	.word	0x200004a4
 800dc08:	20000488 	.word	0x20000488
 800dc0c:	20000458 	.word	0x20000458
 800dc10:	20000454 	.word	0x20000454
 800dc14:	200004bc 	.word	0x200004bc

0800dc18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dc18:	b480      	push	{r7}
 800dc1a:	b085      	sub	sp, #20
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	60f8      	str	r0, [r7, #12]
 800dc20:	60b9      	str	r1, [r7, #8]
 800dc22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	3b04      	subs	r3, #4
 800dc28:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800dc30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	3b04      	subs	r3, #4
 800dc36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dc38:	68bb      	ldr	r3, [r7, #8]
 800dc3a:	f023 0201 	bic.w	r2, r3, #1
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	3b04      	subs	r3, #4
 800dc46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dc48:	4a0c      	ldr	r2, [pc, #48]	; (800dc7c <pxPortInitialiseStack+0x64>)
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	3b14      	subs	r3, #20
 800dc52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dc54:	687a      	ldr	r2, [r7, #4]
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	3b04      	subs	r3, #4
 800dc5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	f06f 0202 	mvn.w	r2, #2
 800dc66:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	3b20      	subs	r3, #32
 800dc6c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dc6e:	68fb      	ldr	r3, [r7, #12]
}
 800dc70:	4618      	mov	r0, r3
 800dc72:	3714      	adds	r7, #20
 800dc74:	46bd      	mov	sp, r7
 800dc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7a:	4770      	bx	lr
 800dc7c:	0800dc81 	.word	0x0800dc81

0800dc80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dc80:	b480      	push	{r7}
 800dc82:	b085      	sub	sp, #20
 800dc84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dc86:	2300      	movs	r3, #0
 800dc88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dc8a:	4b13      	ldr	r3, [pc, #76]	; (800dcd8 <prvTaskExitError+0x58>)
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc92:	d00b      	beq.n	800dcac <prvTaskExitError+0x2c>
 800dc94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc98:	b672      	cpsid	i
 800dc9a:	f383 8811 	msr	BASEPRI, r3
 800dc9e:	f3bf 8f6f 	isb	sy
 800dca2:	f3bf 8f4f 	dsb	sy
 800dca6:	b662      	cpsie	i
 800dca8:	60fb      	str	r3, [r7, #12]
 800dcaa:	e7fe      	b.n	800dcaa <prvTaskExitError+0x2a>
 800dcac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcb0:	b672      	cpsid	i
 800dcb2:	f383 8811 	msr	BASEPRI, r3
 800dcb6:	f3bf 8f6f 	isb	sy
 800dcba:	f3bf 8f4f 	dsb	sy
 800dcbe:	b662      	cpsie	i
 800dcc0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dcc2:	bf00      	nop
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d0fc      	beq.n	800dcc4 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800dcca:	bf00      	nop
 800dccc:	3714      	adds	r7, #20
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd4:	4770      	bx	lr
 800dcd6:	bf00      	nop
 800dcd8:	20000024 	.word	0x20000024
 800dcdc:	00000000 	.word	0x00000000

0800dce0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dce0:	4b07      	ldr	r3, [pc, #28]	; (800dd00 <pxCurrentTCBConst2>)
 800dce2:	6819      	ldr	r1, [r3, #0]
 800dce4:	6808      	ldr	r0, [r1, #0]
 800dce6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcea:	f380 8809 	msr	PSP, r0
 800dcee:	f3bf 8f6f 	isb	sy
 800dcf2:	f04f 0000 	mov.w	r0, #0
 800dcf6:	f380 8811 	msr	BASEPRI, r0
 800dcfa:	4770      	bx	lr
 800dcfc:	f3af 8000 	nop.w

0800dd00 <pxCurrentTCBConst2>:
 800dd00:	2000039c 	.word	0x2000039c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dd04:	bf00      	nop
 800dd06:	bf00      	nop

0800dd08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dd08:	4808      	ldr	r0, [pc, #32]	; (800dd2c <prvPortStartFirstTask+0x24>)
 800dd0a:	6800      	ldr	r0, [r0, #0]
 800dd0c:	6800      	ldr	r0, [r0, #0]
 800dd0e:	f380 8808 	msr	MSP, r0
 800dd12:	f04f 0000 	mov.w	r0, #0
 800dd16:	f380 8814 	msr	CONTROL, r0
 800dd1a:	b662      	cpsie	i
 800dd1c:	b661      	cpsie	f
 800dd1e:	f3bf 8f4f 	dsb	sy
 800dd22:	f3bf 8f6f 	isb	sy
 800dd26:	df00      	svc	0
 800dd28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800dd2a:	bf00      	nop
 800dd2c:	e000ed08 	.word	0xe000ed08

0800dd30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b084      	sub	sp, #16
 800dd34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800dd36:	4b36      	ldr	r3, [pc, #216]	; (800de10 <xPortStartScheduler+0xe0>)
 800dd38:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	781b      	ldrb	r3, [r3, #0]
 800dd3e:	b2db      	uxtb	r3, r3
 800dd40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	22ff      	movs	r2, #255	; 0xff
 800dd46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	781b      	ldrb	r3, [r3, #0]
 800dd4c:	b2db      	uxtb	r3, r3
 800dd4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800dd50:	78fb      	ldrb	r3, [r7, #3]
 800dd52:	b2db      	uxtb	r3, r3
 800dd54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800dd58:	b2da      	uxtb	r2, r3
 800dd5a:	4b2e      	ldr	r3, [pc, #184]	; (800de14 <xPortStartScheduler+0xe4>)
 800dd5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800dd5e:	4b2e      	ldr	r3, [pc, #184]	; (800de18 <xPortStartScheduler+0xe8>)
 800dd60:	2207      	movs	r2, #7
 800dd62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dd64:	e009      	b.n	800dd7a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800dd66:	4b2c      	ldr	r3, [pc, #176]	; (800de18 <xPortStartScheduler+0xe8>)
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	3b01      	subs	r3, #1
 800dd6c:	4a2a      	ldr	r2, [pc, #168]	; (800de18 <xPortStartScheduler+0xe8>)
 800dd6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800dd70:	78fb      	ldrb	r3, [r7, #3]
 800dd72:	b2db      	uxtb	r3, r3
 800dd74:	005b      	lsls	r3, r3, #1
 800dd76:	b2db      	uxtb	r3, r3
 800dd78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dd7a:	78fb      	ldrb	r3, [r7, #3]
 800dd7c:	b2db      	uxtb	r3, r3
 800dd7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd82:	2b80      	cmp	r3, #128	; 0x80
 800dd84:	d0ef      	beq.n	800dd66 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800dd86:	4b24      	ldr	r3, [pc, #144]	; (800de18 <xPortStartScheduler+0xe8>)
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	f1c3 0307 	rsb	r3, r3, #7
 800dd8e:	2b04      	cmp	r3, #4
 800dd90:	d00b      	beq.n	800ddaa <xPortStartScheduler+0x7a>
 800dd92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd96:	b672      	cpsid	i
 800dd98:	f383 8811 	msr	BASEPRI, r3
 800dd9c:	f3bf 8f6f 	isb	sy
 800dda0:	f3bf 8f4f 	dsb	sy
 800dda4:	b662      	cpsie	i
 800dda6:	60bb      	str	r3, [r7, #8]
 800dda8:	e7fe      	b.n	800dda8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ddaa:	4b1b      	ldr	r3, [pc, #108]	; (800de18 <xPortStartScheduler+0xe8>)
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	021b      	lsls	r3, r3, #8
 800ddb0:	4a19      	ldr	r2, [pc, #100]	; (800de18 <xPortStartScheduler+0xe8>)
 800ddb2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ddb4:	4b18      	ldr	r3, [pc, #96]	; (800de18 <xPortStartScheduler+0xe8>)
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ddbc:	4a16      	ldr	r2, [pc, #88]	; (800de18 <xPortStartScheduler+0xe8>)
 800ddbe:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	b2da      	uxtb	r2, r3
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ddc8:	4b14      	ldr	r3, [pc, #80]	; (800de1c <xPortStartScheduler+0xec>)
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	4a13      	ldr	r2, [pc, #76]	; (800de1c <xPortStartScheduler+0xec>)
 800ddce:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ddd2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ddd4:	4b11      	ldr	r3, [pc, #68]	; (800de1c <xPortStartScheduler+0xec>)
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	4a10      	ldr	r2, [pc, #64]	; (800de1c <xPortStartScheduler+0xec>)
 800ddda:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ddde:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800dde0:	f000 f8d4 	bl	800df8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800dde4:	4b0e      	ldr	r3, [pc, #56]	; (800de20 <xPortStartScheduler+0xf0>)
 800dde6:	2200      	movs	r2, #0
 800dde8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ddea:	f000 f8f3 	bl	800dfd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ddee:	4b0d      	ldr	r3, [pc, #52]	; (800de24 <xPortStartScheduler+0xf4>)
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	4a0c      	ldr	r2, [pc, #48]	; (800de24 <xPortStartScheduler+0xf4>)
 800ddf4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ddf8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ddfa:	f7ff ff85 	bl	800dd08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ddfe:	f7ff fa67 	bl	800d2d0 <vTaskSwitchContext>
	prvTaskExitError();
 800de02:	f7ff ff3d 	bl	800dc80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800de06:	2300      	movs	r3, #0
}
 800de08:	4618      	mov	r0, r3
 800de0a:	3710      	adds	r7, #16
 800de0c:	46bd      	mov	sp, r7
 800de0e:	bd80      	pop	{r7, pc}
 800de10:	e000e400 	.word	0xe000e400
 800de14:	200004c8 	.word	0x200004c8
 800de18:	200004cc 	.word	0x200004cc
 800de1c:	e000ed20 	.word	0xe000ed20
 800de20:	20000024 	.word	0x20000024
 800de24:	e000ef34 	.word	0xe000ef34

0800de28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800de28:	b480      	push	{r7}
 800de2a:	b083      	sub	sp, #12
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de32:	b672      	cpsid	i
 800de34:	f383 8811 	msr	BASEPRI, r3
 800de38:	f3bf 8f6f 	isb	sy
 800de3c:	f3bf 8f4f 	dsb	sy
 800de40:	b662      	cpsie	i
 800de42:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800de44:	4b0f      	ldr	r3, [pc, #60]	; (800de84 <vPortEnterCritical+0x5c>)
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	3301      	adds	r3, #1
 800de4a:	4a0e      	ldr	r2, [pc, #56]	; (800de84 <vPortEnterCritical+0x5c>)
 800de4c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800de4e:	4b0d      	ldr	r3, [pc, #52]	; (800de84 <vPortEnterCritical+0x5c>)
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	2b01      	cmp	r3, #1
 800de54:	d110      	bne.n	800de78 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800de56:	4b0c      	ldr	r3, [pc, #48]	; (800de88 <vPortEnterCritical+0x60>)
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	b2db      	uxtb	r3, r3
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d00b      	beq.n	800de78 <vPortEnterCritical+0x50>
 800de60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de64:	b672      	cpsid	i
 800de66:	f383 8811 	msr	BASEPRI, r3
 800de6a:	f3bf 8f6f 	isb	sy
 800de6e:	f3bf 8f4f 	dsb	sy
 800de72:	b662      	cpsie	i
 800de74:	603b      	str	r3, [r7, #0]
 800de76:	e7fe      	b.n	800de76 <vPortEnterCritical+0x4e>
	}
}
 800de78:	bf00      	nop
 800de7a:	370c      	adds	r7, #12
 800de7c:	46bd      	mov	sp, r7
 800de7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de82:	4770      	bx	lr
 800de84:	20000024 	.word	0x20000024
 800de88:	e000ed04 	.word	0xe000ed04

0800de8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800de8c:	b480      	push	{r7}
 800de8e:	b083      	sub	sp, #12
 800de90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800de92:	4b12      	ldr	r3, [pc, #72]	; (800dedc <vPortExitCritical+0x50>)
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d10b      	bne.n	800deb2 <vPortExitCritical+0x26>
 800de9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de9e:	b672      	cpsid	i
 800dea0:	f383 8811 	msr	BASEPRI, r3
 800dea4:	f3bf 8f6f 	isb	sy
 800dea8:	f3bf 8f4f 	dsb	sy
 800deac:	b662      	cpsie	i
 800deae:	607b      	str	r3, [r7, #4]
 800deb0:	e7fe      	b.n	800deb0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800deb2:	4b0a      	ldr	r3, [pc, #40]	; (800dedc <vPortExitCritical+0x50>)
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	3b01      	subs	r3, #1
 800deb8:	4a08      	ldr	r2, [pc, #32]	; (800dedc <vPortExitCritical+0x50>)
 800deba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800debc:	4b07      	ldr	r3, [pc, #28]	; (800dedc <vPortExitCritical+0x50>)
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d104      	bne.n	800dece <vPortExitCritical+0x42>
 800dec4:	2300      	movs	r3, #0
 800dec6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dec8:	683b      	ldr	r3, [r7, #0]
 800deca:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800dece:	bf00      	nop
 800ded0:	370c      	adds	r7, #12
 800ded2:	46bd      	mov	sp, r7
 800ded4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded8:	4770      	bx	lr
 800deda:	bf00      	nop
 800dedc:	20000024 	.word	0x20000024

0800dee0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dee0:	f3ef 8009 	mrs	r0, PSP
 800dee4:	f3bf 8f6f 	isb	sy
 800dee8:	4b15      	ldr	r3, [pc, #84]	; (800df40 <pxCurrentTCBConst>)
 800deea:	681a      	ldr	r2, [r3, #0]
 800deec:	f01e 0f10 	tst.w	lr, #16
 800def0:	bf08      	it	eq
 800def2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800def6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800defa:	6010      	str	r0, [r2, #0]
 800defc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800df00:	f04f 0050 	mov.w	r0, #80	; 0x50
 800df04:	b672      	cpsid	i
 800df06:	f380 8811 	msr	BASEPRI, r0
 800df0a:	f3bf 8f4f 	dsb	sy
 800df0e:	f3bf 8f6f 	isb	sy
 800df12:	b662      	cpsie	i
 800df14:	f7ff f9dc 	bl	800d2d0 <vTaskSwitchContext>
 800df18:	f04f 0000 	mov.w	r0, #0
 800df1c:	f380 8811 	msr	BASEPRI, r0
 800df20:	bc09      	pop	{r0, r3}
 800df22:	6819      	ldr	r1, [r3, #0]
 800df24:	6808      	ldr	r0, [r1, #0]
 800df26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df2a:	f01e 0f10 	tst.w	lr, #16
 800df2e:	bf08      	it	eq
 800df30:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800df34:	f380 8809 	msr	PSP, r0
 800df38:	f3bf 8f6f 	isb	sy
 800df3c:	4770      	bx	lr
 800df3e:	bf00      	nop

0800df40 <pxCurrentTCBConst>:
 800df40:	2000039c 	.word	0x2000039c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800df44:	bf00      	nop
 800df46:	bf00      	nop

0800df48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b082      	sub	sp, #8
 800df4c:	af00      	add	r7, sp, #0
	__asm volatile
 800df4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df52:	b672      	cpsid	i
 800df54:	f383 8811 	msr	BASEPRI, r3
 800df58:	f3bf 8f6f 	isb	sy
 800df5c:	f3bf 8f4f 	dsb	sy
 800df60:	b662      	cpsie	i
 800df62:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800df64:	f7ff f8fa 	bl	800d15c <xTaskIncrementTick>
 800df68:	4603      	mov	r3, r0
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d003      	beq.n	800df76 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800df6e:	4b06      	ldr	r3, [pc, #24]	; (800df88 <SysTick_Handler+0x40>)
 800df70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df74:	601a      	str	r2, [r3, #0]
 800df76:	2300      	movs	r3, #0
 800df78:	603b      	str	r3, [r7, #0]
	__asm volatile
 800df7a:	683b      	ldr	r3, [r7, #0]
 800df7c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800df80:	bf00      	nop
 800df82:	3708      	adds	r7, #8
 800df84:	46bd      	mov	sp, r7
 800df86:	bd80      	pop	{r7, pc}
 800df88:	e000ed04 	.word	0xe000ed04

0800df8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800df8c:	b480      	push	{r7}
 800df8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800df90:	4b0b      	ldr	r3, [pc, #44]	; (800dfc0 <vPortSetupTimerInterrupt+0x34>)
 800df92:	2200      	movs	r2, #0
 800df94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800df96:	4b0b      	ldr	r3, [pc, #44]	; (800dfc4 <vPortSetupTimerInterrupt+0x38>)
 800df98:	2200      	movs	r2, #0
 800df9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800df9c:	4b0a      	ldr	r3, [pc, #40]	; (800dfc8 <vPortSetupTimerInterrupt+0x3c>)
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	4a0a      	ldr	r2, [pc, #40]	; (800dfcc <vPortSetupTimerInterrupt+0x40>)
 800dfa2:	fba2 2303 	umull	r2, r3, r2, r3
 800dfa6:	099b      	lsrs	r3, r3, #6
 800dfa8:	4a09      	ldr	r2, [pc, #36]	; (800dfd0 <vPortSetupTimerInterrupt+0x44>)
 800dfaa:	3b01      	subs	r3, #1
 800dfac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800dfae:	4b04      	ldr	r3, [pc, #16]	; (800dfc0 <vPortSetupTimerInterrupt+0x34>)
 800dfb0:	2207      	movs	r2, #7
 800dfb2:	601a      	str	r2, [r3, #0]
}
 800dfb4:	bf00      	nop
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfbc:	4770      	bx	lr
 800dfbe:	bf00      	nop
 800dfc0:	e000e010 	.word	0xe000e010
 800dfc4:	e000e018 	.word	0xe000e018
 800dfc8:	20000018 	.word	0x20000018
 800dfcc:	10624dd3 	.word	0x10624dd3
 800dfd0:	e000e014 	.word	0xe000e014

0800dfd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800dfd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800dfe4 <vPortEnableVFP+0x10>
 800dfd8:	6801      	ldr	r1, [r0, #0]
 800dfda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800dfde:	6001      	str	r1, [r0, #0]
 800dfe0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800dfe2:	bf00      	nop
 800dfe4:	e000ed88 	.word	0xe000ed88

0800dfe8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800dfe8:	b480      	push	{r7}
 800dfea:	b085      	sub	sp, #20
 800dfec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800dfee:	f3ef 8305 	mrs	r3, IPSR
 800dff2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	2b0f      	cmp	r3, #15
 800dff8:	d915      	bls.n	800e026 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800dffa:	4a18      	ldr	r2, [pc, #96]	; (800e05c <vPortValidateInterruptPriority+0x74>)
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	4413      	add	r3, r2
 800e000:	781b      	ldrb	r3, [r3, #0]
 800e002:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e004:	4b16      	ldr	r3, [pc, #88]	; (800e060 <vPortValidateInterruptPriority+0x78>)
 800e006:	781b      	ldrb	r3, [r3, #0]
 800e008:	7afa      	ldrb	r2, [r7, #11]
 800e00a:	429a      	cmp	r2, r3
 800e00c:	d20b      	bcs.n	800e026 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e012:	b672      	cpsid	i
 800e014:	f383 8811 	msr	BASEPRI, r3
 800e018:	f3bf 8f6f 	isb	sy
 800e01c:	f3bf 8f4f 	dsb	sy
 800e020:	b662      	cpsie	i
 800e022:	607b      	str	r3, [r7, #4]
 800e024:	e7fe      	b.n	800e024 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e026:	4b0f      	ldr	r3, [pc, #60]	; (800e064 <vPortValidateInterruptPriority+0x7c>)
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e02e:	4b0e      	ldr	r3, [pc, #56]	; (800e068 <vPortValidateInterruptPriority+0x80>)
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	429a      	cmp	r2, r3
 800e034:	d90b      	bls.n	800e04e <vPortValidateInterruptPriority+0x66>
 800e036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e03a:	b672      	cpsid	i
 800e03c:	f383 8811 	msr	BASEPRI, r3
 800e040:	f3bf 8f6f 	isb	sy
 800e044:	f3bf 8f4f 	dsb	sy
 800e048:	b662      	cpsie	i
 800e04a:	603b      	str	r3, [r7, #0]
 800e04c:	e7fe      	b.n	800e04c <vPortValidateInterruptPriority+0x64>
	}
 800e04e:	bf00      	nop
 800e050:	3714      	adds	r7, #20
 800e052:	46bd      	mov	sp, r7
 800e054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e058:	4770      	bx	lr
 800e05a:	bf00      	nop
 800e05c:	e000e3f0 	.word	0xe000e3f0
 800e060:	200004c8 	.word	0x200004c8
 800e064:	e000ed0c 	.word	0xe000ed0c
 800e068:	200004cc 	.word	0x200004cc

0800e06c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b08a      	sub	sp, #40	; 0x28
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e074:	2300      	movs	r3, #0
 800e076:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e078:	f7fe ffa2 	bl	800cfc0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e07c:	4b5c      	ldr	r3, [pc, #368]	; (800e1f0 <pvPortMalloc+0x184>)
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d101      	bne.n	800e088 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e084:	f000 f91a 	bl	800e2bc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e088:	4b5a      	ldr	r3, [pc, #360]	; (800e1f4 <pvPortMalloc+0x188>)
 800e08a:	681a      	ldr	r2, [r3, #0]
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	4013      	ands	r3, r2
 800e090:	2b00      	cmp	r3, #0
 800e092:	f040 8090 	bne.w	800e1b6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d01e      	beq.n	800e0da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e09c:	2208      	movs	r2, #8
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	4413      	add	r3, r2
 800e0a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	f003 0307 	and.w	r3, r3, #7
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d015      	beq.n	800e0da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	f023 0307 	bic.w	r3, r3, #7
 800e0b4:	3308      	adds	r3, #8
 800e0b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	f003 0307 	and.w	r3, r3, #7
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d00b      	beq.n	800e0da <pvPortMalloc+0x6e>
 800e0c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0c6:	b672      	cpsid	i
 800e0c8:	f383 8811 	msr	BASEPRI, r3
 800e0cc:	f3bf 8f6f 	isb	sy
 800e0d0:	f3bf 8f4f 	dsb	sy
 800e0d4:	b662      	cpsie	i
 800e0d6:	617b      	str	r3, [r7, #20]
 800e0d8:	e7fe      	b.n	800e0d8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d06a      	beq.n	800e1b6 <pvPortMalloc+0x14a>
 800e0e0:	4b45      	ldr	r3, [pc, #276]	; (800e1f8 <pvPortMalloc+0x18c>)
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	687a      	ldr	r2, [r7, #4]
 800e0e6:	429a      	cmp	r2, r3
 800e0e8:	d865      	bhi.n	800e1b6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e0ea:	4b44      	ldr	r3, [pc, #272]	; (800e1fc <pvPortMalloc+0x190>)
 800e0ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e0ee:	4b43      	ldr	r3, [pc, #268]	; (800e1fc <pvPortMalloc+0x190>)
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e0f4:	e004      	b.n	800e100 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e102:	685b      	ldr	r3, [r3, #4]
 800e104:	687a      	ldr	r2, [r7, #4]
 800e106:	429a      	cmp	r2, r3
 800e108:	d903      	bls.n	800e112 <pvPortMalloc+0xa6>
 800e10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d1f1      	bne.n	800e0f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e112:	4b37      	ldr	r3, [pc, #220]	; (800e1f0 <pvPortMalloc+0x184>)
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e118:	429a      	cmp	r2, r3
 800e11a:	d04c      	beq.n	800e1b6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e11c:	6a3b      	ldr	r3, [r7, #32]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	2208      	movs	r2, #8
 800e122:	4413      	add	r3, r2
 800e124:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e128:	681a      	ldr	r2, [r3, #0]
 800e12a:	6a3b      	ldr	r3, [r7, #32]
 800e12c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e12e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e130:	685a      	ldr	r2, [r3, #4]
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	1ad2      	subs	r2, r2, r3
 800e136:	2308      	movs	r3, #8
 800e138:	005b      	lsls	r3, r3, #1
 800e13a:	429a      	cmp	r2, r3
 800e13c:	d920      	bls.n	800e180 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e13e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	4413      	add	r3, r2
 800e144:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e146:	69bb      	ldr	r3, [r7, #24]
 800e148:	f003 0307 	and.w	r3, r3, #7
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d00b      	beq.n	800e168 <pvPortMalloc+0xfc>
 800e150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e154:	b672      	cpsid	i
 800e156:	f383 8811 	msr	BASEPRI, r3
 800e15a:	f3bf 8f6f 	isb	sy
 800e15e:	f3bf 8f4f 	dsb	sy
 800e162:	b662      	cpsie	i
 800e164:	613b      	str	r3, [r7, #16]
 800e166:	e7fe      	b.n	800e166 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e16a:	685a      	ldr	r2, [r3, #4]
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	1ad2      	subs	r2, r2, r3
 800e170:	69bb      	ldr	r3, [r7, #24]
 800e172:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e176:	687a      	ldr	r2, [r7, #4]
 800e178:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e17a:	69b8      	ldr	r0, [r7, #24]
 800e17c:	f000 f900 	bl	800e380 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e180:	4b1d      	ldr	r3, [pc, #116]	; (800e1f8 <pvPortMalloc+0x18c>)
 800e182:	681a      	ldr	r2, [r3, #0]
 800e184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e186:	685b      	ldr	r3, [r3, #4]
 800e188:	1ad3      	subs	r3, r2, r3
 800e18a:	4a1b      	ldr	r2, [pc, #108]	; (800e1f8 <pvPortMalloc+0x18c>)
 800e18c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e18e:	4b1a      	ldr	r3, [pc, #104]	; (800e1f8 <pvPortMalloc+0x18c>)
 800e190:	681a      	ldr	r2, [r3, #0]
 800e192:	4b1b      	ldr	r3, [pc, #108]	; (800e200 <pvPortMalloc+0x194>)
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	429a      	cmp	r2, r3
 800e198:	d203      	bcs.n	800e1a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e19a:	4b17      	ldr	r3, [pc, #92]	; (800e1f8 <pvPortMalloc+0x18c>)
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	4a18      	ldr	r2, [pc, #96]	; (800e200 <pvPortMalloc+0x194>)
 800e1a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1a4:	685a      	ldr	r2, [r3, #4]
 800e1a6:	4b13      	ldr	r3, [pc, #76]	; (800e1f4 <pvPortMalloc+0x188>)
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	431a      	orrs	r2, r3
 800e1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e1b6:	f7fe ff11 	bl	800cfdc <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800e1ba:	69fb      	ldr	r3, [r7, #28]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d101      	bne.n	800e1c4 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800e1c0:	f7f2 fa08 	bl	80005d4 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e1c4:	69fb      	ldr	r3, [r7, #28]
 800e1c6:	f003 0307 	and.w	r3, r3, #7
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d00b      	beq.n	800e1e6 <pvPortMalloc+0x17a>
 800e1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1d2:	b672      	cpsid	i
 800e1d4:	f383 8811 	msr	BASEPRI, r3
 800e1d8:	f3bf 8f6f 	isb	sy
 800e1dc:	f3bf 8f4f 	dsb	sy
 800e1e0:	b662      	cpsie	i
 800e1e2:	60fb      	str	r3, [r7, #12]
 800e1e4:	e7fe      	b.n	800e1e4 <pvPortMalloc+0x178>
	return pvReturn;
 800e1e6:	69fb      	ldr	r3, [r7, #28]
}
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	3728      	adds	r7, #40	; 0x28
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	bd80      	pop	{r7, pc}
 800e1f0:	200084d8 	.word	0x200084d8
 800e1f4:	200084e4 	.word	0x200084e4
 800e1f8:	200084dc 	.word	0x200084dc
 800e1fc:	200084d0 	.word	0x200084d0
 800e200:	200084e0 	.word	0x200084e0

0800e204 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e204:	b580      	push	{r7, lr}
 800e206:	b086      	sub	sp, #24
 800e208:	af00      	add	r7, sp, #0
 800e20a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	2b00      	cmp	r3, #0
 800e214:	d04a      	beq.n	800e2ac <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e216:	2308      	movs	r3, #8
 800e218:	425b      	negs	r3, r3
 800e21a:	697a      	ldr	r2, [r7, #20]
 800e21c:	4413      	add	r3, r2
 800e21e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e220:	697b      	ldr	r3, [r7, #20]
 800e222:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e224:	693b      	ldr	r3, [r7, #16]
 800e226:	685a      	ldr	r2, [r3, #4]
 800e228:	4b22      	ldr	r3, [pc, #136]	; (800e2b4 <vPortFree+0xb0>)
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	4013      	ands	r3, r2
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d10b      	bne.n	800e24a <vPortFree+0x46>
 800e232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e236:	b672      	cpsid	i
 800e238:	f383 8811 	msr	BASEPRI, r3
 800e23c:	f3bf 8f6f 	isb	sy
 800e240:	f3bf 8f4f 	dsb	sy
 800e244:	b662      	cpsie	i
 800e246:	60fb      	str	r3, [r7, #12]
 800e248:	e7fe      	b.n	800e248 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e24a:	693b      	ldr	r3, [r7, #16]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d00b      	beq.n	800e26a <vPortFree+0x66>
 800e252:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e256:	b672      	cpsid	i
 800e258:	f383 8811 	msr	BASEPRI, r3
 800e25c:	f3bf 8f6f 	isb	sy
 800e260:	f3bf 8f4f 	dsb	sy
 800e264:	b662      	cpsie	i
 800e266:	60bb      	str	r3, [r7, #8]
 800e268:	e7fe      	b.n	800e268 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e26a:	693b      	ldr	r3, [r7, #16]
 800e26c:	685a      	ldr	r2, [r3, #4]
 800e26e:	4b11      	ldr	r3, [pc, #68]	; (800e2b4 <vPortFree+0xb0>)
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	4013      	ands	r3, r2
 800e274:	2b00      	cmp	r3, #0
 800e276:	d019      	beq.n	800e2ac <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e278:	693b      	ldr	r3, [r7, #16]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d115      	bne.n	800e2ac <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e280:	693b      	ldr	r3, [r7, #16]
 800e282:	685a      	ldr	r2, [r3, #4]
 800e284:	4b0b      	ldr	r3, [pc, #44]	; (800e2b4 <vPortFree+0xb0>)
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	43db      	mvns	r3, r3
 800e28a:	401a      	ands	r2, r3
 800e28c:	693b      	ldr	r3, [r7, #16]
 800e28e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e290:	f7fe fe96 	bl	800cfc0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e294:	693b      	ldr	r3, [r7, #16]
 800e296:	685a      	ldr	r2, [r3, #4]
 800e298:	4b07      	ldr	r3, [pc, #28]	; (800e2b8 <vPortFree+0xb4>)
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	4413      	add	r3, r2
 800e29e:	4a06      	ldr	r2, [pc, #24]	; (800e2b8 <vPortFree+0xb4>)
 800e2a0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e2a2:	6938      	ldr	r0, [r7, #16]
 800e2a4:	f000 f86c 	bl	800e380 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800e2a8:	f7fe fe98 	bl	800cfdc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e2ac:	bf00      	nop
 800e2ae:	3718      	adds	r7, #24
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	bd80      	pop	{r7, pc}
 800e2b4:	200084e4 	.word	0x200084e4
 800e2b8:	200084dc 	.word	0x200084dc

0800e2bc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e2bc:	b480      	push	{r7}
 800e2be:	b085      	sub	sp, #20
 800e2c0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e2c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e2c6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e2c8:	4b27      	ldr	r3, [pc, #156]	; (800e368 <prvHeapInit+0xac>)
 800e2ca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	f003 0307 	and.w	r3, r3, #7
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d00c      	beq.n	800e2f0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	3307      	adds	r3, #7
 800e2da:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	f023 0307 	bic.w	r3, r3, #7
 800e2e2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e2e4:	68ba      	ldr	r2, [r7, #8]
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	1ad3      	subs	r3, r2, r3
 800e2ea:	4a1f      	ldr	r2, [pc, #124]	; (800e368 <prvHeapInit+0xac>)
 800e2ec:	4413      	add	r3, r2
 800e2ee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e2f4:	4a1d      	ldr	r2, [pc, #116]	; (800e36c <prvHeapInit+0xb0>)
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e2fa:	4b1c      	ldr	r3, [pc, #112]	; (800e36c <prvHeapInit+0xb0>)
 800e2fc:	2200      	movs	r2, #0
 800e2fe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	68ba      	ldr	r2, [r7, #8]
 800e304:	4413      	add	r3, r2
 800e306:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e308:	2208      	movs	r2, #8
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	1a9b      	subs	r3, r3, r2
 800e30e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	f023 0307 	bic.w	r3, r3, #7
 800e316:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	4a15      	ldr	r2, [pc, #84]	; (800e370 <prvHeapInit+0xb4>)
 800e31c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e31e:	4b14      	ldr	r3, [pc, #80]	; (800e370 <prvHeapInit+0xb4>)
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	2200      	movs	r2, #0
 800e324:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e326:	4b12      	ldr	r3, [pc, #72]	; (800e370 <prvHeapInit+0xb4>)
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	2200      	movs	r2, #0
 800e32c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e332:	683b      	ldr	r3, [r7, #0]
 800e334:	68fa      	ldr	r2, [r7, #12]
 800e336:	1ad2      	subs	r2, r2, r3
 800e338:	683b      	ldr	r3, [r7, #0]
 800e33a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e33c:	4b0c      	ldr	r3, [pc, #48]	; (800e370 <prvHeapInit+0xb4>)
 800e33e:	681a      	ldr	r2, [r3, #0]
 800e340:	683b      	ldr	r3, [r7, #0]
 800e342:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e344:	683b      	ldr	r3, [r7, #0]
 800e346:	685b      	ldr	r3, [r3, #4]
 800e348:	4a0a      	ldr	r2, [pc, #40]	; (800e374 <prvHeapInit+0xb8>)
 800e34a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e34c:	683b      	ldr	r3, [r7, #0]
 800e34e:	685b      	ldr	r3, [r3, #4]
 800e350:	4a09      	ldr	r2, [pc, #36]	; (800e378 <prvHeapInit+0xbc>)
 800e352:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e354:	4b09      	ldr	r3, [pc, #36]	; (800e37c <prvHeapInit+0xc0>)
 800e356:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e35a:	601a      	str	r2, [r3, #0]
}
 800e35c:	bf00      	nop
 800e35e:	3714      	adds	r7, #20
 800e360:	46bd      	mov	sp, r7
 800e362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e366:	4770      	bx	lr
 800e368:	200004d0 	.word	0x200004d0
 800e36c:	200084d0 	.word	0x200084d0
 800e370:	200084d8 	.word	0x200084d8
 800e374:	200084e0 	.word	0x200084e0
 800e378:	200084dc 	.word	0x200084dc
 800e37c:	200084e4 	.word	0x200084e4

0800e380 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e380:	b480      	push	{r7}
 800e382:	b085      	sub	sp, #20
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e388:	4b28      	ldr	r3, [pc, #160]	; (800e42c <prvInsertBlockIntoFreeList+0xac>)
 800e38a:	60fb      	str	r3, [r7, #12]
 800e38c:	e002      	b.n	800e394 <prvInsertBlockIntoFreeList+0x14>
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	60fb      	str	r3, [r7, #12]
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	687a      	ldr	r2, [r7, #4]
 800e39a:	429a      	cmp	r2, r3
 800e39c:	d8f7      	bhi.n	800e38e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	685b      	ldr	r3, [r3, #4]
 800e3a6:	68ba      	ldr	r2, [r7, #8]
 800e3a8:	4413      	add	r3, r2
 800e3aa:	687a      	ldr	r2, [r7, #4]
 800e3ac:	429a      	cmp	r2, r3
 800e3ae:	d108      	bne.n	800e3c2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	685a      	ldr	r2, [r3, #4]
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	685b      	ldr	r3, [r3, #4]
 800e3b8:	441a      	add	r2, r3
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	685b      	ldr	r3, [r3, #4]
 800e3ca:	68ba      	ldr	r2, [r7, #8]
 800e3cc:	441a      	add	r2, r3
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	429a      	cmp	r2, r3
 800e3d4:	d118      	bne.n	800e408 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	681a      	ldr	r2, [r3, #0]
 800e3da:	4b15      	ldr	r3, [pc, #84]	; (800e430 <prvInsertBlockIntoFreeList+0xb0>)
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	429a      	cmp	r2, r3
 800e3e0:	d00d      	beq.n	800e3fe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	685a      	ldr	r2, [r3, #4]
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	685b      	ldr	r3, [r3, #4]
 800e3ec:	441a      	add	r2, r3
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	681a      	ldr	r2, [r3, #0]
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	601a      	str	r2, [r3, #0]
 800e3fc:	e008      	b.n	800e410 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e3fe:	4b0c      	ldr	r3, [pc, #48]	; (800e430 <prvInsertBlockIntoFreeList+0xb0>)
 800e400:	681a      	ldr	r2, [r3, #0]
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	601a      	str	r2, [r3, #0]
 800e406:	e003      	b.n	800e410 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	681a      	ldr	r2, [r3, #0]
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e410:	68fa      	ldr	r2, [r7, #12]
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	429a      	cmp	r2, r3
 800e416:	d002      	beq.n	800e41e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	687a      	ldr	r2, [r7, #4]
 800e41c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e41e:	bf00      	nop
 800e420:	3714      	adds	r7, #20
 800e422:	46bd      	mov	sp, r7
 800e424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e428:	4770      	bx	lr
 800e42a:	bf00      	nop
 800e42c:	200084d0 	.word	0x200084d0
 800e430:	200084d8 	.word	0x200084d8

0800e434 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800e434:	b580      	push	{r7, lr}
 800e436:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 800e438:	f005 f872 	bl	8013520 <touchgfx_init>
}
 800e43c:	bf00      	nop
 800e43e:	bd80      	pop	{r7, pc}

0800e440 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 800e440:	b580      	push	{r7, lr}
 800e442:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
 800e444:	f005 f896 	bl	8013574 <touchgfx_taskEntry>
}
 800e448:	bf00      	nop
 800e44a:	bd80      	pop	{r7, pc}

0800e44c <_ZN8touchgfx12FontProviderD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~FontProvider()
 800e44c:	b480      	push	{r7}
 800e44e:	b083      	sub	sp, #12
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
    {
 800e454:	4a04      	ldr	r2, [pc, #16]	; (800e468 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	601a      	str	r2, [r3, #0]
    }
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	4618      	mov	r0, r3
 800e45e:	370c      	adds	r7, #12
 800e460:	46bd      	mov	sp, r7
 800e462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e466:	4770      	bx	lr
 800e468:	08024b60 	.word	0x08024b60

0800e46c <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b082      	sub	sp, #8
 800e470:	af00      	add	r7, sp, #0
 800e472:	6078      	str	r0, [r7, #4]
    }
 800e474:	6878      	ldr	r0, [r7, #4]
 800e476:	f7ff ffe9 	bl	800e44c <_ZN8touchgfx12FontProviderD1Ev>
 800e47a:	2104      	movs	r1, #4
 800e47c:	6878      	ldr	r0, [r7, #4]
 800e47e:	f014 ffb0 	bl	80233e2 <_ZdlPvj>
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	4618      	mov	r0, r3
 800e486:	3708      	adds	r7, #8
 800e488:	46bd      	mov	sp, r7
 800e48a:	bd80      	pop	{r7, pc}

0800e48c <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b082      	sub	sp, #8
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
 800e494:	460b      	mov	r3, r1
 800e496:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800e498:	887b      	ldrh	r3, [r7, #2]
 800e49a:	2b05      	cmp	r3, #5
 800e49c:	d82c      	bhi.n	800e4f8 <_ZN23ApplicationFontProvider7getFontEt+0x6c>
 800e49e:	a201      	add	r2, pc, #4	; (adr r2, 800e4a4 <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 800e4a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4a4:	0800e4bd 	.word	0x0800e4bd
 800e4a8:	0800e4c7 	.word	0x0800e4c7
 800e4ac:	0800e4d1 	.word	0x0800e4d1
 800e4b0:	0800e4db 	.word	0x0800e4db
 800e4b4:	0800e4e5 	.word	0x0800e4e5
 800e4b8:	0800e4ef 	.word	0x0800e4ef
    {
    case Typography::DEFAULT:
        // Asap_Regular_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800e4bc:	f003 fae2 	bl	8011a84 <_ZN17TypedTextDatabase8getFontsEv>
 800e4c0:	4603      	mov	r3, r0
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	e019      	b.n	800e4fa <_ZN23ApplicationFontProvider7getFontEt+0x6e>
    case Typography::RPMTEXT:
        // Asap_Bold_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800e4c6:	f003 fadd 	bl	8011a84 <_ZN17TypedTextDatabase8getFontsEv>
 800e4ca:	4603      	mov	r3, r0
 800e4cc:	685b      	ldr	r3, [r3, #4]
 800e4ce:	e014      	b.n	800e4fa <_ZN23ApplicationFontProvider7getFontEt+0x6e>
    case Typography::VALUES:
        // Asap_Bold_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800e4d0:	f003 fad8 	bl	8011a84 <_ZN17TypedTextDatabase8getFontsEv>
 800e4d4:	4603      	mov	r3, r0
 800e4d6:	689b      	ldr	r3, [r3, #8]
 800e4d8:	e00f      	b.n	800e4fa <_ZN23ApplicationFontProvider7getFontEt+0x6e>
    case Typography::LAMBDA:
        // Asap_Bold_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800e4da:	f003 fad3 	bl	8011a84 <_ZN17TypedTextDatabase8getFontsEv>
 800e4de:	4603      	mov	r3, r0
 800e4e0:	689b      	ldr	r3, [r3, #8]
 800e4e2:	e00a      	b.n	800e4fa <_ZN23ApplicationFontProvider7getFontEt+0x6e>
    case Typography::SMALL:
        // Asap_Bold_12_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 800e4e4:	f003 face 	bl	8011a84 <_ZN17TypedTextDatabase8getFontsEv>
 800e4e8:	4603      	mov	r3, r0
 800e4ea:	68db      	ldr	r3, [r3, #12]
 800e4ec:	e005      	b.n	800e4fa <_ZN23ApplicationFontProvider7getFontEt+0x6e>
    case Typography::LARGE:
        // Asap_Bold_60_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 800e4ee:	f003 fac9 	bl	8011a84 <_ZN17TypedTextDatabase8getFontsEv>
 800e4f2:	4603      	mov	r3, r0
 800e4f4:	691b      	ldr	r3, [r3, #16]
 800e4f6:	e000      	b.n	800e4fa <_ZN23ApplicationFontProvider7getFontEt+0x6e>
    default:
        return 0;
 800e4f8:	2300      	movs	r3, #0
    }
}
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	3708      	adds	r7, #8
 800e4fe:	46bd      	mov	sp, r7
 800e500:	bd80      	pop	{r7, pc}
 800e502:	bf00      	nop

0800e504 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId SMALL = 3;   // Asap_Bold_12_4bpp
    static const touchgfx::FontId LARGE = 4;   // Asap_Bold_60_4bpp
    static const uint16_t NUMBER_OF_FONTS = 5;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800e504:	b580      	push	{r7, lr}
 800e506:	b082      	sub	sp, #8
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
 800e50c:	4a05      	ldr	r2, [pc, #20]	; (800e524 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	601a      	str	r2, [r3, #0]
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	4618      	mov	r0, r3
 800e516:	f7ff ff99 	bl	800e44c <_ZN8touchgfx12FontProviderD1Ev>
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	4618      	mov	r0, r3
 800e51e:	3708      	adds	r7, #8
 800e520:	46bd      	mov	sp, r7
 800e522:	bd80      	pop	{r7, pc}
 800e524:	08024b4c 	.word	0x08024b4c

0800e528 <_ZN23ApplicationFontProviderD0Ev>:
 800e528:	b580      	push	{r7, lr}
 800e52a:	b082      	sub	sp, #8
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
 800e530:	6878      	ldr	r0, [r7, #4]
 800e532:	f7ff ffe7 	bl	800e504 <_ZN23ApplicationFontProviderD1Ev>
 800e536:	2104      	movs	r1, #4
 800e538:	6878      	ldr	r0, [r7, #4]
 800e53a:	f014 ff52 	bl	80233e2 <_ZdlPvj>
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	4618      	mov	r0, r3
 800e542:	3708      	adds	r7, #8
 800e544:	46bd      	mov	sp, r7
 800e546:	bd80      	pop	{r7, pc}

0800e548 <_ZN8touchgfx4FontD1Ev>:
 *        It provides utility functions such as obtaining string width and font height.
 */
class Font
{
public:
    virtual ~Font() { }
 800e548:	b480      	push	{r7}
 800e54a:	b083      	sub	sp, #12
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	6078      	str	r0, [r7, #4]
 800e550:	4a04      	ldr	r2, [pc, #16]	; (800e564 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	601a      	str	r2, [r3, #0]
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	4618      	mov	r0, r3
 800e55a:	370c      	adds	r7, #12
 800e55c:	46bd      	mov	sp, r7
 800e55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e562:	4770      	bx	lr
 800e564:	08026c1c 	.word	0x08026c1c

0800e568 <_ZN8touchgfx4FontD0Ev>:
 800e568:	b580      	push	{r7, lr}
 800e56a:	b082      	sub	sp, #8
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
 800e570:	6878      	ldr	r0, [r7, #4]
 800e572:	f7ff ffe9 	bl	800e548 <_ZN8touchgfx4FontD1Ev>
 800e576:	2110      	movs	r1, #16
 800e578:	6878      	ldr	r0, [r7, #4]
 800e57a:	f014 ff32 	bl	80233e2 <_ZdlPvj>
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	4618      	mov	r0, r3
 800e582:	3708      	adds	r7, #8
 800e584:	46bd      	mov	sp, r7
 800e586:	bd80      	pop	{r7, pc}

0800e588 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getGlyph
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800e588:	b590      	push	{r4, r7, lr}
 800e58a:	b087      	sub	sp, #28
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	6078      	str	r0, [r7, #4]
 800e590:	460b      	mov	r3, r1
 800e592:	807b      	strh	r3, [r7, #2]
    {
        const uint8_t* dummyPixelDataPointer = 0;
 800e594:	2300      	movs	r3, #0
 800e596:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800e598:	2300      	movs	r3, #0
 800e59a:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	3308      	adds	r3, #8
 800e5a2:	681c      	ldr	r4, [r3, #0]
 800e5a4:	f107 030f 	add.w	r3, r7, #15
 800e5a8:	f107 0210 	add.w	r2, r7, #16
 800e5ac:	8879      	ldrh	r1, [r7, #2]
 800e5ae:	6878      	ldr	r0, [r7, #4]
 800e5b0:	47a0      	blx	r4
 800e5b2:	6178      	str	r0, [r7, #20]
        return glyph;
 800e5b4:	697b      	ldr	r3, [r7, #20]
    }
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	371c      	adds	r7, #28
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	bd90      	pop	{r4, r7, pc}

0800e5be <_ZNK8touchgfx4Font15getFallbackCharEv>:
     *        character, use the glyph for the character returned by this function. If 0 (zero)
     *        is returned, there is no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800e5be:	b480      	push	{r7}
 800e5c0:	b083      	sub	sp, #12
 800e5c2:	af00      	add	r7, sp, #0
 800e5c4:	6078      	str	r0, [r7, #4]
    {
        return falllbackCharacter;
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	895b      	ldrh	r3, [r3, #10]
    }
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	370c      	adds	r7, #12
 800e5ce:	46bd      	mov	sp, r7
 800e5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d4:	4770      	bx	lr

0800e5d6 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
    *        Gets ellipsis character for the given font. This is the character which is used
    *        when truncating long lines.
    *
    * @return The ellipsis character for the typography.
    */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800e5d6:	b480      	push	{r7}
 800e5d8:	b083      	sub	sp, #12
 800e5da:	af00      	add	r7, sp, #0
 800e5dc:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	899b      	ldrh	r3, [r3, #12]
    }
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	370c      	adds	r7, #12
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ec:	4770      	bx	lr

0800e5ee <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     *
     * @return The height in pixels of this font.
     */
    virtual uint16_t getFontHeight() const
 800e5ee:	b480      	push	{r7}
 800e5f0:	b083      	sub	sp, #12
 800e5f2:	af00      	add	r7, sp, #0
 800e5f4:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	889b      	ldrh	r3, [r3, #4]
    }
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	370c      	adds	r7, #12
 800e5fe:	46bd      	mov	sp, r7
 800e600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e604:	4770      	bx	lr

0800e606 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *        into account that certain characters (eg 'g') have pixels below the baseline,
     *        thus making the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    virtual uint16_t getMinimumTextHeight() const
 800e606:	b480      	push	{r7}
 800e608:	b083      	sub	sp, #12
 800e60a:	af00      	add	r7, sp, #0
 800e60c:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	889a      	ldrh	r2, [r3, #4]
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	799b      	ldrb	r3, [r3, #6]
 800e616:	b29b      	uxth	r3, r3
 800e618:	4413      	add	r3, r2
 800e61a:	b29b      	uxth	r3, r3
    }
 800e61c:	4618      	mov	r0, r3
 800e61e:	370c      	adds	r7, #12
 800e620:	46bd      	mov	sp, r7
 800e622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e626:	4770      	bx	lr

0800e628 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     *        Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    virtual uint8_t getBitsPerPixel() const
 800e628:	b480      	push	{r7}
 800e62a:	b083      	sub	sp, #12
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	79db      	ldrb	r3, [r3, #7]
 800e634:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800e638:	b2db      	uxtb	r3, r3
    }
 800e63a:	4618      	mov	r0, r3
 800e63c:	370c      	adds	r7, #12
 800e63e:	46bd      	mov	sp, r7
 800e640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e644:	4770      	bx	lr

0800e646 <_ZNK8touchgfx4Font15getDataFormatA4Ev>:
     *
     *        Are the glyphs saved using ST A4 format.
     *
     * @return True if the font is stored using A4 format, false otherwise.
     */
    virtual uint8_t getDataFormatA4() const
 800e646:	b480      	push	{r7}
 800e648:	b083      	sub	sp, #12
 800e64a:	af00      	add	r7, sp, #0
 800e64c:	6078      	str	r0, [r7, #4]
    {
        return a4;
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	79db      	ldrb	r3, [r3, #7]
 800e652:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800e656:	b2db      	uxtb	r3, r3
    }
 800e658:	4618      	mov	r0, r3
 800e65a:	370c      	adds	r7, #12
 800e65c:	46bd      	mov	sp, r7
 800e65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e662:	4770      	bx	lr

0800e664 <_ZN8touchgfx9ConstFontD1Ev>:
 * @note Pure virtual class. Create an application-
 *          specific implementation of getPixelData.
 *
 * @see Font
 */
class ConstFont : public Font
 800e664:	b580      	push	{r7, lr}
 800e666:	b082      	sub	sp, #8
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]
 800e66c:	4a05      	ldr	r2, [pc, #20]	; (800e684 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	601a      	str	r2, [r3, #0]
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	4618      	mov	r0, r3
 800e676:	f7ff ff67 	bl	800e548 <_ZN8touchgfx4FontD1Ev>
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	4618      	mov	r0, r3
 800e67e:	3708      	adds	r7, #8
 800e680:	46bd      	mov	sp, r7
 800e682:	bd80      	pop	{r7, pc}
 800e684:	08026cd4 	.word	0x08026cd4

0800e688 <_ZN8touchgfx9ConstFontD0Ev>:
 800e688:	b580      	push	{r7, lr}
 800e68a:	b082      	sub	sp, #8
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
 800e690:	6878      	ldr	r0, [r7, #4]
 800e692:	f7ff ffe7 	bl	800e664 <_ZN8touchgfx9ConstFontD1Ev>
 800e696:	2118      	movs	r1, #24
 800e698:	6878      	ldr	r0, [r7, #4]
 800e69a:	f014 fea2 	bl	80233e2 <_ZdlPvj>
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	3708      	adds	r7, #8
 800e6a4:	46bd      	mov	sp, r7
 800e6a6:	bd80      	pop	{r7, pc}

0800e6a8 <_ZN8touchgfx13GeneratedFontD1Ev>:
 *        An GeneratedFont has both glyph table and glyph data placed in a flash which
 *        supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b082      	sub	sp, #8
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
 800e6b0:	4a05      	ldr	r2, [pc, #20]	; (800e6c8 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	601a      	str	r2, [r3, #0]
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	f7ff ffd3 	bl	800e664 <_ZN8touchgfx9ConstFontD1Ev>
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	3708      	adds	r7, #8
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	bd80      	pop	{r7, pc}
 800e6c8:	08024ba4 	.word	0x08024ba4

0800e6cc <_ZN8touchgfx13GeneratedFontD0Ev>:
 800e6cc:	b580      	push	{r7, lr}
 800e6ce:	b082      	sub	sp, #8
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	6078      	str	r0, [r7, #4]
 800e6d4:	6878      	ldr	r0, [r7, #4]
 800e6d6:	f7ff ffe7 	bl	800e6a8 <_ZN8touchgfx13GeneratedFontD1Ev>
 800e6da:	2124      	movs	r1, #36	; 0x24
 800e6dc:	6878      	ldr	r0, [r7, #4]
 800e6de:	f014 fe80 	bl	80233e2 <_ZdlPvj>
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	3708      	adds	r7, #8
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	bd80      	pop	{r7, pc}

0800e6ec <_ZNK8touchgfx9TypedText7getFontEv>:
     *
     *        Gets the font associated with this TypedText.
     *
     * @return The font.
     */
    const Font* getFont() const
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b082      	sub	sp, #8
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800e6f4:	6878      	ldr	r0, [r7, #4]
 800e6f6:	f000 f82d 	bl	800e754 <_ZNK8touchgfx9TypedText11assertValidEv>
        return fonts[typedTexts[typedTextId].fontIdx];
 800e6fa:	4b08      	ldr	r3, [pc, #32]	; (800e71c <_ZNK8touchgfx9TypedText7getFontEv+0x30>)
 800e6fc:	681a      	ldr	r2, [r3, #0]
 800e6fe:	4b08      	ldr	r3, [pc, #32]	; (800e720 <_ZNK8touchgfx9TypedText7getFontEv+0x34>)
 800e700:	6819      	ldr	r1, [r3, #0]
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	881b      	ldrh	r3, [r3, #0]
 800e706:	005b      	lsls	r3, r3, #1
 800e708:	440b      	add	r3, r1
 800e70a:	781b      	ldrb	r3, [r3, #0]
 800e70c:	009b      	lsls	r3, r3, #2
 800e70e:	4413      	add	r3, r2
 800e710:	681b      	ldr	r3, [r3, #0]
    }
 800e712:	4618      	mov	r0, r3
 800e714:	3708      	adds	r7, #8
 800e716:	46bd      	mov	sp, r7
 800e718:	bd80      	pop	{r7, pc}
 800e71a:	bf00      	nop
 800e71c:	2000bb70 	.word	0x2000bb70
 800e720:	2000bb68 	.word	0x2000bb68

0800e724 <_ZNK8touchgfx9TypedText16getTextDirectionEv>:
     *
     *        Gets the text direction associated with this TypedText.
     *
     * @return The alignment.
     */
    TextDirection getTextDirection() const
 800e724:	b580      	push	{r7, lr}
 800e726:	b082      	sub	sp, #8
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800e72c:	6878      	ldr	r0, [r7, #4]
 800e72e:	f000 f811 	bl	800e754 <_ZNK8touchgfx9TypedText11assertValidEv>
        return typedTexts[typedTextId].direction;
 800e732:	4b07      	ldr	r3, [pc, #28]	; (800e750 <_ZNK8touchgfx9TypedText16getTextDirectionEv+0x2c>)
 800e734:	681a      	ldr	r2, [r3, #0]
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	881b      	ldrh	r3, [r3, #0]
 800e73a:	005b      	lsls	r3, r3, #1
 800e73c:	4413      	add	r3, r2
 800e73e:	785b      	ldrb	r3, [r3, #1]
 800e740:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800e744:	b2db      	uxtb	r3, r3
    }
 800e746:	4618      	mov	r0, r3
 800e748:	3708      	adds	r7, #8
 800e74a:	46bd      	mov	sp, r7
 800e74c:	bd80      	pop	{r7, pc}
 800e74e:	bf00      	nop
 800e750:	2000bb68 	.word	0x2000bb68

0800e754 <_ZNK8touchgfx9TypedText11assertValidEv>:
    {
        texts = t;
    }

private:
    void assertValid() const
 800e754:	b580      	push	{r7, lr}
 800e756:	b082      	sub	sp, #8
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800e75c:	4b0c      	ldr	r3, [pc, #48]	; (800e790 <_ZNK8touchgfx9TypedText11assertValidEv+0x3c>)
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	2b00      	cmp	r3, #0
 800e762:	d105      	bne.n	800e770 <_ZNK8touchgfx9TypedText11assertValidEv+0x1c>
 800e764:	4b0b      	ldr	r3, [pc, #44]	; (800e794 <_ZNK8touchgfx9TypedText11assertValidEv+0x40>)
 800e766:	4a0c      	ldr	r2, [pc, #48]	; (800e798 <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 800e768:	21de      	movs	r1, #222	; 0xde
 800e76a:	480c      	ldr	r0, [pc, #48]	; (800e79c <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 800e76c:	f014 fe64 	bl	8023438 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	881a      	ldrh	r2, [r3, #0]
 800e774:	4b0a      	ldr	r3, [pc, #40]	; (800e7a0 <_ZNK8touchgfx9TypedText11assertValidEv+0x4c>)
 800e776:	881b      	ldrh	r3, [r3, #0]
 800e778:	429a      	cmp	r2, r3
 800e77a:	d305      	bcc.n	800e788 <_ZNK8touchgfx9TypedText11assertValidEv+0x34>
 800e77c:	4b09      	ldr	r3, [pc, #36]	; (800e7a4 <_ZNK8touchgfx9TypedText11assertValidEv+0x50>)
 800e77e:	4a06      	ldr	r2, [pc, #24]	; (800e798 <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 800e780:	21df      	movs	r1, #223	; 0xdf
 800e782:	4806      	ldr	r0, [pc, #24]	; (800e79c <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 800e784:	f014 fe58 	bl	8023438 <__assert_func>
    }
 800e788:	bf00      	nop
 800e78a:	3708      	adds	r7, #8
 800e78c:	46bd      	mov	sp, r7
 800e78e:	bd80      	pop	{r7, pc}
 800e790:	2000bb68 	.word	0x2000bb68
 800e794:	080244c0 	.word	0x080244c0
 800e798:	08024b6c 	.word	0x08024b6c
 800e79c:	08024504 	.word	0x08024504
 800e7a0:	2000bb6c 	.word	0x2000bb6c
 800e7a4:	08024548 	.word	0x08024548

0800e7a8 <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>:
    uint16_t kerningTablePos() const
 800e7a8:	b480      	push	{r7}
 800e7aa:	b083      	sub	sp, #12
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
        return (((uint16_t)(flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10)) << 8) | (uint16_t)_kerningTablePos;
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	7b5b      	ldrb	r3, [r3, #13]
 800e7b4:	021b      	lsls	r3, r3, #8
 800e7b6:	b21b      	sxth	r3, r3
 800e7b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e7bc:	b21a      	sxth	r2, r3
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	7adb      	ldrb	r3, [r3, #11]
 800e7c2:	b21b      	sxth	r3, r3
 800e7c4:	4313      	orrs	r3, r2
 800e7c6:	b21b      	sxth	r3, r3
 800e7c8:	b29b      	uxth	r3, r3
    }
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	370c      	adds	r7, #12
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d4:	4770      	bx	lr

0800e7d6 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     *
     *        Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 800e7d6:	b480      	push	{r7}
 800e7d8:	b083      	sub	sp, #12
 800e7da:	af00      	add	r7, sp, #0
 800e7dc:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	6a1b      	ldr	r3, [r3, #32]
    }
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	370c      	adds	r7, #12
 800e7e6:	46bd      	mov	sp, r7
 800e7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ec:	4770      	bx	lr
	...

0800e7f0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t dataFormatA4, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b08c      	sub	sp, #48	; 0x30
 800e7f4:	af08      	add	r7, sp, #32
 800e7f6:	60f8      	str	r0, [r7, #12]
 800e7f8:	60b9      	str	r1, [r7, #8]
 800e7fa:	4611      	mov	r1, r2
 800e7fc:	461a      	mov	r2, r3
 800e7fe:	460b      	mov	r3, r1
 800e800:	80fb      	strh	r3, [r7, #6]
 800e802:	4613      	mov	r3, r2
 800e804:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, dataFormatA4, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 800e806:	68f8      	ldr	r0, [r7, #12]
 800e808:	88b9      	ldrh	r1, [r7, #4]
 800e80a:	88fa      	ldrh	r2, [r7, #6]
 800e80c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800e80e:	9306      	str	r3, [sp, #24]
 800e810:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e812:	9305      	str	r3, [sp, #20]
 800e814:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e818:	9304      	str	r3, [sp, #16]
 800e81a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e81e:	9303      	str	r3, [sp, #12]
 800e820:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e824:	9302      	str	r3, [sp, #8]
 800e826:	7f3b      	ldrb	r3, [r7, #28]
 800e828:	9301      	str	r3, [sp, #4]
 800e82a:	7e3b      	ldrb	r3, [r7, #24]
 800e82c:	9300      	str	r3, [sp, #0]
 800e82e:	460b      	mov	r3, r1
 800e830:	68b9      	ldr	r1, [r7, #8]
 800e832:	f009 faf5 	bl	8017e20 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800e836:	4a08      	ldr	r2, [pc, #32]	; (800e858 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	601a      	str	r2, [r3, #0]
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e840:	619a      	str	r2, [r3, #24]
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e846:	61da      	str	r2, [r3, #28]
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e84c:	621a      	str	r2, [r3, #32]
{
}
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	4618      	mov	r0, r3
 800e852:	3710      	adds	r7, #16
 800e854:	46bd      	mov	sp, r7
 800e856:	bd80      	pop	{r7, pc}
 800e858:	08024ba4 	.word	0x08024ba4

0800e85c <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800e85c:	b480      	push	{r7}
 800e85e:	b085      	sub	sp, #20
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
 800e864:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	699b      	ldr	r3, [r3, #24]
 800e86a:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800e86c:	683b      	ldr	r3, [r7, #0]
 800e86e:	889b      	ldrh	r3, [r3, #4]
 800e870:	0adb      	lsrs	r3, r3, #11
 800e872:	b29b      	uxth	r3, r3
 800e874:	009b      	lsls	r3, r3, #2
 800e876:	68fa      	ldr	r2, [r7, #12]
 800e878:	4413      	add	r3, r2
 800e87a:	681a      	ldr	r2, [r3, #0]
 800e87c:	683b      	ldr	r3, [r7, #0]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	4413      	add	r3, r2
}
 800e882:	4618      	mov	r0, r3
 800e884:	3714      	adds	r7, #20
 800e886:	46bd      	mov	sp, r7
 800e888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88c:	4770      	bx	lr

0800e88e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800e88e:	b580      	push	{r7, lr}
 800e890:	b086      	sub	sp, #24
 800e892:	af00      	add	r7, sp, #0
 800e894:	60f8      	str	r0, [r7, #12]
 800e896:	460b      	mov	r3, r1
 800e898:	607a      	str	r2, [r7, #4]
 800e89a:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d003      	beq.n	800e8aa <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	7b1b      	ldrb	r3, [r3, #12]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d101      	bne.n	800e8ae <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	e023      	b.n	800e8f6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    }

    uint16_t kerningTablePos = glyph->kerningTablePos();
 800e8ae:	6878      	ldr	r0, [r7, #4]
 800e8b0:	f7ff ff7a 	bl	800e7a8 <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>
 800e8b4:	4603      	mov	r3, r0
 800e8b6:	82bb      	strh	r3, [r7, #20]
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 800e8b8:	8abb      	ldrh	r3, [r7, #20]
 800e8ba:	82fb      	strh	r3, [r7, #22]
 800e8bc:	8afa      	ldrh	r2, [r7, #22]
 800e8be:	8abb      	ldrh	r3, [r7, #20]
 800e8c0:	6879      	ldr	r1, [r7, #4]
 800e8c2:	7b09      	ldrb	r1, [r1, #12]
 800e8c4:	440b      	add	r3, r1
 800e8c6:	429a      	cmp	r2, r3
 800e8c8:	da14      	bge.n	800e8f4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
    {
        if (prevChar == kerningData[i].unicodePrevChar)
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	69da      	ldr	r2, [r3, #28]
 800e8ce:	8afb      	ldrh	r3, [r7, #22]
 800e8d0:	009b      	lsls	r3, r3, #2
 800e8d2:	4413      	add	r3, r2
 800e8d4:	881b      	ldrh	r3, [r3, #0]
 800e8d6:	897a      	ldrh	r2, [r7, #10]
 800e8d8:	429a      	cmp	r2, r3
 800e8da:	d107      	bne.n	800e8ec <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x5e>
        {
            return kerningData[i].distance;
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	69da      	ldr	r2, [r3, #28]
 800e8e0:	8afb      	ldrh	r3, [r7, #22]
 800e8e2:	009b      	lsls	r3, r3, #2
 800e8e4:	4413      	add	r3, r2
 800e8e6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800e8ea:	e004      	b.n	800e8f6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 800e8ec:	8afb      	ldrh	r3, [r7, #22]
 800e8ee:	3301      	adds	r3, #1
 800e8f0:	82fb      	strh	r3, [r7, #22]
 800e8f2:	e7e3      	b.n	800e8bc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x2e>
        }
    }
    return 0;
 800e8f4:	2300      	movs	r3, #0
}
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	3718      	adds	r7, #24
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	bd80      	pop	{r7, pc}
	...

0800e900 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_12_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_12_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_12_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_12_4bpp(glyphs_Asap_Bold_12_4bpp, 29, 12, 0, 4, 1, 0, 1, unicodes_Asap_Bold_12_4bpp, kerning_Asap_Bold_12_4bpp, 63, 0, 0);
 800e900:	b580      	push	{r7, lr}
 800e902:	af00      	add	r7, sp, #0
 800e904:	4801      	ldr	r0, [pc, #4]	; (800e90c <__tcf_0+0xc>)
 800e906:	f7ff fecf 	bl	800e6a8 <_ZN8touchgfx13GeneratedFontD1Ev>
 800e90a:	bd80      	pop	{r7, pc}
 800e90c:	200084e8 	.word	0x200084e8

0800e910 <_Z25getFont_Asap_Bold_12_4bppv>:
{
 800e910:	b580      	push	{r7, lr}
 800e912:	b08a      	sub	sp, #40	; 0x28
 800e914:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_12_4bpp(glyphs_Asap_Bold_12_4bpp, 29, 12, 0, 4, 1, 0, 1, unicodes_Asap_Bold_12_4bpp, kerning_Asap_Bold_12_4bpp, 63, 0, 0);
 800e916:	4b15      	ldr	r3, [pc, #84]	; (800e96c <_Z25getFont_Asap_Bold_12_4bppv+0x5c>)
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	f003 0301 	and.w	r3, r3, #1
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d11f      	bne.n	800e962 <_Z25getFont_Asap_Bold_12_4bppv+0x52>
 800e922:	2300      	movs	r3, #0
 800e924:	9309      	str	r3, [sp, #36]	; 0x24
 800e926:	2300      	movs	r3, #0
 800e928:	9308      	str	r3, [sp, #32]
 800e92a:	233f      	movs	r3, #63	; 0x3f
 800e92c:	9307      	str	r3, [sp, #28]
 800e92e:	4b10      	ldr	r3, [pc, #64]	; (800e970 <_Z25getFont_Asap_Bold_12_4bppv+0x60>)
 800e930:	9306      	str	r3, [sp, #24]
 800e932:	4b10      	ldr	r3, [pc, #64]	; (800e974 <_Z25getFont_Asap_Bold_12_4bppv+0x64>)
 800e934:	9305      	str	r3, [sp, #20]
 800e936:	2301      	movs	r3, #1
 800e938:	9304      	str	r3, [sp, #16]
 800e93a:	2300      	movs	r3, #0
 800e93c:	9303      	str	r3, [sp, #12]
 800e93e:	2301      	movs	r3, #1
 800e940:	9302      	str	r3, [sp, #8]
 800e942:	2304      	movs	r3, #4
 800e944:	9301      	str	r3, [sp, #4]
 800e946:	2300      	movs	r3, #0
 800e948:	9300      	str	r3, [sp, #0]
 800e94a:	230c      	movs	r3, #12
 800e94c:	221d      	movs	r2, #29
 800e94e:	490a      	ldr	r1, [pc, #40]	; (800e978 <_Z25getFont_Asap_Bold_12_4bppv+0x68>)
 800e950:	480a      	ldr	r0, [pc, #40]	; (800e97c <_Z25getFont_Asap_Bold_12_4bppv+0x6c>)
 800e952:	f7ff ff4d 	bl	800e7f0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800e956:	4b05      	ldr	r3, [pc, #20]	; (800e96c <_Z25getFont_Asap_Bold_12_4bppv+0x5c>)
 800e958:	2201      	movs	r2, #1
 800e95a:	601a      	str	r2, [r3, #0]
 800e95c:	4808      	ldr	r0, [pc, #32]	; (800e980 <_Z25getFont_Asap_Bold_12_4bppv+0x70>)
 800e95e:	f014 fd89 	bl	8023474 <atexit>
    return Asap_Bold_12_4bpp;
 800e962:	4b06      	ldr	r3, [pc, #24]	; (800e97c <_Z25getFont_Asap_Bold_12_4bppv+0x6c>)
}
 800e964:	4618      	mov	r0, r3
 800e966:	46bd      	mov	sp, r7
 800e968:	bd80      	pop	{r7, pc}
 800e96a:	bf00      	nop
 800e96c:	2000850c 	.word	0x2000850c
 800e970:	0802b90c 	.word	0x0802b90c
 800e974:	08024bf0 	.word	0x08024bf0
 800e978:	0802b920 	.word	0x0802b920
 800e97c:	200084e8 	.word	0x200084e8
 800e980:	0800e901 	.word	0x0800e901

0800e984 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_30_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_30_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_30_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_30_4bpp(glyphs_Asap_Bold_30_4bpp, 13, 30, 0, 4, 1, 0, 1, unicodes_Asap_Bold_30_4bpp, kerning_Asap_Bold_30_4bpp, 63, 0, 0);
 800e984:	b580      	push	{r7, lr}
 800e986:	af00      	add	r7, sp, #0
 800e988:	4801      	ldr	r0, [pc, #4]	; (800e990 <__tcf_0+0xc>)
 800e98a:	f7ff fe8d 	bl	800e6a8 <_ZN8touchgfx13GeneratedFontD1Ev>
 800e98e:	bd80      	pop	{r7, pc}
 800e990:	20008510 	.word	0x20008510

0800e994 <_Z25getFont_Asap_Bold_30_4bppv>:
{
 800e994:	b580      	push	{r7, lr}
 800e996:	b08a      	sub	sp, #40	; 0x28
 800e998:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_30_4bpp(glyphs_Asap_Bold_30_4bpp, 13, 30, 0, 4, 1, 0, 1, unicodes_Asap_Bold_30_4bpp, kerning_Asap_Bold_30_4bpp, 63, 0, 0);
 800e99a:	4b15      	ldr	r3, [pc, #84]	; (800e9f0 <_Z25getFont_Asap_Bold_30_4bppv+0x5c>)
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	f003 0301 	and.w	r3, r3, #1
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d11f      	bne.n	800e9e6 <_Z25getFont_Asap_Bold_30_4bppv+0x52>
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	9309      	str	r3, [sp, #36]	; 0x24
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	9308      	str	r3, [sp, #32]
 800e9ae:	233f      	movs	r3, #63	; 0x3f
 800e9b0:	9307      	str	r3, [sp, #28]
 800e9b2:	4b10      	ldr	r3, [pc, #64]	; (800e9f4 <_Z25getFont_Asap_Bold_30_4bppv+0x60>)
 800e9b4:	9306      	str	r3, [sp, #24]
 800e9b6:	4b10      	ldr	r3, [pc, #64]	; (800e9f8 <_Z25getFont_Asap_Bold_30_4bppv+0x64>)
 800e9b8:	9305      	str	r3, [sp, #20]
 800e9ba:	2301      	movs	r3, #1
 800e9bc:	9304      	str	r3, [sp, #16]
 800e9be:	2300      	movs	r3, #0
 800e9c0:	9303      	str	r3, [sp, #12]
 800e9c2:	2301      	movs	r3, #1
 800e9c4:	9302      	str	r3, [sp, #8]
 800e9c6:	2304      	movs	r3, #4
 800e9c8:	9301      	str	r3, [sp, #4]
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	9300      	str	r3, [sp, #0]
 800e9ce:	231e      	movs	r3, #30
 800e9d0:	220d      	movs	r2, #13
 800e9d2:	490a      	ldr	r1, [pc, #40]	; (800e9fc <_Z25getFont_Asap_Bold_30_4bppv+0x68>)
 800e9d4:	480a      	ldr	r0, [pc, #40]	; (800ea00 <_Z25getFont_Asap_Bold_30_4bppv+0x6c>)
 800e9d6:	f7ff ff0b 	bl	800e7f0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800e9da:	4b05      	ldr	r3, [pc, #20]	; (800e9f0 <_Z25getFont_Asap_Bold_30_4bppv+0x5c>)
 800e9dc:	2201      	movs	r2, #1
 800e9de:	601a      	str	r2, [r3, #0]
 800e9e0:	4808      	ldr	r0, [pc, #32]	; (800ea04 <_Z25getFont_Asap_Bold_30_4bppv+0x70>)
 800e9e2:	f014 fd47 	bl	8023474 <atexit>
    return Asap_Bold_30_4bpp;
 800e9e6:	4b06      	ldr	r3, [pc, #24]	; (800ea00 <_Z25getFont_Asap_Bold_30_4bppv+0x6c>)
}
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	bd80      	pop	{r7, pc}
 800e9ee:	bf00      	nop
 800e9f0:	20008534 	.word	0x20008534
 800e9f4:	0802b910 	.word	0x0802b910
 800e9f8:	08024bf4 	.word	0x08024bf4
 800e9fc:	0802bab8 	.word	0x0802bab8
 800ea00:	20008510 	.word	0x20008510
 800ea04:	0800e985 	.word	0x0800e985

0800ea08 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_40_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_40_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_40_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_40_4bpp(glyphs_Asap_Bold_40_4bpp, 12, 40, 0, 4, 1, 0, 1, unicodes_Asap_Bold_40_4bpp, kerning_Asap_Bold_40_4bpp, 63, 0, 0);
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	af00      	add	r7, sp, #0
 800ea0c:	4801      	ldr	r0, [pc, #4]	; (800ea14 <__tcf_0+0xc>)
 800ea0e:	f7ff fe4b 	bl	800e6a8 <_ZN8touchgfx13GeneratedFontD1Ev>
 800ea12:	bd80      	pop	{r7, pc}
 800ea14:	20008538 	.word	0x20008538

0800ea18 <_Z25getFont_Asap_Bold_40_4bppv>:
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b08a      	sub	sp, #40	; 0x28
 800ea1c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_40_4bpp(glyphs_Asap_Bold_40_4bpp, 12, 40, 0, 4, 1, 0, 1, unicodes_Asap_Bold_40_4bpp, kerning_Asap_Bold_40_4bpp, 63, 0, 0);
 800ea1e:	4b15      	ldr	r3, [pc, #84]	; (800ea74 <_Z25getFont_Asap_Bold_40_4bppv+0x5c>)
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	f003 0301 	and.w	r3, r3, #1
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d11f      	bne.n	800ea6a <_Z25getFont_Asap_Bold_40_4bppv+0x52>
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	9309      	str	r3, [sp, #36]	; 0x24
 800ea2e:	2300      	movs	r3, #0
 800ea30:	9308      	str	r3, [sp, #32]
 800ea32:	233f      	movs	r3, #63	; 0x3f
 800ea34:	9307      	str	r3, [sp, #28]
 800ea36:	4b10      	ldr	r3, [pc, #64]	; (800ea78 <_Z25getFont_Asap_Bold_40_4bppv+0x60>)
 800ea38:	9306      	str	r3, [sp, #24]
 800ea3a:	4b10      	ldr	r3, [pc, #64]	; (800ea7c <_Z25getFont_Asap_Bold_40_4bppv+0x64>)
 800ea3c:	9305      	str	r3, [sp, #20]
 800ea3e:	2301      	movs	r3, #1
 800ea40:	9304      	str	r3, [sp, #16]
 800ea42:	2300      	movs	r3, #0
 800ea44:	9303      	str	r3, [sp, #12]
 800ea46:	2301      	movs	r3, #1
 800ea48:	9302      	str	r3, [sp, #8]
 800ea4a:	2304      	movs	r3, #4
 800ea4c:	9301      	str	r3, [sp, #4]
 800ea4e:	2300      	movs	r3, #0
 800ea50:	9300      	str	r3, [sp, #0]
 800ea52:	2328      	movs	r3, #40	; 0x28
 800ea54:	220c      	movs	r2, #12
 800ea56:	490a      	ldr	r1, [pc, #40]	; (800ea80 <_Z25getFont_Asap_Bold_40_4bppv+0x68>)
 800ea58:	480a      	ldr	r0, [pc, #40]	; (800ea84 <_Z25getFont_Asap_Bold_40_4bppv+0x6c>)
 800ea5a:	f7ff fec9 	bl	800e7f0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800ea5e:	4b05      	ldr	r3, [pc, #20]	; (800ea74 <_Z25getFont_Asap_Bold_40_4bppv+0x5c>)
 800ea60:	2201      	movs	r2, #1
 800ea62:	601a      	str	r2, [r3, #0]
 800ea64:	4808      	ldr	r0, [pc, #32]	; (800ea88 <_Z25getFont_Asap_Bold_40_4bppv+0x70>)
 800ea66:	f014 fd05 	bl	8023474 <atexit>
    return Asap_Bold_40_4bpp;
 800ea6a:	4b06      	ldr	r3, [pc, #24]	; (800ea84 <_Z25getFont_Asap_Bold_40_4bppv+0x6c>)
}
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	46bd      	mov	sp, r7
 800ea70:	bd80      	pop	{r7, pc}
 800ea72:	bf00      	nop
 800ea74:	2000855c 	.word	0x2000855c
 800ea78:	0802b914 	.word	0x0802b914
 800ea7c:	08024bf8 	.word	0x08024bf8
 800ea80:	0802bb70 	.word	0x0802bb70
 800ea84:	20008538 	.word	0x20008538
 800ea88:	0800ea09 	.word	0x0800ea09

0800ea8c <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_60_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_60_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_60_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_60_4bpp(glyphs_Asap_Bold_60_4bpp, 12, 60, 0, 4, 1, 0, 0, unicodes_Asap_Bold_60_4bpp, kerning_Asap_Bold_60_4bpp, 63, 0, 0);
 800ea8c:	b580      	push	{r7, lr}
 800ea8e:	af00      	add	r7, sp, #0
 800ea90:	4801      	ldr	r0, [pc, #4]	; (800ea98 <__tcf_0+0xc>)
 800ea92:	f7ff fe09 	bl	800e6a8 <_ZN8touchgfx13GeneratedFontD1Ev>
 800ea96:	bd80      	pop	{r7, pc}
 800ea98:	20008560 	.word	0x20008560

0800ea9c <_Z25getFont_Asap_Bold_60_4bppv>:
{
 800ea9c:	b580      	push	{r7, lr}
 800ea9e:	b08a      	sub	sp, #40	; 0x28
 800eaa0:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_60_4bpp(glyphs_Asap_Bold_60_4bpp, 12, 60, 0, 4, 1, 0, 0, unicodes_Asap_Bold_60_4bpp, kerning_Asap_Bold_60_4bpp, 63, 0, 0);
 800eaa2:	4b15      	ldr	r3, [pc, #84]	; (800eaf8 <_Z25getFont_Asap_Bold_60_4bppv+0x5c>)
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	f003 0301 	and.w	r3, r3, #1
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d11f      	bne.n	800eaee <_Z25getFont_Asap_Bold_60_4bppv+0x52>
 800eaae:	2300      	movs	r3, #0
 800eab0:	9309      	str	r3, [sp, #36]	; 0x24
 800eab2:	2300      	movs	r3, #0
 800eab4:	9308      	str	r3, [sp, #32]
 800eab6:	233f      	movs	r3, #63	; 0x3f
 800eab8:	9307      	str	r3, [sp, #28]
 800eaba:	4b10      	ldr	r3, [pc, #64]	; (800eafc <_Z25getFont_Asap_Bold_60_4bppv+0x60>)
 800eabc:	9306      	str	r3, [sp, #24]
 800eabe:	4b10      	ldr	r3, [pc, #64]	; (800eb00 <_Z25getFont_Asap_Bold_60_4bppv+0x64>)
 800eac0:	9305      	str	r3, [sp, #20]
 800eac2:	2300      	movs	r3, #0
 800eac4:	9304      	str	r3, [sp, #16]
 800eac6:	2300      	movs	r3, #0
 800eac8:	9303      	str	r3, [sp, #12]
 800eaca:	2301      	movs	r3, #1
 800eacc:	9302      	str	r3, [sp, #8]
 800eace:	2304      	movs	r3, #4
 800ead0:	9301      	str	r3, [sp, #4]
 800ead2:	2300      	movs	r3, #0
 800ead4:	9300      	str	r3, [sp, #0]
 800ead6:	233c      	movs	r3, #60	; 0x3c
 800ead8:	220c      	movs	r2, #12
 800eada:	490a      	ldr	r1, [pc, #40]	; (800eb04 <_Z25getFont_Asap_Bold_60_4bppv+0x68>)
 800eadc:	480a      	ldr	r0, [pc, #40]	; (800eb08 <_Z25getFont_Asap_Bold_60_4bppv+0x6c>)
 800eade:	f7ff fe87 	bl	800e7f0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800eae2:	4b05      	ldr	r3, [pc, #20]	; (800eaf8 <_Z25getFont_Asap_Bold_60_4bppv+0x5c>)
 800eae4:	2201      	movs	r2, #1
 800eae6:	601a      	str	r2, [r3, #0]
 800eae8:	4808      	ldr	r0, [pc, #32]	; (800eb0c <_Z25getFont_Asap_Bold_60_4bppv+0x70>)
 800eaea:	f014 fcc3 	bl	8023474 <atexit>
    return Asap_Bold_60_4bpp;
 800eaee:	4b06      	ldr	r3, [pc, #24]	; (800eb08 <_Z25getFont_Asap_Bold_60_4bppv+0x6c>)
}
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	46bd      	mov	sp, r7
 800eaf4:	bd80      	pop	{r7, pc}
 800eaf6:	bf00      	nop
 800eaf8:	20008584 	.word	0x20008584
 800eafc:	0802b918 	.word	0x0802b918
 800eb00:	08024bfc 	.word	0x08024bfc
 800eb04:	0802bc18 	.word	0x0802bc18
 800eb08:	20008560 	.word	0x20008560
 800eb0c:	0800ea8d 	.word	0x0800ea8d

0800eb10 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Regular_20_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Regular_20_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Regular_20_4bpp()
{
    static touchgfx::GeneratedFont Asap_Regular_20_4bpp(glyphs_Asap_Regular_20_4bpp, 10, 20, 0, 4, 1, 0, 0, unicodes_Asap_Regular_20_4bpp, kerning_Asap_Regular_20_4bpp, 0, 0, 0);
 800eb10:	b580      	push	{r7, lr}
 800eb12:	af00      	add	r7, sp, #0
 800eb14:	4801      	ldr	r0, [pc, #4]	; (800eb1c <__tcf_0+0xc>)
 800eb16:	f7ff fdc7 	bl	800e6a8 <_ZN8touchgfx13GeneratedFontD1Ev>
 800eb1a:	bd80      	pop	{r7, pc}
 800eb1c:	20008588 	.word	0x20008588

0800eb20 <_Z28getFont_Asap_Regular_20_4bppv>:
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b08a      	sub	sp, #40	; 0x28
 800eb24:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Regular_20_4bpp(glyphs_Asap_Regular_20_4bpp, 10, 20, 0, 4, 1, 0, 0, unicodes_Asap_Regular_20_4bpp, kerning_Asap_Regular_20_4bpp, 0, 0, 0);
 800eb26:	4b15      	ldr	r3, [pc, #84]	; (800eb7c <_Z28getFont_Asap_Regular_20_4bppv+0x5c>)
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	f003 0301 	and.w	r3, r3, #1
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d11f      	bne.n	800eb72 <_Z28getFont_Asap_Regular_20_4bppv+0x52>
 800eb32:	2300      	movs	r3, #0
 800eb34:	9309      	str	r3, [sp, #36]	; 0x24
 800eb36:	2300      	movs	r3, #0
 800eb38:	9308      	str	r3, [sp, #32]
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	9307      	str	r3, [sp, #28]
 800eb3e:	4b10      	ldr	r3, [pc, #64]	; (800eb80 <_Z28getFont_Asap_Regular_20_4bppv+0x60>)
 800eb40:	9306      	str	r3, [sp, #24]
 800eb42:	4b10      	ldr	r3, [pc, #64]	; (800eb84 <_Z28getFont_Asap_Regular_20_4bppv+0x64>)
 800eb44:	9305      	str	r3, [sp, #20]
 800eb46:	2300      	movs	r3, #0
 800eb48:	9304      	str	r3, [sp, #16]
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	9303      	str	r3, [sp, #12]
 800eb4e:	2301      	movs	r3, #1
 800eb50:	9302      	str	r3, [sp, #8]
 800eb52:	2304      	movs	r3, #4
 800eb54:	9301      	str	r3, [sp, #4]
 800eb56:	2300      	movs	r3, #0
 800eb58:	9300      	str	r3, [sp, #0]
 800eb5a:	2314      	movs	r3, #20
 800eb5c:	220a      	movs	r2, #10
 800eb5e:	490a      	ldr	r1, [pc, #40]	; (800eb88 <_Z28getFont_Asap_Regular_20_4bppv+0x68>)
 800eb60:	480a      	ldr	r0, [pc, #40]	; (800eb8c <_Z28getFont_Asap_Regular_20_4bppv+0x6c>)
 800eb62:	f7ff fe45 	bl	800e7f0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800eb66:	4b05      	ldr	r3, [pc, #20]	; (800eb7c <_Z28getFont_Asap_Regular_20_4bppv+0x5c>)
 800eb68:	2201      	movs	r2, #1
 800eb6a:	601a      	str	r2, [r3, #0]
 800eb6c:	4808      	ldr	r0, [pc, #32]	; (800eb90 <_Z28getFont_Asap_Regular_20_4bppv+0x70>)
 800eb6e:	f014 fc81 	bl	8023474 <atexit>
    return Asap_Regular_20_4bpp;
 800eb72:	4b06      	ldr	r3, [pc, #24]	; (800eb8c <_Z28getFont_Asap_Regular_20_4bppv+0x6c>)
}
 800eb74:	4618      	mov	r0, r3
 800eb76:	46bd      	mov	sp, r7
 800eb78:	bd80      	pop	{r7, pc}
 800eb7a:	bf00      	nop
 800eb7c:	200085ac 	.word	0x200085ac
 800eb80:	0802b91c 	.word	0x0802b91c
 800eb84:	08024c00 	.word	0x08024c00
 800eb88:	0802bcc0 	.word	0x0802bcc0
 800eb8c:	20008588 	.word	0x20008588
 800eb90:	0800eb11 	.word	0x0800eb11

0800eb94 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800eb94:	b480      	push	{r7}
 800eb96:	b083      	sub	sp, #12
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
 800eb9c:	6039      	str	r1, [r7, #0]
 800eb9e:	683b      	ldr	r3, [r7, #0]
 800eba0:	4618      	mov	r0, r3
 800eba2:	370c      	adds	r7, #12
 800eba4:	46bd      	mov	sp, r7
 800eba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebaa:	4770      	bx	lr

0800ebac <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     *        This handler is invoked when a mouse click or display touch event has been
     *        detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800ebac:	b480      	push	{r7}
 800ebae:	b083      	sub	sp, #12
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	6078      	str	r0, [r7, #4]
 800ebb4:	6039      	str	r1, [r7, #0]
    {
    }
 800ebb6:	bf00      	nop
 800ebb8:	370c      	adds	r7, #12
 800ebba:	46bd      	mov	sp, r7
 800ebbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc0:	4770      	bx	lr

0800ebc2 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
     *
     *        This handler is invoked when a drag event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800ebc2:	b480      	push	{r7}
 800ebc4:	b083      	sub	sp, #12
 800ebc6:	af00      	add	r7, sp, #0
 800ebc8:	6078      	str	r0, [r7, #4]
 800ebca:	6039      	str	r1, [r7, #0]
    {
    }
 800ebcc:	bf00      	nop
 800ebce:	370c      	adds	r7, #12
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd6:	4770      	bx	lr

0800ebd8 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
     *
     *        This handler is invoked when a gesture event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800ebd8:	b480      	push	{r7}
 800ebda:	b083      	sub	sp, #12
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
 800ebe0:	6039      	str	r1, [r7, #0]
    {
    }
 800ebe2:	bf00      	nop
 800ebe4:	370c      	adds	r7, #12
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebec:	4770      	bx	lr

0800ebee <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
     *        This handler is invoked when a key (or button) event has been detected by the
     *        system.
     *
     * @param c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800ebee:	b480      	push	{r7}
 800ebf0:	b083      	sub	sp, #12
 800ebf2:	af00      	add	r7, sp, #0
 800ebf4:	6078      	str	r0, [r7, #4]
 800ebf6:	460b      	mov	r3, r1
 800ebf8:	70fb      	strb	r3, [r7, #3]
    {
    }
 800ebfa:	bf00      	nop
 800ebfc:	370c      	adds	r7, #12
 800ebfe:	46bd      	mov	sp, r7
 800ec00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec04:	4770      	bx	lr

0800ec06 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:
     * @brief This handler is invoked when a system tick event has been generated.
     *
     *        This handler is invoked when a system tick event has been generated. The system
     *        tick period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800ec06:	b480      	push	{r7}
 800ec08:	b083      	sub	sp, #12
 800ec0a:	af00      	add	r7, sp, #0
 800ec0c:	6078      	str	r0, [r7, #4]
    {
    }
 800ec0e:	bf00      	nop
 800ec10:	370c      	adds	r7, #12
 800ec12:	46bd      	mov	sp, r7
 800ec14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec18:	4770      	bx	lr

0800ec1a <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:
     *
     * @brief This handler is invoked when a change screen event is pending.
     *
     *        This handler is invoked when a change screen event is pending.
     */
    virtual void handlePendingScreenTransition()
 800ec1a:	b480      	push	{r7}
 800ec1c:	b083      	sub	sp, #12
 800ec1e:	af00      	add	r7, sp, #0
 800ec20:	6078      	str	r0, [r7, #4]
    {
    }
 800ec22:	bf00      	nop
 800ec24:	370c      	adds	r7, #12
 800ec26:	46bd      	mov	sp, r7
 800ec28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2c:	4770      	bx	lr
	...

0800ec30 <_ZN8touchgfx15UIEventListenerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~UIEventListener()
 800ec30:	b480      	push	{r7}
 800ec32:	b083      	sub	sp, #12
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	6078      	str	r0, [r7, #4]
    {
 800ec38:	4a04      	ldr	r2, [pc, #16]	; (800ec4c <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	601a      	str	r2, [r3, #0]
    }
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	4618      	mov	r0, r3
 800ec42:	370c      	adds	r7, #12
 800ec44:	46bd      	mov	sp, r7
 800ec46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec4a:	4770      	bx	lr
 800ec4c:	08024cf4 	.word	0x08024cf4

0800ec50 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b082      	sub	sp, #8
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
    }
 800ec58:	6878      	ldr	r0, [r7, #4]
 800ec5a:	f7ff ffe9 	bl	800ec30 <_ZN8touchgfx15UIEventListenerD1Ev>
 800ec5e:	2104      	movs	r1, #4
 800ec60:	6878      	ldr	r0, [r7, #4]
 800ec62:	f014 fbbe 	bl	80233e2 <_ZdlPvj>
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	4618      	mov	r0, r3
 800ec6a:	3708      	adds	r7, #8
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	bd80      	pop	{r7, pc}

0800ec70 <_ZN8touchgfx10TransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs the Transition.
     */
    Transition() :
 800ec70:	b480      	push	{r7}
 800ec72:	b083      	sub	sp, #12
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]
        screenContainer(0), done(false)
 800ec78:	4a07      	ldr	r2, [pc, #28]	; (800ec98 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	601a      	str	r2, [r3, #0]
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	2200      	movs	r2, #0
 800ec82:	605a      	str	r2, [r3, #4]
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	2200      	movs	r2, #0
 800ec88:	721a      	strb	r2, [r3, #8]
    {
    }
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	370c      	adds	r7, #12
 800ec90:	46bd      	mov	sp, r7
 800ec92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec96:	4770      	bx	lr
 800ec98:	08024cd4 	.word	0x08024cd4

0800ec9c <_ZN8touchgfx10TransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Transition()
 800ec9c:	b480      	push	{r7}
 800ec9e:	b083      	sub	sp, #12
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	6078      	str	r0, [r7, #4]
    {
 800eca4:	4a04      	ldr	r2, [pc, #16]	; (800ecb8 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	601a      	str	r2, [r3, #0]
    }
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	4618      	mov	r0, r3
 800ecae:	370c      	adds	r7, #12
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb6:	4770      	bx	lr
 800ecb8:	08024cd4 	.word	0x08024cd4

0800ecbc <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b082      	sub	sp, #8
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
    }
 800ecc4:	6878      	ldr	r0, [r7, #4]
 800ecc6:	f7ff ffe9 	bl	800ec9c <_ZN8touchgfx10TransitionD1Ev>
 800ecca:	210c      	movs	r1, #12
 800eccc:	6878      	ldr	r0, [r7, #4]
 800ecce:	f014 fb88 	bl	80233e2 <_ZdlPvj>
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	3708      	adds	r7, #8
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	bd80      	pop	{r7, pc}

0800ecdc <_ZN8touchgfx10Transition15handleTickEventEv>:
     *
     * @brief Called for every tick when transitioning.
     *
     *        Called for every tick when transitioning. Base does nothing.
     */
    virtual void handleTickEvent() { }
 800ecdc:	b480      	push	{r7}
 800ecde:	b083      	sub	sp, #12
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
 800ece4:	bf00      	nop
 800ece6:	370c      	adds	r7, #12
 800ece8:	46bd      	mov	sp, r7
 800ecea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecee:	4770      	bx	lr

0800ecf0 <_ZN8touchgfx10Transition8tearDownEv>:
     * @brief Tears down the Animation.
     *
     *        Tears down the Animation. Called before the d.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void tearDown() { }
 800ecf0:	b480      	push	{r7}
 800ecf2:	b083      	sub	sp, #12
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	6078      	str	r0, [r7, #4]
 800ecf8:	bf00      	nop
 800ecfa:	370c      	adds	r7, #12
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed02:	4770      	bx	lr

0800ed04 <_ZN8touchgfx10Transition4initEv>:
     * @brief Initializes the transition.
     *
     *        Initializes the transition. Called after the c.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void init() { }
 800ed04:	b480      	push	{r7}
 800ed06:	b083      	sub	sp, #12
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	6078      	str	r0, [r7, #4]
 800ed0c:	bf00      	nop
 800ed0e:	370c      	adds	r7, #12
 800ed10:	46bd      	mov	sp, r7
 800ed12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed16:	4770      	bx	lr

0800ed18 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *        Sets the screen container. Is used by Screen to enable the transition to access
     *        the container.
     *
     * @param [in] cont The container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800ed18:	b480      	push	{r7}
 800ed1a:	b083      	sub	sp, #12
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
 800ed20:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	683a      	ldr	r2, [r7, #0]
 800ed26:	605a      	str	r2, [r3, #4]
    }
 800ed28:	bf00      	nop
 800ed2a:	370c      	adds	r7, #12
 800ed2c:	46bd      	mov	sp, r7
 800ed2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed32:	4770      	bx	lr

0800ed34 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *        provide a means to switch screen from places that does not have access to a
     *        pointer to the new screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800ed34:	b480      	push	{r7}
 800ed36:	b083      	sub	sp, #12
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	6078      	str	r0, [r7, #4]
 800ed3c:	460b      	mov	r3, r1
 800ed3e:	70fb      	strb	r3, [r7, #3]
    {
    }
 800ed40:	bf00      	nop
 800ed42:	370c      	adds	r7, #12
 800ed44:	46bd      	mov	sp, r7
 800ed46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed4a:	4770      	bx	lr

0800ed4c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
     *
     * @brief Destructor.
     *
     *        Empty virtual destructor.
     */
    virtual ~GenericCallback()
 800ed4c:	b480      	push	{r7}
 800ed4e:	b083      	sub	sp, #12
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]
    {
 800ed54:	4a04      	ldr	r2, [pc, #16]	; (800ed68 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	601a      	str	r2, [r3, #0]
    }
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	370c      	adds	r7, #12
 800ed60:	46bd      	mov	sp, r7
 800ed62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed66:	4770      	bx	lr
 800ed68:	08024cbc 	.word	0x08024cbc

0800ed6c <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b082      	sub	sp, #8
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
    }
 800ed74:	6878      	ldr	r0, [r7, #4]
 800ed76:	f7ff ffe9 	bl	800ed4c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800ed7a:	2104      	movs	r1, #4
 800ed7c:	6878      	ldr	r0, [r7, #4]
 800ed7e:	f014 fb30 	bl	80233e2 <_ZdlPvj>
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	4618      	mov	r0, r3
 800ed86:	3708      	adds	r7, #8
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	bd80      	pop	{r7, pc}

0800ed8c <_ZN8touchgfx3HAL11getInstanceEv>:
     *
     *        Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800ed8c:	b480      	push	{r7}
 800ed8e:	af00      	add	r7, sp, #0
    {
        return instance;
 800ed90:	4b03      	ldr	r3, [pc, #12]	; (800eda0 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800ed92:	681b      	ldr	r3, [r3, #0]
    }
 800ed94:	4618      	mov	r0, r3
 800ed96:	46bd      	mov	sp, r7
 800ed98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed9c:	4770      	bx	lr
 800ed9e:	bf00      	nop
 800eda0:	2000bad8 	.word	0x2000bad8

0800eda4 <_ZN8touchgfx3HAL3lcdEv>:
     *
     *        Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800eda4:	b480      	push	{r7}
 800eda6:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800eda8:	4b0b      	ldr	r3, [pc, #44]	; (800edd8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d008      	beq.n	800edc6 <_ZN8touchgfx3HAL3lcdEv+0x22>
 800edb4:	4b08      	ldr	r3, [pc, #32]	; (800edd8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d003      	beq.n	800edc6 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800edbe:	4b06      	ldr	r3, [pc, #24]	; (800edd8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800edc4:	e002      	b.n	800edcc <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 800edc6:	4b04      	ldr	r3, [pc, #16]	; (800edd8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	689b      	ldr	r3, [r3, #8]
        }
    }
 800edcc:	4618      	mov	r0, r3
 800edce:	46bd      	mov	sp, r7
 800edd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd4:	4770      	bx	lr
 800edd6:	bf00      	nop
 800edd8:	2000bad8 	.word	0x2000bad8

0800eddc <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800eddc:	b580      	push	{r7, lr}
 800edde:	b082      	sub	sp, #8
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
 800ede4:	4a05      	ldr	r2, [pc, #20]	; (800edfc <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	601a      	str	r2, [r3, #0]
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	4618      	mov	r0, r3
 800edee:	f7ff ff1f 	bl	800ec30 <_ZN8touchgfx15UIEventListenerD1Ev>
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	4618      	mov	r0, r3
 800edf6:	3708      	adds	r7, #8
 800edf8:	46bd      	mov	sp, r7
 800edfa:	bd80      	pop	{r7, pc}
 800edfc:	08026b34 	.word	0x08026b34

0800ee00 <_ZN8touchgfx11ApplicationD0Ev>:
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b082      	sub	sp, #8
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6078      	str	r0, [r7, #4]
 800ee08:	6878      	ldr	r0, [r7, #4]
 800ee0a:	f7ff ffe7 	bl	800eddc <_ZN8touchgfx11ApplicationD1Ev>
 800ee0e:	f44f 7198 	mov.w	r1, #304	; 0x130
 800ee12:	6878      	ldr	r0, [r7, #4]
 800ee14:	f014 fae5 	bl	80233e2 <_ZdlPvj>
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	3708      	adds	r7, #8
 800ee1e:	46bd      	mov	sp, r7
 800ee20:	bd80      	pop	{r7, pc}
	...

0800ee24 <_ZN8touchgfx14MVPApplicationC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    MVPApplication() :
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b082      	sub	sp, #8
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
        currentPresenter(0),
        pendingScreenTransitionCallback(0)
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	4618      	mov	r0, r3
 800ee30:	f008 fb30 	bl	8017494 <_ZN8touchgfx11ApplicationC1Ev>
 800ee34:	4a09      	ldr	r2, [pc, #36]	; (800ee5c <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	601a      	str	r2, [r3, #0]
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	2200      	movs	r2, #0
 800ee3e:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	2200      	movs	r2, #0
 800ee46:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    {
        instance = this;
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	4a04      	ldr	r2, [pc, #16]	; (800ee60 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800ee4e:	6013      	str	r3, [r2, #0]
    }
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	4618      	mov	r0, r3
 800ee54:	3708      	adds	r7, #8
 800ee56:	46bd      	mov	sp, r7
 800ee58:	bd80      	pop	{r7, pc}
 800ee5a:	bf00      	nop
 800ee5c:	08024c80 	.word	0x08024c80
 800ee60:	2000bb64 	.word	0x2000bb64

0800ee64 <_ZN8touchgfx14MVPApplicationD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPApplication() { }
 800ee64:	b580      	push	{r7, lr}
 800ee66:	b082      	sub	sp, #8
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	6078      	str	r0, [r7, #4]
 800ee6c:	4a05      	ldr	r2, [pc, #20]	; (800ee84 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	601a      	str	r2, [r3, #0]
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	4618      	mov	r0, r3
 800ee76:	f7ff ffb1 	bl	800eddc <_ZN8touchgfx11ApplicationD1Ev>
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	3708      	adds	r7, #8
 800ee80:	46bd      	mov	sp, r7
 800ee82:	bd80      	pop	{r7, pc}
 800ee84:	08024c80 	.word	0x08024c80

0800ee88 <_ZN8touchgfx14MVPApplicationD0Ev>:
 800ee88:	b580      	push	{r7, lr}
 800ee8a:	b082      	sub	sp, #8
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	6078      	str	r0, [r7, #4]
 800ee90:	6878      	ldr	r0, [r7, #4]
 800ee92:	f7ff ffe7 	bl	800ee64 <_ZN8touchgfx14MVPApplicationD1Ev>
 800ee96:	f44f 719c 	mov.w	r1, #312	; 0x138
 800ee9a:	6878      	ldr	r0, [r7, #4]
 800ee9c:	f014 faa1 	bl	80233e2 <_ZdlPvj>
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	4618      	mov	r0, r3
 800eea4:	3708      	adds	r7, #8
 800eea6:	46bd      	mov	sp, r7
 800eea8:	bd80      	pop	{r7, pc}

0800eeaa <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
     *
     * @brief Handles the pending screen transition.
     *
     *        Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800eeaa:	b580      	push	{r7, lr}
 800eeac:	b082      	sub	sp, #8
 800eeae:	af00      	add	r7, sp, #0
 800eeb0:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800eeb2:	6878      	ldr	r0, [r7, #4]
 800eeb4:	f000 f804 	bl	800eec0 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800eeb8:	bf00      	nop
 800eeba:	3708      	adds	r7, #8
 800eebc:	46bd      	mov	sp, r7
 800eebe:	bd80      	pop	{r7, pc}

0800eec0 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:
     * @brief Evaluates the pending Callback instances.
     *
     *        Evaluates the pending Callback instances. If a callback is valid, it is executed
     *        and a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800eec0:	b580      	push	{r7, lr}
 800eec2:	b082      	sub	sp, #8
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d00f      	beq.n	800eef2 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	330c      	adds	r3, #12
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	4610      	mov	r0, r2
 800eee6:	4798      	blx	r3
 800eee8:	4603      	mov	r3, r0
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d001      	beq.n	800eef2 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800eeee:	2301      	movs	r3, #1
 800eef0:	e000      	b.n	800eef4 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800eef2:	2300      	movs	r3, #0
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d00e      	beq.n	800ef16 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	3308      	adds	r3, #8
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	4610      	mov	r0, r2
 800ef0c:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	2200      	movs	r2, #0
 800ef12:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
        }
    }
 800ef16:	bf00      	nop
 800ef18:	3708      	adds	r7, #8
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	bd80      	pop	{r7, pc}

0800ef1e <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>:
 * @param [in] currentScreen    If non-null, the current screen.
 * @param [in] currentPresenter If non-null, the current presenter.
 * @param [in] currentTrans     If non-null, the current transaction.
 */
static inline void prepareTransition(Screen** currentScreen, Presenter** currentPresenter, Transition** currentTrans)
{
 800ef1e:	b580      	push	{r7, lr}
 800ef20:	b084      	sub	sp, #16
 800ef22:	af00      	add	r7, sp, #0
 800ef24:	60f8      	str	r0, [r7, #12]
 800ef26:	60b9      	str	r1, [r7, #8]
 800ef28:	607a      	str	r2, [r7, #4]
    Application::getInstance()->clearAllTimerWidgets();
 800ef2a:	f008 fa91 	bl	8017450 <_ZN8touchgfx11Application11getInstanceEv>
 800ef2e:	4603      	mov	r3, r0
 800ef30:	4618      	mov	r0, r3
 800ef32:	f008 fa93 	bl	801745c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>

    if (*currentTrans)
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d008      	beq.n	800ef50 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x32>
    {
        (*currentTrans)->tearDown();
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	681a      	ldr	r2, [r3, #0]
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	330c      	adds	r3, #12
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	4610      	mov	r0, r2
 800ef4e:	4798      	blx	r3
    }
    if (*currentTrans)
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d007      	beq.n	800ef68 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x4a>
    {
        (*currentTrans)->~Transition();
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	681a      	ldr	r2, [r3, #0]
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	4610      	mov	r0, r2
 800ef66:	4798      	blx	r3
    }
    if (*currentScreen)
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d008      	beq.n	800ef82 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x64>
    {
        (*currentScreen)->tearDownScreen();
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	681a      	ldr	r2, [r3, #0]
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	3314      	adds	r3, #20
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	4610      	mov	r0, r2
 800ef80:	4798      	blx	r3
    }
    if (*currentPresenter)
 800ef82:	68bb      	ldr	r3, [r7, #8]
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d008      	beq.n	800ef9c <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x7e>
    {
        (*currentPresenter)->deactivate();
 800ef8a:	68bb      	ldr	r3, [r7, #8]
 800ef8c:	681a      	ldr	r2, [r3, #0]
 800ef8e:	68bb      	ldr	r3, [r7, #8]
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	3304      	adds	r3, #4
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	4610      	mov	r0, r2
 800ef9a:	4798      	blx	r3
    }
    if (*currentScreen)
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d007      	beq.n	800efb4 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x96>
    {
        (*currentScreen)->~Screen();
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	681a      	ldr	r2, [r3, #0]
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	4610      	mov	r0, r2
 800efb2:	4798      	blx	r3
    }
    if (*currentPresenter)
 800efb4:	68bb      	ldr	r3, [r7, #8]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d008      	beq.n	800efce <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0xb0>
    {
        (*currentPresenter)->~Presenter();
 800efbc:	68bb      	ldr	r3, [r7, #8]
 800efbe:	681a      	ldr	r2, [r3, #0]
 800efc0:	68bb      	ldr	r3, [r7, #8]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	3308      	adds	r3, #8
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	4610      	mov	r0, r2
 800efcc:	4798      	blx	r3
    }
}
 800efce:	bf00      	nop
 800efd0:	3710      	adds	r7, #16
 800efd2:	46bd      	mov	sp, r7
 800efd4:	bd80      	pop	{r7, pc}

0800efd6 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>:
 * @param [in] newScreen     If non-null, the new screen.
 * @param [in] newPresenter  If non-null, the new presenter.
 * @param [in] newTransition If non-null, the new transition.
 */
static inline void finalizeTransition(Screen* newScreen, Presenter* newPresenter, Transition* newTransition)
{
 800efd6:	b580      	push	{r7, lr}
 800efd8:	b084      	sub	sp, #16
 800efda:	af00      	add	r7, sp, #0
 800efdc:	60f8      	str	r0, [r7, #12]
 800efde:	60b9      	str	r1, [r7, #8]
 800efe0:	607a      	str	r2, [r7, #4]
    newScreen->setupScreen();
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	330c      	adds	r3, #12
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	68f8      	ldr	r0, [r7, #12]
 800efec:	4798      	blx	r3
    newPresenter->activate();
 800efee:	68bb      	ldr	r3, [r7, #8]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	68b8      	ldr	r0, [r7, #8]
 800eff6:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800eff8:	6879      	ldr	r1, [r7, #4]
 800effa:	68f8      	ldr	r0, [r7, #12]
 800effc:	f009 fb38 	bl	8018670 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	3310      	adds	r3, #16
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	6878      	ldr	r0, [r7, #4]
 800f00a:	4798      	blx	r3

    Application::getInstance()->draw();
 800f00c:	f008 fa20 	bl	8017450 <_ZN8touchgfx11Application11getInstanceEv>
 800f010:	4602      	mov	r2, r0
 800f012:	6813      	ldr	r3, [r2, #0]
 800f014:	3328      	adds	r3, #40	; 0x28
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	4610      	mov	r0, r2
 800f01a:	4798      	blx	r3
}
 800f01c:	bf00      	nop
 800f01e:	3710      	adds	r7, #16
 800f020:	46bd      	mov	sp, r7
 800f022:	bd80      	pop	{r7, pc}

0800f024 <_ZN5Model4bindEP13ModelListener>:

    /**
     * Sets the modelListener to point to the currently active presenter. Called automatically
     * when switching screen.
     */
    void bind(ModelListener* listener)
 800f024:	b480      	push	{r7}
 800f026:	b083      	sub	sp, #12
 800f028:	af00      	add	r7, sp, #0
 800f02a:	6078      	str	r0, [r7, #4]
 800f02c:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	683a      	ldr	r2, [r7, #0]
 800f032:	601a      	str	r2, [r3, #0]
    }
 800f034:	bf00      	nop
 800f036:	370c      	adds	r7, #12
 800f038:	46bd      	mov	sp, r7
 800f03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f03e:	4770      	bx	lr

0800f040 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800f040:	b580      	push	{r7, lr}
 800f042:	b082      	sub	sp, #8
 800f044:	af00      	add	r7, sp, #0
 800f046:	6078      	str	r0, [r7, #4]
 800f048:	4a08      	ldr	r2, [pc, #32]	; (800f06c <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	601a      	str	r2, [r3, #0]
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800f054:	4618      	mov	r0, r3
 800f056:	f000 fa5f 	bl	800f518 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	4618      	mov	r0, r3
 800f05e:	f7ff ff01 	bl	800ee64 <_ZN8touchgfx14MVPApplicationD1Ev>
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	4618      	mov	r0, r3
 800f066:	3708      	adds	r7, #8
 800f068:	46bd      	mov	sp, r7
 800f06a:	bd80      	pop	{r7, pc}
 800f06c:	08024c2c 	.word	0x08024c2c

0800f070 <_ZN23FrontendApplicationBaseD0Ev>:
 800f070:	b580      	push	{r7, lr}
 800f072:	b082      	sub	sp, #8
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
 800f078:	6878      	ldr	r0, [r7, #4]
 800f07a:	f7ff ffe1 	bl	800f040 <_ZN23FrontendApplicationBaseD1Ev>
 800f07e:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800f082:	6878      	ldr	r0, [r7, #4]
 800f084:	f014 f9ad 	bl	80233e2 <_ZdlPvj>
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	4618      	mov	r0, r3
 800f08c:	3708      	adds	r7, #8
 800f08e:	46bd      	mov	sp, r7
 800f090:	bd80      	pop	{r7, pc}
	...

0800f094 <_ZN8touchgfx12NoTransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    NoTransition() : Transition() { }
 800f094:	b580      	push	{r7, lr}
 800f096:	b082      	sub	sp, #8
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	4618      	mov	r0, r3
 800f0a0:	f7ff fde6 	bl	800ec70 <_ZN8touchgfx10TransitionC1Ev>
 800f0a4:	4a03      	ldr	r2, [pc, #12]	; (800f0b4 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	601a      	str	r2, [r3, #0]
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	3708      	adds	r7, #8
 800f0b0:	46bd      	mov	sp, r7
 800f0b2:	bd80      	pop	{r7, pc}
 800f0b4:	08024c0c 	.word	0x08024c0c

0800f0b8 <_ZN8touchgfx12NoTransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~NoTransition() { }
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b082      	sub	sp, #8
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	6078      	str	r0, [r7, #4]
 800f0c0:	4a05      	ldr	r2, [pc, #20]	; (800f0d8 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	601a      	str	r2, [r3, #0]
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	f7ff fde7 	bl	800ec9c <_ZN8touchgfx10TransitionD1Ev>
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	3708      	adds	r7, #8
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	bd80      	pop	{r7, pc}
 800f0d8:	08024c0c 	.word	0x08024c0c

0800f0dc <_ZN8touchgfx12NoTransitionD0Ev>:
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b082      	sub	sp, #8
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
 800f0e4:	6878      	ldr	r0, [r7, #4]
 800f0e6:	f7ff ffe7 	bl	800f0b8 <_ZN8touchgfx12NoTransitionD1Ev>
 800f0ea:	210c      	movs	r1, #12
 800f0ec:	6878      	ldr	r0, [r7, #4]
 800f0ee:	f014 f978 	bl	80233e2 <_ZdlPvj>
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	3708      	adds	r7, #8
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	bd80      	pop	{r7, pc}

0800f0fc <_ZN8touchgfx12NoTransition15handleTickEventEv>:
     *
     * @brief Indicates that the transition is done after the first tick.
     *
     *        Indicates that the transition is done after the first tick.
     */
    virtual void handleTickEvent()
 800f0fc:	b480      	push	{r7}
 800f0fe:	b083      	sub	sp, #12
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	2201      	movs	r2, #1
 800f108:	721a      	strb	r2, [r3, #8]
    }
 800f10a:	bf00      	nop
 800f10c:	370c      	adds	r7, #12
 800f10e:	46bd      	mov	sp, r7
 800f110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f114:	4770      	bx	lr

0800f116 <_ZN13ModelListener4bindEP5Model>:

    /**
     * Sets the model pointer to point to the Model object. Called automatically
     * when switching screen.
     */
    void bind(Model* m)
 800f116:	b480      	push	{r7}
 800f118:	b083      	sub	sp, #12
 800f11a:	af00      	add	r7, sp, #0
 800f11c:	6078      	str	r0, [r7, #4]
 800f11e:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	683a      	ldr	r2, [r7, #0]
 800f124:	605a      	str	r2, [r3, #4]
    }
 800f126:	bf00      	nop
 800f128:	370c      	adds	r7, #12
 800f12a:	46bd      	mov	sp, r7
 800f12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f130:	4770      	bx	lr
	...

0800f134 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800f134:	b580      	push	{r7, lr}
 800f136:	b084      	sub	sp, #16
 800f138:	af00      	add	r7, sp, #0
 800f13a:	60f8      	str	r0, [r7, #12]
 800f13c:	60b9      	str	r1, [r7, #8]
 800f13e:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	4618      	mov	r0, r3
 800f144:	f7ff fe6e 	bl	800ee24 <_ZN8touchgfx14MVPApplicationC1Ev>
 800f148:	4a13      	ldr	r2, [pc, #76]	; (800f198 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	601a      	str	r2, [r3, #0]
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800f154:	4618      	mov	r0, r3
 800f156:	f000 f89f 	bl	800f298 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	687a      	ldr	r2, [r7, #4]
 800f15e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	68ba      	ldr	r2, [r7, #8]
 800f166:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800f16a:	f7ff fe0f 	bl	800ed8c <_ZN8touchgfx3HAL11getInstanceEv>
 800f16e:	4602      	mov	r2, r0
 800f170:	6813      	ldr	r3, [r2, #0]
 800f172:	3308      	adds	r3, #8
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	2100      	movs	r1, #0
 800f178:	4610      	mov	r0, r2
 800f17a:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 800f17c:	2000      	movs	r0, #0
 800f17e:	f002 fc09 	bl	8011994 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800f182:	f7ff fe0f 	bl	800eda4 <_ZN8touchgfx3HAL3lcdEv>
 800f186:	4603      	mov	r3, r0
 800f188:	4618      	mov	r0, r3
 800f18a:	f00d fe38 	bl	801cdfe <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	4618      	mov	r0, r3
 800f192:	3710      	adds	r7, #16
 800f194:	46bd      	mov	sp, r7
 800f196:	bd80      	pop	{r7, pc}
 800f198:	08024c2c 	.word	0x08024c2c

0800f19c <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800f19c:	b480      	push	{r7}
 800f19e:	b083      	sub	sp, #12
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	6078      	str	r0, [r7, #4]
 800f1a4:	6039      	str	r1, [r7, #0]
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	370c      	adds	r7, #12
 800f1ac:	46bd      	mov	sp, r7
 800f1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b2:	4770      	bx	lr

0800f1b4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *       three arguments of any type.
 *
 * @tparam dest_type The type of the class in which the member function resides.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	b082      	sub	sp, #8
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	6078      	str	r0, [r7, #4]
 800f1bc:	6039      	str	r1, [r7, #0]
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	683a      	ldr	r2, [r7, #0]
 800f1c2:	4611      	mov	r1, r2
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	f7ff ffe9 	bl	800f19c <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800f1ca:	683b      	ldr	r3, [r7, #0]
 800f1cc:	685a      	ldr	r2, [r3, #4]
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	605a      	str	r2, [r3, #4]
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	683a      	ldr	r2, [r7, #0]
 800f1d6:	3308      	adds	r3, #8
 800f1d8:	3208      	adds	r2, #8
 800f1da:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f1de:	e883 0003 	stmia.w	r3, {r0, r1}
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	3708      	adds	r7, #8
 800f1e8:	46bd      	mov	sp, r7
 800f1ea:	bd80      	pop	{r7, pc}

0800f1ec <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>:
 */

// Main

void FrontendApplicationBase::gotoMainScreenNoTransition()
{
 800f1ec:	b590      	push	{r4, r7, lr}
 800f1ee:	b089      	sub	sp, #36	; 0x24
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenNoTransitionImpl);
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	f503 749c 	add.w	r4, r3, #312	; 0x138
 800f1fa:	4b10      	ldr	r3, [pc, #64]	; (800f23c <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv+0x50>)
 800f1fc:	61bb      	str	r3, [r7, #24]
 800f1fe:	2300      	movs	r3, #0
 800f200:	61fb      	str	r3, [r7, #28]
 800f202:	f107 0008 	add.w	r0, r7, #8
 800f206:	f107 0318 	add.w	r3, r7, #24
 800f20a:	cb0c      	ldmia	r3, {r2, r3}
 800f20c:	6879      	ldr	r1, [r7, #4]
 800f20e:	f000 f85f 	bl	800f2d0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800f212:	f107 0308 	add.w	r3, r7, #8
 800f216:	4619      	mov	r1, r3
 800f218:	4620      	mov	r0, r4
 800f21a:	f7ff ffcb 	bl	800f1b4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800f21e:	f107 0308 	add.w	r3, r7, #8
 800f222:	4618      	mov	r0, r3
 800f224:	f000 f978 	bl	800f518 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 800f234:	bf00      	nop
 800f236:	3724      	adds	r7, #36	; 0x24
 800f238:	46bd      	mov	sp, r7
 800f23a:	bd90      	pop	{r4, r7, pc}
 800f23c:	0800f241 	.word	0x0800f241

0800f240 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoMainScreenNoTransitionImpl()
{
 800f240:	b580      	push	{r7, lr}
 800f242:	b084      	sub	sp, #16
 800f244:	af02      	add	r7, sp, #8
 800f246:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	f503 7198 	add.w	r1, r3, #304	; 0x130
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800f254:	461a      	mov	r2, r3
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800f25c:	9300      	str	r3, [sp, #0]
 800f25e:	4b04      	ldr	r3, [pc, #16]	; (800f270 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x30>)
 800f260:	4804      	ldr	r0, [pc, #16]	; (800f274 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x34>)
 800f262:	f000 f855 	bl	800f310 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800f266:	bf00      	nop
 800f268:	3708      	adds	r7, #8
 800f26a:	46bd      	mov	sp, r7
 800f26c:	bd80      	pop	{r7, pc}
 800f26e:	bf00      	nop
 800f270:	2000bb58 	.word	0x2000bb58
 800f274:	2000bb54 	.word	0x2000bb54

0800f278 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800f278:	b480      	push	{r7}
 800f27a:	b083      	sub	sp, #12
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	6078      	str	r0, [r7, #4]
 800f280:	4a04      	ldr	r2, [pc, #16]	; (800f294 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	601a      	str	r2, [r3, #0]
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	4618      	mov	r0, r3
 800f28a:	370c      	adds	r7, #12
 800f28c:	46bd      	mov	sp, r7
 800f28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f292:	4770      	bx	lr
 800f294:	08024cbc 	.word	0x08024cbc

0800f298 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Initializes an empty callback.
     */
    Callback() : pobject(0), pmemfun_0(0) { }
 800f298:	b580      	push	{r7, lr}
 800f29a:	b082      	sub	sp, #8
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	6078      	str	r0, [r7, #4]
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	f7ff ffe8 	bl	800f278 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800f2a8:	4a08      	ldr	r2, [pc, #32]	; (800f2cc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	601a      	str	r2, [r3, #0]
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	2200      	movs	r2, #0
 800f2b2:	605a      	str	r2, [r3, #4]
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	609a      	str	r2, [r3, #8]
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	2200      	movs	r2, #0
 800f2be:	60da      	str	r2, [r3, #12]
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	3708      	adds	r7, #8
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	bd80      	pop	{r7, pc}
 800f2ca:	bf00      	nop
 800f2cc:	08024c68 	.word	0x08024c68

0800f2d0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function
     *                       takes zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b084      	sub	sp, #16
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	60f8      	str	r0, [r7, #12]
 800f2d8:	60b9      	str	r1, [r7, #8]
 800f2da:	4639      	mov	r1, r7
 800f2dc:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	f7ff ffc8 	bl	800f278 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800f2e8:	4a08      	ldr	r2, [pc, #32]	; (800f30c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	68ba      	ldr	r2, [r7, #8]
 800f2f2:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	3308      	adds	r3, #8
 800f2f8:	463a      	mov	r2, r7
 800f2fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f2fe:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	4618      	mov	r0, r3
 800f306:	3710      	adds	r7, #16
 800f308:	46bd      	mov	sp, r7
 800f30a:	bd80      	pop	{r7, pc}
 800f30c:	08024c68 	.word	0x08024c68

0800f310 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template< class ScreenType, class PresenterType, class TransType, class ModelType  >
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800f310:	b590      	push	{r4, r7, lr}
 800f312:	b089      	sub	sp, #36	; 0x24
 800f314:	af00      	add	r7, sp, #0
 800f316:	60f8      	str	r0, [r7, #12]
 800f318:	60b9      	str	r1, [r7, #8]
 800f31a:	607a      	str	r2, [r7, #4]
 800f31c:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	689a      	ldr	r2, [r3, #8]
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	689b      	ldr	r3, [r3, #8]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	3320      	adds	r3, #32
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	4610      	mov	r0, r2
 800f32e:	4798      	blx	r3
 800f330:	4602      	mov	r2, r0
 800f332:	f242 632b 	movw	r3, #9771	; 0x262b
 800f336:	429a      	cmp	r2, r3
 800f338:	d805      	bhi.n	800f346 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800f33a:	4b4e      	ldr	r3, [pc, #312]	; (800f474 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800f33c:	4a4e      	ldr	r2, [pc, #312]	; (800f478 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800f33e:	21c2      	movs	r1, #194	; 0xc2
 800f340:	484e      	ldr	r0, [pc, #312]	; (800f47c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800f342:	f014 f879 	bl	8023438 <__assert_func>
 800f346:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	685a      	ldr	r2, [r3, #4]
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	685b      	ldr	r3, [r3, #4]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	3320      	adds	r3, #32
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	4610      	mov	r0, r2
 800f358:	4798      	blx	r3
 800f35a:	4603      	mov	r3, r0
 800f35c:	2b0f      	cmp	r3, #15
 800f35e:	d805      	bhi.n	800f36c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 800f360:	4b47      	ldr	r3, [pc, #284]	; (800f480 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 800f362:	4a45      	ldr	r2, [pc, #276]	; (800f478 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800f364:	21c3      	movs	r1, #195	; 0xc3
 800f366:	4845      	ldr	r0, [pc, #276]	; (800f47c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800f368:	f014 f866 	bl	8023438 <__assert_func>
 800f36c:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	68da      	ldr	r2, [r3, #12]
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	68db      	ldr	r3, [r3, #12]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	3320      	adds	r3, #32
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	4610      	mov	r0, r2
 800f37e:	4798      	blx	r3
 800f380:	4603      	mov	r3, r0
 800f382:	2b0b      	cmp	r3, #11
 800f384:	d805      	bhi.n	800f392 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 800f386:	4b3f      	ldr	r3, [pc, #252]	; (800f484 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x174>)
 800f388:	4a3b      	ldr	r2, [pc, #236]	; (800f478 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800f38a:	21c4      	movs	r1, #196	; 0xc4
 800f38c:	483b      	ldr	r0, [pc, #236]	; (800f47c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800f38e:	f014 f853 	bl	8023438 <__assert_func>
 800f392:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);
 800f394:	683a      	ldr	r2, [r7, #0]
 800f396:	68b9      	ldr	r1, [r7, #8]
 800f398:	68f8      	ldr	r0, [r7, #12]
 800f39a:	f7ff fdc0 	bl	800ef1e <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>

    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	68db      	ldr	r3, [r3, #12]
 800f3a2:	2100      	movs	r1, #0
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	f000 f86f 	bl	800f488 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800f3aa:	4603      	mov	r3, r0
 800f3ac:	4619      	mov	r1, r3
 800f3ae:	200c      	movs	r0, #12
 800f3b0:	f7ff fbf0 	bl	800eb94 <_ZnwjPv>
 800f3b4:	4604      	mov	r4, r0
 800f3b6:	2c00      	cmp	r4, #0
 800f3b8:	d004      	beq.n	800f3c4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 800f3ba:	4620      	mov	r0, r4
 800f3bc:	f7ff fe6a 	bl	800f094 <_ZN8touchgfx12NoTransitionC1Ev>
 800f3c0:	4623      	mov	r3, r4
 800f3c2:	e000      	b.n	800f3c6 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
 800f3c4:	4623      	mov	r3, r4
 800f3c6:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	689b      	ldr	r3, [r3, #8]
 800f3cc:	2100      	movs	r1, #0
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	f000 f86d 	bl	800f4ae <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 800f3d4:	4603      	mov	r3, r0
 800f3d6:	4619      	mov	r1, r3
 800f3d8:	f242 602c 	movw	r0, #9772	; 0x262c
 800f3dc:	f7ff fbda 	bl	800eb94 <_ZnwjPv>
 800f3e0:	4604      	mov	r4, r0
 800f3e2:	2c00      	cmp	r4, #0
 800f3e4:	d004      	beq.n	800f3f0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
 800f3e6:	4620      	mov	r0, r4
 800f3e8:	f002 fd28 	bl	8011e3c <_ZN8MainViewC1Ev>
 800f3ec:	4623      	mov	r3, r4
 800f3ee:	e000      	b.n	800f3f2 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
 800f3f0:	4623      	mov	r3, r4
 800f3f2:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	685b      	ldr	r3, [r3, #4]
 800f3f8:	2100      	movs	r1, #0
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	f000 f86a 	bl	800f4d4 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 800f400:	4603      	mov	r3, r0
 800f402:	4619      	mov	r1, r3
 800f404:	2010      	movs	r0, #16
 800f406:	f7ff fbc5 	bl	800eb94 <_ZnwjPv>
 800f40a:	4604      	mov	r4, r0
 800f40c:	2c00      	cmp	r4, #0
 800f40e:	d005      	beq.n	800f41c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 800f410:	69b9      	ldr	r1, [r7, #24]
 800f412:	4620      	mov	r0, r4
 800f414:	f002 fc78 	bl	8011d08 <_ZN13MainPresenterC1ER8MainView>
 800f418:	4623      	mov	r3, r4
 800f41a:	e000      	b.n	800f41e <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
 800f41c:	4623      	mov	r3, r4
 800f41e:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 800f420:	683b      	ldr	r3, [r7, #0]
 800f422:	69fa      	ldr	r2, [r7, #28]
 800f424:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800f426:	68bb      	ldr	r3, [r7, #8]
 800f428:	697a      	ldr	r2, [r7, #20]
 800f42a:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	69ba      	ldr	r2, [r7, #24]
 800f430:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800f432:	697b      	ldr	r3, [r7, #20]
 800f434:	2b00      	cmp	r3, #0
 800f436:	d002      	beq.n	800f43e <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 800f438:	697b      	ldr	r3, [r7, #20]
 800f43a:	3304      	adds	r3, #4
 800f43c:	e000      	b.n	800f440 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
 800f43e:	2300      	movs	r3, #0
 800f440:	4619      	mov	r1, r3
 800f442:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f444:	f7ff fdee 	bl	800f024 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800f448:	697b      	ldr	r3, [r7, #20]
 800f44a:	3304      	adds	r3, #4
 800f44c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f44e:	4618      	mov	r0, r3
 800f450:	f7ff fe61 	bl	800f116 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800f454:	69bb      	ldr	r3, [r7, #24]
 800f456:	6979      	ldr	r1, [r7, #20]
 800f458:	4618      	mov	r0, r3
 800f45a:	f000 f84e 	bl	800f4fa <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 800f45e:	69fa      	ldr	r2, [r7, #28]
 800f460:	6979      	ldr	r1, [r7, #20]
 800f462:	69b8      	ldr	r0, [r7, #24]
 800f464:	f7ff fdb7 	bl	800efd6 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>

    return newPresenter;
 800f468:	697b      	ldr	r3, [r7, #20]
}
 800f46a:	4618      	mov	r0, r3
 800f46c:	3724      	adds	r7, #36	; 0x24
 800f46e:	46bd      	mov	sp, r7
 800f470:	bd90      	pop	{r4, r7, pc}
 800f472:	bf00      	nop
 800f474:	0802459c 	.word	0x0802459c
 800f478:	08024d14 	.word	0x08024d14
 800f47c:	0802462c 	.word	0x0802462c
 800f480:	08024670 	.word	0x08024670
 800f484:	08024714 	.word	0x08024714

0800f488 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template< typename T >
    T& at(const uint16_t index)
 800f488:	b580      	push	{r7, lr}
 800f48a:	b082      	sub	sp, #8
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	6078      	str	r0, [r7, #4]
 800f490:	460b      	mov	r3, r1
 800f492:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	3324      	adds	r3, #36	; 0x24
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	887a      	ldrh	r2, [r7, #2]
 800f49e:	4611      	mov	r1, r2
 800f4a0:	6878      	ldr	r0, [r7, #4]
 800f4a2:	4798      	blx	r3
 800f4a4:	4603      	mov	r3, r0
    }
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	3708      	adds	r7, #8
 800f4aa:	46bd      	mov	sp, r7
 800f4ac:	bd80      	pop	{r7, pc}

0800f4ae <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>:
    T& at(const uint16_t index)
 800f4ae:	b580      	push	{r7, lr}
 800f4b0:	b082      	sub	sp, #8
 800f4b2:	af00      	add	r7, sp, #0
 800f4b4:	6078      	str	r0, [r7, #4]
 800f4b6:	460b      	mov	r3, r1
 800f4b8:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	3324      	adds	r3, #36	; 0x24
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	887a      	ldrh	r2, [r7, #2]
 800f4c4:	4611      	mov	r1, r2
 800f4c6:	6878      	ldr	r0, [r7, #4]
 800f4c8:	4798      	blx	r3
 800f4ca:	4603      	mov	r3, r0
    }
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	3708      	adds	r7, #8
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	bd80      	pop	{r7, pc}

0800f4d4 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>:
    T& at(const uint16_t index)
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b082      	sub	sp, #8
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	6078      	str	r0, [r7, #4]
 800f4dc:	460b      	mov	r3, r1
 800f4de:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	3324      	adds	r3, #36	; 0x24
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	887a      	ldrh	r2, [r7, #2]
 800f4ea:	4611      	mov	r1, r2
 800f4ec:	6878      	ldr	r0, [r7, #4]
 800f4ee:	4798      	blx	r3
 800f4f0:	4603      	mov	r3, r0
    }
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	3708      	adds	r7, #8
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	bd80      	pop	{r7, pc}

0800f4fa <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>:
     *        Binds an instance of a specific Presenter type (subclass) to the View instance.
     *        This function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 800f4fa:	b480      	push	{r7}
 800f4fc:	b083      	sub	sp, #12
 800f4fe:	af00      	add	r7, sp, #0
 800f500:	6078      	str	r0, [r7, #4]
 800f502:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	683a      	ldr	r2, [r7, #0]
 800f508:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800f50a:	bf00      	nop
 800f50c:	370c      	adds	r7, #12
 800f50e:	46bd      	mov	sp, r7
 800f510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f514:	4770      	bx	lr
	...

0800f518 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800f518:	b580      	push	{r7, lr}
 800f51a:	b082      	sub	sp, #8
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	6078      	str	r0, [r7, #4]
 800f520:	4a05      	ldr	r2, [pc, #20]	; (800f538 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	601a      	str	r2, [r3, #0]
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	4618      	mov	r0, r3
 800f52a:	f7ff fc0f 	bl	800ed4c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	4618      	mov	r0, r3
 800f532:	3708      	adds	r7, #8
 800f534:	46bd      	mov	sp, r7
 800f536:	bd80      	pop	{r7, pc}
 800f538:	08024c68 	.word	0x08024c68

0800f53c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800f53c:	b580      	push	{r7, lr}
 800f53e:	b082      	sub	sp, #8
 800f540:	af00      	add	r7, sp, #0
 800f542:	6078      	str	r0, [r7, #4]
 800f544:	6878      	ldr	r0, [r7, #4]
 800f546:	f7ff ffe7 	bl	800f518 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800f54a:	2110      	movs	r1, #16
 800f54c:	6878      	ldr	r0, [r7, #4]
 800f54e:	f013 ff48 	bl	80233e2 <_ZdlPvj>
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	4618      	mov	r0, r3
 800f556:	3708      	adds	r7, #8
 800f558:	46bd      	mov	sp, r7
 800f55a:	bd80      	pop	{r7, pc}

0800f55c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * @brief Calls the member function.
     *
     *        Calls the member function. Do not call execute unless isValid() returns true (ie.
     *        a pointer to the object and the function has been set).
     */
    virtual void execute()
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b082      	sub	sp, #8
 800f560:	af00      	add	r7, sp, #0
 800f562:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	685b      	ldr	r3, [r3, #4]
 800f568:	687a      	ldr	r2, [r7, #4]
 800f56a:	68d2      	ldr	r2, [r2, #12]
 800f56c:	1052      	asrs	r2, r2, #1
 800f56e:	1899      	adds	r1, r3, r2
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	68db      	ldr	r3, [r3, #12]
 800f574:	f003 0301 	and.w	r3, r3, #1
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d102      	bne.n	800f582 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	689b      	ldr	r3, [r3, #8]
 800f580:	e00a      	b.n	800f598 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	685b      	ldr	r3, [r3, #4]
 800f586:	687a      	ldr	r2, [r7, #4]
 800f588:	68d2      	ldr	r2, [r2, #12]
 800f58a:	1052      	asrs	r2, r2, #1
 800f58c:	4413      	add	r3, r2
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	687a      	ldr	r2, [r7, #4]
 800f592:	6892      	ldr	r2, [r2, #8]
 800f594:	4413      	add	r3, r2
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	4608      	mov	r0, r1
 800f59a:	4798      	blx	r3
    }
 800f59c:	bf00      	nop
 800f59e:	3708      	adds	r7, #8
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	bd80      	pop	{r7, pc}

0800f5a4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     *        Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800f5a4:	b480      	push	{r7}
 800f5a6:	b083      	sub	sp, #12
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	685b      	ldr	r3, [r3, #4]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d010      	beq.n	800f5d6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	689b      	ldr	r3, [r3, #8]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d107      	bne.n	800f5cc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	68db      	ldr	r3, [r3, #12]
 800f5c0:	f003 0301 	and.w	r3, r3, #1
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d101      	bne.n	800f5cc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800f5c8:	2301      	movs	r3, #1
 800f5ca:	e000      	b.n	800f5ce <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800f5cc:	2300      	movs	r3, #0
 800f5ce:	2b01      	cmp	r3, #1
 800f5d0:	d001      	beq.n	800f5d6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800f5d2:	2301      	movs	r3, #1
 800f5d4:	e000      	b.n	800f5d8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800f5d6:	2300      	movs	r3, #0
    }
 800f5d8:	4618      	mov	r0, r3
 800f5da:	370c      	adds	r7, #12
 800f5dc:	46bd      	mov	sp, r7
 800f5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e2:	4770      	bx	lr

0800f5e4 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param col The color.
     *
     * @see Color::getColorFrom24BitRGB()
     */
    colortype(uint32_t col)
 800f5e4:	b480      	push	{r7}
 800f5e6:	b083      	sub	sp, #12
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	6078      	str	r0, [r7, #4]
 800f5ec:	6039      	str	r1, [r7, #0]
    {
        color = col;
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	683a      	ldr	r2, [r7, #0]
 800f5f2:	601a      	str	r2, [r3, #0]
    }
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	370c      	adds	r7, #12
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f600:	4770      	bx	lr

0800f602 <_ZN8touchgfx4RectC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Resulting in an empty Rect with coordinates 0,0.
     */
    Rect()
 800f602:	b480      	push	{r7}
 800f604:	b083      	sub	sp, #12
 800f606:	af00      	add	r7, sp, #0
 800f608:	6078      	str	r0, [r7, #4]
    {
        this->x = 0;
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	2200      	movs	r2, #0
 800f60e:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	2200      	movs	r2, #0
 800f614:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	2200      	movs	r2, #0
 800f61a:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	2200      	movs	r2, #0
 800f620:	80da      	strh	r2, [r3, #6]
    }
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	4618      	mov	r0, r3
 800f626:	370c      	adds	r7, #12
 800f628:	46bd      	mov	sp, r7
 800f62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62e:	4770      	bx	lr

0800f630 <_ZN8touchgfx4RectC1Essss>:
     * @param x      The x coordinate.
     * @param y      The y coordinate.
     * @param width  The width.
     * @param height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 800f630:	b480      	push	{r7}
 800f632:	b085      	sub	sp, #20
 800f634:	af00      	add	r7, sp, #0
 800f636:	60f8      	str	r0, [r7, #12]
 800f638:	4608      	mov	r0, r1
 800f63a:	4611      	mov	r1, r2
 800f63c:	461a      	mov	r2, r3
 800f63e:	4603      	mov	r3, r0
 800f640:	817b      	strh	r3, [r7, #10]
 800f642:	460b      	mov	r3, r1
 800f644:	813b      	strh	r3, [r7, #8]
 800f646:	4613      	mov	r3, r2
 800f648:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	897a      	ldrh	r2, [r7, #10]
 800f64e:	801a      	strh	r2, [r3, #0]
        this->y = y;
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	893a      	ldrh	r2, [r7, #8]
 800f654:	805a      	strh	r2, [r3, #2]
        this->width = width;
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	88fa      	ldrh	r2, [r7, #6]
 800f65a:	809a      	strh	r2, [r3, #4]
        this->height = height;
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	8b3a      	ldrh	r2, [r7, #24]
 800f660:	80da      	strh	r2, [r3, #6]
    }
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	4618      	mov	r0, r3
 800f666:	3714      	adds	r7, #20
 800f668:	46bd      	mov	sp, r7
 800f66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f66e:	4770      	bx	lr

0800f670 <_ZN8touchgfx6BitmapC1Et>:
     *        Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     *        array.
     *
     * @param id The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID)
 800f670:	b480      	push	{r7}
 800f672:	b083      	sub	sp, #12
 800f674:	af00      	add	r7, sp, #0
 800f676:	6078      	str	r0, [r7, #4]
 800f678:	460b      	mov	r3, r1
 800f67a:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	887a      	ldrh	r2, [r7, #2]
 800f680:	801a      	strh	r2, [r3, #0]
    {
    }
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	4618      	mov	r0, r3
 800f686:	370c      	adds	r7, #12
 800f688:	46bd      	mov	sp, r7
 800f68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f68e:	4770      	bx	lr

0800f690 <_ZN8touchgfx8DrawableC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Drawable() : rect(0, 0, 0, 0),
 800f690:	b580      	push	{r7, lr}
 800f692:	b084      	sub	sp, #16
 800f694:	af02      	add	r7, sp, #8
 800f696:	6078      	str	r0, [r7, #4]
        parent(0),
        nextSibling(0),
        nextDrawChainElement(0),
        touchable(false),
        visible(true)
 800f698:	4a13      	ldr	r2, [pc, #76]	; (800f6e8 <_ZN8touchgfx8DrawableC1Ev+0x58>)
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	601a      	str	r2, [r3, #0]
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	1d18      	adds	r0, r3, #4
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	9300      	str	r3, [sp, #0]
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	2200      	movs	r2, #0
 800f6aa:	2100      	movs	r1, #0
 800f6ac:	f7ff ffc0 	bl	800f630 <_ZN8touchgfx4RectC1Essss>
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	330c      	adds	r3, #12
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	f7ff ffa4 	bl	800f602 <_ZN8touchgfx4RectC1Ev>
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	2200      	movs	r2, #0
 800f6be:	615a      	str	r2, [r3, #20]
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	2200      	movs	r2, #0
 800f6c4:	619a      	str	r2, [r3, #24]
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	2200      	movs	r2, #0
 800f6ca:	61da      	str	r2, [r3, #28]
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	2200      	movs	r2, #0
 800f6d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	2201      	movs	r2, #1
 800f6d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	4618      	mov	r0, r3
 800f6e0:	3708      	adds	r7, #8
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	bd80      	pop	{r7, pc}
 800f6e6:	bf00      	nop
 800f6e8:	08026c6c 	.word	0x08026c6c

0800f6ec <_ZN8touchgfx8DrawableD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Drawable() { }
 800f6ec:	b480      	push	{r7}
 800f6ee:	b083      	sub	sp, #12
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	6078      	str	r0, [r7, #4]
 800f6f4:	4a04      	ldr	r2, [pc, #16]	; (800f708 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	601a      	str	r2, [r3, #0]
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	370c      	adds	r7, #12
 800f700:	46bd      	mov	sp, r7
 800f702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f706:	4770      	bx	lr
 800f708:	08026c6c 	.word	0x08026c6c

0800f70c <_ZN8touchgfx8DrawableD0Ev>:
 800f70c:	b580      	push	{r7, lr}
 800f70e:	b082      	sub	sp, #8
 800f710:	af00      	add	r7, sp, #0
 800f712:	6078      	str	r0, [r7, #4]
 800f714:	6878      	ldr	r0, [r7, #4]
 800f716:	f7ff ffe9 	bl	800f6ec <_ZN8touchgfx8DrawableD1Ev>
 800f71a:	2128      	movs	r1, #40	; 0x28
 800f71c:	6878      	ldr	r0, [r7, #4]
 800f71e:	f013 fe60 	bl	80233e2 <_ZdlPvj>
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	4618      	mov	r0, r3
 800f726:	3708      	adds	r7, #8
 800f728:	46bd      	mov	sp, r7
 800f72a:	bd80      	pop	{r7, pc}

0800f72c <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param x      The x coordinate of this Drawable.
     * @param y      The y coordinate of this Drawable.
     * @param width  The width of this Drawable.
     * @param height The height of this Drawable.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800f72c:	b580      	push	{r7, lr}
 800f72e:	b084      	sub	sp, #16
 800f730:	af00      	add	r7, sp, #0
 800f732:	60f8      	str	r0, [r7, #12]
 800f734:	4608      	mov	r0, r1
 800f736:	4611      	mov	r1, r2
 800f738:	461a      	mov	r2, r3
 800f73a:	4603      	mov	r3, r0
 800f73c:	817b      	strh	r3, [r7, #10]
 800f73e:	460b      	mov	r3, r1
 800f740:	813b      	strh	r3, [r7, #8]
 800f742:	4613      	mov	r3, r2
 800f744:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	3334      	adds	r3, #52	; 0x34
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800f752:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800f756:	68f8      	ldr	r0, [r7, #12]
 800f758:	4798      	blx	r3
        setWidth(width);
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	3338      	adds	r3, #56	; 0x38
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f766:	4611      	mov	r1, r2
 800f768:	68f8      	ldr	r0, [r7, #12]
 800f76a:	4798      	blx	r3
        setHeight(height);
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	333c      	adds	r3, #60	; 0x3c
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800f778:	4611      	mov	r1, r2
 800f77a:	68f8      	ldr	r0, [r7, #12]
 800f77c:	4798      	blx	r3
    }
 800f77e:	bf00      	nop
 800f780:	3710      	adds	r7, #16
 800f782:	46bd      	mov	sp, r7
 800f784:	bd80      	pop	{r7, pc}

0800f786 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     */
    virtual void setX(int16_t x)
 800f786:	b480      	push	{r7}
 800f788:	b083      	sub	sp, #12
 800f78a:	af00      	add	r7, sp, #0
 800f78c:	6078      	str	r0, [r7, #4]
 800f78e:	460b      	mov	r3, r1
 800f790:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	887a      	ldrh	r2, [r7, #2]
 800f796:	809a      	strh	r2, [r3, #4]
    }
 800f798:	bf00      	nop
 800f79a:	370c      	adds	r7, #12
 800f79c:	46bd      	mov	sp, r7
 800f79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a2:	4770      	bx	lr

0800f7a4 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setY(int16_t y)
 800f7a4:	b480      	push	{r7}
 800f7a6:	b083      	sub	sp, #12
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
 800f7ac:	460b      	mov	r3, r1
 800f7ae:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	887a      	ldrh	r2, [r7, #2]
 800f7b4:	80da      	strh	r2, [r3, #6]
    }
 800f7b6:	bf00      	nop
 800f7b8:	370c      	adds	r7, #12
 800f7ba:	46bd      	mov	sp, r7
 800f7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c0:	4770      	bx	lr

0800f7c2 <_ZN8touchgfx8Drawable5setXYEss>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setXY(int16_t x, int16_t y)
 800f7c2:	b580      	push	{r7, lr}
 800f7c4:	b082      	sub	sp, #8
 800f7c6:	af00      	add	r7, sp, #0
 800f7c8:	6078      	str	r0, [r7, #4]
 800f7ca:	460b      	mov	r3, r1
 800f7cc:	807b      	strh	r3, [r7, #2]
 800f7ce:	4613      	mov	r3, r2
 800f7d0:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	332c      	adds	r3, #44	; 0x2c
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800f7de:	4611      	mov	r1, r2
 800f7e0:	6878      	ldr	r0, [r7, #4]
 800f7e2:	4798      	blx	r3
        setY(y);
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	3330      	adds	r3, #48	; 0x30
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	f9b7 2000 	ldrsh.w	r2, [r7]
 800f7f0:	4611      	mov	r1, r2
 800f7f2:	6878      	ldr	r0, [r7, #4]
 800f7f4:	4798      	blx	r3
    }
 800f7f6:	bf00      	nop
 800f7f8:	3708      	adds	r7, #8
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	bd80      	pop	{r7, pc}

0800f7fe <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param width The new width.
     */
    virtual void setWidth(int16_t width)
 800f7fe:	b480      	push	{r7}
 800f800:	b083      	sub	sp, #12
 800f802:	af00      	add	r7, sp, #0
 800f804:	6078      	str	r0, [r7, #4]
 800f806:	460b      	mov	r3, r1
 800f808:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	887a      	ldrh	r2, [r7, #2]
 800f80e:	811a      	strh	r2, [r3, #8]
    }
 800f810:	bf00      	nop
 800f812:	370c      	adds	r7, #12
 800f814:	46bd      	mov	sp, r7
 800f816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f81a:	4770      	bx	lr

0800f81c <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param height The new height.
     */
    virtual void setHeight(int16_t height)
 800f81c:	b480      	push	{r7}
 800f81e:	b083      	sub	sp, #12
 800f820:	af00      	add	r7, sp, #0
 800f822:	6078      	str	r0, [r7, #4]
 800f824:	460b      	mov	r3, r1
 800f826:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	887a      	ldrh	r2, [r7, #2]
 800f82c:	815a      	strh	r2, [r3, #10]
    }
 800f82e:	bf00      	nop
 800f830:	370c      	adds	r7, #12
 800f832:	46bd      	mov	sp, r7
 800f834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f838:	4770      	bx	lr

0800f83a <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     *
     *        This function can be called on parent nodes to signal that the size of one or
     *        more of its children has changed. Currently only used in ScrollableContainer to
     *        redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged() { }
 800f83a:	b480      	push	{r7}
 800f83c:	b083      	sub	sp, #12
 800f83e:	af00      	add	r7, sp, #0
 800f840:	6078      	str	r0, [r7, #4]
 800f842:	bf00      	nop
 800f844:	370c      	adds	r7, #12
 800f846:	46bd      	mov	sp, r7
 800f848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f84c:	4770      	bx	lr

0800f84e <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *        Defines the event handler interface for ClickEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt) { }
 800f84e:	b480      	push	{r7}
 800f850:	b083      	sub	sp, #12
 800f852:	af00      	add	r7, sp, #0
 800f854:	6078      	str	r0, [r7, #4]
 800f856:	6039      	str	r1, [r7, #0]
 800f858:	bf00      	nop
 800f85a:	370c      	adds	r7, #12
 800f85c:	46bd      	mov	sp, r7
 800f85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f862:	4770      	bx	lr

0800f864 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *        Defines the event handler interface for GestureEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt) { }
 800f864:	b480      	push	{r7}
 800f866:	b083      	sub	sp, #12
 800f868:	af00      	add	r7, sp, #0
 800f86a:	6078      	str	r0, [r7, #4]
 800f86c:	6039      	str	r1, [r7, #0]
 800f86e:	bf00      	nop
 800f870:	370c      	adds	r7, #12
 800f872:	46bd      	mov	sp, r7
 800f874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f878:	4770      	bx	lr

0800f87a <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *        Defines the event handler interface for DragEvents. The event is only received if
     *        the drawable is touchable.
     *
     * @param evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt) { }
 800f87a:	b480      	push	{r7}
 800f87c:	b083      	sub	sp, #12
 800f87e:	af00      	add	r7, sp, #0
 800f880:	6078      	str	r0, [r7, #4]
 800f882:	6039      	str	r1, [r7, #0]
 800f884:	bf00      	nop
 800f886:	370c      	adds	r7, #12
 800f888:	46bd      	mov	sp, r7
 800f88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f88e:	4770      	bx	lr

0800f890 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *        Called periodically by the framework if the Drawable instance has subscribed to
     *        timer ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent() { }
 800f890:	b480      	push	{r7}
 800f892:	b083      	sub	sp, #12
 800f894:	af00      	add	r7, sp, #0
 800f896:	6078      	str	r0, [r7, #4]
 800f898:	bf00      	nop
 800f89a:	370c      	adds	r7, #12
 800f89c:	46bd      	mov	sp, r7
 800f89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a2:	4770      	bx	lr

0800f8a4 <_ZN8touchgfx8Drawable10setVisibleEb>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param vis true if this Drawable should be visible. By default, drawables are visible unless
     *            this function has been called with false as argument.
     */
    void setVisible(bool vis)
 800f8a4:	b480      	push	{r7}
 800f8a6:	b083      	sub	sp, #12
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	6078      	str	r0, [r7, #4]
 800f8ac:	460b      	mov	r3, r1
 800f8ae:	70fb      	strb	r3, [r7, #3]
    {
        visible = vis;
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	78fa      	ldrb	r2, [r7, #3]
 800f8b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 800f8b8:	bf00      	nop
 800f8ba:	370c      	adds	r7, #12
 800f8bc:	46bd      	mov	sp, r7
 800f8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c2:	4770      	bx	lr

0800f8c4 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     * @return true if the Drawable is visible.
     * @return True if visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800f8c4:	b480      	push	{r7}
 800f8c6:	b083      	sub	sp, #12
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	370c      	adds	r7, #12
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8dc:	4770      	bx	lr

0800f8de <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800f8de:	b480      	push	{r7}
 800f8e0:	b083      	sub	sp, #12
 800f8e2:	af00      	add	r7, sp, #0
 800f8e4:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	370c      	adds	r7, #12
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f6:	4770      	bx	lr

0800f8f8 <_ZN8touchgfx8Drawable6moveToEss>:
     * @note Will redraw the appropriate areas of the screen.
     *
     * @param x The absolute position to move to.
     * @param y The absolute position to move to.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800f8f8:	b580      	push	{r7, lr}
 800f8fa:	b082      	sub	sp, #8
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	6078      	str	r0, [r7, #4]
 800f900:	460b      	mov	r3, r1
 800f902:	807b      	strh	r3, [r7, #2]
 800f904:	4613      	mov	r3, r2
 800f906:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	3354      	adds	r3, #84	; 0x54
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	8879      	ldrh	r1, [r7, #2]
 800f912:	687a      	ldr	r2, [r7, #4]
 800f914:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800f918:	b292      	uxth	r2, r2
 800f91a:	1a8a      	subs	r2, r1, r2
 800f91c:	b292      	uxth	r2, r2
 800f91e:	b210      	sxth	r0, r2
 800f920:	8839      	ldrh	r1, [r7, #0]
 800f922:	687a      	ldr	r2, [r7, #4]
 800f924:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800f928:	b292      	uxth	r2, r2
 800f92a:	1a8a      	subs	r2, r1, r2
 800f92c:	b292      	uxth	r2, r2
 800f92e:	b212      	sxth	r2, r2
 800f930:	4601      	mov	r1, r0
 800f932:	6878      	ldr	r0, [r7, #4]
 800f934:	4798      	blx	r3
    }
 800f936:	bf00      	nop
 800f938:	3708      	adds	r7, #8
 800f93a:	46bd      	mov	sp, r7
 800f93c:	bd80      	pop	{r7, pc}

0800f93e <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     *        Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800f93e:	b480      	push	{r7}
 800f940:	b083      	sub	sp, #12
 800f942:	af00      	add	r7, sp, #0
 800f944:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f94c:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f954:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f95c:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800f95e:	bf00      	nop
 800f960:	370c      	adds	r7, #12
 800f962:	46bd      	mov	sp, r7
 800f964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f968:	4770      	bx	lr

0800f96a <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     *
     * @param invalidatedArea              Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800f96a:	b580      	push	{r7, lr}
 800f96c:	b084      	sub	sp, #16
 800f96e:	af00      	add	r7, sp, #0
 800f970:	60f8      	str	r0, [r7, #12]
 800f972:	60b9      	str	r1, [r7, #8]
 800f974:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 800f976:	68f8      	ldr	r0, [r7, #12]
 800f978:	f7ff ffe1 	bl	800f93e <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	681a      	ldr	r2, [r3, #0]
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	68fa      	ldr	r2, [r7, #12]
 800f988:	601a      	str	r2, [r3, #0]
    }
 800f98a:	bf00      	nop
 800f98c:	3710      	adds	r7, #16
 800f98e:	46bd      	mov	sp, r7
 800f990:	bd80      	pop	{r7, pc}
	...

0800f994 <_ZN8touchgfx9ContainerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Container() { }
 800f994:	b580      	push	{r7, lr}
 800f996:	b082      	sub	sp, #8
 800f998:	af00      	add	r7, sp, #0
 800f99a:	6078      	str	r0, [r7, #4]
 800f99c:	4a05      	ldr	r2, [pc, #20]	; (800f9b4 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	601a      	str	r2, [r3, #0]
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	f7ff fea1 	bl	800f6ec <_ZN8touchgfx8DrawableD1Ev>
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	4618      	mov	r0, r3
 800f9ae:	3708      	adds	r7, #8
 800f9b0:	46bd      	mov	sp, r7
 800f9b2:	bd80      	pop	{r7, pc}
 800f9b4:	08025a54 	.word	0x08025a54

0800f9b8 <_ZN8touchgfx9ContainerD0Ev>:
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b082      	sub	sp, #8
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	6078      	str	r0, [r7, #4]
 800f9c0:	6878      	ldr	r0, [r7, #4]
 800f9c2:	f7ff ffe7 	bl	800f994 <_ZN8touchgfx9ContainerD1Ev>
 800f9c6:	212c      	movs	r1, #44	; 0x2c
 800f9c8:	6878      	ldr	r0, [r7, #4]
 800f9ca:	f013 fd0a 	bl	80233e2 <_ZdlPvj>
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	3708      	adds	r7, #8
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	bd80      	pop	{r7, pc}

0800f9d8 <_ZN8touchgfx6ScreenD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Screen() { }
 800f9d8:	b580      	push	{r7, lr}
 800f9da:	b082      	sub	sp, #8
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	6078      	str	r0, [r7, #4]
 800f9e0:	4a06      	ldr	r2, [pc, #24]	; (800f9fc <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	601a      	str	r2, [r3, #0]
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	3304      	adds	r3, #4
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	f7ff ffd2 	bl	800f994 <_ZN8touchgfx9ContainerD1Ev>
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	3708      	adds	r7, #8
 800f9f6:	46bd      	mov	sp, r7
 800f9f8:	bd80      	pop	{r7, pc}
 800f9fa:	bf00      	nop
 800f9fc:	08026d64 	.word	0x08026d64

0800fa00 <_ZN8touchgfx6ScreenD0Ev>:
 800fa00:	b580      	push	{r7, lr}
 800fa02:	b082      	sub	sp, #8
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	6078      	str	r0, [r7, #4]
 800fa08:	6878      	ldr	r0, [r7, #4]
 800fa0a:	f7ff ffe5 	bl	800f9d8 <_ZN8touchgfx6ScreenD1Ev>
 800fa0e:	213c      	movs	r1, #60	; 0x3c
 800fa10:	6878      	ldr	r0, [r7, #4]
 800fa12:	f013 fce6 	bl	80233e2 <_ZdlPvj>
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	4618      	mov	r0, r3
 800fa1a:	3708      	adds	r7, #8
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	bd80      	pop	{r7, pc}

0800fa20 <_ZN8touchgfx6Screen11setupScreenEv>:
     *        Base version does nothing, but place any screen specific initialization code in
     *        an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void setupScreen() { }
 800fa20:	b480      	push	{r7}
 800fa22:	b083      	sub	sp, #12
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
 800fa28:	bf00      	nop
 800fa2a:	370c      	adds	r7, #12
 800fa2c:	46bd      	mov	sp, r7
 800fa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa32:	4770      	bx	lr

0800fa34 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *        Base version does nothing, but override to do screen specific initialization code
     *        that has to be done after the transition to the screen.
     *
     * @see touchgfx::Application::handleTick()
     */
    virtual void afterTransition() { }
 800fa34:	b480      	push	{r7}
 800fa36:	b083      	sub	sp, #12
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
 800fa3c:	bf00      	nop
 800fa3e:	370c      	adds	r7, #12
 800fa40:	46bd      	mov	sp, r7
 800fa42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa46:	4770      	bx	lr

0800fa48 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *        displayed. Base version does nothing, but place any screen specific cleanup code
     *        in an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void tearDownScreen() { }
 800fa48:	b480      	push	{r7}
 800fa4a:	b083      	sub	sp, #12
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	6078      	str	r0, [r7, #4]
 800fa50:	bf00      	nop
 800fa52:	370c      	adds	r7, #12
 800fa54:	46bd      	mov	sp, r7
 800fa56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa5a:	4770      	bx	lr

0800fa5c <_ZN8touchgfx6Screen15handleTickEventEv>:
     *        Application::TICK_INTERVAL_MS.
     *
     *        Called by the Application on the current screen with a frequency of
     *        Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800fa5c:	b480      	push	{r7}
 800fa5e:	b083      	sub	sp, #12
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	6078      	str	r0, [r7, #4]
    {
    }
 800fa64:	bf00      	nop
 800fa66:	370c      	adds	r7, #12
 800fa68:	46bd      	mov	sp, r7
 800fa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6e:	4770      	bx	lr

0800fa70 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *        Called by the Application on the reception of a "key", the meaning of which is
     *        platform/application specific. Default implementation does nothing.
     *
     * @param key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800fa70:	b480      	push	{r7}
 800fa72:	b083      	sub	sp, #12
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	6078      	str	r0, [r7, #4]
 800fa78:	460b      	mov	r3, r1
 800fa7a:	70fb      	strb	r3, [r7, #3]
    {
    }
 800fa7c:	bf00      	nop
 800fa7e:	370c      	adds	r7, #12
 800fa80:	46bd      	mov	sp, r7
 800fa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa86:	4770      	bx	lr

0800fa88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     *
     * @param [in] d The Drawable to add.
     */
    void add(Drawable& d)
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b082      	sub	sp, #8
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	6078      	str	r0, [r7, #4]
 800fa90:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	3304      	adds	r3, #4
 800fa96:	6839      	ldr	r1, [r7, #0]
 800fa98:	4618      	mov	r0, r3
 800fa9a:	f004 fc85 	bl	80143a8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800fa9e:	bf00      	nop
 800faa0:	3708      	adds	r7, #8
 800faa2:	46bd      	mov	sp, r7
 800faa4:	bd80      	pop	{r7, pc}
	...

0800faa8 <_ZN8touchgfx6WidgetC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Widget() : Drawable() { }
 800faa8:	b580      	push	{r7, lr}
 800faaa:	b082      	sub	sp, #8
 800faac:	af00      	add	r7, sp, #0
 800faae:	6078      	str	r0, [r7, #4]
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	4618      	mov	r0, r3
 800fab4:	f7ff fdec 	bl	800f690 <_ZN8touchgfx8DrawableC1Ev>
 800fab8:	4a03      	ldr	r2, [pc, #12]	; (800fac8 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	601a      	str	r2, [r3, #0]
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	4618      	mov	r0, r3
 800fac2:	3708      	adds	r7, #8
 800fac4:	46bd      	mov	sp, r7
 800fac6:	bd80      	pop	{r7, pc}
 800fac8:	08024f00 	.word	0x08024f00

0800facc <_ZN8touchgfx6WidgetD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Widget() { }
 800facc:	b580      	push	{r7, lr}
 800face:	b082      	sub	sp, #8
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
 800fad4:	4a05      	ldr	r2, [pc, #20]	; (800faec <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	601a      	str	r2, [r3, #0]
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	4618      	mov	r0, r3
 800fade:	f7ff fe05 	bl	800f6ec <_ZN8touchgfx8DrawableD1Ev>
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	4618      	mov	r0, r3
 800fae6:	3708      	adds	r7, #8
 800fae8:	46bd      	mov	sp, r7
 800faea:	bd80      	pop	{r7, pc}
 800faec:	08024f00 	.word	0x08024f00

0800faf0 <_ZN8touchgfx6WidgetD0Ev>:
 800faf0:	b580      	push	{r7, lr}
 800faf2:	b082      	sub	sp, #8
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	6078      	str	r0, [r7, #4]
 800faf8:	6878      	ldr	r0, [r7, #4]
 800fafa:	f7ff ffe7 	bl	800facc <_ZN8touchgfx6WidgetD1Ev>
 800fafe:	2128      	movs	r1, #40	; 0x28
 800fb00:	6878      	ldr	r0, [r7, #4]
 800fb02:	f013 fc6e 	bl	80233e2 <_ZdlPvj>
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	4618      	mov	r0, r3
 800fb0a:	3708      	adds	r7, #8
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	bd80      	pop	{r7, pc}

0800fb10 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param x          The point of intersection expressed in coordinates relative to the parent.
     * @param y          The y coordinate.
     * @param [out] last Result will be placed here.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b084      	sub	sp, #16
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	60f8      	str	r0, [r7, #12]
 800fb18:	607b      	str	r3, [r7, #4]
 800fb1a:	460b      	mov	r3, r1
 800fb1c:	817b      	strh	r3, [r7, #10]
 800fb1e:	4613      	mov	r3, r2
 800fb20:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	4618      	mov	r0, r3
 800fb26:	f7ff fecd 	bl	800f8c4 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800fb2a:	4603      	mov	r3, r0
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d008      	beq.n	800fb42 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	4618      	mov	r0, r3
 800fb34:	f7ff fed3 	bl	800f8de <_ZNK8touchgfx8Drawable11isTouchableEv>
 800fb38:	4603      	mov	r3, r0
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d001      	beq.n	800fb42 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800fb3e:	2301      	movs	r3, #1
 800fb40:	e000      	b.n	800fb44 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800fb42:	2300      	movs	r3, #0
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d002      	beq.n	800fb4e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800fb48:	68fa      	ldr	r2, [r7, #12]
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	601a      	str	r2, [r3, #0]
        }
    }
 800fb4e:	bf00      	nop
 800fb50:	3710      	adds	r7, #16
 800fb52:	46bd      	mov	sp, r7
 800fb54:	bd80      	pop	{r7, pc}
	...

0800fb58 <_ZN8touchgfx3BoxC1Ev>:
     *
     * @brief Constructor.
     *
     *        Constructs a new Box with a default alpha value of 255 (solid)
     */
    Box() : Widget(), alpha(255), color(0), reportAsSolid(false)
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	b082      	sub	sp, #8
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	6078      	str	r0, [r7, #4]
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	4618      	mov	r0, r3
 800fb64:	f7ff ffa0 	bl	800faa8 <_ZN8touchgfx6WidgetC1Ev>
 800fb68:	4a0a      	ldr	r2, [pc, #40]	; (800fb94 <_ZN8touchgfx3BoxC1Ev+0x3c>)
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	601a      	str	r2, [r3, #0]
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	22ff      	movs	r2, #255	; 0xff
 800fb72:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	3328      	adds	r3, #40	; 0x28
 800fb7a:	2100      	movs	r1, #0
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	f7ff fd31 	bl	800f5e4 <_ZN8touchgfx9colortypeC1Em>
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	2200      	movs	r2, #0
 800fb86:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
    }
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	3708      	adds	r7, #8
 800fb90:	46bd      	mov	sp, r7
 800fb92:	bd80      	pop	{r7, pc}
 800fb94:	0802678c 	.word	0x0802678c

0800fb98 <_ZN8touchgfx3BoxD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Box() {}
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b082      	sub	sp, #8
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	6078      	str	r0, [r7, #4]
 800fba0:	4a05      	ldr	r2, [pc, #20]	; (800fbb8 <_ZN8touchgfx3BoxD1Ev+0x20>)
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	601a      	str	r2, [r3, #0]
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	4618      	mov	r0, r3
 800fbaa:	f7ff ff8f 	bl	800facc <_ZN8touchgfx6WidgetD1Ev>
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	3708      	adds	r7, #8
 800fbb4:	46bd      	mov	sp, r7
 800fbb6:	bd80      	pop	{r7, pc}
 800fbb8:	0802678c 	.word	0x0802678c

0800fbbc <_ZN8touchgfx3BoxD0Ev>:
 800fbbc:	b580      	push	{r7, lr}
 800fbbe:	b082      	sub	sp, #8
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	6078      	str	r0, [r7, #4]
 800fbc4:	6878      	ldr	r0, [r7, #4]
 800fbc6:	f7ff ffe7 	bl	800fb98 <_ZN8touchgfx3BoxD1Ev>
 800fbca:	2130      	movs	r1, #48	; 0x30
 800fbcc:	6878      	ldr	r0, [r7, #4]
 800fbce:	f013 fc08 	bl	80233e2 <_ZdlPvj>
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	4618      	mov	r0, r3
 800fbd6:	3708      	adds	r7, #8
 800fbd8:	46bd      	mov	sp, r7
 800fbda:	bd80      	pop	{r7, pc}

0800fbdc <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     *        Sets the color of the rectangle.
     *
     * @param color The color of the box.
     */
    void setColor(colortype color)
 800fbdc:	b480      	push	{r7}
 800fbde:	b083      	sub	sp, #12
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
 800fbe4:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	683a      	ldr	r2, [r7, #0]
 800fbea:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800fbec:	bf00      	nop
 800fbee:	370c      	adds	r7, #12
 800fbf0:	46bd      	mov	sp, r7
 800fbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf6:	4770      	bx	lr

0800fbf8 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID) : typedTextId(id)
 800fbf8:	b480      	push	{r7}
 800fbfa:	b083      	sub	sp, #12
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	6078      	str	r0, [r7, #4]
 800fc00:	460b      	mov	r3, r1
 800fc02:	807b      	strh	r3, [r7, #2]
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	887a      	ldrh	r2, [r7, #2]
 800fc08:	801a      	strh	r2, [r3, #0]
    }
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	370c      	adds	r7, #12
 800fc10:	46bd      	mov	sp, r7
 800fc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc16:	4770      	bx	lr

0800fc18 <_ZNK8touchgfx9TypedText7getTextEv>:
    const Unicode::UnicodeChar* getText() const
 800fc18:	b580      	push	{r7, lr}
 800fc1a:	b082      	sub	sp, #8
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	6078      	str	r0, [r7, #4]
        assertValid();
 800fc20:	6878      	ldr	r0, [r7, #4]
 800fc22:	f7fe fd97 	bl	800e754 <_ZNK8touchgfx9TypedText11assertValidEv>
        return texts->getText(typedTextId);
 800fc26:	4b06      	ldr	r3, [pc, #24]	; (800fc40 <_ZNK8touchgfx9TypedText7getTextEv+0x28>)
 800fc28:	681a      	ldr	r2, [r3, #0]
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	881b      	ldrh	r3, [r3, #0]
 800fc2e:	4619      	mov	r1, r3
 800fc30:	4610      	mov	r0, r2
 800fc32:	f001 ff05 	bl	8011a40 <_ZNK8touchgfx5Texts7getTextEt>
 800fc36:	4603      	mov	r3, r0
    }
 800fc38:	4618      	mov	r0, r3
 800fc3a:	3708      	adds	r7, #8
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	bd80      	pop	{r7, pc}
 800fc40:	2000bb74 	.word	0x2000bb74

0800fc44 <_ZN8touchgfx8TextAreaC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Create an empty TextArea. Default color is black.
     */
    TextArea()
 800fc44:	b580      	push	{r7, lr}
 800fc46:	b082      	sub	sp, #8
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	4618      	mov	r0, r3
 800fc50:	f7ff ff2a 	bl	800faa8 <_ZN8touchgfx6WidgetC1Ev>
 800fc54:	4a13      	ldr	r2, [pc, #76]	; (800fca4 <_ZN8touchgfx8TextAreaC1Ev+0x60>)
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	601a      	str	r2, [r3, #0]
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	3326      	adds	r3, #38	; 0x26
 800fc5e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800fc62:	4618      	mov	r0, r3
 800fc64:	f7ff ffc8 	bl	800fbf8 <_ZN8touchgfx9TypedTextC1Et>
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	3328      	adds	r3, #40	; 0x28
 800fc6c:	2100      	movs	r1, #0
 800fc6e:	4618      	mov	r0, r3
 800fc70:	f7ff fcb8 	bl	800f5e4 <_ZN8touchgfx9colortypeC1Em>
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	2200      	movs	r2, #0
 800fc78:	859a      	strh	r2, [r3, #44]	; 0x2c
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	22ff      	movs	r2, #255	; 0xff
 800fc7e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	2200      	movs	r2, #0
 800fc86:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	2200      	movs	r2, #0
 800fc8e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	2200      	movs	r2, #0
 800fc96:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    {
    }
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	3708      	adds	r7, #8
 800fca0:	46bd      	mov	sp, r7
 800fca2:	bd80      	pop	{r7, pc}
 800fca4:	08026710 	.word	0x08026710

0800fca8 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
     *
     *        Gets solid rectangle.
     *
     * @return the largest solid rectangle for this widget. For a TextArea, this is an empty area.
     */
    virtual Rect getSolidRect() const
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	b084      	sub	sp, #16
 800fcac:	af02      	add	r7, sp, #8
 800fcae:	6078      	str	r0, [r7, #4]
 800fcb0:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, 0, 0);
 800fcb2:	2300      	movs	r3, #0
 800fcb4:	9300      	str	r3, [sp, #0]
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	2200      	movs	r2, #0
 800fcba:	2100      	movs	r1, #0
 800fcbc:	6878      	ldr	r0, [r7, #4]
 800fcbe:	f7ff fcb7 	bl	800f630 <_ZN8touchgfx4RectC1Essss>
    }
 800fcc2:	6878      	ldr	r0, [r7, #4]
 800fcc4:	3708      	adds	r7, #8
 800fcc6:	46bd      	mov	sp, r7
 800fcc8:	bd80      	pop	{r7, pc}

0800fcca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>:
     *
     *        Sets the color of the text.
     *
     * @param color The color to use.
     */
    inline void setColor(colortype color)
 800fcca:	b480      	push	{r7}
 800fccc:	b083      	sub	sp, #12
 800fcce:	af00      	add	r7, sp, #0
 800fcd0:	6078      	str	r0, [r7, #4]
 800fcd2:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	683a      	ldr	r2, [r7, #0]
 800fcd8:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800fcda:	bf00      	nop
 800fcdc:	370c      	adds	r7, #12
 800fcde:	46bd      	mov	sp, r7
 800fce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce4:	4770      	bx	lr

0800fce6 <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *        changes you have to set the baseline again. Note that setTypedText must be called
     *        prior to setting the baseline.
     *
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 800fce6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fce8:	b085      	sub	sp, #20
 800fcea:	af00      	add	r7, sp, #0
 800fcec:	6078      	str	r0, [r7, #4]
 800fcee:	460b      	mov	r3, r1
 800fcf0:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 800fcf2:	687e      	ldr	r6, [r7, #4]
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	3330      	adds	r3, #48	; 0x30
 800fcfa:	681c      	ldr	r4, [r3, #0]
 800fcfc:	887d      	ldrh	r5, [r7, #2]
 800fcfe:	6878      	ldr	r0, [r7, #4]
 800fd00:	f000 f845 	bl	800fd8e <_ZNK8touchgfx8TextArea12getTypedTextEv>
 800fd04:	4603      	mov	r3, r0
 800fd06:	81bb      	strh	r3, [r7, #12]
 800fd08:	f107 030c 	add.w	r3, r7, #12
 800fd0c:	4618      	mov	r0, r3
 800fd0e:	f7fe fced 	bl	800e6ec <_ZNK8touchgfx9TypedText7getFontEv>
 800fd12:	4602      	mov	r2, r0
 800fd14:	6813      	ldr	r3, [r2, #0]
 800fd16:	332c      	adds	r3, #44	; 0x2c
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	4610      	mov	r0, r2
 800fd1c:	4798      	blx	r3
 800fd1e:	4603      	mov	r3, r0
 800fd20:	1aeb      	subs	r3, r5, r3
 800fd22:	b29b      	uxth	r3, r3
 800fd24:	b21b      	sxth	r3, r3
 800fd26:	4619      	mov	r1, r3
 800fd28:	4630      	mov	r0, r6
 800fd2a:	47a0      	blx	r4
    }
 800fd2c:	bf00      	nop
 800fd2e:	3714      	adds	r7, #20
 800fd30:	46bd      	mov	sp, r7
 800fd32:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fd34 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *        coordinate of the TextArea.
     *
     * @param x         The x coordinate of the TextArea.
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 800fd34:	b580      	push	{r7, lr}
 800fd36:	b082      	sub	sp, #8
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	6078      	str	r0, [r7, #4]
 800fd3c:	460b      	mov	r3, r1
 800fd3e:	807b      	strh	r3, [r7, #2]
 800fd40:	4613      	mov	r3, r2
 800fd42:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800fd44:	687a      	ldr	r2, [r7, #4]
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	332c      	adds	r3, #44	; 0x2c
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800fd52:	4610      	mov	r0, r2
 800fd54:	4798      	blx	r3
        setBaselineY(baselineY);
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	3360      	adds	r3, #96	; 0x60
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	f9b7 2000 	ldrsh.w	r2, [r7]
 800fd62:	4611      	mov	r1, r2
 800fd64:	6878      	ldr	r0, [r7, #4]
 800fd66:	4798      	blx	r3
    }
 800fd68:	bf00      	nop
 800fd6a:	3708      	adds	r7, #8
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	bd80      	pop	{r7, pc}

0800fd70 <_ZN8touchgfx8TextArea14setLinespacingEs>:
     *
     *        Sets the line spacing of the TextArea.
     *
     * @param space The line spacing of use in the TextArea.
     */
    inline void setLinespacing(int16_t space)
 800fd70:	b480      	push	{r7}
 800fd72:	b083      	sub	sp, #12
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	6078      	str	r0, [r7, #4]
 800fd78:	460b      	mov	r3, r1
 800fd7a:	807b      	strh	r3, [r7, #2]
    {
        linespace = space;
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	887a      	ldrh	r2, [r7, #2]
 800fd80:	859a      	strh	r2, [r3, #44]	; 0x2c
    }
 800fd82:	bf00      	nop
 800fd84:	370c      	adds	r7, #12
 800fd86:	46bd      	mov	sp, r7
 800fd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd8c:	4770      	bx	lr

0800fd8e <_ZNK8touchgfx8TextArea12getTypedTextEv>:
     *
     *        Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    TypedText getTypedText() const
 800fd8e:	b480      	push	{r7}
 800fd90:	b083      	sub	sp, #12
 800fd92:	af00      	add	r7, sp, #0
 800fd94:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    }
 800fd9a:	4618      	mov	r0, r3
 800fd9c:	370c      	adds	r7, #12
 800fd9e:	46bd      	mov	sp, r7
 800fda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda4:	4770      	bx	lr
	...

0800fda8 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 800fda8:	b580      	push	{r7, lr}
 800fdaa:	b082      	sub	sp, #8
 800fdac:	af00      	add	r7, sp, #0
 800fdae:	6078      	str	r0, [r7, #4]
 800fdb0:	4a05      	ldr	r2, [pc, #20]	; (800fdc8 <_ZN8touchgfx8TextAreaD1Ev+0x20>)
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	601a      	str	r2, [r3, #0]
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	4618      	mov	r0, r3
 800fdba:	f7ff fe87 	bl	800facc <_ZN8touchgfx6WidgetD1Ev>
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	4618      	mov	r0, r3
 800fdc2:	3708      	adds	r7, #8
 800fdc4:	46bd      	mov	sp, r7
 800fdc6:	bd80      	pop	{r7, pc}
 800fdc8:	08026710 	.word	0x08026710

0800fdcc <_ZN8touchgfx8TextAreaD0Ev>:
 800fdcc:	b580      	push	{r7, lr}
 800fdce:	b082      	sub	sp, #8
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	6078      	str	r0, [r7, #4]
 800fdd4:	6878      	ldr	r0, [r7, #4]
 800fdd6:	f7ff ffe7 	bl	800fda8 <_ZN8touchgfx8TextAreaD1Ev>
 800fdda:	2134      	movs	r1, #52	; 0x34
 800fddc:	6878      	ldr	r0, [r7, #4]
 800fdde:	f013 fb00 	bl	80233e2 <_ZdlPvj>
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	4618      	mov	r0, r3
 800fde6:	3708      	adds	r7, #8
 800fde8:	46bd      	mov	sp, r7
 800fdea:	bd80      	pop	{r7, pc}

0800fdec <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithWildcardBase()
 800fdec:	b580      	push	{r7, lr}
 800fdee:	b082      	sub	sp, #8
 800fdf0:	af00      	add	r7, sp, #0
 800fdf2:	6078      	str	r0, [r7, #4]
        : TextArea()
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	4618      	mov	r0, r3
 800fdf8:	f7ff ff24 	bl	800fc44 <_ZN8touchgfx8TextAreaC1Ev>
 800fdfc:	4a03      	ldr	r2, [pc, #12]	; (800fe0c <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev+0x20>)
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	601a      	str	r2, [r3, #0]
    {
    }
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	4618      	mov	r0, r3
 800fe06:	3708      	adds	r7, #8
 800fe08:	46bd      	mov	sp, r7
 800fe0a:	bd80      	pop	{r7, pc}
 800fe0c:	08024e84 	.word	0x08024e84

0800fe10 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 800fe10:	b580      	push	{r7, lr}
 800fe12:	b082      	sub	sp, #8
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	6078      	str	r0, [r7, #4]
 800fe18:	4a05      	ldr	r2, [pc, #20]	; (800fe30 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	601a      	str	r2, [r3, #0]
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	4618      	mov	r0, r3
 800fe22:	f7ff ffc1 	bl	800fda8 <_ZN8touchgfx8TextAreaD1Ev>
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	4618      	mov	r0, r3
 800fe2a:	3708      	adds	r7, #8
 800fe2c:	46bd      	mov	sp, r7
 800fe2e:	bd80      	pop	{r7, pc}
 800fe30:	08024e84 	.word	0x08024e84

0800fe34 <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 800fe34:	b580      	push	{r7, lr}
 800fe36:	b082      	sub	sp, #8
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
 800fe3c:	6878      	ldr	r0, [r7, #4]
 800fe3e:	f7ff ffe7 	bl	800fe10 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 800fe42:	2134      	movs	r1, #52	; 0x34
 800fe44:	6878      	ldr	r0, [r7, #4]
 800fe46:	f013 facc 	bl	80233e2 <_ZdlPvj>
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	3708      	adds	r7, #8
 800fe50:	46bd      	mov	sp, r7
 800fe52:	bd80      	pop	{r7, pc}

0800fe54 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithOneWildcard()
 800fe54:	b580      	push	{r7, lr}
 800fe56:	b082      	sub	sp, #8
 800fe58:	af00      	add	r7, sp, #0
 800fe5a:	6078      	str	r0, [r7, #4]
        : TextAreaWithWildcardBase(), wildcard(0)
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	4618      	mov	r0, r3
 800fe60:	f7ff ffc4 	bl	800fdec <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>
 800fe64:	4a05      	ldr	r2, [pc, #20]	; (800fe7c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	601a      	str	r2, [r3, #0]
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	2200      	movs	r2, #0
 800fe6e:	635a      	str	r2, [r3, #52]	; 0x34
    {
    }
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	4618      	mov	r0, r3
 800fe74:	3708      	adds	r7, #8
 800fe76:	46bd      	mov	sp, r7
 800fe78:	bd80      	pop	{r7, pc}
 800fe7a:	bf00      	nop
 800fe7c:	080267f4 	.word	0x080267f4

0800fe80 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     *
     *        Sets the wildcard in the text.Must be a zero-terminated UnicodeChar array.
     *
     * @param value A pointer to the UnicodeChar to set the wildcard to.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 800fe80:	b480      	push	{r7}
 800fe82:	b083      	sub	sp, #12
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	6078      	str	r0, [r7, #4]
 800fe88:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	683a      	ldr	r2, [r7, #0]
 800fe8e:	635a      	str	r2, [r3, #52]	; 0x34
    }
 800fe90:	bf00      	nop
 800fe92:	370c      	adds	r7, #12
 800fe94:	46bd      	mov	sp, r7
 800fe96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe9a:	4770      	bx	lr

0800fe9c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *        Constructs a new Image with a default alpha value of 255 (solid) and a default
     *        Bitmap if none is specified.
     *
     * @param bmp The bitmap to display.
     */
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 800fe9c:	b580      	push	{r7, lr}
 800fe9e:	b082      	sub	sp, #8
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	6078      	str	r0, [r7, #4]
 800fea4:	6039      	str	r1, [r7, #0]
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	4618      	mov	r0, r3
 800feaa:	f7ff fdfd 	bl	800faa8 <_ZN8touchgfx6WidgetC1Ev>
 800feae:	4a0b      	ldr	r2, [pc, #44]	; (800fedc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x40>)
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	601a      	str	r2, [r3, #0]
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	3326      	adds	r3, #38	; 0x26
 800feb8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800febc:	4618      	mov	r0, r3
 800febe:	f7ff fbd7 	bl	800f670 <_ZN8touchgfx6BitmapC1Et>
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	22ff      	movs	r2, #255	; 0xff
 800fec6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        setBitmap(bmp);
 800feca:	6839      	ldr	r1, [r7, #0]
 800fecc:	6878      	ldr	r0, [r7, #4]
 800fece:	f006 fa11 	bl	80162f4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	4618      	mov	r0, r3
 800fed6:	3708      	adds	r7, #8
 800fed8:	46bd      	mov	sp, r7
 800feda:	bd80      	pop	{r7, pc}
 800fedc:	080268d8 	.word	0x080268d8

0800fee0 <_ZN8touchgfx13BoxWithBorderC1Ev>:
    /**
     * @fn BoxWithBorder::BoxWithBorder()
     *
     * @brief Default constructor.
     */
    BoxWithBorder() : Widget(), alpha(255), color(0), borderColor(0), borderSize(0)
 800fee0:	b580      	push	{r7, lr}
 800fee2:	b082      	sub	sp, #8
 800fee4:	af00      	add	r7, sp, #0
 800fee6:	6078      	str	r0, [r7, #4]
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	4618      	mov	r0, r3
 800feec:	f7ff fddc 	bl	800faa8 <_ZN8touchgfx6WidgetC1Ev>
 800fef0:	4a0d      	ldr	r2, [pc, #52]	; (800ff28 <_ZN8touchgfx13BoxWithBorderC1Ev+0x48>)
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	601a      	str	r2, [r3, #0]
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	22ff      	movs	r2, #255	; 0xff
 800fefa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	3328      	adds	r3, #40	; 0x28
 800ff02:	2100      	movs	r1, #0
 800ff04:	4618      	mov	r0, r3
 800ff06:	f7ff fb6d 	bl	800f5e4 <_ZN8touchgfx9colortypeC1Em>
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	332c      	adds	r3, #44	; 0x2c
 800ff0e:	2100      	movs	r1, #0
 800ff10:	4618      	mov	r0, r3
 800ff12:	f7ff fb67 	bl	800f5e4 <_ZN8touchgfx9colortypeC1Em>
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	2200      	movs	r2, #0
 800ff1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    {
    }
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	4618      	mov	r0, r3
 800ff22:	3708      	adds	r7, #8
 800ff24:	46bd      	mov	sp, r7
 800ff26:	bd80      	pop	{r7, pc}
 800ff28:	08026870 	.word	0x08026870

0800ff2c <_ZN8touchgfx13BoxWithBorderD1Ev>:
    /**
     * @fn virtual BoxWithBorder::~BoxWithBorder()
     *
     * @brief Destructor.
     */
    virtual ~BoxWithBorder() {}
 800ff2c:	b580      	push	{r7, lr}
 800ff2e:	b082      	sub	sp, #8
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	6078      	str	r0, [r7, #4]
 800ff34:	4a05      	ldr	r2, [pc, #20]	; (800ff4c <_ZN8touchgfx13BoxWithBorderD1Ev+0x20>)
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	601a      	str	r2, [r3, #0]
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	f7ff fdc5 	bl	800facc <_ZN8touchgfx6WidgetD1Ev>
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	4618      	mov	r0, r3
 800ff46:	3708      	adds	r7, #8
 800ff48:	46bd      	mov	sp, r7
 800ff4a:	bd80      	pop	{r7, pc}
 800ff4c:	08026870 	.word	0x08026870

0800ff50 <_ZN8touchgfx13BoxWithBorderD0Ev>:
 800ff50:	b580      	push	{r7, lr}
 800ff52:	b082      	sub	sp, #8
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	6078      	str	r0, [r7, #4]
 800ff58:	6878      	ldr	r0, [r7, #4]
 800ff5a:	f7ff ffe7 	bl	800ff2c <_ZN8touchgfx13BoxWithBorderD1Ev>
 800ff5e:	2134      	movs	r1, #52	; 0x34
 800ff60:	6878      	ldr	r0, [r7, #4]
 800ff62:	f013 fa3e 	bl	80233e2 <_ZdlPvj>
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	4618      	mov	r0, r3
 800ff6a:	3708      	adds	r7, #8
 800ff6c:	46bd      	mov	sp, r7
 800ff6e:	bd80      	pop	{r7, pc}

0800ff70 <_ZN8touchgfx13BoxWithBorder8setColorENS_9colortypeE>:
     *
     * @brief Sets a color.
     *
     * @param color The color.
     */
    void setColor(colortype color)
 800ff70:	b480      	push	{r7}
 800ff72:	b083      	sub	sp, #12
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	6078      	str	r0, [r7, #4]
 800ff78:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	683a      	ldr	r2, [r7, #0]
 800ff7e:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800ff80:	bf00      	nop
 800ff82:	370c      	adds	r7, #12
 800ff84:	46bd      	mov	sp, r7
 800ff86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff8a:	4770      	bx	lr

0800ff8c <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>:
     *
     * @brief Sets border color.
     *
     * @param color The color.
     */
    void setBorderColor(colortype color)
 800ff8c:	b480      	push	{r7}
 800ff8e:	b083      	sub	sp, #12
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	6078      	str	r0, [r7, #4]
 800ff94:	6039      	str	r1, [r7, #0]
    {
        this->borderColor = color;
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	683a      	ldr	r2, [r7, #0]
 800ff9a:	62da      	str	r2, [r3, #44]	; 0x2c
    }
 800ff9c:	bf00      	nop
 800ff9e:	370c      	adds	r7, #12
 800ffa0:	46bd      	mov	sp, r7
 800ffa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa6:	4770      	bx	lr

0800ffa8 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEh>:
     *
     * @brief Sets border size.
     *
     * @param size The size.
     */
    void setBorderSize(uint8_t size)
 800ffa8:	b480      	push	{r7}
 800ffaa:	b083      	sub	sp, #12
 800ffac:	af00      	add	r7, sp, #0
 800ffae:	6078      	str	r0, [r7, #4]
 800ffb0:	460b      	mov	r3, r1
 800ffb2:	70fb      	strb	r3, [r7, #3]
    {
        borderSize = size;
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	78fa      	ldrb	r2, [r7, #3]
 800ffb8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    }
 800ffbc:	bf00      	nop
 800ffbe:	370c      	adds	r7, #12
 800ffc0:	46bd      	mov	sp, r7
 800ffc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc6:	4770      	bx	lr

0800ffc8 <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         *        Constructor from integer. No conversion is done - the integer is assumed to
         *        already be in Q5 format.
         *
         * @param i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i) : v(i) { }
 800ffc8:	b480      	push	{r7}
 800ffca:	b083      	sub	sp, #12
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	6078      	str	r0, [r7, #4]
 800ffd0:	6039      	str	r1, [r7, #0]
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	683a      	ldr	r2, [r7, #0]
 800ffd6:	601a      	str	r2, [r3, #0]
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	4618      	mov	r0, r3
 800ffdc:	370c      	adds	r7, #12
 800ffde:	46bd      	mov	sp, r7
 800ffe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe4:	4770      	bx	lr

0800ffe6 <_ZNK8touchgfx7CWRUtil2Q5cviEv>:
         *
         *        Gets the Q5 as an integer without conversion.
         *
         * @return The unconverted Q5 value.
         */
        operator int() const
 800ffe6:	b480      	push	{r7}
 800ffe8:	b083      	sub	sp, #12
 800ffea:	af00      	add	r7, sp, #0
 800ffec:	6078      	str	r0, [r7, #4]
        {
            return v;
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	681b      	ldr	r3, [r3, #0]
        }
 800fff2:	4618      	mov	r0, r3
 800fff4:	370c      	adds	r7, #12
 800fff6:	46bd      	mov	sp, r7
 800fff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fffc:	4770      	bx	lr

0800fffe <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>:
     *
     * @note The area containing the Line is not invalidated.
     *
     * @see updateLineWidth
     */
    void setLineWidth(CWRUtil::Q5 widthQ5)
 800fffe:	b590      	push	{r4, r7, lr}
 8010000:	b083      	sub	sp, #12
 8010002:	af00      	add	r7, sp, #0
 8010004:	6078      	str	r0, [r7, #4]
 8010006:	6039      	str	r1, [r7, #0]
    {
        if (lineWidth == widthQ5)
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	3340      	adds	r3, #64	; 0x40
 801000c:	4618      	mov	r0, r3
 801000e:	f7ff ffea 	bl	800ffe6 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8010012:	4604      	mov	r4, r0
 8010014:	463b      	mov	r3, r7
 8010016:	4618      	mov	r0, r3
 8010018:	f7ff ffe5 	bl	800ffe6 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 801001c:	4603      	mov	r3, r0
 801001e:	429c      	cmp	r4, r3
 8010020:	bf0c      	ite	eq
 8010022:	2301      	moveq	r3, #1
 8010024:	2300      	movne	r3, #0
 8010026:	b2db      	uxtb	r3, r3
 8010028:	2b00      	cmp	r3, #0
 801002a:	d106      	bne.n	801003a <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3c>
        {
            return;
        }

        lineWidth = widthQ5;
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	683a      	ldr	r2, [r7, #0]
 8010030:	641a      	str	r2, [r3, #64]	; 0x40

        updateCachedShape();
 8010032:	6878      	ldr	r0, [r7, #4]
 8010034:	f005 fd20 	bl	8015a78 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8010038:	e000      	b.n	801003c <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3e>
            return;
 801003a:	bf00      	nop
    }
 801003c:	370c      	adds	r7, #12
 801003e:	46bd      	mov	sp, r7
 8010040:	bd90      	pop	{r4, r7, pc}
	...

08010044 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>:
    AbstractPainterRGB888()
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
    }

    virtual ~AbstractPainterRGB888() {}
 8010044:	b580      	push	{r7, lr}
 8010046:	b082      	sub	sp, #8
 8010048:	af00      	add	r7, sp, #0
 801004a:	6078      	str	r0, [r7, #4]
 801004c:	4a05      	ldr	r2, [pc, #20]	; (8010064 <_ZN8touchgfx21AbstractPainterRGB888D1Ev+0x20>)
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	601a      	str	r2, [r3, #0]
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	4618      	mov	r0, r3
 8010056:	f005 fb23 	bl	80156a0 <_ZN8touchgfx15AbstractPainterD1Ev>
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	4618      	mov	r0, r3
 801005e:	3708      	adds	r7, #8
 8010060:	46bd      	mov	sp, r7
 8010062:	bd80      	pop	{r7, pc}
 8010064:	08026264 	.word	0x08026264

08010068 <_ZN8touchgfx21AbstractPainterRGB888D0Ev>:
 8010068:	b580      	push	{r7, lr}
 801006a:	b082      	sub	sp, #8
 801006c:	af00      	add	r7, sp, #0
 801006e:	6078      	str	r0, [r7, #4]
 8010070:	6878      	ldr	r0, [r7, #4]
 8010072:	f7ff ffe7 	bl	8010044 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 8010076:	2114      	movs	r1, #20
 8010078:	6878      	ldr	r0, [r7, #4]
 801007a:	f013 f9b2 	bl	80233e2 <_ZdlPvj>
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	4618      	mov	r0, r3
 8010082:	3708      	adds	r7, #8
 8010084:	46bd      	mov	sp, r7
 8010086:	bd80      	pop	{r7, pc}

08010088 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>:
class View : public Screen
 8010088:	b580      	push	{r7, lr}
 801008a:	b082      	sub	sp, #8
 801008c:	af00      	add	r7, sp, #0
 801008e:	6078      	str	r0, [r7, #4]
 8010090:	4a05      	ldr	r2, [pc, #20]	; (80100a8 <_ZN8touchgfx4ViewI13MainPresenterED1Ev+0x20>)
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	601a      	str	r2, [r3, #0]
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	4618      	mov	r0, r3
 801009a:	f7ff fc9d 	bl	800f9d8 <_ZN8touchgfx6ScreenD1Ev>
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	4618      	mov	r0, r3
 80100a2:	3708      	adds	r7, #8
 80100a4:	46bd      	mov	sp, r7
 80100a6:	bd80      	pop	{r7, pc}
 80100a8:	08024e50 	.word	0x08024e50

080100ac <_ZN8touchgfx4ViewI13MainPresenterED0Ev>:
 80100ac:	b580      	push	{r7, lr}
 80100ae:	b082      	sub	sp, #8
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	6078      	str	r0, [r7, #4]
 80100b4:	6878      	ldr	r0, [r7, #4]
 80100b6:	f7ff ffe7 	bl	8010088 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 80100ba:	2140      	movs	r1, #64	; 0x40
 80100bc:	6878      	ldr	r0, [r7, #4]
 80100be:	f013 f990 	bl	80233e2 <_ZdlPvj>
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	4618      	mov	r0, r3
 80100c6:	3708      	adds	r7, #8
 80100c8:	46bd      	mov	sp, r7
 80100ca:	bd80      	pop	{r7, pc}

080100cc <_ZN12MainViewBaseD1Ev>:

class MainViewBase : public touchgfx::View<MainPresenter>
{
public:
    MainViewBase();
    virtual ~MainViewBase() {}
 80100cc:	b580      	push	{r7, lr}
 80100ce:	b082      	sub	sp, #8
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	6078      	str	r0, [r7, #4]
 80100d4:	4a78      	ldr	r2, [pc, #480]	; (80102b8 <_ZN12MainViewBaseD1Ev+0x1ec>)
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	601a      	str	r2, [r3, #0]
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	f503 6317 	add.w	r3, r3, #2416	; 0x970
 80100e0:	4618      	mov	r0, r3
 80100e2:	f001 fba1 	bl	8011828 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	f603 1358 	addw	r3, r3, #2392	; 0x958
 80100ec:	4618      	mov	r0, r3
 80100ee:	f001 fc01 	bl	80118f4 <_ZN8touchgfx13PainterRGB888D1Ev>
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	f603 03e4 	addw	r3, r3, #2276	; 0x8e4
 80100f8:	4618      	mov	r0, r3
 80100fa:	f001 fbd9 	bl	80118b0 <_ZN8touchgfx4LineD1Ev>
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	f603 03cc 	addw	r3, r3, #2252	; 0x8cc
 8010104:	4618      	mov	r0, r3
 8010106:	f001 fbf5 	bl	80118f4 <_ZN8touchgfx13PainterRGB888D1Ev>
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	f603 0358 	addw	r3, r3, #2136	; 0x858
 8010110:	4618      	mov	r0, r3
 8010112:	f001 fbcd 	bl	80118b0 <_ZN8touchgfx4LineD1Ev>
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	f503 63f3 	add.w	r3, r3, #1944	; 0x798
 801011c:	4618      	mov	r0, r3
 801011e:	f003 fec5 	bl	8013eac <_ZN8touchgfx11BoxProgressD1Ev>
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	f203 7364 	addw	r3, r3, #1892	; 0x764
 8010128:	4618      	mov	r0, r3
 801012a:	f7ff fe3d 	bl	800fda8 <_ZN8touchgfx8TextAreaD1Ev>
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	f203 732c 	addw	r3, r3, #1836	; 0x72c
 8010134:	4618      	mov	r0, r3
 8010136:	f001 fb77 	bl	8011828 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	f203 63f4 	addw	r3, r3, #1780	; 0x6f4
 8010140:	4618      	mov	r0, r3
 8010142:	f001 fb71 	bl	8011828 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	f503 63d8 	add.w	r3, r3, #1728	; 0x6c0
 801014c:	4618      	mov	r0, r3
 801014e:	f7ff fe2b 	bl	800fda8 <_ZN8touchgfx8TextAreaD1Ev>
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 8010158:	4618      	mov	r0, r3
 801015a:	f7ff fe25 	bl	800fda8 <_ZN8touchgfx8TextAreaD1Ev>
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	f203 6354 	addw	r3, r3, #1620	; 0x654
 8010164:	4618      	mov	r0, r3
 8010166:	f001 fb5f 	bl	8011828 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 8010170:	4618      	mov	r0, r3
 8010172:	f001 fb59 	bl	8011828 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	f503 63bd 	add.w	r3, r3, #1512	; 0x5e8
 801017c:	4618      	mov	r0, r3
 801017e:	f7ff fe13 	bl	800fda8 <_ZN8touchgfx8TextAreaD1Ev>
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	f203 53b4 	addw	r3, r3, #1460	; 0x5b4
 8010188:	4618      	mov	r0, r3
 801018a:	f7ff fe0d 	bl	800fda8 <_ZN8touchgfx8TextAreaD1Ev>
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 8010194:	4618      	mov	r0, r3
 8010196:	f7ff fe07 	bl	800fda8 <_ZN8touchgfx8TextAreaD1Ev>
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 80101a0:	4618      	mov	r0, r3
 80101a2:	f7ff fe01 	bl	800fda8 <_ZN8touchgfx8TextAreaD1Ev>
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 80101ac:	4618      	mov	r0, r3
 80101ae:	f7ff fdfb 	bl	800fda8 <_ZN8touchgfx8TextAreaD1Ev>
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	f203 43e4 	addw	r3, r3, #1252	; 0x4e4
 80101b8:	4618      	mov	r0, r3
 80101ba:	f7ff fdf5 	bl	800fda8 <_ZN8touchgfx8TextAreaD1Ev>
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 80101c4:	4618      	mov	r0, r3
 80101c6:	f7ff fdef 	bl	800fda8 <_ZN8touchgfx8TextAreaD1Ev>
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	f203 437c 	addw	r3, r3, #1148	; 0x47c
 80101d0:	4618      	mov	r0, r3
 80101d2:	f7ff fde9 	bl	800fda8 <_ZN8touchgfx8TextAreaD1Ev>
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 80101dc:	4618      	mov	r0, r3
 80101de:	f7ff fde3 	bl	800fda8 <_ZN8touchgfx8TextAreaD1Ev>
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	f203 4314 	addw	r3, r3, #1044	; 0x414
 80101e8:	4618      	mov	r0, r3
 80101ea:	f7ff fddd 	bl	800fda8 <_ZN8touchgfx8TextAreaD1Ev>
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 80101f4:	4618      	mov	r0, r3
 80101f6:	f7ff fdd7 	bl	800fda8 <_ZN8touchgfx8TextAreaD1Ev>
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	f503 736b 	add.w	r3, r3, #940	; 0x3ac
 8010200:	4618      	mov	r0, r3
 8010202:	f7ff fdd1 	bl	800fda8 <_ZN8touchgfx8TextAreaD1Ev>
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
 801020c:	4618      	mov	r0, r3
 801020e:	f003 fe4d 	bl	8013eac <_ZN8touchgfx11BoxProgressD1Ev>
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8010218:	4618      	mov	r0, r3
 801021a:	f7ff fe87 	bl	800ff2c <_ZN8touchgfx13BoxWithBorderD1Ev>
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8010224:	4618      	mov	r0, r3
 8010226:	f001 fb21 	bl	801186c <_ZN8touchgfx5ImageD1Ev>
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8010230:	4618      	mov	r0, r3
 8010232:	f001 faf9 	bl	8011828 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 801023c:	4618      	mov	r0, r3
 801023e:	f001 faf3 	bl	8011828 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010248:	4618      	mov	r0, r3
 801024a:	f001 faed 	bl	8011828 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8010254:	4618      	mov	r0, r3
 8010256:	f001 fae7 	bl	8011828 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8010260:	4618      	mov	r0, r3
 8010262:	f001 fae1 	bl	8011828 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 801026c:	4618      	mov	r0, r3
 801026e:	f7ff fd9b 	bl	800fda8 <_ZN8touchgfx8TextAreaD1Ev>
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8010278:	4618      	mov	r0, r3
 801027a:	f7ff fd95 	bl	800fda8 <_ZN8touchgfx8TextAreaD1Ev>
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	33d8      	adds	r3, #216	; 0xd8
 8010282:	4618      	mov	r0, r3
 8010284:	f7ff fd90 	bl	800fda8 <_ZN8touchgfx8TextAreaD1Ev>
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	33a4      	adds	r3, #164	; 0xa4
 801028c:	4618      	mov	r0, r3
 801028e:	f7ff fd8b 	bl	800fda8 <_ZN8touchgfx8TextAreaD1Ev>
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	3370      	adds	r3, #112	; 0x70
 8010296:	4618      	mov	r0, r3
 8010298:	f7ff fd86 	bl	800fda8 <_ZN8touchgfx8TextAreaD1Ev>
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	3340      	adds	r3, #64	; 0x40
 80102a0:	4618      	mov	r0, r3
 80102a2:	f7ff fc79 	bl	800fb98 <_ZN8touchgfx3BoxD1Ev>
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	4618      	mov	r0, r3
 80102aa:	f7ff feed 	bl	8010088 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	4618      	mov	r0, r3
 80102b2:	3708      	adds	r7, #8
 80102b4:	46bd      	mov	sp, r7
 80102b6:	bd80      	pop	{r7, pc}
 80102b8:	08024e1c 	.word	0x08024e1c

080102bc <_ZN12MainViewBaseD0Ev>:
 80102bc:	b580      	push	{r7, lr}
 80102be:	b082      	sub	sp, #8
 80102c0:	af00      	add	r7, sp, #0
 80102c2:	6078      	str	r0, [r7, #4]
 80102c4:	6878      	ldr	r0, [r7, #4]
 80102c6:	f7ff ff01 	bl	80100cc <_ZN12MainViewBaseD1Ev>
 80102ca:	f242 612c 	movw	r1, #9772	; 0x262c
 80102ce:	6878      	ldr	r0, [r7, #4]
 80102d0:	f013 f887 	bl	80233e2 <_ZdlPvj>
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	4618      	mov	r0, r3
 80102d8:	3708      	adds	r7, #8
 80102da:	46bd      	mov	sp, r7
 80102dc:	bd80      	pop	{r7, pc}
	...

080102e0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     * @param green Value of the green part (0-255).
     * @param blue  Value of the blue part (0-255).
     *
     * @return The color representation depending on LCD color format.
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 80102e0:	b590      	push	{r4, r7, lr}
 80102e2:	b083      	sub	sp, #12
 80102e4:	af00      	add	r7, sp, #0
 80102e6:	4603      	mov	r3, r0
 80102e8:	71fb      	strb	r3, [r7, #7]
 80102ea:	460b      	mov	r3, r1
 80102ec:	71bb      	strb	r3, [r7, #6]
 80102ee:	4613      	mov	r3, r2
 80102f0:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 80102f2:	f7fe fd4b 	bl	800ed8c <_ZN8touchgfx3HAL11getInstanceEv>
 80102f6:	4603      	mov	r3, r0
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d105      	bne.n	8010308 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 80102fc:	4b0a      	ldr	r3, [pc, #40]	; (8010328 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 80102fe:	4a0b      	ldr	r2, [pc, #44]	; (801032c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 8010300:	2138      	movs	r1, #56	; 0x38
 8010302:	480b      	ldr	r0, [pc, #44]	; (8010330 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 8010304:	f013 f898 	bl	8023438 <__assert_func>
 8010308:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 801030a:	f7fe fd4b 	bl	800eda4 <_ZN8touchgfx3HAL3lcdEv>
 801030e:	6803      	ldr	r3, [r0, #0]
 8010310:	332c      	adds	r3, #44	; 0x2c
 8010312:	681c      	ldr	r4, [r3, #0]
 8010314:	797b      	ldrb	r3, [r7, #5]
 8010316:	79ba      	ldrb	r2, [r7, #6]
 8010318:	79f9      	ldrb	r1, [r7, #7]
 801031a:	47a0      	blx	r4
 801031c:	4603      	mov	r3, r0
    }
 801031e:	4618      	mov	r0, r3
 8010320:	370c      	adds	r7, #12
 8010322:	46bd      	mov	sp, r7
 8010324:	bd90      	pop	{r4, r7, pc}
 8010326:	bf00      	nop
 8010328:	08024894 	.word	0x08024894
 801032c:	08024f60 	.word	0x08024f60
 8010330:	080248d8 	.word	0x080248d8

08010334 <_ZN12MainViewBaseC1Ev>:
#include <gui_generated/main_screen/MainViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include "BitmapDatabase.hpp"

MainViewBase::MainViewBase()
 8010334:	b590      	push	{r4, r7, lr}
 8010336:	b0b1      	sub	sp, #196	; 0xc4
 8010338:	af02      	add	r7, sp, #8
 801033a:	6078      	str	r0, [r7, #4]
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	4618      	mov	r0, r3
 8010340:	f001 f9f8 	bl	8011734 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>
 8010344:	4adc      	ldr	r2, [pc, #880]	; (80106b8 <_ZN12MainViewBaseC1Ev+0x384>)
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	601a      	str	r2, [r3, #0]
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	3340      	adds	r3, #64	; 0x40
 801034e:	4618      	mov	r0, r3
 8010350:	f7ff fc02 	bl	800fb58 <_ZN8touchgfx3BoxC1Ev>
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	3370      	adds	r3, #112	; 0x70
 8010358:	4618      	mov	r0, r3
 801035a:	f7ff fc73 	bl	800fc44 <_ZN8touchgfx8TextAreaC1Ev>
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	33a4      	adds	r3, #164	; 0xa4
 8010362:	4618      	mov	r0, r3
 8010364:	f7ff fc6e 	bl	800fc44 <_ZN8touchgfx8TextAreaC1Ev>
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	33d8      	adds	r3, #216	; 0xd8
 801036c:	4618      	mov	r0, r3
 801036e:	f7ff fc69 	bl	800fc44 <_ZN8touchgfx8TextAreaC1Ev>
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8010378:	4618      	mov	r0, r3
 801037a:	f7ff fc63 	bl	800fc44 <_ZN8touchgfx8TextAreaC1Ev>
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8010384:	4618      	mov	r0, r3
 8010386:	f7ff fc5d 	bl	800fc44 <_ZN8touchgfx8TextAreaC1Ev>
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8010390:	4618      	mov	r0, r3
 8010392:	f7ff fd5f 	bl	800fe54 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801039c:	4618      	mov	r0, r3
 801039e:	f7ff fd59 	bl	800fe54 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80103a8:	4618      	mov	r0, r3
 80103aa:	f7ff fd53 	bl	800fe54 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 80103b4:	4618      	mov	r0, r3
 80103b6:	f7ff fd4d 	bl	800fe54 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80103c0:	4618      	mov	r0, r3
 80103c2:	f7ff fd47 	bl	800fe54 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	f503 7423 	add.w	r4, r3, #652	; 0x28c
 80103cc:	f107 0308 	add.w	r3, r7, #8
 80103d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80103d4:	4618      	mov	r0, r3
 80103d6:	f7ff f94b 	bl	800f670 <_ZN8touchgfx6BitmapC1Et>
 80103da:	f107 0308 	add.w	r3, r7, #8
 80103de:	4619      	mov	r1, r3
 80103e0:	4620      	mov	r0, r4
 80103e2:	f7ff fd5b 	bl	800fe9c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 80103ec:	4618      	mov	r0, r3
 80103ee:	f7ff fd77 	bl	800fee0 <_ZN8touchgfx13BoxWithBorderC1Ev>
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
 80103f8:	4618      	mov	r0, r3
 80103fa:	f003 fd6b 	bl	8013ed4 <_ZN8touchgfx11BoxProgressC1Ev>
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	f503 736b 	add.w	r3, r3, #940	; 0x3ac
 8010404:	4618      	mov	r0, r3
 8010406:	f7ff fc1d 	bl	800fc44 <_ZN8touchgfx8TextAreaC1Ev>
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8010410:	4618      	mov	r0, r3
 8010412:	f7ff fc17 	bl	800fc44 <_ZN8touchgfx8TextAreaC1Ev>
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	f203 4314 	addw	r3, r3, #1044	; 0x414
 801041c:	4618      	mov	r0, r3
 801041e:	f7ff fc11 	bl	800fc44 <_ZN8touchgfx8TextAreaC1Ev>
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 8010428:	4618      	mov	r0, r3
 801042a:	f7ff fc0b 	bl	800fc44 <_ZN8touchgfx8TextAreaC1Ev>
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	f203 437c 	addw	r3, r3, #1148	; 0x47c
 8010434:	4618      	mov	r0, r3
 8010436:	f7ff fc05 	bl	800fc44 <_ZN8touchgfx8TextAreaC1Ev>
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8010440:	4618      	mov	r0, r3
 8010442:	f7ff fbff 	bl	800fc44 <_ZN8touchgfx8TextAreaC1Ev>
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	f203 43e4 	addw	r3, r3, #1252	; 0x4e4
 801044c:	4618      	mov	r0, r3
 801044e:	f7ff fbf9 	bl	800fc44 <_ZN8touchgfx8TextAreaC1Ev>
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 8010458:	4618      	mov	r0, r3
 801045a:	f7ff fbf3 	bl	800fc44 <_ZN8touchgfx8TextAreaC1Ev>
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 8010464:	4618      	mov	r0, r3
 8010466:	f7ff fbed 	bl	800fc44 <_ZN8touchgfx8TextAreaC1Ev>
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 8010470:	4618      	mov	r0, r3
 8010472:	f7ff fbe7 	bl	800fc44 <_ZN8touchgfx8TextAreaC1Ev>
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	f203 53b4 	addw	r3, r3, #1460	; 0x5b4
 801047c:	4618      	mov	r0, r3
 801047e:	f7ff fbe1 	bl	800fc44 <_ZN8touchgfx8TextAreaC1Ev>
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	f503 63bd 	add.w	r3, r3, #1512	; 0x5e8
 8010488:	4618      	mov	r0, r3
 801048a:	f7ff fbdb 	bl	800fc44 <_ZN8touchgfx8TextAreaC1Ev>
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 8010494:	4618      	mov	r0, r3
 8010496:	f7ff fcdd 	bl	800fe54 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	f203 6354 	addw	r3, r3, #1620	; 0x654
 80104a0:	4618      	mov	r0, r3
 80104a2:	f7ff fcd7 	bl	800fe54 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 80104ac:	4618      	mov	r0, r3
 80104ae:	f7ff fbc9 	bl	800fc44 <_ZN8touchgfx8TextAreaC1Ev>
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	f503 63d8 	add.w	r3, r3, #1728	; 0x6c0
 80104b8:	4618      	mov	r0, r3
 80104ba:	f7ff fbc3 	bl	800fc44 <_ZN8touchgfx8TextAreaC1Ev>
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	f203 63f4 	addw	r3, r3, #1780	; 0x6f4
 80104c4:	4618      	mov	r0, r3
 80104c6:	f7ff fcc5 	bl	800fe54 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	f203 732c 	addw	r3, r3, #1836	; 0x72c
 80104d0:	4618      	mov	r0, r3
 80104d2:	f7ff fcbf 	bl	800fe54 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	f203 7364 	addw	r3, r3, #1892	; 0x764
 80104dc:	4618      	mov	r0, r3
 80104de:	f7ff fbb1 	bl	800fc44 <_ZN8touchgfx8TextAreaC1Ev>
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	f503 63f3 	add.w	r3, r3, #1944	; 0x798
 80104e8:	4618      	mov	r0, r3
 80104ea:	f003 fcf3 	bl	8013ed4 <_ZN8touchgfx11BoxProgressC1Ev>
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	f603 0358 	addw	r3, r3, #2136	; 0x858
 80104f4:	4618      	mov	r0, r3
 80104f6:	f005 fa9f 	bl	8015a38 <_ZN8touchgfx4LineC1Ev>
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	f603 04cc 	addw	r4, r3, #2252	; 0x8cc
 8010500:	f107 030c 	add.w	r3, r7, #12
 8010504:	2100      	movs	r1, #0
 8010506:	4618      	mov	r0, r3
 8010508:	f7ff f86c 	bl	800f5e4 <_ZN8touchgfx9colortypeC1Em>
 801050c:	22ff      	movs	r2, #255	; 0xff
 801050e:	68f9      	ldr	r1, [r7, #12]
 8010510:	4620      	mov	r0, r4
 8010512:	f005 f883 	bl	801561c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	f603 03e4 	addw	r3, r3, #2276	; 0x8e4
 801051c:	4618      	mov	r0, r3
 801051e:	f005 fa8b 	bl	8015a38 <_ZN8touchgfx4LineC1Ev>
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	f603 1458 	addw	r4, r3, #2392	; 0x958
 8010528:	f107 0310 	add.w	r3, r7, #16
 801052c:	2100      	movs	r1, #0
 801052e:	4618      	mov	r0, r3
 8010530:	f7ff f858 	bl	800f5e4 <_ZN8touchgfx9colortypeC1Em>
 8010534:	22ff      	movs	r2, #255	; 0xff
 8010536:	6939      	ldr	r1, [r7, #16]
 8010538:	4620      	mov	r0, r4
 801053a:	f005 f86f 	bl	801561c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	f503 6317 	add.w	r3, r3, #2416	; 0x970
 8010544:	4618      	mov	r0, r3
 8010546:	f7ff fc85 	bl	800fe54 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	f603 230c 	addw	r3, r3, #2572	; 0xa0c
 8010550:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8010554:	4618      	mov	r0, r3
 8010556:	f005 ff3b 	bl	80163d0 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    backgroundBox.setPosition(0, 0, 800, 480);
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8010560:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8010564:	9300      	str	r3, [sp, #0]
 8010566:	f44f 7348 	mov.w	r3, #800	; 0x320
 801056a:	2200      	movs	r2, #0
 801056c:	2100      	movs	r1, #0
 801056e:	f7ff f8dd 	bl	800f72c <_ZN8touchgfx8Drawable11setPositionEssss>
    backgroundBox.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8010578:	2200      	movs	r2, #0
 801057a:	2100      	movs	r1, #0
 801057c:	2000      	movs	r0, #0
 801057e:	f7ff feaf 	bl	80102e0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010582:	4603      	mov	r3, r0
 8010584:	4619      	mov	r1, r3
 8010586:	4620      	mov	r0, r4
 8010588:	f7ff fb28 	bl	800fbdc <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    RpmDescriptor.setXY(228, 130);
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	3370      	adds	r3, #112	; 0x70
 8010590:	2282      	movs	r2, #130	; 0x82
 8010592:	21e4      	movs	r1, #228	; 0xe4
 8010594:	4618      	mov	r0, r3
 8010596:	f7ff f914 	bl	800f7c2 <_ZN8touchgfx8Drawable5setXYEss>
    RpmDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80105a0:	2200      	movs	r2, #0
 80105a2:	21dc      	movs	r1, #220	; 0xdc
 80105a4:	20ff      	movs	r0, #255	; 0xff
 80105a6:	f7ff fe9b 	bl	80102e0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80105aa:	4603      	mov	r3, r0
 80105ac:	4619      	mov	r1, r3
 80105ae:	4620      	mov	r0, r4
 80105b0:	f7ff fb8b 	bl	800fcca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    RpmDescriptor.setLinespacing(0);
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	3370      	adds	r3, #112	; 0x70
 80105b8:	2100      	movs	r1, #0
 80105ba:	4618      	mov	r0, r3
 80105bc:	f7ff fbd8 	bl	800fd70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    RpmDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID21));
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80105c6:	f107 0314 	add.w	r3, r7, #20
 80105ca:	2114      	movs	r1, #20
 80105cc:	4618      	mov	r0, r3
 80105ce:	f7ff fb13 	bl	800fbf8 <_ZN8touchgfx9TypedTextC1Et>
 80105d2:	8ab9      	ldrh	r1, [r7, #20]
 80105d4:	4620      	mov	r0, r4
 80105d6:	f005 fd35 	bl	8016044 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    KpaDescriptor.setXY(428, 113);
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	33a4      	adds	r3, #164	; 0xa4
 80105de:	2271      	movs	r2, #113	; 0x71
 80105e0:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 80105e4:	4618      	mov	r0, r3
 80105e6:	f7ff f8ec 	bl	800f7c2 <_ZN8touchgfx8Drawable5setXYEss>
    KpaDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 80105f0:	2200      	movs	r2, #0
 80105f2:	21dc      	movs	r1, #220	; 0xdc
 80105f4:	20ff      	movs	r0, #255	; 0xff
 80105f6:	f7ff fe73 	bl	80102e0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80105fa:	4603      	mov	r3, r0
 80105fc:	4619      	mov	r1, r3
 80105fe:	4620      	mov	r0, r4
 8010600:	f7ff fb63 	bl	800fcca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    KpaDescriptor.setLinespacing(0);
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	33a4      	adds	r3, #164	; 0xa4
 8010608:	2100      	movs	r1, #0
 801060a:	4618      	mov	r0, r3
 801060c:	f7ff fbb0 	bl	800fd70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    KpaDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID41));
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8010616:	f107 0318 	add.w	r3, r7, #24
 801061a:	2124      	movs	r1, #36	; 0x24
 801061c:	4618      	mov	r0, r3
 801061e:	f7ff faeb 	bl	800fbf8 <_ZN8touchgfx9TypedTextC1Et>
 8010622:	8b39      	ldrh	r1, [r7, #24]
 8010624:	4620      	mov	r0, r4
 8010626:	f005 fd0d 	bl	8016044 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CltDecsriptor.setXY(346, 113);
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	33d8      	adds	r3, #216	; 0xd8
 801062e:	2271      	movs	r2, #113	; 0x71
 8010630:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8010634:	4618      	mov	r0, r3
 8010636:	f7ff f8c4 	bl	800f7c2 <_ZN8touchgfx8Drawable5setXYEss>
    CltDecsriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 8010640:	2200      	movs	r2, #0
 8010642:	21dc      	movs	r1, #220	; 0xdc
 8010644:	20ff      	movs	r0, #255	; 0xff
 8010646:	f7ff fe4b 	bl	80102e0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801064a:	4603      	mov	r3, r0
 801064c:	4619      	mov	r1, r3
 801064e:	4620      	mov	r0, r4
 8010650:	f7ff fb3b 	bl	800fcca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CltDecsriptor.setLinespacing(0);
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	33d8      	adds	r3, #216	; 0xd8
 8010658:	2100      	movs	r1, #0
 801065a:	4618      	mov	r0, r3
 801065c:	f7ff fb88 	bl	800fd70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    CltDecsriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID40));
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 8010666:	f107 031c 	add.w	r3, r7, #28
 801066a:	2123      	movs	r1, #35	; 0x23
 801066c:	4618      	mov	r0, r3
 801066e:	f7ff fac3 	bl	800fbf8 <_ZN8touchgfx9TypedTextC1Et>
 8010672:	8bb9      	ldrh	r1, [r7, #28]
 8010674:	4620      	mov	r0, r4
 8010676:	f005 fce5 	bl	8016044 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    LambdaDescriptor.setXY(38, 118);
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8010680:	2276      	movs	r2, #118	; 0x76
 8010682:	2126      	movs	r1, #38	; 0x26
 8010684:	4618      	mov	r0, r3
 8010686:	f7ff f89c 	bl	800f7c2 <_ZN8touchgfx8Drawable5setXYEss>
    LambdaDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 8010690:	2200      	movs	r2, #0
 8010692:	21dc      	movs	r1, #220	; 0xdc
 8010694:	20ff      	movs	r0, #255	; 0xff
 8010696:	f7ff fe23 	bl	80102e0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801069a:	4603      	mov	r3, r0
 801069c:	4619      	mov	r1, r3
 801069e:	4620      	mov	r0, r4
 80106a0:	f7ff fb13 	bl	800fcca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    LambdaDescriptor.setLinespacing(0);
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80106aa:	2100      	movs	r1, #0
 80106ac:	4618      	mov	r0, r3
 80106ae:	f7ff fb5f 	bl	800fd70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    LambdaDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID33));
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	e002      	b.n	80106bc <_ZN12MainViewBaseC1Ev+0x388>
 80106b6:	bf00      	nop
 80106b8:	08024e1c 	.word	0x08024e1c
 80106bc:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 80106c0:	f107 0320 	add.w	r3, r7, #32
 80106c4:	211c      	movs	r1, #28
 80106c6:	4618      	mov	r0, r3
 80106c8:	f7ff fa96 	bl	800fbf8 <_ZN8touchgfx9TypedTextC1Et>
 80106cc:	8c39      	ldrh	r1, [r7, #32]
 80106ce:	4620      	mov	r0, r4
 80106d0:	f005 fcb8 	bl	8016044 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TrgtDescriptor.setXY(119, 118);
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80106da:	2276      	movs	r2, #118	; 0x76
 80106dc:	2177      	movs	r1, #119	; 0x77
 80106de:	4618      	mov	r0, r3
 80106e0:	f7ff f86f 	bl	800f7c2 <_ZN8touchgfx8Drawable5setXYEss>
    TrgtDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 80106ea:	2200      	movs	r2, #0
 80106ec:	21dc      	movs	r1, #220	; 0xdc
 80106ee:	20ff      	movs	r0, #255	; 0xff
 80106f0:	f7ff fdf6 	bl	80102e0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80106f4:	4603      	mov	r3, r0
 80106f6:	4619      	mov	r1, r3
 80106f8:	4620      	mov	r0, r4
 80106fa:	f7ff fae6 	bl	800fcca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TrgtDescriptor.setLinespacing(0);
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8010704:	2100      	movs	r1, #0
 8010706:	4618      	mov	r0, r3
 8010708:	f7ff fb32 	bl	800fd70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    TrgtDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID32));
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8010712:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010716:	211b      	movs	r1, #27
 8010718:	4618      	mov	r0, r3
 801071a:	f7ff fa6d 	bl	800fbf8 <_ZN8touchgfx9TypedTextC1Et>
 801071e:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8010720:	4620      	mov	r0, r4
 8010722:	f005 fc8f 	bl	8016044 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    LambdaValue.setXY(27, 83);
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 801072c:	2253      	movs	r2, #83	; 0x53
 801072e:	211b      	movs	r1, #27
 8010730:	4618      	mov	r0, r3
 8010732:	f7ff f846 	bl	800f7c2 <_ZN8touchgfx8Drawable5setXYEss>
    LambdaValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	f503 74ba 	add.w	r4, r3, #372	; 0x174
 801073c:	22ff      	movs	r2, #255	; 0xff
 801073e:	21ff      	movs	r1, #255	; 0xff
 8010740:	20ff      	movs	r0, #255	; 0xff
 8010742:	f7ff fdcd 	bl	80102e0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010746:	4603      	mov	r3, r0
 8010748:	4619      	mov	r1, r3
 801074a:	4620      	mov	r0, r4
 801074c:	f7ff fabd 	bl	800fcca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    LambdaValue.setLinespacing(0);
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8010756:	2100      	movs	r1, #0
 8010758:	4618      	mov	r0, r3
 801075a:	f7ff fb09 	bl	800fd70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(LambdaValueBuffer, LAMBDAVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID10).getText());
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	f603 14a8 	addw	r4, r3, #2472	; 0x9a8
 8010764:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010768:	2109      	movs	r1, #9
 801076a:	4618      	mov	r0, r3
 801076c:	f7ff fa44 	bl	800fbf8 <_ZN8touchgfx9TypedTextC1Et>
 8010770:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010774:	4618      	mov	r0, r3
 8010776:	f7ff fa4f 	bl	800fc18 <_ZNK8touchgfx9TypedText7getTextEv>
 801077a:	4603      	mov	r3, r0
 801077c:	4ae1      	ldr	r2, [pc, #900]	; (8010b04 <_ZN12MainViewBaseC1Ev+0x7d0>)
 801077e:	2105      	movs	r1, #5
 8010780:	4620      	mov	r0, r4
 8010782:	f008 fec1 	bl	8019508 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    LambdaValue.setWildcard(LambdaValueBuffer);
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	f503 72ba 	add.w	r2, r3, #372	; 0x174
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	f603 13a8 	addw	r3, r3, #2472	; 0x9a8
 8010792:	4619      	mov	r1, r3
 8010794:	4610      	mov	r0, r2
 8010796:	f7ff fb73 	bl	800fe80 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    LambdaValue.resizeToCurrentText();
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 80107a0:	4618      	mov	r0, r3
 80107a2:	f005 fc25 	bl	8015ff0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    LambdaValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID9));
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	f503 74ba 	add.w	r4, r3, #372	; 0x174
 80107ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80107b0:	2108      	movs	r1, #8
 80107b2:	4618      	mov	r0, r3
 80107b4:	f7ff fa20 	bl	800fbf8 <_ZN8touchgfx9TypedTextC1Et>
 80107b8:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 80107ba:	4620      	mov	r0, r4
 80107bc:	f005 fc42 	bl	8016044 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TrgtValue.setXY(107, 83);
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80107c6:	2253      	movs	r2, #83	; 0x53
 80107c8:	216b      	movs	r1, #107	; 0x6b
 80107ca:	4618      	mov	r0, r3
 80107cc:	f7fe fff9 	bl	800f7c2 <_ZN8touchgfx8Drawable5setXYEss>
    TrgtValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	f503 74d6 	add.w	r4, r3, #428	; 0x1ac
 80107d6:	22ff      	movs	r2, #255	; 0xff
 80107d8:	21ff      	movs	r1, #255	; 0xff
 80107da:	20ff      	movs	r0, #255	; 0xff
 80107dc:	f7ff fd80 	bl	80102e0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80107e0:	4603      	mov	r3, r0
 80107e2:	4619      	mov	r1, r3
 80107e4:	4620      	mov	r0, r4
 80107e6:	f7ff fa70 	bl	800fcca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TrgtValue.setLinespacing(0);
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80107f0:	2100      	movs	r1, #0
 80107f2:	4618      	mov	r0, r3
 80107f4:	f7ff fabc 	bl	800fd70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(TrgtValueBuffer, TRGTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID8).getText());
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	f603 14b2 	addw	r4, r3, #2482	; 0x9b2
 80107fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010802:	2107      	movs	r1, #7
 8010804:	4618      	mov	r0, r3
 8010806:	f7ff f9f7 	bl	800fbf8 <_ZN8touchgfx9TypedTextC1Et>
 801080a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801080e:	4618      	mov	r0, r3
 8010810:	f7ff fa02 	bl	800fc18 <_ZNK8touchgfx9TypedText7getTextEv>
 8010814:	4603      	mov	r3, r0
 8010816:	4abb      	ldr	r2, [pc, #748]	; (8010b04 <_ZN12MainViewBaseC1Ev+0x7d0>)
 8010818:	2105      	movs	r1, #5
 801081a:	4620      	mov	r0, r4
 801081c:	f008 fe74 	bl	8019508 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    TrgtValue.setWildcard(TrgtValueBuffer);
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	f503 72d6 	add.w	r2, r3, #428	; 0x1ac
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	f603 13b2 	addw	r3, r3, #2482	; 0x9b2
 801082c:	4619      	mov	r1, r3
 801082e:	4610      	mov	r0, r2
 8010830:	f7ff fb26 	bl	800fe80 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    TrgtValue.resizeToCurrentText();
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801083a:	4618      	mov	r0, r3
 801083c:	f005 fbd8 	bl	8015ff0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    TrgtValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID7));
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	f503 74d6 	add.w	r4, r3, #428	; 0x1ac
 8010846:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801084a:	2106      	movs	r1, #6
 801084c:	4618      	mov	r0, r3
 801084e:	f7ff f9d3 	bl	800fbf8 <_ZN8touchgfx9TypedTextC1Et>
 8010852:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8010854:	4620      	mov	r0, r4
 8010856:	f005 fbf5 	bl	8016044 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    KpaValue.setXY(414, 78);
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010860:	224e      	movs	r2, #78	; 0x4e
 8010862:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8010866:	4618      	mov	r0, r3
 8010868:	f7fe ffab 	bl	800f7c2 <_ZN8touchgfx8Drawable5setXYEss>
    KpaValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	f503 74f2 	add.w	r4, r3, #484	; 0x1e4
 8010872:	22ff      	movs	r2, #255	; 0xff
 8010874:	21ff      	movs	r1, #255	; 0xff
 8010876:	20ff      	movs	r0, #255	; 0xff
 8010878:	f7ff fd32 	bl	80102e0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801087c:	4603      	mov	r3, r0
 801087e:	4619      	mov	r1, r3
 8010880:	4620      	mov	r0, r4
 8010882:	f7ff fa22 	bl	800fcca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    KpaValue.setLinespacing(0);
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801088c:	2100      	movs	r1, #0
 801088e:	4618      	mov	r0, r3
 8010890:	f7ff fa6e 	bl	800fd70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(KpaValueBuffer, KPAVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID6).getText());
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	f603 14bc 	addw	r4, r3, #2492	; 0x9bc
 801089a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801089e:	2105      	movs	r1, #5
 80108a0:	4618      	mov	r0, r3
 80108a2:	f7ff f9a9 	bl	800fbf8 <_ZN8touchgfx9TypedTextC1Et>
 80108a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80108aa:	4618      	mov	r0, r3
 80108ac:	f7ff f9b4 	bl	800fc18 <_ZNK8touchgfx9TypedText7getTextEv>
 80108b0:	4603      	mov	r3, r0
 80108b2:	4a94      	ldr	r2, [pc, #592]	; (8010b04 <_ZN12MainViewBaseC1Ev+0x7d0>)
 80108b4:	2105      	movs	r1, #5
 80108b6:	4620      	mov	r0, r4
 80108b8:	f008 fe26 	bl	8019508 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    KpaValue.setWildcard(KpaValueBuffer);
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	f503 72f2 	add.w	r2, r3, #484	; 0x1e4
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	f603 13bc 	addw	r3, r3, #2492	; 0x9bc
 80108c8:	4619      	mov	r1, r3
 80108ca:	4610      	mov	r0, r2
 80108cc:	f7ff fad8 	bl	800fe80 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    KpaValue.resizeToCurrentText();
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80108d6:	4618      	mov	r0, r3
 80108d8:	f005 fb8a 	bl	8015ff0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    KpaValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID5));
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	f503 74f2 	add.w	r4, r3, #484	; 0x1e4
 80108e2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80108e6:	2104      	movs	r1, #4
 80108e8:	4618      	mov	r0, r3
 80108ea:	f7ff f985 	bl	800fbf8 <_ZN8touchgfx9TypedTextC1Et>
 80108ee:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 80108f0:	4620      	mov	r0, r4
 80108f2:	f005 fba7 	bl	8016044 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CltValue.setXY(331, 78);
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 80108fc:	224e      	movs	r2, #78	; 0x4e
 80108fe:	f240 114b 	movw	r1, #331	; 0x14b
 8010902:	4618      	mov	r0, r3
 8010904:	f7fe ff5d 	bl	800f7c2 <_ZN8touchgfx8Drawable5setXYEss>
    CltValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	f503 7407 	add.w	r4, r3, #540	; 0x21c
 801090e:	22ff      	movs	r2, #255	; 0xff
 8010910:	21ff      	movs	r1, #255	; 0xff
 8010912:	20ff      	movs	r0, #255	; 0xff
 8010914:	f7ff fce4 	bl	80102e0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010918:	4603      	mov	r3, r0
 801091a:	4619      	mov	r1, r3
 801091c:	4620      	mov	r0, r4
 801091e:	f7ff f9d4 	bl	800fcca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CltValue.setLinespacing(0);
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8010928:	2100      	movs	r1, #0
 801092a:	4618      	mov	r0, r3
 801092c:	f7ff fa20 	bl	800fd70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(CltValueBuffer, CLTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID4).getText());
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	f603 14c6 	addw	r4, r3, #2502	; 0x9c6
 8010936:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801093a:	2103      	movs	r1, #3
 801093c:	4618      	mov	r0, r3
 801093e:	f7ff f95b 	bl	800fbf8 <_ZN8touchgfx9TypedTextC1Et>
 8010942:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010946:	4618      	mov	r0, r3
 8010948:	f7ff f966 	bl	800fc18 <_ZNK8touchgfx9TypedText7getTextEv>
 801094c:	4603      	mov	r3, r0
 801094e:	4a6d      	ldr	r2, [pc, #436]	; (8010b04 <_ZN12MainViewBaseC1Ev+0x7d0>)
 8010950:	2105      	movs	r1, #5
 8010952:	4620      	mov	r0, r4
 8010954:	f008 fdd8 	bl	8019508 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    CltValue.setWildcard(CltValueBuffer);
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	f503 7207 	add.w	r2, r3, #540	; 0x21c
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	f603 13c6 	addw	r3, r3, #2502	; 0x9c6
 8010964:	4619      	mov	r1, r3
 8010966:	4610      	mov	r0, r2
 8010968:	f7ff fa8a 	bl	800fe80 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    CltValue.resizeToCurrentText();
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8010972:	4618      	mov	r0, r3
 8010974:	f005 fb3c 	bl	8015ff0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    CltValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3));
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	f503 7407 	add.w	r4, r3, #540	; 0x21c
 801097e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010982:	2102      	movs	r1, #2
 8010984:	4618      	mov	r0, r3
 8010986:	f7ff f937 	bl	800fbf8 <_ZN8touchgfx9TypedTextC1Et>
 801098a:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 801098e:	4620      	mov	r0, r4
 8010990:	f005 fb58 	bl	8016044 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    KmhValue.setXY(193, 67);
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	f503 7315 	add.w	r3, r3, #596	; 0x254
 801099a:	2243      	movs	r2, #67	; 0x43
 801099c:	21c1      	movs	r1, #193	; 0xc1
 801099e:	4618      	mov	r0, r3
 80109a0:	f7fe ff0f 	bl	800f7c2 <_ZN8touchgfx8Drawable5setXYEss>
    KmhValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	f503 7415 	add.w	r4, r3, #596	; 0x254
 80109aa:	22ff      	movs	r2, #255	; 0xff
 80109ac:	21ff      	movs	r1, #255	; 0xff
 80109ae:	20ff      	movs	r0, #255	; 0xff
 80109b0:	f7ff fc96 	bl	80102e0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80109b4:	4603      	mov	r3, r0
 80109b6:	4619      	mov	r1, r3
 80109b8:	4620      	mov	r0, r4
 80109ba:	f7ff f986 	bl	800fcca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    KmhValue.setLinespacing(0);
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80109c4:	2100      	movs	r1, #0
 80109c6:	4618      	mov	r0, r3
 80109c8:	f7ff f9d2 	bl	800fd70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(KmhValueBuffer, KMHVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID2).getText());
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	f503 641d 	add.w	r4, r3, #2512	; 0x9d0
 80109d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80109d6:	2101      	movs	r1, #1
 80109d8:	4618      	mov	r0, r3
 80109da:	f7ff f90d 	bl	800fbf8 <_ZN8touchgfx9TypedTextC1Et>
 80109de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80109e2:	4618      	mov	r0, r3
 80109e4:	f7ff f918 	bl	800fc18 <_ZNK8touchgfx9TypedText7getTextEv>
 80109e8:	4603      	mov	r3, r0
 80109ea:	4a46      	ldr	r2, [pc, #280]	; (8010b04 <_ZN12MainViewBaseC1Ev+0x7d0>)
 80109ec:	2105      	movs	r1, #5
 80109ee:	4620      	mov	r0, r4
 80109f0:	f008 fd8a 	bl	8019508 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    KmhValue.setWildcard(KmhValueBuffer);
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	f503 7215 	add.w	r2, r3, #596	; 0x254
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	f503 631d 	add.w	r3, r3, #2512	; 0x9d0
 8010a00:	4619      	mov	r1, r3
 8010a02:	4610      	mov	r0, r2
 8010a04:	f7ff fa3c 	bl	800fe80 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    KmhValue.resizeToCurrentText();
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8010a0e:	4618      	mov	r0, r3
 8010a10:	f005 faee 	bl	8015ff0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    KmhValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID1));
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	f503 7415 	add.w	r4, r3, #596	; 0x254
 8010a1a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010a1e:	2100      	movs	r1, #0
 8010a20:	4618      	mov	r0, r3
 8010a22:	f7ff f8e9 	bl	800fbf8 <_ZN8touchgfx9TypedTextC1Et>
 8010a26:	f8b7 104c 	ldrh.w	r1, [r7, #76]	; 0x4c
 8010a2a:	4620      	mov	r0, r4
 8010a2c:	f005 fb0a 	bl	8016044 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    backgroundImage.setXY(179, 63);
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8010a36:	223f      	movs	r2, #63	; 0x3f
 8010a38:	21b3      	movs	r1, #179	; 0xb3
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	f7fe fec1 	bl	800f7c2 <_ZN8touchgfx8Drawable5setXYEss>
    backgroundImage.setVisible(false);
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8010a46:	2100      	movs	r1, #0
 8010a48:	4618      	mov	r0, r3
 8010a4a:	f7fe ff2b 	bl	800f8a4 <_ZN8touchgfx8Drawable10setVisibleEb>

    boxWithBorder1.setPosition(16, 8, 452, 32);
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	f503 702e 	add.w	r0, r3, #696	; 0x2b8
 8010a54:	2320      	movs	r3, #32
 8010a56:	9300      	str	r3, [sp, #0]
 8010a58:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
 8010a5c:	2208      	movs	r2, #8
 8010a5e:	2110      	movs	r1, #16
 8010a60:	f7fe fe64 	bl	800f72c <_ZN8touchgfx8Drawable11setPositionEssss>
    boxWithBorder1.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	f503 742e 	add.w	r4, r3, #696	; 0x2b8
 8010a6a:	2200      	movs	r2, #0
 8010a6c:	2100      	movs	r1, #0
 8010a6e:	2000      	movs	r0, #0
 8010a70:	f7ff fc36 	bl	80102e0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010a74:	4603      	mov	r3, r0
 8010a76:	4619      	mov	r1, r3
 8010a78:	4620      	mov	r0, r4
 8010a7a:	f7ff fa79 	bl	800ff70 <_ZN8touchgfx13BoxWithBorder8setColorENS_9colortypeE>
    boxWithBorder1.setBorderColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	f503 742e 	add.w	r4, r3, #696	; 0x2b8
 8010a84:	22ff      	movs	r2, #255	; 0xff
 8010a86:	21ff      	movs	r1, #255	; 0xff
 8010a88:	20ff      	movs	r0, #255	; 0xff
 8010a8a:	f7ff fc29 	bl	80102e0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010a8e:	4603      	mov	r3, r0
 8010a90:	4619      	mov	r1, r3
 8010a92:	4620      	mov	r0, r4
 8010a94:	f7ff fa7a 	bl	800ff8c <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    boxWithBorder1.setBorderSize(2);
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8010a9e:	2102      	movs	r1, #2
 8010aa0:	4618      	mov	r0, r3
 8010aa2:	f7ff fa81 	bl	800ffa8 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEh>

    rpmProgress.setXY(16, 9);
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
 8010aac:	2209      	movs	r2, #9
 8010aae:	2110      	movs	r1, #16
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	f7fe fe86 	bl	800f7c2 <_ZN8touchgfx8Drawable5setXYEss>
    rpmProgress.setProgressIndicatorPosition(2, 2, 450, 28);
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	f503 703b 	add.w	r0, r3, #748	; 0x2ec
 8010abc:	231c      	movs	r3, #28
 8010abe:	9300      	str	r3, [sp, #0]
 8010ac0:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 8010ac4:	2202      	movs	r2, #2
 8010ac6:	2102      	movs	r1, #2
 8010ac8:	f003 fa3a 	bl	8013f40 <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>
    rpmProgress.setRange(0, 10000);
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	f503 703b 	add.w	r0, r3, #748	; 0x2ec
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	9300      	str	r3, [sp, #0]
 8010ad6:	2300      	movs	r3, #0
 8010ad8:	f242 7210 	movw	r2, #10000	; 0x2710
 8010adc:	2100      	movs	r1, #0
 8010ade:	f003 fb2f 	bl	8014140 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    rpmProgress.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
 8010ae8:	2100      	movs	r1, #0
 8010aea:	4618      	mov	r0, r3
 8010aec:	f003 fa88 	bl	8014000 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    rpmProgress.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	f503 743b 	add.w	r4, r3, #748	; 0x2ec
 8010af6:	2200      	movs	r2, #0
 8010af8:	21dc      	movs	r1, #220	; 0xdc
 8010afa:	20ff      	movs	r0, #255	; 0xff
 8010afc:	f7ff fbf0 	bl	80102e0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010b00:	e002      	b.n	8010b08 <_ZN12MainViewBaseC1Ev+0x7d4>
 8010b02:	bf00      	nop
 8010b04:	08024918 	.word	0x08024918
 8010b08:	4603      	mov	r3, r0
 8010b0a:	4619      	mov	r1, r3
 8010b0c:	4620      	mov	r0, r4
 8010b0e:	f003 f9c1 	bl	8013e94 <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>
    rpmProgress.setValue(10000);
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
 8010b18:	f242 7110 	movw	r1, #10000	; 0x2710
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	f003 fa27 	bl	8013f70 <_ZN8touchgfx11BoxProgress8setValueEi>

    rpm1.setXY(59, 41);
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	f503 736b 	add.w	r3, r3, #940	; 0x3ac
 8010b28:	2229      	movs	r2, #41	; 0x29
 8010b2a:	213b      	movs	r1, #59	; 0x3b
 8010b2c:	4618      	mov	r0, r3
 8010b2e:	f7fe fe48 	bl	800f7c2 <_ZN8touchgfx8Drawable5setXYEss>
    rpm1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	f503 746b 	add.w	r4, r3, #940	; 0x3ac
 8010b38:	22ff      	movs	r2, #255	; 0xff
 8010b3a:	21ff      	movs	r1, #255	; 0xff
 8010b3c:	20ff      	movs	r0, #255	; 0xff
 8010b3e:	f7ff fbcf 	bl	80102e0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010b42:	4603      	mov	r3, r0
 8010b44:	4619      	mov	r1, r3
 8010b46:	4620      	mov	r0, r4
 8010b48:	f7ff f8bf 	bl	800fcca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm1.setLinespacing(0);
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	f503 736b 	add.w	r3, r3, #940	; 0x3ac
 8010b52:	2100      	movs	r1, #0
 8010b54:	4618      	mov	r0, r3
 8010b56:	f7ff f90b 	bl	800fd70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    rpm1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID11));
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	f503 746b 	add.w	r4, r3, #940	; 0x3ac
 8010b60:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010b64:	210a      	movs	r1, #10
 8010b66:	4618      	mov	r0, r3
 8010b68:	f7ff f846 	bl	800fbf8 <_ZN8touchgfx9TypedTextC1Et>
 8010b6c:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8010b70:	4620      	mov	r0, r4
 8010b72:	f005 fa67 	bl	8016044 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm2.setXY(104, 41);
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8010b7c:	2229      	movs	r2, #41	; 0x29
 8010b7e:	2168      	movs	r1, #104	; 0x68
 8010b80:	4618      	mov	r0, r3
 8010b82:	f7fe fe1e 	bl	800f7c2 <_ZN8touchgfx8Drawable5setXYEss>
    rpm2.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	f503 7478 	add.w	r4, r3, #992	; 0x3e0
 8010b8c:	22ff      	movs	r2, #255	; 0xff
 8010b8e:	21ff      	movs	r1, #255	; 0xff
 8010b90:	20ff      	movs	r0, #255	; 0xff
 8010b92:	f7ff fba5 	bl	80102e0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010b96:	4603      	mov	r3, r0
 8010b98:	4619      	mov	r1, r3
 8010b9a:	4620      	mov	r0, r4
 8010b9c:	f7ff f895 	bl	800fcca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm2.setLinespacing(0);
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8010ba6:	2100      	movs	r1, #0
 8010ba8:	4618      	mov	r0, r3
 8010baa:	f7ff f8e1 	bl	800fd70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    rpm2.setTypedText(touchgfx::TypedText(T_SINGLEUSEID12));
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	f503 7478 	add.w	r4, r3, #992	; 0x3e0
 8010bb4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010bb8:	210b      	movs	r1, #11
 8010bba:	4618      	mov	r0, r3
 8010bbc:	f7ff f81c 	bl	800fbf8 <_ZN8touchgfx9TypedTextC1Et>
 8010bc0:	f8b7 1054 	ldrh.w	r1, [r7, #84]	; 0x54
 8010bc4:	4620      	mov	r0, r4
 8010bc6:	f005 fa3d 	bl	8016044 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm3.setXY(148, 41);
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	f203 4314 	addw	r3, r3, #1044	; 0x414
 8010bd0:	2229      	movs	r2, #41	; 0x29
 8010bd2:	2194      	movs	r1, #148	; 0x94
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	f7fe fdf4 	bl	800f7c2 <_ZN8touchgfx8Drawable5setXYEss>
    rpm3.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	f203 4414 	addw	r4, r3, #1044	; 0x414
 8010be0:	22ff      	movs	r2, #255	; 0xff
 8010be2:	21ff      	movs	r1, #255	; 0xff
 8010be4:	20ff      	movs	r0, #255	; 0xff
 8010be6:	f7ff fb7b 	bl	80102e0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010bea:	4603      	mov	r3, r0
 8010bec:	4619      	mov	r1, r3
 8010bee:	4620      	mov	r0, r4
 8010bf0:	f7ff f86b 	bl	800fcca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm3.setLinespacing(0);
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	f203 4314 	addw	r3, r3, #1044	; 0x414
 8010bfa:	2100      	movs	r1, #0
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	f7ff f8b7 	bl	800fd70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    rpm3.setTypedText(touchgfx::TypedText(T_SINGLEUSEID13));
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	f203 4414 	addw	r4, r3, #1044	; 0x414
 8010c08:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010c0c:	210c      	movs	r1, #12
 8010c0e:	4618      	mov	r0, r3
 8010c10:	f7fe fff2 	bl	800fbf8 <_ZN8touchgfx9TypedTextC1Et>
 8010c14:	f8b7 1058 	ldrh.w	r1, [r7, #88]	; 0x58
 8010c18:	4620      	mov	r0, r4
 8010c1a:	f005 fa13 	bl	8016044 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm4.setXY(193, 41);
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 8010c24:	2229      	movs	r2, #41	; 0x29
 8010c26:	21c1      	movs	r1, #193	; 0xc1
 8010c28:	4618      	mov	r0, r3
 8010c2a:	f7fe fdca 	bl	800f7c2 <_ZN8touchgfx8Drawable5setXYEss>
    rpm4.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	f503 6489 	add.w	r4, r3, #1096	; 0x448
 8010c34:	22ff      	movs	r2, #255	; 0xff
 8010c36:	21ff      	movs	r1, #255	; 0xff
 8010c38:	20ff      	movs	r0, #255	; 0xff
 8010c3a:	f7ff fb51 	bl	80102e0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010c3e:	4603      	mov	r3, r0
 8010c40:	4619      	mov	r1, r3
 8010c42:	4620      	mov	r0, r4
 8010c44:	f7ff f841 	bl	800fcca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm4.setLinespacing(0);
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 8010c4e:	2100      	movs	r1, #0
 8010c50:	4618      	mov	r0, r3
 8010c52:	f7ff f88d 	bl	800fd70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    rpm4.setTypedText(touchgfx::TypedText(T_SINGLEUSEID14));
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	f503 6489 	add.w	r4, r3, #1096	; 0x448
 8010c5c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010c60:	210d      	movs	r1, #13
 8010c62:	4618      	mov	r0, r3
 8010c64:	f7fe ffc8 	bl	800fbf8 <_ZN8touchgfx9TypedTextC1Et>
 8010c68:	f8b7 105c 	ldrh.w	r1, [r7, #92]	; 0x5c
 8010c6c:	4620      	mov	r0, r4
 8010c6e:	f005 f9e9 	bl	8016044 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm5.setXY(239, 41);
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	f203 437c 	addw	r3, r3, #1148	; 0x47c
 8010c78:	2229      	movs	r2, #41	; 0x29
 8010c7a:	21ef      	movs	r1, #239	; 0xef
 8010c7c:	4618      	mov	r0, r3
 8010c7e:	f7fe fda0 	bl	800f7c2 <_ZN8touchgfx8Drawable5setXYEss>
    rpm5.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	f203 447c 	addw	r4, r3, #1148	; 0x47c
 8010c88:	22ff      	movs	r2, #255	; 0xff
 8010c8a:	21ff      	movs	r1, #255	; 0xff
 8010c8c:	20ff      	movs	r0, #255	; 0xff
 8010c8e:	f7ff fb27 	bl	80102e0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010c92:	4603      	mov	r3, r0
 8010c94:	4619      	mov	r1, r3
 8010c96:	4620      	mov	r0, r4
 8010c98:	f7ff f817 	bl	800fcca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm5.setLinespacing(0);
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	f203 437c 	addw	r3, r3, #1148	; 0x47c
 8010ca2:	2100      	movs	r1, #0
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	f7ff f863 	bl	800fd70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    rpm5.setTypedText(touchgfx::TypedText(T_SINGLEUSEID15));
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	f203 447c 	addw	r4, r3, #1148	; 0x47c
 8010cb0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8010cb4:	210e      	movs	r1, #14
 8010cb6:	4618      	mov	r0, r3
 8010cb8:	f7fe ff9e 	bl	800fbf8 <_ZN8touchgfx9TypedTextC1Et>
 8010cbc:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 8010cc0:	4620      	mov	r0, r4
 8010cc2:	f005 f9bf 	bl	8016044 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm6.setXY(284, 41);
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8010ccc:	2229      	movs	r2, #41	; 0x29
 8010cce:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	f7fe fd75 	bl	800f7c2 <_ZN8touchgfx8Drawable5setXYEss>
    rpm6.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	f503 6496 	add.w	r4, r3, #1200	; 0x4b0
 8010cde:	22ff      	movs	r2, #255	; 0xff
 8010ce0:	21ff      	movs	r1, #255	; 0xff
 8010ce2:	20ff      	movs	r0, #255	; 0xff
 8010ce4:	f7ff fafc 	bl	80102e0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010ce8:	4603      	mov	r3, r0
 8010cea:	4619      	mov	r1, r3
 8010cec:	4620      	mov	r0, r4
 8010cee:	f7fe ffec 	bl	800fcca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm6.setLinespacing(0);
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8010cf8:	2100      	movs	r1, #0
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	f7ff f838 	bl	800fd70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    rpm6.setTypedText(touchgfx::TypedText(T_SINGLEUSEID16));
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	f503 6496 	add.w	r4, r3, #1200	; 0x4b0
 8010d06:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8010d0a:	210f      	movs	r1, #15
 8010d0c:	4618      	mov	r0, r3
 8010d0e:	f7fe ff73 	bl	800fbf8 <_ZN8touchgfx9TypedTextC1Et>
 8010d12:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 8010d16:	4620      	mov	r0, r4
 8010d18:	f005 f994 	bl	8016044 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm7.setXY(328, 41);
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	f203 43e4 	addw	r3, r3, #1252	; 0x4e4
 8010d22:	2229      	movs	r2, #41	; 0x29
 8010d24:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8010d28:	4618      	mov	r0, r3
 8010d2a:	f7fe fd4a 	bl	800f7c2 <_ZN8touchgfx8Drawable5setXYEss>
    rpm7.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	f203 44e4 	addw	r4, r3, #1252	; 0x4e4
 8010d34:	22ff      	movs	r2, #255	; 0xff
 8010d36:	21ff      	movs	r1, #255	; 0xff
 8010d38:	20ff      	movs	r0, #255	; 0xff
 8010d3a:	f7ff fad1 	bl	80102e0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010d3e:	4603      	mov	r3, r0
 8010d40:	4619      	mov	r1, r3
 8010d42:	4620      	mov	r0, r4
 8010d44:	f7fe ffc1 	bl	800fcca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm7.setLinespacing(0);
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	f203 43e4 	addw	r3, r3, #1252	; 0x4e4
 8010d4e:	2100      	movs	r1, #0
 8010d50:	4618      	mov	r0, r3
 8010d52:	f7ff f80d 	bl	800fd70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    rpm7.setTypedText(touchgfx::TypedText(T_SINGLEUSEID17));
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	f203 44e4 	addw	r4, r3, #1252	; 0x4e4
 8010d5c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010d60:	2110      	movs	r1, #16
 8010d62:	4618      	mov	r0, r3
 8010d64:	f7fe ff48 	bl	800fbf8 <_ZN8touchgfx9TypedTextC1Et>
 8010d68:	f8b7 1068 	ldrh.w	r1, [r7, #104]	; 0x68
 8010d6c:	4620      	mov	r0, r4
 8010d6e:	f005 f969 	bl	8016044 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm8.setXY(373, 41);
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 8010d78:	2229      	movs	r2, #41	; 0x29
 8010d7a:	f240 1175 	movw	r1, #373	; 0x175
 8010d7e:	4618      	mov	r0, r3
 8010d80:	f7fe fd1f 	bl	800f7c2 <_ZN8touchgfx8Drawable5setXYEss>
    rpm8.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	f503 64a3 	add.w	r4, r3, #1304	; 0x518
 8010d8a:	22ff      	movs	r2, #255	; 0xff
 8010d8c:	21ff      	movs	r1, #255	; 0xff
 8010d8e:	20ff      	movs	r0, #255	; 0xff
 8010d90:	f7ff faa6 	bl	80102e0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010d94:	4603      	mov	r3, r0
 8010d96:	4619      	mov	r1, r3
 8010d98:	4620      	mov	r0, r4
 8010d9a:	f7fe ff96 	bl	800fcca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm8.setLinespacing(0);
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 8010da4:	2100      	movs	r1, #0
 8010da6:	4618      	mov	r0, r3
 8010da8:	f7fe ffe2 	bl	800fd70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    rpm8.setTypedText(touchgfx::TypedText(T_SINGLEUSEID18));
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	f503 64a3 	add.w	r4, r3, #1304	; 0x518
 8010db2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010db6:	2111      	movs	r1, #17
 8010db8:	4618      	mov	r0, r3
 8010dba:	f7fe ff1d 	bl	800fbf8 <_ZN8touchgfx9TypedTextC1Et>
 8010dbe:	f8b7 106c 	ldrh.w	r1, [r7, #108]	; 0x6c
 8010dc2:	4620      	mov	r0, r4
 8010dc4:	f005 f93e 	bl	8016044 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm9.setXY(418, 41);
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 8010dce:	2229      	movs	r2, #41	; 0x29
 8010dd0:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	f7fe fcf4 	bl	800f7c2 <_ZN8touchgfx8Drawable5setXYEss>
    rpm9.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	f203 544c 	addw	r4, r3, #1356	; 0x54c
 8010de0:	22ff      	movs	r2, #255	; 0xff
 8010de2:	21ff      	movs	r1, #255	; 0xff
 8010de4:	20ff      	movs	r0, #255	; 0xff
 8010de6:	f7ff fa7b 	bl	80102e0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010dea:	4603      	mov	r3, r0
 8010dec:	4619      	mov	r1, r3
 8010dee:	4620      	mov	r0, r4
 8010df0:	f7fe ff6b 	bl	800fcca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm9.setLinespacing(0);
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 8010dfa:	2100      	movs	r1, #0
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	f7fe ffb7 	bl	800fd70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    rpm9.setTypedText(touchgfx::TypedText(T_SINGLEUSEID19));
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	f203 544c 	addw	r4, r3, #1356	; 0x54c
 8010e08:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8010e0c:	2112      	movs	r1, #18
 8010e0e:	4618      	mov	r0, r3
 8010e10:	f7fe fef2 	bl	800fbf8 <_ZN8touchgfx9TypedTextC1Et>
 8010e14:	f8b7 1070 	ldrh.w	r1, [r7, #112]	; 0x70
 8010e18:	4620      	mov	r0, r4
 8010e1a:	f005 f913 	bl	8016044 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm10.setXY(460, 41);
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 8010e24:	2229      	movs	r2, #41	; 0x29
 8010e26:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8010e2a:	4618      	mov	r0, r3
 8010e2c:	f7fe fcc9 	bl	800f7c2 <_ZN8touchgfx8Drawable5setXYEss>
    rpm10.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	f503 64b0 	add.w	r4, r3, #1408	; 0x580
 8010e36:	22ff      	movs	r2, #255	; 0xff
 8010e38:	21ff      	movs	r1, #255	; 0xff
 8010e3a:	20ff      	movs	r0, #255	; 0xff
 8010e3c:	f7ff fa50 	bl	80102e0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010e40:	4603      	mov	r3, r0
 8010e42:	4619      	mov	r1, r3
 8010e44:	4620      	mov	r0, r4
 8010e46:	f7fe ff40 	bl	800fcca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm10.setLinespacing(0);
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 8010e50:	2100      	movs	r1, #0
 8010e52:	4618      	mov	r0, r3
 8010e54:	f7fe ff8c 	bl	800fd70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    rpm10.setTypedText(touchgfx::TypedText(T_SINGLEUSEID20));
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	f503 64b0 	add.w	r4, r3, #1408	; 0x580
 8010e5e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8010e62:	2113      	movs	r1, #19
 8010e64:	4618      	mov	r0, r3
 8010e66:	f7fe fec7 	bl	800fbf8 <_ZN8touchgfx9TypedTextC1Et>
 8010e6a:	f8b7 1074 	ldrh.w	r1, [r7, #116]	; 0x74
 8010e6e:	4620      	mov	r0, r4
 8010e70:	f005 f8e8 	bl	8016044 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATDescriptor.setXY(46, 180);
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	f203 53b4 	addw	r3, r3, #1460	; 0x5b4
 8010e7a:	22b4      	movs	r2, #180	; 0xb4
 8010e7c:	212e      	movs	r1, #46	; 0x2e
 8010e7e:	4618      	mov	r0, r3
 8010e80:	f7fe fc9f 	bl	800f7c2 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	f203 54b4 	addw	r4, r3, #1460	; 0x5b4
 8010e8a:	2200      	movs	r2, #0
 8010e8c:	21dc      	movs	r1, #220	; 0xdc
 8010e8e:	20ff      	movs	r0, #255	; 0xff
 8010e90:	f7ff fa26 	bl	80102e0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010e94:	4603      	mov	r3, r0
 8010e96:	4619      	mov	r1, r3
 8010e98:	4620      	mov	r0, r4
 8010e9a:	f7fe ff16 	bl	800fcca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor.setLinespacing(0);
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	f203 53b4 	addw	r3, r3, #1460	; 0x5b4
 8010ea4:	2100      	movs	r1, #0
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	f7fe ff62 	bl	800fd70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID30));
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	f203 54b4 	addw	r4, r3, #1460	; 0x5b4
 8010eb2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8010eb6:	2119      	movs	r1, #25
 8010eb8:	4618      	mov	r0, r3
 8010eba:	f7fe fe9d 	bl	800fbf8 <_ZN8touchgfx9TypedTextC1Et>
 8010ebe:	f8b7 1078 	ldrh.w	r1, [r7, #120]	; 0x78
 8010ec2:	4620      	mov	r0, r4
 8010ec4:	f005 f8be 	bl	8016044 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    ECTDescriptor.setXY(124, 180);
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	f503 63bd 	add.w	r3, r3, #1512	; 0x5e8
 8010ece:	22b4      	movs	r2, #180	; 0xb4
 8010ed0:	217c      	movs	r1, #124	; 0x7c
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	f7fe fc75 	bl	800f7c2 <_ZN8touchgfx8Drawable5setXYEss>
    ECTDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	f503 64bd 	add.w	r4, r3, #1512	; 0x5e8
 8010ede:	2200      	movs	r2, #0
 8010ee0:	21dc      	movs	r1, #220	; 0xdc
 8010ee2:	20ff      	movs	r0, #255	; 0xff
 8010ee4:	f7ff f9fc 	bl	80102e0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010ee8:	4603      	mov	r3, r0
 8010eea:	4619      	mov	r1, r3
 8010eec:	4620      	mov	r0, r4
 8010eee:	f7fe feec 	bl	800fcca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    ECTDescriptor.setLinespacing(0);
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	f503 63bd 	add.w	r3, r3, #1512	; 0x5e8
 8010ef8:	2100      	movs	r1, #0
 8010efa:	4618      	mov	r0, r3
 8010efc:	f7fe ff38 	bl	800fd70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    ECTDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID31));
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	f503 64bd 	add.w	r4, r3, #1512	; 0x5e8
 8010f06:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8010f0a:	211a      	movs	r1, #26
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	f7fe fe73 	bl	800fbf8 <_ZN8touchgfx9TypedTextC1Et>
 8010f12:	f8b7 107c 	ldrh.w	r1, [r7, #124]	; 0x7c
 8010f16:	4620      	mov	r0, r4
 8010f18:	f005 f894 	bl	8016044 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATValue.setXY(38, 145);
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 8010f22:	2291      	movs	r2, #145	; 0x91
 8010f24:	2126      	movs	r1, #38	; 0x26
 8010f26:	4618      	mov	r0, r3
 8010f28:	f7fe fc4b 	bl	800f7c2 <_ZN8touchgfx8Drawable5setXYEss>
    IATValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	f203 641c 	addw	r4, r3, #1564	; 0x61c
 8010f32:	22ff      	movs	r2, #255	; 0xff
 8010f34:	21ff      	movs	r1, #255	; 0xff
 8010f36:	20ff      	movs	r0, #255	; 0xff
 8010f38:	f7ff f9d2 	bl	80102e0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010f3c:	4603      	mov	r3, r0
 8010f3e:	4619      	mov	r1, r3
 8010f40:	4620      	mov	r0, r4
 8010f42:	f7fe fec2 	bl	800fcca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATValue.setLinespacing(0);
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 8010f4c:	2100      	movs	r1, #0
 8010f4e:	4618      	mov	r0, r3
 8010f50:	f7fe ff0e 	bl	800fd70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(IATValueBuffer, IATVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID23).getText());
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	f603 14da 	addw	r4, r3, #2522	; 0x9da
 8010f5a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8010f5e:	2116      	movs	r1, #22
 8010f60:	4618      	mov	r0, r3
 8010f62:	f7fe fe49 	bl	800fbf8 <_ZN8touchgfx9TypedTextC1Et>
 8010f66:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	f7fe fe54 	bl	800fc18 <_ZNK8touchgfx9TypedText7getTextEv>
 8010f70:	4603      	mov	r3, r0
 8010f72:	4ae4      	ldr	r2, [pc, #912]	; (8011304 <_ZN12MainViewBaseC1Ev+0xfd0>)
 8010f74:	2105      	movs	r1, #5
 8010f76:	4620      	mov	r0, r4
 8010f78:	f008 fac6 	bl	8019508 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    IATValue.setWildcard(IATValueBuffer);
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	f203 621c 	addw	r2, r3, #1564	; 0x61c
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	f603 13da 	addw	r3, r3, #2522	; 0x9da
 8010f88:	4619      	mov	r1, r3
 8010f8a:	4610      	mov	r0, r2
 8010f8c:	f7fe ff78 	bl	800fe80 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    IATValue.resizeToCurrentText();
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 8010f96:	4618      	mov	r0, r3
 8010f98:	f005 f82a 	bl	8015ff0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    IATValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID22));
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	f203 641c 	addw	r4, r3, #1564	; 0x61c
 8010fa2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8010fa6:	2115      	movs	r1, #21
 8010fa8:	4618      	mov	r0, r3
 8010faa:	f7fe fe25 	bl	800fbf8 <_ZN8touchgfx9TypedTextC1Et>
 8010fae:	f8b7 1084 	ldrh.w	r1, [r7, #132]	; 0x84
 8010fb2:	4620      	mov	r0, r4
 8010fb4:	f005 f846 	bl	8016044 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    ECTValue.setXY(107, 145);
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	f203 6354 	addw	r3, r3, #1620	; 0x654
 8010fbe:	2291      	movs	r2, #145	; 0x91
 8010fc0:	216b      	movs	r1, #107	; 0x6b
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	f7fe fbfd 	bl	800f7c2 <_ZN8touchgfx8Drawable5setXYEss>
    ECTValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	f203 6454 	addw	r4, r3, #1620	; 0x654
 8010fce:	22ff      	movs	r2, #255	; 0xff
 8010fd0:	21ff      	movs	r1, #255	; 0xff
 8010fd2:	20ff      	movs	r0, #255	; 0xff
 8010fd4:	f7ff f984 	bl	80102e0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010fd8:	4603      	mov	r3, r0
 8010fda:	4619      	mov	r1, r3
 8010fdc:	4620      	mov	r0, r4
 8010fde:	f7fe fe74 	bl	800fcca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    ECTValue.setLinespacing(0);
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	f203 6354 	addw	r3, r3, #1620	; 0x654
 8010fe8:	2100      	movs	r1, #0
 8010fea:	4618      	mov	r0, r3
 8010fec:	f7fe fec0 	bl	800fd70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(ECTValueBuffer, ECTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID25).getText());
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	f603 14e4 	addw	r4, r3, #2532	; 0x9e4
 8010ff6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8010ffa:	2118      	movs	r1, #24
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	f7fe fdfb 	bl	800fbf8 <_ZN8touchgfx9TypedTextC1Et>
 8011002:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8011006:	4618      	mov	r0, r3
 8011008:	f7fe fe06 	bl	800fc18 <_ZNK8touchgfx9TypedText7getTextEv>
 801100c:	4603      	mov	r3, r0
 801100e:	4abd      	ldr	r2, [pc, #756]	; (8011304 <_ZN12MainViewBaseC1Ev+0xfd0>)
 8011010:	2105      	movs	r1, #5
 8011012:	4620      	mov	r0, r4
 8011014:	f008 fa78 	bl	8019508 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    ECTValue.setWildcard(ECTValueBuffer);
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	f203 6254 	addw	r2, r3, #1620	; 0x654
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	f603 13e4 	addw	r3, r3, #2532	; 0x9e4
 8011024:	4619      	mov	r1, r3
 8011026:	4610      	mov	r0, r2
 8011028:	f7fe ff2a 	bl	800fe80 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    ECTValue.resizeToCurrentText();
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	f203 6354 	addw	r3, r3, #1620	; 0x654
 8011032:	4618      	mov	r0, r3
 8011034:	f004 ffdc 	bl	8015ff0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    ECTValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID24));
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	f203 6454 	addw	r4, r3, #1620	; 0x654
 801103e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8011042:	2117      	movs	r1, #23
 8011044:	4618      	mov	r0, r3
 8011046:	f7fe fdd7 	bl	800fbf8 <_ZN8touchgfx9TypedTextC1Et>
 801104a:	f8b7 108c 	ldrh.w	r1, [r7, #140]	; 0x8c
 801104e:	4620      	mov	r0, r4
 8011050:	f004 fff8 	bl	8016044 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATDescriptor_1.setXY(343, 180);
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 801105a:	22b4      	movs	r2, #180	; 0xb4
 801105c:	f240 1157 	movw	r1, #343	; 0x157
 8011060:	4618      	mov	r0, r3
 8011062:	f7fe fbae 	bl	800f7c2 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	f203 648c 	addw	r4, r3, #1676	; 0x68c
 801106c:	2200      	movs	r2, #0
 801106e:	21dc      	movs	r1, #220	; 0xdc
 8011070:	20ff      	movs	r0, #255	; 0xff
 8011072:	f7ff f935 	bl	80102e0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011076:	4603      	mov	r3, r0
 8011078:	4619      	mov	r1, r3
 801107a:	4620      	mov	r0, r4
 801107c:	f7fe fe25 	bl	800fcca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor_1.setLinespacing(0);
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 8011086:	2100      	movs	r1, #0
 8011088:	4618      	mov	r0, r3
 801108a:	f7fe fe71 	bl	800fd70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID34));
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	f203 648c 	addw	r4, r3, #1676	; 0x68c
 8011094:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8011098:	211d      	movs	r1, #29
 801109a:	4618      	mov	r0, r3
 801109c:	f7fe fdac 	bl	800fbf8 <_ZN8touchgfx9TypedTextC1Et>
 80110a0:	f8b7 1090 	ldrh.w	r1, [r7, #144]	; 0x90
 80110a4:	4620      	mov	r0, r4
 80110a6:	f004 ffcd 	bl	8016044 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    ECTDescriptor_1.setXY(426, 180);
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	f503 63d8 	add.w	r3, r3, #1728	; 0x6c0
 80110b0:	22b4      	movs	r2, #180	; 0xb4
 80110b2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80110b6:	4618      	mov	r0, r3
 80110b8:	f7fe fb83 	bl	800f7c2 <_ZN8touchgfx8Drawable5setXYEss>
    ECTDescriptor_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	f503 64d8 	add.w	r4, r3, #1728	; 0x6c0
 80110c2:	2200      	movs	r2, #0
 80110c4:	21dc      	movs	r1, #220	; 0xdc
 80110c6:	20ff      	movs	r0, #255	; 0xff
 80110c8:	f7ff f90a 	bl	80102e0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80110cc:	4603      	mov	r3, r0
 80110ce:	4619      	mov	r1, r3
 80110d0:	4620      	mov	r0, r4
 80110d2:	f7fe fdfa 	bl	800fcca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    ECTDescriptor_1.setLinespacing(0);
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	f503 63d8 	add.w	r3, r3, #1728	; 0x6c0
 80110dc:	2100      	movs	r1, #0
 80110de:	4618      	mov	r0, r3
 80110e0:	f7fe fe46 	bl	800fd70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    ECTDescriptor_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID35));
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	f503 64d8 	add.w	r4, r3, #1728	; 0x6c0
 80110ea:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80110ee:	211e      	movs	r1, #30
 80110f0:	4618      	mov	r0, r3
 80110f2:	f7fe fd81 	bl	800fbf8 <_ZN8touchgfx9TypedTextC1Et>
 80110f6:	f8b7 1094 	ldrh.w	r1, [r7, #148]	; 0x94
 80110fa:	4620      	mov	r0, r4
 80110fc:	f004 ffa2 	bl	8016044 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    OILTempValue.setXY(328, 145);
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	f203 63f4 	addw	r3, r3, #1780	; 0x6f4
 8011106:	2291      	movs	r2, #145	; 0x91
 8011108:	f44f 71a4 	mov.w	r1, #328	; 0x148
 801110c:	4618      	mov	r0, r3
 801110e:	f7fe fb58 	bl	800f7c2 <_ZN8touchgfx8Drawable5setXYEss>
    OILTempValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	f203 64f4 	addw	r4, r3, #1780	; 0x6f4
 8011118:	22ff      	movs	r2, #255	; 0xff
 801111a:	21ff      	movs	r1, #255	; 0xff
 801111c:	20ff      	movs	r0, #255	; 0xff
 801111e:	f7ff f8df 	bl	80102e0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011122:	4603      	mov	r3, r0
 8011124:	4619      	mov	r1, r3
 8011126:	4620      	mov	r0, r4
 8011128:	f7fe fdcf 	bl	800fcca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    OILTempValue.setLinespacing(0);
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	f203 63f4 	addw	r3, r3, #1780	; 0x6f4
 8011132:	2100      	movs	r1, #0
 8011134:	4618      	mov	r0, r3
 8011136:	f7fe fe1b 	bl	800fd70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(OILTempValueBuffer, OILTEMPVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID37).getText());
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	f603 14ee 	addw	r4, r3, #2542	; 0x9ee
 8011140:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8011144:	2120      	movs	r1, #32
 8011146:	4618      	mov	r0, r3
 8011148:	f7fe fd56 	bl	800fbf8 <_ZN8touchgfx9TypedTextC1Et>
 801114c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8011150:	4618      	mov	r0, r3
 8011152:	f7fe fd61 	bl	800fc18 <_ZNK8touchgfx9TypedText7getTextEv>
 8011156:	4603      	mov	r3, r0
 8011158:	4a6a      	ldr	r2, [pc, #424]	; (8011304 <_ZN12MainViewBaseC1Ev+0xfd0>)
 801115a:	2105      	movs	r1, #5
 801115c:	4620      	mov	r0, r4
 801115e:	f008 f9d3 	bl	8019508 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    OILTempValue.setWildcard(OILTempValueBuffer);
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	f203 62f4 	addw	r2, r3, #1780	; 0x6f4
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	f603 13ee 	addw	r3, r3, #2542	; 0x9ee
 801116e:	4619      	mov	r1, r3
 8011170:	4610      	mov	r0, r2
 8011172:	f7fe fe85 	bl	800fe80 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    OILTempValue.resizeToCurrentText();
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	f203 63f4 	addw	r3, r3, #1780	; 0x6f4
 801117c:	4618      	mov	r0, r3
 801117e:	f004 ff37 	bl	8015ff0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    OILTempValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID36));
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	f203 64f4 	addw	r4, r3, #1780	; 0x6f4
 8011188:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801118c:	211f      	movs	r1, #31
 801118e:	4618      	mov	r0, r3
 8011190:	f7fe fd32 	bl	800fbf8 <_ZN8touchgfx9TypedTextC1Et>
 8011194:	f8b7 109c 	ldrh.w	r1, [r7, #156]	; 0x9c
 8011198:	4620      	mov	r0, r4
 801119a:	f004 ff53 	bl	8016044 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    OILPressureValue.setXY(414, 145);
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	f203 732c 	addw	r3, r3, #1836	; 0x72c
 80111a4:	2291      	movs	r2, #145	; 0x91
 80111a6:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 80111aa:	4618      	mov	r0, r3
 80111ac:	f7fe fb09 	bl	800f7c2 <_ZN8touchgfx8Drawable5setXYEss>
    OILPressureValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	f203 742c 	addw	r4, r3, #1836	; 0x72c
 80111b6:	22ff      	movs	r2, #255	; 0xff
 80111b8:	21ff      	movs	r1, #255	; 0xff
 80111ba:	20ff      	movs	r0, #255	; 0xff
 80111bc:	f7ff f890 	bl	80102e0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80111c0:	4603      	mov	r3, r0
 80111c2:	4619      	mov	r1, r3
 80111c4:	4620      	mov	r0, r4
 80111c6:	f7fe fd80 	bl	800fcca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    OILPressureValue.setLinespacing(0);
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	f203 732c 	addw	r3, r3, #1836	; 0x72c
 80111d0:	2100      	movs	r1, #0
 80111d2:	4618      	mov	r0, r3
 80111d4:	f7fe fdcc 	bl	800fd70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(OILPressureValueBuffer, OILPRESSUREVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID39).getText());
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	f603 14f8 	addw	r4, r3, #2552	; 0x9f8
 80111de:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80111e2:	2122      	movs	r1, #34	; 0x22
 80111e4:	4618      	mov	r0, r3
 80111e6:	f7fe fd07 	bl	800fbf8 <_ZN8touchgfx9TypedTextC1Et>
 80111ea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80111ee:	4618      	mov	r0, r3
 80111f0:	f7fe fd12 	bl	800fc18 <_ZNK8touchgfx9TypedText7getTextEv>
 80111f4:	4603      	mov	r3, r0
 80111f6:	4a43      	ldr	r2, [pc, #268]	; (8011304 <_ZN12MainViewBaseC1Ev+0xfd0>)
 80111f8:	2105      	movs	r1, #5
 80111fa:	4620      	mov	r0, r4
 80111fc:	f008 f984 	bl	8019508 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    OILPressureValue.setWildcard(OILPressureValueBuffer);
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	f203 722c 	addw	r2, r3, #1836	; 0x72c
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	f603 13f8 	addw	r3, r3, #2552	; 0x9f8
 801120c:	4619      	mov	r1, r3
 801120e:	4610      	mov	r0, r2
 8011210:	f7fe fe36 	bl	800fe80 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    OILPressureValue.resizeToCurrentText();
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	f203 732c 	addw	r3, r3, #1836	; 0x72c
 801121a:	4618      	mov	r0, r3
 801121c:	f004 fee8 	bl	8015ff0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    OILPressureValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID38));
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	f203 742c 	addw	r4, r3, #1836	; 0x72c
 8011226:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801122a:	2121      	movs	r1, #33	; 0x21
 801122c:	4618      	mov	r0, r3
 801122e:	f7fe fce3 	bl	800fbf8 <_ZN8touchgfx9TypedTextC1Et>
 8011232:	f8b7 10a4 	ldrh.w	r1, [r7, #164]	; 0xa4
 8011236:	4620      	mov	r0, r4
 8011238:	f004 ff04 	bl	8016044 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATDescriptor_1_1.setXY(407, 240);
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	f203 7364 	addw	r3, r3, #1892	; 0x764
 8011242:	22f0      	movs	r2, #240	; 0xf0
 8011244:	f240 1197 	movw	r1, #407	; 0x197
 8011248:	4618      	mov	r0, r3
 801124a:	f7fe faba 	bl	800f7c2 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor_1_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	f203 7464 	addw	r4, r3, #1892	; 0x764
 8011254:	2200      	movs	r2, #0
 8011256:	21dc      	movs	r1, #220	; 0xdc
 8011258:	20ff      	movs	r0, #255	; 0xff
 801125a:	f7ff f841 	bl	80102e0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801125e:	4603      	mov	r3, r0
 8011260:	4619      	mov	r1, r3
 8011262:	4620      	mov	r0, r4
 8011264:	f7fe fd31 	bl	800fcca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor_1_1.setLinespacing(0);
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	f203 7364 	addw	r3, r3, #1892	; 0x764
 801126e:	2100      	movs	r1, #0
 8011270:	4618      	mov	r0, r3
 8011272:	f7fe fd7d 	bl	800fd70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor_1_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID42));
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	f203 7464 	addw	r4, r3, #1892	; 0x764
 801127c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8011280:	2125      	movs	r1, #37	; 0x25
 8011282:	4618      	mov	r0, r3
 8011284:	f7fe fcb8 	bl	800fbf8 <_ZN8touchgfx9TypedTextC1Et>
 8011288:	f8b7 10a8 	ldrh.w	r1, [r7, #168]	; 0xa8
 801128c:	4620      	mov	r0, r4
 801128e:	f004 fed9 	bl	8016044 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TPSProgress.setXY(365, 226);
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	f503 63f3 	add.w	r3, r3, #1944	; 0x798
 8011298:	22e2      	movs	r2, #226	; 0xe2
 801129a:	f240 116d 	movw	r1, #365	; 0x16d
 801129e:	4618      	mov	r0, r3
 80112a0:	f7fe fa8f 	bl	800f7c2 <_ZN8touchgfx8Drawable5setXYEss>
    TPSProgress.setProgressIndicatorPosition(2, 2, 100, 10);
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	f503 60f3 	add.w	r0, r3, #1944	; 0x798
 80112aa:	230a      	movs	r3, #10
 80112ac:	9300      	str	r3, [sp, #0]
 80112ae:	2364      	movs	r3, #100	; 0x64
 80112b0:	2202      	movs	r2, #2
 80112b2:	2102      	movs	r1, #2
 80112b4:	f002 fe44 	bl	8013f40 <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>
    TPSProgress.setRange(0, 100);
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	f503 60f3 	add.w	r0, r3, #1944	; 0x798
 80112be:	2300      	movs	r3, #0
 80112c0:	9300      	str	r3, [sp, #0]
 80112c2:	2300      	movs	r3, #0
 80112c4:	2264      	movs	r2, #100	; 0x64
 80112c6:	2100      	movs	r1, #0
 80112c8:	f002 ff3a 	bl	8014140 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    TPSProgress.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	f503 63f3 	add.w	r3, r3, #1944	; 0x798
 80112d2:	2100      	movs	r1, #0
 80112d4:	4618      	mov	r0, r3
 80112d6:	f002 fe93 	bl	8014000 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    TPSProgress.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_SMALL_PROGRESS_INDICATOR_BG_SQUARE_0_DEGREES_ID));
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	f503 64f3 	add.w	r4, r3, #1944	; 0x798
 80112e0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80112e4:	2100      	movs	r1, #0
 80112e6:	4618      	mov	r0, r3
 80112e8:	f7fe f9c2 	bl	800f670 <_ZN8touchgfx6BitmapC1Et>
 80112ec:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80112f0:	4619      	mov	r1, r3
 80112f2:	4620      	mov	r0, r4
 80112f4:	f002 ff1a 	bl	801412c <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    TPSProgress.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	f503 64f3 	add.w	r4, r3, #1944	; 0x798
 80112fe:	2200      	movs	r2, #0
 8011300:	21dc      	movs	r1, #220	; 0xdc
 8011302:	e001      	b.n	8011308 <_ZN12MainViewBaseC1Ev+0xfd4>
 8011304:	08024918 	.word	0x08024918
 8011308:	20ff      	movs	r0, #255	; 0xff
 801130a:	f7fe ffe9 	bl	80102e0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801130e:	4603      	mov	r3, r0
 8011310:	4619      	mov	r1, r3
 8011312:	4620      	mov	r0, r4
 8011314:	f002 fdbe 	bl	8013e94 <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>
    TPSProgress.setValue(60);
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	f503 63f3 	add.w	r3, r3, #1944	; 0x798
 801131e:	213c      	movs	r1, #60	; 0x3c
 8011320:	4618      	mov	r0, r3
 8011322:	f002 fe25 	bl	8013f70 <_ZN8touchgfx11BoxProgress8setValueEi>

    line10.setPosition(14, 258, 180, 10);
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	f603 0058 	addw	r0, r3, #2136	; 0x858
 801132c:	230a      	movs	r3, #10
 801132e:	9300      	str	r3, [sp, #0]
 8011330:	23b4      	movs	r3, #180	; 0xb4
 8011332:	f44f 7281 	mov.w	r2, #258	; 0x102
 8011336:	210e      	movs	r1, #14
 8011338:	f7fe f9f8 	bl	800f72c <_ZN8touchgfx8Drawable11setPositionEssss>
    line10Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	f603 04cc 	addw	r4, r3, #2252	; 0x8cc
 8011342:	22ff      	movs	r2, #255	; 0xff
 8011344:	21ff      	movs	r1, #255	; 0xff
 8011346:	20ff      	movs	r0, #255	; 0xff
 8011348:	f7fe ffca 	bl	80102e0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801134c:	4603      	mov	r3, r0
 801134e:	22ff      	movs	r2, #255	; 0xff
 8011350:	4619      	mov	r1, r3
 8011352:	4620      	mov	r0, r4
 8011354:	f004 f947 	bl	80155e6 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line10.setPainter(line10Painter);
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	f603 0258 	addw	r2, r3, #2136	; 0x858
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	f603 03cc 	addw	r3, r3, #2252	; 0x8cc
 8011364:	4619      	mov	r1, r3
 8011366:	4610      	mov	r0, r2
 8011368:	f004 f9a6 	bl	80156b8 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line10.setStart(0, 5);
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	f603 0358 	addw	r3, r3, #2136	; 0x858
 8011372:	2205      	movs	r2, #5
 8011374:	2100      	movs	r1, #0
 8011376:	4618      	mov	r0, r3
 8011378:	f000 f9f2 	bl	8011760 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line10.setEnd(180, 5);
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	f603 0358 	addw	r3, r3, #2136	; 0x858
 8011382:	2205      	movs	r2, #5
 8011384:	21b4      	movs	r1, #180	; 0xb4
 8011386:	4618      	mov	r0, r3
 8011388:	f000 fa10 	bl	80117ac <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line10.setLineWidth(2);
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	f603 0358 	addw	r3, r3, #2136	; 0x858
 8011392:	2102      	movs	r1, #2
 8011394:	4618      	mov	r0, r3
 8011396:	f000 fa2f 	bl	80117f8 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line10.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	f603 0358 	addw	r3, r3, #2136	; 0x858
 80113a0:	2100      	movs	r1, #0
 80113a2:	4618      	mov	r0, r3
 80113a4:	f004 fca2 	bl	8015cec <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    line10_1.setPosition(287, 258, 180, 10);
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	f603 00e4 	addw	r0, r3, #2276	; 0x8e4
 80113ae:	230a      	movs	r3, #10
 80113b0:	9300      	str	r3, [sp, #0]
 80113b2:	23b4      	movs	r3, #180	; 0xb4
 80113b4:	f44f 7281 	mov.w	r2, #258	; 0x102
 80113b8:	f240 111f 	movw	r1, #287	; 0x11f
 80113bc:	f7fe f9b6 	bl	800f72c <_ZN8touchgfx8Drawable11setPositionEssss>
    line10_1Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	f603 1458 	addw	r4, r3, #2392	; 0x958
 80113c6:	22ff      	movs	r2, #255	; 0xff
 80113c8:	21ff      	movs	r1, #255	; 0xff
 80113ca:	20ff      	movs	r0, #255	; 0xff
 80113cc:	f7fe ff88 	bl	80102e0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80113d0:	4603      	mov	r3, r0
 80113d2:	22ff      	movs	r2, #255	; 0xff
 80113d4:	4619      	mov	r1, r3
 80113d6:	4620      	mov	r0, r4
 80113d8:	f004 f905 	bl	80155e6 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line10_1.setPainter(line10_1Painter);
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	f603 02e4 	addw	r2, r3, #2276	; 0x8e4
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	f603 1358 	addw	r3, r3, #2392	; 0x958
 80113e8:	4619      	mov	r1, r3
 80113ea:	4610      	mov	r0, r2
 80113ec:	f004 f964 	bl	80156b8 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line10_1.setStart(0, 5);
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	f603 03e4 	addw	r3, r3, #2276	; 0x8e4
 80113f6:	2205      	movs	r2, #5
 80113f8:	2100      	movs	r1, #0
 80113fa:	4618      	mov	r0, r3
 80113fc:	f000 f9b0 	bl	8011760 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line10_1.setEnd(180, 5);
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	f603 03e4 	addw	r3, r3, #2276	; 0x8e4
 8011406:	2205      	movs	r2, #5
 8011408:	21b4      	movs	r1, #180	; 0xb4
 801140a:	4618      	mov	r0, r3
 801140c:	f000 f9ce 	bl	80117ac <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line10_1.setLineWidth(2);
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	f603 03e4 	addw	r3, r3, #2276	; 0x8e4
 8011416:	2102      	movs	r1, #2
 8011418:	4618      	mov	r0, r3
 801141a:	f000 f9ed 	bl	80117f8 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line10_1.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	f603 03e4 	addw	r3, r3, #2276	; 0x8e4
 8011424:	2100      	movs	r1, #0
 8011426:	4618      	mov	r0, r3
 8011428:	f004 fc60 	bl	8015cec <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    BatteryVoltage.setXY(225, 254);
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	f503 6317 	add.w	r3, r3, #2416	; 0x970
 8011432:	22fe      	movs	r2, #254	; 0xfe
 8011434:	21e1      	movs	r1, #225	; 0xe1
 8011436:	4618      	mov	r0, r3
 8011438:	f7fe f9c3 	bl	800f7c2 <_ZN8touchgfx8Drawable5setXYEss>
    BatteryVoltage.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	f503 6417 	add.w	r4, r3, #2416	; 0x970
 8011442:	22ff      	movs	r2, #255	; 0xff
 8011444:	21ff      	movs	r1, #255	; 0xff
 8011446:	20ff      	movs	r0, #255	; 0xff
 8011448:	f7fe ff4a 	bl	80102e0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801144c:	4603      	mov	r3, r0
 801144e:	4619      	mov	r1, r3
 8011450:	4620      	mov	r0, r4
 8011452:	f7fe fc3a 	bl	800fcca <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    BatteryVoltage.setLinespacing(0);
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	f503 6317 	add.w	r3, r3, #2416	; 0x970
 801145c:	2100      	movs	r1, #0
 801145e:	4618      	mov	r0, r3
 8011460:	f7fe fc86 	bl	800fd70 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(BatteryVoltageBuffer, BATTERYVOLTAGE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID45).getText());
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	f603 2402 	addw	r4, r3, #2562	; 0xa02
 801146a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801146e:	2127      	movs	r1, #39	; 0x27
 8011470:	4618      	mov	r0, r3
 8011472:	f7fe fbc1 	bl	800fbf8 <_ZN8touchgfx9TypedTextC1Et>
 8011476:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801147a:	4618      	mov	r0, r3
 801147c:	f7fe fbcc 	bl	800fc18 <_ZNK8touchgfx9TypedText7getTextEv>
 8011480:	4603      	mov	r3, r0
 8011482:	4aa6      	ldr	r2, [pc, #664]	; (801171c <_ZN12MainViewBaseC1Ev+0x13e8>)
 8011484:	2105      	movs	r1, #5
 8011486:	4620      	mov	r0, r4
 8011488:	f008 f83e 	bl	8019508 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    BatteryVoltage.setWildcard(BatteryVoltageBuffer);
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	f503 6217 	add.w	r2, r3, #2416	; 0x970
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	f603 2302 	addw	r3, r3, #2562	; 0xa02
 8011498:	4619      	mov	r1, r3
 801149a:	4610      	mov	r0, r2
 801149c:	f7fe fcf0 	bl	800fe80 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    BatteryVoltage.resizeToCurrentText();
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	f503 6317 	add.w	r3, r3, #2416	; 0x970
 80114a6:	4618      	mov	r0, r3
 80114a8:	f004 fda2 	bl	8015ff0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    BatteryVoltage.setTypedText(touchgfx::TypedText(T_SINGLEUSEID44));
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	f503 6417 	add.w	r4, r3, #2416	; 0x970
 80114b2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80114b6:	2126      	movs	r1, #38	; 0x26
 80114b8:	4618      	mov	r0, r3
 80114ba:	f7fe fb9d 	bl	800fbf8 <_ZN8touchgfx9TypedTextC1Et>
 80114be:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	; 0xb4
 80114c2:	4620      	mov	r0, r4
 80114c4:	f004 fdbe 	bl	8016044 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    add(backgroundBox);
 80114c8:	687a      	ldr	r2, [r7, #4]
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	3340      	adds	r3, #64	; 0x40
 80114ce:	4619      	mov	r1, r3
 80114d0:	4610      	mov	r0, r2
 80114d2:	f7fe fad9 	bl	800fa88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(RpmDescriptor);
 80114d6:	687a      	ldr	r2, [r7, #4]
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	3370      	adds	r3, #112	; 0x70
 80114dc:	4619      	mov	r1, r3
 80114de:	4610      	mov	r0, r2
 80114e0:	f7fe fad2 	bl	800fa88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(KpaDescriptor);
 80114e4:	687a      	ldr	r2, [r7, #4]
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	33a4      	adds	r3, #164	; 0xa4
 80114ea:	4619      	mov	r1, r3
 80114ec:	4610      	mov	r0, r2
 80114ee:	f7fe facb 	bl	800fa88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CltDecsriptor);
 80114f2:	687a      	ldr	r2, [r7, #4]
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	33d8      	adds	r3, #216	; 0xd8
 80114f8:	4619      	mov	r1, r3
 80114fa:	4610      	mov	r0, r2
 80114fc:	f7fe fac4 	bl	800fa88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(LambdaDescriptor);
 8011500:	687a      	ldr	r2, [r7, #4]
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8011508:	4619      	mov	r1, r3
 801150a:	4610      	mov	r0, r2
 801150c:	f7fe fabc 	bl	800fa88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TrgtDescriptor);
 8011510:	687a      	ldr	r2, [r7, #4]
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8011518:	4619      	mov	r1, r3
 801151a:	4610      	mov	r0, r2
 801151c:	f7fe fab4 	bl	800fa88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(LambdaValue);
 8011520:	687a      	ldr	r2, [r7, #4]
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8011528:	4619      	mov	r1, r3
 801152a:	4610      	mov	r0, r2
 801152c:	f7fe faac 	bl	800fa88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TrgtValue);
 8011530:	687a      	ldr	r2, [r7, #4]
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8011538:	4619      	mov	r1, r3
 801153a:	4610      	mov	r0, r2
 801153c:	f7fe faa4 	bl	800fa88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(KpaValue);
 8011540:	687a      	ldr	r2, [r7, #4]
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011548:	4619      	mov	r1, r3
 801154a:	4610      	mov	r0, r2
 801154c:	f7fe fa9c 	bl	800fa88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CltValue);
 8011550:	687a      	ldr	r2, [r7, #4]
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8011558:	4619      	mov	r1, r3
 801155a:	4610      	mov	r0, r2
 801155c:	f7fe fa94 	bl	800fa88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(KmhValue);
 8011560:	687a      	ldr	r2, [r7, #4]
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8011568:	4619      	mov	r1, r3
 801156a:	4610      	mov	r0, r2
 801156c:	f7fe fa8c 	bl	800fa88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(backgroundImage);
 8011570:	687a      	ldr	r2, [r7, #4]
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8011578:	4619      	mov	r1, r3
 801157a:	4610      	mov	r0, r2
 801157c:	f7fe fa84 	bl	800fa88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(boxWithBorder1);
 8011580:	687a      	ldr	r2, [r7, #4]
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8011588:	4619      	mov	r1, r3
 801158a:	4610      	mov	r0, r2
 801158c:	f7fe fa7c 	bl	800fa88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpmProgress);
 8011590:	687a      	ldr	r2, [r7, #4]
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
 8011598:	4619      	mov	r1, r3
 801159a:	4610      	mov	r0, r2
 801159c:	f7fe fa74 	bl	800fa88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm1);
 80115a0:	687a      	ldr	r2, [r7, #4]
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	f503 736b 	add.w	r3, r3, #940	; 0x3ac
 80115a8:	4619      	mov	r1, r3
 80115aa:	4610      	mov	r0, r2
 80115ac:	f7fe fa6c 	bl	800fa88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm2);
 80115b0:	687a      	ldr	r2, [r7, #4]
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 80115b8:	4619      	mov	r1, r3
 80115ba:	4610      	mov	r0, r2
 80115bc:	f7fe fa64 	bl	800fa88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm3);
 80115c0:	687a      	ldr	r2, [r7, #4]
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	f203 4314 	addw	r3, r3, #1044	; 0x414
 80115c8:	4619      	mov	r1, r3
 80115ca:	4610      	mov	r0, r2
 80115cc:	f7fe fa5c 	bl	800fa88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm4);
 80115d0:	687a      	ldr	r2, [r7, #4]
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 80115d8:	4619      	mov	r1, r3
 80115da:	4610      	mov	r0, r2
 80115dc:	f7fe fa54 	bl	800fa88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm5);
 80115e0:	687a      	ldr	r2, [r7, #4]
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	f203 437c 	addw	r3, r3, #1148	; 0x47c
 80115e8:	4619      	mov	r1, r3
 80115ea:	4610      	mov	r0, r2
 80115ec:	f7fe fa4c 	bl	800fa88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm6);
 80115f0:	687a      	ldr	r2, [r7, #4]
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 80115f8:	4619      	mov	r1, r3
 80115fa:	4610      	mov	r0, r2
 80115fc:	f7fe fa44 	bl	800fa88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm7);
 8011600:	687a      	ldr	r2, [r7, #4]
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	f203 43e4 	addw	r3, r3, #1252	; 0x4e4
 8011608:	4619      	mov	r1, r3
 801160a:	4610      	mov	r0, r2
 801160c:	f7fe fa3c 	bl	800fa88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm8);
 8011610:	687a      	ldr	r2, [r7, #4]
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 8011618:	4619      	mov	r1, r3
 801161a:	4610      	mov	r0, r2
 801161c:	f7fe fa34 	bl	800fa88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm9);
 8011620:	687a      	ldr	r2, [r7, #4]
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 8011628:	4619      	mov	r1, r3
 801162a:	4610      	mov	r0, r2
 801162c:	f7fe fa2c 	bl	800fa88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm10);
 8011630:	687a      	ldr	r2, [r7, #4]
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 8011638:	4619      	mov	r1, r3
 801163a:	4610      	mov	r0, r2
 801163c:	f7fe fa24 	bl	800fa88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor);
 8011640:	687a      	ldr	r2, [r7, #4]
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	f203 53b4 	addw	r3, r3, #1460	; 0x5b4
 8011648:	4619      	mov	r1, r3
 801164a:	4610      	mov	r0, r2
 801164c:	f7fe fa1c 	bl	800fa88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ECTDescriptor);
 8011650:	687a      	ldr	r2, [r7, #4]
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	f503 63bd 	add.w	r3, r3, #1512	; 0x5e8
 8011658:	4619      	mov	r1, r3
 801165a:	4610      	mov	r0, r2
 801165c:	f7fe fa14 	bl	800fa88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATValue);
 8011660:	687a      	ldr	r2, [r7, #4]
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 8011668:	4619      	mov	r1, r3
 801166a:	4610      	mov	r0, r2
 801166c:	f7fe fa0c 	bl	800fa88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ECTValue);
 8011670:	687a      	ldr	r2, [r7, #4]
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	f203 6354 	addw	r3, r3, #1620	; 0x654
 8011678:	4619      	mov	r1, r3
 801167a:	4610      	mov	r0, r2
 801167c:	f7fe fa04 	bl	800fa88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor_1);
 8011680:	687a      	ldr	r2, [r7, #4]
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 8011688:	4619      	mov	r1, r3
 801168a:	4610      	mov	r0, r2
 801168c:	f7fe f9fc 	bl	800fa88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ECTDescriptor_1);
 8011690:	687a      	ldr	r2, [r7, #4]
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	f503 63d8 	add.w	r3, r3, #1728	; 0x6c0
 8011698:	4619      	mov	r1, r3
 801169a:	4610      	mov	r0, r2
 801169c:	f7fe f9f4 	bl	800fa88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(OILTempValue);
 80116a0:	687a      	ldr	r2, [r7, #4]
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	f203 63f4 	addw	r3, r3, #1780	; 0x6f4
 80116a8:	4619      	mov	r1, r3
 80116aa:	4610      	mov	r0, r2
 80116ac:	f7fe f9ec 	bl	800fa88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(OILPressureValue);
 80116b0:	687a      	ldr	r2, [r7, #4]
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	f203 732c 	addw	r3, r3, #1836	; 0x72c
 80116b8:	4619      	mov	r1, r3
 80116ba:	4610      	mov	r0, r2
 80116bc:	f7fe f9e4 	bl	800fa88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor_1_1);
 80116c0:	687a      	ldr	r2, [r7, #4]
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	f203 7364 	addw	r3, r3, #1892	; 0x764
 80116c8:	4619      	mov	r1, r3
 80116ca:	4610      	mov	r0, r2
 80116cc:	f7fe f9dc 	bl	800fa88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TPSProgress);
 80116d0:	687a      	ldr	r2, [r7, #4]
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	f503 63f3 	add.w	r3, r3, #1944	; 0x798
 80116d8:	4619      	mov	r1, r3
 80116da:	4610      	mov	r0, r2
 80116dc:	f7fe f9d4 	bl	800fa88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line10);
 80116e0:	687a      	ldr	r2, [r7, #4]
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	f603 0358 	addw	r3, r3, #2136	; 0x858
 80116e8:	4619      	mov	r1, r3
 80116ea:	4610      	mov	r0, r2
 80116ec:	f7fe f9cc 	bl	800fa88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line10_1);
 80116f0:	687a      	ldr	r2, [r7, #4]
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	f603 03e4 	addw	r3, r3, #2276	; 0x8e4
 80116f8:	4619      	mov	r1, r3
 80116fa:	4610      	mov	r0, r2
 80116fc:	f7fe f9c4 	bl	800fa88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(BatteryVoltage);
 8011700:	687a      	ldr	r2, [r7, #4]
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	f503 6317 	add.w	r3, r3, #2416	; 0x970
 8011708:	4619      	mov	r1, r3
 801170a:	4610      	mov	r0, r2
 801170c:	f7fe f9bc 	bl	800fa88 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	4618      	mov	r0, r3
 8011714:	37bc      	adds	r7, #188	; 0xbc
 8011716:	46bd      	mov	sp, r7
 8011718:	bd90      	pop	{r4, r7, pc}
 801171a:	bf00      	nop
 801171c:	08024918 	.word	0x08024918

08011720 <_ZN12MainViewBase11setupScreenEv>:

void MainViewBase::setupScreen()
{
 8011720:	b480      	push	{r7}
 8011722:	b083      	sub	sp, #12
 8011724:	af00      	add	r7, sp, #0
 8011726:	6078      	str	r0, [r7, #4]

}
 8011728:	bf00      	nop
 801172a:	370c      	adds	r7, #12
 801172c:	46bd      	mov	sp, r7
 801172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011732:	4770      	bx	lr

08011734 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>:
    View() : presenter(0)
 8011734:	b580      	push	{r7, lr}
 8011736:	b082      	sub	sp, #8
 8011738:	af00      	add	r7, sp, #0
 801173a:	6078      	str	r0, [r7, #4]
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	4618      	mov	r0, r3
 8011740:	f006 fe1c 	bl	801837c <_ZN8touchgfx6ScreenC1Ev>
 8011744:	4a05      	ldr	r2, [pc, #20]	; (801175c <_ZN8touchgfx4ViewI13MainPresenterEC1Ev+0x28>)
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	601a      	str	r2, [r3, #0]
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	2200      	movs	r2, #0
 801174e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	4618      	mov	r0, r3
 8011754:	3708      	adds	r7, #8
 8011756:	46bd      	mov	sp, r7
 8011758:	bd80      	pop	{r7, pc}
 801175a:	bf00      	nop
 801175c:	08024e50 	.word	0x08024e50

08011760 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>:
    void setStart(T x, T y)
 8011760:	b590      	push	{r4, r7, lr}
 8011762:	b089      	sub	sp, #36	; 0x24
 8011764:	af00      	add	r7, sp, #0
 8011766:	60f8      	str	r0, [r7, #12]
 8011768:	60b9      	str	r1, [r7, #8]
 801176a:	607a      	str	r2, [r7, #4]
 801176c:	68bb      	ldr	r3, [r7, #8]
 801176e:	61bb      	str	r3, [r7, #24]
#ifndef  __ICCARM__
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 8011770:	69bb      	ldr	r3, [r7, #24]
 8011772:	015a      	lsls	r2, r3, #5
 8011774:	f107 0314 	add.w	r3, r7, #20
 8011778:	4611      	mov	r1, r2
 801177a:	4618      	mov	r0, r3
 801177c:	f7fe fc24 	bl	800ffc8 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8011780:	697b      	ldr	r3, [r7, #20]
 8011782:	461c      	mov	r4, r3
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	61fb      	str	r3, [r7, #28]
 8011788:	69fb      	ldr	r3, [r7, #28]
 801178a:	015a      	lsls	r2, r3, #5
 801178c:	f107 0310 	add.w	r3, r7, #16
 8011790:	4611      	mov	r1, r2
 8011792:	4618      	mov	r0, r3
 8011794:	f7fe fc18 	bl	800ffc8 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8011798:	693b      	ldr	r3, [r7, #16]
        setStart(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 801179a:	461a      	mov	r2, r3
 801179c:	4621      	mov	r1, r4
 801179e:	68f8      	ldr	r0, [r7, #12]
 80117a0:	f004 fa8e 	bl	8015cc0 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>
    }
 80117a4:	bf00      	nop
 80117a6:	3724      	adds	r7, #36	; 0x24
 80117a8:	46bd      	mov	sp, r7
 80117aa:	bd90      	pop	{r4, r7, pc}

080117ac <_ZN8touchgfx4Line6setEndIiEEvT_S2_>:
    void setEnd(T x, T y)
 80117ac:	b590      	push	{r4, r7, lr}
 80117ae:	b089      	sub	sp, #36	; 0x24
 80117b0:	af00      	add	r7, sp, #0
 80117b2:	60f8      	str	r0, [r7, #12]
 80117b4:	60b9      	str	r1, [r7, #8]
 80117b6:	607a      	str	r2, [r7, #4]
 80117b8:	68bb      	ldr	r3, [r7, #8]
 80117ba:	61bb      	str	r3, [r7, #24]
 80117bc:	69bb      	ldr	r3, [r7, #24]
 80117be:	015a      	lsls	r2, r3, #5
 80117c0:	f107 0314 	add.w	r3, r7, #20
 80117c4:	4611      	mov	r1, r2
 80117c6:	4618      	mov	r0, r3
 80117c8:	f7fe fbfe 	bl	800ffc8 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80117cc:	697b      	ldr	r3, [r7, #20]
 80117ce:	461c      	mov	r4, r3
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	61fb      	str	r3, [r7, #28]
 80117d4:	69fb      	ldr	r3, [r7, #28]
 80117d6:	015a      	lsls	r2, r3, #5
 80117d8:	f107 0310 	add.w	r3, r7, #16
 80117dc:	4611      	mov	r1, r2
 80117de:	4618      	mov	r0, r3
 80117e0:	f7fe fbf2 	bl	800ffc8 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80117e4:	693b      	ldr	r3, [r7, #16]
        setEnd(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 80117e6:	461a      	mov	r2, r3
 80117e8:	4621      	mov	r1, r4
 80117ea:	68f8      	ldr	r0, [r7, #12]
 80117ec:	f004 fa73 	bl	8015cd6 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>
    }
 80117f0:	bf00      	nop
 80117f2:	3724      	adds	r7, #36	; 0x24
 80117f4:	46bd      	mov	sp, r7
 80117f6:	bd90      	pop	{r4, r7, pc}

080117f8 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>:
    void setLineWidth(T width)
 80117f8:	b580      	push	{r7, lr}
 80117fa:	b084      	sub	sp, #16
 80117fc:	af00      	add	r7, sp, #0
 80117fe:	6078      	str	r0, [r7, #4]
 8011800:	6039      	str	r1, [r7, #0]
 8011802:	683b      	ldr	r3, [r7, #0]
 8011804:	60fb      	str	r3, [r7, #12]
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	015a      	lsls	r2, r3, #5
 801180a:	f107 0308 	add.w	r3, r7, #8
 801180e:	4611      	mov	r1, r2
 8011810:	4618      	mov	r0, r3
 8011812:	f7fe fbd9 	bl	800ffc8 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8011816:	68bb      	ldr	r3, [r7, #8]
        setLineWidth(CWRUtil::toQ5<T>(width));
 8011818:	4619      	mov	r1, r3
 801181a:	6878      	ldr	r0, [r7, #4]
 801181c:	f7fe fbef 	bl	800fffe <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>
    }
 8011820:	bf00      	nop
 8011822:	3710      	adds	r7, #16
 8011824:	46bd      	mov	sp, r7
 8011826:	bd80      	pop	{r7, pc}

08011828 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8011828:	b580      	push	{r7, lr}
 801182a:	b082      	sub	sp, #8
 801182c:	af00      	add	r7, sp, #0
 801182e:	6078      	str	r0, [r7, #4]
 8011830:	4a05      	ldr	r2, [pc, #20]	; (8011848 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	601a      	str	r2, [r3, #0]
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	4618      	mov	r0, r3
 801183a:	f7fe fae9 	bl	800fe10 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	4618      	mov	r0, r3
 8011842:	3708      	adds	r7, #8
 8011844:	46bd      	mov	sp, r7
 8011846:	bd80      	pop	{r7, pc}
 8011848:	080267f4 	.word	0x080267f4

0801184c <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 801184c:	b580      	push	{r7, lr}
 801184e:	b082      	sub	sp, #8
 8011850:	af00      	add	r7, sp, #0
 8011852:	6078      	str	r0, [r7, #4]
 8011854:	6878      	ldr	r0, [r7, #4]
 8011856:	f7ff ffe7 	bl	8011828 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801185a:	2138      	movs	r1, #56	; 0x38
 801185c:	6878      	ldr	r0, [r7, #4]
 801185e:	f011 fdc0 	bl	80233e2 <_ZdlPvj>
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	4618      	mov	r0, r3
 8011866:	3708      	adds	r7, #8
 8011868:	46bd      	mov	sp, r7
 801186a:	bd80      	pop	{r7, pc}

0801186c <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 801186c:	b580      	push	{r7, lr}
 801186e:	b082      	sub	sp, #8
 8011870:	af00      	add	r7, sp, #0
 8011872:	6078      	str	r0, [r7, #4]
 8011874:	4a05      	ldr	r2, [pc, #20]	; (801188c <_ZN8touchgfx5ImageD1Ev+0x20>)
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	601a      	str	r2, [r3, #0]
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	4618      	mov	r0, r3
 801187e:	f7fe f925 	bl	800facc <_ZN8touchgfx6WidgetD1Ev>
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	4618      	mov	r0, r3
 8011886:	3708      	adds	r7, #8
 8011888:	46bd      	mov	sp, r7
 801188a:	bd80      	pop	{r7, pc}
 801188c:	080268d8 	.word	0x080268d8

08011890 <_ZN8touchgfx5ImageD0Ev>:
 8011890:	b580      	push	{r7, lr}
 8011892:	b082      	sub	sp, #8
 8011894:	af00      	add	r7, sp, #0
 8011896:	6078      	str	r0, [r7, #4]
 8011898:	6878      	ldr	r0, [r7, #4]
 801189a:	f7ff ffe7 	bl	801186c <_ZN8touchgfx5ImageD1Ev>
 801189e:	212c      	movs	r1, #44	; 0x2c
 80118a0:	6878      	ldr	r0, [r7, #4]
 80118a2:	f011 fd9e 	bl	80233e2 <_ZdlPvj>
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	4618      	mov	r0, r3
 80118aa:	3708      	adds	r7, #8
 80118ac:	46bd      	mov	sp, r7
 80118ae:	bd80      	pop	{r7, pc}

080118b0 <_ZN8touchgfx4LineD1Ev>:
class Line : public CanvasWidget
 80118b0:	b580      	push	{r7, lr}
 80118b2:	b082      	sub	sp, #8
 80118b4:	af00      	add	r7, sp, #0
 80118b6:	6078      	str	r0, [r7, #4]
 80118b8:	4a05      	ldr	r2, [pc, #20]	; (80118d0 <_ZN8touchgfx4LineD1Ev+0x20>)
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	601a      	str	r2, [r3, #0]
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	4618      	mov	r0, r3
 80118c2:	f003 ffd7 	bl	8015874 <_ZN8touchgfx12CanvasWidgetD1Ev>
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	4618      	mov	r0, r3
 80118ca:	3708      	adds	r7, #8
 80118cc:	46bd      	mov	sp, r7
 80118ce:	bd80      	pop	{r7, pc}
 80118d0:	08026624 	.word	0x08026624

080118d4 <_ZN8touchgfx4LineD0Ev>:
 80118d4:	b580      	push	{r7, lr}
 80118d6:	b082      	sub	sp, #8
 80118d8:	af00      	add	r7, sp, #0
 80118da:	6078      	str	r0, [r7, #4]
 80118dc:	6878      	ldr	r0, [r7, #4]
 80118de:	f7ff ffe7 	bl	80118b0 <_ZN8touchgfx4LineD1Ev>
 80118e2:	2174      	movs	r1, #116	; 0x74
 80118e4:	6878      	ldr	r0, [r7, #4]
 80118e6:	f011 fd7c 	bl	80233e2 <_ZdlPvj>
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	4618      	mov	r0, r3
 80118ee:	3708      	adds	r7, #8
 80118f0:	46bd      	mov	sp, r7
 80118f2:	bd80      	pop	{r7, pc}

080118f4 <_ZN8touchgfx13PainterRGB888D1Ev>:
 *        The PainterRGB888 class allows a shape to be filled with a given color and alpha
 *        value. This allows transparent, anti-aliased elements to be drawn.
 *
 * @see AbstractPainter
 */
class PainterRGB888 : public AbstractPainterRGB888
 80118f4:	b580      	push	{r7, lr}
 80118f6:	b082      	sub	sp, #8
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	6078      	str	r0, [r7, #4]
 80118fc:	4a05      	ldr	r2, [pc, #20]	; (8011914 <_ZN8touchgfx13PainterRGB888D1Ev+0x20>)
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	601a      	str	r2, [r3, #0]
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	4618      	mov	r0, r3
 8011906:	f7fe fb9d 	bl	8010044 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	4618      	mov	r0, r3
 801190e:	3708      	adds	r7, #8
 8011910:	46bd      	mov	sp, r7
 8011912:	bd80      	pop	{r7, pc}
 8011914:	08026328 	.word	0x08026328

08011918 <_ZN8touchgfx13PainterRGB888D0Ev>:
 8011918:	b580      	push	{r7, lr}
 801191a:	b082      	sub	sp, #8
 801191c:	af00      	add	r7, sp, #0
 801191e:	6078      	str	r0, [r7, #4]
 8011920:	6878      	ldr	r0, [r7, #4]
 8011922:	f7ff ffe7 	bl	80118f4 <_ZN8touchgfx13PainterRGB888D1Ev>
 8011926:	2118      	movs	r1, #24
 8011928:	6878      	ldr	r0, [r7, #4]
 801192a:	f011 fd5a 	bl	80233e2 <_ZdlPvj>
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	4618      	mov	r0, r3
 8011932:	3708      	adds	r7, #8
 8011934:	46bd      	mov	sp, r7
 8011936:	bd80      	pop	{r7, pc}

08011938 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8011938:	b480      	push	{r7}
 801193a:	af00      	add	r7, sp, #0
    return bitmap_database;
 801193c:	4b02      	ldr	r3, [pc, #8]	; (8011948 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 801193e:	4618      	mov	r0, r3
 8011940:	46bd      	mov	sp, r7
 8011942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011946:	4770      	bx	lr
 8011948:	08024fbc 	.word	0x08024fbc

0801194c <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 801194c:	b480      	push	{r7}
 801194e:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8011950:	2301      	movs	r3, #1
}
 8011952:	4618      	mov	r0, r3
 8011954:	46bd      	mov	sp, r7
 8011956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801195a:	4770      	bx	lr

0801195c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 801195c:	b480      	push	{r7}
 801195e:	b085      	sub	sp, #20
 8011960:	af00      	add	r7, sp, #0
 8011962:	60f8      	str	r0, [r7, #12]
 8011964:	60b9      	str	r1, [r7, #8]
 8011966:	4613      	mov	r3, r2
 8011968:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 801196a:	4a07      	ldr	r2, [pc, #28]	; (8011988 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	6013      	str	r3, [r2, #0]
        fonts = f;
 8011970:	4a06      	ldr	r2, [pc, #24]	; (801198c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8011972:	68bb      	ldr	r3, [r7, #8]
 8011974:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8011976:	4a06      	ldr	r2, [pc, #24]	; (8011990 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8011978:	88fb      	ldrh	r3, [r7, #6]
 801197a:	8013      	strh	r3, [r2, #0]
    }
 801197c:	bf00      	nop
 801197e:	3714      	adds	r7, #20
 8011980:	46bd      	mov	sp, r7
 8011982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011986:	4770      	bx	lr
 8011988:	2000bb68 	.word	0x2000bb68
 801198c:	2000bb70 	.word	0x2000bb70
 8011990:	2000bb6c 	.word	0x2000bb6c

08011994 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8011994:	b590      	push	{r4, r7, lr}
 8011996:	b085      	sub	sp, #20
 8011998:	af00      	add	r7, sp, #0
 801199a:	4603      	mov	r3, r0
 801199c:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 801199e:	2300      	movs	r3, #0
 80119a0:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 80119a2:	88fb      	ldrh	r3, [r7, #6]
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d127      	bne.n	80119f8 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 80119a8:	88fb      	ldrh	r3, [r7, #6]
 80119aa:	4a1e      	ldr	r2, [pc, #120]	; (8011a24 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80119ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d016      	beq.n	80119e2 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 80119b4:	88fb      	ldrh	r3, [r7, #6]
 80119b6:	4a1b      	ldr	r2, [pc, #108]	; (8011a24 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80119b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80119bc:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80119be:	68bb      	ldr	r3, [r7, #8]
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	68ba      	ldr	r2, [r7, #8]
 80119c4:	4413      	add	r3, r2
 80119c6:	4a18      	ldr	r2, [pc, #96]	; (8011a28 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80119c8:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80119ca:	68bb      	ldr	r3, [r7, #8]
 80119cc:	685b      	ldr	r3, [r3, #4]
 80119ce:	68ba      	ldr	r2, [r7, #8]
 80119d0:	4413      	add	r3, r2
 80119d2:	4a16      	ldr	r2, [pc, #88]	; (8011a2c <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 80119d4:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80119d6:	68bb      	ldr	r3, [r7, #8]
 80119d8:	689b      	ldr	r3, [r3, #8]
 80119da:	68ba      	ldr	r2, [r7, #8]
 80119dc:	4413      	add	r3, r2
 80119de:	60fb      	str	r3, [r7, #12]
 80119e0:	e00a      	b.n	80119f8 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 80119e2:	4b11      	ldr	r3, [pc, #68]	; (8011a28 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80119e4:	4a12      	ldr	r2, [pc, #72]	; (8011a30 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 80119e6:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 80119e8:	4a12      	ldr	r2, [pc, #72]	; (8011a34 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 80119ea:	4b10      	ldr	r3, [pc, #64]	; (8011a2c <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 80119ec:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 80119ee:	88fb      	ldrh	r3, [r7, #6]
 80119f0:	4a11      	ldr	r2, [pc, #68]	; (8011a38 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 80119f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80119f6:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d00d      	beq.n	8011a1a <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 80119fe:	4a0f      	ldr	r2, [pc, #60]	; (8011a3c <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8011a00:	88fb      	ldrh	r3, [r7, #6]
 8011a02:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8011a04:	f000 f83e 	bl	8011a84 <_ZN17TypedTextDatabase8getFontsEv>
 8011a08:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8011a0a:	f000 f833 	bl	8011a74 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8011a0e:	4603      	mov	r3, r0
 8011a10:	461a      	mov	r2, r3
 8011a12:	4621      	mov	r1, r4
 8011a14:	68f8      	ldr	r0, [r7, #12]
 8011a16:	f7ff ffa1 	bl	801195c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8011a1a:	bf00      	nop
 8011a1c:	3714      	adds	r7, #20
 8011a1e:	46bd      	mov	sp, r7
 8011a20:	bd90      	pop	{r4, r7, pc}
 8011a22:	bf00      	nop
 8011a24:	200085c0 	.word	0x200085c0
 8011a28:	200085c8 	.word	0x200085c8
 8011a2c:	200085cc 	.word	0x200085cc
 8011a30:	0802cefc 	.word	0x0802cefc
 8011a34:	0802ce5c 	.word	0x0802ce5c
 8011a38:	0802d00c 	.word	0x0802d00c
 8011a3c:	200085c4 	.word	0x200085c4

08011a40 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8011a40:	b480      	push	{r7}
 8011a42:	b083      	sub	sp, #12
 8011a44:	af00      	add	r7, sp, #0
 8011a46:	6078      	str	r0, [r7, #4]
 8011a48:	460b      	mov	r3, r1
 8011a4a:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8011a4c:	4b07      	ldr	r3, [pc, #28]	; (8011a6c <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8011a4e:	681a      	ldr	r2, [r3, #0]
 8011a50:	4b07      	ldr	r3, [pc, #28]	; (8011a70 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 8011a52:	6819      	ldr	r1, [r3, #0]
 8011a54:	887b      	ldrh	r3, [r7, #2]
 8011a56:	009b      	lsls	r3, r3, #2
 8011a58:	440b      	add	r3, r1
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	005b      	lsls	r3, r3, #1
 8011a5e:	4413      	add	r3, r2
}
 8011a60:	4618      	mov	r0, r3
 8011a62:	370c      	adds	r7, #12
 8011a64:	46bd      	mov	sp, r7
 8011a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a6a:	4770      	bx	lr
 8011a6c:	200085c8 	.word	0x200085c8
 8011a70:	200085cc 	.word	0x200085cc

08011a74 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8011a74:	b480      	push	{r7}
 8011a76:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8011a78:	2328      	movs	r3, #40	; 0x28
}
 8011a7a:	4618      	mov	r0, r3
 8011a7c:	46bd      	mov	sp, r7
 8011a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a82:	4770      	bx	lr

08011a84 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8011a84:	b480      	push	{r7}
 8011a86:	af00      	add	r7, sp, #0
    return _fonts;
 8011a88:	4b02      	ldr	r3, [pc, #8]	; (8011a94 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8011a8a:	4618      	mov	r0, r3
 8011a8c:	46bd      	mov	sp, r7
 8011a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a92:	4770      	bx	lr
 8011a94:	200085d0 	.word	0x200085d0

08011a98 <_Z41__static_initialization_and_destruction_0ii>:
    case 4:
        _fonts[4] = &(getFont_Asap_Bold_60_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 8011a98:	b580      	push	{r7, lr}
 8011a9a:	b082      	sub	sp, #8
 8011a9c:	af00      	add	r7, sp, #0
 8011a9e:	6078      	str	r0, [r7, #4]
 8011aa0:	6039      	str	r1, [r7, #0]
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	2b01      	cmp	r3, #1
 8011aa6:	d11d      	bne.n	8011ae4 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 8011aa8:	683b      	ldr	r3, [r7, #0]
 8011aaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011aae:	4293      	cmp	r3, r2
 8011ab0:	d118      	bne.n	8011ae4 <_Z41__static_initialization_and_destruction_0ii+0x4c>
    &(getFont_Asap_Regular_20_4bpp()),
 8011ab2:	f7fd f835 	bl	800eb20 <_Z28getFont_Asap_Regular_20_4bppv>
 8011ab6:	4602      	mov	r2, r0
};
 8011ab8:	4b0c      	ldr	r3, [pc, #48]	; (8011aec <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8011aba:	601a      	str	r2, [r3, #0]
    &(getFont_Asap_Bold_40_4bpp()),
 8011abc:	f7fc ffac 	bl	800ea18 <_Z25getFont_Asap_Bold_40_4bppv>
 8011ac0:	4602      	mov	r2, r0
};
 8011ac2:	4b0a      	ldr	r3, [pc, #40]	; (8011aec <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8011ac4:	605a      	str	r2, [r3, #4]
    &(getFont_Asap_Bold_30_4bpp()),
 8011ac6:	f7fc ff65 	bl	800e994 <_Z25getFont_Asap_Bold_30_4bppv>
 8011aca:	4602      	mov	r2, r0
};
 8011acc:	4b07      	ldr	r3, [pc, #28]	; (8011aec <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8011ace:	609a      	str	r2, [r3, #8]
    &(getFont_Asap_Bold_12_4bpp()),
 8011ad0:	f7fc ff1e 	bl	800e910 <_Z25getFont_Asap_Bold_12_4bppv>
 8011ad4:	4602      	mov	r2, r0
};
 8011ad6:	4b05      	ldr	r3, [pc, #20]	; (8011aec <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8011ad8:	60da      	str	r2, [r3, #12]
    &(getFont_Asap_Bold_60_4bpp())
 8011ada:	f7fc ffdf 	bl	800ea9c <_Z25getFont_Asap_Bold_60_4bppv>
 8011ade:	4602      	mov	r2, r0
};
 8011ae0:	4b02      	ldr	r3, [pc, #8]	; (8011aec <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8011ae2:	611a      	str	r2, [r3, #16]
}  // namespace TypedTextDatabase
 8011ae4:	bf00      	nop
 8011ae6:	3708      	adds	r7, #8
 8011ae8:	46bd      	mov	sp, r7
 8011aea:	bd80      	pop	{r7, pc}
 8011aec:	200085d0 	.word	0x200085d0

08011af0 <_GLOBAL__sub_I__fonts>:
 8011af0:	b580      	push	{r7, lr}
 8011af2:	af00      	add	r7, sp, #0
 8011af4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011af8:	2001      	movs	r0, #1
 8011afa:	f7ff ffcd 	bl	8011a98 <_Z41__static_initialization_and_destruction_0ii>
 8011afe:	bd80      	pop	{r7, pc}

08011b00 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8011b00:	b580      	push	{r7, lr}
 8011b02:	b082      	sub	sp, #8
 8011b04:	af00      	add	r7, sp, #0
 8011b06:	6078      	str	r0, [r7, #4]
 8011b08:	4a05      	ldr	r2, [pc, #20]	; (8011b20 <_ZN19FrontendApplicationD1Ev+0x20>)
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	601a      	str	r2, [r3, #0]
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	4618      	mov	r0, r3
 8011b12:	f7fd fa95 	bl	800f040 <_ZN23FrontendApplicationBaseD1Ev>
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	4618      	mov	r0, r3
 8011b1a:	3708      	adds	r7, #8
 8011b1c:	46bd      	mov	sp, r7
 8011b1e:	bd80      	pop	{r7, pc}
 8011b20:	08024fd8 	.word	0x08024fd8

08011b24 <_ZN19FrontendApplicationD0Ev>:
 8011b24:	b580      	push	{r7, lr}
 8011b26:	b082      	sub	sp, #8
 8011b28:	af00      	add	r7, sp, #0
 8011b2a:	6078      	str	r0, [r7, #4]
 8011b2c:	6878      	ldr	r0, [r7, #4]
 8011b2e:	f7ff ffe7 	bl	8011b00 <_ZN19FrontendApplicationD1Ev>
 8011b32:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8011b36:	6878      	ldr	r0, [r7, #4]
 8011b38:	f011 fc53 	bl	80233e2 <_ZdlPvj>
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	4618      	mov	r0, r3
 8011b40:	3708      	adds	r7, #8
 8011b42:	46bd      	mov	sp, r7
 8011b44:	bd80      	pop	{r7, pc}

08011b46 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8011b46:	b580      	push	{r7, lr}
 8011b48:	b082      	sub	sp, #8
 8011b4a:	af00      	add	r7, sp, #0
 8011b4c:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8011b54:	4618      	mov	r0, r3
 8011b56:	f000 fa4d 	bl	8011ff4 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	4618      	mov	r0, r3
 8011b5e:	f005 fb91 	bl	8017284 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8011b62:	bf00      	nop
 8011b64:	3708      	adds	r7, #8
 8011b66:	46bd      	mov	sp, r7
 8011b68:	bd80      	pop	{r7, pc}
	...

08011b6c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8011b6c:	b580      	push	{r7, lr}
 8011b6e:	b084      	sub	sp, #16
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	60f8      	str	r0, [r7, #12]
 8011b74:	60b9      	str	r1, [r7, #8]
 8011b76:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8011b78:	68fb      	ldr	r3, [r7, #12]
 8011b7a:	687a      	ldr	r2, [r7, #4]
 8011b7c:	68b9      	ldr	r1, [r7, #8]
 8011b7e:	4618      	mov	r0, r3
 8011b80:	f7fd fad8 	bl	800f134 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8011b84:	4a03      	ldr	r2, [pc, #12]	; (8011b94 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8011b86:	68fb      	ldr	r3, [r7, #12]
 8011b88:	601a      	str	r2, [r3, #0]
{
}
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	4618      	mov	r0, r3
 8011b8e:	3710      	adds	r7, #16
 8011b90:	46bd      	mov	sp, r7
 8011b92:	bd80      	pop	{r7, pc}
 8011b94:	08024fd8 	.word	0x08024fd8

08011b98 <_ZN8touchgfx9Presenter8activateEv>:
     * @brief Place initialization code for the Presenter here.
     *
     *        The activate function is called automatically when a screen transition causes
     *        this Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8011b98:	b480      	push	{r7}
 8011b9a:	b083      	sub	sp, #12
 8011b9c:	af00      	add	r7, sp, #0
 8011b9e:	6078      	str	r0, [r7, #4]
    {
    }
 8011ba0:	bf00      	nop
 8011ba2:	370c      	adds	r7, #12
 8011ba4:	46bd      	mov	sp, r7
 8011ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011baa:	4770      	bx	lr

08011bac <_ZN8touchgfx9Presenter10deactivateEv>:
     * @brief Place cleanup code for the Presenter here.
     *
     *        The deactivate function is called automatically when a screen transition causes
     *        this Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8011bac:	b480      	push	{r7}
 8011bae:	b083      	sub	sp, #12
 8011bb0:	af00      	add	r7, sp, #0
 8011bb2:	6078      	str	r0, [r7, #4]
    {
    }
 8011bb4:	bf00      	nop
 8011bb6:	370c      	adds	r7, #12
 8011bb8:	46bd      	mov	sp, r7
 8011bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bbe:	4770      	bx	lr

08011bc0 <_ZN8touchgfx9PresenterD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Presenter()
 8011bc0:	b480      	push	{r7}
 8011bc2:	b083      	sub	sp, #12
 8011bc4:	af00      	add	r7, sp, #0
 8011bc6:	6078      	str	r0, [r7, #4]
    {
 8011bc8:	4a04      	ldr	r2, [pc, #16]	; (8011bdc <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	601a      	str	r2, [r3, #0]
    }
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	4618      	mov	r0, r3
 8011bd2:	370c      	adds	r7, #12
 8011bd4:	46bd      	mov	sp, r7
 8011bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bda:	4770      	bx	lr
 8011bdc:	08025058 	.word	0x08025058

08011be0 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8011be0:	b580      	push	{r7, lr}
 8011be2:	b082      	sub	sp, #8
 8011be4:	af00      	add	r7, sp, #0
 8011be6:	6078      	str	r0, [r7, #4]
    }
 8011be8:	6878      	ldr	r0, [r7, #4]
 8011bea:	f7ff ffe9 	bl	8011bc0 <_ZN8touchgfx9PresenterD1Ev>
 8011bee:	2104      	movs	r1, #4
 8011bf0:	6878      	ldr	r0, [r7, #4]
 8011bf2:	f011 fbf6 	bl	80233e2 <_ZdlPvj>
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	4618      	mov	r0, r3
 8011bfa:	3708      	adds	r7, #8
 8011bfc:	46bd      	mov	sp, r7
 8011bfe:	bd80      	pop	{r7, pc}

08011c00 <_ZN8touchgfx9PresenterC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Presenter()
 8011c00:	b480      	push	{r7}
 8011c02:	b083      	sub	sp, #12
 8011c04:	af00      	add	r7, sp, #0
 8011c06:	6078      	str	r0, [r7, #4]
    {
 8011c08:	4a04      	ldr	r2, [pc, #16]	; (8011c1c <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	601a      	str	r2, [r3, #0]
    }
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	4618      	mov	r0, r3
 8011c12:	370c      	adds	r7, #12
 8011c14:	46bd      	mov	sp, r7
 8011c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c1a:	4770      	bx	lr
 8011c1c:	08025058 	.word	0x08025058

08011c20 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8011c20:	b480      	push	{r7}
 8011c22:	b083      	sub	sp, #12
 8011c24:	af00      	add	r7, sp, #0
 8011c26:	6078      	str	r0, [r7, #4]
 8011c28:	4a06      	ldr	r2, [pc, #24]	; (8011c44 <_ZN13ModelListenerC1Ev+0x24>)
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	601a      	str	r2, [r3, #0]
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	2200      	movs	r2, #0
 8011c32:	605a      	str	r2, [r3, #4]
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	4618      	mov	r0, r3
 8011c38:	370c      	adds	r7, #12
 8011c3a:	46bd      	mov	sp, r7
 8011c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c40:	4770      	bx	lr
 8011c42:	bf00      	nop
 8011c44:	08025044 	.word	0x08025044

08011c48 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8011c48:	b480      	push	{r7}
 8011c4a:	b083      	sub	sp, #12
 8011c4c:	af00      	add	r7, sp, #0
 8011c4e:	6078      	str	r0, [r7, #4]
 8011c50:	4a04      	ldr	r2, [pc, #16]	; (8011c64 <_ZN13ModelListenerD1Ev+0x1c>)
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	601a      	str	r2, [r3, #0]
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	4618      	mov	r0, r3
 8011c5a:	370c      	adds	r7, #12
 8011c5c:	46bd      	mov	sp, r7
 8011c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c62:	4770      	bx	lr
 8011c64:	08025044 	.word	0x08025044

08011c68 <_ZN13ModelListenerD0Ev>:
 8011c68:	b580      	push	{r7, lr}
 8011c6a:	b082      	sub	sp, #8
 8011c6c:	af00      	add	r7, sp, #0
 8011c6e:	6078      	str	r0, [r7, #4]
 8011c70:	6878      	ldr	r0, [r7, #4]
 8011c72:	f7ff ffe9 	bl	8011c48 <_ZN13ModelListenerD1Ev>
 8011c76:	2108      	movs	r1, #8
 8011c78:	6878      	ldr	r0, [r7, #4]
 8011c7a:	f011 fbb2 	bl	80233e2 <_ZdlPvj>
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	4618      	mov	r0, r3
 8011c82:	3708      	adds	r7, #8
 8011c84:	46bd      	mov	sp, r7
 8011c86:	bd80      	pop	{r7, pc}

08011c88 <_ZN13ModelListener11setNewValueEPh>:

    virtual void setNewValue(uint8_t* newValue){}
 8011c88:	b480      	push	{r7}
 8011c8a:	b083      	sub	sp, #12
 8011c8c:	af00      	add	r7, sp, #0
 8011c8e:	6078      	str	r0, [r7, #4]
 8011c90:	6039      	str	r1, [r7, #0]
 8011c92:	bf00      	nop
 8011c94:	370c      	adds	r7, #12
 8011c96:	46bd      	mov	sp, r7
 8011c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c9c:	4770      	bx	lr
	...

08011ca0 <_ZN13MainPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MainPresenter() {};
 8011ca0:	b580      	push	{r7, lr}
 8011ca2:	b082      	sub	sp, #8
 8011ca4:	af00      	add	r7, sp, #0
 8011ca6:	6078      	str	r0, [r7, #4]
 8011ca8:	4a09      	ldr	r2, [pc, #36]	; (8011cd0 <_ZN13MainPresenterD1Ev+0x30>)
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	601a      	str	r2, [r3, #0]
 8011cae:	4a09      	ldr	r2, [pc, #36]	; (8011cd4 <_ZN13MainPresenterD1Ev+0x34>)
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	605a      	str	r2, [r3, #4]
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	3304      	adds	r3, #4
 8011cb8:	4618      	mov	r0, r3
 8011cba:	f7ff ffc5 	bl	8011c48 <_ZN13ModelListenerD1Ev>
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	4618      	mov	r0, r3
 8011cc2:	f7ff ff7d 	bl	8011bc0 <_ZN8touchgfx9PresenterD1Ev>
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	4618      	mov	r0, r3
 8011cca:	3708      	adds	r7, #8
 8011ccc:	46bd      	mov	sp, r7
 8011cce:	bd80      	pop	{r7, pc}
 8011cd0:	08025014 	.word	0x08025014
 8011cd4:	08025030 	.word	0x08025030

08011cd8 <_ZThn4_N13MainPresenterD1Ev>:
 8011cd8:	f1a0 0004 	sub.w	r0, r0, #4
 8011cdc:	e7e0      	b.n	8011ca0 <_ZN13MainPresenterD1Ev>
 8011cde:	bf00      	nop

08011ce0 <_ZN13MainPresenterD0Ev>:
 8011ce0:	b580      	push	{r7, lr}
 8011ce2:	b082      	sub	sp, #8
 8011ce4:	af00      	add	r7, sp, #0
 8011ce6:	6078      	str	r0, [r7, #4]
 8011ce8:	6878      	ldr	r0, [r7, #4]
 8011cea:	f7ff ffd9 	bl	8011ca0 <_ZN13MainPresenterD1Ev>
 8011cee:	2110      	movs	r1, #16
 8011cf0:	6878      	ldr	r0, [r7, #4]
 8011cf2:	f011 fb76 	bl	80233e2 <_ZdlPvj>
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	4618      	mov	r0, r3
 8011cfa:	3708      	adds	r7, #8
 8011cfc:	46bd      	mov	sp, r7
 8011cfe:	bd80      	pop	{r7, pc}

08011d00 <_ZThn4_N13MainPresenterD0Ev>:
 8011d00:	f1a0 0004 	sub.w	r0, r0, #4
 8011d04:	e7ec      	b.n	8011ce0 <_ZN13MainPresenterD0Ev>
	...

08011d08 <_ZN13MainPresenterC1ER8MainView>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

MainPresenter::MainPresenter(MainView& v)
 8011d08:	b580      	push	{r7, lr}
 8011d0a:	b082      	sub	sp, #8
 8011d0c:	af00      	add	r7, sp, #0
 8011d0e:	6078      	str	r0, [r7, #4]
 8011d10:	6039      	str	r1, [r7, #0]
    : view(v)
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	4618      	mov	r0, r3
 8011d16:	f7ff ff73 	bl	8011c00 <_ZN8touchgfx9PresenterC1Ev>
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	3304      	adds	r3, #4
 8011d1e:	4618      	mov	r0, r3
 8011d20:	f7ff ff7e 	bl	8011c20 <_ZN13ModelListenerC1Ev>
 8011d24:	4a06      	ldr	r2, [pc, #24]	; (8011d40 <_ZN13MainPresenterC1ER8MainView+0x38>)
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	601a      	str	r2, [r3, #0]
 8011d2a:	4a06      	ldr	r2, [pc, #24]	; (8011d44 <_ZN13MainPresenterC1ER8MainView+0x3c>)
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	605a      	str	r2, [r3, #4]
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	683a      	ldr	r2, [r7, #0]
 8011d34:	60da      	str	r2, [r3, #12]
{
}
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	4618      	mov	r0, r3
 8011d3a:	3708      	adds	r7, #8
 8011d3c:	46bd      	mov	sp, r7
 8011d3e:	bd80      	pop	{r7, pc}
 8011d40:	08025014 	.word	0x08025014
 8011d44:	08025030 	.word	0x08025030

08011d48 <_ZN13MainPresenter8activateEv>:

void MainPresenter::activate()
{
 8011d48:	b480      	push	{r7}
 8011d4a:	b083      	sub	sp, #12
 8011d4c:	af00      	add	r7, sp, #0
 8011d4e:	6078      	str	r0, [r7, #4]
}
 8011d50:	bf00      	nop
 8011d52:	370c      	adds	r7, #12
 8011d54:	46bd      	mov	sp, r7
 8011d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d5a:	4770      	bx	lr

08011d5c <_ZN13MainPresenter10deactivateEv>:

void MainPresenter::deactivate()
{
 8011d5c:	b480      	push	{r7}
 8011d5e:	b083      	sub	sp, #12
 8011d60:	af00      	add	r7, sp, #0
 8011d62:	6078      	str	r0, [r7, #4]
}
 8011d64:	bf00      	nop
 8011d66:	370c      	adds	r7, #12
 8011d68:	46bd      	mov	sp, r7
 8011d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d6e:	4770      	bx	lr

08011d70 <_ZN13MainPresenter11setNewValueEPh>:

void MainPresenter::setNewValue(uint8_t* newValue)
{
 8011d70:	b580      	push	{r7, lr}
 8011d72:	b082      	sub	sp, #8
 8011d74:	af00      	add	r7, sp, #0
 8011d76:	6078      	str	r0, [r7, #4]
 8011d78:	6039      	str	r1, [r7, #0]
	view.updateVal(newValue);
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	68db      	ldr	r3, [r3, #12]
 8011d7e:	6839      	ldr	r1, [r7, #0]
 8011d80:	4618      	mov	r0, r3
 8011d82:	f000 f8a9 	bl	8011ed8 <_ZN8MainView9updateValEPh>
}
 8011d86:	bf00      	nop
 8011d88:	3708      	adds	r7, #8
 8011d8a:	46bd      	mov	sp, r7
 8011d8c:	bd80      	pop	{r7, pc}

08011d8e <_ZThn4_N13MainPresenter11setNewValueEPh>:

    void setNewValue(uint8_t* newValue);
 8011d8e:	f1a0 0004 	sub.w	r0, r0, #4
 8011d92:	f7ff bfed 	b.w	8011d70 <_ZN13MainPresenter11setNewValueEPh>

08011d96 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>:
     *          touchgfx::Unicode::snprintfFloats(dst, dstSize, tmpfmt, values);
     *          \endcode
     *
     * @see snprintf, snprintfFloats
     */
    static UnicodeChar* snprintfFloat(UnicodeChar* dst, uint16_t dstSize, const char* format, const float value)
 8011d96:	b580      	push	{r7, lr}
 8011d98:	b084      	sub	sp, #16
 8011d9a:	af00      	add	r7, sp, #0
 8011d9c:	60f8      	str	r0, [r7, #12]
 8011d9e:	460b      	mov	r3, r1
 8011da0:	607a      	str	r2, [r7, #4]
 8011da2:	ed87 0a00 	vstr	s0, [r7]
 8011da6:	817b      	strh	r3, [r7, #10]
    {
        return snprintfFloats(dst, dstSize, format, &value);
 8011da8:	463b      	mov	r3, r7
 8011daa:	8979      	ldrh	r1, [r7, #10]
 8011dac:	687a      	ldr	r2, [r7, #4]
 8011dae:	68f8      	ldr	r0, [r7, #12]
 8011db0:	f007 fd04 	bl	80197bc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
 8011db4:	4603      	mov	r3, r0
    }
 8011db6:	4618      	mov	r0, r3
 8011db8:	3710      	adds	r7, #16
 8011dba:	46bd      	mov	sp, r7
 8011dbc:	bd80      	pop	{r7, pc}

08011dbe <_ZNK8touchgfx8Drawable8getWidthEv>:
    int16_t getWidth() const
 8011dbe:	b480      	push	{r7}
 8011dc0:	b083      	sub	sp, #12
 8011dc2:	af00      	add	r7, sp, #0
 8011dc4:	6078      	str	r0, [r7, #4]
        return rect.width;
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 8011dcc:	4618      	mov	r0, r3
 8011dce:	370c      	adds	r7, #12
 8011dd0:	46bd      	mov	sp, r7
 8011dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dd6:	4770      	bx	lr

08011dd8 <_ZNK8touchgfx8Drawable9getHeightEv>:
    int16_t getHeight() const
 8011dd8:	b480      	push	{r7}
 8011dda:	b083      	sub	sp, #12
 8011ddc:	af00      	add	r7, sp, #0
 8011dde:	6078      	str	r0, [r7, #4]
        return rect.height;
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 8011de6:	4618      	mov	r0, r3
 8011de8:	370c      	adds	r7, #12
 8011dea:	46bd      	mov	sp, r7
 8011dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011df0:	4770      	bx	lr
	...

08011df4 <_ZN8MainViewD1Ev>:

class MainView : public MainViewBase
{
public:
    MainView();
    virtual ~MainView() {}
 8011df4:	b580      	push	{r7, lr}
 8011df6:	b082      	sub	sp, #8
 8011df8:	af00      	add	r7, sp, #0
 8011dfa:	6078      	str	r0, [r7, #4]
 8011dfc:	4a05      	ldr	r2, [pc, #20]	; (8011e14 <_ZN8MainViewD1Ev+0x20>)
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	601a      	str	r2, [r3, #0]
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	4618      	mov	r0, r3
 8011e06:	f7fe f961 	bl	80100cc <_ZN12MainViewBaseD1Ev>
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	4618      	mov	r0, r3
 8011e0e:	3708      	adds	r7, #8
 8011e10:	46bd      	mov	sp, r7
 8011e12:	bd80      	pop	{r7, pc}
 8011e14:	08025070 	.word	0x08025070

08011e18 <_ZN8MainViewD0Ev>:
 8011e18:	b580      	push	{r7, lr}
 8011e1a:	b082      	sub	sp, #8
 8011e1c:	af00      	add	r7, sp, #0
 8011e1e:	6078      	str	r0, [r7, #4]
 8011e20:	6878      	ldr	r0, [r7, #4]
 8011e22:	f7ff ffe7 	bl	8011df4 <_ZN8MainViewD1Ev>
 8011e26:	f242 612c 	movw	r1, #9772	; 0x262c
 8011e2a:	6878      	ldr	r0, [r7, #4]
 8011e2c:	f011 fad9 	bl	80233e2 <_ZdlPvj>
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	4618      	mov	r0, r3
 8011e34:	3708      	adds	r7, #8
 8011e36:	46bd      	mov	sp, r7
 8011e38:	bd80      	pop	{r7, pc}
	...

08011e3c <_ZN8MainViewC1Ev>:
#include <gui/main_screen/MainView.hpp>

MainView::MainView()
 8011e3c:	b590      	push	{r4, r7, lr}
 8011e3e:	b083      	sub	sp, #12
 8011e40:	af00      	add	r7, sp, #0
 8011e42:	6078      	str	r0, [r7, #4]
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	4618      	mov	r0, r3
 8011e48:	f7fe fa74 	bl	8010334 <_ZN12MainViewBaseC1Ev>
 8011e4c:	4a15      	ldr	r2, [pc, #84]	; (8011ea4 <_ZN8MainViewC1Ev+0x68>)
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	601a      	str	r2, [r3, #0]
{
    // Support of larger displays for this example
    // is handled by showing a black box in the
    // unused part of the display.
    if (HAL::DISPLAY_WIDTH > backgroundImage.getWidth() ||
 8011e52:	4b15      	ldr	r3, [pc, #84]	; (8011ea8 <_ZN8MainViewC1Ev+0x6c>)
 8011e54:	881b      	ldrh	r3, [r3, #0]
 8011e56:	461c      	mov	r4, r3
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8011e5e:	4618      	mov	r0, r3
 8011e60:	f7ff ffad 	bl	8011dbe <_ZNK8touchgfx8Drawable8getWidthEv>
 8011e64:	4603      	mov	r3, r0
 8011e66:	429c      	cmp	r4, r3
 8011e68:	dc0b      	bgt.n	8011e82 <_ZN8MainViewC1Ev+0x46>
            HAL::DISPLAY_HEIGHT > backgroundImage.getHeight())
 8011e6a:	4b10      	ldr	r3, [pc, #64]	; (8011eac <_ZN8MainViewC1Ev+0x70>)
 8011e6c:	881b      	ldrh	r3, [r3, #0]
 8011e6e:	461c      	mov	r4, r3
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8011e76:	4618      	mov	r0, r3
 8011e78:	f7ff ffae 	bl	8011dd8 <_ZNK8touchgfx8Drawable9getHeightEv>
 8011e7c:	4603      	mov	r3, r0
    if (HAL::DISPLAY_WIDTH > backgroundImage.getWidth() ||
 8011e7e:	429c      	cmp	r4, r3
 8011e80:	dd01      	ble.n	8011e86 <_ZN8MainViewC1Ev+0x4a>
 8011e82:	2301      	movs	r3, #1
 8011e84:	e000      	b.n	8011e88 <_ZN8MainViewC1Ev+0x4c>
 8011e86:	2300      	movs	r3, #0
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d005      	beq.n	8011e98 <_ZN8MainViewC1Ev+0x5c>
    {
        backgroundBox.setVisible(true);
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	3340      	adds	r3, #64	; 0x40
 8011e90:	2101      	movs	r1, #1
 8011e92:	4618      	mov	r0, r3
 8011e94:	f7fd fd06 	bl	800f8a4 <_ZN8touchgfx8Drawable10setVisibleEb>
    }
}
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	4618      	mov	r0, r3
 8011e9c:	370c      	adds	r7, #12
 8011e9e:	46bd      	mov	sp, r7
 8011ea0:	bd90      	pop	{r4, r7, pc}
 8011ea2:	bf00      	nop
 8011ea4:	08025070 	.word	0x08025070
 8011ea8:	2000bacc 	.word	0x2000bacc
 8011eac:	2000bace 	.word	0x2000bace

08011eb0 <_ZN8MainView11setupScreenEv>:

void MainView::setupScreen()
{
 8011eb0:	b480      	push	{r7}
 8011eb2:	b083      	sub	sp, #12
 8011eb4:	af00      	add	r7, sp, #0
 8011eb6:	6078      	str	r0, [r7, #4]
}
 8011eb8:	bf00      	nop
 8011eba:	370c      	adds	r7, #12
 8011ebc:	46bd      	mov	sp, r7
 8011ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ec2:	4770      	bx	lr

08011ec4 <_ZN8MainView14tearDownScreenEv>:

void MainView::tearDownScreen()
{
 8011ec4:	b480      	push	{r7}
 8011ec6:	b083      	sub	sp, #12
 8011ec8:	af00      	add	r7, sp, #0
 8011eca:	6078      	str	r0, [r7, #4]
}
 8011ecc:	bf00      	nop
 8011ece:	370c      	adds	r7, #12
 8011ed0:	46bd      	mov	sp, r7
 8011ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ed6:	4770      	bx	lr

08011ed8 <_ZN8MainView9updateValEPh>:
   float  lambda;
   float  lambda_trgt;
} display_values;

void MainView::updateVal(uint8_t* newValue)
{
 8011ed8:	b580      	push	{r7, lr}
 8011eda:	b084      	sub	sp, #16
 8011edc:	af00      	add	r7, sp, #0
 8011ede:	6078      	str	r0, [r7, #4]
 8011ee0:	6039      	str	r1, [r7, #0]
	display_values* values = (display_values*) newValue;
 8011ee2:	683b      	ldr	r3, [r7, #0]
 8011ee4:	60fb      	str	r3, [r7, #12]

	rpmProgress.setValue(values->rpm);
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	f503 723b 	add.w	r2, r3, #748	; 0x2ec
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	4619      	mov	r1, r3
 8011ef2:	4610      	mov	r0, r2
 8011ef4:	f002 f83c 	bl	8013f70 <_ZN8touchgfx11BoxProgress8setValueEi>
	rpmProgress.invalidate();
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
 8011efe:	4618      	mov	r0, r3
 8011f00:	f005 fed4 	bl	8017cac <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(KpaValueBuffer, KPAVALUE_SIZE, "%d", values->map);
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	f603 10bc 	addw	r0, r3, #2492	; 0x9bc
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	689b      	ldr	r3, [r3, #8]
 8011f0e:	4a2c      	ldr	r2, [pc, #176]	; (8011fc0 <_ZN8MainView9updateValEPh+0xe8>)
 8011f10:	2105      	movs	r1, #5
 8011f12:	f007 faf9 	bl	8019508 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	KpaValue.resizeToCurrentText();
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011f1c:	4618      	mov	r0, r3
 8011f1e:	f004 f867 	bl	8015ff0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	KpaValue.invalidate();
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011f28:	4618      	mov	r0, r3
 8011f2a:	f005 febf 	bl	8017cac <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(CltValueBuffer, CLTVALUE_SIZE, "%d", values->clt);
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	f603 10c6 	addw	r0, r3, #2502	; 0x9c6
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	685b      	ldr	r3, [r3, #4]
 8011f38:	4a21      	ldr	r2, [pc, #132]	; (8011fc0 <_ZN8MainView9updateValEPh+0xe8>)
 8011f3a:	2105      	movs	r1, #5
 8011f3c:	f007 fae4 	bl	8019508 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	CltValue.resizeToCurrentText();
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8011f46:	4618      	mov	r0, r3
 8011f48:	f004 f852 	bl	8015ff0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	CltValue.invalidate();
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8011f52:	4618      	mov	r0, r3
 8011f54:	f005 feaa 	bl	8017cac <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintfFloat(LambdaValueBuffer, LAMBDAVALUE_SIZE, "%.2f",values->lambda);
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	f603 10a8 	addw	r0, r3, #2472	; 0x9a8
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	edd3 7a03 	vldr	s15, [r3, #12]
 8011f64:	eeb0 0a67 	vmov.f32	s0, s15
 8011f68:	4a16      	ldr	r2, [pc, #88]	; (8011fc4 <_ZN8MainView9updateValEPh+0xec>)
 8011f6a:	2105      	movs	r1, #5
 8011f6c:	f7ff ff13 	bl	8011d96 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	LambdaValue.resizeToCurrentText();
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8011f76:	4618      	mov	r0, r3
 8011f78:	f004 f83a 	bl	8015ff0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	LambdaValue.invalidate();
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8011f82:	4618      	mov	r0, r3
 8011f84:	f005 fe92 	bl	8017cac <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintfFloat(TrgtValueBuffer, TRGTVALUE_SIZE, "%.2f",values->lambda_trgt);
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	f603 10b2 	addw	r0, r3, #2482	; 0x9b2
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	edd3 7a04 	vldr	s15, [r3, #16]
 8011f94:	eeb0 0a67 	vmov.f32	s0, s15
 8011f98:	4a0a      	ldr	r2, [pc, #40]	; (8011fc4 <_ZN8MainView9updateValEPh+0xec>)
 8011f9a:	2105      	movs	r1, #5
 8011f9c:	f7ff fefb 	bl	8011d96 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	TrgtValue.resizeToCurrentText();
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8011fa6:	4618      	mov	r0, r3
 8011fa8:	f004 f822 	bl	8015ff0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	TrgtValue.invalidate();
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8011fb2:	4618      	mov	r0, r3
 8011fb4:	f005 fe7a 	bl	8017cac <_ZNK8touchgfx8Drawable10invalidateEv>


}
 8011fb8:	bf00      	nop
 8011fba:	3710      	adds	r7, #16
 8011fbc:	46bd      	mov	sp, r7
 8011fbe:	bd80      	pop	{r7, pc}
 8011fc0:	080249f8 	.word	0x080249f8
 8011fc4:	080249fc 	.word	0x080249fc

08011fc8 <_ZN5ModelC1Ev>:
extern "C"
{
	xQueueHandle messageQ;
}

Model::Model() : modelListener(0)
 8011fc8:	b580      	push	{r7, lr}
 8011fca:	b082      	sub	sp, #8
 8011fcc:	af00      	add	r7, sp, #0
 8011fce:	6078      	str	r0, [r7, #4]
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	2200      	movs	r2, #0
 8011fd4:	601a      	str	r2, [r3, #0]
{
	messageQ = xQueueGenericCreate(1, sizeof(display_values), 0);
 8011fd6:	2200      	movs	r2, #0
 8011fd8:	2114      	movs	r1, #20
 8011fda:	2001      	movs	r0, #1
 8011fdc:	f7f9 ff87 	bl	800beee <xQueueGenericCreate>
 8011fe0:	4602      	mov	r2, r0
 8011fe2:	4b03      	ldr	r3, [pc, #12]	; (8011ff0 <_ZN5ModelC1Ev+0x28>)
 8011fe4:	601a      	str	r2, [r3, #0]
}
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	4618      	mov	r0, r3
 8011fea:	3708      	adds	r7, #8
 8011fec:	46bd      	mov	sp, r7
 8011fee:	bd80      	pop	{r7, pc}
 8011ff0:	200085f8 	.word	0x200085f8

08011ff4 <_ZN5Model4tickEv>:

void Model::tick()
{
 8011ff4:	b580      	push	{r7, lr}
 8011ff6:	b082      	sub	sp, #8
 8011ff8:	af00      	add	r7, sp, #0
 8011ffa:	6078      	str	r0, [r7, #4]
	if(xQueueReceive(messageQ, &values , 0) == pdTRUE)
 8011ffc:	4b0e      	ldr	r3, [pc, #56]	; (8012038 <_ZN5Model4tickEv+0x44>)
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	2200      	movs	r2, #0
 8012002:	490e      	ldr	r1, [pc, #56]	; (801203c <_ZN5Model4tickEv+0x48>)
 8012004:	4618      	mov	r0, r3
 8012006:	f7fa fa03 	bl	800c410 <xQueueReceive>
 801200a:	4603      	mov	r3, r0
 801200c:	2b01      	cmp	r3, #1
 801200e:	bf0c      	ite	eq
 8012010:	2301      	moveq	r3, #1
 8012012:	2300      	movne	r3, #0
 8012014:	b2db      	uxtb	r3, r3
 8012016:	2b00      	cmp	r3, #0
 8012018:	d009      	beq.n	801202e <_ZN5Model4tickEv+0x3a>
	{
		modelListener->setNewValue(values);
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	681a      	ldr	r2, [r3, #0]
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	3308      	adds	r3, #8
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	4904      	ldr	r1, [pc, #16]	; (801203c <_ZN5Model4tickEv+0x48>)
 801202a:	4610      	mov	r0, r2
 801202c:	4798      	blx	r3

		// something to update
	}
}
 801202e:	bf00      	nop
 8012030:	3708      	adds	r7, #8
 8012032:	46bd      	mov	sp, r7
 8012034:	bd80      	pop	{r7, pc}
 8012036:	bf00      	nop
 8012038:	200085f8 	.word	0x200085f8
 801203c:	200085e4 	.word	0x200085e4

08012040 <_ZN8touchgfx15TouchControllerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~TouchController()
 8012040:	b480      	push	{r7}
 8012042:	b083      	sub	sp, #12
 8012044:	af00      	add	r7, sp, #0
 8012046:	6078      	str	r0, [r7, #4]
    {
 8012048:	4a04      	ldr	r2, [pc, #16]	; (801205c <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	601a      	str	r2, [r3, #0]
    }
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	4618      	mov	r0, r3
 8012052:	370c      	adds	r7, #12
 8012054:	46bd      	mov	sp, r7
 8012056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801205a:	4770      	bx	lr
 801205c:	080250bc 	.word	0x080250bc

08012060 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8012060:	b580      	push	{r7, lr}
 8012062:	b082      	sub	sp, #8
 8012064:	af00      	add	r7, sp, #0
 8012066:	6078      	str	r0, [r7, #4]
    }
 8012068:	6878      	ldr	r0, [r7, #4]
 801206a:	f7ff ffe9 	bl	8012040 <_ZN8touchgfx15TouchControllerD1Ev>
 801206e:	2104      	movs	r1, #4
 8012070:	6878      	ldr	r0, [r7, #4]
 8012072:	f011 f9b6 	bl	80233e2 <_ZdlPvj>
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	4618      	mov	r0, r3
 801207a:	3708      	adds	r7, #8
 801207c:	46bd      	mov	sp, r7
 801207e:	bd80      	pop	{r7, pc}

08012080 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 8012080:	b480      	push	{r7}
 8012082:	b083      	sub	sp, #12
 8012084:	af00      	add	r7, sp, #0
 8012086:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 8012088:	bf00      	nop
 801208a:	370c      	adds	r7, #12
 801208c:	46bd      	mov	sp, r7
 801208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012092:	4770      	bx	lr

08012094 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8012094:	b480      	push	{r7}
 8012096:	b085      	sub	sp, #20
 8012098:	af00      	add	r7, sp, #0
 801209a:	60f8      	str	r0, [r7, #12]
 801209c:	60b9      	str	r1, [r7, #8]
 801209e:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 80120a0:	2300      	movs	r3, #0
}
 80120a2:	4618      	mov	r0, r3
 80120a4:	3714      	adds	r7, #20
 80120a6:	46bd      	mov	sp, r7
 80120a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ac:	4770      	bx	lr
	...

080120b0 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80120b0:	b580      	push	{r7, lr}
 80120b2:	b082      	sub	sp, #8
 80120b4:	af00      	add	r7, sp, #0
 80120b6:	6078      	str	r0, [r7, #4]
 80120b8:	4a05      	ldr	r2, [pc, #20]	; (80120d0 <_ZN20STM32TouchControllerD1Ev+0x20>)
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	601a      	str	r2, [r3, #0]
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	4618      	mov	r0, r3
 80120c2:	f7ff ffbd 	bl	8012040 <_ZN8touchgfx15TouchControllerD1Ev>
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	4618      	mov	r0, r3
 80120ca:	3708      	adds	r7, #8
 80120cc:	46bd      	mov	sp, r7
 80120ce:	bd80      	pop	{r7, pc}
 80120d0:	080250a4 	.word	0x080250a4

080120d4 <_ZN20STM32TouchControllerD0Ev>:
 80120d4:	b580      	push	{r7, lr}
 80120d6:	b082      	sub	sp, #8
 80120d8:	af00      	add	r7, sp, #0
 80120da:	6078      	str	r0, [r7, #4]
 80120dc:	6878      	ldr	r0, [r7, #4]
 80120de:	f7ff ffe7 	bl	80120b0 <_ZN20STM32TouchControllerD1Ev>
 80120e2:	2104      	movs	r1, #4
 80120e4:	6878      	ldr	r0, [r7, #4]
 80120e6:	f011 f97c 	bl	80233e2 <_ZdlPvj>
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	4618      	mov	r0, r3
 80120ee:	3708      	adds	r7, #8
 80120f0:	46bd      	mov	sp, r7
 80120f2:	bd80      	pop	{r7, pc}

080120f4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 80120f4:	b480      	push	{r7}
 80120f6:	b083      	sub	sp, #12
 80120f8:	af00      	add	r7, sp, #0
 80120fa:	4603      	mov	r3, r0
 80120fc:	71fb      	strb	r3, [r7, #7]

}
 80120fe:	bf00      	nop
 8012100:	370c      	adds	r7, #12
 8012102:	46bd      	mov	sp, r7
 8012104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012108:	4770      	bx	lr

0801210a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 801210a:	b480      	push	{r7}
 801210c:	b083      	sub	sp, #12
 801210e:	af00      	add	r7, sp, #0
 8012110:	4603      	mov	r3, r0
 8012112:	71fb      	strb	r3, [r7, #7]

}
 8012114:	bf00      	nop
 8012116:	370c      	adds	r7, #12
 8012118:	46bd      	mov	sp, r7
 801211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801211e:	4770      	bx	lr

08012120 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8012120:	b480      	push	{r7}
 8012122:	b083      	sub	sp, #12
 8012124:	af00      	add	r7, sp, #0
 8012126:	4603      	mov	r3, r0
 8012128:	71fb      	strb	r3, [r7, #7]

}
 801212a:	bf00      	nop
 801212c:	370c      	adds	r7, #12
 801212e:	46bd      	mov	sp, r7
 8012130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012134:	4770      	bx	lr
	...

08012138 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 8012138:	b480      	push	{r7}
 801213a:	b083      	sub	sp, #12
 801213c:	af00      	add	r7, sp, #0
 801213e:	6078      	str	r0, [r7, #4]
    {
 8012140:	4a04      	ldr	r2, [pc, #16]	; (8012154 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	601a      	str	r2, [r3, #0]
    }
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	4618      	mov	r0, r3
 801214a:	370c      	adds	r7, #12
 801214c:	46bd      	mov	sp, r7
 801214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012152:	4770      	bx	lr
 8012154:	08025cfc 	.word	0x08025cfc

08012158 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8012158:	b580      	push	{r7, lr}
 801215a:	b082      	sub	sp, #8
 801215c:	af00      	add	r7, sp, #0
 801215e:	6078      	str	r0, [r7, #4]
    }
 8012160:	6878      	ldr	r0, [r7, #4]
 8012162:	f7ff ffe9 	bl	8012138 <_ZN8touchgfx3HALD1Ev>
 8012166:	2178      	movs	r1, #120	; 0x78
 8012168:	6878      	ldr	r0, [r7, #4]
 801216a:	f011 f93a 	bl	80233e2 <_ZdlPvj>
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	4618      	mov	r0, r3
 8012172:	3708      	adds	r7, #8
 8012174:	46bd      	mov	sp, r7
 8012176:	bd80      	pop	{r7, pc}

08012178 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8012178:	b480      	push	{r7}
 801217a:	b083      	sub	sp, #12
 801217c:	af00      	add	r7, sp, #0
 801217e:	6078      	str	r0, [r7, #4]
 8012180:	460b      	mov	r3, r1
 8012182:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	78fa      	ldrb	r2, [r7, #3]
 8012188:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	2201      	movs	r2, #1
 8012190:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8012194:	bf00      	nop
 8012196:	370c      	adds	r7, #12
 8012198:	46bd      	mov	sp, r7
 801219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801219e:	4770      	bx	lr

080121a0 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *        As default, will return whatever blitcaps are reported by the associated DMA
     *        object.
     *
     * @return a bitmask of the supported blitcaps.
     */
    virtual BlitOperations getBlitCaps()
 80121a0:	b580      	push	{r7, lr}
 80121a2:	b082      	sub	sp, #8
 80121a4:	af00      	add	r7, sp, #0
 80121a6:	6078      	str	r0, [r7, #4]
    {
        return dma.getBlitCaps();
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	685a      	ldr	r2, [r3, #4]
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	685b      	ldr	r3, [r3, #4]
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	4610      	mov	r0, r2
 80121b6:	4798      	blx	r3
 80121b8:	4603      	mov	r3, r0
    }
 80121ba:	4618      	mov	r0, r3
 80121bc:	3708      	adds	r7, #8
 80121be:	46bd      	mov	sp, r7
 80121c0:	bd80      	pop	{r7, pc}

080121c2 <_ZN8touchgfx3HAL15backPorchExitedEv>:
     * @brief Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     *        Has to be called from within the LCD IRQ rutine when the Back Porch Exit is
     *        reached.
     */
    virtual void backPorchExited()
 80121c2:	b580      	push	{r7, lr}
 80121c4:	b082      	sub	sp, #8
 80121c6:	af00      	add	r7, sp, #0
 80121c8:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 80121ca:	6878      	ldr	r0, [r7, #4]
 80121cc:	f002 ffac 	bl	8015128 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	3390      	adds	r3, #144	; 0x90
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	6878      	ldr	r0, [r7, #4]
 80121da:	4798      	blx	r3
    }
 80121dc:	bf00      	nop
 80121de:	3708      	adds	r7, #8
 80121e0:	46bd      	mov	sp, r7
 80121e2:	bd80      	pop	{r7, pc}

080121e4 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 80121e4:	b480      	push	{r7}
 80121e6:	b083      	sub	sp, #12
 80121e8:	af00      	add	r7, sp, #0
 80121ea:	6078      	str	r0, [r7, #4]
 80121ec:	6039      	str	r1, [r7, #0]
    {
        return false;
 80121ee:	2300      	movs	r3, #0
    }
 80121f0:	4618      	mov	r0, r3
 80121f2:	370c      	adds	r7, #12
 80121f4:	46bd      	mov	sp, r7
 80121f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121fa:	4770      	bx	lr

080121fc <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
     * @param      useDoubleBuffering  (Optional) If true, reserve memory for an extra frame buffer.
     * @param      useAnimationStorage (Optional) If true, reserve memory for animation storage.
     *
     * @deprecated Use the setFramaBufferStartAddress with 'format' parameter instead of 'depth'
     */
    virtual void setFrameBufferStartAddress(void* adr, uint16_t depth = 16, bool useDoubleBuffering = true, bool useAnimationStorage = true)
 80121fc:	b590      	push	{r4, r7, lr}
 80121fe:	b08b      	sub	sp, #44	; 0x2c
 8012200:	af00      	add	r7, sp, #0
 8012202:	60f8      	str	r0, [r7, #12]
 8012204:	60b9      	str	r1, [r7, #8]
 8012206:	4611      	mov	r1, r2
 8012208:	461a      	mov	r2, r3
 801220a:	460b      	mov	r3, r1
 801220c:	80fb      	strh	r3, [r7, #6]
 801220e:	4613      	mov	r3, r2
 8012210:	717b      	strb	r3, [r7, #5]
    {
        uint16_t stride = lcd().framebufferStride();
 8012212:	f7fc fdc7 	bl	800eda4 <_ZN8touchgfx3HAL3lcdEv>
 8012216:	4602      	mov	r2, r0
 8012218:	6813      	ldr	r3, [r2, #0]
 801221a:	3328      	adds	r3, #40	; 0x28
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	4610      	mov	r0, r2
 8012220:	4798      	blx	r3
 8012222:	4603      	mov	r3, r0
 8012224:	837b      	strh	r3, [r7, #26]
        uint32_t bufferSizeInBytes = stride * FRAME_BUFFER_HEIGHT;
 8012226:	8b7b      	ldrh	r3, [r7, #26]
 8012228:	4a3d      	ldr	r2, [pc, #244]	; (8012320 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x124>)
 801222a:	8812      	ldrh	r2, [r2, #0]
 801222c:	fb02 f303 	mul.w	r3, r2, r3
 8012230:	617b      	str	r3, [r7, #20]
        uint8_t* ptr = (uint8_t*)adr;
 8012232:	68bb      	ldr	r3, [r7, #8]
 8012234:	627b      	str	r3, [r7, #36]	; 0x24
        void* double_buf = 0;
 8012236:	2300      	movs	r3, #0
 8012238:	623b      	str	r3, [r7, #32]
        void* anim_store = 0;
 801223a:	2300      	movs	r3, #0
 801223c:	61fb      	str	r3, [r7, #28]
        if (useDoubleBuffering)
 801223e:	797b      	ldrb	r3, [r7, #5]
 8012240:	2b00      	cmp	r3, #0
 8012242:	d005      	beq.n	8012250 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x54>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer)
 8012244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012246:	697b      	ldr	r3, [r7, #20]
 8012248:	4413      	add	r3, r2
 801224a:	627b      	str	r3, [r7, #36]	; 0x24
            double_buf = (void*)ptr;
 801224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801224e:	623b      	str	r3, [r7, #32]
        }
        if (useAnimationStorage)
 8012250:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8012254:	2b00      	cmp	r3, #0
 8012256:	d005      	beq.n	8012264 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x68>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer and possibly double buffer)
 8012258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801225a:	697b      	ldr	r3, [r7, #20]
 801225c:	4413      	add	r3, r2
 801225e:	627b      	str	r3, [r7, #36]	; 0x24
            anim_store = (void*)ptr;
 8012260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012262:	61fb      	str	r3, [r7, #28]
        }
        switch (depth)
 8012264:	88fb      	ldrh	r3, [r7, #6]
 8012266:	3b01      	subs	r3, #1
 8012268:	2b1f      	cmp	r3, #31
 801226a:	d84d      	bhi.n	8012308 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x10c>
 801226c:	a201      	add	r2, pc, #4	; (adr r2, 8012274 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x78>)
 801226e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012272:	bf00      	nop
 8012274:	080122f5 	.word	0x080122f5
 8012278:	080122f5 	.word	0x080122f5
 801227c:	08012309 	.word	0x08012309
 8012280:	080122f5 	.word	0x080122f5
 8012284:	08012309 	.word	0x08012309
 8012288:	08012309 	.word	0x08012309
 801228c:	08012309 	.word	0x08012309
 8012290:	080122f5 	.word	0x080122f5
 8012294:	08012309 	.word	0x08012309
 8012298:	08012309 	.word	0x08012309
 801229c:	08012309 	.word	0x08012309
 80122a0:	08012309 	.word	0x08012309
 80122a4:	08012309 	.word	0x08012309
 80122a8:	08012309 	.word	0x08012309
 80122ac:	08012309 	.word	0x08012309
 80122b0:	080122f5 	.word	0x080122f5
 80122b4:	08012309 	.word	0x08012309
 80122b8:	08012309 	.word	0x08012309
 80122bc:	08012309 	.word	0x08012309
 80122c0:	08012309 	.word	0x08012309
 80122c4:	08012309 	.word	0x08012309
 80122c8:	08012309 	.word	0x08012309
 80122cc:	08012309 	.word	0x08012309
 80122d0:	080122f5 	.word	0x080122f5
 80122d4:	08012309 	.word	0x08012309
 80122d8:	08012309 	.word	0x08012309
 80122dc:	08012309 	.word	0x08012309
 80122e0:	08012309 	.word	0x08012309
 80122e4:	08012309 	.word	0x08012309
 80122e8:	08012309 	.word	0x08012309
 80122ec:	08012309 	.word	0x08012309
 80122f0:	080122f5 	.word	0x080122f5
        case 16:
        case 8:
        case 4:
        case 2:
        case 1:
            setFrameBufferStartAddresses(adr, double_buf, anim_store);
 80122f4:	68fb      	ldr	r3, [r7, #12]
 80122f6:	681b      	ldr	r3, [r3, #0]
 80122f8:	3374      	adds	r3, #116	; 0x74
 80122fa:	681c      	ldr	r4, [r3, #0]
 80122fc:	69fb      	ldr	r3, [r7, #28]
 80122fe:	6a3a      	ldr	r2, [r7, #32]
 8012300:	68b9      	ldr	r1, [r7, #8]
 8012302:	68f8      	ldr	r0, [r7, #12]
 8012304:	47a0      	blx	r4
            break;
 8012306:	e006      	b.n	8012316 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x11a>
        default:
            assert(0 && "Unsupported bit depth");
 8012308:	4b06      	ldr	r3, [pc, #24]	; (8012324 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x128>)
 801230a:	4a07      	ldr	r2, [pc, #28]	; (8012328 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x12c>)
 801230c:	f240 3125 	movw	r1, #805	; 0x325
 8012310:	4806      	ldr	r0, [pc, #24]	; (801232c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x130>)
 8012312:	f011 f891 	bl	8023438 <__assert_func>
            break;
        }
    }
 8012316:	bf00      	nop
 8012318:	372c      	adds	r7, #44	; 0x2c
 801231a:	46bd      	mov	sp, r7
 801231c:	bd90      	pop	{r4, r7, pc}
 801231e:	bf00      	nop
 8012320:	2000bad4 	.word	0x2000bad4
 8012324:	08024a04 	.word	0x08024a04
 8012328:	080251d0 	.word	0x080251d0
 801232c:	08024a24 	.word	0x08024a24

08012330 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     *
     * @param [in] frameBuffer      Buffer for frame buffer data, must be non-null.
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8012330:	b580      	push	{r7, lr}
 8012332:	b084      	sub	sp, #16
 8012334:	af00      	add	r7, sp, #0
 8012336:	60f8      	str	r0, [r7, #12]
 8012338:	60b9      	str	r1, [r7, #8]
 801233a:	607a      	str	r2, [r7, #4]
 801233c:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 801233e:	68bb      	ldr	r3, [r7, #8]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d106      	bne.n	8012352 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8012344:	4b11      	ldr	r3, [pc, #68]	; (801238c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8012346:	4a12      	ldr	r2, [pc, #72]	; (8012390 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8012348:	f240 3137 	movw	r1, #823	; 0x337
 801234c:	4811      	ldr	r0, [pc, #68]	; (8012394 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 801234e:	f011 f873 	bl	8023438 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8012352:	68fb      	ldr	r3, [r7, #12]
 8012354:	68ba      	ldr	r2, [r7, #8]
 8012356:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	687a      	ldr	r2, [r7, #4]
 801235c:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 801235e:	68fb      	ldr	r3, [r7, #12]
 8012360:	683a      	ldr	r2, [r7, #0]
 8012362:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	2b00      	cmp	r3, #0
 8012368:	bf14      	ite	ne
 801236a:	2301      	movne	r3, #1
 801236c:	2300      	moveq	r3, #0
 801236e:	b2da      	uxtb	r2, r3
 8012370:	4b09      	ldr	r3, [pc, #36]	; (8012398 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8012372:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8012374:	683b      	ldr	r3, [r7, #0]
 8012376:	2b00      	cmp	r3, #0
 8012378:	bf14      	ite	ne
 801237a:	2301      	movne	r3, #1
 801237c:	2300      	moveq	r3, #0
 801237e:	b2da      	uxtb	r2, r3
 8012380:	4b06      	ldr	r3, [pc, #24]	; (801239c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8012382:	701a      	strb	r2, [r3, #0]
    }
 8012384:	bf00      	nop
 8012386:	3710      	adds	r7, #16
 8012388:	46bd      	mov	sp, r7
 801238a:	bd80      	pop	{r7, pc}
 801238c:	08024a68 	.word	0x08024a68
 8012390:	08025180 	.word	0x08025180
 8012394:	08024a24 	.word	0x08024a24
 8012398:	2000bad6 	.word	0x2000bad6
 801239c:	2000bad7 	.word	0x2000bad7

080123a0 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param ms Number of milliseconds to wait.
     *
     * @see void registerTaskDelayFunction(void (*delayF)(uint16_t))
     */
    virtual void taskDelay(uint16_t ms)
 80123a0:	b580      	push	{r7, lr}
 80123a2:	b082      	sub	sp, #8
 80123a4:	af00      	add	r7, sp, #0
 80123a6:	6078      	str	r0, [r7, #4]
 80123a8:	460b      	mov	r3, r1
 80123aa:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d004      	beq.n	80123be <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80123b8:	887a      	ldrh	r2, [r7, #2]
 80123ba:	4610      	mov	r0, r2
 80123bc:	4798      	blx	r3
        }
    }
 80123be:	bf00      	nop
 80123c0:	3708      	adds	r7, #8
 80123c2:	46bd      	mov	sp, r7
 80123c4:	bd80      	pop	{r7, pc}

080123c6 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 80123c6:	b580      	push	{r7, lr}
 80123c8:	b082      	sub	sp, #8
 80123ca:	af00      	add	r7, sp, #0
 80123cc:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	685a      	ldr	r2, [r3, #4]
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	685b      	ldr	r3, [r3, #4]
 80123d6:	681b      	ldr	r3, [r3, #0]
 80123d8:	3318      	adds	r3, #24
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	4610      	mov	r0, r2
 80123de:	4798      	blx	r3
 80123e0:	4603      	mov	r3, r0
    }
 80123e2:	4618      	mov	r0, r3
 80123e4:	3708      	adds	r7, #8
 80123e6:	46bd      	mov	sp, r7
 80123e8:	bd80      	pop	{r7, pc}
	...

080123ec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
     *
     * @brief Perform the actual display orientation change.
     *
     *        Perform the actual display orientation change.
     */
    virtual void performDisplayOrientationChange()
 80123ec:	b480      	push	{r7}
 80123ee:	b083      	sub	sp, #12
 80123f0:	af00      	add	r7, sp, #0
 80123f2:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012400:	429a      	cmp	r2, r3
 8012402:	d017      	beq.n	8012434 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 8012404:	4b1a      	ldr	r3, [pc, #104]	; (8012470 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8012406:	781b      	ldrb	r3, [r3, #0]
 8012408:	2b00      	cmp	r3, #0
 801240a:	d12a      	bne.n	8012462 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 801240c:	4b19      	ldr	r3, [pc, #100]	; (8012474 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 801240e:	881a      	ldrh	r2, [r3, #0]
 8012410:	4b19      	ldr	r3, [pc, #100]	; (8012478 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8012412:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8012414:	4b19      	ldr	r3, [pc, #100]	; (801247c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8012416:	881a      	ldrh	r2, [r3, #0]
 8012418:	4b19      	ldr	r3, [pc, #100]	; (8012480 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 801241a:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 801241c:	4b16      	ldr	r3, [pc, #88]	; (8012478 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 801241e:	881a      	ldrh	r2, [r3, #0]
 8012420:	4b16      	ldr	r3, [pc, #88]	; (801247c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8012422:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 8012424:	4b16      	ldr	r3, [pc, #88]	; (8012480 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8012426:	881a      	ldrh	r2, [r3, #0]
 8012428:	4b12      	ldr	r3, [pc, #72]	; (8012474 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 801242a:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 801242c:	4b10      	ldr	r3, [pc, #64]	; (8012470 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 801242e:	2201      	movs	r2, #1
 8012430:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8012432:	e016      	b.n	8012462 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 8012434:	4b0e      	ldr	r3, [pc, #56]	; (8012470 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8012436:	781b      	ldrb	r3, [r3, #0]
 8012438:	2b00      	cmp	r3, #0
 801243a:	d012      	beq.n	8012462 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 801243c:	4b0f      	ldr	r3, [pc, #60]	; (801247c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 801243e:	881a      	ldrh	r2, [r3, #0]
 8012440:	4b0d      	ldr	r3, [pc, #52]	; (8012478 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8012442:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 8012444:	4b0b      	ldr	r3, [pc, #44]	; (8012474 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8012446:	881a      	ldrh	r2, [r3, #0]
 8012448:	4b0d      	ldr	r3, [pc, #52]	; (8012480 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 801244a:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 801244c:	4b0c      	ldr	r3, [pc, #48]	; (8012480 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 801244e:	881a      	ldrh	r2, [r3, #0]
 8012450:	4b0a      	ldr	r3, [pc, #40]	; (801247c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8012452:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 8012454:	4b08      	ldr	r3, [pc, #32]	; (8012478 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8012456:	881a      	ldrh	r2, [r3, #0]
 8012458:	4b06      	ldr	r3, [pc, #24]	; (8012474 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 801245a:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 801245c:	4b04      	ldr	r3, [pc, #16]	; (8012470 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 801245e:	2200      	movs	r2, #0
 8012460:	701a      	strb	r2, [r3, #0]
    }
 8012462:	bf00      	nop
 8012464:	370c      	adds	r7, #12
 8012466:	46bd      	mov	sp, r7
 8012468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801246c:	4770      	bx	lr
 801246e:	bf00      	nop
 8012470:	2000bad0 	.word	0x2000bad0
 8012474:	2000bacc 	.word	0x2000bacc
 8012478:	2000bad2 	.word	0x2000bad2
 801247c:	2000bace 	.word	0x2000bace
 8012480:	2000bad4 	.word	0x2000bad4

08012484 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8012484:	b580      	push	{r7, lr}
 8012486:	b082      	sub	sp, #8
 8012488:	af00      	add	r7, sp, #0
 801248a:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	4618      	mov	r0, r3
 8012490:	f002 f8cc 	bl	801462c <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8012494:	bf00      	nop
 8012496:	3708      	adds	r7, #8
 8012498:	46bd      	mov	sp, r7
 801249a:	bd80      	pop	{r7, pc}

0801249c <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 801249c:	b580      	push	{r7, lr}
 801249e:	b082      	sub	sp, #8
 80124a0:	af00      	add	r7, sp, #0
 80124a2:	6078      	str	r0, [r7, #4]
 80124a4:	4a05      	ldr	r2, [pc, #20]	; (80124bc <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	601a      	str	r2, [r3, #0]
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	4618      	mov	r0, r3
 80124ae:	f7ff fe43 	bl	8012138 <_ZN8touchgfx3HALD1Ev>
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	4618      	mov	r0, r3
 80124b6:	3708      	adds	r7, #8
 80124b8:	46bd      	mov	sp, r7
 80124ba:	bd80      	pop	{r7, pc}
 80124bc:	080253a8 	.word	0x080253a8

080124c0 <_ZN20TouchGFXGeneratedHALD0Ev>:
 80124c0:	b580      	push	{r7, lr}
 80124c2:	b082      	sub	sp, #8
 80124c4:	af00      	add	r7, sp, #0
 80124c6:	6078      	str	r0, [r7, #4]
 80124c8:	6878      	ldr	r0, [r7, #4]
 80124ca:	f7ff ffe7 	bl	801249c <_ZN20TouchGFXGeneratedHALD1Ev>
 80124ce:	2178      	movs	r1, #120	; 0x78
 80124d0:	6878      	ldr	r0, [r7, #4]
 80124d2:	f010 ff86 	bl	80233e2 <_ZdlPvj>
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	4618      	mov	r0, r3
 80124da:	3708      	adds	r7, #8
 80124dc:	46bd      	mov	sp, r7
 80124de:	bd80      	pop	{r7, pc}

080124e0 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80124e0:	b580      	push	{r7, lr}
 80124e2:	b082      	sub	sp, #8
 80124e4:	af00      	add	r7, sp, #0
 80124e6:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	4618      	mov	r0, r3
 80124ec:	f7ff ffca 	bl	8012484 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 80124f0:	bf00      	nop
 80124f2:	3708      	adds	r7, #8
 80124f4:	46bd      	mov	sp, r7
 80124f6:	bd80      	pop	{r7, pc}

080124f8 <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32f7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 80124f8:	b580      	push	{r7, lr}
 80124fa:	b082      	sub	sp, #8
 80124fc:	af00      	add	r7, sp, #0
 80124fe:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	4618      	mov	r0, r3
 8012504:	f001 fb18 	bl	8013b38 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8012508:	bf00      	nop
 801250a:	3708      	adds	r7, #8
 801250c:	46bd      	mov	sp, r7
 801250e:	bd80      	pop	{r7, pc}

08012510 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8012510:	b580      	push	{r7, lr}
 8012512:	b082      	sub	sp, #8
 8012514:	af00      	add	r7, sp, #0
 8012516:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	4618      	mov	r0, r3
 801251c:	f001 fb98 	bl	8013c50 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8012520:	4603      	mov	r3, r0
}
 8012522:	4618      	mov	r0, r3
 8012524:	3708      	adds	r7, #8
 8012526:	46bd      	mov	sp, r7
 8012528:	bd80      	pop	{r7, pc}

0801252a <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 801252a:	b580      	push	{r7, lr}
 801252c:	b082      	sub	sp, #8
 801252e:	af00      	add	r7, sp, #0
 8012530:	6078      	str	r0, [r7, #4]
 8012532:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	6839      	ldr	r1, [r7, #0]
 8012538:	4618      	mov	r0, r3
 801253a:	f001 fb97 	bl	8013c6c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 801253e:	bf00      	nop
 8012540:	3708      	adds	r7, #8
 8012542:	46bd      	mov	sp, r7
 8012544:	bd80      	pop	{r7, pc}

08012546 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8012546:	b580      	push	{r7, lr}
 8012548:	b082      	sub	sp, #8
 801254a:	af00      	add	r7, sp, #0
 801254c:	6078      	str	r0, [r7, #4]
 801254e:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	6839      	ldr	r1, [r7, #0]
 8012554:	4618      	mov	r0, r3
 8012556:	f001 fb9f 	bl	8013c98 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
}
 801255a:	bf00      	nop
 801255c:	3708      	adds	r7, #8
 801255e:	46bd      	mov	sp, r7
 8012560:	bd80      	pop	{r7, pc}

08012562 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8012562:	b580      	push	{r7, lr}
 8012564:	b082      	sub	sp, #8
 8012566:	af00      	add	r7, sp, #0
 8012568:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	4618      	mov	r0, r3
 801256e:	f001 fb15 	bl	8013b9c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8012572:	bf00      	nop
 8012574:	3708      	adds	r7, #8
 8012576:	46bd      	mov	sp, r7
 8012578:	bd80      	pop	{r7, pc}

0801257a <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 801257a:	b580      	push	{r7, lr}
 801257c:	b082      	sub	sp, #8
 801257e:	af00      	add	r7, sp, #0
 8012580:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	4618      	mov	r0, r3
 8012586:	f001 fb19 	bl	8013bbc <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 801258a:	bf00      	nop
 801258c:	3708      	adds	r7, #8
 801258e:	46bd      	mov	sp, r7
 8012590:	bd80      	pop	{r7, pc}

08012592 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8012592:	b580      	push	{r7, lr}
 8012594:	b082      	sub	sp, #8
 8012596:	af00      	add	r7, sp, #0
 8012598:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	4618      	mov	r0, r3
 801259e:	f001 fb1b 	bl	8013bd8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 80125a2:	bf00      	nop
 80125a4:	3708      	adds	r7, #8
 80125a6:	46bd      	mov	sp, r7
 80125a8:	bd80      	pop	{r7, pc}

080125aa <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 80125aa:	b580      	push	{r7, lr}
 80125ac:	b082      	sub	sp, #8
 80125ae:	af00      	add	r7, sp, #0
 80125b0:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	4618      	mov	r0, r3
 80125b6:	f001 fb1d 	bl	8013bf4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 80125ba:	bf00      	nop
 80125bc:	3708      	adds	r7, #8
 80125be:	46bd      	mov	sp, r7
 80125c0:	bd80      	pop	{r7, pc}
	...

080125c4 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80125c4:	b580      	push	{r7, lr}
 80125c6:	b082      	sub	sp, #8
 80125c8:	af00      	add	r7, sp, #0
 80125ca:	6078      	str	r0, [r7, #4]
 80125cc:	4a05      	ldr	r2, [pc, #20]	; (80125e4 <_ZN11TouchGFXHALD1Ev+0x20>)
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	601a      	str	r2, [r3, #0]
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	4618      	mov	r0, r3
 80125d6:	f7ff ff61 	bl	801249c <_ZN20TouchGFXGeneratedHALD1Ev>
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	4618      	mov	r0, r3
 80125de:	3708      	adds	r7, #8
 80125e0:	46bd      	mov	sp, r7
 80125e2:	bd80      	pop	{r7, pc}
 80125e4:	080250d4 	.word	0x080250d4

080125e8 <_ZN11TouchGFXHALD0Ev>:
 80125e8:	b580      	push	{r7, lr}
 80125ea:	b082      	sub	sp, #8
 80125ec:	af00      	add	r7, sp, #0
 80125ee:	6078      	str	r0, [r7, #4]
 80125f0:	6878      	ldr	r0, [r7, #4]
 80125f2:	f7ff ffe7 	bl	80125c4 <_ZN11TouchGFXHALD1Ev>
 80125f6:	2178      	movs	r1, #120	; 0x78
 80125f8:	6878      	ldr	r0, [r7, #4]
 80125fa:	f010 fef2 	bl	80233e2 <_ZdlPvj>
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	4618      	mov	r0, r3
 8012602:	3708      	adds	r7, #8
 8012604:	46bd      	mov	sp, r7
 8012606:	bd80      	pop	{r7, pc}

08012608 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8012608:	b580      	push	{r7, lr}
 801260a:	af00      	add	r7, sp, #0
    vSemaphoreCreateBinary(frame_buffer_sem);
 801260c:	2203      	movs	r2, #3
 801260e:	2100      	movs	r1, #0
 8012610:	2001      	movs	r0, #1
 8012612:	f7f9 fc6c 	bl	800beee <xQueueGenericCreate>
 8012616:	4602      	mov	r2, r0
 8012618:	4b0b      	ldr	r3, [pc, #44]	; (8012648 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 801261a:	601a      	str	r2, [r3, #0]
 801261c:	4b0a      	ldr	r3, [pc, #40]	; (8012648 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 801261e:	681b      	ldr	r3, [r3, #0]
 8012620:	2b00      	cmp	r3, #0
 8012622:	d006      	beq.n	8012632 <_ZN8touchgfx10OSWrappers10initializeEv+0x2a>
 8012624:	4b08      	ldr	r3, [pc, #32]	; (8012648 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8012626:	6818      	ldr	r0, [r3, #0]
 8012628:	2300      	movs	r3, #0
 801262a:	2200      	movs	r2, #0
 801262c:	2100      	movs	r1, #0
 801262e:	f7f9 fcbf 	bl	800bfb0 <xQueueGenericSend>
    // Create a queue of length 1
    vsync_q = xQueueGenericCreate(1, 1, 0);
 8012632:	2200      	movs	r2, #0
 8012634:	2101      	movs	r1, #1
 8012636:	2001      	movs	r0, #1
 8012638:	f7f9 fc59 	bl	800beee <xQueueGenericCreate>
 801263c:	4602      	mov	r2, r0
 801263e:	4b03      	ldr	r3, [pc, #12]	; (801264c <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8012640:	601a      	str	r2, [r3, #0]
}
 8012642:	bf00      	nop
 8012644:	bd80      	pop	{r7, pc}
 8012646:	bf00      	nop
 8012648:	200085fc 	.word	0x200085fc
 801264c:	20008600 	.word	0x20008600

08012650 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8012650:	b580      	push	{r7, lr}
 8012652:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, portMAX_DELAY);
 8012654:	4b04      	ldr	r3, [pc, #16]	; (8012668 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	f04f 31ff 	mov.w	r1, #4294967295
 801265c:	4618      	mov	r0, r3
 801265e:	f7f9 ffb9 	bl	800c5d4 <xQueueSemaphoreTake>
}
 8012662:	bf00      	nop
 8012664:	bd80      	pop	{r7, pc}
 8012666:	bf00      	nop
 8012668:	200085fc 	.word	0x200085fc

0801266c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 801266c:	b580      	push	{r7, lr}
 801266e:	af00      	add	r7, sp, #0
    xSemaphoreGive(frame_buffer_sem);
 8012670:	4b04      	ldr	r3, [pc, #16]	; (8012684 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x18>)
 8012672:	6818      	ldr	r0, [r3, #0]
 8012674:	2300      	movs	r3, #0
 8012676:	2200      	movs	r2, #0
 8012678:	2100      	movs	r1, #0
 801267a:	f7f9 fc99 	bl	800bfb0 <xQueueGenericSend>
}
 801267e:	bf00      	nop
 8012680:	bd80      	pop	{r7, pc}
 8012682:	bf00      	nop
 8012684:	200085fc 	.word	0x200085fc

08012688 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8012688:	b580      	push	{r7, lr}
 801268a:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, 0);
 801268c:	4b03      	ldr	r3, [pc, #12]	; (801269c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	2100      	movs	r1, #0
 8012692:	4618      	mov	r0, r3
 8012694:	f7f9 ff9e 	bl	800c5d4 <xQueueSemaphoreTake>
}
 8012698:	bf00      	nop
 801269a:	bd80      	pop	{r7, pc}
 801269c:	200085fc 	.word	0x200085fc

080126a0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 80126a0:	b580      	push	{r7, lr}
 80126a2:	b082      	sub	sp, #8
 80126a4:	af00      	add	r7, sp, #0
    // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
    // re-scheduling. May be applicable for other OSes as well.
    portBASE_TYPE px = pdFALSE;
 80126a6:	2300      	movs	r3, #0
 80126a8:	607b      	str	r3, [r7, #4]
    xSemaphoreGiveFromISR(frame_buffer_sem, &px);
 80126aa:	4b0b      	ldr	r3, [pc, #44]	; (80126d8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x38>)
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	1d3a      	adds	r2, r7, #4
 80126b0:	4611      	mov	r1, r2
 80126b2:	4618      	mov	r0, r3
 80126b4:	f7f9 fe1a 	bl	800c2ec <xQueueGiveFromISR>
    portEND_SWITCHING_ISR(px);
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d007      	beq.n	80126ce <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x2e>
 80126be:	4b07      	ldr	r3, [pc, #28]	; (80126dc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x3c>)
 80126c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80126c4:	601a      	str	r2, [r3, #0]
 80126c6:	f3bf 8f4f 	dsb	sy
 80126ca:	f3bf 8f6f 	isb	sy
}
 80126ce:	bf00      	nop
 80126d0:	3708      	adds	r7, #8
 80126d2:	46bd      	mov	sp, r7
 80126d4:	bd80      	pop	{r7, pc}
 80126d6:	bf00      	nop
 80126d8:	200085fc 	.word	0x200085fc
 80126dc:	e000ed04 	.word	0xe000ed04

080126e0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 80126e0:	b580      	push	{r7, lr}
 80126e2:	b082      	sub	sp, #8
 80126e4:	af00      	add	r7, sp, #0
    if (vsync_q)
 80126e6:	4b0e      	ldr	r3, [pc, #56]	; (8012720 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d013      	beq.n	8012716 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
    {
        // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
        // re-scheduling. May be applicable for other OSes as well.
        portBASE_TYPE px = pdFALSE;
 80126ee:	2300      	movs	r3, #0
 80126f0:	607b      	str	r3, [r7, #4]
        xQueueSendFromISR(vsync_q, &dummy, &px);
 80126f2:	4b0b      	ldr	r3, [pc, #44]	; (8012720 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 80126f4:	6818      	ldr	r0, [r3, #0]
 80126f6:	1d3a      	adds	r2, r7, #4
 80126f8:	2300      	movs	r3, #0
 80126fa:	490a      	ldr	r1, [pc, #40]	; (8012724 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x44>)
 80126fc:	f7f9 fd5a 	bl	800c1b4 <xQueueGenericSendFromISR>
        portEND_SWITCHING_ISR(px);
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	2b00      	cmp	r3, #0
 8012704:	d007      	beq.n	8012716 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
 8012706:	4b08      	ldr	r3, [pc, #32]	; (8012728 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x48>)
 8012708:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801270c:	601a      	str	r2, [r3, #0]
 801270e:	f3bf 8f4f 	dsb	sy
 8012712:	f3bf 8f6f 	isb	sy
    }
}
 8012716:	bf00      	nop
 8012718:	3708      	adds	r7, #8
 801271a:	46bd      	mov	sp, r7
 801271c:	bd80      	pop	{r7, pc}
 801271e:	bf00      	nop
 8012720:	20008600 	.word	0x20008600
 8012724:	20000038 	.word	0x20000038
 8012728:	e000ed04 	.word	0xe000ed04

0801272c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 801272c:	b580      	push	{r7, lr}
 801272e:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    xQueueReceive(vsync_q, &dummy, 0);
 8012730:	4b08      	ldr	r3, [pc, #32]	; (8012754 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	2200      	movs	r2, #0
 8012736:	4908      	ldr	r1, [pc, #32]	; (8012758 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8012738:	4618      	mov	r0, r3
 801273a:	f7f9 fe69 	bl	800c410 <xQueueReceive>

    // Then, wait for next VSYNC to occur.
    xQueueReceive(vsync_q, &dummy, portMAX_DELAY);
 801273e:	4b05      	ldr	r3, [pc, #20]	; (8012754 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	f04f 32ff 	mov.w	r2, #4294967295
 8012746:	4904      	ldr	r1, [pc, #16]	; (8012758 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8012748:	4618      	mov	r0, r3
 801274a:	f7f9 fe61 	bl	800c410 <xQueueReceive>
}
 801274e:	bf00      	nop
 8012750:	bd80      	pop	{r7, pc}
 8012752:	bf00      	nop
 8012754:	20008600 	.word	0x20008600
 8012758:	20000038 	.word	0x20000038

0801275c <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 801275c:	b580      	push	{r7, lr}
 801275e:	b082      	sub	sp, #8
 8012760:	af00      	add	r7, sp, #0
 8012762:	4603      	mov	r3, r0
 8012764:	80fb      	strh	r3, [r7, #6]
    vTaskDelay(ms);
 8012766:	88fb      	ldrh	r3, [r7, #6]
 8012768:	4618      	mov	r0, r3
 801276a:	f7fa fb91 	bl	800ce90 <vTaskDelay>
}
 801276e:	bf00      	nop
 8012770:	3708      	adds	r7, #8
 8012772:	46bd      	mov	sp, r7
 8012774:	bd80      	pop	{r7, pc}
	...

08012778 <__NVIC_EnableIRQ>:
{
 8012778:	b480      	push	{r7}
 801277a:	b083      	sub	sp, #12
 801277c:	af00      	add	r7, sp, #0
 801277e:	4603      	mov	r3, r0
 8012780:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012786:	2b00      	cmp	r3, #0
 8012788:	db0d      	blt.n	80127a6 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801278a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801278e:	b2db      	uxtb	r3, r3
 8012790:	f003 021f 	and.w	r2, r3, #31
 8012794:	4907      	ldr	r1, [pc, #28]	; (80127b4 <__NVIC_EnableIRQ+0x3c>)
 8012796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801279a:	095b      	lsrs	r3, r3, #5
 801279c:	2001      	movs	r0, #1
 801279e:	fa00 f202 	lsl.w	r2, r0, r2
 80127a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80127a6:	bf00      	nop
 80127a8:	370c      	adds	r7, #12
 80127aa:	46bd      	mov	sp, r7
 80127ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127b0:	4770      	bx	lr
 80127b2:	bf00      	nop
 80127b4:	e000e100 	.word	0xe000e100

080127b8 <__NVIC_DisableIRQ>:
{
 80127b8:	b480      	push	{r7}
 80127ba:	b083      	sub	sp, #12
 80127bc:	af00      	add	r7, sp, #0
 80127be:	4603      	mov	r3, r0
 80127c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80127c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	db12      	blt.n	80127f0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80127ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80127ce:	b2db      	uxtb	r3, r3
 80127d0:	f003 021f 	and.w	r2, r3, #31
 80127d4:	4909      	ldr	r1, [pc, #36]	; (80127fc <__NVIC_DisableIRQ+0x44>)
 80127d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80127da:	095b      	lsrs	r3, r3, #5
 80127dc:	2001      	movs	r0, #1
 80127de:	fa00 f202 	lsl.w	r2, r0, r2
 80127e2:	3320      	adds	r3, #32
 80127e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80127e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80127ec:	f3bf 8f6f 	isb	sy
}
 80127f0:	bf00      	nop
 80127f2:	370c      	adds	r7, #12
 80127f4:	46bd      	mov	sp, r7
 80127f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127fa:	4770      	bx	lr
 80127fc:	e000e100 	.word	0xe000e100

08012800 <_ZN8touchgfx9colortypeC1Ev>:
    colortype() : color(0) {}
 8012800:	b480      	push	{r7}
 8012802:	b083      	sub	sp, #12
 8012804:	af00      	add	r7, sp, #0
 8012806:	6078      	str	r0, [r7, #4]
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	2200      	movs	r2, #0
 801280c:	601a      	str	r2, [r3, #0]
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	4618      	mov	r0, r3
 8012812:	370c      	adds	r7, #12
 8012814:	46bd      	mov	sp, r7
 8012816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801281a:	4770      	bx	lr

0801281c <_ZNK8touchgfx9colortype10getColor32Ev>:
    inline uint32_t getColor32() const
 801281c:	b480      	push	{r7}
 801281e:	b083      	sub	sp, #12
 8012820:	af00      	add	r7, sp, #0
 8012822:	6078      	str	r0, [r7, #4]
        return color;
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	681b      	ldr	r3, [r3, #0]
    }
 8012828:	4618      	mov	r0, r3
 801282a:	370c      	adds	r7, #12
 801282c:	46bd      	mov	sp, r7
 801282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012832:	4770      	bx	lr

08012834 <_ZNK8touchgfx9colortypecvtEv>:
    operator uint16_t() const
 8012834:	b480      	push	{r7}
 8012836:	b083      	sub	sp, #12
 8012838:	af00      	add	r7, sp, #0
 801283a:	6078      	str	r0, [r7, #4]
        return (uint16_t)color;
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	b29b      	uxth	r3, r3
    }
 8012842:	4618      	mov	r0, r3
 8012844:	370c      	adds	r7, #12
 8012846:	46bd      	mov	sp, r7
 8012848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801284c:	4770      	bx	lr
	...

08012850 <_ZN8touchgfx9DMA_QueueD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Queue()
 8012850:	b480      	push	{r7}
 8012852:	b083      	sub	sp, #12
 8012854:	af00      	add	r7, sp, #0
 8012856:	6078      	str	r0, [r7, #4]
    {
 8012858:	4a04      	ldr	r2, [pc, #16]	; (801286c <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	601a      	str	r2, [r3, #0]
    }
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	4618      	mov	r0, r3
 8012862:	370c      	adds	r7, #12
 8012864:	46bd      	mov	sp, r7
 8012866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801286a:	4770      	bx	lr
 801286c:	0802527c 	.word	0x0802527c

08012870 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8012870:	b580      	push	{r7, lr}
 8012872:	b082      	sub	sp, #8
 8012874:	af00      	add	r7, sp, #0
 8012876:	6078      	str	r0, [r7, #4]
    }
 8012878:	6878      	ldr	r0, [r7, #4]
 801287a:	f7ff ffe9 	bl	8012850 <_ZN8touchgfx9DMA_QueueD1Ev>
 801287e:	2104      	movs	r1, #4
 8012880:	6878      	ldr	r0, [r7, #4]
 8012882:	f010 fdae 	bl	80233e2 <_ZdlPvj>
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	4618      	mov	r0, r3
 801288a:	3708      	adds	r7, #8
 801288c:	46bd      	mov	sp, r7
 801288e:	bd80      	pop	{r7, pc}

08012890 <_ZN8touchgfx13DMA_Interface5flushEv>:
     *
     * @brief This function blocks until all DMA transfers in the queue have been completed.
     *
     *        This function blocks until all DMA transfers in the queue have been completed.
     */
    virtual void flush()
 8012890:	b580      	push	{r7, lr}
 8012892:	b082      	sub	sp, #8
 8012894:	af00      	add	r7, sp, #0
 8012896:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	3344      	adds	r3, #68	; 0x44
 801289e:	681b      	ldr	r3, [r3, #0]
 80128a0:	6878      	ldr	r0, [r7, #4]
 80128a2:	4798      	blx	r3
    }
 80128a4:	bf00      	nop
 80128a6:	3708      	adds	r7, #8
 80128a8:	46bd      	mov	sp, r7
 80128aa:	bd80      	pop	{r7, pc}

080128ac <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType(void)
 80128ac:	b480      	push	{r7}
 80128ae:	b083      	sub	sp, #12
 80128b0:	af00      	add	r7, sp, #0
 80128b2:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 80128b4:	2300      	movs	r3, #0
    }
 80128b6:	4618      	mov	r0, r3
 80128b8:	370c      	adds	r7, #12
 80128ba:	46bd      	mov	sp, r7
 80128bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c0:	4770      	bx	lr
	...

080128c4 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Interface()
 80128c4:	b480      	push	{r7}
 80128c6:	b083      	sub	sp, #12
 80128c8:	af00      	add	r7, sp, #0
 80128ca:	6078      	str	r0, [r7, #4]
    {
 80128cc:	4a04      	ldr	r2, [pc, #16]	; (80128e0 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	601a      	str	r2, [r3, #0]
    }
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	4618      	mov	r0, r3
 80128d6:	370c      	adds	r7, #12
 80128d8:	46bd      	mov	sp, r7
 80128da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128de:	4770      	bx	lr
 80128e0:	08026140 	.word	0x08026140

080128e4 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 80128e4:	b580      	push	{r7, lr}
 80128e6:	b082      	sub	sp, #8
 80128e8:	af00      	add	r7, sp, #0
 80128ea:	6078      	str	r0, [r7, #4]
    }
 80128ec:	6878      	ldr	r0, [r7, #4]
 80128ee:	f7ff ffe9 	bl	80128c4 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 80128f2:	210c      	movs	r1, #12
 80128f4:	6878      	ldr	r0, [r7, #4]
 80128f6:	f010 fd74 	bl	80233e2 <_ZdlPvj>
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	4618      	mov	r0, r3
 80128fe:	3708      	adds	r7, #8
 8012900:	46bd      	mov	sp, r7
 8012902:	bd80      	pop	{r7, pc}

08012904 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
     *
     *        Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8012904:	b480      	push	{r7}
 8012906:	b083      	sub	sp, #12
 8012908:	af00      	add	r7, sp, #0
 801290a:	6078      	str	r0, [r7, #4]
 801290c:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 801290e:	4a09      	ldr	r2, [pc, #36]	; (8012934 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	601a      	str	r2, [r3, #0]
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	683a      	ldr	r2, [r7, #0]
 8012918:	605a      	str	r2, [r3, #4]
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	2200      	movs	r2, #0
 801291e:	721a      	strb	r2, [r3, #8]
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	2200      	movs	r2, #0
 8012924:	725a      	strb	r2, [r3, #9]
    {
    }
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	4618      	mov	r0, r3
 801292a:	370c      	adds	r7, #12
 801292c:	46bd      	mov	sp, r7
 801292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012932:	4770      	bx	lr
 8012934:	08026140 	.word	0x08026140

08012938 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8012938:	b580      	push	{r7, lr}
 801293a:	b082      	sub	sp, #8
 801293c:	af00      	add	r7, sp, #0
 801293e:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	685a      	ldr	r2, [r3, #4]
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	685b      	ldr	r3, [r3, #4]
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	3314      	adds	r3, #20
 801294c:	681b      	ldr	r3, [r3, #0]
 801294e:	4610      	mov	r0, r2
 8012950:	4798      	blx	r3
    }
 8012952:	bf00      	nop
 8012954:	3708      	adds	r7, #8
 8012956:	46bd      	mov	sp, r7
 8012958:	bd80      	pop	{r7, pc}

0801295a <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 801295a:	b580      	push	{r7, lr}
 801295c:	b082      	sub	sp, #8
 801295e:	af00      	add	r7, sp, #0
 8012960:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8012962:	687a      	ldr	r2, [r7, #4]
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	3328      	adds	r3, #40	; 0x28
 801296a:	681b      	ldr	r3, [r3, #0]
 801296c:	4610      	mov	r0, r2
 801296e:	4798      	blx	r3
    }
 8012970:	bf00      	nop
 8012972:	3708      	adds	r7, #8
 8012974:	46bd      	mov	sp, r7
 8012976:	bd80      	pop	{r7, pc}

08012978 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 8012978:	b480      	push	{r7}
 801297a:	b085      	sub	sp, #20
 801297c:	af00      	add	r7, sp, #0
 801297e:	60f8      	str	r0, [r7, #12]
 8012980:	60b9      	str	r1, [r7, #8]
 8012982:	607a      	str	r2, [r7, #4]
 8012984:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 8012986:	68fb      	ldr	r3, [r7, #12]
 8012988:	681b      	ldr	r3, [r3, #0]
 801298a:	681b      	ldr	r3, [r3, #0]
 801298c:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8012990:	68ba      	ldr	r2, [r7, #8]
 8012992:	68fb      	ldr	r3, [r7, #12]
 8012994:	681b      	ldr	r3, [r3, #0]
 8012996:	430a      	orrs	r2, r1
 8012998:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 801299a:	68fb      	ldr	r3, [r7, #12]
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80129a0:	f023 0107 	bic.w	r1, r3, #7
 80129a4:	687a      	ldr	r2, [r7, #4]
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	430a      	orrs	r2, r1
 80129ac:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80129b4:	4b06      	ldr	r3, [pc, #24]	; (80129d0 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm+0x58>)
 80129b6:	4013      	ands	r3, r2
 80129b8:	6839      	ldr	r1, [r7, #0]
 80129ba:	68fa      	ldr	r2, [r7, #12]
 80129bc:	6812      	ldr	r2, [r2, #0]
 80129be:	430b      	orrs	r3, r1
 80129c0:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 80129c2:	2300      	movs	r3, #0
}
 80129c4:	4618      	mov	r0, r3
 80129c6:	3714      	adds	r7, #20
 80129c8:	46bd      	mov	sp, r7
 80129ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ce:	4770      	bx	lr
 80129d0:	ffffc000 	.word	0xffffc000

080129d4 <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 80129d4:	b580      	push	{r7, lr}
 80129d6:	b082      	sub	sp, #8
 80129d8:	af00      	add	r7, sp, #0
 80129da:	6078      	str	r0, [r7, #4]
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END DMA2D_XferCpltCallback */

    touchgfx::HAL::getInstance()->signalDMAInterrupt();
 80129dc:	f7fc f9d6 	bl	800ed8c <_ZN8touchgfx3HAL11getInstanceEv>
 80129e0:	4603      	mov	r3, r0
 80129e2:	4618      	mov	r0, r3
 80129e4:	f7ff ffa8 	bl	8012938 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 80129e8:	bf00      	nop
 80129ea:	3708      	adds	r7, #8
 80129ec:	46bd      	mov	sp, r7
 80129ee:	bd80      	pop	{r7, pc}

080129f0 <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
{
 80129f0:	b580      	push	{r7, lr}
 80129f2:	b082      	sub	sp, #8
 80129f4:	af00      	add	r7, sp, #0
 80129f6:	6078      	str	r0, [r7, #4]
    assert(0);
 80129f8:	4b02      	ldr	r3, [pc, #8]	; (8012a04 <DMA2D_XferErrorCallback+0x14>)
 80129fa:	4a03      	ldr	r2, [pc, #12]	; (8012a08 <DMA2D_XferErrorCallback+0x18>)
 80129fc:	213e      	movs	r1, #62	; 0x3e
 80129fe:	4803      	ldr	r0, [pc, #12]	; (8012a0c <DMA2D_XferErrorCallback+0x1c>)
 8012a00:	f010 fd1a 	bl	8023438 <__assert_func>
 8012a04:	08024aa0 	.word	0x08024aa0
 8012a08:	08025298 	.word	0x08025298
 8012a0c:	08024aa4 	.word	0x08024aa4

08012a10 <_ZN8touchgfx6BlitOpC1Ev>:
 *        (frame buffer) using DMA.
 *
 *        BlitOp instances carry the required information for performing operations on the LCD
 *        (frame buffer) using DMA.
 */
struct BlitOp
 8012a10:	b580      	push	{r7, lr}
 8012a12:	b082      	sub	sp, #8
 8012a14:	af00      	add	r7, sp, #0
 8012a16:	6078      	str	r0, [r7, #4]
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	3318      	adds	r3, #24
 8012a1c:	4618      	mov	r0, r3
 8012a1e:	f7ff feef 	bl	8012800 <_ZN8touchgfx9colortypeC1Ev>
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	4618      	mov	r0, r3
 8012a26:	3708      	adds	r7, #8
 8012a28:	46bd      	mov	sp, r7
 8012a2a:	bd80      	pop	{r7, pc}

08012a2c <_ZN10STM32F7DMAC1Ev>:
}

}

STM32F7DMA::STM32F7DMA()
 8012a2c:	b5b0      	push	{r4, r5, r7, lr}
 8012a2e:	b082      	sub	sp, #8
 8012a30:	af00      	add	r7, sp, #0
 8012a32:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8012a34:	687a      	ldr	r2, [r7, #4]
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	330c      	adds	r3, #12
 8012a3a:	4619      	mov	r1, r3
 8012a3c:	4610      	mov	r0, r2
 8012a3e:	f7ff ff61 	bl	8012904 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8012a42:	4a0e      	ldr	r2, [pc, #56]	; (8012a7c <_ZN10STM32F7DMAC1Ev+0x50>)
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	601a      	str	r2, [r3, #0]
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	f103 000c 	add.w	r0, r3, #12
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	3320      	adds	r3, #32
 8012a52:	2260      	movs	r2, #96	; 0x60
 8012a54:	4619      	mov	r1, r3
 8012a56:	f002 fc8d 	bl	8015374 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	3320      	adds	r3, #32
 8012a5e:	245f      	movs	r4, #95	; 0x5f
 8012a60:	461d      	mov	r5, r3
 8012a62:	2c00      	cmp	r4, #0
 8012a64:	db05      	blt.n	8012a72 <_ZN10STM32F7DMAC1Ev+0x46>
 8012a66:	4628      	mov	r0, r5
 8012a68:	f7ff ffd2 	bl	8012a10 <_ZN8touchgfx6BlitOpC1Ev>
 8012a6c:	3520      	adds	r5, #32
 8012a6e:	3c01      	subs	r4, #1
 8012a70:	e7f7      	b.n	8012a62 <_ZN10STM32F7DMAC1Ev+0x36>
{}
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	4618      	mov	r0, r3
 8012a76:	3708      	adds	r7, #8
 8012a78:	46bd      	mov	sp, r7
 8012a7a:	bdb0      	pop	{r4, r5, r7, pc}
 8012a7c:	0802522c 	.word	0x0802522c

08012a80 <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 8012a80:	b580      	push	{r7, lr}
 8012a82:	b082      	sub	sp, #8
 8012a84:	af00      	add	r7, sp, #0
 8012a86:	6078      	str	r0, [r7, #4]
 8012a88:	4a0b      	ldr	r2, [pc, #44]	; (8012ab8 <_ZN10STM32F7DMAD1Ev+0x38>)
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 8012a8e:	480b      	ldr	r0, [pc, #44]	; (8012abc <_ZN10STM32F7DMAD1Ev+0x3c>)
 8012a90:	f7f1 fdee 	bl	8004670 <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 8012a94:	205a      	movs	r0, #90	; 0x5a
 8012a96:	f7ff fe8f 	bl	80127b8 <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	330c      	adds	r3, #12
 8012a9e:	4618      	mov	r0, r3
 8012aa0:	f000 faa0 	bl	8012fe4 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	4618      	mov	r0, r3
 8012aa8:	f7ff ff0c 	bl	80128c4 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	4618      	mov	r0, r3
 8012ab0:	3708      	adds	r7, #8
 8012ab2:	46bd      	mov	sp, r7
 8012ab4:	bd80      	pop	{r7, pc}
 8012ab6:	bf00      	nop
 8012ab8:	0802522c 	.word	0x0802522c
 8012abc:	2000c35c 	.word	0x2000c35c

08012ac0 <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 8012ac0:	b580      	push	{r7, lr}
 8012ac2:	b082      	sub	sp, #8
 8012ac4:	af00      	add	r7, sp, #0
 8012ac6:	6078      	str	r0, [r7, #4]
}
 8012ac8:	6878      	ldr	r0, [r7, #4]
 8012aca:	f7ff ffd9 	bl	8012a80 <_ZN10STM32F7DMAD1Ev>
 8012ace:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8012ad2:	6878      	ldr	r0, [r7, #4]
 8012ad4:	f010 fc85 	bl	80233e2 <_ZdlPvj>
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	4618      	mov	r0, r3
 8012adc:	3708      	adds	r7, #8
 8012ade:	46bd      	mov	sp, r7
 8012ae0:	bd80      	pop	{r7, pc}
	...

08012ae4 <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 8012ae4:	b580      	push	{r7, lr}
 8012ae6:	b082      	sub	sp, #8
 8012ae8:	af00      	add	r7, sp, #0
 8012aea:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 8012aec:	4b09      	ldr	r3, [pc, #36]	; (8012b14 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8012aee:	4a0a      	ldr	r2, [pc, #40]	; (8012b18 <_ZN10STM32F7DMA10initializeEv+0x34>)
 8012af0:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 8012af2:	4808      	ldr	r0, [pc, #32]	; (8012b14 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8012af4:	f7f1 fd72 	bl	80045dc <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8012af8:	4b06      	ldr	r3, [pc, #24]	; (8012b14 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8012afa:	4a08      	ldr	r2, [pc, #32]	; (8012b1c <_ZN10STM32F7DMA10initializeEv+0x38>)
 8012afc:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8012afe:	4b05      	ldr	r3, [pc, #20]	; (8012b14 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8012b00:	4a07      	ldr	r2, [pc, #28]	; (8012b20 <_ZN10STM32F7DMA10initializeEv+0x3c>)
 8012b02:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 8012b04:	205a      	movs	r0, #90	; 0x5a
 8012b06:	f7ff fe37 	bl	8012778 <__NVIC_EnableIRQ>
}
 8012b0a:	bf00      	nop
 8012b0c:	3708      	adds	r7, #8
 8012b0e:	46bd      	mov	sp, r7
 8012b10:	bd80      	pop	{r7, pc}
 8012b12:	bf00      	nop
 8012b14:	2000c35c 	.word	0x2000c35c
 8012b18:	4002b000 	.word	0x4002b000
 8012b1c:	080129d5 	.word	0x080129d5
 8012b20:	080129f1 	.word	0x080129f1

08012b24 <_ZN10STM32F7DMA11getBlitCapsEv>:

BlitOperations STM32F7DMA::getBlitCaps()
{
 8012b24:	b480      	push	{r7}
 8012b26:	b083      	sub	sp, #12
 8012b28:	af00      	add	r7, sp, #0
 8012b2a:	6078      	str	r0, [r7, #4]
                                        | BLIT_OP_COPY
                                        | BLIT_OP_COPY_WITH_ALPHA
                                        | BLIT_OP_COPY_ARGB8888
                                        | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                        | BLIT_OP_COPY_A4
                                        | BLIT_OP_COPY_A8);
 8012b2c:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 8012b30:	4618      	mov	r0, r3
 8012b32:	370c      	adds	r7, #12
 8012b34:	46bd      	mov	sp, r7
 8012b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b3a:	4770      	bx	lr

08012b3c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 8012b3c:	b590      	push	{r4, r7, lr}
 8012b3e:	b08d      	sub	sp, #52	; 0x34
 8012b40:	af02      	add	r7, sp, #8
 8012b42:	6078      	str	r0, [r7, #4]
 8012b44:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 8012b46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012b4a:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 8012b4c:	2300      	movs	r3, #0
 8012b4e:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8012b50:	683b      	ldr	r3, [r7, #0]
 8012b52:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8012b54:	2b20      	cmp	r3, #32
 8012b56:	d007      	beq.n	8012b68 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 8012b58:	683b      	ldr	r3, [r7, #0]
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	2b40      	cmp	r3, #64	; 0x40
 8012b5e:	d003      	beq.n	8012b68 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8012b60:	683b      	ldr	r3, [r7, #0]
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	2b04      	cmp	r3, #4
 8012b66:	d101      	bne.n	8012b6c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 8012b68:	2301      	movs	r3, #1
 8012b6a:	e000      	b.n	8012b6e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 8012b6c:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8012b6e:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8012b70:	683b      	ldr	r3, [r7, #0]
 8012b72:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 8012b74:	2b80      	cmp	r3, #128	; 0x80
 8012b76:	d004      	beq.n	8012b82 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 8012b78:	683b      	ldr	r3, [r7, #0]
 8012b7a:	681b      	ldr	r3, [r3, #0]
 8012b7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012b80:	d101      	bne.n	8012b86 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 8012b82:	2301      	movs	r3, #1
 8012b84:	e000      	b.n	8012b88 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 8012b86:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8012b88:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 8012b8a:	f7fc f90b 	bl	800eda4 <_ZN8touchgfx3HAL3lcdEv>
 8012b8e:	4602      	mov	r2, r0
 8012b90:	6813      	ldr	r3, [r2, #0]
 8012b92:	3320      	adds	r3, #32
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	4610      	mov	r0, r2
 8012b98:	4798      	blx	r3
 8012b9a:	4603      	mov	r3, r0
 8012b9c:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 8012b9e:	683b      	ldr	r3, [r7, #0]
 8012ba0:	681b      	ldr	r3, [r3, #0]
 8012ba2:	2b40      	cmp	r3, #64	; 0x40
 8012ba4:	d01d      	beq.n	8012be2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8012ba6:	2b40      	cmp	r3, #64	; 0x40
 8012ba8:	d804      	bhi.n	8012bb4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
 8012baa:	2b04      	cmp	r3, #4
 8012bac:	d00e      	beq.n	8012bcc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 8012bae:	2b20      	cmp	r3, #32
 8012bb0:	d017      	beq.n	8012be2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8012bb2:	e019      	b.n	8012be8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
 8012bb4:	2b80      	cmp	r3, #128	; 0x80
 8012bb6:	d003      	beq.n	8012bc0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 8012bb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012bbc:	d003      	beq.n	8012bc6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8a>
 8012bbe:	e013      	b.n	8012be8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 8012bc0:	230a      	movs	r3, #10
 8012bc2:	623b      	str	r3, [r7, #32]
        break;
 8012bc4:	e01a      	b.n	8012bfc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 8012bc6:	2309      	movs	r3, #9
 8012bc8:	623b      	str	r3, [r7, #32]
        break;
 8012bca:	e017      	b.n	8012bfc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8012bcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012bd0:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8012bd2:	7f7b      	ldrb	r3, [r7, #29]
 8012bd4:	2b10      	cmp	r3, #16
 8012bd6:	d101      	bne.n	8012bdc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa0>
 8012bd8:	2302      	movs	r3, #2
 8012bda:	e000      	b.n	8012bde <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
 8012bdc:	2301      	movs	r3, #1
 8012bde:	623b      	str	r3, [r7, #32]
        break;
 8012be0:	e00c      	b.n	8012bfc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 8012be2:	2300      	movs	r3, #0
 8012be4:	623b      	str	r3, [r7, #32]
        break;
 8012be6:	e009      	b.n	8012bfc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    default:
        dma2dTransferMode = DMA2D_M2M;
 8012be8:	2300      	movs	r3, #0
 8012bea:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8012bec:	7f7b      	ldrb	r3, [r7, #29]
 8012bee:	2b10      	cmp	r3, #16
 8012bf0:	d101      	bne.n	8012bf6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xba>
 8012bf2:	2302      	movs	r3, #2
 8012bf4:	e000      	b.n	8012bf8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbc>
 8012bf6:	2301      	movs	r3, #1
 8012bf8:	623b      	str	r3, [r7, #32]
        break;
 8012bfa:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8012bfc:	4a76      	ldr	r2, [pc, #472]	; (8012dd8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8012bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c00:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8012c02:	7f7b      	ldrb	r3, [r7, #29]
 8012c04:	2b10      	cmp	r3, #16
 8012c06:	d101      	bne.n	8012c0c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8012c08:	2302      	movs	r3, #2
 8012c0a:	e000      	b.n	8012c0e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd2>
 8012c0c:	2301      	movs	r3, #1
 8012c0e:	4a72      	ldr	r2, [pc, #456]	; (8012dd8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8012c10:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8012c12:	683b      	ldr	r3, [r7, #0]
 8012c14:	8adb      	ldrh	r3, [r3, #22]
 8012c16:	461a      	mov	r2, r3
 8012c18:	683b      	ldr	r3, [r7, #0]
 8012c1a:	8a1b      	ldrh	r3, [r3, #16]
 8012c1c:	1ad3      	subs	r3, r2, r3
 8012c1e:	461a      	mov	r2, r3
 8012c20:	4b6d      	ldr	r3, [pc, #436]	; (8012dd8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8012c22:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8012c24:	7f7b      	ldrb	r3, [r7, #29]
 8012c26:	2b10      	cmp	r3, #16
 8012c28:	d101      	bne.n	8012c2e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
 8012c2a:	2202      	movs	r2, #2
 8012c2c:	e000      	b.n	8012c30 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 8012c2e:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8012c30:	683b      	ldr	r3, [r7, #0]
 8012c32:	8adb      	ldrh	r3, [r3, #22]
 8012c34:	4619      	mov	r1, r3
 8012c36:	683b      	ldr	r3, [r7, #0]
 8012c38:	8a1b      	ldrh	r3, [r3, #16]
 8012c3a:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8012c3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012c3e:	4866      	ldr	r0, [pc, #408]	; (8012dd8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8012c40:	f7ff fe9a 	bl	8012978 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8012c44:	4a64      	ldr	r2, [pc, #400]	; (8012dd8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8012c46:	6a3b      	ldr	r3, [r7, #32]
 8012c48:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 8012c4a:	683b      	ldr	r3, [r7, #0]
 8012c4c:	8a9b      	ldrh	r3, [r3, #20]
 8012c4e:	461a      	mov	r2, r3
 8012c50:	683b      	ldr	r3, [r7, #0]
 8012c52:	8a1b      	ldrh	r3, [r3, #16]
 8012c54:	1ad3      	subs	r3, r2, r3
 8012c56:	461a      	mov	r2, r3
 8012c58:	4b5f      	ldr	r3, [pc, #380]	; (8012dd8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8012c5a:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 8012c5c:	7ffb      	ldrb	r3, [r7, #31]
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d103      	bne.n	8012c6a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
 8012c62:	7fbb      	ldrb	r3, [r7, #30]
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	f000 8082 	beq.w	8012d6e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x232>
    {
        if (blitOp.alpha < 255)
 8012c6a:	683b      	ldr	r3, [r7, #0]
 8012c6c:	7f1b      	ldrb	r3, [r3, #28]
 8012c6e:	2bff      	cmp	r3, #255	; 0xff
 8012c70:	d008      	beq.n	8012c84 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 8012c72:	4b59      	ldr	r3, [pc, #356]	; (8012dd8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8012c74:	2202      	movs	r2, #2
 8012c76:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 8012c78:	683b      	ldr	r3, [r7, #0]
 8012c7a:	7f1b      	ldrb	r3, [r3, #28]
 8012c7c:	461a      	mov	r2, r3
 8012c7e:	4b56      	ldr	r3, [pc, #344]	; (8012dd8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8012c80:	635a      	str	r2, [r3, #52]	; 0x34
 8012c82:	e002      	b.n	8012c8a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14e>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8012c84:	4b54      	ldr	r3, [pc, #336]	; (8012dd8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8012c86:	2200      	movs	r2, #0
 8012c88:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 8012c8a:	7fbb      	ldrb	r3, [r7, #30]
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d059      	beq.n	8012d44 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
        {
            if (bitDepth == 16)
 8012c90:	7f7b      	ldrb	r3, [r7, #29]
 8012c92:	2b10      	cmp	r3, #16
 8012c94:	d14a      	bne.n	8012d2c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8012c96:	683b      	ldr	r3, [r7, #0]
 8012c98:	3318      	adds	r3, #24
 8012c9a:	4618      	mov	r0, r3
 8012c9c:	f7ff fdca 	bl	8012834 <_ZNK8touchgfx9colortypecvtEv>
 8012ca0:	4603      	mov	r3, r0
 8012ca2:	12db      	asrs	r3, r3, #11
 8012ca4:	f003 021f 	and.w	r2, r3, #31
 8012ca8:	4613      	mov	r3, r2
 8012caa:	021b      	lsls	r3, r3, #8
 8012cac:	1a9b      	subs	r3, r3, r2
 8012cae:	4a4b      	ldr	r2, [pc, #300]	; (8012ddc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012cb0:	fb82 1203 	smull	r1, r2, r2, r3
 8012cb4:	441a      	add	r2, r3
 8012cb6:	1112      	asrs	r2, r2, #4
 8012cb8:	17db      	asrs	r3, r3, #31
 8012cba:	1ad3      	subs	r3, r2, r3
 8012cbc:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8012cbe:	683b      	ldr	r3, [r7, #0]
 8012cc0:	3318      	adds	r3, #24
 8012cc2:	4618      	mov	r0, r3
 8012cc4:	f7ff fdb6 	bl	8012834 <_ZNK8touchgfx9colortypecvtEv>
 8012cc8:	4603      	mov	r3, r0
 8012cca:	115b      	asrs	r3, r3, #5
 8012ccc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8012cd0:	4613      	mov	r3, r2
 8012cd2:	021b      	lsls	r3, r3, #8
 8012cd4:	1a9b      	subs	r3, r3, r2
 8012cd6:	4a42      	ldr	r2, [pc, #264]	; (8012de0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8012cd8:	fb82 1203 	smull	r1, r2, r2, r3
 8012cdc:	441a      	add	r2, r3
 8012cde:	1152      	asrs	r2, r2, #5
 8012ce0:	17db      	asrs	r3, r3, #31
 8012ce2:	1ad3      	subs	r3, r2, r3
 8012ce4:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8012ce6:	683b      	ldr	r3, [r7, #0]
 8012ce8:	3318      	adds	r3, #24
 8012cea:	4618      	mov	r0, r3
 8012cec:	f7ff fda2 	bl	8012834 <_ZNK8touchgfx9colortypecvtEv>
 8012cf0:	4603      	mov	r3, r0
 8012cf2:	f003 021f 	and.w	r2, r3, #31
 8012cf6:	4613      	mov	r3, r2
 8012cf8:	021b      	lsls	r3, r3, #8
 8012cfa:	1a9b      	subs	r3, r3, r2
 8012cfc:	4a37      	ldr	r2, [pc, #220]	; (8012ddc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012cfe:	fb82 1203 	smull	r1, r2, r2, r3
 8012d02:	441a      	add	r2, r3
 8012d04:	1112      	asrs	r2, r2, #4
 8012d06:	17db      	asrs	r3, r3, #31
 8012d08:	1ad3      	subs	r3, r2, r3
 8012d0a:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 8012d0c:	683b      	ldr	r3, [r7, #0]
 8012d0e:	7f1b      	ldrb	r3, [r3, #28]
 8012d10:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	061a      	lsls	r2, r3, #24
 8012d16:	69bb      	ldr	r3, [r7, #24]
 8012d18:	041b      	lsls	r3, r3, #16
 8012d1a:	431a      	orrs	r2, r3
 8012d1c:	697b      	ldr	r3, [r7, #20]
 8012d1e:	021b      	lsls	r3, r3, #8
 8012d20:	431a      	orrs	r2, r3
 8012d22:	693b      	ldr	r3, [r7, #16]
 8012d24:	4313      	orrs	r3, r2
 8012d26:	4a2c      	ldr	r2, [pc, #176]	; (8012dd8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8012d28:	6353      	str	r3, [r2, #52]	; 0x34
 8012d2a:	e00b      	b.n	8012d44 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 8012d2c:	683b      	ldr	r3, [r7, #0]
 8012d2e:	3318      	adds	r3, #24
 8012d30:	4618      	mov	r0, r3
 8012d32:	f7ff fd73 	bl	801281c <_ZNK8touchgfx9colortype10getColor32Ev>
 8012d36:	4602      	mov	r2, r0
 8012d38:	683b      	ldr	r3, [r7, #0]
 8012d3a:	7f1b      	ldrb	r3, [r3, #28]
 8012d3c:	061b      	lsls	r3, r3, #24
 8012d3e:	4313      	orrs	r3, r2
 8012d40:	4a25      	ldr	r2, [pc, #148]	; (8012dd8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8012d42:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8012d44:	683b      	ldr	r3, [r7, #0]
 8012d46:	8adb      	ldrh	r3, [r3, #22]
 8012d48:	461a      	mov	r2, r3
 8012d4a:	683b      	ldr	r3, [r7, #0]
 8012d4c:	8a1b      	ldrh	r3, [r3, #16]
 8012d4e:	1ad3      	subs	r3, r2, r3
 8012d50:	461a      	mov	r2, r3
 8012d52:	4b21      	ldr	r3, [pc, #132]	; (8012dd8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8012d54:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8012d56:	7f7b      	ldrb	r3, [r7, #29]
 8012d58:	2b10      	cmp	r3, #16
 8012d5a:	d101      	bne.n	8012d60 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>
 8012d5c:	2302      	movs	r3, #2
 8012d5e:	e000      	b.n	8012d62 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x226>
 8012d60:	2301      	movs	r3, #1
 8012d62:	4a1d      	ldr	r2, [pc, #116]	; (8012dd8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8012d64:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8012d66:	2100      	movs	r1, #0
 8012d68:	481b      	ldr	r0, [pc, #108]	; (8012dd8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8012d6a:	f7f1 ff01 	bl	8004b70 <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8012d6e:	2101      	movs	r1, #1
 8012d70:	4819      	ldr	r0, [pc, #100]	; (8012dd8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8012d72:	f7f1 fefd 	bl	8004b70 <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataCopy cache invalidation */

    if (blendingImage || blendingText)
 8012d76:	7ffb      	ldrb	r3, [r7, #31]
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d102      	bne.n	8012d82 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x246>
 8012d7c:	7fbb      	ldrb	r3, [r7, #30]
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	d015      	beq.n	8012dae <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x272>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 8012d82:	683b      	ldr	r3, [r7, #0]
 8012d84:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8012d86:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8012d88:	683b      	ldr	r3, [r7, #0]
 8012d8a:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8012d8c:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8012d8e:	683b      	ldr	r3, [r7, #0]
 8012d90:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8012d92:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8012d94:	683b      	ldr	r3, [r7, #0]
 8012d96:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8012d98:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8012d9a:	683b      	ldr	r3, [r7, #0]
 8012d9c:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8012d9e:	9301      	str	r3, [sp, #4]
 8012da0:	9200      	str	r2, [sp, #0]
 8012da2:	4623      	mov	r3, r4
 8012da4:	4602      	mov	r2, r0
 8012da6:	480c      	ldr	r0, [pc, #48]	; (8012dd8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8012da8:	f7f1 fd05 	bl	80047b6 <HAL_DMA2D_BlendingStart_IT>
 8012dac:	e00f      	b.n	8012dce <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x292>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 8012dae:	683b      	ldr	r3, [r7, #0]
 8012db0:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 8012db2:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 8012db4:	683b      	ldr	r3, [r7, #0]
 8012db6:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 8012db8:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8012dba:	683b      	ldr	r3, [r7, #0]
 8012dbc:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d,
 8012dbe:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 8012dc0:	683b      	ldr	r3, [r7, #0]
 8012dc2:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d,
 8012dc4:	9300      	str	r3, [sp, #0]
 8012dc6:	4603      	mov	r3, r0
 8012dc8:	4803      	ldr	r0, [pc, #12]	; (8012dd8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8012dca:	f7f1 fcc1 	bl	8004750 <HAL_DMA2D_Start_IT>
    }
}
 8012dce:	bf00      	nop
 8012dd0:	372c      	adds	r7, #44	; 0x2c
 8012dd2:	46bd      	mov	sp, r7
 8012dd4:	bd90      	pop	{r4, r7, pc}
 8012dd6:	bf00      	nop
 8012dd8:	2000c35c 	.word	0x2000c35c
 8012ddc:	84210843 	.word	0x84210843
 8012de0:	82082083 	.word	0x82082083

08012de4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 8012de4:	b590      	push	{r4, r7, lr}
 8012de6:	b08d      	sub	sp, #52	; 0x34
 8012de8:	af02      	add	r7, sp, #8
 8012dea:	6078      	str	r0, [r7, #4]
 8012dec:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 8012dee:	f7fb ffd9 	bl	800eda4 <_ZN8touchgfx3HAL3lcdEv>
 8012df2:	4602      	mov	r2, r0
 8012df4:	6813      	ldr	r3, [r2, #0]
 8012df6:	3320      	adds	r3, #32
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	4610      	mov	r0, r2
 8012dfc:	4798      	blx	r3
 8012dfe:	4603      	mov	r3, r0
 8012e00:	77fb      	strb	r3, [r7, #31]
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8012e02:	7ffb      	ldrb	r3, [r7, #31]
 8012e04:	2b10      	cmp	r3, #16
 8012e06:	d101      	bne.n	8012e0c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x28>
 8012e08:	2302      	movs	r3, #2
 8012e0a:	e000      	b.n	8012e0e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2a>
 8012e0c:	2301      	movs	r3, #1
 8012e0e:	61bb      	str	r3, [r7, #24]

    uint32_t color = 0;
 8012e10:	2300      	movs	r3, #0
 8012e12:	623b      	str	r3, [r7, #32]
    if (bitDepth == 16)
 8012e14:	7ffb      	ldrb	r3, [r7, #31]
 8012e16:	2b10      	cmp	r3, #16
 8012e18:	d149      	bne.n	8012eae <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xca>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8012e1a:	683b      	ldr	r3, [r7, #0]
 8012e1c:	3318      	adds	r3, #24
 8012e1e:	4618      	mov	r0, r3
 8012e20:	f7ff fd08 	bl	8012834 <_ZNK8touchgfx9colortypecvtEv>
 8012e24:	4603      	mov	r3, r0
 8012e26:	12db      	asrs	r3, r3, #11
 8012e28:	f003 021f 	and.w	r2, r3, #31
 8012e2c:	4613      	mov	r3, r2
 8012e2e:	021b      	lsls	r3, r3, #8
 8012e30:	1a9b      	subs	r3, r3, r2
 8012e32:	4a69      	ldr	r2, [pc, #420]	; (8012fd8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 8012e34:	fb82 1203 	smull	r1, r2, r2, r3
 8012e38:	441a      	add	r2, r3
 8012e3a:	1112      	asrs	r2, r2, #4
 8012e3c:	17db      	asrs	r3, r3, #31
 8012e3e:	1ad3      	subs	r3, r2, r3
 8012e40:	617b      	str	r3, [r7, #20]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8012e42:	683b      	ldr	r3, [r7, #0]
 8012e44:	3318      	adds	r3, #24
 8012e46:	4618      	mov	r0, r3
 8012e48:	f7ff fcf4 	bl	8012834 <_ZNK8touchgfx9colortypecvtEv>
 8012e4c:	4603      	mov	r3, r0
 8012e4e:	115b      	asrs	r3, r3, #5
 8012e50:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8012e54:	4613      	mov	r3, r2
 8012e56:	021b      	lsls	r3, r3, #8
 8012e58:	1a9b      	subs	r3, r3, r2
 8012e5a:	4a60      	ldr	r2, [pc, #384]	; (8012fdc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f8>)
 8012e5c:	fb82 1203 	smull	r1, r2, r2, r3
 8012e60:	441a      	add	r2, r3
 8012e62:	1152      	asrs	r2, r2, #5
 8012e64:	17db      	asrs	r3, r3, #31
 8012e66:	1ad3      	subs	r3, r2, r3
 8012e68:	613b      	str	r3, [r7, #16]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8012e6a:	683b      	ldr	r3, [r7, #0]
 8012e6c:	3318      	adds	r3, #24
 8012e6e:	4618      	mov	r0, r3
 8012e70:	f7ff fce0 	bl	8012834 <_ZNK8touchgfx9colortypecvtEv>
 8012e74:	4603      	mov	r3, r0
 8012e76:	f003 021f 	and.w	r2, r3, #31
 8012e7a:	4613      	mov	r3, r2
 8012e7c:	021b      	lsls	r3, r3, #8
 8012e7e:	1a9b      	subs	r3, r3, r2
 8012e80:	4a55      	ldr	r2, [pc, #340]	; (8012fd8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 8012e82:	fb82 1203 	smull	r1, r2, r2, r3
 8012e86:	441a      	add	r2, r3
 8012e88:	1112      	asrs	r2, r2, #4
 8012e8a:	17db      	asrs	r3, r3, #31
 8012e8c:	1ad3      	subs	r3, r2, r3
 8012e8e:	60fb      	str	r3, [r7, #12]
        uint32_t alpha = blitOp.alpha;
 8012e90:	683b      	ldr	r3, [r7, #0]
 8012e92:	7f1b      	ldrb	r3, [r3, #28]
 8012e94:	60bb      	str	r3, [r7, #8]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8012e96:	68bb      	ldr	r3, [r7, #8]
 8012e98:	061a      	lsls	r2, r3, #24
 8012e9a:	697b      	ldr	r3, [r7, #20]
 8012e9c:	041b      	lsls	r3, r3, #16
 8012e9e:	431a      	orrs	r2, r3
 8012ea0:	693b      	ldr	r3, [r7, #16]
 8012ea2:	021b      	lsls	r3, r3, #8
 8012ea4:	4313      	orrs	r3, r2
 8012ea6:	68fa      	ldr	r2, [r7, #12]
 8012ea8:	4313      	orrs	r3, r2
 8012eaa:	623b      	str	r3, [r7, #32]
 8012eac:	e00b      	b.n	8012ec6 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe2>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 8012eae:	683b      	ldr	r3, [r7, #0]
 8012eb0:	7f1b      	ldrb	r3, [r3, #28]
 8012eb2:	061b      	lsls	r3, r3, #24
 8012eb4:	461c      	mov	r4, r3
 8012eb6:	683b      	ldr	r3, [r7, #0]
 8012eb8:	3318      	adds	r3, #24
 8012eba:	4618      	mov	r0, r3
 8012ebc:	f7ff fcae 	bl	801281c <_ZNK8touchgfx9colortype10getColor32Ev>
 8012ec0:	4603      	mov	r3, r0
 8012ec2:	4323      	orrs	r3, r4
 8012ec4:	623b      	str	r3, [r7, #32]
    }

    switch (blitOp.operation)
 8012ec6:	683b      	ldr	r3, [r7, #0]
 8012ec8:	681b      	ldr	r3, [r3, #0]
 8012eca:	2b08      	cmp	r3, #8
 8012ecc:	d103      	bne.n	8012ed6 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf2>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8012ece:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012ed2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8012ed4:	e003      	b.n	8012ede <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfa>
    default:
        dma2dTransferMode = DMA2D_R2M;
 8012ed6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8012eda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8012edc:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8012ede:	4a40      	ldr	r2, [pc, #256]	; (8012fe0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8012ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ee2:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8012ee4:	7ffb      	ldrb	r3, [r7, #31]
 8012ee6:	2b10      	cmp	r3, #16
 8012ee8:	d101      	bne.n	8012eee <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10a>
 8012eea:	2302      	movs	r3, #2
 8012eec:	e000      	b.n	8012ef0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>
 8012eee:	2301      	movs	r3, #1
 8012ef0:	4a3b      	ldr	r2, [pc, #236]	; (8012fe0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8012ef2:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8012ef4:	683b      	ldr	r3, [r7, #0]
 8012ef6:	8adb      	ldrh	r3, [r3, #22]
 8012ef8:	461a      	mov	r2, r3
 8012efa:	683b      	ldr	r3, [r7, #0]
 8012efc:	8a1b      	ldrh	r3, [r3, #16]
 8012efe:	1ad3      	subs	r3, r2, r3
 8012f00:	461a      	mov	r2, r3
 8012f02:	4b37      	ldr	r3, [pc, #220]	; (8012fe0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8012f04:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8012f06:	7ffb      	ldrb	r3, [r7, #31]
 8012f08:	2b10      	cmp	r3, #16
 8012f0a:	d101      	bne.n	8012f10 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12c>
 8012f0c:	2202      	movs	r2, #2
 8012f0e:	e000      	b.n	8012f12 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12e>
 8012f10:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8012f12:	683b      	ldr	r3, [r7, #0]
 8012f14:	8adb      	ldrh	r3, [r3, #22]
 8012f16:	4619      	mov	r1, r3
 8012f18:	683b      	ldr	r3, [r7, #0]
 8012f1a:	8a1b      	ldrh	r3, [r3, #16]
 8012f1c:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8012f1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012f20:	482f      	ldr	r0, [pc, #188]	; (8012fe0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8012f22:	f7ff fd29 	bl	8012978 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 8012f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012f2c:	d11e      	bne.n	8012f6c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x188>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8012f2e:	4b2c      	ldr	r3, [pc, #176]	; (8012fe0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8012f30:	2201      	movs	r2, #1
 8012f32:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 8012f34:	4a2a      	ldr	r2, [pc, #168]	; (8012fe0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8012f36:	6a3b      	ldr	r3, [r7, #32]
 8012f38:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 8012f3a:	4b29      	ldr	r3, [pc, #164]	; (8012fe0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8012f3c:	2209      	movs	r2, #9
 8012f3e:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8012f40:	683b      	ldr	r3, [r7, #0]
 8012f42:	8adb      	ldrh	r3, [r3, #22]
 8012f44:	461a      	mov	r2, r3
 8012f46:	683b      	ldr	r3, [r7, #0]
 8012f48:	8a1b      	ldrh	r3, [r3, #16]
 8012f4a:	1ad3      	subs	r3, r2, r3
 8012f4c:	461a      	mov	r2, r3
 8012f4e:	4b24      	ldr	r3, [pc, #144]	; (8012fe0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8012f50:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8012f52:	7ffb      	ldrb	r3, [r7, #31]
 8012f54:	2b10      	cmp	r3, #16
 8012f56:	d101      	bne.n	8012f5c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x178>
 8012f58:	2302      	movs	r3, #2
 8012f5a:	e000      	b.n	8012f5e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x17a>
 8012f5c:	2301      	movs	r3, #1
 8012f5e:	4a20      	ldr	r2, [pc, #128]	; (8012fe0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8012f60:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8012f62:	2100      	movs	r1, #0
 8012f64:	481e      	ldr	r0, [pc, #120]	; (8012fe0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8012f66:	f7f1 fe03 	bl	8004b70 <HAL_DMA2D_ConfigLayer>
 8012f6a:	e005      	b.n	8012f78 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x194>
    } else {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8012f6c:	4a1c      	ldr	r2, [pc, #112]	; (8012fe0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8012f6e:	69bb      	ldr	r3, [r7, #24]
 8012f70:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 8012f72:	4b1b      	ldr	r3, [pc, #108]	; (8012fe0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8012f74:	2200      	movs	r2, #0
 8012f76:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8012f78:	2101      	movs	r1, #1
 8012f7a:	4819      	ldr	r0, [pc, #100]	; (8012fe0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8012f7c:	f7f1 fdf8 	bl	8004b70 <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataFill cache invalidation */

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 8012f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012f86:	d115      	bne.n	8012fb4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1d0>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 8012f88:	683b      	ldr	r3, [r7, #0]
 8012f8a:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8012f8c:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8012f8e:	683b      	ldr	r3, [r7, #0]
 8012f90:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8012f92:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8012f94:	683b      	ldr	r3, [r7, #0]
 8012f96:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8012f98:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8012f9a:	683b      	ldr	r3, [r7, #0]
 8012f9c:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8012f9e:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8012fa0:	683b      	ldr	r3, [r7, #0]
 8012fa2:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8012fa4:	9301      	str	r3, [sp, #4]
 8012fa6:	9200      	str	r2, [sp, #0]
 8012fa8:	4623      	mov	r3, r4
 8012faa:	4602      	mov	r2, r0
 8012fac:	480c      	ldr	r0, [pc, #48]	; (8012fe0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8012fae:	f7f1 fc02 	bl	80047b6 <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 8012fb2:	e00d      	b.n	8012fd0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1ec>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8012fb4:	683b      	ldr	r3, [r7, #0]
 8012fb6:	68db      	ldr	r3, [r3, #12]
 8012fb8:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8012fba:	683b      	ldr	r3, [r7, #0]
 8012fbc:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8012fbe:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 8012fc0:	683b      	ldr	r3, [r7, #0]
 8012fc2:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8012fc4:	9300      	str	r3, [sp, #0]
 8012fc6:	460b      	mov	r3, r1
 8012fc8:	6a39      	ldr	r1, [r7, #32]
 8012fca:	4805      	ldr	r0, [pc, #20]	; (8012fe0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8012fcc:	f7f1 fbc0 	bl	8004750 <HAL_DMA2D_Start_IT>
}
 8012fd0:	bf00      	nop
 8012fd2:	372c      	adds	r7, #44	; 0x2c
 8012fd4:	46bd      	mov	sp, r7
 8012fd6:	bd90      	pop	{r4, r7, pc}
 8012fd8:	84210843 	.word	0x84210843
 8012fdc:	82082083 	.word	0x82082083
 8012fe0:	2000c35c 	.word	0x2000c35c

08012fe4 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8012fe4:	b580      	push	{r7, lr}
 8012fe6:	b082      	sub	sp, #8
 8012fe8:	af00      	add	r7, sp, #0
 8012fea:	6078      	str	r0, [r7, #4]
 8012fec:	4a05      	ldr	r2, [pc, #20]	; (8013004 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	601a      	str	r2, [r3, #0]
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	4618      	mov	r0, r3
 8012ff6:	f7ff fc2b 	bl	8012850 <_ZN8touchgfx9DMA_QueueD1Ev>
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	4618      	mov	r0, r3
 8012ffe:	3708      	adds	r7, #8
 8013000:	46bd      	mov	sp, r7
 8013002:	bd80      	pop	{r7, pc}
 8013004:	08026190 	.word	0x08026190

08013008 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8013008:	b580      	push	{r7, lr}
 801300a:	b082      	sub	sp, #8
 801300c:	af00      	add	r7, sp, #0
 801300e:	6078      	str	r0, [r7, #4]
 8013010:	6878      	ldr	r0, [r7, #4]
 8013012:	f7ff ffe7 	bl	8012fe4 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8013016:	2114      	movs	r1, #20
 8013018:	6878      	ldr	r0, [r7, #4]
 801301a:	f010 f9e2 	bl	80233e2 <_ZdlPvj>
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	4618      	mov	r0, r3
 8013022:	3708      	adds	r7, #8
 8013024:	46bd      	mov	sp, r7
 8013026:	bd80      	pop	{r7, pc}

08013028 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 8013028:	b480      	push	{r7}
 801302a:	b083      	sub	sp, #12
 801302c:	af00      	add	r7, sp, #0
 801302e:	6078      	str	r0, [r7, #4]
        texts = t;
 8013030:	4a04      	ldr	r2, [pc, #16]	; (8013044 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	6013      	str	r3, [r2, #0]
    }
 8013036:	bf00      	nop
 8013038:	370c      	adds	r7, #12
 801303a:	46bd      	mov	sp, r7
 801303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013040:	4770      	bx	lr
 8013042:	bf00      	nop
 8013044:	2000bb74 	.word	0x2000bb74

08013048 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8013048:	b480      	push	{r7}
 801304a:	b085      	sub	sp, #20
 801304c:	af00      	add	r7, sp, #0
 801304e:	60f8      	str	r0, [r7, #12]
 8013050:	60b9      	str	r1, [r7, #8]
 8013052:	607a      	str	r2, [r7, #4]
 8013054:	603b      	str	r3, [r7, #0]
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app) : presenterStorage(pres),
        screenStorage(scr),
        transitionStorage(tra),
        frontendApplication(app)
 8013056:	4a0b      	ldr	r2, [pc, #44]	; (8013084 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8013058:	68fb      	ldr	r3, [r7, #12]
 801305a:	601a      	str	r2, [r3, #0]
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	68ba      	ldr	r2, [r7, #8]
 8013060:	605a      	str	r2, [r3, #4]
 8013062:	68fb      	ldr	r3, [r7, #12]
 8013064:	687a      	ldr	r2, [r7, #4]
 8013066:	609a      	str	r2, [r3, #8]
 8013068:	68fb      	ldr	r3, [r7, #12]
 801306a:	683a      	ldr	r2, [r7, #0]
 801306c:	60da      	str	r2, [r3, #12]
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	69ba      	ldr	r2, [r7, #24]
 8013072:	611a      	str	r2, [r3, #16]
    {
    }
 8013074:	68fb      	ldr	r3, [r7, #12]
 8013076:	4618      	mov	r0, r3
 8013078:	3714      	adds	r7, #20
 801307a:	46bd      	mov	sp, r7
 801307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013080:	4770      	bx	lr
 8013082:	bf00      	nop
 8013084:	08025398 	.word	0x08025398

08013088 <_ZN8touchgfx7MVPHeapD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPHeap()
 8013088:	b480      	push	{r7}
 801308a:	b083      	sub	sp, #12
 801308c:	af00      	add	r7, sp, #0
 801308e:	6078      	str	r0, [r7, #4]
    {
 8013090:	4a04      	ldr	r2, [pc, #16]	; (80130a4 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	601a      	str	r2, [r3, #0]
    }
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	4618      	mov	r0, r3
 801309a:	370c      	adds	r7, #12
 801309c:	46bd      	mov	sp, r7
 801309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130a2:	4770      	bx	lr
 80130a4:	08025398 	.word	0x08025398

080130a8 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 80130a8:	b580      	push	{r7, lr}
 80130aa:	b082      	sub	sp, #8
 80130ac:	af00      	add	r7, sp, #0
 80130ae:	6078      	str	r0, [r7, #4]
    }
 80130b0:	6878      	ldr	r0, [r7, #4]
 80130b2:	f7ff ffe9 	bl	8013088 <_ZN8touchgfx7MVPHeapD1Ev>
 80130b6:	2114      	movs	r1, #20
 80130b8:	6878      	ldr	r0, [r7, #4]
 80130ba:	f010 f992 	bl	80233e2 <_ZdlPvj>
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	4618      	mov	r0, r3
 80130c2:	3708      	adds	r7, #8
 80130c4:	46bd      	mov	sp, r7
 80130c6:	bd80      	pop	{r7, pc}

080130c8 <_ZN8touchgfx3LCDD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~LCD()
 80130c8:	b480      	push	{r7}
 80130ca:	b083      	sub	sp, #12
 80130cc:	af00      	add	r7, sp, #0
 80130ce:	6078      	str	r0, [r7, #4]
    {
 80130d0:	4a04      	ldr	r2, [pc, #16]	; (80130e4 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	601a      	str	r2, [r3, #0]
    }
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	4618      	mov	r0, r3
 80130da:	370c      	adds	r7, #12
 80130dc:	46bd      	mov	sp, r7
 80130de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130e2:	4770      	bx	lr
 80130e4:	08026a58 	.word	0x08026a58

080130e8 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 80130e8:	b580      	push	{r7, lr}
 80130ea:	b082      	sub	sp, #8
 80130ec:	af00      	add	r7, sp, #0
 80130ee:	6078      	str	r0, [r7, #4]
    }
 80130f0:	6878      	ldr	r0, [r7, #4]
 80130f2:	f7ff ffe9 	bl	80130c8 <_ZN8touchgfx3LCDD1Ev>
 80130f6:	2108      	movs	r1, #8
 80130f8:	6878      	ldr	r0, [r7, #4]
 80130fa:	f010 f972 	bl	80233e2 <_ZdlPvj>
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	4618      	mov	r0, r3
 8013102:	3708      	adds	r7, #8
 8013104:	46bd      	mov	sp, r7
 8013106:	bd80      	pop	{r7, pc}

08013108 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
     *
     *        Defines the state of a drag.
     */
    struct DragState
    {
        DragState() : startX(0),
 8013108:	b480      	push	{r7}
 801310a:	b083      	sub	sp, #12
 801310c:	af00      	add	r7, sp, #0
 801310e:	6078      	str	r0, [r7, #4]
            downX(0),
            downY(0),
            tickCount(0),
            velocityX(0),
            velocityY(0),
            inProgress(false)
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	2200      	movs	r2, #0
 8013114:	801a      	strh	r2, [r3, #0]
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	2200      	movs	r2, #0
 801311a:	805a      	strh	r2, [r3, #2]
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	2200      	movs	r2, #0
 8013120:	809a      	strh	r2, [r3, #4]
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	2200      	movs	r2, #0
 8013126:	80da      	strh	r2, [r3, #6]
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	2200      	movs	r2, #0
 801312c:	811a      	strh	r2, [r3, #8]
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	2200      	movs	r2, #0
 8013132:	815a      	strh	r2, [r3, #10]
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	2200      	movs	r2, #0
 8013138:	819a      	strh	r2, [r3, #12]
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	2200      	movs	r2, #0
 801313e:	739a      	strb	r2, [r3, #14]
        {
        }
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	4618      	mov	r0, r3
 8013144:	370c      	adds	r7, #12
 8013146:	46bd      	mov	sp, r7
 8013148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801314c:	4770      	bx	lr

0801314e <_ZN8touchgfx8GesturesC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Does nothing.
     */
    Gestures() : listener(0), dragThresholdValue(0) { }
 801314e:	b580      	push	{r7, lr}
 8013150:	b082      	sub	sp, #8
 8013152:	af00      	add	r7, sp, #0
 8013154:	6078      	str	r0, [r7, #4]
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	4618      	mov	r0, r3
 801315a:	f7ff ffd5 	bl	8013108 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	2200      	movs	r2, #0
 8013162:	611a      	str	r2, [r3, #16]
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	2200      	movs	r2, #0
 8013168:	829a      	strh	r2, [r3, #20]
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	4618      	mov	r0, r3
 801316e:	3708      	adds	r7, #8
 8013170:	46bd      	mov	sp, r7
 8013172:	bd80      	pop	{r7, pc}

08013174 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height) :
 8013174:	b580      	push	{r7, lr}
 8013176:	b084      	sub	sp, #16
 8013178:	af00      	add	r7, sp, #0
 801317a:	60f8      	str	r0, [r7, #12]
 801317c:	60b9      	str	r1, [r7, #8]
 801317e:	607a      	str	r2, [r7, #4]
 8013180:	603b      	str	r3, [r7, #0]
        displayOrientationChangeRequested(false)
 8013182:	4a44      	ldr	r2, [pc, #272]	; (8013294 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x120>)
 8013184:	68fb      	ldr	r3, [r7, #12]
 8013186:	601a      	str	r2, [r3, #0]
 8013188:	68fb      	ldr	r3, [r7, #12]
 801318a:	68ba      	ldr	r2, [r7, #8]
 801318c:	605a      	str	r2, [r3, #4]
 801318e:	68fb      	ldr	r3, [r7, #12]
 8013190:	687a      	ldr	r2, [r7, #4]
 8013192:	609a      	str	r2, [r3, #8]
 8013194:	68fb      	ldr	r3, [r7, #12]
 8013196:	683a      	ldr	r2, [r7, #0]
 8013198:	60da      	str	r2, [r3, #12]
 801319a:	68fb      	ldr	r3, [r7, #12]
 801319c:	2200      	movs	r2, #0
 801319e:	611a      	str	r2, [r3, #16]
 80131a0:	68fb      	ldr	r3, [r7, #12]
 80131a2:	2200      	movs	r2, #0
 80131a4:	615a      	str	r2, [r3, #20]
 80131a6:	68fb      	ldr	r3, [r7, #12]
 80131a8:	2200      	movs	r2, #0
 80131aa:	619a      	str	r2, [r3, #24]
 80131ac:	68fb      	ldr	r3, [r7, #12]
 80131ae:	331c      	adds	r3, #28
 80131b0:	4618      	mov	r0, r3
 80131b2:	f7ff ffcc 	bl	801314e <_ZN8touchgfx8GesturesC1Ev>
 80131b6:	68fb      	ldr	r3, [r7, #12]
 80131b8:	2200      	movs	r2, #0
 80131ba:	639a      	str	r2, [r3, #56]	; 0x38
 80131bc:	68fb      	ldr	r3, [r7, #12]
 80131be:	2200      	movs	r2, #0
 80131c0:	63da      	str	r2, [r3, #60]	; 0x3c
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	2200      	movs	r2, #0
 80131c6:	641a      	str	r2, [r3, #64]	; 0x40
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	2200      	movs	r2, #0
 80131cc:	645a      	str	r2, [r3, #68]	; 0x44
 80131ce:	68fb      	ldr	r3, [r7, #12]
 80131d0:	2200      	movs	r2, #0
 80131d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 80131d6:	68fb      	ldr	r3, [r7, #12]
 80131d8:	2201      	movs	r2, #1
 80131da:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 80131de:	68fb      	ldr	r3, [r7, #12]
 80131e0:	2201      	movs	r2, #1
 80131e2:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 80131e6:	68fb      	ldr	r3, [r7, #12]
 80131e8:	2200      	movs	r2, #0
 80131ea:	64da      	str	r2, [r3, #76]	; 0x4c
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	3350      	adds	r3, #80	; 0x50
 80131f0:	4618      	mov	r0, r3
 80131f2:	f7fc fa06 	bl	800f602 <_ZN8touchgfx4RectC1Ev>
 80131f6:	68fb      	ldr	r3, [r7, #12]
 80131f8:	2201      	movs	r2, #1
 80131fa:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80131fe:	68fb      	ldr	r3, [r7, #12]
 8013200:	2200      	movs	r2, #0
 8013202:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8013206:	68fb      	ldr	r3, [r7, #12]
 8013208:	2200      	movs	r2, #0
 801320a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 801320e:	68fb      	ldr	r3, [r7, #12]
 8013210:	2201      	movs	r2, #1
 8013212:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8013216:	68fb      	ldr	r3, [r7, #12]
 8013218:	2200      	movs	r2, #0
 801321a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	2200      	movs	r2, #0
 8013222:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8013226:	68fb      	ldr	r3, [r7, #12]
 8013228:	2200      	movs	r2, #0
 801322a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	2200      	movs	r2, #0
 8013232:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8013236:	68fb      	ldr	r3, [r7, #12]
 8013238:	2200      	movs	r2, #0
 801323a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 801323e:	68fb      	ldr	r3, [r7, #12]
 8013240:	2200      	movs	r2, #0
 8013242:	671a      	str	r2, [r3, #112]	; 0x70
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	2200      	movs	r2, #0
 8013248:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        instance = this;
 801324c:	4a12      	ldr	r2, [pc, #72]	; (8013298 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x124>)
 801324e:	68fb      	ldr	r3, [r7, #12]
 8013250:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 8013252:	4a12      	ldr	r2, [pc, #72]	; (801329c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 8013254:	8b3b      	ldrh	r3, [r7, #24]
 8013256:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 8013258:	4a11      	ldr	r2, [pc, #68]	; (80132a0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 801325a:	8bbb      	ldrh	r3, [r7, #28]
 801325c:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 801325e:	4b11      	ldr	r3, [pc, #68]	; (80132a4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x130>)
 8013260:	2200      	movs	r2, #0
 8013262:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8013264:	4b0d      	ldr	r3, [pc, #52]	; (801329c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 8013266:	881a      	ldrh	r2, [r3, #0]
 8013268:	4b0f      	ldr	r3, [pc, #60]	; (80132a8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x134>)
 801326a:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 801326c:	4b0c      	ldr	r3, [pc, #48]	; (80132a0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 801326e:	881a      	ldrh	r2, [r3, #0]
 8013270:	4b0e      	ldr	r3, [pc, #56]	; (80132ac <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 8013272:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8013274:	8b3a      	ldrh	r2, [r7, #24]
 8013276:	8bbb      	ldrh	r3, [r7, #28]
 8013278:	429a      	cmp	r2, r3
 801327a:	d301      	bcc.n	8013280 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10c>
 801327c:	2200      	movs	r2, #0
 801327e:	e000      	b.n	8013282 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10e>
 8013280:	2201      	movs	r2, #1
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8013288:	68fb      	ldr	r3, [r7, #12]
 801328a:	4618      	mov	r0, r3
 801328c:	3710      	adds	r7, #16
 801328e:	46bd      	mov	sp, r7
 8013290:	bd80      	pop	{r7, pc}
 8013292:	bf00      	nop
 8013294:	08025cfc 	.word	0x08025cfc
 8013298:	2000bad8 	.word	0x2000bad8
 801329c:	2000bacc 	.word	0x2000bacc
 80132a0:	2000bace 	.word	0x2000bace
 80132a4:	2000bad0 	.word	0x2000bad0
 80132a8:	2000bad2 	.word	0x2000bad2
 80132ac:	2000bad4 	.word	0x2000bad4

080132b0 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 80132b0:	b580      	push	{r7, lr}
 80132b2:	b082      	sub	sp, #8
 80132b4:	af00      	add	r7, sp, #0
 80132b6:	6078      	str	r0, [r7, #4]
 80132b8:	6039      	str	r1, [r7, #0]
    {
        app.gotoMainScreenNoTransition();
 80132ba:	683b      	ldr	r3, [r7, #0]
 80132bc:	4618      	mov	r0, r3
 80132be:	f7fb ff95 	bl	800f1ec <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>
    }
 80132c2:	bf00      	nop
 80132c4:	3708      	adds	r7, #8
 80132c6:	46bd      	mov	sp, r7
 80132c8:	bd80      	pop	{r7, pc}
	...

080132cc <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 80132cc:	b580      	push	{r7, lr}
 80132ce:	b086      	sub	sp, #24
 80132d0:	af02      	add	r7, sp, #8
 80132d2:	60f8      	str	r0, [r7, #12]
 80132d4:	60b9      	str	r1, [r7, #8]
 80132d6:	607a      	str	r2, [r7, #4]
 80132d8:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 80132da:	68f8      	ldr	r0, [r7, #12]
 80132dc:	69bb      	ldr	r3, [r7, #24]
 80132de:	9300      	str	r3, [sp, #0]
 80132e0:	683b      	ldr	r3, [r7, #0]
 80132e2:	687a      	ldr	r2, [r7, #4]
 80132e4:	68b9      	ldr	r1, [r7, #8]
 80132e6:	f7ff feaf 	bl	8013048 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 80132ea:	4a04      	ldr	r2, [pc, #16]	; (80132fc <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 80132ec:	68fb      	ldr	r3, [r7, #12]
 80132ee:	601a      	str	r2, [r3, #0]
    {

    }
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	4618      	mov	r0, r3
 80132f4:	3710      	adds	r7, #16
 80132f6:	46bd      	mov	sp, r7
 80132f8:	bd80      	pop	{r7, pc}
 80132fa:	bf00      	nop
 80132fc:	08025384 	.word	0x08025384

08013300 <__tcf_0>:
            > > CombinedTransitionTypes;
    typedef meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8013300:	b580      	push	{r7, lr}
 8013302:	af00      	add	r7, sp, #0
 8013304:	4801      	ldr	r0, [pc, #4]	; (801330c <__tcf_0+0xc>)
 8013306:	f000 f9dd 	bl	80136c4 <_ZN12FrontendHeapD1Ev>
 801330a:	bd80      	pop	{r7, pc}
 801330c:	20008604 	.word	0x20008604

08013310 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8013310:	b580      	push	{r7, lr}
 8013312:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8013314:	4b08      	ldr	r3, [pc, #32]	; (8013338 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 8013316:	681b      	ldr	r3, [r3, #0]
 8013318:	f003 0301 	and.w	r3, r3, #1
 801331c:	2b00      	cmp	r3, #0
 801331e:	d108      	bne.n	8013332 <_ZN12FrontendHeap11getInstanceEv+0x22>
 8013320:	4806      	ldr	r0, [pc, #24]	; (801333c <_ZN12FrontendHeap11getInstanceEv+0x2c>)
 8013322:	f000 f831 	bl	8013388 <_ZN12FrontendHeapC1Ev>
 8013326:	4b04      	ldr	r3, [pc, #16]	; (8013338 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 8013328:	2201      	movs	r2, #1
 801332a:	601a      	str	r2, [r3, #0]
 801332c:	4804      	ldr	r0, [pc, #16]	; (8013340 <_ZN12FrontendHeap11getInstanceEv+0x30>)
 801332e:	f010 f8a1 	bl	8023474 <atexit>
        return instance;
 8013332:	4b02      	ldr	r3, [pc, #8]	; (801333c <_ZN12FrontendHeap11getInstanceEv+0x2c>)
    }
 8013334:	4618      	mov	r0, r3
 8013336:	bd80      	pop	{r7, pc}
 8013338:	2000adcc 	.word	0x2000adcc
 801333c:	20008604 	.word	0x20008604
 8013340:	08013301 	.word	0x08013301

08013344 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8013344:	b580      	push	{r7, lr}
 8013346:	b082      	sub	sp, #8
 8013348:	af00      	add	r7, sp, #0
 801334a:	6078      	str	r0, [r7, #4]
 801334c:	4a05      	ldr	r2, [pc, #20]	; (8013364 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	601a      	str	r2, [r3, #0]
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	4618      	mov	r0, r3
 8013356:	f7ff fe97 	bl	8013088 <_ZN8touchgfx7MVPHeapD1Ev>
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	4618      	mov	r0, r3
 801335e:	3708      	adds	r7, #8
 8013360:	46bd      	mov	sp, r7
 8013362:	bd80      	pop	{r7, pc}
 8013364:	08025384 	.word	0x08025384

08013368 <_ZN16FrontendHeapBaseD0Ev>:
 8013368:	b580      	push	{r7, lr}
 801336a:	b082      	sub	sp, #8
 801336c:	af00      	add	r7, sp, #0
 801336e:	6078      	str	r0, [r7, #4]
 8013370:	6878      	ldr	r0, [r7, #4]
 8013372:	f7ff ffe7 	bl	8013344 <_ZN16FrontendHeapBaseD1Ev>
 8013376:	2114      	movs	r1, #20
 8013378:	6878      	ldr	r0, [r7, #4]
 801337a:	f010 f832 	bl	80233e2 <_ZdlPvj>
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	4618      	mov	r0, r3
 8013382:	3708      	adds	r7, #8
 8013384:	46bd      	mov	sp, r7
 8013386:	bd80      	pop	{r7, pc}

08013388 <_ZN12FrontendHeapC1Ev>:
    Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8013388:	b5b0      	push	{r4, r5, r7, lr}
 801338a:	b084      	sub	sp, #16
 801338c:	af02      	add	r7, sp, #8
 801338e:	6078      	str	r0, [r7, #4]
        app(model, *this)
 8013390:	6878      	ldr	r0, [r7, #4]
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	f103 0414 	add.w	r4, r3, #20
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	f242 6260 	movw	r2, #9824	; 0x2660
 80133a4:	441a      	add	r2, r3
 80133a6:	6879      	ldr	r1, [r7, #4]
 80133a8:	f242 6374 	movw	r3, #9844	; 0x2674
 80133ac:	440b      	add	r3, r1
 80133ae:	9300      	str	r3, [sp, #0]
 80133b0:	4613      	mov	r3, r2
 80133b2:	462a      	mov	r2, r5
 80133b4:	4621      	mov	r1, r4
 80133b6:	f7ff ff89 	bl	80132cc <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 80133ba:	4a1a      	ldr	r2, [pc, #104]	; (8013424 <_ZN12FrontendHeapC1Ev+0x9c>)
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	601a      	str	r2, [r3, #0]
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	3314      	adds	r3, #20
 80133c4:	4618      	mov	r0, r3
 80133c6:	f000 f8df 	bl	8013588 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	332c      	adds	r3, #44	; 0x2c
 80133ce:	4618      	mov	r0, r3
 80133d0:	f000 f90e 	bl	80135f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80133d4:	687a      	ldr	r2, [r7, #4]
 80133d6:	f242 6360 	movw	r3, #9824	; 0x2660
 80133da:	4413      	add	r3, r2
 80133dc:	4618      	mov	r0, r3
 80133de:	f000 f93d 	bl	801365c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80133e2:	687a      	ldr	r2, [r7, #4]
 80133e4:	f242 6374 	movw	r3, #9844	; 0x2674
 80133e8:	4413      	add	r3, r2
 80133ea:	687a      	ldr	r2, [r7, #4]
 80133ec:	f242 71c4 	movw	r1, #10180	; 0x27c4
 80133f0:	4411      	add	r1, r2
 80133f2:	687a      	ldr	r2, [r7, #4]
 80133f4:	4618      	mov	r0, r3
 80133f6:	f7fe fbb9 	bl	8011b6c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 80133fa:	687a      	ldr	r2, [r7, #4]
 80133fc:	f242 73c4 	movw	r3, #10180	; 0x27c4
 8013400:	4413      	add	r3, r2
 8013402:	4618      	mov	r0, r3
 8013404:	f7fe fde0 	bl	8011fc8 <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 8013408:	6878      	ldr	r0, [r7, #4]
 801340a:	687a      	ldr	r2, [r7, #4]
 801340c:	f242 6374 	movw	r3, #9844	; 0x2674
 8013410:	4413      	add	r3, r2
 8013412:	4619      	mov	r1, r3
 8013414:	f7ff ff4c 	bl	80132b0 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	4618      	mov	r0, r3
 801341c:	3708      	adds	r7, #8
 801341e:	46bd      	mov	sp, r7
 8013420:	bdb0      	pop	{r4, r5, r7, pc}
 8013422:	bf00      	nop
 8013424:	080252d4 	.word	0x080252d4

08013428 <_ZN8touchgfx8LCD24bppD1Ev>:
class LCD24bpp : public LCD
{
public:
    LCD24bpp();

    virtual ~LCD24bpp()
 8013428:	b580      	push	{r7, lr}
 801342a:	b082      	sub	sp, #8
 801342c:	af00      	add	r7, sp, #0
 801342e:	6078      	str	r0, [r7, #4]
    {
 8013430:	4a05      	ldr	r2, [pc, #20]	; (8013448 <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	601a      	str	r2, [r3, #0]
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	4618      	mov	r0, r3
 801343a:	f7ff fe45 	bl	80130c8 <_ZN8touchgfx3LCDD1Ev>
    }
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	4618      	mov	r0, r3
 8013442:	3708      	adds	r7, #8
 8013444:	46bd      	mov	sp, r7
 8013446:	bd80      	pop	{r7, pc}
 8013448:	08027e70 	.word	0x08027e70

0801344c <_ZN8touchgfx8LCD24bppD0Ev>:
    virtual ~LCD24bpp()
 801344c:	b580      	push	{r7, lr}
 801344e:	b082      	sub	sp, #8
 8013450:	af00      	add	r7, sp, #0
 8013452:	6078      	str	r0, [r7, #4]
    }
 8013454:	6878      	ldr	r0, [r7, #4]
 8013456:	f7ff ffe7 	bl	8013428 <_ZN8touchgfx8LCD24bppD1Ev>
 801345a:	2158      	movs	r1, #88	; 0x58
 801345c:	6878      	ldr	r0, [r7, #4]
 801345e:	f00f ffc0 	bl	80233e2 <_ZdlPvj>
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	4618      	mov	r0, r3
 8013466:	3708      	adds	r7, #8
 8013468:	46bd      	mov	sp, r7
 801346a:	bd80      	pop	{r7, pc}

0801346c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 801346c:	b580      	push	{r7, lr}
 801346e:	b086      	sub	sp, #24
 8013470:	af02      	add	r7, sp, #8
 8013472:	60f8      	str	r0, [r7, #12]
 8013474:	60b9      	str	r1, [r7, #8]
 8013476:	607a      	str	r2, [r7, #4]
 8013478:	603b      	str	r3, [r7, #0]
 801347a:	68f8      	ldr	r0, [r7, #12]
 801347c:	8bbb      	ldrh	r3, [r7, #28]
 801347e:	9301      	str	r3, [sp, #4]
 8013480:	8b3b      	ldrh	r3, [r7, #24]
 8013482:	9300      	str	r3, [sp, #0]
 8013484:	683b      	ldr	r3, [r7, #0]
 8013486:	687a      	ldr	r2, [r7, #4]
 8013488:	68b9      	ldr	r1, [r7, #8]
 801348a:	f7ff fe73 	bl	8013174 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 801348e:	4a04      	ldr	r2, [pc, #16]	; (80134a0 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8013490:	68fb      	ldr	r3, [r7, #12]
 8013492:	601a      	str	r2, [r3, #0]
    }
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	4618      	mov	r0, r3
 8013498:	3710      	adds	r7, #16
 801349a:	46bd      	mov	sp, r7
 801349c:	bd80      	pop	{r7, pc}
 801349e:	bf00      	nop
 80134a0:	080253a8 	.word	0x080253a8

080134a4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80134a4:	b580      	push	{r7, lr}
 80134a6:	b086      	sub	sp, #24
 80134a8:	af02      	add	r7, sp, #8
 80134aa:	60f8      	str	r0, [r7, #12]
 80134ac:	60b9      	str	r1, [r7, #8]
 80134ae:	607a      	str	r2, [r7, #4]
 80134b0:	603b      	str	r3, [r7, #0]
 80134b2:	68f8      	ldr	r0, [r7, #12]
 80134b4:	8bbb      	ldrh	r3, [r7, #28]
 80134b6:	9301      	str	r3, [sp, #4]
 80134b8:	8b3b      	ldrh	r3, [r7, #24]
 80134ba:	9300      	str	r3, [sp, #0]
 80134bc:	683b      	ldr	r3, [r7, #0]
 80134be:	687a      	ldr	r2, [r7, #4]
 80134c0:	68b9      	ldr	r1, [r7, #8]
 80134c2:	f7ff ffd3 	bl	801346c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80134c6:	4a04      	ldr	r2, [pc, #16]	; (80134d8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	601a      	str	r2, [r3, #0]
    }
 80134cc:	68fb      	ldr	r3, [r7, #12]
 80134ce:	4618      	mov	r0, r3
 80134d0:	3710      	adds	r7, #16
 80134d2:	46bd      	mov	sp, r7
 80134d4:	bd80      	pop	{r7, pc}
 80134d6:	bf00      	nop
 80134d8:	080250d4 	.word	0x080250d4

080134dc <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 80134dc:	b480      	push	{r7}
 80134de:	b083      	sub	sp, #12
 80134e0:	af00      	add	r7, sp, #0
 80134e2:	6078      	str	r0, [r7, #4]
 80134e4:	4a04      	ldr	r2, [pc, #16]	; (80134f8 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	601a      	str	r2, [r3, #0]
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	4618      	mov	r0, r3
 80134ee:	370c      	adds	r7, #12
 80134f0:	46bd      	mov	sp, r7
 80134f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134f6:	4770      	bx	lr
 80134f8:	080250bc 	.word	0x080250bc

080134fc <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 80134fc:	b580      	push	{r7, lr}
 80134fe:	b082      	sub	sp, #8
 8013500:	af00      	add	r7, sp, #0
 8013502:	6078      	str	r0, [r7, #4]
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	4618      	mov	r0, r3
 8013508:	f7ff ffe8 	bl	80134dc <_ZN8touchgfx15TouchControllerC1Ev>
 801350c:	4a03      	ldr	r2, [pc, #12]	; (801351c <_ZN20STM32TouchControllerC1Ev+0x20>)
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	601a      	str	r2, [r3, #0]
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	4618      	mov	r0, r3
 8013516:	3708      	adds	r7, #8
 8013518:	46bd      	mov	sp, r7
 801351a:	bd80      	pop	{r7, pc}
 801351c:	080250a4 	.word	0x080250a4

08013520 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8013520:	b590      	push	{r4, r7, lr}
 8013522:	b085      	sub	sp, #20
 8013524:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8013526:	f7fe fa07 	bl	8011938 <_ZN14BitmapDatabase11getInstanceEv>
 801352a:	4604      	mov	r4, r0
 801352c:	f7fe fa0e 	bl	801194c <_ZN14BitmapDatabase15getInstanceSizeEv>
 8013530:	4603      	mov	r3, r0
 8013532:	4619      	mov	r1, r3
 8013534:	2300      	movs	r3, #0
 8013536:	9300      	str	r3, [sp, #0]
 8013538:	2300      	movs	r3, #0
 801353a:	2200      	movs	r2, #0
 801353c:	4620      	mov	r0, r4
 801353e:	f006 fa15 	bl	801996c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 8013542:	4809      	ldr	r0, [pc, #36]	; (8013568 <touchgfx_init+0x48>)
 8013544:	f7ff fd70 	bl	8013028 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 8013548:	2000      	movs	r0, #0
 801354a:	f7fe fa23 	bl	8011994 <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 801354e:	4807      	ldr	r0, [pc, #28]	; (801356c <touchgfx_init+0x4c>)
 8013550:	f006 f95a 	bl	8019808 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 8013554:	f7ff fedc 	bl	8013310 <_ZN12FrontendHeap11getInstanceEv>
 8013558:	6078      	str	r0, [r7, #4]
  (void)heap; // we need to obtain the reference above to initialize the frontend heap.

  hal.initialize();
 801355a:	4805      	ldr	r0, [pc, #20]	; (8013570 <touchgfx_init+0x50>)
 801355c:	f7fe ffcc 	bl	80124f8 <_ZN11TouchGFXHAL10initializeEv>
}
 8013560:	bf00      	nop
 8013562:	370c      	adds	r7, #12
 8013564:	46bd      	mov	sp, r7
 8013566:	bd90      	pop	{r4, r7, pc}
 8013568:	2000ba4c 	.word	0x2000ba4c
 801356c:	2000003c 	.word	0x2000003c
 8013570:	2000ba50 	.word	0x2000ba50

08013574 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8013574:	b580      	push	{r7, lr}
 8013576:	af00      	add	r7, sp, #0
  * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
 8013578:	4802      	ldr	r0, [pc, #8]	; (8013584 <touchgfx_taskEntry+0x10>)
 801357a:	f001 f888 	bl	801468e <_ZN8touchgfx3HAL9taskEntryEv>
}
 801357e:	bf00      	nop
 8013580:	bd80      	pop	{r7, pc}
 8013582:	bf00      	nop
 8013584:	2000ba50 	.word	0x2000ba50

08013588 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs an empty Partition.
     */
    Partition() : AbstractPartition()
 8013588:	b580      	push	{r7, lr}
 801358a:	b082      	sub	sp, #8
 801358c:	af00      	add	r7, sp, #0
 801358e:	6078      	str	r0, [r7, #4]
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	4618      	mov	r0, r3
 8013594:	f000 fc76 	bl	8013e84 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8013598:	4a03      	ldr	r2, [pc, #12]	; (80135a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	601a      	str	r2, [r3, #0]
    {
    }
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	4618      	mov	r0, r3
 80135a2:	3708      	adds	r7, #8
 80135a4:	46bd      	mov	sp, r7
 80135a6:	bd80      	pop	{r7, pc}
 80135a8:	08025350 	.word	0x08025350

080135ac <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    /**
     * @fn virtual Partition::~Partition()
     *
     * @brief Destructor.
     */
    virtual ~Partition()
 80135ac:	b580      	push	{r7, lr}
 80135ae:	b082      	sub	sp, #8
 80135b0:	af00      	add	r7, sp, #0
 80135b2:	6078      	str	r0, [r7, #4]
    {
    }
 80135b4:	4a05      	ldr	r2, [pc, #20]	; (80135cc <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	601a      	str	r2, [r3, #0]
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	4618      	mov	r0, r3
 80135be:	f000 fc5f 	bl	8013e80 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	4618      	mov	r0, r3
 80135c6:	3708      	adds	r7, #8
 80135c8:	46bd      	mov	sp, r7
 80135ca:	bd80      	pop	{r7, pc}
 80135cc:	08025350 	.word	0x08025350

080135d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 80135d0:	b580      	push	{r7, lr}
 80135d2:	b082      	sub	sp, #8
 80135d4:	af00      	add	r7, sp, #0
 80135d6:	6078      	str	r0, [r7, #4]
    }
 80135d8:	6878      	ldr	r0, [r7, #4]
 80135da:	f7ff ffe7 	bl	80135ac <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80135de:	2118      	movs	r1, #24
 80135e0:	6878      	ldr	r0, [r7, #4]
 80135e2:	f00f fefe 	bl	80233e2 <_ZdlPvj>
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	4618      	mov	r0, r3
 80135ea:	3708      	adds	r7, #8
 80135ec:	46bd      	mov	sp, r7
 80135ee:	bd80      	pop	{r7, pc}

080135f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 80135f0:	b580      	push	{r7, lr}
 80135f2:	b082      	sub	sp, #8
 80135f4:	af00      	add	r7, sp, #0
 80135f6:	6078      	str	r0, [r7, #4]
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	4618      	mov	r0, r3
 80135fc:	f000 fc42 	bl	8013e84 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8013600:	4a03      	ldr	r2, [pc, #12]	; (8013610 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	601a      	str	r2, [r3, #0]
    }
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	4618      	mov	r0, r3
 801360a:	3708      	adds	r7, #8
 801360c:	46bd      	mov	sp, r7
 801360e:	bd80      	pop	{r7, pc}
 8013610:	0802531c 	.word	0x0802531c

08013614 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 8013614:	b580      	push	{r7, lr}
 8013616:	b082      	sub	sp, #8
 8013618:	af00      	add	r7, sp, #0
 801361a:	6078      	str	r0, [r7, #4]
    }
 801361c:	4a05      	ldr	r2, [pc, #20]	; (8013634 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	601a      	str	r2, [r3, #0]
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	4618      	mov	r0, r3
 8013626:	f000 fc2b 	bl	8013e80 <_ZN8touchgfx17AbstractPartitionD1Ev>
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	4618      	mov	r0, r3
 801362e:	3708      	adds	r7, #8
 8013630:	46bd      	mov	sp, r7
 8013632:	bd80      	pop	{r7, pc}
 8013634:	0802531c 	.word	0x0802531c

08013638 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8013638:	b580      	push	{r7, lr}
 801363a:	b082      	sub	sp, #8
 801363c:	af00      	add	r7, sp, #0
 801363e:	6078      	str	r0, [r7, #4]
    }
 8013640:	6878      	ldr	r0, [r7, #4]
 8013642:	f7ff ffe7 	bl	8013614 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8013646:	f242 6134 	movw	r1, #9780	; 0x2634
 801364a:	6878      	ldr	r0, [r7, #4]
 801364c:	f00f fec9 	bl	80233e2 <_ZdlPvj>
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	4618      	mov	r0, r3
 8013654:	3708      	adds	r7, #8
 8013656:	46bd      	mov	sp, r7
 8013658:	bd80      	pop	{r7, pc}
	...

0801365c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 801365c:	b580      	push	{r7, lr}
 801365e:	b082      	sub	sp, #8
 8013660:	af00      	add	r7, sp, #0
 8013662:	6078      	str	r0, [r7, #4]
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	4618      	mov	r0, r3
 8013668:	f000 fc0c 	bl	8013e84 <_ZN8touchgfx17AbstractPartitionC1Ev>
 801366c:	4a03      	ldr	r2, [pc, #12]	; (801367c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	601a      	str	r2, [r3, #0]
    }
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	4618      	mov	r0, r3
 8013676:	3708      	adds	r7, #8
 8013678:	46bd      	mov	sp, r7
 801367a:	bd80      	pop	{r7, pc}
 801367c:	080252e8 	.word	0x080252e8

08013680 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 8013680:	b580      	push	{r7, lr}
 8013682:	b082      	sub	sp, #8
 8013684:	af00      	add	r7, sp, #0
 8013686:	6078      	str	r0, [r7, #4]
    }
 8013688:	4a05      	ldr	r2, [pc, #20]	; (80136a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	601a      	str	r2, [r3, #0]
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	4618      	mov	r0, r3
 8013692:	f000 fbf5 	bl	8013e80 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	4618      	mov	r0, r3
 801369a:	3708      	adds	r7, #8
 801369c:	46bd      	mov	sp, r7
 801369e:	bd80      	pop	{r7, pc}
 80136a0:	080252e8 	.word	0x080252e8

080136a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 80136a4:	b580      	push	{r7, lr}
 80136a6:	b082      	sub	sp, #8
 80136a8:	af00      	add	r7, sp, #0
 80136aa:	6078      	str	r0, [r7, #4]
    }
 80136ac:	6878      	ldr	r0, [r7, #4]
 80136ae:	f7ff ffe7 	bl	8013680 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80136b2:	2114      	movs	r1, #20
 80136b4:	6878      	ldr	r0, [r7, #4]
 80136b6:	f00f fe94 	bl	80233e2 <_ZdlPvj>
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	4618      	mov	r0, r3
 80136be:	3708      	adds	r7, #8
 80136c0:	46bd      	mov	sp, r7
 80136c2:	bd80      	pop	{r7, pc}

080136c4 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 80136c4:	b580      	push	{r7, lr}
 80136c6:	b082      	sub	sp, #8
 80136c8:	af00      	add	r7, sp, #0
 80136ca:	6078      	str	r0, [r7, #4]
 80136cc:	4a11      	ldr	r2, [pc, #68]	; (8013714 <_ZN12FrontendHeapD1Ev+0x50>)
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	601a      	str	r2, [r3, #0]
 80136d2:	687a      	ldr	r2, [r7, #4]
 80136d4:	f242 6374 	movw	r3, #9844	; 0x2674
 80136d8:	4413      	add	r3, r2
 80136da:	4618      	mov	r0, r3
 80136dc:	f7fe fa10 	bl	8011b00 <_ZN19FrontendApplicationD1Ev>
 80136e0:	687a      	ldr	r2, [r7, #4]
 80136e2:	f242 6360 	movw	r3, #9824	; 0x2660
 80136e6:	4413      	add	r3, r2
 80136e8:	4618      	mov	r0, r3
 80136ea:	f7ff ffc9 	bl	8013680 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	332c      	adds	r3, #44	; 0x2c
 80136f2:	4618      	mov	r0, r3
 80136f4:	f7ff ff8e 	bl	8013614 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	3314      	adds	r3, #20
 80136fc:	4618      	mov	r0, r3
 80136fe:	f7ff ff55 	bl	80135ac <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	4618      	mov	r0, r3
 8013706:	f7ff fe1d 	bl	8013344 <_ZN16FrontendHeapBaseD1Ev>
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	4618      	mov	r0, r3
 801370e:	3708      	adds	r7, #8
 8013710:	46bd      	mov	sp, r7
 8013712:	bd80      	pop	{r7, pc}
 8013714:	080252d4 	.word	0x080252d4

08013718 <_ZN12FrontendHeapD0Ev>:
 8013718:	b580      	push	{r7, lr}
 801371a:	b082      	sub	sp, #8
 801371c:	af00      	add	r7, sp, #0
 801371e:	6078      	str	r0, [r7, #4]
 8013720:	6878      	ldr	r0, [r7, #4]
 8013722:	f7ff ffcf 	bl	80136c4 <_ZN12FrontendHeapD1Ev>
 8013726:	f242 71c8 	movw	r1, #10184	; 0x27c8
 801372a:	6878      	ldr	r0, [r7, #4]
 801372c:	f00f fe59 	bl	80233e2 <_ZdlPvj>
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	4618      	mov	r0, r3
 8013734:	3708      	adds	r7, #8
 8013736:	46bd      	mov	sp, r7
 8013738:	bd80      	pop	{r7, pc}
	...

0801373c <_Z41__static_initialization_and_destruction_0ii>:
 801373c:	b580      	push	{r7, lr}
 801373e:	b084      	sub	sp, #16
 8013740:	af02      	add	r7, sp, #8
 8013742:	6078      	str	r0, [r7, #4]
 8013744:	6039      	str	r1, [r7, #0]
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	2b01      	cmp	r3, #1
 801374a:	d119      	bne.n	8013780 <_Z41__static_initialization_and_destruction_0ii+0x44>
 801374c:	683b      	ldr	r3, [r7, #0]
 801374e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013752:	4293      	cmp	r3, r2
 8013754:	d114      	bne.n	8013780 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 8013756:	4818      	ldr	r0, [pc, #96]	; (80137b8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8013758:	f7ff fed0 	bl	80134fc <_ZN20STM32TouchControllerC1Ev>
static STM32F7DMA dma;
 801375c:	4817      	ldr	r0, [pc, #92]	; (80137bc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 801375e:	f7ff f965 	bl	8012a2c <_ZN10STM32F7DMAC1Ev>
static LCD24bpp display;
 8013762:	4817      	ldr	r0, [pc, #92]	; (80137c0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8013764:	f008 fb28 	bl	801bdb8 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 8013768:	f44f 7388 	mov.w	r3, #272	; 0x110
 801376c:	9301      	str	r3, [sp, #4]
 801376e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8013772:	9300      	str	r3, [sp, #0]
 8013774:	4b10      	ldr	r3, [pc, #64]	; (80137b8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8013776:	4a12      	ldr	r2, [pc, #72]	; (80137c0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8013778:	4910      	ldr	r1, [pc, #64]	; (80137bc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 801377a:	4812      	ldr	r0, [pc, #72]	; (80137c4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 801377c:	f7ff fe92 	bl	80134a4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	2b00      	cmp	r3, #0
 8013784:	d113      	bne.n	80137ae <_Z41__static_initialization_and_destruction_0ii+0x72>
 8013786:	683b      	ldr	r3, [r7, #0]
 8013788:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801378c:	4293      	cmp	r3, r2
 801378e:	d10e      	bne.n	80137ae <_Z41__static_initialization_and_destruction_0ii+0x72>
 8013790:	480c      	ldr	r0, [pc, #48]	; (80137c4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8013792:	f7fe ff17 	bl	80125c4 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8013796:	480c      	ldr	r0, [pc, #48]	; (80137c8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8013798:	f7fa feb4 	bl	800e504 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 801379c:	4808      	ldr	r0, [pc, #32]	; (80137c0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 801379e:	f7ff fe43 	bl	8013428 <_ZN8touchgfx8LCD24bppD1Ev>
static STM32F7DMA dma;
 80137a2:	4806      	ldr	r0, [pc, #24]	; (80137bc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80137a4:	f7ff f96c 	bl	8012a80 <_ZN10STM32F7DMAD1Ev>
static STM32TouchController tc;
 80137a8:	4803      	ldr	r0, [pc, #12]	; (80137b8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80137aa:	f7fe fc81 	bl	80120b0 <_ZN20STM32TouchControllerD1Ev>
}
 80137ae:	bf00      	nop
 80137b0:	3708      	adds	r7, #8
 80137b2:	46bd      	mov	sp, r7
 80137b4:	bd80      	pop	{r7, pc}
 80137b6:	bf00      	nop
 80137b8:	2000add0 	.word	0x2000add0
 80137bc:	2000add4 	.word	0x2000add4
 80137c0:	2000b9f4 	.word	0x2000b9f4
 80137c4:	2000ba50 	.word	0x2000ba50
 80137c8:	2000003c 	.word	0x2000003c

080137cc <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity()
     */
    virtual uint16_t capacity() const
 80137cc:	b480      	push	{r7}
 80137ce:	b083      	sub	sp, #12
 80137d0:	af00      	add	r7, sp, #0
 80137d2:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 80137d4:	2301      	movs	r3, #1
    }
 80137d6:	4618      	mov	r0, r3
 80137d8:	370c      	adds	r7, #12
 80137da:	46bd      	mov	sp, r7
 80137dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137e0:	4770      	bx	lr

080137e2 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size()
     */
    virtual uint32_t element_size()
 80137e2:	b480      	push	{r7}
 80137e4:	b083      	sub	sp, #12
 80137e6:	af00      	add	r7, sp, #0
 80137e8:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 80137ea:	230c      	movs	r3, #12
    }
 80137ec:	4618      	mov	r0, r3
 80137ee:	370c      	adds	r7, #12
 80137f0:	46bd      	mov	sp, r7
 80137f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137f6:	4770      	bx	lr

080137f8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual void* element(uint16_t index)
 80137f8:	b480      	push	{r7}
 80137fa:	b083      	sub	sp, #12
 80137fc:	af00      	add	r7, sp, #0
 80137fe:	6078      	str	r0, [r7, #4]
 8013800:	460b      	mov	r3, r1
 8013802:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8013804:	887a      	ldrh	r2, [r7, #2]
 8013806:	4613      	mov	r3, r2
 8013808:	005b      	lsls	r3, r3, #1
 801380a:	4413      	add	r3, r2
 801380c:	009b      	lsls	r3, r3, #2
 801380e:	3308      	adds	r3, #8
 8013810:	687a      	ldr	r2, [r7, #4]
 8013812:	4413      	add	r3, r2
    }
 8013814:	4618      	mov	r0, r3
 8013816:	370c      	adds	r7, #12
 8013818:	46bd      	mov	sp, r7
 801381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801381e:	4770      	bx	lr

08013820 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual const void* element(uint16_t index) const
 8013820:	b480      	push	{r7}
 8013822:	b083      	sub	sp, #12
 8013824:	af00      	add	r7, sp, #0
 8013826:	6078      	str	r0, [r7, #4]
 8013828:	460b      	mov	r3, r1
 801382a:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 801382c:	887a      	ldrh	r2, [r7, #2]
 801382e:	4613      	mov	r3, r2
 8013830:	005b      	lsls	r3, r3, #1
 8013832:	4413      	add	r3, r2
 8013834:	009b      	lsls	r3, r3, #2
 8013836:	3308      	adds	r3, #8
 8013838:	687a      	ldr	r2, [r7, #4]
 801383a:	4413      	add	r3, r2
    }
 801383c:	4618      	mov	r0, r3
 801383e:	370c      	adds	r7, #12
 8013840:	46bd      	mov	sp, r7
 8013842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013846:	4770      	bx	lr

08013848 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8013848:	b480      	push	{r7}
 801384a:	b083      	sub	sp, #12
 801384c:	af00      	add	r7, sp, #0
 801384e:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8013850:	2301      	movs	r3, #1
    }
 8013852:	4618      	mov	r0, r3
 8013854:	370c      	adds	r7, #12
 8013856:	46bd      	mov	sp, r7
 8013858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801385c:	4770      	bx	lr

0801385e <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 801385e:	b480      	push	{r7}
 8013860:	b083      	sub	sp, #12
 8013862:	af00      	add	r7, sp, #0
 8013864:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8013866:	f242 632c 	movw	r3, #9772	; 0x262c
    }
 801386a:	4618      	mov	r0, r3
 801386c:	370c      	adds	r7, #12
 801386e:	46bd      	mov	sp, r7
 8013870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013874:	4770      	bx	lr

08013876 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8013876:	b480      	push	{r7}
 8013878:	b083      	sub	sp, #12
 801387a:	af00      	add	r7, sp, #0
 801387c:	6078      	str	r0, [r7, #4]
 801387e:	460b      	mov	r3, r1
 8013880:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8013882:	887b      	ldrh	r3, [r7, #2]
 8013884:	f242 622c 	movw	r2, #9772	; 0x262c
 8013888:	fb02 f303 	mul.w	r3, r2, r3
 801388c:	3308      	adds	r3, #8
 801388e:	687a      	ldr	r2, [r7, #4]
 8013890:	4413      	add	r3, r2
    }
 8013892:	4618      	mov	r0, r3
 8013894:	370c      	adds	r7, #12
 8013896:	46bd      	mov	sp, r7
 8013898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801389c:	4770      	bx	lr

0801389e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 801389e:	b480      	push	{r7}
 80138a0:	b083      	sub	sp, #12
 80138a2:	af00      	add	r7, sp, #0
 80138a4:	6078      	str	r0, [r7, #4]
 80138a6:	460b      	mov	r3, r1
 80138a8:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80138aa:	887b      	ldrh	r3, [r7, #2]
 80138ac:	f242 622c 	movw	r2, #9772	; 0x262c
 80138b0:	fb02 f303 	mul.w	r3, r2, r3
 80138b4:	3308      	adds	r3, #8
 80138b6:	687a      	ldr	r2, [r7, #4]
 80138b8:	4413      	add	r3, r2
    }
 80138ba:	4618      	mov	r0, r3
 80138bc:	370c      	adds	r7, #12
 80138be:	46bd      	mov	sp, r7
 80138c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138c4:	4770      	bx	lr

080138c6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80138c6:	b480      	push	{r7}
 80138c8:	b083      	sub	sp, #12
 80138ca:	af00      	add	r7, sp, #0
 80138cc:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80138ce:	2301      	movs	r3, #1
    }
 80138d0:	4618      	mov	r0, r3
 80138d2:	370c      	adds	r7, #12
 80138d4:	46bd      	mov	sp, r7
 80138d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138da:	4770      	bx	lr

080138dc <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80138dc:	b480      	push	{r7}
 80138de:	b083      	sub	sp, #12
 80138e0:	af00      	add	r7, sp, #0
 80138e2:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80138e4:	2310      	movs	r3, #16
    }
 80138e6:	4618      	mov	r0, r3
 80138e8:	370c      	adds	r7, #12
 80138ea:	46bd      	mov	sp, r7
 80138ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138f0:	4770      	bx	lr

080138f2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80138f2:	b480      	push	{r7}
 80138f4:	b083      	sub	sp, #12
 80138f6:	af00      	add	r7, sp, #0
 80138f8:	6078      	str	r0, [r7, #4]
 80138fa:	460b      	mov	r3, r1
 80138fc:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80138fe:	887b      	ldrh	r3, [r7, #2]
 8013900:	011b      	lsls	r3, r3, #4
 8013902:	3308      	adds	r3, #8
 8013904:	687a      	ldr	r2, [r7, #4]
 8013906:	4413      	add	r3, r2
    }
 8013908:	4618      	mov	r0, r3
 801390a:	370c      	adds	r7, #12
 801390c:	46bd      	mov	sp, r7
 801390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013912:	4770      	bx	lr

08013914 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8013914:	b480      	push	{r7}
 8013916:	b083      	sub	sp, #12
 8013918:	af00      	add	r7, sp, #0
 801391a:	6078      	str	r0, [r7, #4]
 801391c:	460b      	mov	r3, r1
 801391e:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8013920:	887b      	ldrh	r3, [r7, #2]
 8013922:	011b      	lsls	r3, r3, #4
 8013924:	3308      	adds	r3, #8
 8013926:	687a      	ldr	r2, [r7, #4]
 8013928:	4413      	add	r3, r2
    }
 801392a:	4618      	mov	r0, r3
 801392c:	370c      	adds	r7, #12
 801392e:	46bd      	mov	sp, r7
 8013930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013934:	4770      	bx	lr

08013936 <_GLOBAL__sub_I_touchgfx_init>:
 8013936:	b580      	push	{r7, lr}
 8013938:	af00      	add	r7, sp, #0
 801393a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801393e:	2001      	movs	r0, #1
 8013940:	f7ff fefc 	bl	801373c <_Z41__static_initialization_and_destruction_0ii>
 8013944:	bd80      	pop	{r7, pc}

08013946 <_GLOBAL__sub_D_touchgfx_init>:
 8013946:	b580      	push	{r7, lr}
 8013948:	af00      	add	r7, sp, #0
 801394a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801394e:	2000      	movs	r0, #0
 8013950:	f7ff fef4 	bl	801373c <_Z41__static_initialization_and_destruction_0ii>
 8013954:	bd80      	pop	{r7, pc}

08013956 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8013956:	b580      	push	{r7, lr}
 8013958:	b082      	sub	sp, #8
 801395a:	af00      	add	r7, sp, #0
 801395c:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	681b      	ldr	r3, [r3, #0]
 8013962:	3318      	adds	r3, #24
 8013964:	681b      	ldr	r3, [r3, #0]
 8013966:	6878      	ldr	r0, [r7, #4]
 8013968:	4798      	blx	r3
    }
 801396a:	bf00      	nop
 801396c:	3708      	adds	r7, #8
 801396e:	46bd      	mov	sp, r7
 8013970:	bd80      	pop	{r7, pc}

08013972 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 8013972:	b480      	push	{r7}
 8013974:	b083      	sub	sp, #12
 8013976:	af00      	add	r7, sp, #0
 8013978:	6078      	str	r0, [r7, #4]
 801397a:	460b      	mov	r3, r1
 801397c:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	78fa      	ldrb	r2, [r7, #3]
 8013982:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 8013986:	bf00      	nop
 8013988:	370c      	adds	r7, #12
 801398a:	46bd      	mov	sp, r7
 801398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013990:	4770      	bx	lr

08013992 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8013992:	b480      	push	{r7}
 8013994:	b083      	sub	sp, #12
 8013996:	af00      	add	r7, sp, #0
 8013998:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80139a0:	3301      	adds	r3, #1
 80139a2:	b2da      	uxtb	r2, r3
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 80139aa:	bf00      	nop
 80139ac:	370c      	adds	r7, #12
 80139ae:	46bd      	mov	sp, r7
 80139b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139b4:	4770      	bx	lr
	...

080139b8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 80139b8:	b580      	push	{r7, lr}
 80139ba:	b082      	sub	sp, #8
 80139bc:	af00      	add	r7, sp, #0
 80139be:	6078      	str	r0, [r7, #4]
 80139c0:	460b      	mov	r3, r1
 80139c2:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 80139c4:	78fb      	ldrb	r3, [r7, #3]
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d002      	beq.n	80139d0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 80139ca:	78fb      	ldrb	r3, [r7, #3]
 80139cc:	2b02      	cmp	r3, #2
 80139ce:	d105      	bne.n	80139dc <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	78fa      	ldrb	r2, [r7, #3]
 80139d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 80139d8:	2301      	movs	r3, #1
 80139da:	e027      	b.n	8013a2c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 80139dc:	78fb      	ldrb	r3, [r7, #3]
 80139de:	2b01      	cmp	r3, #1
 80139e0:	d123      	bne.n	8013a2a <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d014      	beq.n	8013a14 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	681b      	ldr	r3, [r3, #0]
 80139ee:	3380      	adds	r3, #128	; 0x80
 80139f0:	681b      	ldr	r3, [r3, #0]
 80139f2:	6878      	ldr	r0, [r7, #4]
 80139f4:	4798      	blx	r3
 80139f6:	4603      	mov	r3, r0
 80139f8:	461a      	mov	r2, r3
 80139fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80139fe:	429a      	cmp	r2, r3
 8013a00:	d008      	beq.n	8013a14 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8013a02:	4b0c      	ldr	r3, [pc, #48]	; (8013a34 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 8013a04:	781b      	ldrb	r3, [r3, #0]
 8013a06:	f083 0301 	eor.w	r3, r3, #1
 8013a0a:	b2db      	uxtb	r3, r3
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d001      	beq.n	8013a14 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8013a10:	2301      	movs	r3, #1
 8013a12:	e000      	b.n	8013a16 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 8013a14:	2300      	movs	r3, #0
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d005      	beq.n	8013a26 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	78fa      	ldrb	r2, [r7, #3]
 8013a1e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 8013a22:	2301      	movs	r3, #1
 8013a24:	e002      	b.n	8013a2c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 8013a26:	2300      	movs	r3, #0
 8013a28:	e000      	b.n	8013a2c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 8013a2a:	2300      	movs	r3, #0
    }
 8013a2c:	4618      	mov	r0, r3
 8013a2e:	3708      	adds	r7, #8
 8013a30:	46bd      	mov	sp, r7
 8013a32:	bd80      	pop	{r7, pc}
 8013a34:	2000bad6 	.word	0x2000bad6

08013a38 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void(*delayF)(uint16_t))
 8013a38:	b480      	push	{r7}
 8013a3a:	b083      	sub	sp, #12
 8013a3c:	af00      	add	r7, sp, #0
 8013a3e:	6078      	str	r0, [r7, #4]
 8013a40:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	683a      	ldr	r2, [r7, #0]
 8013a46:	639a      	str	r2, [r3, #56]	; 0x38
    }
 8013a48:	bf00      	nop
 8013a4a:	370c      	adds	r7, #12
 8013a4c:	46bd      	mov	sp, r7
 8013a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a52:	4770      	bx	lr

08013a54 <__NVIC_EnableIRQ>:
{
 8013a54:	b480      	push	{r7}
 8013a56:	b083      	sub	sp, #12
 8013a58:	af00      	add	r7, sp, #0
 8013a5a:	4603      	mov	r3, r0
 8013a5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	db0d      	blt.n	8013a82 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013a6a:	b2db      	uxtb	r3, r3
 8013a6c:	f003 021f 	and.w	r2, r3, #31
 8013a70:	4907      	ldr	r1, [pc, #28]	; (8013a90 <__NVIC_EnableIRQ+0x3c>)
 8013a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013a76:	095b      	lsrs	r3, r3, #5
 8013a78:	2001      	movs	r0, #1
 8013a7a:	fa00 f202 	lsl.w	r2, r0, r2
 8013a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8013a82:	bf00      	nop
 8013a84:	370c      	adds	r7, #12
 8013a86:	46bd      	mov	sp, r7
 8013a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a8c:	4770      	bx	lr
 8013a8e:	bf00      	nop
 8013a90:	e000e100 	.word	0xe000e100

08013a94 <__NVIC_DisableIRQ>:
{
 8013a94:	b480      	push	{r7}
 8013a96:	b083      	sub	sp, #12
 8013a98:	af00      	add	r7, sp, #0
 8013a9a:	4603      	mov	r3, r0
 8013a9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	db12      	blt.n	8013acc <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013aaa:	b2db      	uxtb	r3, r3
 8013aac:	f003 021f 	and.w	r2, r3, #31
 8013ab0:	4909      	ldr	r1, [pc, #36]	; (8013ad8 <__NVIC_DisableIRQ+0x44>)
 8013ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013ab6:	095b      	lsrs	r3, r3, #5
 8013ab8:	2001      	movs	r0, #1
 8013aba:	fa00 f202 	lsl.w	r2, r0, r2
 8013abe:	3320      	adds	r3, #32
 8013ac0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8013ac4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8013ac8:	f3bf 8f6f 	isb	sy
}
 8013acc:	bf00      	nop
 8013ace:	370c      	adds	r7, #12
 8013ad0:	46bd      	mov	sp, r7
 8013ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ad6:	4770      	bx	lr
 8013ad8:	e000e100 	.word	0xe000e100

08013adc <__NVIC_SetPriority>:
{
 8013adc:	b480      	push	{r7}
 8013ade:	b083      	sub	sp, #12
 8013ae0:	af00      	add	r7, sp, #0
 8013ae2:	4603      	mov	r3, r0
 8013ae4:	6039      	str	r1, [r7, #0]
 8013ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	db0c      	blt.n	8013b0a <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013af0:	683b      	ldr	r3, [r7, #0]
 8013af2:	b2db      	uxtb	r3, r3
 8013af4:	4a0e      	ldr	r2, [pc, #56]	; (8013b30 <__NVIC_SetPriority+0x54>)
 8013af6:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8013afa:	4608      	mov	r0, r1
 8013afc:	011b      	lsls	r3, r3, #4
 8013afe:	b2d9      	uxtb	r1, r3
 8013b00:	1813      	adds	r3, r2, r0
 8013b02:	460a      	mov	r2, r1
 8013b04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8013b08:	e00c      	b.n	8013b24 <__NVIC_SetPriority+0x48>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013b0a:	683b      	ldr	r3, [r7, #0]
 8013b0c:	b2da      	uxtb	r2, r3
 8013b0e:	4909      	ldr	r1, [pc, #36]	; (8013b34 <__NVIC_SetPriority+0x58>)
 8013b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013b14:	b2db      	uxtb	r3, r3
 8013b16:	f003 030f 	and.w	r3, r3, #15
 8013b1a:	3b04      	subs	r3, #4
 8013b1c:	0112      	lsls	r2, r2, #4
 8013b1e:	b2d2      	uxtb	r2, r2
 8013b20:	440b      	add	r3, r1
 8013b22:	761a      	strb	r2, [r3, #24]
}
 8013b24:	bf00      	nop
 8013b26:	370c      	adds	r7, #12
 8013b28:	46bd      	mov	sp, r7
 8013b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b2e:	4770      	bx	lr
 8013b30:	e000e100 	.word	0xe000e100
 8013b34:	e000ed00 	.word	0xe000ed00

08013b38 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8013b38:	b5b0      	push	{r4, r5, r7, lr}
 8013b3a:	b082      	sub	sp, #8
 8013b3c:	af00      	add	r7, sp, #0
 8013b3e:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	4618      	mov	r0, r3
 8013b44:	f001 f868 	bl	8014c18 <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(touchgfx::Application::getInstance()));
 8013b48:	687d      	ldr	r5, [r7, #4]
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	681b      	ldr	r3, [r3, #0]
 8013b4e:	334c      	adds	r3, #76	; 0x4c
 8013b50:	681c      	ldr	r4, [r3, #0]
 8013b52:	f003 fc7d 	bl	8017450 <_ZN8touchgfx11Application11getInstanceEv>
 8013b56:	4603      	mov	r3, r0
 8013b58:	4619      	mov	r1, r3
 8013b5a:	4628      	mov	r0, r5
 8013b5c:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	490d      	ldr	r1, [pc, #52]	; (8013b98 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 8013b62:	4618      	mov	r0, r3
 8013b64:	f7ff ff68 	bl	8013a38 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	2101      	movs	r1, #1
 8013b6c:	4618      	mov	r0, r3
 8013b6e:	f7ff ff23 	bl	80139b8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>

    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 8013b72:	6878      	ldr	r0, [r7, #4]
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	681b      	ldr	r3, [r3, #0]
 8013b78:	3374      	adds	r3, #116	; 0x74
 8013b7a:	681c      	ldr	r4, [r3, #0]
 8013b7c:	2300      	movs	r3, #0
 8013b7e:	2200      	movs	r2, #0
 8013b80:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8013b84:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	2101      	movs	r1, #1
 8013b8a:	4618      	mov	r0, r3
 8013b8c:	f7ff fef1 	bl	8013972 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 8013b90:	bf00      	nop
 8013b92:	3708      	adds	r7, #8
 8013b94:	46bd      	mov	sp, r7
 8013b96:	bdb0      	pop	{r4, r5, r7, pc}
 8013b98:	0801275d 	.word	0x0801275d

08013b9c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8013b9c:	b580      	push	{r7, lr}
 8013b9e:	b082      	sub	sp, #8
 8013ba0:	af00      	add	r7, sp, #0
 8013ba2:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8013ba4:	2109      	movs	r1, #9
 8013ba6:	205a      	movs	r0, #90	; 0x5a
 8013ba8:	f7ff ff98 	bl	8013adc <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8013bac:	2109      	movs	r1, #9
 8013bae:	2058      	movs	r0, #88	; 0x58
 8013bb0:	f7ff ff94 	bl	8013adc <__NVIC_SetPriority>
}
 8013bb4:	bf00      	nop
 8013bb6:	3708      	adds	r7, #8
 8013bb8:	46bd      	mov	sp, r7
 8013bba:	bd80      	pop	{r7, pc}

08013bbc <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8013bbc:	b580      	push	{r7, lr}
 8013bbe:	b082      	sub	sp, #8
 8013bc0:	af00      	add	r7, sp, #0
 8013bc2:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8013bc4:	205a      	movs	r0, #90	; 0x5a
 8013bc6:	f7ff ff45 	bl	8013a54 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8013bca:	2058      	movs	r0, #88	; 0x58
 8013bcc:	f7ff ff42 	bl	8013a54 <__NVIC_EnableIRQ>
}
 8013bd0:	bf00      	nop
 8013bd2:	3708      	adds	r7, #8
 8013bd4:	46bd      	mov	sp, r7
 8013bd6:	bd80      	pop	{r7, pc}

08013bd8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8013bd8:	b580      	push	{r7, lr}
 8013bda:	b082      	sub	sp, #8
 8013bdc:	af00      	add	r7, sp, #0
 8013bde:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8013be0:	205a      	movs	r0, #90	; 0x5a
 8013be2:	f7ff ff57 	bl	8013a94 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8013be6:	2058      	movs	r0, #88	; 0x58
 8013be8:	f7ff ff54 	bl	8013a94 <__NVIC_DisableIRQ>
}
 8013bec:	bf00      	nop
 8013bee:	3708      	adds	r7, #8
 8013bf0:	46bd      	mov	sp, r7
 8013bf2:	bd80      	pop	{r7, pc}

08013bf4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8013bf4:	b480      	push	{r7}
 8013bf6:	b083      	sub	sp, #12
 8013bf8:	af00      	add	r7, sp, #0
 8013bfa:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8013bfc:	4b11      	ldr	r3, [pc, #68]	; (8013c44 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8013bfe:	68db      	ldr	r3, [r3, #12]
 8013c00:	b29b      	uxth	r3, r3
 8013c02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013c06:	b29b      	uxth	r3, r3
 8013c08:	3b01      	subs	r3, #1
 8013c0a:	b29a      	uxth	r2, r3
 8013c0c:	4b0e      	ldr	r3, [pc, #56]	; (8013c48 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8013c0e:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8013c10:	4b0c      	ldr	r3, [pc, #48]	; (8013c44 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8013c12:	691b      	ldr	r3, [r3, #16]
 8013c14:	b29b      	uxth	r3, r3
 8013c16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013c1a:	b29b      	uxth	r3, r3
 8013c1c:	3b01      	subs	r3, #1
 8013c1e:	b29a      	uxth	r2, r3
 8013c20:	4b0a      	ldr	r3, [pc, #40]	; (8013c4c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8013c22:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8013c24:	4b08      	ldr	r3, [pc, #32]	; (8013c48 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8013c26:	881a      	ldrh	r2, [r3, #0]
 8013c28:	4b06      	ldr	r3, [pc, #24]	; (8013c44 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8013c2a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8013c2c:	4b05      	ldr	r3, [pc, #20]	; (8013c44 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8013c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013c30:	4a04      	ldr	r2, [pc, #16]	; (8013c44 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8013c32:	f043 0301 	orr.w	r3, r3, #1
 8013c36:	6353      	str	r3, [r2, #52]	; 0x34
}
 8013c38:	bf00      	nop
 8013c3a:	370c      	adds	r7, #12
 8013c3c:	46bd      	mov	sp, r7
 8013c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c42:	4770      	bx	lr
 8013c44:	40016800 	.word	0x40016800
 8013c48:	2000bac8 	.word	0x2000bac8
 8013c4c:	2000baca 	.word	0x2000baca

08013c50 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8013c50:	b480      	push	{r7}
 8013c52:	b083      	sub	sp, #12
 8013c54:	af00      	add	r7, sp, #0
 8013c56:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8013c58:	4b03      	ldr	r3, [pc, #12]	; (8013c68 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8013c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8013c5c:	4618      	mov	r0, r3
 8013c5e:	370c      	adds	r7, #12
 8013c60:	46bd      	mov	sp, r7
 8013c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c66:	4770      	bx	lr
 8013c68:	40016884 	.word	0x40016884

08013c6c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8013c6c:	b480      	push	{r7}
 8013c6e:	b083      	sub	sp, #12
 8013c70:	af00      	add	r7, sp, #0
 8013c72:	6078      	str	r0, [r7, #4]
 8013c74:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8013c76:	4a06      	ldr	r2, [pc, #24]	; (8013c90 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8013c78:	683b      	ldr	r3, [r7, #0]
 8013c7a:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8013c7c:	4b05      	ldr	r3, [pc, #20]	; (8013c94 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8013c7e:	2201      	movs	r2, #1
 8013c80:	625a      	str	r2, [r3, #36]	; 0x24
}
 8013c82:	bf00      	nop
 8013c84:	370c      	adds	r7, #12
 8013c86:	46bd      	mov	sp, r7
 8013c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c8c:	4770      	bx	lr
 8013c8e:	bf00      	nop
 8013c90:	40016884 	.word	0x40016884
 8013c94:	40016800 	.word	0x40016800

08013c98 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8013c98:	b580      	push	{r7, lr}
 8013c9a:	b082      	sub	sp, #8
 8013c9c:	af00      	add	r7, sp, #0
 8013c9e:	6078      	str	r0, [r7, #4]
 8013ca0:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	6839      	ldr	r1, [r7, #0]
 8013ca6:	4618      	mov	r0, r3
 8013ca8:	f000 fcc6 	bl	8014638 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8013cac:	bf00      	nop
 8013cae:	3708      	adds	r7, #8
 8013cb0:	46bd      	mov	sp, r7
 8013cb2:	bd80      	pop	{r7, pc}

08013cb4 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 8013cb4:	b480      	push	{r7}
 8013cb6:	b085      	sub	sp, #20
 8013cb8:	af00      	add	r7, sp, #0
 8013cba:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 8013cbc:	4b0d      	ldr	r3, [pc, #52]	; (8013cf4 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8013cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013cc0:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 8013cc2:	4b0c      	ldr	r3, [pc, #48]	; (8013cf4 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8013cc4:	68db      	ldr	r3, [r3, #12]
 8013cc6:	b29b      	uxth	r3, r3
 8013cc8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013ccc:	b29b      	uxth	r3, r3
 8013cce:	3301      	adds	r3, #1
 8013cd0:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    if (curr < backPorchY)
 8013cd2:	89fa      	ldrh	r2, [r7, #14]
 8013cd4:	89bb      	ldrh	r3, [r7, #12]
 8013cd6:	429a      	cmp	r2, r3
 8013cd8:	d201      	bcs.n	8013cde <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x2a>
    {
        return 0;
 8013cda:	2300      	movs	r3, #0
 8013cdc:	e003      	b.n	8013ce6 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
    }
    else
    {
        return curr - backPorchY;
 8013cde:	89fa      	ldrh	r2, [r7, #14]
 8013ce0:	89bb      	ldrh	r3, [r7, #12]
 8013ce2:	1ad3      	subs	r3, r2, r3
 8013ce4:	b29b      	uxth	r3, r3
    }
}
 8013ce6:	4618      	mov	r0, r3
 8013ce8:	3714      	adds	r7, #20
 8013cea:	46bd      	mov	sp, r7
 8013cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cf0:	4770      	bx	lr
 8013cf2:	bf00      	nop
 8013cf4:	40016800 	.word	0x40016800

08013cf8 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
 8013cf8:	b580      	push	{r7, lr}
 8013cfa:	b082      	sub	sp, #8
 8013cfc:	af00      	add	r7, sp, #0
 8013cfe:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 8013d00:	4b1a      	ldr	r3, [pc, #104]	; (8013d6c <HAL_LTDC_LineEventCallback+0x74>)
 8013d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d04:	4a1a      	ldr	r2, [pc, #104]	; (8013d70 <HAL_LTDC_LineEventCallback+0x78>)
 8013d06:	8812      	ldrh	r2, [r2, #0]
 8013d08:	4293      	cmp	r3, r2
 8013d0a:	bf0c      	ite	eq
 8013d0c:	2301      	moveq	r3, #1
 8013d0e:	2300      	movne	r3, #0
 8013d10:	b2db      	uxtb	r3, r3
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d017      	beq.n	8013d46 <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8013d16:	4b17      	ldr	r3, [pc, #92]	; (8013d74 <HAL_LTDC_LineEventCallback+0x7c>)
 8013d18:	881b      	ldrh	r3, [r3, #0]
 8013d1a:	4619      	mov	r1, r3
 8013d1c:	6878      	ldr	r0, [r7, #4]
 8013d1e:	f7f1 fbf7 	bl	8005510 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8013d22:	f7fb f833 	bl	800ed8c <_ZN8touchgfx3HAL11getInstanceEv>
 8013d26:	4603      	mov	r3, r0
 8013d28:	4618      	mov	r0, r3
 8013d2a:	f7ff fe32 	bl	8013992 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8013d2e:	f7fe fcd7 	bl	80126e0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8013d32:	f7fb f82b 	bl	800ed8c <_ZN8touchgfx3HAL11getInstanceEv>
 8013d36:	4603      	mov	r3, r0
 8013d38:	4618      	mov	r0, r3
 8013d3a:	f001 f9f5 	bl	8015128 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8013d3e:	2000      	movs	r0, #0
 8013d40:	f7fe f9d8 	bl	80120f4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8013d44:	e00e      	b.n	8013d64 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8013d46:	4b0a      	ldr	r3, [pc, #40]	; (8013d70 <HAL_LTDC_LineEventCallback+0x78>)
 8013d48:	881b      	ldrh	r3, [r3, #0]
 8013d4a:	4619      	mov	r1, r3
 8013d4c:	6878      	ldr	r0, [r7, #4]
 8013d4e:	f7f1 fbdf 	bl	8005510 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8013d52:	2000      	movs	r0, #0
 8013d54:	f7fe f9d9 	bl	801210a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8013d58:	f7fb f818 	bl	800ed8c <_ZN8touchgfx3HAL11getInstanceEv>
 8013d5c:	4603      	mov	r3, r0
 8013d5e:	4618      	mov	r0, r3
 8013d60:	f7ff fdf9 	bl	8013956 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8013d64:	bf00      	nop
 8013d66:	3708      	adds	r7, #8
 8013d68:	46bd      	mov	sp, r7
 8013d6a:	bd80      	pop	{r7, pc}
 8013d6c:	40016800 	.word	0x40016800
 8013d70:	2000bac8 	.word	0x2000bac8
 8013d74:	2000baca 	.word	0x2000baca

08013d78 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8013d78:	8880      	ldrh	r0, [r0, #4]
 8013d7a:	4770      	bx	lr

08013d7c <_ZN8touchgfx17AbstractPartition5clearEv>:
 8013d7c:	2300      	movs	r3, #0
 8013d7e:	8083      	strh	r3, [r0, #4]
 8013d80:	4770      	bx	lr
	...

08013d84 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8013d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d86:	6803      	ldr	r3, [r0, #0]
 8013d88:	460e      	mov	r6, r1
 8013d8a:	2100      	movs	r1, #0
 8013d8c:	4605      	mov	r5, r0
 8013d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d90:	4798      	blx	r3
 8013d92:	4604      	mov	r4, r0
 8013d94:	682b      	ldr	r3, [r5, #0]
 8013d96:	4628      	mov	r0, r5
 8013d98:	1b34      	subs	r4, r6, r4
 8013d9a:	6a1b      	ldr	r3, [r3, #32]
 8013d9c:	b2a4      	uxth	r4, r4
 8013d9e:	4798      	blx	r3
 8013da0:	88ab      	ldrh	r3, [r5, #4]
 8013da2:	fbb4 f4f0 	udiv	r4, r4, r0
 8013da6:	42a3      	cmp	r3, r4
 8013da8:	d805      	bhi.n	8013db6 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 8013daa:	4b0e      	ldr	r3, [pc, #56]	; (8013de4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 8013dac:	211e      	movs	r1, #30
 8013dae:	4a0e      	ldr	r2, [pc, #56]	; (8013de8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8013db0:	480e      	ldr	r0, [pc, #56]	; (8013dec <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 8013db2:	f00f fb41 	bl	8023438 <__assert_func>
 8013db6:	682b      	ldr	r3, [r5, #0]
 8013db8:	2100      	movs	r1, #0
 8013dba:	4628      	mov	r0, r5
 8013dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013dbe:	4798      	blx	r3
 8013dc0:	682b      	ldr	r3, [r5, #0]
 8013dc2:	4607      	mov	r7, r0
 8013dc4:	4628      	mov	r0, r5
 8013dc6:	6a1b      	ldr	r3, [r3, #32]
 8013dc8:	4798      	blx	r3
 8013dca:	1bf3      	subs	r3, r6, r7
 8013dcc:	b29b      	uxth	r3, r3
 8013dce:	fbb3 f2f0 	udiv	r2, r3, r0
 8013dd2:	fb02 3010 	mls	r0, r2, r0, r3
 8013dd6:	b118      	cbz	r0, 8013de0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 8013dd8:	4b05      	ldr	r3, [pc, #20]	; (8013df0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 8013dda:	211f      	movs	r1, #31
 8013ddc:	4a02      	ldr	r2, [pc, #8]	; (8013de8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8013dde:	e7e7      	b.n	8013db0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 8013de0:	4620      	mov	r0, r4
 8013de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013de4:	08025454 	.word	0x08025454
 8013de8:	080255c2 	.word	0x080255c2
 8013dec:	08025469 	.word	0x08025469
 8013df0:	08025497 	.word	0x08025497

08013df4 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8013df4:	b538      	push	{r3, r4, r5, lr}
 8013df6:	6803      	ldr	r3, [r0, #0]
 8013df8:	460d      	mov	r5, r1
 8013dfa:	4604      	mov	r4, r0
 8013dfc:	6a1b      	ldr	r3, [r3, #32]
 8013dfe:	4798      	blx	r3
 8013e00:	4285      	cmp	r5, r0
 8013e02:	d905      	bls.n	8013e10 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8013e04:	4b0c      	ldr	r3, [pc, #48]	; (8013e38 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 8013e06:	212f      	movs	r1, #47	; 0x2f
 8013e08:	4a0c      	ldr	r2, [pc, #48]	; (8013e3c <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8013e0a:	480d      	ldr	r0, [pc, #52]	; (8013e40 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8013e0c:	f00f fb14 	bl	8023438 <__assert_func>
 8013e10:	6823      	ldr	r3, [r4, #0]
 8013e12:	4620      	mov	r0, r4
 8013e14:	88a5      	ldrh	r5, [r4, #4]
 8013e16:	69db      	ldr	r3, [r3, #28]
 8013e18:	4798      	blx	r3
 8013e1a:	4285      	cmp	r5, r0
 8013e1c:	d303      	bcc.n	8013e26 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 8013e1e:	4b09      	ldr	r3, [pc, #36]	; (8013e44 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8013e20:	2130      	movs	r1, #48	; 0x30
 8013e22:	4a06      	ldr	r2, [pc, #24]	; (8013e3c <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8013e24:	e7f1      	b.n	8013e0a <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8013e26:	6823      	ldr	r3, [r4, #0]
 8013e28:	4620      	mov	r0, r4
 8013e2a:	88a1      	ldrh	r1, [r4, #4]
 8013e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e2e:	4798      	blx	r3
 8013e30:	88a3      	ldrh	r3, [r4, #4]
 8013e32:	3301      	adds	r3, #1
 8013e34:	80a3      	strh	r3, [r4, #4]
 8013e36:	bd38      	pop	{r3, r4, r5, pc}
 8013e38:	08025511 	.word	0x08025511
 8013e3c:	08025605 	.word	0x08025605
 8013e40:	08025469 	.word	0x08025469
 8013e44:	08025528 	.word	0x08025528

08013e48 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8013e48:	b570      	push	{r4, r5, r6, lr}
 8013e4a:	6803      	ldr	r3, [r0, #0]
 8013e4c:	4616      	mov	r6, r2
 8013e4e:	4604      	mov	r4, r0
 8013e50:	460d      	mov	r5, r1
 8013e52:	6a1b      	ldr	r3, [r3, #32]
 8013e54:	4798      	blx	r3
 8013e56:	4286      	cmp	r6, r0
 8013e58:	d905      	bls.n	8013e66 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8013e5a:	4b06      	ldr	r3, [pc, #24]	; (8013e74 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8013e5c:	2139      	movs	r1, #57	; 0x39
 8013e5e:	4a06      	ldr	r2, [pc, #24]	; (8013e78 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8013e60:	4806      	ldr	r0, [pc, #24]	; (8013e7c <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 8013e62:	f00f fae9 	bl	8023438 <__assert_func>
 8013e66:	6823      	ldr	r3, [r4, #0]
 8013e68:	4629      	mov	r1, r5
 8013e6a:	4620      	mov	r0, r4
 8013e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013e72:	4718      	bx	r3
 8013e74:	08025511 	.word	0x08025511
 8013e78:	08025578 	.word	0x08025578
 8013e7c:	08025469 	.word	0x08025469

08013e80 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8013e80:	4770      	bx	lr
	...

08013e84 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8013e84:	4a02      	ldr	r2, [pc, #8]	; (8013e90 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8013e86:	6002      	str	r2, [r0, #0]
 8013e88:	2200      	movs	r2, #0
 8013e8a:	8082      	strh	r2, [r0, #4]
 8013e8c:	4770      	bx	lr
 8013e8e:	bf00      	nop
 8013e90:	0802554c 	.word	0x0802554c

08013e94 <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>:
 8013e94:	f8c0 10b8 	str.w	r1, [r0, #184]	; 0xb8
 8013e98:	4770      	bx	lr

08013e9a <_ZNK8touchgfx11BoxProgress8getColorEv>:
 8013e9a:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
 8013e9e:	4770      	bx	lr

08013ea0 <_ZN8touchgfx11BoxProgress8setAlphaEh>:
 8013ea0:	f880 10b6 	strb.w	r1, [r0, #182]	; 0xb6
 8013ea4:	4770      	bx	lr

08013ea6 <_ZNK8touchgfx11BoxProgress8getAlphaEv>:
 8013ea6:	f890 00b6 	ldrb.w	r0, [r0, #182]	; 0xb6
 8013eaa:	4770      	bx	lr

08013eac <_ZN8touchgfx11BoxProgressD1Ev>:
 8013eac:	4b03      	ldr	r3, [pc, #12]	; (8013ebc <_ZN8touchgfx11BoxProgressD1Ev+0x10>)
 8013eae:	b510      	push	{r4, lr}
 8013eb0:	4604      	mov	r4, r0
 8013eb2:	6003      	str	r3, [r0, #0]
 8013eb4:	f000 f8b6 	bl	8014024 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 8013eb8:	4620      	mov	r0, r4
 8013eba:	bd10      	pop	{r4, pc}
 8013ebc:	0802564c 	.word	0x0802564c

08013ec0 <_ZN8touchgfx11BoxProgressD0Ev>:
 8013ec0:	b510      	push	{r4, lr}
 8013ec2:	4604      	mov	r4, r0
 8013ec4:	f7ff fff2 	bl	8013eac <_ZN8touchgfx11BoxProgressD1Ev>
 8013ec8:	21c0      	movs	r1, #192	; 0xc0
 8013eca:	4620      	mov	r0, r4
 8013ecc:	f00f fa89 	bl	80233e2 <_ZdlPvj>
 8013ed0:	4620      	mov	r0, r4
 8013ed2:	bd10      	pop	{r4, pc}

08013ed4 <_ZN8touchgfx11BoxProgressC1Ev>:
 8013ed4:	b510      	push	{r4, lr}
 8013ed6:	4604      	mov	r4, r0
 8013ed8:	f000 f8b8 	bl	801404c <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 8013edc:	2201      	movs	r2, #1
 8013ede:	4b16      	ldr	r3, [pc, #88]	; (8013f38 <_ZN8touchgfx11BoxProgressC1Ev+0x64>)
 8013ee0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013ee4:	f104 0190 	add.w	r1, r4, #144	; 0x90
 8013ee8:	f884 20b5 	strb.w	r2, [r4, #181]	; 0xb5
 8013eec:	4a13      	ldr	r2, [pc, #76]	; (8013f3c <_ZN8touchgfx11BoxProgressC1Ev+0x68>)
 8013eee:	6023      	str	r3, [r4, #0]
 8013ef0:	2300      	movs	r3, #0
 8013ef2:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8013ef6:	22ff      	movs	r2, #255	; 0xff
 8013ef8:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
 8013efc:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
 8013f00:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
 8013f04:	f8a4 309a 	strh.w	r3, [r4, #154]	; 0x9a
 8013f08:	f8a4 309c 	strh.w	r3, [r4, #156]	; 0x9c
 8013f0c:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 8013f10:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 8013f14:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 8013f18:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 8013f1c:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 8013f20:	f884 20b6 	strb.w	r2, [r4, #182]	; 0xb6
 8013f24:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 8013f28:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
 8013f2c:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
 8013f30:	f000 fa3a 	bl	80143a8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8013f34:	4620      	mov	r0, r4
 8013f36:	bd10      	pop	{r4, pc}
 8013f38:	0802564c 	.word	0x0802564c
 8013f3c:	0802678c 	.word	0x0802678c

08013f40 <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>:
 8013f40:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8013f44:	4617      	mov	r7, r2
 8013f46:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 8013f4a:	2200      	movs	r2, #0
 8013f4c:	4604      	mov	r4, r0
 8013f4e:	460e      	mov	r6, r1
 8013f50:	4698      	mov	r8, r3
 8013f52:	4611      	mov	r1, r2
 8013f54:	9500      	str	r5, [sp, #0]
 8013f56:	3090      	adds	r0, #144	; 0x90
 8013f58:	f7fb fbe8 	bl	800f72c <_ZN8touchgfx8Drawable11setPositionEssss>
 8013f5c:	4643      	mov	r3, r8
 8013f5e:	463a      	mov	r2, r7
 8013f60:	4631      	mov	r1, r6
 8013f62:	4620      	mov	r0, r4
 8013f64:	9508      	str	r5, [sp, #32]
 8013f66:	b002      	add	sp, #8
 8013f68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013f6c:	f000 b87d 	b.w	801406a <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

08013f70 <_ZN8touchgfx11BoxProgress8setValueEi>:
 8013f70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013f72:	4604      	mov	r4, r0
 8013f74:	f000 f8c3 	bl	80140fe <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 8013f78:	f104 0590 	add.w	r5, r4, #144	; 0x90
 8013f7c:	4628      	mov	r0, r5
 8013f7e:	f003 fe95 	bl	8017cac <_ZNK8touchgfx8Drawable10invalidateEv>
 8013f82:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8013f86:	2b03      	cmp	r3, #3
 8013f88:	d814      	bhi.n	8013fb4 <_ZN8touchgfx11BoxProgress8setValueEi+0x44>
 8013f8a:	e8df f003 	tbb	[pc, r3]
 8013f8e:	0202      	.short	0x0202
 8013f90:	1010      	.short	0x1010
 8013f92:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 8013f96:	4620      	mov	r0, r4
 8013f98:	f000 f90a 	bl	80141b0 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 8013f9c:	b200      	sxth	r0, r0
 8013f9e:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8013fa2:	2b03      	cmp	r3, #3
 8013fa4:	d81a      	bhi.n	8013fdc <_ZN8touchgfx11BoxProgress8setValueEi+0x6c>
 8013fa6:	e8df f003 	tbb	[pc, r3]
 8013faa:	0e07      	.short	0x0e07
 8013fac:	231f      	.short	0x231f
 8013fae:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 8013fb2:	e7f0      	b.n	8013f96 <_ZN8touchgfx11BoxProgress8setValueEi+0x26>
 8013fb4:	2000      	movs	r0, #0
 8013fb6:	e7f2      	b.n	8013f9e <_ZN8touchgfx11BoxProgress8setValueEi+0x2e>
 8013fb8:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8013fbc:	9300      	str	r3, [sp, #0]
 8013fbe:	4603      	mov	r3, r0
 8013fc0:	2200      	movs	r2, #0
 8013fc2:	2100      	movs	r1, #0
 8013fc4:	e007      	b.n	8013fd6 <_ZN8touchgfx11BoxProgress8setValueEi+0x66>
 8013fc6:	8921      	ldrh	r1, [r4, #8]
 8013fc8:	2200      	movs	r2, #0
 8013fca:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8013fce:	1a09      	subs	r1, r1, r0
 8013fd0:	9300      	str	r3, [sp, #0]
 8013fd2:	4603      	mov	r3, r0
 8013fd4:	b209      	sxth	r1, r1
 8013fd6:	4628      	mov	r0, r5
 8013fd8:	f7fb fba8 	bl	800f72c <_ZN8touchgfx8Drawable11setPositionEssss>
 8013fdc:	4628      	mov	r0, r5
 8013fde:	b003      	add	sp, #12
 8013fe0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013fe4:	f003 be62 	b.w	8017cac <_ZNK8touchgfx8Drawable10invalidateEv>
 8013fe8:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8013fec:	9000      	str	r0, [sp, #0]
 8013fee:	e7e7      	b.n	8013fc0 <_ZN8touchgfx11BoxProgress8setValueEi+0x50>
 8013ff0:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8013ff4:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8013ff8:	1a12      	subs	r2, r2, r0
 8013ffa:	9000      	str	r0, [sp, #0]
 8013ffc:	b212      	sxth	r2, r2
 8013ffe:	e7e0      	b.n	8013fc2 <_ZN8touchgfx11BoxProgress8setValueEi+0x52>

08014000 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>:
 8014000:	b570      	push	{r4, r5, r6, lr}
 8014002:	6803      	ldr	r3, [r0, #0]
 8014004:	4604      	mov	r4, r0
 8014006:	f880 108e 	strb.w	r1, [r0, #142]	; 0x8e
 801400a:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	; 0xac
 801400e:	4798      	blx	r3
 8014010:	4601      	mov	r1, r0
 8014012:	462b      	mov	r3, r5
 8014014:	4620      	mov	r0, r4
 8014016:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801401a:	4718      	bx	r3

0801401c <_ZNK8touchgfx25AbstractDirectionProgress12getDirectionEv>:
 801401c:	f890 008e 	ldrb.w	r0, [r0, #142]	; 0x8e
 8014020:	4770      	bx	lr
	...

08014024 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>:
 8014024:	4b03      	ldr	r3, [pc, #12]	; (8014034 <_ZN8touchgfx25AbstractDirectionProgressD1Ev+0x10>)
 8014026:	b510      	push	{r4, lr}
 8014028:	4604      	mov	r4, r0
 801402a:	6003      	str	r3, [r0, #0]
 801402c:	f000 f81c 	bl	8014068 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 8014030:	4620      	mov	r0, r4
 8014032:	bd10      	pop	{r4, pc}
 8014034:	08025724 	.word	0x08025724

08014038 <_ZN8touchgfx25AbstractDirectionProgressD0Ev>:
 8014038:	b510      	push	{r4, lr}
 801403a:	4604      	mov	r4, r0
 801403c:	f7ff fff2 	bl	8014024 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 8014040:	2190      	movs	r1, #144	; 0x90
 8014042:	4620      	mov	r0, r4
 8014044:	f00f f9cd 	bl	80233e2 <_ZdlPvj>
 8014048:	4620      	mov	r0, r4
 801404a:	bd10      	pop	{r4, pc}

0801404c <_ZN8touchgfx25AbstractDirectionProgressC1Ev>:
 801404c:	b510      	push	{r4, lr}
 801404e:	4604      	mov	r4, r0
 8014050:	f000 f8ce 	bl	80141f0 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 8014054:	4b03      	ldr	r3, [pc, #12]	; (8014064 <_ZN8touchgfx25AbstractDirectionProgressC1Ev+0x18>)
 8014056:	2100      	movs	r1, #0
 8014058:	4620      	mov	r0, r4
 801405a:	6023      	str	r3, [r4, #0]
 801405c:	f7ff ffd0 	bl	8014000 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
 8014060:	4620      	mov	r0, r4
 8014062:	bd10      	pop	{r4, pc}
 8014064:	08025724 	.word	0x08025724

08014068 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 8014068:	4770      	bx	lr

0801406a <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 801406a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801406e:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
 8014072:	4604      	mov	r4, r0
 8014074:	460e      	mov	r6, r1
 8014076:	4698      	mov	r8, r3
 8014078:	9700      	str	r7, [sp, #0]
 801407a:	3058      	adds	r0, #88	; 0x58
 801407c:	4615      	mov	r5, r2
 801407e:	f7fb fb55 	bl	800f72c <_ZN8touchgfx8Drawable11setPositionEssss>
 8014082:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8014086:	eb06 0308 	add.w	r3, r6, r8
 801408a:	429a      	cmp	r2, r3
 801408c:	eb05 0207 	add.w	r2, r5, r7
 8014090:	bfb8      	it	lt
 8014092:	8123      	strhlt	r3, [r4, #8]
 8014094:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8014098:	4293      	cmp	r3, r2
 801409a:	bfb8      	it	lt
 801409c:	8162      	strhlt	r2, [r4, #10]
 801409e:	b002      	add	sp, #8
 80140a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080140a4 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 80140a4:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	; 0x5c
 80140a8:	4770      	bx	lr

080140aa <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 80140aa:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	; 0x5e
 80140ae:	4770      	bx	lr

080140b0 <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 80140b0:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	; 0x60
 80140b4:	4770      	bx	lr

080140b6 <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 80140b6:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	; 0x62
 80140ba:	4770      	bx	lr

080140bc <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_RtS2_>:
 80140bc:	b510      	push	{r4, lr}
 80140be:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 80140c2:	800c      	strh	r4, [r1, #0]
 80140c4:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 80140c8:	8011      	strh	r1, [r2, #0]
 80140ca:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 80140ce:	801a      	strh	r2, [r3, #0]
 80140d0:	9b02      	ldr	r3, [sp, #8]
 80140d2:	f8b0 208c 	ldrh.w	r2, [r0, #140]	; 0x8c
 80140d6:	801a      	strh	r2, [r3, #0]
 80140d8:	bd10      	pop	{r4, pc}

080140da <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_Rt>:
 80140da:	b510      	push	{r4, lr}
 80140dc:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 80140e0:	800c      	strh	r4, [r1, #0]
 80140e2:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 80140e6:	8011      	strh	r1, [r2, #0]
 80140e8:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 80140ec:	801a      	strh	r2, [r3, #0]
 80140ee:	bd10      	pop	{r4, pc}

080140f0 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_>:
 80140f0:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 80140f4:	800b      	strh	r3, [r1, #0]
 80140f6:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 80140fa:	8013      	strh	r3, [r2, #0]
 80140fc:	4770      	bx	lr

080140fe <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 80140fe:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 8014102:	4299      	cmp	r1, r3
 8014104:	bfb8      	it	lt
 8014106:	4619      	movlt	r1, r3
 8014108:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 801410c:	4299      	cmp	r1, r3
 801410e:	bfa8      	it	ge
 8014110:	4619      	movge	r1, r3
 8014112:	f8a0 1088 	strh.w	r1, [r0, #136]	; 0x88
 8014116:	4770      	bx	lr

08014118 <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 8014118:	f8b0 0088 	ldrh.w	r0, [r0, #136]	; 0x88
 801411c:	4770      	bx	lr

0801411e <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 801411e:	b510      	push	{r4, lr}
 8014120:	4604      	mov	r4, r0
 8014122:	2190      	movs	r1, #144	; 0x90
 8014124:	f00f f95d 	bl	80233e2 <_ZdlPvj>
 8014128:	4620      	mov	r0, r4
 801412a:	bd10      	pop	{r4, pc}

0801412c <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 801412c:	b510      	push	{r4, lr}
 801412e:	4604      	mov	r4, r0
 8014130:	302c      	adds	r0, #44	; 0x2c
 8014132:	f002 f8df 	bl	80162f4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8014136:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8014138:	8123      	strh	r3, [r4, #8]
 801413a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801413c:	8163      	strh	r3, [r4, #10]
 801413e:	bd10      	pop	{r4, pc}

08014140 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>:
 8014140:	4291      	cmp	r1, r2
 8014142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014146:	4604      	mov	r4, r0
 8014148:	460e      	mov	r6, r1
 801414a:	4615      	mov	r5, r2
 801414c:	4698      	mov	r8, r3
 801414e:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 8014152:	db05      	blt.n	8014160 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x20>
 8014154:	4b12      	ldr	r3, [pc, #72]	; (80141a0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x60>)
 8014156:	214d      	movs	r1, #77	; 0x4d
 8014158:	4a12      	ldr	r2, [pc, #72]	; (80141a4 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x64>)
 801415a:	4813      	ldr	r0, [pc, #76]	; (80141a8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x68>)
 801415c:	f00f f96c 	bl	8023438 <__assert_func>
 8014160:	f8a4 1084 	strh.w	r1, [r4, #132]	; 0x84
 8014164:	f8a4 2086 	strh.w	r2, [r4, #134]	; 0x86
 8014168:	6803      	ldr	r3, [r0, #0]
 801416a:	f8b0 1088 	ldrh.w	r1, [r0, #136]	; 0x88
 801416e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8014172:	4798      	blx	r3
 8014174:	f1b8 0f00 	cmp.w	r8, #0
 8014178:	d10c      	bne.n	8014194 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x54>
 801417a:	1bad      	subs	r5, r5, r6
 801417c:	f8a4 508a 	strh.w	r5, [r4, #138]	; 0x8a
 8014180:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
 8014184:	f8a4 708c 	strh.w	r7, [r4, #140]	; 0x8c
 8014188:	42bb      	cmp	r3, r7
 801418a:	d806      	bhi.n	801419a <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x5a>
 801418c:	4b07      	ldr	r3, [pc, #28]	; (80141ac <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x6c>)
 801418e:	215a      	movs	r1, #90	; 0x5a
 8014190:	4a04      	ldr	r2, [pc, #16]	; (80141a4 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x64>)
 8014192:	e7e2      	b.n	801415a <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x1a>
 8014194:	f8a4 808a 	strh.w	r8, [r4, #138]	; 0x8a
 8014198:	e7f2      	b.n	8014180 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x40>
 801419a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801419e:	bf00      	nop
 80141a0:	080257e4 	.word	0x080257e4
 80141a4:	08025920 	.word	0x08025920
 80141a8:	080257ee 	.word	0x080257ee
 80141ac:	08025845 	.word	0x08025845

080141b0 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 80141b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80141b2:	4604      	mov	r4, r0
 80141b4:	460d      	mov	r5, r1
 80141b6:	b1b9      	cbz	r1, 80141e8 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x38>
 80141b8:	f8b0 608c 	ldrh.w	r6, [r0, #140]	; 0x8c
 80141bc:	ab01      	add	r3, sp, #4
 80141be:	f9b0 0084 	ldrsh.w	r0, [r0, #132]	; 0x84
 80141c2:	f9b4 2086 	ldrsh.w	r2, [r4, #134]	; 0x86
 80141c6:	f8b4 108a 	ldrh.w	r1, [r4, #138]	; 0x8a
 80141ca:	f8b4 7088 	ldrh.w	r7, [r4, #136]	; 0x88
 80141ce:	1a12      	subs	r2, r2, r0
 80141d0:	1b89      	subs	r1, r1, r6
 80141d2:	1a38      	subs	r0, r7, r0
 80141d4:	f003 feab 	bl	8017f2e <_ZN8touchgfx6muldivElllRl>
 80141d8:	4629      	mov	r1, r5
 80141da:	ab01      	add	r3, sp, #4
 80141dc:	f8b4 208a 	ldrh.w	r2, [r4, #138]	; 0x8a
 80141e0:	4430      	add	r0, r6
 80141e2:	f003 fea4 	bl	8017f2e <_ZN8touchgfx6muldivElllRl>
 80141e6:	b285      	uxth	r5, r0
 80141e8:	4628      	mov	r0, r5
 80141ea:	b003      	add	sp, #12
 80141ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080141f0 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 80141f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80141f4:	4604      	mov	r4, r0
 80141f6:	2600      	movs	r6, #0
 80141f8:	f7fb fa4a 	bl	800f690 <_ZN8touchgfx8DrawableC1Ev>
 80141fc:	4b1b      	ldr	r3, [pc, #108]	; (801426c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x7c>)
 80141fe:	4625      	mov	r5, r4
 8014200:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8014204:	af02      	add	r7, sp, #8
 8014206:	62a6      	str	r6, [r4, #40]	; 0x28
 8014208:	f845 3b2c 	str.w	r3, [r5], #44
 801420c:	4628      	mov	r0, r5
 801420e:	f827 8d04 	strh.w	r8, [r7, #-4]!
 8014212:	f7fb fa3d 	bl	800f690 <_ZN8touchgfx8DrawableC1Ev>
 8014216:	4b16      	ldr	r3, [pc, #88]	; (8014270 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x80>)
 8014218:	4639      	mov	r1, r7
 801421a:	f104 0758 	add.w	r7, r4, #88	; 0x58
 801421e:	4628      	mov	r0, r5
 8014220:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014222:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
 8014226:	f884 8054 	strb.w	r8, [r4, #84]	; 0x54
 801422a:	f002 f863 	bl	80162f4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801422e:	4638      	mov	r0, r7
 8014230:	f7fb fa2e 	bl	800f690 <_ZN8touchgfx8DrawableC1Ev>
 8014234:	4b0f      	ldr	r3, [pc, #60]	; (8014274 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x84>)
 8014236:	4632      	mov	r2, r6
 8014238:	4631      	mov	r1, r6
 801423a:	65a3      	str	r3, [r4, #88]	; 0x58
 801423c:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 8014240:	4628      	mov	r0, r5
 8014242:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
 8014246:	f8a4 608c 	strh.w	r6, [r4, #140]	; 0x8c
 801424a:	e9c4 3321 	strd	r3, r3, [r4, #132]	; 0x84
 801424e:	f7fb fab8 	bl	800f7c2 <_ZN8touchgfx8Drawable5setXYEss>
 8014252:	4629      	mov	r1, r5
 8014254:	4620      	mov	r0, r4
 8014256:	f000 f8a7 	bl	80143a8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801425a:	4620      	mov	r0, r4
 801425c:	4639      	mov	r1, r7
 801425e:	f000 f8a3 	bl	80143a8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014262:	4620      	mov	r0, r4
 8014264:	b002      	add	sp, #8
 8014266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801426a:	bf00      	nop
 801426c:	08025868 	.word	0x08025868
 8014270:	080268d8 	.word	0x080268d8
 8014274:	08025a54 	.word	0x08025a54

08014278 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8014278:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801427a:	2000      	movs	r0, #0
 801427c:	b12b      	cbz	r3, 801428a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 801427e:	b920      	cbnz	r0, 801428a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8014280:	1a5a      	subs	r2, r3, r1
 8014282:	699b      	ldr	r3, [r3, #24]
 8014284:	4250      	negs	r0, r2
 8014286:	4150      	adcs	r0, r2
 8014288:	e7f8      	b.n	801427c <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 801428a:	4770      	bx	lr

0801428c <_ZN8touchgfx9Container9removeAllEv>:
 801428c:	2200      	movs	r2, #0
 801428e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014290:	b123      	cbz	r3, 801429c <_ZN8touchgfx9Container9removeAllEv+0x10>
 8014292:	6999      	ldr	r1, [r3, #24]
 8014294:	6281      	str	r1, [r0, #40]	; 0x28
 8014296:	e9c3 2205 	strd	r2, r2, [r3, #20]
 801429a:	e7f8      	b.n	801428e <_ZN8touchgfx9Container9removeAllEv+0x2>
 801429c:	4770      	bx	lr

0801429e <_ZN8touchgfx9Container6unlinkEv>:
 801429e:	2300      	movs	r3, #0
 80142a0:	6283      	str	r3, [r0, #40]	; 0x28
 80142a2:	4770      	bx	lr

080142a4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 80142a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142a8:	461f      	mov	r7, r3
 80142aa:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80142ae:	460d      	mov	r5, r1
 80142b0:	4616      	mov	r6, r2
 80142b2:	b103      	cbz	r3, 80142b6 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 80142b4:	6038      	str	r0, [r7, #0]
 80142b6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80142b8:	b314      	cbz	r4, 8014300 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 80142ba:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80142be:	b1eb      	cbz	r3, 80142fc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80142c0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80142c4:	428d      	cmp	r5, r1
 80142c6:	db19      	blt.n	80142fc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80142c8:	b289      	uxth	r1, r1
 80142ca:	8923      	ldrh	r3, [r4, #8]
 80142cc:	440b      	add	r3, r1
 80142ce:	b21b      	sxth	r3, r3
 80142d0:	429d      	cmp	r5, r3
 80142d2:	da13      	bge.n	80142fc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80142d4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80142d8:	4296      	cmp	r6, r2
 80142da:	db0f      	blt.n	80142fc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80142dc:	b292      	uxth	r2, r2
 80142de:	8963      	ldrh	r3, [r4, #10]
 80142e0:	4413      	add	r3, r2
 80142e2:	b21b      	sxth	r3, r3
 80142e4:	429e      	cmp	r6, r3
 80142e6:	da09      	bge.n	80142fc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80142e8:	6823      	ldr	r3, [r4, #0]
 80142ea:	1ab2      	subs	r2, r6, r2
 80142ec:	1a69      	subs	r1, r5, r1
 80142ee:	4620      	mov	r0, r4
 80142f0:	f8d3 801c 	ldr.w	r8, [r3, #28]
 80142f4:	b212      	sxth	r2, r2
 80142f6:	463b      	mov	r3, r7
 80142f8:	b209      	sxth	r1, r1
 80142fa:	47c0      	blx	r8
 80142fc:	69a4      	ldr	r4, [r4, #24]
 80142fe:	e7db      	b.n	80142b8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8014300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014304 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8014304:	2200      	movs	r2, #0
 8014306:	8002      	strh	r2, [r0, #0]
 8014308:	8042      	strh	r2, [r0, #2]
 801430a:	8082      	strh	r2, [r0, #4]
 801430c:	80c2      	strh	r2, [r0, #6]
 801430e:	4770      	bx	lr

08014310 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8014310:	b570      	push	{r4, r5, r6, lr}
 8014312:	460d      	mov	r5, r1
 8014314:	4616      	mov	r6, r2
 8014316:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8014318:	b13c      	cbz	r4, 801432a <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 801431a:	6823      	ldr	r3, [r4, #0]
 801431c:	4620      	mov	r0, r4
 801431e:	4632      	mov	r2, r6
 8014320:	4629      	mov	r1, r5
 8014322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014324:	4798      	blx	r3
 8014326:	69a4      	ldr	r4, [r4, #24]
 8014328:	e7f6      	b.n	8014318 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 801432a:	bd70      	pop	{r4, r5, r6, pc}

0801432c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 801432c:	b538      	push	{r3, r4, r5, lr}
 801432e:	460d      	mov	r5, r1
 8014330:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8014332:	b134      	cbz	r4, 8014342 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8014334:	682b      	ldr	r3, [r5, #0]
 8014336:	4621      	mov	r1, r4
 8014338:	4628      	mov	r0, r5
 801433a:	689b      	ldr	r3, [r3, #8]
 801433c:	4798      	blx	r3
 801433e:	69a4      	ldr	r4, [r4, #24]
 8014340:	e7f7      	b.n	8014332 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8014342:	bd38      	pop	{r3, r4, r5, pc}

08014344 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8014344:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014346:	b19b      	cbz	r3, 8014370 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8014348:	428b      	cmp	r3, r1
 801434a:	d109      	bne.n	8014360 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 801434c:	699a      	ldr	r2, [r3, #24]
 801434e:	2100      	movs	r1, #0
 8014350:	6159      	str	r1, [r3, #20]
 8014352:	6282      	str	r2, [r0, #40]	; 0x28
 8014354:	b902      	cbnz	r2, 8014358 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8014356:	4770      	bx	lr
 8014358:	6199      	str	r1, [r3, #24]
 801435a:	4770      	bx	lr
 801435c:	4613      	mov	r3, r2
 801435e:	b13a      	cbz	r2, 8014370 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8014360:	699a      	ldr	r2, [r3, #24]
 8014362:	428a      	cmp	r2, r1
 8014364:	d1fa      	bne.n	801435c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8014366:	698a      	ldr	r2, [r1, #24]
 8014368:	619a      	str	r2, [r3, #24]
 801436a:	2300      	movs	r3, #0
 801436c:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8014370:	4770      	bx	lr

08014372 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8014372:	b410      	push	{r4}
 8014374:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014376:	4604      	mov	r4, r0
 8014378:	b92b      	cbnz	r3, 8014386 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 801437a:	6803      	ldr	r3, [r0, #0]
 801437c:	4611      	mov	r1, r2
 801437e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014382:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014384:	4718      	bx	r3
 8014386:	b941      	cbnz	r1, 801439a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8014388:	6193      	str	r3, [r2, #24]
 801438a:	6282      	str	r2, [r0, #40]	; 0x28
 801438c:	6154      	str	r4, [r2, #20]
 801438e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014392:	4770      	bx	lr
 8014394:	4603      	mov	r3, r0
 8014396:	2800      	cmp	r0, #0
 8014398:	d0f9      	beq.n	801438e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 801439a:	4299      	cmp	r1, r3
 801439c:	6998      	ldr	r0, [r3, #24]
 801439e:	d1f9      	bne.n	8014394 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 80143a0:	6190      	str	r0, [r2, #24]
 80143a2:	618a      	str	r2, [r1, #24]
 80143a4:	e7f2      	b.n	801438c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

080143a8 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 80143a8:	4288      	cmp	r0, r1
 80143aa:	b508      	push	{r3, lr}
 80143ac:	d105      	bne.n	80143ba <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 80143ae:	4b11      	ldr	r3, [pc, #68]	; (80143f4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 80143b0:	2123      	movs	r1, #35	; 0x23
 80143b2:	4a11      	ldr	r2, [pc, #68]	; (80143f8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80143b4:	4811      	ldr	r0, [pc, #68]	; (80143fc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 80143b6:	f00f f83f 	bl	8023438 <__assert_func>
 80143ba:	694b      	ldr	r3, [r1, #20]
 80143bc:	b11b      	cbz	r3, 80143c6 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 80143be:	4b10      	ldr	r3, [pc, #64]	; (8014400 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 80143c0:	2124      	movs	r1, #36	; 0x24
 80143c2:	4a0d      	ldr	r2, [pc, #52]	; (80143f8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80143c4:	e7f6      	b.n	80143b4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 80143c6:	e9c1 0305 	strd	r0, r3, [r1, #20]
 80143ca:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80143cc:	b913      	cbnz	r3, 80143d4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 80143ce:	6281      	str	r1, [r0, #40]	; 0x28
 80143d0:	bd08      	pop	{r3, pc}
 80143d2:	4613      	mov	r3, r2
 80143d4:	699a      	ldr	r2, [r3, #24]
 80143d6:	b12a      	cbz	r2, 80143e4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 80143d8:	428b      	cmp	r3, r1
 80143da:	d1fa      	bne.n	80143d2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 80143dc:	4b09      	ldr	r3, [pc, #36]	; (8014404 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 80143de:	2135      	movs	r1, #53	; 0x35
 80143e0:	4a05      	ldr	r2, [pc, #20]	; (80143f8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80143e2:	e7e7      	b.n	80143b4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 80143e4:	428b      	cmp	r3, r1
 80143e6:	d103      	bne.n	80143f0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 80143e8:	4b06      	ldr	r3, [pc, #24]	; (8014404 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 80143ea:	2138      	movs	r1, #56	; 0x38
 80143ec:	4a02      	ldr	r2, [pc, #8]	; (80143f8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80143ee:	e7e1      	b.n	80143b4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 80143f0:	6199      	str	r1, [r3, #24]
 80143f2:	e7ed      	b.n	80143d0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 80143f4:	08025981 	.word	0x08025981
 80143f8:	08025ad8 	.word	0x08025ad8
 80143fc:	080259ad 	.word	0x080259ad
 8014400:	080259e0 	.word	0x080259e0
 8014404:	08025a16 	.word	0x08025a16

08014408 <_ZN8touchgfx4RectaNERKS0_>:
 8014408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801440c:	888b      	ldrh	r3, [r1, #4]
 801440e:	f9b1 9000 	ldrsh.w	r9, [r1]
 8014412:	f9b0 a000 	ldrsh.w	sl, [r0]
 8014416:	444b      	add	r3, r9
 8014418:	b29b      	uxth	r3, r3
 801441a:	fa0f f883 	sxth.w	r8, r3
 801441e:	45c2      	cmp	sl, r8
 8014420:	da30      	bge.n	8014484 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8014422:	8882      	ldrh	r2, [r0, #4]
 8014424:	4452      	add	r2, sl
 8014426:	b292      	uxth	r2, r2
 8014428:	fa0f fe82 	sxth.w	lr, r2
 801442c:	45f1      	cmp	r9, lr
 801442e:	da29      	bge.n	8014484 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8014430:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8014434:	88cc      	ldrh	r4, [r1, #6]
 8014436:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801443a:	442c      	add	r4, r5
 801443c:	b224      	sxth	r4, r4
 801443e:	42a6      	cmp	r6, r4
 8014440:	da20      	bge.n	8014484 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8014442:	88c7      	ldrh	r7, [r0, #6]
 8014444:	4437      	add	r7, r6
 8014446:	b2bf      	uxth	r7, r7
 8014448:	fa0f fc87 	sxth.w	ip, r7
 801444c:	4565      	cmp	r5, ip
 801444e:	da19      	bge.n	8014484 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8014450:	45ca      	cmp	sl, r9
 8014452:	4654      	mov	r4, sl
 8014454:	bfb8      	it	lt
 8014456:	464c      	movlt	r4, r9
 8014458:	42b5      	cmp	r5, r6
 801445a:	bfb8      	it	lt
 801445c:	4635      	movlt	r5, r6
 801445e:	45f0      	cmp	r8, lr
 8014460:	bfc8      	it	gt
 8014462:	4613      	movgt	r3, r2
 8014464:	1b1b      	subs	r3, r3, r4
 8014466:	8083      	strh	r3, [r0, #4]
 8014468:	88ca      	ldrh	r2, [r1, #6]
 801446a:	884b      	ldrh	r3, [r1, #2]
 801446c:	8004      	strh	r4, [r0, #0]
 801446e:	4413      	add	r3, r2
 8014470:	8045      	strh	r5, [r0, #2]
 8014472:	b29b      	uxth	r3, r3
 8014474:	b21a      	sxth	r2, r3
 8014476:	4594      	cmp	ip, r2
 8014478:	bfb8      	it	lt
 801447a:	463b      	movlt	r3, r7
 801447c:	1b5b      	subs	r3, r3, r5
 801447e:	80c3      	strh	r3, [r0, #6]
 8014480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014484:	2300      	movs	r3, #0
 8014486:	8003      	strh	r3, [r0, #0]
 8014488:	8043      	strh	r3, [r0, #2]
 801448a:	8083      	strh	r3, [r0, #4]
 801448c:	80c3      	strh	r3, [r0, #6]
 801448e:	e7f7      	b.n	8014480 <_ZN8touchgfx4RectaNERKS0_+0x78>

08014490 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8014490:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8014494:	b12b      	cbz	r3, 80144a2 <_ZNK8touchgfx4Rect7isEmptyEv+0x12>
 8014496:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 801449a:	fab0 f080 	clz	r0, r0
 801449e:	0940      	lsrs	r0, r0, #5
 80144a0:	4770      	bx	lr
 80144a2:	2001      	movs	r0, #1
 80144a4:	4770      	bx	lr

080144a6 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 80144a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80144aa:	2300      	movs	r3, #0
 80144ac:	4604      	mov	r4, r0
 80144ae:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80144b0:	8003      	strh	r3, [r0, #0]
 80144b2:	8043      	strh	r3, [r0, #2]
 80144b4:	8083      	strh	r3, [r0, #4]
 80144b6:	80c3      	strh	r3, [r0, #6]
 80144b8:	2d00      	cmp	r5, #0
 80144ba:	d040      	beq.n	801453e <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 80144bc:	1d28      	adds	r0, r5, #4
 80144be:	f7ff ffe7 	bl	8014490 <_ZNK8touchgfx4Rect7isEmptyEv>
 80144c2:	b988      	cbnz	r0, 80144e8 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80144c4:	4620      	mov	r0, r4
 80144c6:	f7ff ffe3 	bl	8014490 <_ZNK8touchgfx4Rect7isEmptyEv>
 80144ca:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80144ce:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80144d2:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 80144d6:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 80144da:	b138      	cbz	r0, 80144ec <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 80144dc:	8022      	strh	r2, [r4, #0]
 80144de:	8063      	strh	r3, [r4, #2]
 80144e0:	f8a4 e004 	strh.w	lr, [r4, #4]
 80144e4:	f8a4 c006 	strh.w	ip, [r4, #6]
 80144e8:	69ad      	ldr	r5, [r5, #24]
 80144ea:	e7e5      	b.n	80144b8 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 80144ec:	f9b4 0000 	ldrsh.w	r0, [r4]
 80144f0:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80144f4:	4290      	cmp	r0, r2
 80144f6:	4607      	mov	r7, r0
 80144f8:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 80144fc:	460e      	mov	r6, r1
 80144fe:	bfa8      	it	ge
 8014500:	4617      	movge	r7, r2
 8014502:	4299      	cmp	r1, r3
 8014504:	4472      	add	r2, lr
 8014506:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 801450a:	bfa8      	it	ge
 801450c:	461e      	movge	r6, r3
 801450e:	4440      	add	r0, r8
 8014510:	4471      	add	r1, lr
 8014512:	4463      	add	r3, ip
 8014514:	b200      	sxth	r0, r0
 8014516:	8027      	strh	r7, [r4, #0]
 8014518:	b212      	sxth	r2, r2
 801451a:	8066      	strh	r6, [r4, #2]
 801451c:	b209      	sxth	r1, r1
 801451e:	b21b      	sxth	r3, r3
 8014520:	4290      	cmp	r0, r2
 8014522:	bfac      	ite	ge
 8014524:	ebc7 0200 	rsbge	r2, r7, r0
 8014528:	ebc7 0202 	rsblt	r2, r7, r2
 801452c:	4299      	cmp	r1, r3
 801452e:	bfac      	ite	ge
 8014530:	ebc6 0301 	rsbge	r3, r6, r1
 8014534:	ebc6 0303 	rsblt	r3, r6, r3
 8014538:	80a2      	strh	r2, [r4, #4]
 801453a:	80e3      	strh	r3, [r4, #6]
 801453c:	e7d4      	b.n	80144e8 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801453e:	4620      	mov	r0, r4
 8014540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014544 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8014544:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8014548:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801454c:	b383      	cbz	r3, 80145b0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801454e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8014550:	b374      	cbz	r4, 80145b0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8014552:	f9b1 5000 	ldrsh.w	r5, [r1]
 8014556:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 801455a:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 801455e:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8014562:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8014566:	b303      	cbz	r3, 80145aa <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8014568:	4668      	mov	r0, sp
 801456a:	1d21      	adds	r1, r4, #4
 801456c:	f8ad 5000 	strh.w	r5, [sp]
 8014570:	f8ad 6002 	strh.w	r6, [sp, #2]
 8014574:	f8ad 7004 	strh.w	r7, [sp, #4]
 8014578:	f8ad 8006 	strh.w	r8, [sp, #6]
 801457c:	f7ff ff44 	bl	8014408 <_ZN8touchgfx4RectaNERKS0_>
 8014580:	4668      	mov	r0, sp
 8014582:	f7ff ff85 	bl	8014490 <_ZNK8touchgfx4Rect7isEmptyEv>
 8014586:	b980      	cbnz	r0, 80145aa <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8014588:	f8bd 3000 	ldrh.w	r3, [sp]
 801458c:	4669      	mov	r1, sp
 801458e:	88a2      	ldrh	r2, [r4, #4]
 8014590:	4620      	mov	r0, r4
 8014592:	1a9b      	subs	r3, r3, r2
 8014594:	88e2      	ldrh	r2, [r4, #6]
 8014596:	f8ad 3000 	strh.w	r3, [sp]
 801459a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801459e:	1a9b      	subs	r3, r3, r2
 80145a0:	f8ad 3002 	strh.w	r3, [sp, #2]
 80145a4:	6823      	ldr	r3, [r4, #0]
 80145a6:	689b      	ldr	r3, [r3, #8]
 80145a8:	4798      	blx	r3
 80145aa:	69a4      	ldr	r4, [r4, #24]
 80145ac:	2c00      	cmp	r4, #0
 80145ae:	d1d8      	bne.n	8014562 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 80145b0:	b002      	add	sp, #8
 80145b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080145b6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 80145b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80145b8:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80145bc:	460d      	mov	r5, r1
 80145be:	4616      	mov	r6, r2
 80145c0:	b323      	cbz	r3, 801460c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80145c2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80145c4:	b314      	cbz	r4, 801460c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80145c6:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80145ca:	b1eb      	cbz	r3, 8014608 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80145cc:	6828      	ldr	r0, [r5, #0]
 80145ce:	466b      	mov	r3, sp
 80145d0:	6869      	ldr	r1, [r5, #4]
 80145d2:	c303      	stmia	r3!, {r0, r1}
 80145d4:	4668      	mov	r0, sp
 80145d6:	1d21      	adds	r1, r4, #4
 80145d8:	f7ff ff16 	bl	8014408 <_ZN8touchgfx4RectaNERKS0_>
 80145dc:	4668      	mov	r0, sp
 80145de:	f7ff ff57 	bl	8014490 <_ZNK8touchgfx4Rect7isEmptyEv>
 80145e2:	b988      	cbnz	r0, 8014608 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80145e4:	f8bd 3000 	ldrh.w	r3, [sp]
 80145e8:	4669      	mov	r1, sp
 80145ea:	88a2      	ldrh	r2, [r4, #4]
 80145ec:	4620      	mov	r0, r4
 80145ee:	1a9b      	subs	r3, r3, r2
 80145f0:	88e2      	ldrh	r2, [r4, #6]
 80145f2:	f8ad 3000 	strh.w	r3, [sp]
 80145f6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80145fa:	1a9b      	subs	r3, r3, r2
 80145fc:	4632      	mov	r2, r6
 80145fe:	f8ad 3002 	strh.w	r3, [sp, #2]
 8014602:	6823      	ldr	r3, [r4, #0]
 8014604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014606:	4798      	blx	r3
 8014608:	69a4      	ldr	r4, [r4, #24]
 801460a:	e7db      	b.n	80145c4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 801460c:	b002      	add	sp, #8
 801460e:	bd70      	pop	{r4, r5, r6, pc}

08014610 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 8014610:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8014614:	4770      	bx	lr

08014616 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8014616:	6803      	ldr	r3, [r0, #0]
 8014618:	b513      	push	{r0, r1, r4, lr}
 801461a:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 801461e:	2300      	movs	r3, #0
 8014620:	e9cd 3300 	strd	r3, r3, [sp]
 8014624:	466b      	mov	r3, sp
 8014626:	47a0      	blx	r4
 8014628:	b002      	add	sp, #8
 801462a:	bd10      	pop	{r4, pc}

0801462c <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 801462c:	2301      	movs	r3, #1
 801462e:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8014632:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8014636:	4770      	bx	lr

08014638 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8014638:	2301      	movs	r3, #1
 801463a:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801463e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8014642:	4770      	bx	lr

08014644 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8014644:	6843      	ldr	r3, [r0, #4]
 8014646:	2201      	movs	r2, #1
 8014648:	725a      	strb	r2, [r3, #9]
 801464a:	6840      	ldr	r0, [r0, #4]
 801464c:	6803      	ldr	r3, [r0, #0]
 801464e:	691b      	ldr	r3, [r3, #16]
 8014650:	4718      	bx	r3

08014652 <_ZN8touchgfx3HAL8flushDMAEv>:
 8014652:	6840      	ldr	r0, [r0, #4]
 8014654:	6803      	ldr	r3, [r0, #0]
 8014656:	689b      	ldr	r3, [r3, #8]
 8014658:	4718      	bx	r3
	...

0801465c <_ZN8touchgfx3HAL10beginFrameEv>:
 801465c:	4b04      	ldr	r3, [pc, #16]	; (8014670 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801465e:	781b      	ldrb	r3, [r3, #0]
 8014660:	b123      	cbz	r3, 801466c <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8014662:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8014666:	f080 0001 	eor.w	r0, r0, #1
 801466a:	4770      	bx	lr
 801466c:	2001      	movs	r0, #1
 801466e:	4770      	bx	lr
 8014670:	2000bad6 	.word	0x2000bad6

08014674 <_ZN8touchgfx3HAL8endFrameEv>:
 8014674:	b510      	push	{r4, lr}
 8014676:	4604      	mov	r4, r0
 8014678:	6840      	ldr	r0, [r0, #4]
 801467a:	6803      	ldr	r3, [r0, #0]
 801467c:	689b      	ldr	r3, [r3, #8]
 801467e:	4798      	blx	r3
 8014680:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8014684:	b113      	cbz	r3, 801468c <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8014686:	2301      	movs	r3, #1
 8014688:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801468c:	bd10      	pop	{r4, pc}

0801468e <_ZN8touchgfx3HAL9taskEntryEv>:
 801468e:	b508      	push	{r3, lr}
 8014690:	6803      	ldr	r3, [r0, #0]
 8014692:	4604      	mov	r4, r0
 8014694:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014696:	4798      	blx	r3
 8014698:	6823      	ldr	r3, [r4, #0]
 801469a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801469c:	4620      	mov	r0, r4
 801469e:	4798      	blx	r3
 80146a0:	f7fe f844 	bl	801272c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 80146a4:	6823      	ldr	r3, [r4, #0]
 80146a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80146a8:	e7f8      	b.n	801469c <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

080146ac <_ZN8touchgfx3HAL4tickEv>:
 80146ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80146ae:	6803      	ldr	r3, [r0, #0]
 80146b0:	4604      	mov	r4, r0
 80146b2:	4d5c      	ldr	r5, [pc, #368]	; (8014824 <_ZN8touchgfx3HAL4tickEv+0x178>)
 80146b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80146b8:	4798      	blx	r3
 80146ba:	2800      	cmp	r0, #0
 80146bc:	f000 8097 	beq.w	80147ee <_ZN8touchgfx3HAL4tickEv+0x142>
 80146c0:	2001      	movs	r0, #1
 80146c2:	2600      	movs	r6, #0
 80146c4:	f7fd fd16 	bl	80120f4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80146c8:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 80146cc:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 80146d0:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80146d4:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 80146d8:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 80146dc:	b133      	cbz	r3, 80146ec <_ZN8touchgfx3HAL4tickEv+0x40>
 80146de:	6823      	ldr	r3, [r4, #0]
 80146e0:	4620      	mov	r0, r4
 80146e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80146e6:	4798      	blx	r3
 80146e8:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 80146ec:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 80146f0:	2601      	movs	r6, #1
 80146f2:	6862      	ldr	r2, [r4, #4]
 80146f4:	f083 0301 	eor.w	r3, r3, #1
 80146f8:	702e      	strb	r6, [r5, #0]
 80146fa:	7253      	strb	r3, [r2, #9]
 80146fc:	f002 fea8 	bl	8017450 <_ZN8touchgfx11Application11getInstanceEv>
 8014700:	6803      	ldr	r3, [r0, #0]
 8014702:	4631      	mov	r1, r6
 8014704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014706:	4798      	blx	r3
 8014708:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801470c:	b90b      	cbnz	r3, 8014712 <_ZN8touchgfx3HAL4tickEv+0x66>
 801470e:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8014712:	f002 fe9d 	bl	8017450 <_ZN8touchgfx11Application11getInstanceEv>
 8014716:	6803      	ldr	r3, [r0, #0]
 8014718:	695b      	ldr	r3, [r3, #20]
 801471a:	4798      	blx	r3
 801471c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801471e:	6803      	ldr	r3, [r0, #0]
 8014720:	691b      	ldr	r3, [r3, #16]
 8014722:	4798      	blx	r3
 8014724:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8014728:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 801472c:	3b01      	subs	r3, #1
 801472e:	b2db      	uxtb	r3, r3
 8014730:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8014734:	b10a      	cbz	r2, 801473a <_ZN8touchgfx3HAL4tickEv+0x8e>
 8014736:	2b00      	cmp	r3, #0
 8014738:	d1eb      	bne.n	8014712 <_ZN8touchgfx3HAL4tickEv+0x66>
 801473a:	4a3b      	ldr	r2, [pc, #236]	; (8014828 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 801473c:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8014740:	7813      	ldrb	r3, [r2, #0]
 8014742:	3301      	adds	r3, #1
 8014744:	b25b      	sxtb	r3, r3
 8014746:	4299      	cmp	r1, r3
 8014748:	7013      	strb	r3, [r2, #0]
 801474a:	dc10      	bgt.n	801476e <_ZN8touchgfx3HAL4tickEv+0xc2>
 801474c:	2300      	movs	r3, #0
 801474e:	68e0      	ldr	r0, [r4, #12]
 8014750:	a902      	add	r1, sp, #8
 8014752:	7013      	strb	r3, [r2, #0]
 8014754:	aa03      	add	r2, sp, #12
 8014756:	6803      	ldr	r3, [r0, #0]
 8014758:	68db      	ldr	r3, [r3, #12]
 801475a:	4798      	blx	r3
 801475c:	6823      	ldr	r3, [r4, #0]
 801475e:	2800      	cmp	r0, #0
 8014760:	d051      	beq.n	8014806 <_ZN8touchgfx3HAL4tickEv+0x15a>
 8014762:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8014766:	4620      	mov	r0, r4
 8014768:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801476c:	4798      	blx	r3
 801476e:	2300      	movs	r3, #0
 8014770:	6960      	ldr	r0, [r4, #20]
 8014772:	f88d 3007 	strb.w	r3, [sp, #7]
 8014776:	b158      	cbz	r0, 8014790 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8014778:	6803      	ldr	r3, [r0, #0]
 801477a:	f10d 0107 	add.w	r1, sp, #7
 801477e:	68db      	ldr	r3, [r3, #12]
 8014780:	4798      	blx	r3
 8014782:	b128      	cbz	r0, 8014790 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8014784:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014786:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801478a:	6803      	ldr	r3, [r0, #0]
 801478c:	68db      	ldr	r3, [r3, #12]
 801478e:	4798      	blx	r3
 8014790:	f104 001c 	add.w	r0, r4, #28
 8014794:	f00d f984 	bl	8021aa0 <_ZN8touchgfx8Gestures4tickEv>
 8014798:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 801479c:	b30b      	cbz	r3, 80147e2 <_ZN8touchgfx3HAL4tickEv+0x136>
 801479e:	6920      	ldr	r0, [r4, #16]
 80147a0:	6803      	ldr	r3, [r0, #0]
 80147a2:	691b      	ldr	r3, [r3, #16]
 80147a4:	4798      	blx	r3
 80147a6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80147a8:	4606      	mov	r6, r0
 80147aa:	b903      	cbnz	r3, 80147ae <_ZN8touchgfx3HAL4tickEv+0x102>
 80147ac:	6720      	str	r0, [r4, #112]	; 0x70
 80147ae:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80147b0:	4a1e      	ldr	r2, [pc, #120]	; (801482c <_ZN8touchgfx3HAL4tickEv+0x180>)
 80147b2:	1af3      	subs	r3, r6, r3
 80147b4:	4293      	cmp	r3, r2
 80147b6:	d914      	bls.n	80147e2 <_ZN8touchgfx3HAL4tickEv+0x136>
 80147b8:	6920      	ldr	r0, [r4, #16]
 80147ba:	6803      	ldr	r3, [r0, #0]
 80147bc:	699b      	ldr	r3, [r3, #24]
 80147be:	4798      	blx	r3
 80147c0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80147c2:	2264      	movs	r2, #100	; 0x64
 80147c4:	1af3      	subs	r3, r6, r3
 80147c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80147ca:	fbb0 f0f3 	udiv	r0, r0, r3
 80147ce:	2800      	cmp	r0, #0
 80147d0:	dc1e      	bgt.n	8014810 <_ZN8touchgfx3HAL4tickEv+0x164>
 80147d2:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 80147d6:	6920      	ldr	r0, [r4, #16]
 80147d8:	2100      	movs	r1, #0
 80147da:	6803      	ldr	r3, [r0, #0]
 80147dc:	69db      	ldr	r3, [r3, #28]
 80147de:	4798      	blx	r3
 80147e0:	6726      	str	r6, [r4, #112]	; 0x70
 80147e2:	f002 fe35 	bl	8017450 <_ZN8touchgfx11Application11getInstanceEv>
 80147e6:	6803      	ldr	r3, [r0, #0]
 80147e8:	2100      	movs	r1, #0
 80147ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80147ec:	4798      	blx	r3
 80147ee:	6823      	ldr	r3, [r4, #0]
 80147f0:	4620      	mov	r0, r4
 80147f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80147f6:	4798      	blx	r3
 80147f8:	2001      	movs	r0, #1
 80147fa:	f7fd fc86 	bl	801210a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80147fe:	2300      	movs	r3, #0
 8014800:	702b      	strb	r3, [r5, #0]
 8014802:	b004      	add	sp, #16
 8014804:	bd70      	pop	{r4, r5, r6, pc}
 8014806:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801480a:	4620      	mov	r0, r4
 801480c:	4798      	blx	r3
 801480e:	e7ae      	b.n	801476e <_ZN8touchgfx3HAL4tickEv+0xc2>
 8014810:	2863      	cmp	r0, #99	; 0x63
 8014812:	bfcb      	itete	gt
 8014814:	2300      	movgt	r3, #0
 8014816:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801481a:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 801481e:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8014822:	e7d8      	b.n	80147d6 <_ZN8touchgfx3HAL4tickEv+0x12a>
 8014824:	2000badc 	.word	0x2000badc
 8014828:	2000badd 	.word	0x2000badd
 801482c:	05f5e100 	.word	0x05f5e100

08014830 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8014830:	f7fd bf1c 	b.w	801266c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08014834 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8014834:	6581      	str	r1, [r0, #88]	; 0x58
 8014836:	301c      	adds	r0, #28
 8014838:	f00d b930 	b.w	8021a9c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0801483c <_ZN8touchgfx3HAL5touchEll>:
 801483c:	b530      	push	{r4, r5, lr}
 801483e:	b087      	sub	sp, #28
 8014840:	4604      	mov	r4, r0
 8014842:	a804      	add	r0, sp, #16
 8014844:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8014848:	f002 fc06 	bl	8017058 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 801484c:	9b04      	ldr	r3, [sp, #16]
 801484e:	a906      	add	r1, sp, #24
 8014850:	a803      	add	r0, sp, #12
 8014852:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014856:	9b05      	ldr	r3, [sp, #20]
 8014858:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 801485c:	f002 fc4a 	bl	80170f4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8014860:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8014864:	f104 001c 	add.w	r0, r4, #28
 8014868:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801486c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8014870:	b189      	cbz	r1, 8014896 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8014872:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8014876:	9300      	str	r3, [sp, #0]
 8014878:	4613      	mov	r3, r2
 801487a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801487e:	462a      	mov	r2, r5
 8014880:	f00d f91c 	bl	8021abc <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8014884:	b128      	cbz	r0, 8014892 <_ZN8touchgfx3HAL5touchEll+0x56>
 8014886:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801488a:	65e3      	str	r3, [r4, #92]	; 0x5c
 801488c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8014890:	6623      	str	r3, [r4, #96]	; 0x60
 8014892:	b007      	add	sp, #28
 8014894:	bd30      	pop	{r4, r5, pc}
 8014896:	f00d f955 	bl	8021b44 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801489a:	2301      	movs	r3, #1
 801489c:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80148a0:	e7f1      	b.n	8014886 <_ZN8touchgfx3HAL5touchEll+0x4a>

080148a2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80148a2:	b570      	push	{r4, r5, r6, lr}
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	d050      	beq.n	801494a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 80148a8:	ea81 0002 	eor.w	r0, r1, r2
 80148ac:	07c6      	lsls	r6, r0, #31
 80148ae:	d508      	bpl.n	80148c2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80148b0:	3a01      	subs	r2, #1
 80148b2:	18cc      	adds	r4, r1, r3
 80148b4:	42a1      	cmp	r1, r4
 80148b6:	d048      	beq.n	801494a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 80148b8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80148bc:	f801 0b01 	strb.w	r0, [r1], #1
 80148c0:	e7f8      	b.n	80148b4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 80148c2:	07d5      	lsls	r5, r2, #31
 80148c4:	bf42      	ittt	mi
 80148c6:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80148ca:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80148ce:	f801 0b01 	strbmi.w	r0, [r1], #1
 80148d2:	2b01      	cmp	r3, #1
 80148d4:	d915      	bls.n	8014902 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 80148d6:	ea82 0001 	eor.w	r0, r2, r1
 80148da:	0784      	lsls	r4, r0, #30
 80148dc:	d02d      	beq.n	801493a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 80148de:	1e94      	subs	r4, r2, #2
 80148e0:	4608      	mov	r0, r1
 80148e2:	18ce      	adds	r6, r1, r3
 80148e4:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 80148e8:	f820 5b02 	strh.w	r5, [r0], #2
 80148ec:	1a35      	subs	r5, r6, r0
 80148ee:	2d01      	cmp	r5, #1
 80148f0:	d8f8      	bhi.n	80148e4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 80148f2:	1e98      	subs	r0, r3, #2
 80148f4:	f003 0301 	and.w	r3, r3, #1
 80148f8:	f020 0001 	bic.w	r0, r0, #1
 80148fc:	3002      	adds	r0, #2
 80148fe:	4401      	add	r1, r0
 8014900:	4402      	add	r2, r0
 8014902:	1f14      	subs	r4, r2, #4
 8014904:	4608      	mov	r0, r1
 8014906:	18ce      	adds	r6, r1, r3
 8014908:	1a35      	subs	r5, r6, r0
 801490a:	2d03      	cmp	r5, #3
 801490c:	d810      	bhi.n	8014930 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 801490e:	089c      	lsrs	r4, r3, #2
 8014910:	00a0      	lsls	r0, r4, #2
 8014912:	4401      	add	r1, r0
 8014914:	3801      	subs	r0, #1
 8014916:	4402      	add	r2, r0
 8014918:	f06f 0003 	mvn.w	r0, #3
 801491c:	fb00 3404 	mla	r4, r0, r4, r3
 8014920:	440c      	add	r4, r1
 8014922:	42a1      	cmp	r1, r4
 8014924:	d011      	beq.n	801494a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8014926:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801492a:	f801 3b01 	strb.w	r3, [r1], #1
 801492e:	e7f8      	b.n	8014922 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 8014930:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8014934:	f840 5b04 	str.w	r5, [r0], #4
 8014938:	e7e6      	b.n	8014908 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 801493a:	0790      	lsls	r0, r2, #30
 801493c:	d0e1      	beq.n	8014902 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801493e:	f832 0b02 	ldrh.w	r0, [r2], #2
 8014942:	3b02      	subs	r3, #2
 8014944:	f821 0b02 	strh.w	r0, [r1], #2
 8014948:	e7db      	b.n	8014902 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801494a:	2001      	movs	r0, #1
 801494c:	bd70      	pop	{r4, r5, r6, pc}

0801494e <_ZN8touchgfx3HAL7noTouchEv>:
 801494e:	b510      	push	{r4, lr}
 8014950:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8014954:	4604      	mov	r4, r0
 8014956:	b153      	cbz	r3, 801496e <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8014958:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 801495c:	2101      	movs	r1, #1
 801495e:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8014962:	301c      	adds	r0, #28
 8014964:	f00d f8ee 	bl	8021b44 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8014968:	2300      	movs	r3, #0
 801496a:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801496e:	bd10      	pop	{r4, pc}

08014970 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8014970:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014974:	4605      	mov	r5, r0
 8014976:	6980      	ldr	r0, [r0, #24]
 8014978:	b085      	sub	sp, #20
 801497a:	460f      	mov	r7, r1
 801497c:	4690      	mov	r8, r2
 801497e:	4699      	mov	r9, r3
 8014980:	b930      	cbnz	r0, 8014990 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 8014982:	4b1f      	ldr	r3, [pc, #124]	; (8014a00 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8014984:	f44f 7198 	mov.w	r1, #304	; 0x130
 8014988:	4a1e      	ldr	r2, [pc, #120]	; (8014a04 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 801498a:	481f      	ldr	r0, [pc, #124]	; (8014a08 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x98>)
 801498c:	f00e fd54 	bl	8023438 <__assert_func>
 8014990:	ac04      	add	r4, sp, #16
 8014992:	2600      	movs	r6, #0
 8014994:	f844 6d04 	str.w	r6, [r4, #-4]!
 8014998:	6806      	ldr	r6, [r0, #0]
 801499a:	9401      	str	r4, [sp, #4]
 801499c:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 80149a0:	9400      	str	r4, [sp, #0]
 80149a2:	6834      	ldr	r4, [r6, #0]
 80149a4:	47a0      	blx	r4
 80149a6:	4c19      	ldr	r4, [pc, #100]	; (8014a0c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x9c>)
 80149a8:	4606      	mov	r6, r0
 80149aa:	f8a4 9000 	strh.w	r9, [r4]
 80149ae:	f7fa f9f9 	bl	800eda4 <_ZN8touchgfx3HAL3lcdEv>
 80149b2:	6803      	ldr	r3, [r0, #0]
 80149b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149b6:	4798      	blx	r3
 80149b8:	280c      	cmp	r0, #12
 80149ba:	d80f      	bhi.n	80149dc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 80149bc:	e8df f000 	tbb	[pc, r0]
 80149c0:	1b1b1207 	.word	0x1b1b1207
 80149c4:	1b1b1b1b 	.word	0x1b1b1b1b
 80149c8:	1b1b1b1b 	.word	0x1b1b1b1b
 80149cc:	1b          	.byte	0x1b
 80149cd:	00          	.byte	0x00
 80149ce:	8823      	ldrh	r3, [r4, #0]
 80149d0:	fb08 7203 	mla	r2, r8, r3, r7
 80149d4:	9b03      	ldr	r3, [sp, #12]
 80149d6:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80149da:	63eb      	str	r3, [r5, #60]	; 0x3c
 80149dc:	4630      	mov	r0, r6
 80149de:	b005      	add	sp, #20
 80149e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80149e4:	8822      	ldrh	r2, [r4, #0]
 80149e6:	9b03      	ldr	r3, [sp, #12]
 80149e8:	fb08 7202 	mla	r2, r8, r2, r7
 80149ec:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80149f0:	1a9a      	subs	r2, r3, r2
 80149f2:	63ea      	str	r2, [r5, #60]	; 0x3c
 80149f4:	e7f2      	b.n	80149dc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 80149f6:	4b06      	ldr	r3, [pc, #24]	; (8014a10 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0xa0>)
 80149f8:	f240 114d 	movw	r1, #333	; 0x14d
 80149fc:	4a01      	ldr	r2, [pc, #4]	; (8014a04 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 80149fe:	e7c4      	b.n	801498a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8014a00:	08025b81 	.word	0x08025b81
 8014a04:	08025e92 	.word	0x08025e92
 8014a08:	08025bc6 	.word	0x08025bc6
 8014a0c:	2000bad2 	.word	0x2000bad2
 8014a10:	08025bec 	.word	0x08025bec

08014a14 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 8014a14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014a18:	4698      	mov	r8, r3
 8014a1a:	6803      	ldr	r3, [r0, #0]
 8014a1c:	b087      	sub	sp, #28
 8014a1e:	460e      	mov	r6, r1
 8014a20:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8014a22:	4617      	mov	r7, r2
 8014a24:	4b0d      	ldr	r3, [pc, #52]	; (8014a5c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 8014a26:	4604      	mov	r4, r0
 8014a28:	f8b3 9000 	ldrh.w	r9, [r3]
 8014a2c:	f7fa f9ba 	bl	800eda4 <_ZN8touchgfx3HAL3lcdEv>
 8014a30:	6803      	ldr	r3, [r0, #0]
 8014a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a34:	4798      	blx	r3
 8014a36:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8014a3a:	463a      	mov	r2, r7
 8014a3c:	4631      	mov	r1, r6
 8014a3e:	9302      	str	r3, [sp, #8]
 8014a40:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8014a44:	9301      	str	r3, [sp, #4]
 8014a46:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8014a4a:	e9cd 9003 	strd	r9, r0, [sp, #12]
 8014a4e:	9300      	str	r3, [sp, #0]
 8014a50:	4620      	mov	r0, r4
 8014a52:	4643      	mov	r3, r8
 8014a54:	47a8      	blx	r5
 8014a56:	b007      	add	sp, #28
 8014a58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a5c:	2000bad2 	.word	0x2000bad2

08014a60 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8014a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a64:	4606      	mov	r6, r0
 8014a66:	b089      	sub	sp, #36	; 0x24
 8014a68:	4610      	mov	r0, r2
 8014a6a:	460c      	mov	r4, r1
 8014a6c:	4691      	mov	r9, r2
 8014a6e:	4698      	mov	r8, r3
 8014a70:	f004 fed0 	bl	8019814 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8014a74:	2800      	cmp	r0, #0
 8014a76:	f000 8092 	beq.w	8014b9e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x13e>
 8014a7a:	f8df a13c 	ldr.w	sl, [pc, #316]	; 8014bb8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 8014a7e:	ad08      	add	r5, sp, #32
 8014a80:	f8df b138 	ldr.w	fp, [pc, #312]	; 8014bbc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>
 8014a84:	f8da 0000 	ldr.w	r0, [sl]
 8014a88:	4f4a      	ldr	r7, [pc, #296]	; (8014bb4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 8014a8a:	6802      	ldr	r2, [r0, #0]
 8014a8c:	6a12      	ldr	r2, [r2, #32]
 8014a8e:	4790      	blx	r2
 8014a90:	f8da 0000 	ldr.w	r0, [sl]
 8014a94:	6802      	ldr	r2, [r0, #0]
 8014a96:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8014a98:	4790      	blx	r2
 8014a9a:	f8bb 3000 	ldrh.w	r3, [fp]
 8014a9e:	f825 9d0c 	strh.w	r9, [r5, #-12]!
 8014aa2:	4628      	mov	r0, r5
 8014aa4:	9300      	str	r3, [sp, #0]
 8014aa6:	883b      	ldrh	r3, [r7, #0]
 8014aa8:	9301      	str	r3, [sp, #4]
 8014aaa:	f004 ff73 	bl	8019994 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014aae:	f8ab 0000 	strh.w	r0, [fp]
 8014ab2:	4628      	mov	r0, r5
 8014ab4:	f004 ffa8 	bl	8019a08 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014ab8:	f8da b000 	ldr.w	fp, [sl]
 8014abc:	8038      	strh	r0, [r7, #0]
 8014abe:	4648      	mov	r0, r9
 8014ac0:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 8014ac4:	f8db 7040 	ldr.w	r7, [fp, #64]	; 0x40
 8014ac8:	9302      	str	r3, [sp, #8]
 8014aca:	f004 fea3 	bl	8019814 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8014ace:	f8da 2000 	ldr.w	r2, [sl]
 8014ad2:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 8014ad6:	63d0      	str	r0, [r2, #60]	; 0x3c
 8014ad8:	4620      	mov	r0, r4
 8014ada:	6822      	ldr	r2, [r4, #0]
 8014adc:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
 8014ae0:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8014ae2:	2200      	movs	r2, #0
 8014ae4:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 8014ae8:	4611      	mov	r1, r2
 8014aea:	4798      	blx	r3
 8014aec:	2201      	movs	r2, #1
 8014aee:	f894 b025 	ldrb.w	fp, [r4, #37]	; 0x25
 8014af2:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 8014af6:	1d22      	adds	r2, r4, #4
 8014af8:	f9b8 1004 	ldrsh.w	r1, [r8, #4]
 8014afc:	2900      	cmp	r1, #0
 8014afe:	d051      	beq.n	8014ba4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 8014b00:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
 8014b04:	2900      	cmp	r1, #0
 8014b06:	d04d      	beq.n	8014ba4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 8014b08:	6810      	ldr	r0, [r2, #0]
 8014b0a:	f10d 0c18 	add.w	ip, sp, #24
 8014b0e:	6851      	ldr	r1, [r2, #4]
 8014b10:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8014b14:	4641      	mov	r1, r8
 8014b16:	a806      	add	r0, sp, #24
 8014b18:	f7ff fc76 	bl	8014408 <_ZN8touchgfx4RectaNERKS0_>
 8014b1c:	4628      	mov	r0, r5
 8014b1e:	f005 f8c5 	bl	8019cac <_ZNK8touchgfx6Bitmap9getFormatEv>
 8014b22:	4680      	mov	r8, r0
 8014b24:	f7fa f93e 	bl	800eda4 <_ZN8touchgfx3HAL3lcdEv>
 8014b28:	6802      	ldr	r2, [r0, #0]
 8014b2a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8014b2c:	4790      	blx	r2
 8014b2e:	4580      	cmp	r8, r0
 8014b30:	d03d      	beq.n	8014bae <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x14e>
 8014b32:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8014b34:	b150      	cbz	r0, 8014b4c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 8014b36:	4628      	mov	r0, r5
 8014b38:	f005 f8b8 	bl	8019cac <_ZNK8touchgfx6Bitmap9getFormatEv>
 8014b3c:	4605      	mov	r5, r0
 8014b3e:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8014b40:	6803      	ldr	r3, [r0, #0]
 8014b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b44:	4798      	blx	r3
 8014b46:	1a2b      	subs	r3, r5, r0
 8014b48:	4258      	negs	r0, r3
 8014b4a:	4158      	adcs	r0, r3
 8014b4c:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
 8014b50:	2500      	movs	r5, #0
 8014b52:	6963      	ldr	r3, [r4, #20]
 8014b54:	4620      	mov	r0, r4
 8014b56:	6822      	ldr	r2, [r4, #0]
 8014b58:	a906      	add	r1, sp, #24
 8014b5a:	6165      	str	r5, [r4, #20]
 8014b5c:	9303      	str	r3, [sp, #12]
 8014b5e:	6892      	ldr	r2, [r2, #8]
 8014b60:	4790      	blx	r2
 8014b62:	9b03      	ldr	r3, [sp, #12]
 8014b64:	4620      	mov	r0, r4
 8014b66:	4652      	mov	r2, sl
 8014b68:	6163      	str	r3, [r4, #20]
 8014b6a:	4649      	mov	r1, r9
 8014b6c:	f886 5076 	strb.w	r5, [r6, #118]	; 0x76
 8014b70:	6823      	ldr	r3, [r4, #0]
 8014b72:	f884 b025 	strb.w	fp, [r4, #37]	; 0x25
 8014b76:	4c10      	ldr	r4, [pc, #64]	; (8014bb8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>)
 8014b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014b7a:	4798      	blx	r3
 8014b7c:	6820      	ldr	r0, [r4, #0]
 8014b7e:	9b02      	ldr	r3, [sp, #8]
 8014b80:	9a00      	ldr	r2, [sp, #0]
 8014b82:	e9c0 370f 	strd	r3, r7, [r0, #60]	; 0x3c
 8014b86:	4b0d      	ldr	r3, [pc, #52]	; (8014bbc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>)
 8014b88:	801a      	strh	r2, [r3, #0]
 8014b8a:	4b0a      	ldr	r3, [pc, #40]	; (8014bb4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 8014b8c:	9a01      	ldr	r2, [sp, #4]
 8014b8e:	801a      	strh	r2, [r3, #0]
 8014b90:	6803      	ldr	r3, [r0, #0]
 8014b92:	6a1b      	ldr	r3, [r3, #32]
 8014b94:	4798      	blx	r3
 8014b96:	6820      	ldr	r0, [r4, #0]
 8014b98:	6803      	ldr	r3, [r0, #0]
 8014b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b9c:	4798      	blx	r3
 8014b9e:	b009      	add	sp, #36	; 0x24
 8014ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ba4:	ab06      	add	r3, sp, #24
 8014ba6:	6810      	ldr	r0, [r2, #0]
 8014ba8:	6851      	ldr	r1, [r2, #4]
 8014baa:	c303      	stmia	r3!, {r0, r1}
 8014bac:	e7b6      	b.n	8014b1c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xbc>
 8014bae:	2000      	movs	r0, #0
 8014bb0:	e7cc      	b.n	8014b4c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 8014bb2:	bf00      	nop
 8014bb4:	2000bad4 	.word	0x2000bad4
 8014bb8:	2000bad8 	.word	0x2000bad8
 8014bbc:	2000bad2 	.word	0x2000bad2

08014bc0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8014bc0:	4b07      	ldr	r3, [pc, #28]	; (8014be0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8014bc2:	b510      	push	{r4, lr}
 8014bc4:	781b      	ldrb	r3, [r3, #0]
 8014bc6:	4604      	mov	r4, r0
 8014bc8:	b13b      	cbz	r3, 8014bda <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8014bca:	6803      	ldr	r3, [r0, #0]
 8014bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014bce:	4798      	blx	r3
 8014bd0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8014bd2:	4283      	cmp	r3, r0
 8014bd4:	d101      	bne.n	8014bda <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8014bd6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8014bd8:	bd10      	pop	{r4, pc}
 8014bda:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8014bdc:	e7fc      	b.n	8014bd8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8014bde:	bf00      	nop
 8014be0:	2000bad6 	.word	0x2000bad6

08014be4 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8014be4:	4b0b      	ldr	r3, [pc, #44]	; (8014c14 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 8014be6:	b510      	push	{r4, lr}
 8014be8:	781b      	ldrb	r3, [r3, #0]
 8014bea:	4604      	mov	r4, r0
 8014bec:	b95b      	cbnz	r3, 8014c06 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8014bee:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8014bf2:	2b02      	cmp	r3, #2
 8014bf4:	d007      	beq.n	8014c06 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8014bf6:	6840      	ldr	r0, [r0, #4]
 8014bf8:	f000 fbc8 	bl	801538c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8014bfc:	b118      	cbz	r0, 8014c06 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8014bfe:	6862      	ldr	r2, [r4, #4]
 8014c00:	7a53      	ldrb	r3, [r2, #9]
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	d0fc      	beq.n	8014c00 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8014c06:	f7fd fd23 	bl	8012650 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8014c0a:	4620      	mov	r0, r4
 8014c0c:	f7ff ffd8 	bl	8014bc0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014c10:	bd10      	pop	{r4, pc}
 8014c12:	bf00      	nop
 8014c14:	2000bad6 	.word	0x2000bad6

08014c18 <_ZN8touchgfx3HAL10initializeEv>:
 8014c18:	b510      	push	{r4, lr}
 8014c1a:	4604      	mov	r4, r0
 8014c1c:	f7fd fcf4 	bl	8012608 <_ZN8touchgfx10OSWrappers10initializeEv>
 8014c20:	6860      	ldr	r0, [r4, #4]
 8014c22:	6803      	ldr	r3, [r0, #0]
 8014c24:	68db      	ldr	r3, [r3, #12]
 8014c26:	4798      	blx	r3
 8014c28:	68e0      	ldr	r0, [r4, #12]
 8014c2a:	6803      	ldr	r3, [r0, #0]
 8014c2c:	689b      	ldr	r3, [r3, #8]
 8014c2e:	4798      	blx	r3
 8014c30:	6823      	ldr	r3, [r4, #0]
 8014c32:	4620      	mov	r0, r4
 8014c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014c36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014c3a:	4718      	bx	r3

08014c3c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8014c3c:	b508      	push	{r3, lr}
 8014c3e:	290c      	cmp	r1, #12
 8014c40:	d817      	bhi.n	8014c72 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 8014c42:	e8df f001 	tbb	[pc, r1]
 8014c46:	090b      	.short	0x090b
 8014c48:	0d0d0d07 	.word	0x0d0d0d07
 8014c4c:	1414140d 	.word	0x1414140d
 8014c50:	1414      	.short	0x1414
 8014c52:	0d          	.byte	0x0d
 8014c53:	00          	.byte	0x00
 8014c54:	2020      	movs	r0, #32
 8014c56:	bd08      	pop	{r3, pc}
 8014c58:	2018      	movs	r0, #24
 8014c5a:	e7fc      	b.n	8014c56 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8014c5c:	2010      	movs	r0, #16
 8014c5e:	e7fa      	b.n	8014c56 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8014c60:	4b05      	ldr	r3, [pc, #20]	; (8014c78 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 8014c62:	f44f 710c 	mov.w	r1, #560	; 0x230
 8014c66:	4a05      	ldr	r2, [pc, #20]	; (8014c7c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8014c68:	4805      	ldr	r0, [pc, #20]	; (8014c80 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 8014c6a:	f00e fbe5 	bl	8023438 <__assert_func>
 8014c6e:	2008      	movs	r0, #8
 8014c70:	e7f1      	b.n	8014c56 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8014c72:	2000      	movs	r0, #0
 8014c74:	e7ef      	b.n	8014c56 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8014c76:	bf00      	nop
 8014c78:	08025cbf 	.word	0x08025cbf
 8014c7c:	08026054 	.word	0x08026054
 8014c80:	08025bc6 	.word	0x08025bc6

08014c84 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8014c84:	b570      	push	{r4, r5, r6, lr}
 8014c86:	460d      	mov	r5, r1
 8014c88:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8014c8c:	4616      	mov	r6, r2
 8014c8e:	461c      	mov	r4, r3
 8014c90:	f7ff ffd4 	bl	8014c3c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8014c94:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8014c98:	10c0      	asrs	r0, r0, #3
 8014c9a:	fb06 5101 	mla	r1, r6, r1, r5
 8014c9e:	fb00 4001 	mla	r0, r0, r1, r4
 8014ca2:	bd70      	pop	{r4, r5, r6, pc}

08014ca4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 8014ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014ca8:	b08a      	sub	sp, #40	; 0x28
 8014caa:	f04f 0c00 	mov.w	ip, #0
 8014cae:	4604      	mov	r4, r0
 8014cb0:	469a      	mov	sl, r3
 8014cb2:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 8014cb6:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8014cba:	f1b8 0f02 	cmp.w	r8, #2
 8014cbe:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 8014cc2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8014cc6:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8014cca:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 8014cce:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8014cd2:	f8cd c020 	str.w	ip, [sp, #32]
 8014cd6:	d030      	beq.n	8014d3a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 8014cd8:	2bff      	cmp	r3, #255	; 0xff
 8014cda:	d12c      	bne.n	8014d36 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 8014cdc:	4560      	cmp	r0, ip
 8014cde:	bf14      	ite	ne
 8014ce0:	2004      	movne	r0, #4
 8014ce2:	2001      	moveq	r0, #1
 8014ce4:	9204      	str	r2, [sp, #16]
 8014ce6:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8014cea:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8014cee:	f8ad 201c 	strh.w	r2, [sp, #28]
 8014cf2:	f8ad 6018 	strh.w	r6, [sp, #24]
 8014cf6:	f8ad 501a 	strh.w	r5, [sp, #26]
 8014cfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014cfe:	4620      	mov	r0, r4
 8014d00:	f7ff ff5e 	bl	8014bc0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014d04:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8014d08:	4603      	mov	r3, r0
 8014d0a:	4651      	mov	r1, sl
 8014d0c:	4620      	mov	r0, r4
 8014d0e:	e9cd 9700 	strd	r9, r7, [sp]
 8014d12:	f7ff ffb7 	bl	8014c84 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8014d16:	f8ad 901e 	strh.w	r9, [sp, #30]
 8014d1a:	9005      	str	r0, [sp, #20]
 8014d1c:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 8014d20:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 8014d24:	b106      	cbz	r6, 8014d28 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 8014d26:	b98d      	cbnz	r5, 8014d4c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 8014d28:	4b12      	ldr	r3, [pc, #72]	; (8014d74 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 8014d2a:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8014d2e:	4a12      	ldr	r2, [pc, #72]	; (8014d78 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8014d30:	4812      	ldr	r0, [pc, #72]	; (8014d7c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 8014d32:	f00e fb81 	bl	8023438 <__assert_func>
 8014d36:	2004      	movs	r0, #4
 8014d38:	e7d4      	b.n	8014ce4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8014d3a:	2bff      	cmp	r3, #255	; 0xff
 8014d3c:	d104      	bne.n	8014d48 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 8014d3e:	2800      	cmp	r0, #0
 8014d40:	bf14      	ite	ne
 8014d42:	2040      	movne	r0, #64	; 0x40
 8014d44:	2020      	moveq	r0, #32
 8014d46:	e7cd      	b.n	8014ce4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8014d48:	2040      	movs	r0, #64	; 0x40
 8014d4a:	e7cb      	b.n	8014ce4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8014d4c:	6823      	ldr	r3, [r4, #0]
 8014d4e:	4620      	mov	r0, r4
 8014d50:	9d02      	ldr	r5, [sp, #8]
 8014d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014d54:	4798      	blx	r3
 8014d56:	4228      	tst	r0, r5
 8014d58:	d104      	bne.n	8014d64 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 8014d5a:	4b09      	ldr	r3, [pc, #36]	; (8014d80 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 8014d5c:	f240 11b1 	movw	r1, #433	; 0x1b1
 8014d60:	4a05      	ldr	r2, [pc, #20]	; (8014d78 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8014d62:	e7e5      	b.n	8014d30 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 8014d64:	6860      	ldr	r0, [r4, #4]
 8014d66:	a902      	add	r1, sp, #8
 8014d68:	6803      	ldr	r3, [r0, #0]
 8014d6a:	685b      	ldr	r3, [r3, #4]
 8014d6c:	4798      	blx	r3
 8014d6e:	b00a      	add	sp, #40	; 0x28
 8014d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d74:	08025c42 	.word	0x08025c42
 8014d78:	08025ef6 	.word	0x08025ef6
 8014d7c:	08025bc6 	.word	0x08025bc6
 8014d80:	08025c7a 	.word	0x08025c7a

08014d84 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 8014d84:	b510      	push	{r4, lr}
 8014d86:	b08a      	sub	sp, #40	; 0x28
 8014d88:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8014d8c:	9408      	str	r4, [sp, #32]
 8014d8e:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 8014d92:	9407      	str	r4, [sp, #28]
 8014d94:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 8014d98:	9406      	str	r4, [sp, #24]
 8014d9a:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 8014d9e:	9405      	str	r4, [sp, #20]
 8014da0:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 8014da4:	9404      	str	r4, [sp, #16]
 8014da6:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 8014daa:	9403      	str	r4, [sp, #12]
 8014dac:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 8014db0:	9402      	str	r4, [sp, #8]
 8014db2:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8014db6:	e9cd 3400 	strd	r3, r4, [sp]
 8014dba:	4613      	mov	r3, r2
 8014dbc:	2200      	movs	r2, #0
 8014dbe:	f7ff ff71 	bl	8014ca4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8014dc2:	b00a      	add	sp, #40	; 0x28
 8014dc4:	bd10      	pop	{r4, pc}
	...

08014dc8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 8014dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014dca:	b08b      	sub	sp, #44	; 0x2c
 8014dcc:	4616      	mov	r6, r2
 8014dce:	460d      	mov	r5, r1
 8014dd0:	461f      	mov	r7, r3
 8014dd2:	4604      	mov	r4, r0
 8014dd4:	f7f9 ffe6 	bl	800eda4 <_ZN8touchgfx3HAL3lcdEv>
 8014dd8:	6803      	ldr	r3, [r0, #0]
 8014dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ddc:	4798      	blx	r3
 8014dde:	4b0e      	ldr	r3, [pc, #56]	; (8014e18 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 8014de0:	2200      	movs	r2, #0
 8014de2:	4629      	mov	r1, r5
 8014de4:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8014de8:	881b      	ldrh	r3, [r3, #0]
 8014dea:	4620      	mov	r0, r4
 8014dec:	9306      	str	r3, [sp, #24]
 8014dee:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8014df2:	9305      	str	r3, [sp, #20]
 8014df4:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8014df8:	9304      	str	r3, [sp, #16]
 8014dfa:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8014dfe:	9303      	str	r3, [sp, #12]
 8014e00:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8014e04:	9302      	str	r3, [sp, #8]
 8014e06:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8014e0a:	e9cd 7300 	strd	r7, r3, [sp]
 8014e0e:	4633      	mov	r3, r6
 8014e10:	f7ff ff48 	bl	8014ca4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8014e14:	b00b      	add	sp, #44	; 0x2c
 8014e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014e18:	2000bad2 	.word	0x2000bad2

08014e1c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 8014e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e20:	461f      	mov	r7, r3
 8014e22:	4b14      	ldr	r3, [pc, #80]	; (8014e74 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 8014e24:	b08a      	sub	sp, #40	; 0x28
 8014e26:	4616      	mov	r6, r2
 8014e28:	f8b3 8000 	ldrh.w	r8, [r3]
 8014e2c:	460d      	mov	r5, r1
 8014e2e:	4604      	mov	r4, r0
 8014e30:	f7f9 ffb8 	bl	800eda4 <_ZN8touchgfx3HAL3lcdEv>
 8014e34:	6803      	ldr	r3, [r0, #0]
 8014e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e38:	4798      	blx	r3
 8014e3a:	2302      	movs	r3, #2
 8014e3c:	9008      	str	r0, [sp, #32]
 8014e3e:	2200      	movs	r2, #0
 8014e40:	4629      	mov	r1, r5
 8014e42:	4620      	mov	r0, r4
 8014e44:	e9cd 8306 	strd	r8, r3, [sp, #24]
 8014e48:	2301      	movs	r3, #1
 8014e4a:	9305      	str	r3, [sp, #20]
 8014e4c:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8014e50:	9304      	str	r3, [sp, #16]
 8014e52:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8014e56:	9303      	str	r3, [sp, #12]
 8014e58:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8014e5c:	9302      	str	r3, [sp, #8]
 8014e5e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8014e62:	e9cd 7300 	strd	r7, r3, [sp]
 8014e66:	4633      	mov	r3, r6
 8014e68:	f7ff ff1c 	bl	8014ca4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8014e6c:	b00a      	add	sp, #40	; 0x28
 8014e6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e72:	bf00      	nop
 8014e74:	2000bad2 	.word	0x2000bad2

08014e78 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 8014e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e7c:	b08b      	sub	sp, #44	; 0x2c
 8014e7e:	469b      	mov	fp, r3
 8014e80:	4604      	mov	r4, r0
 8014e82:	4692      	mov	sl, r2
 8014e84:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8014e88:	2600      	movs	r6, #0
 8014e8a:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 8014e8e:	4689      	mov	r9, r1
 8014e90:	2fff      	cmp	r7, #255	; 0xff
 8014e92:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8014e96:	9608      	str	r6, [sp, #32]
 8014e98:	bf14      	ite	ne
 8014e9a:	2308      	movne	r3, #8
 8014e9c:	2302      	moveq	r3, #2
 8014e9e:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8014ea2:	f7ff fe8d 	bl	8014bc0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014ea6:	465a      	mov	r2, fp
 8014ea8:	4603      	mov	r3, r0
 8014eaa:	4651      	mov	r1, sl
 8014eac:	4620      	mov	r0, r4
 8014eae:	e9cd 8500 	strd	r8, r5, [sp]
 8014eb2:	f7ff fee7 	bl	8014c84 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8014eb6:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8014eba:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8014ebe:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014ec2:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8014ec6:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 8014eca:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014ece:	6823      	ldr	r3, [r4, #0]
 8014ed0:	9d02      	ldr	r5, [sp, #8]
 8014ed2:	9005      	str	r0, [sp, #20]
 8014ed4:	4620      	mov	r0, r4
 8014ed6:	f8ad 601c 	strh.w	r6, [sp, #28]
 8014eda:	f8ad 801e 	strh.w	r8, [sp, #30]
 8014ede:	f8cd 9020 	str.w	r9, [sp, #32]
 8014ee2:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8014ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014ee8:	4798      	blx	r3
 8014eea:	4228      	tst	r0, r5
 8014eec:	d106      	bne.n	8014efc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 8014eee:	4b07      	ldr	r3, [pc, #28]	; (8014f0c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 8014ef0:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8014ef4:	4a06      	ldr	r2, [pc, #24]	; (8014f10 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 8014ef6:	4807      	ldr	r0, [pc, #28]	; (8014f14 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 8014ef8:	f00e fa9e 	bl	8023438 <__assert_func>
 8014efc:	6860      	ldr	r0, [r4, #4]
 8014efe:	a902      	add	r1, sp, #8
 8014f00:	6803      	ldr	r3, [r0, #0]
 8014f02:	685b      	ldr	r3, [r3, #4]
 8014f04:	4798      	blx	r3
 8014f06:	b00b      	add	sp, #44	; 0x2c
 8014f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f0c:	08025c7a 	.word	0x08025c7a
 8014f10:	08025fbf 	.word	0x08025fbf
 8014f14:	08025bc6 	.word	0x08025bc6

08014f18 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8014f18:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8014f1c:	461f      	mov	r7, r3
 8014f1e:	4b0b      	ldr	r3, [pc, #44]	; (8014f4c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8014f20:	460d      	mov	r5, r1
 8014f22:	4616      	mov	r6, r2
 8014f24:	f8b3 8000 	ldrh.w	r8, [r3]
 8014f28:	4604      	mov	r4, r0
 8014f2a:	f7f9 ff3b 	bl	800eda4 <_ZN8touchgfx3HAL3lcdEv>
 8014f2e:	6803      	ldr	r3, [r0, #0]
 8014f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f32:	4798      	blx	r3
 8014f34:	463b      	mov	r3, r7
 8014f36:	4632      	mov	r2, r6
 8014f38:	4629      	mov	r1, r5
 8014f3a:	e9cd 8000 	strd	r8, r0, [sp]
 8014f3e:	4620      	mov	r0, r4
 8014f40:	f7ff fea0 	bl	8014c84 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8014f44:	b002      	add	sp, #8
 8014f46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f4a:	bf00      	nop
 8014f4c:	2000bad2 	.word	0x2000bad2

08014f50 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 8014f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f54:	4698      	mov	r8, r3
 8014f56:	b088      	sub	sp, #32
 8014f58:	2300      	movs	r3, #0
 8014f5a:	4617      	mov	r7, r2
 8014f5c:	4604      	mov	r4, r0
 8014f5e:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8014f62:	9306      	str	r3, [sp, #24]
 8014f64:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8014f68:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8014f6c:	f8ad 6010 	strh.w	r6, [sp, #16]
 8014f70:	f8ad 5012 	strh.w	r5, [sp, #18]
 8014f74:	e9cd 3100 	strd	r3, r1, [sp]
 8014f78:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8014f7c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014f80:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8014f84:	f88d 301c 	strb.w	r3, [sp, #28]
 8014f88:	f7ff fe1a 	bl	8014bc0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014f8c:	4642      	mov	r2, r8
 8014f8e:	4603      	mov	r3, r0
 8014f90:	4639      	mov	r1, r7
 8014f92:	4620      	mov	r0, r4
 8014f94:	f7ff ffc0 	bl	8014f18 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8014f98:	4b16      	ldr	r3, [pc, #88]	; (8014ff4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 8014f9a:	9003      	str	r0, [sp, #12]
 8014f9c:	881b      	ldrh	r3, [r3, #0]
 8014f9e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014fa2:	f7f9 feff 	bl	800eda4 <_ZN8touchgfx3HAL3lcdEv>
 8014fa6:	6803      	ldr	r3, [r0, #0]
 8014fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014faa:	4798      	blx	r3
 8014fac:	f88d 001e 	strb.w	r0, [sp, #30]
 8014fb0:	f88d 001d 	strb.w	r0, [sp, #29]
 8014fb4:	b106      	cbz	r6, 8014fb8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 8014fb6:	b935      	cbnz	r5, 8014fc6 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 8014fb8:	4b0f      	ldr	r3, [pc, #60]	; (8014ff8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 8014fba:	f240 11cd 	movw	r1, #461	; 0x1cd
 8014fbe:	4a0f      	ldr	r2, [pc, #60]	; (8014ffc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8014fc0:	480f      	ldr	r0, [pc, #60]	; (8015000 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 8014fc2:	f00e fa39 	bl	8023438 <__assert_func>
 8014fc6:	6823      	ldr	r3, [r4, #0]
 8014fc8:	4620      	mov	r0, r4
 8014fca:	9d00      	ldr	r5, [sp, #0]
 8014fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014fce:	4798      	blx	r3
 8014fd0:	4228      	tst	r0, r5
 8014fd2:	d104      	bne.n	8014fde <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 8014fd4:	4b0b      	ldr	r3, [pc, #44]	; (8015004 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 8014fd6:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 8014fda:	4a08      	ldr	r2, [pc, #32]	; (8014ffc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8014fdc:	e7f0      	b.n	8014fc0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 8014fde:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014fe0:	4669      	mov	r1, sp
 8014fe2:	6860      	ldr	r0, [r4, #4]
 8014fe4:	9306      	str	r3, [sp, #24]
 8014fe6:	6803      	ldr	r3, [r0, #0]
 8014fe8:	685b      	ldr	r3, [r3, #4]
 8014fea:	4798      	blx	r3
 8014fec:	b008      	add	sp, #32
 8014fee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ff2:	bf00      	nop
 8014ff4:	2000bad2 	.word	0x2000bad2
 8014ff8:	08025c42 	.word	0x08025c42
 8014ffc:	08025da8 	.word	0x08025da8
 8015000:	08025bc6 	.word	0x08025bc6
 8015004:	08025c7a 	.word	0x08025c7a

08015008 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8015008:	b570      	push	{r4, r5, r6, lr}
 801500a:	b08a      	sub	sp, #40	; 0x28
 801500c:	4604      	mov	r4, r0
 801500e:	466b      	mov	r3, sp
 8015010:	e883 0006 	stmia.w	r3, {r1, r2}
 8015014:	4b1f      	ldr	r3, [pc, #124]	; (8015094 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 8015016:	781b      	ldrb	r3, [r3, #0]
 8015018:	b933      	cbnz	r3, 8015028 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 801501a:	4b1f      	ldr	r3, [pc, #124]	; (8015098 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 801501c:	f240 11f9 	movw	r1, #505	; 0x1f9
 8015020:	4a1e      	ldr	r2, [pc, #120]	; (801509c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 8015022:	481f      	ldr	r0, [pc, #124]	; (80150a0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 8015024:	f00e fa08 	bl	8023438 <__assert_func>
 8015028:	2300      	movs	r3, #0
 801502a:	f8bd 5000 	ldrh.w	r5, [sp]
 801502e:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 8015032:	9308      	str	r3, [sp, #32]
 8015034:	2301      	movs	r3, #1
 8015036:	9302      	str	r3, [sp, #8]
 8015038:	6803      	ldr	r3, [r0, #0]
 801503a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801503c:	4798      	blx	r3
 801503e:	4632      	mov	r2, r6
 8015040:	4629      	mov	r1, r5
 8015042:	4603      	mov	r3, r0
 8015044:	4620      	mov	r0, r4
 8015046:	f7ff ff67 	bl	8014f18 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801504a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801504c:	9003      	str	r0, [sp, #12]
 801504e:	9305      	str	r3, [sp, #20]
 8015050:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8015054:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015058:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801505c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015060:	4b10      	ldr	r3, [pc, #64]	; (80150a4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 8015062:	881b      	ldrh	r3, [r3, #0]
 8015064:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015068:	f8ad 301e 	strh.w	r3, [sp, #30]
 801506c:	f7f9 fe9a 	bl	800eda4 <_ZN8touchgfx3HAL3lcdEv>
 8015070:	6803      	ldr	r3, [r0, #0]
 8015072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015074:	4798      	blx	r3
 8015076:	23ff      	movs	r3, #255	; 0xff
 8015078:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 801507c:	a902      	add	r1, sp, #8
 801507e:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8015082:	6860      	ldr	r0, [r4, #4]
 8015084:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8015088:	6803      	ldr	r3, [r0, #0]
 801508a:	685b      	ldr	r3, [r3, #4]
 801508c:	4798      	blx	r3
 801508e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8015090:	b00a      	add	sp, #40	; 0x28
 8015092:	bd70      	pop	{r4, r5, r6, pc}
 8015094:	2000bad7 	.word	0x2000bad7
 8015098:	08025b13 	.word	0x08025b13
 801509c:	08025e4c 	.word	0x08025e4c
 80150a0:	08025bc6 	.word	0x08025bc6
 80150a4:	2000bad2 	.word	0x2000bad2

080150a8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 80150a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80150aa:	b08b      	sub	sp, #44	; 0x2c
 80150ac:	4604      	mov	r4, r0
 80150ae:	466d      	mov	r5, sp
 80150b0:	e885 0006 	stmia.w	r5, {r1, r2}
 80150b4:	461d      	mov	r5, r3
 80150b6:	2300      	movs	r3, #0
 80150b8:	f8bd 6000 	ldrh.w	r6, [sp]
 80150bc:	9308      	str	r3, [sp, #32]
 80150be:	2301      	movs	r3, #1
 80150c0:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80150c4:	9302      	str	r3, [sp, #8]
 80150c6:	6803      	ldr	r3, [r0, #0]
 80150c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80150ca:	4798      	blx	r3
 80150cc:	463a      	mov	r2, r7
 80150ce:	4631      	mov	r1, r6
 80150d0:	4603      	mov	r3, r0
 80150d2:	4620      	mov	r0, r4
 80150d4:	f7ff ff20 	bl	8014f18 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80150d8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80150dc:	9003      	str	r0, [sp, #12]
 80150de:	f8ad 3018 	strh.w	r3, [sp, #24]
 80150e2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80150e6:	9505      	str	r5, [sp, #20]
 80150e8:	f8ad 301a 	strh.w	r3, [sp, #26]
 80150ec:	4b0d      	ldr	r3, [pc, #52]	; (8015124 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 80150ee:	881b      	ldrh	r3, [r3, #0]
 80150f0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80150f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80150f6:	f8ad 301e 	strh.w	r3, [sp, #30]
 80150fa:	f7f9 fe53 	bl	800eda4 <_ZN8touchgfx3HAL3lcdEv>
 80150fe:	6803      	ldr	r3, [r0, #0]
 8015100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015102:	4798      	blx	r3
 8015104:	23ff      	movs	r3, #255	; 0xff
 8015106:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 801510a:	a902      	add	r1, sp, #8
 801510c:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8015110:	6860      	ldr	r0, [r4, #4]
 8015112:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8015116:	6803      	ldr	r3, [r0, #0]
 8015118:	685b      	ldr	r3, [r3, #4]
 801511a:	4798      	blx	r3
 801511c:	4628      	mov	r0, r5
 801511e:	b00b      	add	sp, #44	; 0x2c
 8015120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015122:	bf00      	nop
 8015124:	2000bad2 	.word	0x2000bad2

08015128 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8015128:	b570      	push	{r4, r5, r6, lr}
 801512a:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 801512e:	4604      	mov	r4, r0
 8015130:	b19b      	cbz	r3, 801515a <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8015132:	2002      	movs	r0, #2
 8015134:	f7fc fff4 	bl	8012120 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8015138:	2300      	movs	r3, #0
 801513a:	4620      	mov	r0, r4
 801513c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8015140:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8015144:	6823      	ldr	r3, [r4, #0]
 8015146:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 801514a:	f7ff fd39 	bl	8014bc0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801514e:	4601      	mov	r1, r0
 8015150:	4620      	mov	r0, r4
 8015152:	462b      	mov	r3, r5
 8015154:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015158:	4718      	bx	r3
 801515a:	bd70      	pop	{r4, r5, r6, pc}

0801515c <_ZN8touchgfx13DMA_Interface10initializeEv>:
 801515c:	4770      	bx	lr

0801515e <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 801515e:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8015162:	1a13      	subs	r3, r2, r0
 8015164:	4258      	negs	r0, r3
 8015166:	4158      	adcs	r0, r3
 8015168:	4770      	bx	lr

0801516a <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 801516a:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 801516e:	1a9b      	subs	r3, r3, r2
 8015170:	2b00      	cmp	r3, #0
 8015172:	bfdc      	itt	le
 8015174:	6882      	ldrle	r2, [r0, #8]
 8015176:	189b      	addle	r3, r3, r2
 8015178:	2b01      	cmp	r3, #1
 801517a:	bfcc      	ite	gt
 801517c:	2000      	movgt	r0, #0
 801517e:	2001      	movle	r0, #1
 8015180:	4770      	bx	lr

08015182 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8015182:	6902      	ldr	r2, [r0, #16]
 8015184:	6840      	ldr	r0, [r0, #4]
 8015186:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 801518a:	4770      	bx	lr

0801518c <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 801518c:	6803      	ldr	r3, [r0, #0]
 801518e:	691b      	ldr	r3, [r3, #16]
 8015190:	4718      	bx	r3

08015192 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8015192:	4770      	bx	lr

08015194 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8015194:	4770      	bx	lr
	...

08015198 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8015198:	2301      	movs	r3, #1
 801519a:	b570      	push	{r4, r5, r6, lr}
 801519c:	7203      	strb	r3, [r0, #8]
 801519e:	4604      	mov	r4, r0
 80151a0:	6840      	ldr	r0, [r0, #4]
 80151a2:	6803      	ldr	r3, [r0, #0]
 80151a4:	699b      	ldr	r3, [r3, #24]
 80151a6:	4798      	blx	r3
 80151a8:	6803      	ldr	r3, [r0, #0]
 80151aa:	4605      	mov	r5, r0
 80151ac:	2b08      	cmp	r3, #8
 80151ae:	d01e      	beq.n	80151ee <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 80151b0:	d80b      	bhi.n	80151ca <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80151b2:	2b02      	cmp	r3, #2
 80151b4:	d027      	beq.n	8015206 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 80151b6:	2b04      	cmp	r3, #4
 80151b8:	d011      	beq.n	80151de <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 80151ba:	2b01      	cmp	r3, #1
 80151bc:	d028      	beq.n	8015210 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80151be:	4b17      	ldr	r3, [pc, #92]	; (801521c <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 80151c0:	218b      	movs	r1, #139	; 0x8b
 80151c2:	4a17      	ldr	r2, [pc, #92]	; (8015220 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 80151c4:	4817      	ldr	r0, [pc, #92]	; (8015224 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 80151c6:	f00e f937 	bl	8023438 <__assert_func>
 80151ca:	2b40      	cmp	r3, #64	; 0x40
 80151cc:	d020      	beq.n	8015210 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80151ce:	d801      	bhi.n	80151d4 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 80151d0:	2b20      	cmp	r3, #32
 80151d2:	e7f3      	b.n	80151bc <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 80151d4:	2b80      	cmp	r3, #128	; 0x80
 80151d6:	d01b      	beq.n	8015210 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80151d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80151dc:	e7ee      	b.n	80151bc <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 80151de:	6823      	ldr	r3, [r4, #0]
 80151e0:	7f01      	ldrb	r1, [r0, #28]
 80151e2:	4620      	mov	r0, r4
 80151e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80151e6:	4798      	blx	r3
 80151e8:	6823      	ldr	r3, [r4, #0]
 80151ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80151ec:	e006      	b.n	80151fc <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 80151ee:	6823      	ldr	r3, [r4, #0]
 80151f0:	7f01      	ldrb	r1, [r0, #28]
 80151f2:	4620      	mov	r0, r4
 80151f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80151f6:	4798      	blx	r3
 80151f8:	6823      	ldr	r3, [r4, #0]
 80151fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80151fc:	4629      	mov	r1, r5
 80151fe:	4620      	mov	r0, r4
 8015200:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015204:	4718      	bx	r3
 8015206:	6823      	ldr	r3, [r4, #0]
 8015208:	4620      	mov	r0, r4
 801520a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801520c:	4798      	blx	r3
 801520e:	e7f3      	b.n	80151f8 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 8015210:	6823      	ldr	r3, [r4, #0]
 8015212:	4620      	mov	r0, r4
 8015214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015216:	4798      	blx	r3
 8015218:	e7e6      	b.n	80151e8 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 801521a:	bf00      	nop
 801521c:	0802609d 	.word	0x0802609d
 8015220:	080261ac 	.word	0x080261ac
 8015224:	080260c2 	.word	0x080260c2

08015228 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8015228:	b570      	push	{r4, r5, r6, lr}
 801522a:	4604      	mov	r4, r0
 801522c:	460e      	mov	r6, r1
 801522e:	6860      	ldr	r0, [r4, #4]
 8015230:	6803      	ldr	r3, [r0, #0]
 8015232:	685b      	ldr	r3, [r3, #4]
 8015234:	4798      	blx	r3
 8015236:	2800      	cmp	r0, #0
 8015238:	d1f9      	bne.n	801522e <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801523a:	4d0b      	ldr	r5, [pc, #44]	; (8015268 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 801523c:	6828      	ldr	r0, [r5, #0]
 801523e:	6803      	ldr	r3, [r0, #0]
 8015240:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015242:	4798      	blx	r3
 8015244:	f7fd fa20 	bl	8012688 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8015248:	6860      	ldr	r0, [r4, #4]
 801524a:	4631      	mov	r1, r6
 801524c:	6803      	ldr	r3, [r0, #0]
 801524e:	689b      	ldr	r3, [r3, #8]
 8015250:	4798      	blx	r3
 8015252:	6823      	ldr	r3, [r4, #0]
 8015254:	4620      	mov	r0, r4
 8015256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015258:	4798      	blx	r3
 801525a:	6828      	ldr	r0, [r5, #0]
 801525c:	6803      	ldr	r3, [r0, #0]
 801525e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015262:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015264:	4718      	bx	r3
 8015266:	bf00      	nop
 8015268:	2000bad8 	.word	0x2000bad8

0801526c <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 801526c:	b508      	push	{r3, lr}
 801526e:	f7fd f9ef 	bl	8012650 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8015272:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015276:	f7fd b9f9 	b.w	801266c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801527a <_ZN8touchgfx13DMA_Interface5startEv>:
 801527a:	b510      	push	{r4, lr}
 801527c:	4604      	mov	r4, r0
 801527e:	6840      	ldr	r0, [r0, #4]
 8015280:	6803      	ldr	r3, [r0, #0]
 8015282:	681b      	ldr	r3, [r3, #0]
 8015284:	4798      	blx	r3
 8015286:	b948      	cbnz	r0, 801529c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8015288:	7a63      	ldrb	r3, [r4, #9]
 801528a:	b13b      	cbz	r3, 801529c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801528c:	7a23      	ldrb	r3, [r4, #8]
 801528e:	b92b      	cbnz	r3, 801529c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8015290:	6823      	ldr	r3, [r4, #0]
 8015292:	4620      	mov	r0, r4
 8015294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015296:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801529a:	4718      	bx	r3
 801529c:	bd10      	pop	{r4, pc}
	...

080152a0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 80152a0:	b510      	push	{r4, lr}
 80152a2:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 80152a6:	1b12      	subs	r2, r2, r4
 80152a8:	2a00      	cmp	r2, #0
 80152aa:	bfdc      	itt	le
 80152ac:	6883      	ldrle	r3, [r0, #8]
 80152ae:	18d2      	addle	r2, r2, r3
 80152b0:	2a01      	cmp	r2, #1
 80152b2:	dd18      	ble.n	80152e6 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 80152b4:	6843      	ldr	r3, [r0, #4]
 80152b6:	f101 021c 	add.w	r2, r1, #28
 80152ba:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 80152be:	f851 4b04 	ldr.w	r4, [r1], #4
 80152c2:	4291      	cmp	r1, r2
 80152c4:	f843 4b04 	str.w	r4, [r3], #4
 80152c8:	d1f9      	bne.n	80152be <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 80152ca:	880a      	ldrh	r2, [r1, #0]
 80152cc:	801a      	strh	r2, [r3, #0]
 80152ce:	788a      	ldrb	r2, [r1, #2]
 80152d0:	709a      	strb	r2, [r3, #2]
 80152d2:	68c3      	ldr	r3, [r0, #12]
 80152d4:	6882      	ldr	r2, [r0, #8]
 80152d6:	f3bf 8f5b 	dmb	ish
 80152da:	3301      	adds	r3, #1
 80152dc:	429a      	cmp	r2, r3
 80152de:	bfd8      	it	le
 80152e0:	1a9b      	suble	r3, r3, r2
 80152e2:	60c3      	str	r3, [r0, #12]
 80152e4:	bd10      	pop	{r4, pc}
 80152e6:	4b03      	ldr	r3, [pc, #12]	; (80152f4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 80152e8:	2139      	movs	r1, #57	; 0x39
 80152ea:	4a03      	ldr	r2, [pc, #12]	; (80152f8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 80152ec:	4803      	ldr	r0, [pc, #12]	; (80152fc <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 80152ee:	f00e f8a3 	bl	8023438 <__assert_func>
 80152f2:	bf00      	nop
 80152f4:	080260e8 	.word	0x080260e8
 80152f8:	080261dc 	.word	0x080261dc
 80152fc:	080260c2 	.word	0x080260c2

08015300 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8015300:	b510      	push	{r4, lr}
 8015302:	6803      	ldr	r3, [r0, #0]
 8015304:	4604      	mov	r4, r0
 8015306:	681b      	ldr	r3, [r3, #0]
 8015308:	4798      	blx	r3
 801530a:	b128      	cbz	r0, 8015318 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 801530c:	4b07      	ldr	r3, [pc, #28]	; (801532c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 801530e:	213f      	movs	r1, #63	; 0x3f
 8015310:	4a07      	ldr	r2, [pc, #28]	; (8015330 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 8015312:	4808      	ldr	r0, [pc, #32]	; (8015334 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 8015314:	f00e f890 	bl	8023438 <__assert_func>
 8015318:	6923      	ldr	r3, [r4, #16]
 801531a:	68a2      	ldr	r2, [r4, #8]
 801531c:	f3bf 8f5b 	dmb	ish
 8015320:	3301      	adds	r3, #1
 8015322:	429a      	cmp	r2, r3
 8015324:	bfd8      	it	le
 8015326:	1a9b      	suble	r3, r3, r2
 8015328:	6123      	str	r3, [r4, #16]
 801532a:	bd10      	pop	{r4, pc}
 801532c:	0802610b 	.word	0x0802610b
 8015330:	0802622a 	.word	0x0802622a
 8015334:	080260c2 	.word	0x080260c2

08015338 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8015338:	b570      	push	{r4, r5, r6, lr}
 801533a:	4604      	mov	r4, r0
 801533c:	6840      	ldr	r0, [r0, #4]
 801533e:	6803      	ldr	r3, [r0, #0]
 8015340:	681b      	ldr	r3, [r3, #0]
 8015342:	4798      	blx	r3
 8015344:	4605      	mov	r5, r0
 8015346:	b930      	cbnz	r0, 8015356 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8015348:	7a23      	ldrb	r3, [r4, #8]
 801534a:	b123      	cbz	r3, 8015356 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801534c:	6860      	ldr	r0, [r4, #4]
 801534e:	6803      	ldr	r3, [r0, #0]
 8015350:	695b      	ldr	r3, [r3, #20]
 8015352:	4798      	blx	r3
 8015354:	7225      	strb	r5, [r4, #8]
 8015356:	6860      	ldr	r0, [r4, #4]
 8015358:	6803      	ldr	r3, [r0, #0]
 801535a:	681b      	ldr	r3, [r3, #0]
 801535c:	4798      	blx	r3
 801535e:	b928      	cbnz	r0, 801536c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8015360:	6823      	ldr	r3, [r4, #0]
 8015362:	4620      	mov	r0, r4
 8015364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015366:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801536a:	4718      	bx	r3
 801536c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015370:	f7fd b996 	b.w	80126a0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08015374 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8015374:	b510      	push	{r4, lr}
 8015376:	6082      	str	r2, [r0, #8]
 8015378:	2200      	movs	r2, #0
 801537a:	4c03      	ldr	r4, [pc, #12]	; (8015388 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 801537c:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8015380:	e9c0 4100 	strd	r4, r1, [r0]
 8015384:	bd10      	pop	{r4, pc}
 8015386:	bf00      	nop
 8015388:	08026190 	.word	0x08026190

0801538c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 801538c:	6840      	ldr	r0, [r0, #4]
 801538e:	6803      	ldr	r3, [r0, #0]
 8015390:	681b      	ldr	r3, [r3, #0]
 8015392:	4718      	bx	r3

08015394 <_ZN8touchgfx21AbstractPainterRGB88810renderInitEv>:
 8015394:	2001      	movs	r0, #1
 8015396:	4770      	bx	lr

08015398 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh>:
 8015398:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801539c:	460d      	mov	r5, r1
 801539e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 80153a2:	b085      	sub	sp, #20
 80153a4:	4690      	mov	r8, r2
 80153a6:	4411      	add	r1, r2
 80153a8:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80153ac:	4699      	mov	r9, r3
 80153ae:	6803      	ldr	r3, [r0, #0]
 80153b0:	60c1      	str	r1, [r0, #12]
 80153b2:	4604      	mov	r4, r0
 80153b4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80153b6:	440a      	add	r2, r1
 80153b8:	6102      	str	r2, [r0, #16]
 80153ba:	68db      	ldr	r3, [r3, #12]
 80153bc:	e9dd 670d 	ldrd	r6, r7, [sp, #52]	; 0x34
 80153c0:	4798      	blx	r3
 80153c2:	2800      	cmp	r0, #0
 80153c4:	d039      	beq.n	801543a <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa2>
 80153c6:	44c8      	add	r8, r9
 80153c8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80153cc:	4445      	add	r5, r8
 80153ce:	6823      	ldr	r3, [r4, #0]
 80153d0:	f10d 020f 	add.w	r2, sp, #15
 80153d4:	a903      	add	r1, sp, #12
 80153d6:	4620      	mov	r0, r4
 80153d8:	9200      	str	r2, [sp, #0]
 80153da:	f10d 020d 	add.w	r2, sp, #13
 80153de:	f8d3 8010 	ldr.w	r8, [r3, #16]
 80153e2:	f10d 030e 	add.w	r3, sp, #14
 80153e6:	47c0      	blx	r8
 80153e8:	b1f8      	cbz	r0, 801542a <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x92>
 80153ea:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80153ee:	7a20      	ldrb	r0, [r4, #8]
 80153f0:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80153f4:	4358      	muls	r0, r3
 80153f6:	f89d 100e 	ldrb.w	r1, [sp, #14]
 80153fa:	1c43      	adds	r3, r0, #1
 80153fc:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8015400:	f817 0b01 	ldrb.w	r0, [r7], #1
 8015404:	121b      	asrs	r3, r3, #8
 8015406:	fb10 f003 	smulbb	r0, r0, r3
 801540a:	b283      	uxth	r3, r0
 801540c:	1c58      	adds	r0, r3, #1
 801540e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8015412:	6823      	ldr	r3, [r4, #0]
 8015414:	1200      	asrs	r0, r0, #8
 8015416:	f8d3 8014 	ldr.w	r8, [r3, #20]
 801541a:	f89d 300d 	ldrb.w	r3, [sp, #13]
 801541e:	28ff      	cmp	r0, #255	; 0xff
 8015420:	d10e      	bne.n	8015440 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa8>
 8015422:	9100      	str	r1, [sp, #0]
 8015424:	4629      	mov	r1, r5
 8015426:	4620      	mov	r0, r4
 8015428:	47c0      	blx	r8
 801542a:	68e3      	ldr	r3, [r4, #12]
 801542c:	3e01      	subs	r6, #1
 801542e:	f105 0503 	add.w	r5, r5, #3
 8015432:	f103 0301 	add.w	r3, r3, #1
 8015436:	60e3      	str	r3, [r4, #12]
 8015438:	d1c9      	bne.n	80153ce <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x36>
 801543a:	b005      	add	sp, #20
 801543c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015440:	fa1f fc80 	uxth.w	ip, r0
 8015444:	43c0      	mvns	r0, r0
 8015446:	f895 e002 	ldrb.w	lr, [r5, #2]
 801544a:	fb12 f20c 	smulbb	r2, r2, ip
 801544e:	b2c0      	uxtb	r0, r0
 8015450:	fb13 f30c 	smulbb	r3, r3, ip
 8015454:	fb0e 2200 	mla	r2, lr, r0, r2
 8015458:	f895 e001 	ldrb.w	lr, [r5, #1]
 801545c:	fb11 f10c 	smulbb	r1, r1, ip
 8015460:	fb0e 3300 	mla	r3, lr, r0, r3
 8015464:	f895 e000 	ldrb.w	lr, [r5]
 8015468:	b292      	uxth	r2, r2
 801546a:	b29b      	uxth	r3, r3
 801546c:	fb0e 1000 	mla	r0, lr, r0, r1
 8015470:	1c59      	adds	r1, r3, #1
 8015472:	b280      	uxth	r0, r0
 8015474:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8015478:	1c51      	adds	r1, r2, #1
 801547a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801547e:	1c41      	adds	r1, r0, #1
 8015480:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8015484:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8015488:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801548c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8015490:	9000      	str	r0, [sp, #0]
 8015492:	e7c7      	b.n	8015424 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x8c>

08015494 <_ZN8touchgfx21AbstractPainterRGB88811renderPixelEPthhh>:
 8015494:	f89d 0000 	ldrb.w	r0, [sp]
 8015498:	704b      	strb	r3, [r1, #1]
 801549a:	7008      	strb	r0, [r1, #0]
 801549c:	708a      	strb	r2, [r1, #2]
 801549e:	4770      	bx	lr

080154a0 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh>:
 80154a0:	4413      	add	r3, r2
 80154a2:	7dc2      	ldrb	r2, [r0, #23]
 80154a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80154a8:	4419      	add	r1, r3
 80154aa:	7a03      	ldrb	r3, [r0, #8]
 80154ac:	435a      	muls	r2, r3
 80154ae:	1c53      	adds	r3, r2, #1
 80154b0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80154b4:	121b      	asrs	r3, r3, #8
 80154b6:	2bff      	cmp	r3, #255	; 0xff
 80154b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80154ba:	e9dd 7406 	ldrd	r7, r4, [sp, #24]
 80154be:	d13e      	bne.n	801553e <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x9e>
 80154c0:	4427      	add	r7, r4
 80154c2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80154c6:	3103      	adds	r1, #3
 80154c8:	7d86      	ldrb	r6, [r0, #22]
 80154ca:	2bff      	cmp	r3, #255	; 0xff
 80154cc:	d10a      	bne.n	80154e4 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x44>
 80154ce:	f801 6c03 	strb.w	r6, [r1, #-3]
 80154d2:	7d43      	ldrb	r3, [r0, #21]
 80154d4:	f801 3c02 	strb.w	r3, [r1, #-2]
 80154d8:	7d03      	ldrb	r3, [r0, #20]
 80154da:	f801 3c01 	strb.w	r3, [r1, #-1]
 80154de:	42a7      	cmp	r7, r4
 80154e0:	d1ef      	bne.n	80154c2 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x22>
 80154e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80154e4:	b29a      	uxth	r2, r3
 80154e6:	43db      	mvns	r3, r3
 80154e8:	f811 5c03 	ldrb.w	r5, [r1, #-3]
 80154ec:	fb16 f602 	smulbb	r6, r6, r2
 80154f0:	b2db      	uxtb	r3, r3
 80154f2:	fb05 6503 	mla	r5, r5, r3, r6
 80154f6:	b2ad      	uxth	r5, r5
 80154f8:	1c6e      	adds	r6, r5, #1
 80154fa:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 80154fe:	f811 6c02 	ldrb.w	r6, [r1, #-2]
 8015502:	fb16 f603 	smulbb	r6, r6, r3
 8015506:	122d      	asrs	r5, r5, #8
 8015508:	f801 5c03 	strb.w	r5, [r1, #-3]
 801550c:	7d45      	ldrb	r5, [r0, #21]
 801550e:	fb05 6502 	mla	r5, r5, r2, r6
 8015512:	b2ad      	uxth	r5, r5
 8015514:	1c6e      	adds	r6, r5, #1
 8015516:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801551a:	122d      	asrs	r5, r5, #8
 801551c:	f801 5c02 	strb.w	r5, [r1, #-2]
 8015520:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8015524:	7d06      	ldrb	r6, [r0, #20]
 8015526:	fb15 f303 	smulbb	r3, r5, r3
 801552a:	fb06 3202 	mla	r2, r6, r2, r3
 801552e:	b292      	uxth	r2, r2
 8015530:	1c53      	adds	r3, r2, #1
 8015532:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8015536:	1212      	asrs	r2, r2, #8
 8015538:	f801 2c01 	strb.w	r2, [r1, #-1]
 801553c:	e7cf      	b.n	80154de <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3e>
 801553e:	b2de      	uxtb	r6, r3
 8015540:	2b00      	cmp	r3, #0
 8015542:	d0ce      	beq.n	80154e2 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>
 8015544:	3103      	adds	r1, #3
 8015546:	4427      	add	r7, r4
 8015548:	f814 2b01 	ldrb.w	r2, [r4], #1
 801554c:	3103      	adds	r1, #3
 801554e:	f811 cc06 	ldrb.w	ip, [r1, #-6]
 8015552:	fb02 f306 	mul.w	r3, r2, r6
 8015556:	42bc      	cmp	r4, r7
 8015558:	f103 0201 	add.w	r2, r3, #1
 801555c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8015560:	ea4f 2222 	mov.w	r2, r2, asr #8
 8015564:	b295      	uxth	r5, r2
 8015566:	ea6f 0202 	mvn.w	r2, r2
 801556a:	b2d3      	uxtb	r3, r2
 801556c:	7d82      	ldrb	r2, [r0, #22]
 801556e:	fb1c fc03 	smulbb	ip, ip, r3
 8015572:	fb02 c205 	mla	r2, r2, r5, ip
 8015576:	b292      	uxth	r2, r2
 8015578:	f102 0c01 	add.w	ip, r2, #1
 801557c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8015580:	f811 cc05 	ldrb.w	ip, [r1, #-5]
 8015584:	fb1c fc03 	smulbb	ip, ip, r3
 8015588:	ea4f 2222 	mov.w	r2, r2, asr #8
 801558c:	f801 2c06 	strb.w	r2, [r1, #-6]
 8015590:	7d42      	ldrb	r2, [r0, #21]
 8015592:	fb02 c205 	mla	r2, r2, r5, ip
 8015596:	b292      	uxth	r2, r2
 8015598:	f102 0c01 	add.w	ip, r2, #1
 801559c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80155a0:	ea4f 2222 	mov.w	r2, r2, asr #8
 80155a4:	f801 2c05 	strb.w	r2, [r1, #-5]
 80155a8:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 80155ac:	f890 c014 	ldrb.w	ip, [r0, #20]
 80155b0:	fb12 f303 	smulbb	r3, r2, r3
 80155b4:	fb0c 3305 	mla	r3, ip, r5, r3
 80155b8:	b29b      	uxth	r3, r3
 80155ba:	f103 0201 	add.w	r2, r3, #1
 80155be:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80155c2:	ea4f 2323 	mov.w	r3, r3, asr #8
 80155c6:	f801 3c04 	strb.w	r3, [r1, #-4]
 80155ca:	d1bd      	bne.n	8015548 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0xa8>
 80155cc:	e789      	b.n	80154e2 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>

080155ce <_ZN8touchgfx13PainterRGB88810renderNextERhS1_S1_S1_>:
 80155ce:	b510      	push	{r4, lr}
 80155d0:	7d04      	ldrb	r4, [r0, #20]
 80155d2:	700c      	strb	r4, [r1, #0]
 80155d4:	7d41      	ldrb	r1, [r0, #21]
 80155d6:	7011      	strb	r1, [r2, #0]
 80155d8:	7d82      	ldrb	r2, [r0, #22]
 80155da:	701a      	strb	r2, [r3, #0]
 80155dc:	9b02      	ldr	r3, [sp, #8]
 80155de:	7dc2      	ldrb	r2, [r0, #23]
 80155e0:	2001      	movs	r0, #1
 80155e2:	701a      	strb	r2, [r3, #0]
 80155e4:	bd10      	pop	{r4, pc}

080155e6 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>:
 80155e6:	b570      	push	{r4, r5, r6, lr}
 80155e8:	4616      	mov	r6, r2
 80155ea:	4604      	mov	r4, r0
 80155ec:	460d      	mov	r5, r1
 80155ee:	f7f9 fbd9 	bl	800eda4 <_ZN8touchgfx3HAL3lcdEv>
 80155f2:	6803      	ldr	r3, [r0, #0]
 80155f4:	4629      	mov	r1, r5
 80155f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80155f8:	4798      	blx	r3
 80155fa:	7520      	strb	r0, [r4, #20]
 80155fc:	f7f9 fbd2 	bl	800eda4 <_ZN8touchgfx3HAL3lcdEv>
 8015600:	6803      	ldr	r3, [r0, #0]
 8015602:	4629      	mov	r1, r5
 8015604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015606:	4798      	blx	r3
 8015608:	7560      	strb	r0, [r4, #21]
 801560a:	f7f9 fbcb 	bl	800eda4 <_ZN8touchgfx3HAL3lcdEv>
 801560e:	6803      	ldr	r3, [r0, #0]
 8015610:	4629      	mov	r1, r5
 8015612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015614:	4798      	blx	r3
 8015616:	75e6      	strb	r6, [r4, #23]
 8015618:	75a0      	strb	r0, [r4, #22]
 801561a:	bd70      	pop	{r4, r5, r6, pc}

0801561c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>:
 801561c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801561e:	460e      	mov	r6, r1
 8015620:	4617      	mov	r7, r2
 8015622:	4604      	mov	r4, r0
 8015624:	f000 f832 	bl	801568c <_ZN8touchgfx15AbstractPainterC1Ev>
 8015628:	4b12      	ldr	r3, [pc, #72]	; (8015674 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x58>)
 801562a:	6023      	str	r3, [r4, #0]
 801562c:	f7f9 fbba 	bl	800eda4 <_ZN8touchgfx3HAL3lcdEv>
 8015630:	6803      	ldr	r3, [r0, #0]
 8015632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015634:	4798      	blx	r3
 8015636:	1e43      	subs	r3, r0, #1
 8015638:	425d      	negs	r5, r3
 801563a:	415d      	adcs	r5, r3
 801563c:	4b0e      	ldr	r3, [pc, #56]	; (8015678 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x5c>)
 801563e:	681b      	ldr	r3, [r3, #0]
 8015640:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8015642:	b130      	cbz	r0, 8015652 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x36>
 8015644:	6803      	ldr	r3, [r0, #0]
 8015646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015648:	4798      	blx	r3
 801564a:	2801      	cmp	r0, #1
 801564c:	bf08      	it	eq
 801564e:	f045 0501 	orreq.w	r5, r5, #1
 8015652:	b92d      	cbnz	r5, 8015660 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x44>
 8015654:	4b09      	ldr	r3, [pc, #36]	; (801567c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x60>)
 8015656:	2129      	movs	r1, #41	; 0x29
 8015658:	4a09      	ldr	r2, [pc, #36]	; (8015680 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x64>)
 801565a:	480a      	ldr	r0, [pc, #40]	; (8015684 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x68>)
 801565c:	f00d feec 	bl	8023438 <__assert_func>
 8015660:	4b09      	ldr	r3, [pc, #36]	; (8015688 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x6c>)
 8015662:	4620      	mov	r0, r4
 8015664:	463a      	mov	r2, r7
 8015666:	4631      	mov	r1, r6
 8015668:	6023      	str	r3, [r4, #0]
 801566a:	f7ff ffbc 	bl	80155e6 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
 801566e:	4620      	mov	r0, r4
 8015670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015672:	bf00      	nop
 8015674:	08026264 	.word	0x08026264
 8015678:	2000bad8 	.word	0x2000bad8
 801567c:	0802627c 	.word	0x0802627c
 8015680:	08026340 	.word	0x08026340
 8015684:	080262da 	.word	0x080262da
 8015688:	08026328 	.word	0x08026328

0801568c <_ZN8touchgfx15AbstractPainterC1Ev>:
 801568c:	4a03      	ldr	r2, [pc, #12]	; (801569c <_ZN8touchgfx15AbstractPainterC1Ev+0x10>)
 801568e:	6002      	str	r2, [r0, #0]
 8015690:	2200      	movs	r2, #0
 8015692:	6042      	str	r2, [r0, #4]
 8015694:	22ff      	movs	r2, #255	; 0xff
 8015696:	7202      	strb	r2, [r0, #8]
 8015698:	4770      	bx	lr
 801569a:	bf00      	nop
 801569c:	08026384 	.word	0x08026384

080156a0 <_ZN8touchgfx15AbstractPainterD1Ev>:
 80156a0:	4770      	bx	lr

080156a2 <_ZN8touchgfx15AbstractPainter9setOffsetEtt>:
 80156a2:	8081      	strh	r1, [r0, #4]
 80156a4:	80c2      	strh	r2, [r0, #6]
 80156a6:	4770      	bx	lr

080156a8 <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>:
 80156a8:	7201      	strb	r1, [r0, #8]
 80156aa:	4770      	bx	lr

080156ac <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
 80156ac:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
 80156b0:	4770      	bx	lr

080156b2 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
 80156b2:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 80156b6:	4770      	bx	lr

080156b8 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 80156b8:	6281      	str	r1, [r0, #40]	; 0x28
 80156ba:	4770      	bx	lr

080156bc <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 80156bc:	b513      	push	{r0, r1, r4, lr}
 80156be:	6803      	ldr	r3, [r0, #0]
 80156c0:	4604      	mov	r4, r0
 80156c2:	4601      	mov	r1, r0
 80156c4:	4668      	mov	r0, sp
 80156c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80156c8:	4798      	blx	r3
 80156ca:	6823      	ldr	r3, [r4, #0]
 80156cc:	4669      	mov	r1, sp
 80156ce:	4620      	mov	r0, r4
 80156d0:	691b      	ldr	r3, [r3, #16]
 80156d2:	4798      	blx	r3
 80156d4:	b002      	add	sp, #8
 80156d6:	bd10      	pop	{r4, pc}

080156d8 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 80156d8:	b510      	push	{r4, lr}
 80156da:	2200      	movs	r2, #0
 80156dc:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 80156e0:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 80156e4:	8002      	strh	r2, [r0, #0]
 80156e6:	8042      	strh	r2, [r0, #2]
 80156e8:	8084      	strh	r4, [r0, #4]
 80156ea:	80c1      	strh	r1, [r0, #6]
 80156ec:	bd10      	pop	{r4, pc}

080156ee <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 80156ee:	2200      	movs	r2, #0
 80156f0:	8002      	strh	r2, [r0, #0]
 80156f2:	8042      	strh	r2, [r0, #2]
 80156f4:	8082      	strh	r2, [r0, #4]
 80156f6:	80c2      	strh	r2, [r0, #6]
 80156f8:	4770      	bx	lr
	...

080156fc <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 80156fc:	b508      	push	{r3, lr}
 80156fe:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8015700:	b928      	cbnz	r0, 801570e <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 8015702:	4b03      	ldr	r3, [pc, #12]	; (8015710 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 8015704:	2127      	movs	r1, #39	; 0x27
 8015706:	4a03      	ldr	r2, [pc, #12]	; (8015714 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 8015708:	4803      	ldr	r0, [pc, #12]	; (8015718 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 801570a:	f00d fe95 	bl	8023438 <__assert_func>
 801570e:	bd08      	pop	{r3, pc}
 8015710:	08026390 	.word	0x08026390
 8015714:	08026474 	.word	0x08026474
 8015718:	080263b7 	.word	0x080263b7

0801571c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 801571c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015720:	b089      	sub	sp, #36	; 0x24
 8015722:	4604      	mov	r4, r0
 8015724:	6808      	ldr	r0, [r1, #0]
 8015726:	f04f 0a00 	mov.w	sl, #0
 801572a:	6849      	ldr	r1, [r1, #4]
 801572c:	ab02      	add	r3, sp, #8
 801572e:	f04f 0b01 	mov.w	fp, #1
 8015732:	c303      	stmia	r3!, {r0, r1}
 8015734:	4b3f      	ldr	r3, [pc, #252]	; (8015834 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x118>)
 8015736:	4621      	mov	r1, r4
 8015738:	a804      	add	r0, sp, #16
 801573a:	781b      	ldrb	r3, [r3, #0]
 801573c:	2b01      	cmp	r3, #1
 801573e:	6823      	ldr	r3, [r4, #0]
 8015740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015742:	bf1f      	itttt	ne
 8015744:	f10d 0906 	addne.w	r9, sp, #6
 8015748:	ae03      	addne	r6, sp, #12
 801574a:	f10d 050e 	addne.w	r5, sp, #14
 801574e:	f10d 080a 	addne.w	r8, sp, #10
 8015752:	bf01      	itttt	eq
 8015754:	f10d 090e 	addeq.w	r9, sp, #14
 8015758:	f10d 0606 	addeq.w	r6, sp, #6
 801575c:	ad03      	addeq	r5, sp, #12
 801575e:	f10d 0808 	addeq.w	r8, sp, #8
 8015762:	4798      	blx	r3
 8015764:	f9b5 3000 	ldrsh.w	r3, [r5]
 8015768:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 801576c:	2b00      	cmp	r3, #0
 801576e:	d056      	beq.n	801581e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x102>
 8015770:	4293      	cmp	r3, r2
 8015772:	bfa8      	it	ge
 8015774:	4613      	movge	r3, r2
 8015776:	f8ad 3006 	strh.w	r3, [sp, #6]
 801577a:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 801577e:	2f00      	cmp	r7, #0
 8015780:	dd34      	ble.n	80157ec <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd0>
 8015782:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8015786:	f8bd c014 	ldrh.w	ip, [sp, #20]
 801578a:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801578e:	4484      	add	ip, r0
 8015790:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8015794:	f9b6 e000 	ldrsh.w	lr, [r6]
 8015798:	fa0f fc8c 	sxth.w	ip, ip
 801579c:	f9b9 1000 	ldrsh.w	r1, [r9]
 80157a0:	f8ad 2018 	strh.w	r2, [sp, #24]
 80157a4:	4562      	cmp	r2, ip
 80157a6:	f8ad 301a 	strh.w	r3, [sp, #26]
 80157aa:	f8ad e01c 	strh.w	lr, [sp, #28]
 80157ae:	f8ad 101e 	strh.w	r1, [sp, #30]
 80157b2:	da29      	bge.n	8015808 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 80157b4:	4472      	add	r2, lr
 80157b6:	b212      	sxth	r2, r2
 80157b8:	4290      	cmp	r0, r2
 80157ba:	da25      	bge.n	8015808 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 80157bc:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 80157c0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80157c4:	4402      	add	r2, r0
 80157c6:	b212      	sxth	r2, r2
 80157c8:	4293      	cmp	r3, r2
 80157ca:	da1d      	bge.n	8015808 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 80157cc:	440b      	add	r3, r1
 80157ce:	b21b      	sxth	r3, r3
 80157d0:	4298      	cmp	r0, r3
 80157d2:	da19      	bge.n	8015808 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 80157d4:	6823      	ldr	r3, [r4, #0]
 80157d6:	a906      	add	r1, sp, #24
 80157d8:	4620      	mov	r0, r4
 80157da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80157dc:	4798      	blx	r3
 80157de:	b998      	cbnz	r0, 8015808 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 80157e0:	107f      	asrs	r7, r7, #1
 80157e2:	f04f 0a01 	mov.w	sl, #1
 80157e6:	f8ad 7006 	strh.w	r7, [sp, #6]
 80157ea:	e7c6      	b.n	801577a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 80157ec:	d10c      	bne.n	8015808 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 80157ee:	f8ad b006 	strh.w	fp, [sp, #6]
 80157f2:	f8b8 2000 	ldrh.w	r2, [r8]
 80157f6:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 80157fa:	440a      	add	r2, r1
 80157fc:	f8a8 2000 	strh.w	r2, [r8]
 8015800:	882b      	ldrh	r3, [r5, #0]
 8015802:	1a5b      	subs	r3, r3, r1
 8015804:	802b      	strh	r3, [r5, #0]
 8015806:	e7ad      	b.n	8015764 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8015808:	f1ba 0f00 	cmp.w	sl, #0
 801580c:	d0f1      	beq.n	80157f2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 801580e:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8015812:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8015816:	429a      	cmp	r2, r3
 8015818:	bf08      	it	eq
 801581a:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 801581c:	e7e9      	b.n	80157f2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 801581e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8015822:	429a      	cmp	r2, r3
 8015824:	bf04      	itt	eq
 8015826:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 801582a:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 801582c:	b009      	add	sp, #36	; 0x24
 801582e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015832:	bf00      	nop
 8015834:	2000bad0 	.word	0x2000bad0

08015838 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8015838:	2200      	movs	r2, #0
 801583a:	2101      	movs	r1, #1
 801583c:	8082      	strh	r2, [r0, #4]
 801583e:	80c2      	strh	r2, [r0, #6]
 8015840:	8102      	strh	r2, [r0, #8]
 8015842:	8142      	strh	r2, [r0, #10]
 8015844:	8182      	strh	r2, [r0, #12]
 8015846:	81c2      	strh	r2, [r0, #14]
 8015848:	8202      	strh	r2, [r0, #16]
 801584a:	8242      	strh	r2, [r0, #18]
 801584c:	61c2      	str	r2, [r0, #28]
 801584e:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8015852:	6282      	str	r2, [r0, #40]	; 0x28
 8015854:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8015858:	4905      	ldr	r1, [pc, #20]	; (8015870 <_ZN8touchgfx12CanvasWidgetC1Ev+0x38>)
 801585a:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801585e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015862:	6001      	str	r1, [r0, #0]
 8015864:	8582      	strh	r2, [r0, #44]	; 0x2c
 8015866:	22ff      	movs	r2, #255	; 0xff
 8015868:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 801586c:	4770      	bx	lr
 801586e:	bf00      	nop
 8015870:	080263fc 	.word	0x080263fc

08015874 <_ZN8touchgfx12CanvasWidgetD1Ev>:
 8015874:	4770      	bx	lr

08015876 <_ZNK8touchgfx4Line14getMinimalRectEv>:
 8015876:	f101 0368 	add.w	r3, r1, #104	; 0x68
 801587a:	4602      	mov	r2, r0
 801587c:	cb03      	ldmia	r3!, {r0, r1}
 801587e:	6010      	str	r0, [r2, #0]
 8015880:	4610      	mov	r0, r2
 8015882:	6051      	str	r1, [r2, #4]
 8015884:	4770      	bx	lr

08015886 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8015886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801588a:	f9b1 5004 	ldrsh.w	r5, [r1, #4]
 801588e:	b395      	cbz	r5, 80158f6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 8015890:	f9b1 c006 	ldrsh.w	ip, [r1, #6]
 8015894:	f1bc 0f00 	cmp.w	ip, #0
 8015898:	d02d      	beq.n	80158f6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 801589a:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801589e:	f9b1 e000 	ldrsh.w	lr, [r1]
 80158a2:	b354      	cbz	r4, 80158fa <_ZN8touchgfx4Rect11expandToFitERKS0_+0x74>
 80158a4:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 80158a8:	b33f      	cbz	r7, 80158fa <_ZN8touchgfx4Rect11expandToFitERKS0_+0x74>
 80158aa:	f9b0 8000 	ldrsh.w	r8, [r0]
 80158ae:	4475      	add	r5, lr
 80158b0:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 80158b4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80158b8:	45f0      	cmp	r8, lr
 80158ba:	4646      	mov	r6, r8
 80158bc:	4444      	add	r4, r8
 80158be:	bfa8      	it	ge
 80158c0:	4676      	movge	r6, lr
 80158c2:	4293      	cmp	r3, r2
 80158c4:	4619      	mov	r1, r3
 80158c6:	443b      	add	r3, r7
 80158c8:	bfa8      	it	ge
 80158ca:	4611      	movge	r1, r2
 80158cc:	4462      	add	r2, ip
 80158ce:	b22d      	sxth	r5, r5
 80158d0:	8006      	strh	r6, [r0, #0]
 80158d2:	b224      	sxth	r4, r4
 80158d4:	8041      	strh	r1, [r0, #2]
 80158d6:	b212      	sxth	r2, r2
 80158d8:	b21b      	sxth	r3, r3
 80158da:	42a5      	cmp	r5, r4
 80158dc:	bfac      	ite	ge
 80158de:	ebc6 0405 	rsbge	r4, r6, r5
 80158e2:	ebc6 0404 	rsblt	r4, r6, r4
 80158e6:	429a      	cmp	r2, r3
 80158e8:	bfac      	ite	ge
 80158ea:	ebc1 0302 	rsbge	r3, r1, r2
 80158ee:	ebc1 0303 	rsblt	r3, r1, r3
 80158f2:	8084      	strh	r4, [r0, #4]
 80158f4:	80c3      	strh	r3, [r0, #6]
 80158f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158fa:	f8a0 e000 	strh.w	lr, [r0]
 80158fe:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8015902:	8043      	strh	r3, [r0, #2]
 8015904:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8015908:	8083      	strh	r3, [r0, #4]
 801590a:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801590e:	e7f1      	b.n	80158f4 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x6e>

08015910 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 8015910:	b507      	push	{r0, r1, r2, lr}
 8015912:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8015916:	ab01      	add	r3, sp, #4
 8015918:	6809      	ldr	r1, [r1, #0]
 801591a:	6800      	ldr	r0, [r0, #0]
 801591c:	f002 fb07 	bl	8017f2e <_ZN8touchgfx6muldivElllRl>
 8015920:	b003      	add	sp, #12
 8015922:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08015928 <_ZN8touchgfx7CWRUtil4sineEi>:
 8015928:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801592c:	fb90 f3f2 	sdiv	r3, r0, r2
 8015930:	fb03 0312 	mls	r3, r3, r2, r0
 8015934:	4413      	add	r3, r2
 8015936:	fb93 f0f2 	sdiv	r0, r3, r2
 801593a:	fb02 3010 	mls	r0, r2, r0, r3
 801593e:	4b0a      	ldr	r3, [pc, #40]	; (8015968 <_ZN8touchgfx7CWRUtil4sineEi+0x40>)
 8015940:	285a      	cmp	r0, #90	; 0x5a
 8015942:	dc02      	bgt.n	801594a <_ZN8touchgfx7CWRUtil4sineEi+0x22>
 8015944:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8015948:	4770      	bx	lr
 801594a:	28b4      	cmp	r0, #180	; 0xb4
 801594c:	dc02      	bgt.n	8015954 <_ZN8touchgfx7CWRUtil4sineEi+0x2c>
 801594e:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 8015952:	e7f7      	b.n	8015944 <_ZN8touchgfx7CWRUtil4sineEi+0x1c>
 8015954:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 8015958:	bfd4      	ite	le
 801595a:	38b4      	suble	r0, #180	; 0xb4
 801595c:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 8015960:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8015964:	4240      	negs	r0, r0
 8015966:	4770      	bx	lr
 8015968:	0802651e 	.word	0x0802651e

0801596c <_ZN8touchgfx7CWRUtil5isqrtEm>:
 801596c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8015970:	f04f 0300 	mov.w	r3, #0
 8015974:	bf2c      	ite	cs
 8015976:	f04f 4280 	movcs.w	r2, #1073741824	; 0x40000000
 801597a:	f44f 4280 	movcc.w	r2, #16384	; 0x4000
 801597e:	1899      	adds	r1, r3, r2
 8015980:	4288      	cmp	r0, r1
 8015982:	bf24      	itt	cs
 8015984:	1853      	addcs	r3, r2, r1
 8015986:	1a40      	subcs	r0, r0, r1
 8015988:	0892      	lsrs	r2, r2, #2
 801598a:	ea4f 0353 	mov.w	r3, r3, lsr #1
 801598e:	d1f6      	bne.n	801597e <_ZN8touchgfx7CWRUtil5isqrtEm+0x12>
 8015990:	4618      	mov	r0, r3
 8015992:	4770      	bx	lr

08015994 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>:
 8015994:	2800      	cmp	r0, #0
 8015996:	b508      	push	{r3, lr}
 8015998:	da05      	bge.n	80159a6 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x12>
 801599a:	4240      	negs	r0, r0
 801599c:	f7ff fffa 	bl	8015994 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 80159a0:	4240      	negs	r0, r0
 80159a2:	b240      	sxtb	r0, r0
 80159a4:	bd08      	pop	{r3, pc}
 80159a6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80159aa:	dc11      	bgt.n	80159d0 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x3c>
 80159ac:	f5b0 7f35 	cmp.w	r0, #724	; 0x2d4
 80159b0:	dd09      	ble.n	80159c6 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x32>
 80159b2:	4340      	muls	r0, r0
 80159b4:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
 80159b8:	f7ff ffd8 	bl	801596c <_ZN8touchgfx7CWRUtil5isqrtEm>
 80159bc:	f7ff ffea 	bl	8015994 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 80159c0:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 80159c4:	e7ed      	b.n	80159a2 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0xe>
 80159c6:	3003      	adds	r0, #3
 80159c8:	4b02      	ldr	r3, [pc, #8]	; (80159d4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x40>)
 80159ca:	10c0      	asrs	r0, r0, #3
 80159cc:	5618      	ldrsb	r0, [r3, r0]
 80159ce:	e7e9      	b.n	80159a4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 80159d0:	2000      	movs	r0, #0
 80159d2:	e7e7      	b.n	80159a4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 80159d4:	080264c2 	.word	0x080264c2

080159d8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>:
 80159d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80159da:	460c      	mov	r4, r1
 80159dc:	1e01      	subs	r1, r0, #0
 80159de:	4615      	mov	r5, r2
 80159e0:	db01      	blt.n	80159e6 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0xe>
 80159e2:	2c00      	cmp	r4, #0
 80159e4:	da06      	bge.n	80159f4 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x1c>
 80159e6:	4b11      	ldr	r3, [pc, #68]	; (8015a2c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x54>)
 80159e8:	f240 3197 	movw	r1, #919	; 0x397
 80159ec:	4a10      	ldr	r2, [pc, #64]	; (8015a30 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x58>)
 80159ee:	4811      	ldr	r0, [pc, #68]	; (8015a34 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x5c>)
 80159f0:	f00d fd22 	bl	8023438 <__assert_func>
 80159f4:	428c      	cmp	r4, r1
 80159f6:	dd06      	ble.n	8015a06 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2e>
 80159f8:	4620      	mov	r0, r4
 80159fa:	f7ff ffed 	bl	80159d8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 80159fe:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8015a02:	b003      	add	sp, #12
 8015a04:	bd30      	pop	{r4, r5, pc}
 8015a06:	4349      	muls	r1, r1
 8015a08:	fb04 1004 	mla	r0, r4, r4, r1
 8015a0c:	f7ff ffae 	bl	801596c <_ZN8touchgfx7CWRUtil5isqrtEm>
 8015a10:	6028      	str	r0, [r5, #0]
 8015a12:	2800      	cmp	r0, #0
 8015a14:	d0f5      	beq.n	8015a02 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2a>
 8015a16:	4602      	mov	r2, r0
 8015a18:	ab01      	add	r3, sp, #4
 8015a1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8015a1e:	4620      	mov	r0, r4
 8015a20:	f002 fa85 	bl	8017f2e <_ZN8touchgfx6muldivElllRl>
 8015a24:	f7ff ffb6 	bl	8015994 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8015a28:	e7eb      	b.n	8015a02 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2a>
 8015a2a:	bf00      	nop
 8015a2c:	080265d4 	.word	0x080265d4
 8015a30:	0802669c 	.word	0x0802669c
 8015a34:	080265e5 	.word	0x080265e5

08015a38 <_ZN8touchgfx4LineC1Ev>:
 8015a38:	b510      	push	{r4, lr}
 8015a3a:	4604      	mov	r4, r0
 8015a3c:	f7ff fefc 	bl	8015838 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8015a40:	4b0c      	ldr	r3, [pc, #48]	; (8015a74 <_ZN8touchgfx4LineC1Ev+0x3c>)
 8015a42:	2220      	movs	r2, #32
 8015a44:	4620      	mov	r0, r4
 8015a46:	6023      	str	r3, [r4, #0]
 8015a48:	2300      	movs	r3, #0
 8015a4a:	6422      	str	r2, [r4, #64]	; 0x40
 8015a4c:	2212      	movs	r2, #18
 8015a4e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8015a52:	6722      	str	r2, [r4, #112]	; 0x70
 8015a54:	60a3      	str	r3, [r4, #8]
 8015a56:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 8015a5a:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 8015a5e:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015a62:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
 8015a66:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
 8015a6a:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
 8015a6e:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
 8015a72:	bd10      	pop	{r4, pc}
 8015a74:	08026624 	.word	0x08026624

08015a78 <_ZN8touchgfx4Line17updateCachedShapeEv>:
 8015a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a7c:	6b86      	ldr	r6, [r0, #56]	; 0x38
 8015a7e:	b085      	sub	sp, #20
 8015a80:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8015a82:	4604      	mov	r4, r0
 8015a84:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8015a86:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8015a88:	1af6      	subs	r6, r6, r3
 8015a8a:	eba5 0502 	sub.w	r5, r5, r2
 8015a8e:	f040 809b 	bne.w	8015bc8 <_ZN8touchgfx4Line17updateCachedShapeEv+0x150>
 8015a92:	b955      	cbnz	r5, 8015aaa <_ZN8touchgfx4Line17updateCachedShapeEv+0x32>
 8015a94:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
 8015a98:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8015a9c:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8015aa0:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8015aa4:	b005      	add	sp, #20
 8015aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015aaa:	ea85 77e5 	eor.w	r7, r5, r5, asr #31
 8015aae:	eba7 77e5 	sub.w	r7, r7, r5, asr #31
 8015ab2:	f04f 0802 	mov.w	r8, #2
 8015ab6:	463a      	mov	r2, r7
 8015ab8:	4629      	mov	r1, r5
 8015aba:	ab03      	add	r3, sp, #12
 8015abc:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8015abe:	f002 fa36 	bl	8017f2e <_ZN8touchgfx6muldivElllRl>
 8015ac2:	ab03      	add	r3, sp, #12
 8015ac4:	463a      	mov	r2, r7
 8015ac6:	4631      	mov	r1, r6
 8015ac8:	fb90 f5f8 	sdiv	r5, r0, r8
 8015acc:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8015ace:	f002 fa2e 	bl	8017f2e <_ZN8touchgfx6muldivElllRl>
 8015ad2:	f894 a044 	ldrb.w	sl, [r4, #68]	; 0x44
 8015ad6:	f8d4 e038 	ldr.w	lr, [r4, #56]	; 0x38
 8015ada:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
 8015ade:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8015ae0:	fb90 f0f8 	sdiv	r0, r0, r8
 8015ae4:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 8015ae8:	eba8 0305 	sub.w	r3, r8, r5
 8015aec:	f1ba 0f00 	cmp.w	sl, #0
 8015af0:	f040 80c3 	bne.w	8015c7a <_ZN8touchgfx4Line17updateCachedShapeEv+0x202>
 8015af4:	64a3      	str	r3, [r4, #72]	; 0x48
 8015af6:	19c3      	adds	r3, r0, r7
 8015af8:	65a3      	str	r3, [r4, #88]	; 0x58
 8015afa:	ebae 0305 	sub.w	r3, lr, r5
 8015afe:	64e3      	str	r3, [r4, #76]	; 0x4c
 8015b00:	eb00 030c 	add.w	r3, r0, ip
 8015b04:	65e3      	str	r3, [r4, #92]	; 0x5c
 8015b06:	eb05 030e 	add.w	r3, r5, lr
 8015b0a:	6523      	str	r3, [r4, #80]	; 0x50
 8015b0c:	ebac 0300 	sub.w	r3, ip, r0
 8015b10:	6623      	str	r3, [r4, #96]	; 0x60
 8015b12:	eb05 0308 	add.w	r3, r5, r8
 8015b16:	6563      	str	r3, [r4, #84]	; 0x54
 8015b18:	1a3b      	subs	r3, r7, r0
 8015b1a:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8015b1c:	f104 094c 	add.w	r9, r4, #76	; 0x4c
 8015b20:	6663      	str	r3, [r4, #100]	; 0x64
 8015b22:	f104 0358 	add.w	r3, r4, #88	; 0x58
 8015b26:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8015b28:	4632      	mov	r2, r6
 8015b2a:	9301      	str	r3, [sp, #4]
 8015b2c:	9100      	str	r1, [sp, #0]
 8015b2e:	f859 bb04 	ldr.w	fp, [r9], #4
 8015b32:	9b00      	ldr	r3, [sp, #0]
 8015b34:	455e      	cmp	r6, fp
 8015b36:	bfa8      	it	ge
 8015b38:	465e      	movge	r6, fp
 8015b3a:	455a      	cmp	r2, fp
 8015b3c:	bfb8      	it	lt
 8015b3e:	465a      	movlt	r2, fp
 8015b40:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 8015b44:	4559      	cmp	r1, fp
 8015b46:	bfa8      	it	ge
 8015b48:	4659      	movge	r1, fp
 8015b4a:	455b      	cmp	r3, fp
 8015b4c:	bfb8      	it	lt
 8015b4e:	465b      	movlt	r3, fp
 8015b50:	9300      	str	r3, [sp, #0]
 8015b52:	9b01      	ldr	r3, [sp, #4]
 8015b54:	454b      	cmp	r3, r9
 8015b56:	d1ea      	bne.n	8015b2e <_ZN8touchgfx4Line17updateCachedShapeEv+0xb6>
 8015b58:	f04f 0b20 	mov.w	fp, #32
 8015b5c:	b209      	sxth	r1, r1
 8015b5e:	b212      	sxth	r2, r2
 8015b60:	f1ba 0f01 	cmp.w	sl, #1
 8015b64:	b236      	sxth	r6, r6
 8015b66:	fb91 f9fb 	sdiv	r9, r1, fp
 8015b6a:	f9bd 1000 	ldrsh.w	r1, [sp]
 8015b6e:	f8a4 906a 	strh.w	r9, [r4, #106]	; 0x6a
 8015b72:	fb92 f2fb 	sdiv	r2, r2, fp
 8015b76:	fb91 f1fb 	sdiv	r1, r1, fp
 8015b7a:	fb96 f6fb 	sdiv	r6, r6, fp
 8015b7e:	f102 0201 	add.w	r2, r2, #1
 8015b82:	f101 0101 	add.w	r1, r1, #1
 8015b86:	f8a4 6068 	strh.w	r6, [r4, #104]	; 0x68
 8015b8a:	eba1 0109 	sub.w	r1, r1, r9
 8015b8e:	eba2 0606 	sub.w	r6, r2, r6
 8015b92:	f8a4 106e 	strh.w	r1, [r4, #110]	; 0x6e
 8015b96:	f8a4 606c 	strh.w	r6, [r4, #108]	; 0x6c
 8015b9a:	d183      	bne.n	8015aa4 <_ZN8touchgfx4Line17updateCachedShapeEv+0x2c>
 8015b9c:	eba8 0305 	sub.w	r3, r8, r5
 8015ba0:	64a3      	str	r3, [r4, #72]	; 0x48
 8015ba2:	19c3      	adds	r3, r0, r7
 8015ba4:	65a3      	str	r3, [r4, #88]	; 0x58
 8015ba6:	ebae 0305 	sub.w	r3, lr, r5
 8015baa:	64e3      	str	r3, [r4, #76]	; 0x4c
 8015bac:	eb00 030c 	add.w	r3, r0, ip
 8015bb0:	65e3      	str	r3, [r4, #92]	; 0x5c
 8015bb2:	eb05 030e 	add.w	r3, r5, lr
 8015bb6:	4445      	add	r5, r8
 8015bb8:	6523      	str	r3, [r4, #80]	; 0x50
 8015bba:	ebac 0300 	sub.w	r3, ip, r0
 8015bbe:	1a38      	subs	r0, r7, r0
 8015bc0:	6565      	str	r5, [r4, #84]	; 0x54
 8015bc2:	6623      	str	r3, [r4, #96]	; 0x60
 8015bc4:	6660      	str	r0, [r4, #100]	; 0x64
 8015bc6:	e76d      	b.n	8015aa4 <_ZN8touchgfx4Line17updateCachedShapeEv+0x2c>
 8015bc8:	ea86 77e6 	eor.w	r7, r6, r6, asr #31
 8015bcc:	eba7 77e6 	sub.w	r7, r7, r6, asr #31
 8015bd0:	2d00      	cmp	r5, #0
 8015bd2:	f43f af6e 	beq.w	8015ab2 <_ZN8touchgfx4Line17updateCachedShapeEv+0x3a>
 8015bd6:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 8015bda:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 8015bde:	fb93 f2f7 	sdiv	r2, r3, r7
 8015be2:	fb07 3312 	mls	r3, r7, r2, r3
 8015be6:	b34b      	cbz	r3, 8015c3c <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c4>
 8015be8:	fb97 f2f3 	sdiv	r2, r7, r3
 8015bec:	fb03 7712 	mls	r7, r3, r2, r7
 8015bf0:	2f00      	cmp	r7, #0
 8015bf2:	d1f4      	bne.n	8015bde <_ZN8touchgfx4Line17updateCachedShapeEv+0x166>
 8015bf4:	2b01      	cmp	r3, #1
 8015bf6:	f24b 5204 	movw	r2, #46340	; 0xb504
 8015bfa:	bf18      	it	ne
 8015bfc:	fb96 f6f3 	sdivne	r6, r6, r3
 8015c00:	ea86 71e6 	eor.w	r1, r6, r6, asr #31
 8015c04:	eba1 71e6 	sub.w	r1, r1, r6, asr #31
 8015c08:	bf18      	it	ne
 8015c0a:	fb95 f5f3 	sdivne	r5, r5, r3
 8015c0e:	4291      	cmp	r1, r2
 8015c10:	dd16      	ble.n	8015c40 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c8>
 8015c12:	2d00      	cmp	r5, #0
 8015c14:	da4d      	bge.n	8015cb2 <_ZN8touchgfx4Line17updateCachedShapeEv+0x23a>
 8015c16:	4b29      	ldr	r3, [pc, #164]	; (8015cbc <_ZN8touchgfx4Line17updateCachedShapeEv+0x244>)
 8015c18:	429d      	cmp	r5, r3
 8015c1a:	da27      	bge.n	8015c6c <_ZN8touchgfx4Line17updateCachedShapeEv+0x1f4>
 8015c1c:	426a      	negs	r2, r5
 8015c1e:	f24b 5304 	movw	r3, #46340	; 0xb504
 8015c22:	fb91 f1f3 	sdiv	r1, r1, r3
 8015c26:	fb92 f3f3 	sdiv	r3, r2, r3
 8015c2a:	4299      	cmp	r1, r3
 8015c2c:	bfcc      	ite	gt
 8015c2e:	1c4b      	addgt	r3, r1, #1
 8015c30:	3301      	addle	r3, #1
 8015c32:	fb96 f6f3 	sdiv	r6, r6, r3
 8015c36:	fb95 f5f3 	sdiv	r5, r5, r3
 8015c3a:	e00f      	b.n	8015c5c <_ZN8touchgfx4Line17updateCachedShapeEv+0x1e4>
 8015c3c:	463b      	mov	r3, r7
 8015c3e:	e7d9      	b.n	8015bf4 <_ZN8touchgfx4Line17updateCachedShapeEv+0x17c>
 8015c40:	2d00      	cmp	r5, #0
 8015c42:	fb92 f2f1 	sdiv	r2, r2, r1
 8015c46:	da13      	bge.n	8015c70 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1f8>
 8015c48:	4269      	negs	r1, r5
 8015c4a:	f24b 5304 	movw	r3, #46340	; 0xb504
 8015c4e:	fb93 f3f1 	sdiv	r3, r3, r1
 8015c52:	429a      	cmp	r2, r3
 8015c54:	bfa8      	it	ge
 8015c56:	461a      	movge	r2, r3
 8015c58:	4356      	muls	r6, r2
 8015c5a:	4355      	muls	r5, r2
 8015c5c:	fb05 f005 	mul.w	r0, r5, r5
 8015c60:	fb06 0006 	mla	r0, r6, r6, r0
 8015c64:	f7ff fe82 	bl	801596c <_ZN8touchgfx7CWRUtil5isqrtEm>
 8015c68:	4607      	mov	r7, r0
 8015c6a:	e722      	b.n	8015ab2 <_ZN8touchgfx4Line17updateCachedShapeEv+0x3a>
 8015c6c:	2200      	movs	r2, #0
 8015c6e:	e7eb      	b.n	8015c48 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d0>
 8015c70:	4629      	mov	r1, r5
 8015c72:	e7ea      	b.n	8015c4a <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d2>
 8015c74:	4629      	mov	r1, r5
 8015c76:	2200      	movs	r2, #0
 8015c78:	e7e7      	b.n	8015c4a <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d2>
 8015c7a:	1a1b      	subs	r3, r3, r0
 8015c7c:	64a3      	str	r3, [r4, #72]	; 0x48
 8015c7e:	19c3      	adds	r3, r0, r7
 8015c80:	1b5b      	subs	r3, r3, r5
 8015c82:	65a3      	str	r3, [r4, #88]	; 0x58
 8015c84:	ebae 0305 	sub.w	r3, lr, r5
 8015c88:	4403      	add	r3, r0
 8015c8a:	64e3      	str	r3, [r4, #76]	; 0x4c
 8015c8c:	eb00 030c 	add.w	r3, r0, ip
 8015c90:	442b      	add	r3, r5
 8015c92:	65e3      	str	r3, [r4, #92]	; 0x5c
 8015c94:	eb05 030e 	add.w	r3, r5, lr
 8015c98:	4403      	add	r3, r0
 8015c9a:	6523      	str	r3, [r4, #80]	; 0x50
 8015c9c:	ebac 0300 	sub.w	r3, ip, r0
 8015ca0:	442b      	add	r3, r5
 8015ca2:	6623      	str	r3, [r4, #96]	; 0x60
 8015ca4:	eb05 0308 	add.w	r3, r5, r8
 8015ca8:	1a1b      	subs	r3, r3, r0
 8015caa:	6563      	str	r3, [r4, #84]	; 0x54
 8015cac:	1a3b      	subs	r3, r7, r0
 8015cae:	1b5b      	subs	r3, r3, r5
 8015cb0:	e733      	b.n	8015b1a <_ZN8touchgfx4Line17updateCachedShapeEv+0xa2>
 8015cb2:	4295      	cmp	r5, r2
 8015cb4:	ddde      	ble.n	8015c74 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1fc>
 8015cb6:	462a      	mov	r2, r5
 8015cb8:	e7b1      	b.n	8015c1e <_ZN8touchgfx4Line17updateCachedShapeEv+0x1a6>
 8015cba:	bf00      	nop
 8015cbc:	ffff4afc 	.word	0xffff4afc

08015cc0 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>:
 8015cc0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8015cc2:	428b      	cmp	r3, r1
 8015cc4:	d102      	bne.n	8015ccc <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0xc>
 8015cc6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8015cc8:	4293      	cmp	r3, r2
 8015cca:	d003      	beq.n	8015cd4 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0x14>
 8015ccc:	e9c0 120c 	strd	r1, r2, [r0, #48]	; 0x30
 8015cd0:	f7ff bed2 	b.w	8015a78 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8015cd4:	4770      	bx	lr

08015cd6 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>:
 8015cd6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8015cd8:	428b      	cmp	r3, r1
 8015cda:	d102      	bne.n	8015ce2 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0xc>
 8015cdc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8015cde:	4293      	cmp	r3, r2
 8015ce0:	d003      	beq.n	8015cea <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0x14>
 8015ce2:	e9c0 120e 	strd	r1, r2, [r0, #56]	; 0x38
 8015ce6:	f7ff bec7 	b.w	8015a78 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8015cea:	4770      	bx	lr

08015cec <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>:
 8015cec:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
 8015cf0:	f7ff bec2 	b.w	8015a78 <_ZN8touchgfx4Line17updateCachedShapeEv>

08015cf4 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE>:
 8015cf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015cf8:	b0b3      	sub	sp, #204	; 0xcc
 8015cfa:	4604      	mov	r4, r0
 8015cfc:	460a      	mov	r2, r1
 8015cfe:	4601      	mov	r1, r0
 8015d00:	a804      	add	r0, sp, #16
 8015d02:	ad32      	add	r5, sp, #200	; 0xc8
 8015d04:	f00b ffcc 	bl	8021ca0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8015d08:	2300      	movs	r3, #0
 8015d0a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8015d0c:	f845 3dc4 	str.w	r3, [r5, #-196]!
 8015d10:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015d12:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8015d14:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8015d16:	1ac0      	subs	r0, r0, r3
 8015d18:	eba1 0102 	sub.w	r1, r1, r2
 8015d1c:	d43c      	bmi.n	8015d98 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xa4>
 8015d1e:	2900      	cmp	r1, #0
 8015d20:	462a      	mov	r2, r5
 8015d22:	db33      	blt.n	8015d8c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x98>
 8015d24:	f7ff fe58 	bl	80159d8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8015d28:	f100 075a 	add.w	r7, r0, #90	; 0x5a
 8015d2c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8015d2e:	a804      	add	r0, sp, #16
 8015d30:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8015d32:	f00c f97e 	bl	8022032 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8015d36:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8015d38:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8015d3a:	a804      	add	r0, sp, #16
 8015d3c:	f00c f908 	bl	8021f50 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8015d40:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8015d44:	2b01      	cmp	r3, #1
 8015d46:	d137      	bne.n	8015db8 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 8015d48:	6f26      	ldr	r6, [r4, #112]	; 0x70
 8015d4a:	2eb3      	cmp	r6, #179	; 0xb3
 8015d4c:	dc34      	bgt.n	8015db8 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 8015d4e:	eba7 0906 	sub.w	r9, r7, r6
 8015d52:	4648      	mov	r0, r9
 8015d54:	f7ff fde8 	bl	8015928 <_ZN8touchgfx7CWRUtil4sineEi>
 8015d58:	a902      	add	r1, sp, #8
 8015d5a:	9002      	str	r0, [sp, #8]
 8015d5c:	4628      	mov	r0, r5
 8015d5e:	f7ff fdd7 	bl	8015910 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015d62:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8015d64:	eb00 0801 	add.w	r8, r0, r1
 8015d68:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 8015d6c:	f7ff fddc 	bl	8015928 <_ZN8touchgfx7CWRUtil4sineEi>
 8015d70:	a903      	add	r1, sp, #12
 8015d72:	9003      	str	r0, [sp, #12]
 8015d74:	4628      	mov	r0, r5
 8015d76:	f7ff fdcb 	bl	8015910 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015d7a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8015d7c:	4641      	mov	r1, r8
 8015d7e:	1a12      	subs	r2, r2, r0
 8015d80:	a804      	add	r0, sp, #16
 8015d82:	f00c f8e5 	bl	8021f50 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8015d86:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015d88:	441e      	add	r6, r3
 8015d8a:	e7de      	b.n	8015d4a <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x56>
 8015d8c:	4249      	negs	r1, r1
 8015d8e:	f7ff fe23 	bl	80159d8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8015d92:	f1c0 075a 	rsb	r7, r0, #90	; 0x5a
 8015d96:	e7c9      	b.n	8015d2c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 8015d98:	2900      	cmp	r1, #0
 8015d9a:	f1c0 0000 	rsb	r0, r0, #0
 8015d9e:	462a      	mov	r2, r5
 8015da0:	db04      	blt.n	8015dac <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xb8>
 8015da2:	f7ff fe19 	bl	80159d8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8015da6:	f5c0 7787 	rsb	r7, r0, #270	; 0x10e
 8015daa:	e7bf      	b.n	8015d2c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 8015dac:	4249      	negs	r1, r1
 8015dae:	f7ff fe13 	bl	80159d8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8015db2:	f500 7787 	add.w	r7, r0, #270	; 0x10e
 8015db6:	e7b9      	b.n	8015d2c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 8015db8:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8015dba:	a804      	add	r0, sp, #16
 8015dbc:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8015dbe:	f00c f8c7 	bl	8021f50 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8015dc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015dc4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8015dc6:	a804      	add	r0, sp, #16
 8015dc8:	f00c f8c2 	bl	8021f50 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8015dcc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8015dd0:	2b01      	cmp	r3, #1
 8015dd2:	d123      	bne.n	8015e1c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 8015dd4:	6f26      	ldr	r6, [r4, #112]	; 0x70
 8015dd6:	f1c6 06b4 	rsb	r6, r6, #180	; 0xb4
 8015dda:	2e00      	cmp	r6, #0
 8015ddc:	dd1e      	ble.n	8015e1c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 8015dde:	eb06 0907 	add.w	r9, r6, r7
 8015de2:	4648      	mov	r0, r9
 8015de4:	f7ff fda0 	bl	8015928 <_ZN8touchgfx7CWRUtil4sineEi>
 8015de8:	a902      	add	r1, sp, #8
 8015dea:	9002      	str	r0, [sp, #8]
 8015dec:	4628      	mov	r0, r5
 8015dee:	f7ff fd8f 	bl	8015910 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015df2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8015df4:	eb00 0801 	add.w	r8, r0, r1
 8015df8:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 8015dfc:	f7ff fd94 	bl	8015928 <_ZN8touchgfx7CWRUtil4sineEi>
 8015e00:	a903      	add	r1, sp, #12
 8015e02:	9003      	str	r0, [sp, #12]
 8015e04:	4628      	mov	r0, r5
 8015e06:	f7ff fd83 	bl	8015910 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015e0a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8015e0c:	4641      	mov	r1, r8
 8015e0e:	1a12      	subs	r2, r2, r0
 8015e10:	a804      	add	r0, sp, #16
 8015e12:	f00c f89d 	bl	8021f50 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8015e16:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015e18:	1af6      	subs	r6, r6, r3
 8015e1a:	e7de      	b.n	8015dda <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xe6>
 8015e1c:	a804      	add	r0, sp, #16
 8015e1e:	f00c fa0c 	bl	802223a <_ZN8touchgfx6Canvas6renderEv>
 8015e22:	4604      	mov	r4, r0
 8015e24:	a804      	add	r0, sp, #16
 8015e26:	f00c fa49 	bl	80222bc <_ZN8touchgfx6CanvasD1Ev>
 8015e2a:	4620      	mov	r0, r4
 8015e2c:	b033      	add	sp, #204	; 0xcc
 8015e2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08015e32 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 8015e32:	b570      	push	{r4, r5, r6, lr}
 8015e34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015e38:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8015e3a:	4604      	mov	r4, r0
 8015e3c:	429a      	cmp	r2, r3
 8015e3e:	d00c      	beq.n	8015e5a <_ZN8touchgfx8TextArea13getTextHeightEv+0x28>
 8015e40:	f850 3b26 	ldr.w	r3, [r0], #38
 8015e44:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 8015e46:	f7f9 fee7 	bl	800fc18 <_ZNK8touchgfx9TypedText7getTextEv>
 8015e4a:	2300      	movs	r3, #0
 8015e4c:	4601      	mov	r1, r0
 8015e4e:	46ac      	mov	ip, r5
 8015e50:	4620      	mov	r0, r4
 8015e52:	461a      	mov	r2, r3
 8015e54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015e58:	4760      	bx	ip
 8015e5a:	2000      	movs	r0, #0
 8015e5c:	bd70      	pop	{r4, r5, r6, pc}

08015e5e <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8015e5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015e60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015e64:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8015e66:	429a      	cmp	r2, r3
 8015e68:	d016      	beq.n	8015e98 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x3a>
 8015e6a:	f100 0426 	add.w	r4, r0, #38	; 0x26
 8015e6e:	4620      	mov	r0, r4
 8015e70:	f7f8 fc3c 	bl	800e6ec <_ZNK8touchgfx9TypedText7getFontEv>
 8015e74:	6803      	ldr	r3, [r0, #0]
 8015e76:	4605      	mov	r5, r0
 8015e78:	4620      	mov	r0, r4
 8015e7a:	69de      	ldr	r6, [r3, #28]
 8015e7c:	f7f8 fc52 	bl	800e724 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8015e80:	4607      	mov	r7, r0
 8015e82:	4620      	mov	r0, r4
 8015e84:	f7f9 fec8 	bl	800fc18 <_ZNK8touchgfx9TypedText7getTextEv>
 8015e88:	2300      	movs	r3, #0
 8015e8a:	4602      	mov	r2, r0
 8015e8c:	4639      	mov	r1, r7
 8015e8e:	9300      	str	r3, [sp, #0]
 8015e90:	4628      	mov	r0, r5
 8015e92:	47b0      	blx	r6
 8015e94:	b003      	add	sp, #12
 8015e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e98:	2000      	movs	r0, #0
 8015e9a:	e7fb      	b.n	8015e94 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x36>

08015e9c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8015e9c:	b40e      	push	{r1, r2, r3}
 8015e9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015ea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ea6:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8015ea8:	b09b      	sub	sp, #108	; 0x6c
 8015eaa:	4604      	mov	r4, r0
 8015eac:	429a      	cmp	r2, r3
 8015eae:	d03f      	beq.n	8015f30 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x94>
 8015eb0:	f100 0726 	add.w	r7, r0, #38	; 0x26
 8015eb4:	ab22      	add	r3, sp, #136	; 0x88
 8015eb6:	4638      	mov	r0, r7
 8015eb8:	9303      	str	r3, [sp, #12]
 8015eba:	f7f8 fc17 	bl	800e6ec <_ZNK8touchgfx9TypedText7getFontEv>
 8015ebe:	6803      	ldr	r3, [r0, #0]
 8015ec0:	4680      	mov	r8, r0
 8015ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015ec4:	4798      	blx	r3
 8015ec6:	4606      	mov	r6, r0
 8015ec8:	b205      	sxth	r5, r0
 8015eca:	a804      	add	r0, sp, #16
 8015ecc:	f002 fe36 	bl	8018b3c <_ZN8touchgfx12TextProviderC1Ev>
 8015ed0:	f8d8 3000 	ldr.w	r3, [r8]
 8015ed4:	4640      	mov	r0, r8
 8015ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015ed8:	4798      	blx	r3
 8015eda:	9a03      	ldr	r2, [sp, #12]
 8015edc:	4603      	mov	r3, r0
 8015ede:	9921      	ldr	r1, [sp, #132]	; 0x84
 8015ee0:	a804      	add	r0, sp, #16
 8015ee2:	f002 fe48 	bl	8018b76 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8015ee6:	4638      	mov	r0, r7
 8015ee8:	f7f8 fc1c 	bl	800e724 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8015eec:	4680      	mov	r8, r0
 8015eee:	4638      	mov	r0, r7
 8015ef0:	f7f8 fbfc 	bl	800e6ec <_ZNK8touchgfx9TypedText7getFontEv>
 8015ef4:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8015ef8:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
 8015efc:	4642      	mov	r2, r8
 8015efe:	9300      	str	r3, [sp, #0]
 8015f00:	4603      	mov	r3, r0
 8015f02:	a804      	add	r0, sp, #16
 8015f04:	f000 fecd 	bl	8016ca2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8015f08:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8015f0c:	b203      	sxth	r3, r0
 8015f0e:	18a9      	adds	r1, r5, r2
 8015f10:	2900      	cmp	r1, #0
 8015f12:	dd0b      	ble.n	8015f2c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x90>
 8015f14:	3b01      	subs	r3, #1
 8015f16:	fb13 f302 	smulbb	r3, r3, r2
 8015f1a:	fb16 3300 	smlabb	r3, r6, r0, r3
 8015f1e:	b21d      	sxth	r5, r3
 8015f20:	4628      	mov	r0, r5
 8015f22:	b01b      	add	sp, #108	; 0x6c
 8015f24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015f28:	b003      	add	sp, #12
 8015f2a:	4770      	bx	lr
 8015f2c:	2b00      	cmp	r3, #0
 8015f2e:	dcf7      	bgt.n	8015f20 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>
 8015f30:	2500      	movs	r5, #0
 8015f32:	e7f5      	b.n	8015f20 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>

08015f34 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8015f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015f3c:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 8015f3e:	b08d      	sub	sp, #52	; 0x34
 8015f40:	4604      	mov	r4, r0
 8015f42:	429e      	cmp	r6, r3
 8015f44:	4688      	mov	r8, r1
 8015f46:	d04b      	beq.n	8015fe0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 8015f48:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8015f4c:	4628      	mov	r0, r5
 8015f4e:	f7f8 fbcd 	bl	800e6ec <_ZNK8touchgfx9TypedText7getFontEv>
 8015f52:	4607      	mov	r7, r0
 8015f54:	2800      	cmp	r0, #0
 8015f56:	d043      	beq.n	8015fe0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 8015f58:	4628      	mov	r0, r5
 8015f5a:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 8015f5e:	f7f8 fbf9 	bl	800e754 <_ZNK8touchgfx9TypedText11assertValidEv>
 8015f62:	4b21      	ldr	r3, [pc, #132]	; (8015fe8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb4>)
 8015f64:	4628      	mov	r0, r5
 8015f66:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 8015f6a:	681b      	ldr	r3, [r3, #0]
 8015f6c:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 8015f70:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8015f74:	785e      	ldrb	r6, [r3, #1]
 8015f76:	f7f8 fbd5 	bl	800e724 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8015f7a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015f7c:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8015f80:	f3c6 0601 	ubfx	r6, r6, #0, #2
 8015f84:	9309      	str	r3, [sp, #36]	; 0x24
 8015f86:	4b19      	ldr	r3, [pc, #100]	; (8015fec <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb8>)
 8015f88:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 8015f8c:	681b      	ldr	r3, [r3, #0]
 8015f8e:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 8015f92:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8015f96:	9707      	str	r7, [sp, #28]
 8015f98:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 8015f9c:	f88d 6020 	strb.w	r6, [sp, #32]
 8015fa0:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8015fa4:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 8015fa8:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8015fac:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8015fb0:	b10a      	cbz	r2, 8015fb6 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x82>
 8015fb2:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 8015fb4:	b906      	cbnz	r6, 8015fb8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x84>
 8015fb6:	689e      	ldr	r6, [r3, #8]
 8015fb8:	af05      	add	r7, sp, #20
 8015fba:	4621      	mov	r1, r4
 8015fbc:	4638      	mov	r0, r7
 8015fbe:	f001 ff1c 	bl	8017dfa <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015fc2:	4628      	mov	r0, r5
 8015fc4:	f7f9 fe28 	bl	800fc18 <_ZNK8touchgfx9TypedText7getTextEv>
 8015fc8:	2300      	movs	r3, #0
 8015fca:	9001      	str	r0, [sp, #4]
 8015fcc:	4630      	mov	r0, r6
 8015fce:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8015fd2:	ab07      	add	r3, sp, #28
 8015fd4:	9300      	str	r3, [sp, #0]
 8015fd6:	4643      	mov	r3, r8
 8015fd8:	e897 0006 	ldmia.w	r7, {r1, r2}
 8015fdc:	f000 fc2e 	bl	801683c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8015fe0:	b00d      	add	sp, #52	; 0x34
 8015fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fe6:	bf00      	nop
 8015fe8:	2000bb68 	.word	0x2000bb68
 8015fec:	2000bad8 	.word	0x2000bad8

08015ff0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8015ff0:	b570      	push	{r4, r5, r6, lr}
 8015ff2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015ff6:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8015ff8:	4604      	mov	r4, r0
 8015ffa:	429a      	cmp	r2, r3
 8015ffc:	d021      	beq.n	8016042 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x52>
 8015ffe:	6803      	ldr	r3, [r0, #0]
 8016000:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016002:	4798      	blx	r3
 8016004:	6823      	ldr	r3, [r4, #0]
 8016006:	4605      	mov	r5, r0
 8016008:	4620      	mov	r0, r4
 801600a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801600c:	4798      	blx	r3
 801600e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8016012:	4606      	mov	r6, r0
 8016014:	b22d      	sxth	r5, r5
 8016016:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801601a:	6823      	ldr	r3, [r4, #0]
 801601c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801601e:	d109      	bne.n	8016034 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x44>
 8016020:	4629      	mov	r1, r5
 8016022:	4620      	mov	r0, r4
 8016024:	4798      	blx	r3
 8016026:	6823      	ldr	r3, [r4, #0]
 8016028:	4631      	mov	r1, r6
 801602a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801602c:	4620      	mov	r0, r4
 801602e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016032:	4718      	bx	r3
 8016034:	4601      	mov	r1, r0
 8016036:	4620      	mov	r0, r4
 8016038:	4798      	blx	r3
 801603a:	6823      	ldr	r3, [r4, #0]
 801603c:	4629      	mov	r1, r5
 801603e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016040:	e7f4      	b.n	801602c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>
 8016042:	bd70      	pop	{r4, r5, r6, pc}

08016044 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 8016044:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8016048:	84c1      	strh	r1, [r0, #38]	; 0x26
 801604a:	b922      	cbnz	r2, 8016056 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 801604c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8016050:	b90b      	cbnz	r3, 8016056 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 8016052:	f7ff bfcd 	b.w	8015ff0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8016056:	4770      	bx	lr

08016058 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8016058:	2300      	movs	r3, #0
 801605a:	8003      	strh	r3, [r0, #0]
 801605c:	8043      	strh	r3, [r0, #2]
 801605e:	8083      	strh	r3, [r0, #4]
 8016060:	80c3      	strh	r3, [r0, #6]
 8016062:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8016066:	b91b      	cbnz	r3, 8016070 <_ZNK8touchgfx3Box12getSolidRectEv+0x18>
 8016068:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801606c:	2bff      	cmp	r3, #255	; 0xff
 801606e:	d103      	bne.n	8016078 <_ZNK8touchgfx3Box12getSolidRectEv+0x20>
 8016070:	890b      	ldrh	r3, [r1, #8]
 8016072:	8083      	strh	r3, [r0, #4]
 8016074:	894b      	ldrh	r3, [r1, #10]
 8016076:	80c3      	strh	r3, [r0, #6]
 8016078:	4770      	bx	lr
	...

0801607c <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 801607c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801607e:	4604      	mov	r4, r0
 8016080:	466b      	mov	r3, sp
 8016082:	6808      	ldr	r0, [r1, #0]
 8016084:	6849      	ldr	r1, [r1, #4]
 8016086:	c303      	stmia	r3!, {r0, r1}
 8016088:	6823      	ldr	r3, [r4, #0]
 801608a:	4669      	mov	r1, sp
 801608c:	4620      	mov	r0, r4
 801608e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016090:	4798      	blx	r3
 8016092:	4b08      	ldr	r3, [pc, #32]	; (80160b4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8016094:	681b      	ldr	r3, [r3, #0]
 8016096:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801609a:	b10a      	cbz	r2, 80160a0 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 801609c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801609e:	b900      	cbnz	r0, 80160a2 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 80160a0:	6898      	ldr	r0, [r3, #8]
 80160a2:	6803      	ldr	r3, [r0, #0]
 80160a4:	4669      	mov	r1, sp
 80160a6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80160a8:	69dd      	ldr	r5, [r3, #28]
 80160aa:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80160ae:	47a8      	blx	r5
 80160b0:	b003      	add	sp, #12
 80160b2:	bd30      	pop	{r4, r5, pc}
 80160b4:	2000bad8 	.word	0x2000bad8

080160b8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 80160b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80160bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80160c0:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 80160c2:	4604      	mov	r4, r0
 80160c4:	429a      	cmp	r2, r3
 80160c6:	d018      	beq.n	80160fa <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x42>
 80160c8:	f100 0526 	add.w	r5, r0, #38	; 0x26
 80160cc:	4628      	mov	r0, r5
 80160ce:	f7f8 fb0d 	bl	800e6ec <_ZNK8touchgfx9TypedText7getFontEv>
 80160d2:	6803      	ldr	r3, [r0, #0]
 80160d4:	4606      	mov	r6, r0
 80160d6:	4628      	mov	r0, r5
 80160d8:	69df      	ldr	r7, [r3, #28]
 80160da:	f7f8 fb23 	bl	800e724 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 80160de:	4680      	mov	r8, r0
 80160e0:	4628      	mov	r0, r5
 80160e2:	f7f9 fd99 	bl	800fc18 <_ZNK8touchgfx9TypedText7getTextEv>
 80160e6:	2300      	movs	r3, #0
 80160e8:	4602      	mov	r2, r0
 80160ea:	4641      	mov	r1, r8
 80160ec:	9300      	str	r3, [sp, #0]
 80160ee:	4630      	mov	r0, r6
 80160f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80160f2:	47b8      	blx	r7
 80160f4:	b002      	add	sp, #8
 80160f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80160fa:	2000      	movs	r0, #0
 80160fc:	e7fa      	b.n	80160f4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x3c>

080160fe <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 80160fe:	b570      	push	{r4, r5, r6, lr}
 8016100:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016104:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8016106:	4604      	mov	r4, r0
 8016108:	429a      	cmp	r2, r3
 801610a:	d00c      	beq.n	8016126 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x28>
 801610c:	f850 3b26 	ldr.w	r3, [r0], #38
 8016110:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 8016112:	f7f9 fd81 	bl	800fc18 <_ZNK8touchgfx9TypedText7getTextEv>
 8016116:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8016118:	4601      	mov	r1, r0
 801611a:	46ac      	mov	ip, r5
 801611c:	4620      	mov	r0, r4
 801611e:	2300      	movs	r3, #0
 8016120:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016124:	4760      	bx	ip
 8016126:	2000      	movs	r0, #0
 8016128:	bd70      	pop	{r4, r5, r6, pc}
	...

0801612c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 801612c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016130:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016134:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 8016136:	b08d      	sub	sp, #52	; 0x34
 8016138:	4604      	mov	r4, r0
 801613a:	429e      	cmp	r6, r3
 801613c:	460f      	mov	r7, r1
 801613e:	d048      	beq.n	80161d2 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 8016140:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8016144:	4628      	mov	r0, r5
 8016146:	f7f8 fad1 	bl	800e6ec <_ZNK8touchgfx9TypedText7getFontEv>
 801614a:	4680      	mov	r8, r0
 801614c:	2800      	cmp	r0, #0
 801614e:	d040      	beq.n	80161d2 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 8016150:	4628      	mov	r0, r5
 8016152:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 8016156:	f7f8 fafd 	bl	800e754 <_ZNK8touchgfx9TypedText11assertValidEv>
 801615a:	4b1f      	ldr	r3, [pc, #124]	; (80161d8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xac>)
 801615c:	4628      	mov	r0, r5
 801615e:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 8016162:	681b      	ldr	r3, [r3, #0]
 8016164:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 8016168:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 801616c:	785e      	ldrb	r6, [r3, #1]
 801616e:	f7f8 fad9 	bl	800e724 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8016172:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8016176:	f3c6 0601 	ubfx	r6, r6, #0, #2
 801617a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801617c:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 8016180:	f88d 6020 	strb.w	r6, [sp, #32]
 8016184:	ae05      	add	r6, sp, #20
 8016186:	9309      	str	r3, [sp, #36]	; 0x24
 8016188:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 801618c:	f8cd 801c 	str.w	r8, [sp, #28]
 8016190:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8016194:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 8016198:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 801619c:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 80161a0:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 80161a4:	f7f8 fdfe 	bl	800eda4 <_ZN8touchgfx3HAL3lcdEv>
 80161a8:	4621      	mov	r1, r4
 80161aa:	4680      	mov	r8, r0
 80161ac:	4630      	mov	r0, r6
 80161ae:	f001 fe24 	bl	8017dfa <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80161b2:	4628      	mov	r0, r5
 80161b4:	f7f9 fd30 	bl	800fc18 <_ZNK8touchgfx9TypedText7getTextEv>
 80161b8:	2300      	movs	r3, #0
 80161ba:	9303      	str	r3, [sp, #12]
 80161bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80161be:	e9cd 0301 	strd	r0, r3, [sp, #4]
 80161c2:	ab07      	add	r3, sp, #28
 80161c4:	4640      	mov	r0, r8
 80161c6:	9300      	str	r3, [sp, #0]
 80161c8:	463b      	mov	r3, r7
 80161ca:	e896 0006 	ldmia.w	r6, {r1, r2}
 80161ce:	f000 fb35 	bl	801683c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80161d2:	b00d      	add	sp, #52	; 0x34
 80161d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161d8:	2000bb68 	.word	0x2000bb68

080161dc <_ZNK8touchgfx13BoxWithBorder12getSolidRectEv>:
 80161dc:	2300      	movs	r3, #0
 80161de:	8083      	strh	r3, [r0, #4]
 80161e0:	80c3      	strh	r3, [r0, #6]
 80161e2:	8003      	strh	r3, [r0, #0]
 80161e4:	8043      	strh	r3, [r0, #2]
 80161e6:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 80161ea:	2bff      	cmp	r3, #255	; 0xff
 80161ec:	bf01      	itttt	eq
 80161ee:	890b      	ldrheq	r3, [r1, #8]
 80161f0:	8083      	strheq	r3, [r0, #4]
 80161f2:	894b      	ldrheq	r3, [r1, #10]
 80161f4:	80c3      	strheq	r3, [r0, #6]
 80161f6:	4770      	bx	lr

080161f8 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 80161f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161fc:	4604      	mov	r4, r0
 80161fe:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8016202:	460e      	mov	r6, r1
 8016204:	b08c      	sub	sp, #48	; 0x30
 8016206:	8962      	ldrh	r2, [r4, #10]
 8016208:	b218      	sxth	r0, r3
 801620a:	8921      	ldrh	r1, [r4, #8]
 801620c:	005b      	lsls	r3, r3, #1
 801620e:	f8ad 0010 	strh.w	r0, [sp, #16]
 8016212:	1ac9      	subs	r1, r1, r3
 8016214:	1ad3      	subs	r3, r2, r3
 8016216:	f8ad 0012 	strh.w	r0, [sp, #18]
 801621a:	f8ad 1014 	strh.w	r1, [sp, #20]
 801621e:	6830      	ldr	r0, [r6, #0]
 8016220:	6871      	ldr	r1, [r6, #4]
 8016222:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016226:	466b      	mov	r3, sp
 8016228:	c303      	stmia	r3!, {r0, r1}
 801622a:	a904      	add	r1, sp, #16
 801622c:	4668      	mov	r0, sp
 801622e:	f7fe f8eb 	bl	8014408 <_ZN8touchgfx4RectaNERKS0_>
 8016232:	6823      	ldr	r3, [r4, #0]
 8016234:	4669      	mov	r1, sp
 8016236:	4620      	mov	r0, r4
 8016238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801623a:	4798      	blx	r3
 801623c:	f7f8 fdb2 	bl	800eda4 <_ZN8touchgfx3HAL3lcdEv>
 8016240:	6803      	ldr	r3, [r0, #0]
 8016242:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8016244:	4669      	mov	r1, sp
 8016246:	69dd      	ldr	r5, [r3, #28]
 8016248:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801624c:	47a8      	blx	r5
 801624e:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8016252:	2a00      	cmp	r2, #0
 8016254:	d04b      	beq.n	80162ee <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf6>
 8016256:	b211      	sxth	r1, r2
 8016258:	8963      	ldrh	r3, [r4, #10]
 801625a:	b292      	uxth	r2, r2
 801625c:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 8016260:	2500      	movs	r5, #0
 8016262:	f8ad 1016 	strh.w	r1, [sp, #22]
 8016266:	1a9f      	subs	r7, r3, r2
 8016268:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801626c:	1a82      	subs	r2, r0, r2
 801626e:	9504      	str	r5, [sp, #16]
 8016270:	b21b      	sxth	r3, r3
 8016272:	f8ad 701a 	strh.w	r7, [sp, #26]
 8016276:	af02      	add	r7, sp, #8
 8016278:	f8ad 0014 	strh.w	r0, [sp, #20]
 801627c:	f8ad 5018 	strh.w	r5, [sp, #24]
 8016280:	f8ad 001c 	strh.w	r0, [sp, #28]
 8016284:	f8ad 101e 	strh.w	r1, [sp, #30]
 8016288:	f8ad 5020 	strh.w	r5, [sp, #32]
 801628c:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 8016290:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 8016294:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8016298:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801629c:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
 80162a0:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 80162a4:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80162a8:	ab04      	add	r3, sp, #16
 80162aa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80162ae:	e893 0003 	ldmia.w	r3, {r0, r1}
 80162b2:	e887 0003 	stmia.w	r7, {r0, r1}
 80162b6:	4631      	mov	r1, r6
 80162b8:	4638      	mov	r0, r7
 80162ba:	f7fe f8a5 	bl	8014408 <_ZN8touchgfx4RectaNERKS0_>
 80162be:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80162c2:	b18b      	cbz	r3, 80162e8 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 80162c4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80162c8:	b173      	cbz	r3, 80162e8 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 80162ca:	6823      	ldr	r3, [r4, #0]
 80162cc:	4639      	mov	r1, r7
 80162ce:	4620      	mov	r0, r4
 80162d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80162d2:	4798      	blx	r3
 80162d4:	f7f8 fd66 	bl	800eda4 <_ZN8touchgfx3HAL3lcdEv>
 80162d8:	6803      	ldr	r3, [r0, #0]
 80162da:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80162dc:	4639      	mov	r1, r7
 80162de:	f8d3 801c 	ldr.w	r8, [r3, #28]
 80162e2:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80162e6:	47c0      	blx	r8
 80162e8:	3501      	adds	r5, #1
 80162ea:	2d04      	cmp	r5, #4
 80162ec:	d1dc      	bne.n	80162a8 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xb0>
 80162ee:	b00c      	add	sp, #48	; 0x30
 80162f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080162f4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 80162f4:	b570      	push	{r4, r5, r6, lr}
 80162f6:	4605      	mov	r5, r0
 80162f8:	880b      	ldrh	r3, [r1, #0]
 80162fa:	4604      	mov	r4, r0
 80162fc:	84c3      	strh	r3, [r0, #38]	; 0x26
 80162fe:	f855 3b26 	ldr.w	r3, [r5], #38
 8016302:	4628      	mov	r0, r5
 8016304:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 8016306:	f003 fb45 	bl	8019994 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801630a:	b201      	sxth	r1, r0
 801630c:	4620      	mov	r0, r4
 801630e:	47b0      	blx	r6
 8016310:	6823      	ldr	r3, [r4, #0]
 8016312:	4628      	mov	r0, r5
 8016314:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 8016316:	f003 fb77 	bl	8019a08 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801631a:	b201      	sxth	r1, r0
 801631c:	4620      	mov	r0, r4
 801631e:	47b0      	blx	r6
 8016320:	4628      	mov	r0, r5
 8016322:	f003 fc05 	bl	8019b30 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8016326:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
 801632a:	bd70      	pop	{r4, r5, r6, pc}

0801632c <_ZNK8touchgfx5Image12getSolidRectEv>:
 801632c:	b510      	push	{r4, lr}
 801632e:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8016332:	4604      	mov	r4, r0
 8016334:	2bff      	cmp	r3, #255	; 0xff
 8016336:	d006      	beq.n	8016346 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8016338:	2300      	movs	r3, #0
 801633a:	8003      	strh	r3, [r0, #0]
 801633c:	8043      	strh	r3, [r0, #2]
 801633e:	8083      	strh	r3, [r0, #4]
 8016340:	80c3      	strh	r3, [r0, #6]
 8016342:	4620      	mov	r0, r4
 8016344:	bd10      	pop	{r4, pc}
 8016346:	3126      	adds	r1, #38	; 0x26
 8016348:	f003 fb98 	bl	8019a7c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801634c:	e7f9      	b.n	8016342 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>
	...

08016350 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8016350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016354:	4604      	mov	r4, r0
 8016356:	b088      	sub	sp, #32
 8016358:	2500      	movs	r5, #0
 801635a:	460f      	mov	r7, r1
 801635c:	f854 3b26 	ldr.w	r3, [r4], #38
 8016360:	a904      	add	r1, sp, #16
 8016362:	4606      	mov	r6, r0
 8016364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016366:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801636a:	4798      	blx	r3
 801636c:	4620      	mov	r0, r4
 801636e:	f003 fb11 	bl	8019994 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016372:	4680      	mov	r8, r0
 8016374:	4620      	mov	r0, r4
 8016376:	f003 fb47 	bl	8019a08 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801637a:	9506      	str	r5, [sp, #24]
 801637c:	ad06      	add	r5, sp, #24
 801637e:	f8ad 001e 	strh.w	r0, [sp, #30]
 8016382:	4639      	mov	r1, r7
 8016384:	f8ad 801c 	strh.w	r8, [sp, #28]
 8016388:	4628      	mov	r0, r5
 801638a:	f7fe f83d 	bl	8014408 <_ZN8touchgfx4RectaNERKS0_>
 801638e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8016392:	b1c3      	cbz	r3, 80163c6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 8016394:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8016398:	b1ab      	cbz	r3, 80163c6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 801639a:	4b0c      	ldr	r3, [pc, #48]	; (80163cc <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7c>)
 801639c:	681b      	ldr	r3, [r3, #0]
 801639e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80163a2:	b10a      	cbz	r2, 80163a8 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x58>
 80163a4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80163a6:	b900      	cbnz	r0, 80163aa <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5a>
 80163a8:	6898      	ldr	r0, [r3, #8]
 80163aa:	2701      	movs	r7, #1
 80163ac:	6801      	ldr	r1, [r0, #0]
 80163ae:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80163b2:	9702      	str	r7, [sp, #8]
 80163b4:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 80163b8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80163bc:	e9cd 5600 	strd	r5, r6, [sp]
 80163c0:	68cd      	ldr	r5, [r1, #12]
 80163c2:	4621      	mov	r1, r4
 80163c4:	47a8      	blx	r5
 80163c6:	b008      	add	sp, #32
 80163c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80163cc:	2000bad8 	.word	0x2000bad8

080163d0 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 80163d0:	4b02      	ldr	r3, [pc, #8]	; (80163dc <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 80163d2:	6018      	str	r0, [r3, #0]
 80163d4:	4b02      	ldr	r3, [pc, #8]	; (80163e0 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 80163d6:	6019      	str	r1, [r3, #0]
 80163d8:	4770      	bx	lr
 80163da:	bf00      	nop
 80163dc:	2000bae0 	.word	0x2000bae0
 80163e0:	2000baf4 	.word	0x2000baf4

080163e4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 80163e4:	b538      	push	{r3, r4, r5, lr}
 80163e6:	4c2b      	ldr	r4, [pc, #172]	; (8016494 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 80163e8:	4b2b      	ldr	r3, [pc, #172]	; (8016498 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 80163ea:	6821      	ldr	r1, [r4, #0]
 80163ec:	681a      	ldr	r2, [r3, #0]
 80163ee:	4281      	cmp	r1, r0
 80163f0:	4d2a      	ldr	r5, [pc, #168]	; (801649c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 80163f2:	492b      	ldr	r1, [pc, #172]	; (80164a0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 80163f4:	d108      	bne.n	8016408 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 80163f6:	682b      	ldr	r3, [r5, #0]
 80163f8:	4293      	cmp	r3, r2
 80163fa:	d105      	bne.n	8016408 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 80163fc:	6808      	ldr	r0, [r1, #0]
 80163fe:	280f      	cmp	r0, #15
 8016400:	bf94      	ite	ls
 8016402:	2000      	movls	r0, #0
 8016404:	2001      	movhi	r0, #1
 8016406:	bd38      	pop	{r3, r4, r5, pc}
 8016408:	4b26      	ldr	r3, [pc, #152]	; (80164a4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 801640a:	6020      	str	r0, [r4, #0]
 801640c:	681b      	ldr	r3, [r3, #0]
 801640e:	602a      	str	r2, [r5, #0]
 8016410:	4298      	cmp	r0, r3
 8016412:	d905      	bls.n	8016420 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 8016414:	4b24      	ldr	r3, [pc, #144]	; (80164a8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8016416:	2137      	movs	r1, #55	; 0x37
 8016418:	4a24      	ldr	r2, [pc, #144]	; (80164ac <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801641a:	4825      	ldr	r0, [pc, #148]	; (80164b0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 801641c:	f00d f80c 	bl	8023438 <__assert_func>
 8016420:	f010 0403 	ands.w	r4, r0, #3
 8016424:	bf1f      	itttt	ne
 8016426:	f1c4 0504 	rsbne	r5, r4, #4
 801642a:	3b04      	subne	r3, #4
 801642c:	1952      	addne	r2, r2, r5
 801642e:	191b      	addne	r3, r3, r4
 8016430:	4d20      	ldr	r5, [pc, #128]	; (80164b4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 8016432:	4402      	add	r2, r0
 8016434:	1a1b      	subs	r3, r3, r0
 8016436:	3001      	adds	r0, #1
 8016438:	602a      	str	r2, [r5, #0]
 801643a:	f020 0401 	bic.w	r4, r0, #1
 801643e:	42a3      	cmp	r3, r4
 8016440:	d203      	bcs.n	801644a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 8016442:	4b19      	ldr	r3, [pc, #100]	; (80164a8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8016444:	214a      	movs	r1, #74	; 0x4a
 8016446:	4a19      	ldr	r2, [pc, #100]	; (80164ac <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8016448:	e7e7      	b.n	801641a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801644a:	f010 0002 	ands.w	r0, r0, #2
 801644e:	bf1f      	itttt	ne
 8016450:	f1c0 0504 	rsbne	r5, r0, #4
 8016454:	1952      	addne	r2, r2, r5
 8016456:	1f05      	subne	r5, r0, #4
 8016458:	195b      	addne	r3, r3, r5
 801645a:	4422      	add	r2, r4
 801645c:	4d16      	ldr	r5, [pc, #88]	; (80164b8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 801645e:	1b1b      	subs	r3, r3, r4
 8016460:	602a      	str	r2, [r5, #0]
 8016462:	429c      	cmp	r4, r3
 8016464:	d903      	bls.n	801646e <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 8016466:	4b10      	ldr	r3, [pc, #64]	; (80164a8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8016468:	215d      	movs	r1, #93	; 0x5d
 801646a:	4a10      	ldr	r2, [pc, #64]	; (80164ac <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801646c:	e7d5      	b.n	801641a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801646e:	b120      	cbz	r0, 801647a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 8016470:	f1c0 0504 	rsb	r5, r0, #4
 8016474:	3804      	subs	r0, #4
 8016476:	442a      	add	r2, r5
 8016478:	4403      	add	r3, r0
 801647a:	1b1b      	subs	r3, r3, r4
 801647c:	4422      	add	r2, r4
 801647e:	480f      	ldr	r0, [pc, #60]	; (80164bc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 8016480:	2b0f      	cmp	r3, #15
 8016482:	600b      	str	r3, [r1, #0]
 8016484:	6002      	str	r2, [r0, #0]
 8016486:	d803      	bhi.n	8016490 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 8016488:	4b0d      	ldr	r3, [pc, #52]	; (80164c0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 801648a:	2170      	movs	r1, #112	; 0x70
 801648c:	4a07      	ldr	r2, [pc, #28]	; (80164ac <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801648e:	e7c4      	b.n	801641a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8016490:	2001      	movs	r0, #1
 8016492:	e7b8      	b.n	8016406 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 8016494:	2000bae8 	.word	0x2000bae8
 8016498:	2000bae0 	.word	0x2000bae0
 801649c:	2000baf0 	.word	0x2000baf0
 80164a0:	2000baf8 	.word	0x2000baf8
 80164a4:	2000baf4 	.word	0x2000baf4
 80164a8:	0802693c 	.word	0x0802693c
 80164ac:	08026a04 	.word	0x08026a04
 80164b0:	08026975 	.word	0x08026975
 80164b4:	2000bafc 	.word	0x2000bafc
 80164b8:	2000baec 	.word	0x2000baec
 80164bc:	2000bae4 	.word	0x2000bae4
 80164c0:	080269bf 	.word	0x080269bf

080164c4 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 80164c4:	4b04      	ldr	r3, [pc, #16]	; (80164d8 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 80164c6:	6818      	ldr	r0, [r3, #0]
 80164c8:	b120      	cbz	r0, 80164d4 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 80164ca:	4b04      	ldr	r3, [pc, #16]	; (80164dc <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 80164cc:	6818      	ldr	r0, [r3, #0]
 80164ce:	3000      	adds	r0, #0
 80164d0:	bf18      	it	ne
 80164d2:	2001      	movne	r0, #1
 80164d4:	4770      	bx	lr
 80164d6:	bf00      	nop
 80164d8:	2000bae0 	.word	0x2000bae0
 80164dc:	2000baf4 	.word	0x2000baf4

080164e0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 80164e0:	4b01      	ldr	r3, [pc, #4]	; (80164e8 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 80164e2:	6818      	ldr	r0, [r3, #0]
 80164e4:	4770      	bx	lr
 80164e6:	bf00      	nop
 80164e8:	2000bae8 	.word	0x2000bae8

080164ec <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 80164ec:	4b01      	ldr	r3, [pc, #4]	; (80164f4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 80164ee:	6818      	ldr	r0, [r3, #0]
 80164f0:	4770      	bx	lr
 80164f2:	bf00      	nop
 80164f4:	2000baf0 	.word	0x2000baf0

080164f8 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 80164f8:	4b01      	ldr	r3, [pc, #4]	; (8016500 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 80164fa:	6818      	ldr	r0, [r3, #0]
 80164fc:	4770      	bx	lr
 80164fe:	bf00      	nop
 8016500:	2000bafc 	.word	0x2000bafc

08016504 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 8016504:	4b01      	ldr	r3, [pc, #4]	; (801650c <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 8016506:	6818      	ldr	r0, [r3, #0]
 8016508:	4770      	bx	lr
 801650a:	bf00      	nop
 801650c:	2000baec 	.word	0x2000baec

08016510 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8016510:	4b01      	ldr	r3, [pc, #4]	; (8016518 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8016512:	6818      	ldr	r0, [r3, #0]
 8016514:	4770      	bx	lr
 8016516:	bf00      	nop
 8016518:	2000bae4 	.word	0x2000bae4

0801651c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 801651c:	4b01      	ldr	r3, [pc, #4]	; (8016524 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 801651e:	6818      	ldr	r0, [r3, #0]
 8016520:	4770      	bx	lr
 8016522:	bf00      	nop
 8016524:	2000baf8 	.word	0x2000baf8

08016528 <_ZN8touchgfx3LCD4initEv>:
 8016528:	4770      	bx	lr

0801652a <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801652a:	2000      	movs	r0, #0
 801652c:	4770      	bx	lr

0801652e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801652e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016532:	b091      	sub	sp, #68	; 0x44
 8016534:	4699      	mov	r9, r3
 8016536:	4617      	mov	r7, r2
 8016538:	2500      	movs	r5, #0
 801653a:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
 801653e:	4680      	mov	r8, r0
 8016540:	a80e      	add	r0, sp, #56	; 0x38
 8016542:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8016544:	f9ba 2008 	ldrsh.w	r2, [sl, #8]
 8016548:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 801654c:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8016550:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8016554:	910d      	str	r1, [sp, #52]	; 0x34
 8016556:	950e      	str	r5, [sp, #56]	; 0x38
 8016558:	f000 fe3a 	bl	80171d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801655c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801655e:	f8d9 6000 	ldr.w	r6, [r9]
 8016562:	6818      	ldr	r0, [r3, #0]
 8016564:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016566:	f9b4 b000 	ldrsh.w	fp, [r4]
 801656a:	1b80      	subs	r0, r0, r6
 801656c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016570:	eb02 0c06 	add.w	ip, r2, r6
 8016574:	ebab 0e0c 	sub.w	lr, fp, ip
 8016578:	4570      	cmp	r0, lr
 801657a:	f340 80bc 	ble.w	80166f6 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 801657e:	88a1      	ldrh	r1, [r4, #4]
 8016580:	4459      	add	r1, fp
 8016582:	b209      	sxth	r1, r1
 8016584:	458c      	cmp	ip, r1
 8016586:	f300 80b6 	bgt.w	80166f6 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 801658a:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 801658e:	ed97 4a09 	vldr	s8, [r7, #36]	; 0x24
 8016592:	4283      	cmp	r3, r0
 8016594:	edd7 4a0b 	vldr	s9, [r7, #44]	; 0x2c
 8016598:	edd9 6a07 	vldr	s13, [r9, #28]
 801659c:	bfa8      	it	ge
 801659e:	4603      	movge	r3, r0
 80165a0:	edd9 1a0a 	vldr	s3, [r9, #40]	; 0x28
 80165a4:	ed99 2a0d 	vldr	s4, [r9, #52]	; 0x34
 80165a8:	45e3      	cmp	fp, ip
 80165aa:	ee07 3a90 	vmov	s15, r3
 80165ae:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 80165b2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80165b6:	ee25 4a04 	vmul.f32	s8, s10, s8
 80165ba:	ee65 4a24 	vmul.f32	s9, s10, s9
 80165be:	ee25 5a27 	vmul.f32	s10, s10, s15
 80165c2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80165c6:	ee71 0aa4 	vadd.f32	s1, s3, s9
 80165ca:	ee32 1a05 	vadd.f32	s2, s4, s10
 80165ce:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80165d2:	ee36 0a84 	vadd.f32	s0, s13, s8
 80165d6:	ee61 1a87 	vmul.f32	s3, s3, s14
 80165da:	ee22 2a07 	vmul.f32	s4, s4, s14
 80165de:	f340 808d 	ble.w	80166fc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ce>
 80165e2:	fb9e f5f3 	sdiv	r5, lr, r3
 80165e6:	ee07 5a10 	vmov	s14, r5
 80165ea:	2d00      	cmp	r5, #0
 80165ec:	fb03 e415 	mls	r4, r3, r5, lr
 80165f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80165f4:	eea7 0a04 	vfma.f32	s0, s14, s8
 80165f8:	eee7 0a24 	vfma.f32	s1, s14, s9
 80165fc:	eea7 1a05 	vfma.f32	s2, s14, s10
 8016600:	dd12      	ble.n	8016628 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfa>
 8016602:	ee70 6a44 	vsub.f32	s13, s0, s8
 8016606:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801660a:	ee31 2a45 	vsub.f32	s4, s2, s10
 801660e:	eef5 6a40 	vcmp.f32	s13, #0.0
 8016612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016616:	bf14      	ite	ne
 8016618:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801661c:	eeb0 7a67 	vmoveq.f32	s14, s15
 8016620:	ee61 1a87 	vmul.f32	s3, s3, s14
 8016624:	ee22 2a07 	vmul.f32	s4, s4, s14
 8016628:	fb05 f703 	mul.w	r7, r5, r3
 801662c:	1bc0      	subs	r0, r0, r7
 801662e:	443e      	add	r6, r7
 8016630:	1997      	adds	r7, r2, r6
 8016632:	4407      	add	r7, r0
 8016634:	42b9      	cmp	r1, r7
 8016636:	bfbc      	itt	lt
 8016638:	1a88      	sublt	r0, r1, r2
 801663a:	1b80      	sublt	r0, r0, r6
 801663c:	2800      	cmp	r0, #0
 801663e:	dd5a      	ble.n	80166f6 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 8016640:	fb90 f1f3 	sdiv	r1, r0, r3
 8016644:	fb03 0211 	mls	r2, r3, r1, r0
 8016648:	b90a      	cbnz	r2, 801664e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x120>
 801664a:	3901      	subs	r1, #1
 801664c:	461a      	mov	r2, r3
 801664e:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8016652:	f89d b07c 	ldrb.w	fp, [sp, #124]	; 0x7c
 8016656:	44a4      	add	ip, r4
 8016658:	2900      	cmp	r1, #0
 801665a:	bfcc      	ite	gt
 801665c:	469e      	movgt	lr, r3
 801665e:	4696      	movle	lr, r2
 8016660:	fb03 c505 	mla	r5, r3, r5, ip
 8016664:	eef0 6a42 	vmov.f32	s13, s4
 8016668:	eeb0 7a61 	vmov.f32	s14, s3
 801666c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016670:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8016674:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8016678:	ee21 3a23 	vmul.f32	s6, s2, s7
 801667c:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8016680:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8016684:	ee17 0a90 	vmov	r0, s15
 8016688:	ee73 7a42 	vsub.f32	s15, s6, s4
 801668c:	fb90 f6f3 	sdiv	r6, r0, r3
 8016690:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8016694:	ee17 0a90 	vmov	r0, s15
 8016698:	fb90 f7f3 	sdiv	r7, r0, r3
 801669c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80166a0:	f8d0 8000 	ldr.w	r8, [r0]
 80166a4:	900c      	str	r0, [sp, #48]	; 0x30
 80166a6:	981c      	ldr	r0, [sp, #112]	; 0x70
 80166a8:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80166ac:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 80166b0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80166b4:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 80166b8:	f8cd a020 	str.w	sl, [sp, #32]
 80166bc:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 80166c0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80166c2:	f8d9 9014 	ldr.w	r9, [r9, #20]
 80166c6:	9603      	str	r6, [sp, #12]
 80166c8:	44ca      	add	sl, r9
 80166ca:	9506      	str	r5, [sp, #24]
 80166cc:	e9cd 7004 	strd	r7, r0, [sp, #16]
 80166d0:	ee16 0a90 	vmov	r0, s13
 80166d4:	f8cd a01c 	str.w	sl, [sp, #28]
 80166d8:	fb07 0704 	mla	r7, r7, r4, r0
 80166dc:	ee17 0a10 	vmov	r0, s14
 80166e0:	fb06 0604 	mla	r6, r6, r4, r0
 80166e4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80166e6:	9702      	str	r7, [sp, #8]
 80166e8:	e9cd 3600 	strd	r3, r6, [sp]
 80166ec:	ebae 0304 	sub.w	r3, lr, r4
 80166f0:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80166f4:	47a8      	blx	r5
 80166f6:	b011      	add	sp, #68	; 0x44
 80166f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166fc:	462c      	mov	r4, r5
 80166fe:	e797      	b.n	8016630 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x102>

08016700 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 8016700:	b570      	push	{r4, r5, r6, lr}
 8016702:	4604      	mov	r4, r0
 8016704:	2500      	movs	r5, #0
 8016706:	9804      	ldr	r0, [sp, #16]
 8016708:	7223      	strb	r3, [r4, #8]
 801670a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801670e:	8025      	strh	r5, [r4, #0]
 8016710:	6061      	str	r1, [r4, #4]
 8016712:	7263      	strb	r3, [r4, #9]
 8016714:	60e0      	str	r0, [r4, #12]
 8016716:	8222      	strh	r2, [r4, #16]
 8016718:	8265      	strh	r5, [r4, #18]
 801671a:	82a5      	strh	r5, [r4, #20]
 801671c:	82e5      	strh	r5, [r4, #22]
 801671e:	8325      	strh	r5, [r4, #24]
 8016720:	8365      	strh	r5, [r4, #26]
 8016722:	83a5      	strh	r5, [r4, #28]
 8016724:	77a5      	strb	r5, [r4, #30]
 8016726:	6803      	ldr	r3, [r0, #0]
 8016728:	695b      	ldr	r3, [r3, #20]
 801672a:	4798      	blx	r3
 801672c:	4606      	mov	r6, r0
 801672e:	b1f8      	cbz	r0, 8016770 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8016730:	68e0      	ldr	r0, [r4, #12]
 8016732:	4631      	mov	r1, r6
 8016734:	6803      	ldr	r3, [r0, #0]
 8016736:	68db      	ldr	r3, [r3, #12]
 8016738:	4798      	blx	r3
 801673a:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801673e:	4605      	mov	r5, r0
 8016740:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8016744:	7a83      	ldrb	r3, [r0, #10]
 8016746:	4313      	orrs	r3, r2
 8016748:	83a3      	strh	r3, [r4, #28]
 801674a:	7a63      	ldrb	r3, [r4, #9]
 801674c:	2b04      	cmp	r3, #4
 801674e:	d10f      	bne.n	8016770 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8016750:	68e0      	ldr	r0, [r4, #12]
 8016752:	462a      	mov	r2, r5
 8016754:	4631      	mov	r1, r6
 8016756:	6803      	ldr	r3, [r0, #0]
 8016758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801675a:	4798      	blx	r3
 801675c:	f995 300d 	ldrsb.w	r3, [r5, #13]
 8016760:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8016764:	7aab      	ldrb	r3, [r5, #10]
 8016766:	4313      	orrs	r3, r2
 8016768:	4418      	add	r0, r3
 801676a:	8ba3      	ldrh	r3, [r4, #28]
 801676c:	4418      	add	r0, r3
 801676e:	83a0      	strh	r0, [r4, #28]
 8016770:	4620      	mov	r0, r4
 8016772:	bd70      	pop	{r4, r5, r6, pc}

08016774 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8016774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016778:	2400      	movs	r4, #0
 801677a:	b085      	sub	sp, #20
 801677c:	4681      	mov	r9, r0
 801677e:	460f      	mov	r7, r1
 8016780:	4692      	mov	sl, r2
 8016782:	469b      	mov	fp, r3
 8016784:	46a0      	mov	r8, r4
 8016786:	4626      	mov	r6, r4
 8016788:	4554      	cmp	r4, sl
 801678a:	da21      	bge.n	80167d0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 801678c:	2300      	movs	r3, #0
 801678e:	463a      	mov	r2, r7
 8016790:	4659      	mov	r1, fp
 8016792:	4648      	mov	r0, r9
 8016794:	9303      	str	r3, [sp, #12]
 8016796:	ab03      	add	r3, sp, #12
 8016798:	f002 fb52 	bl	8018e40 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801679c:	4605      	mov	r5, r0
 801679e:	b1b8      	cbz	r0, 80167d0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 80167a0:	280a      	cmp	r0, #10
 80167a2:	d015      	beq.n	80167d0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 80167a4:	9a03      	ldr	r2, [sp, #12]
 80167a6:	b182      	cbz	r2, 80167ca <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x56>
 80167a8:	f992 000d 	ldrsb.w	r0, [r2, #13]
 80167ac:	4641      	mov	r1, r8
 80167ae:	7a93      	ldrb	r3, [r2, #10]
 80167b0:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80167b4:	8895      	ldrh	r5, [r2, #4]
 80167b6:	4303      	orrs	r3, r0
 80167b8:	4638      	mov	r0, r7
 80167ba:	9301      	str	r3, [sp, #4]
 80167bc:	683b      	ldr	r3, [r7, #0]
 80167be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80167c0:	4798      	blx	r3
 80167c2:	9b01      	ldr	r3, [sp, #4]
 80167c4:	4418      	add	r0, r3
 80167c6:	4406      	add	r6, r0
 80167c8:	b2b6      	uxth	r6, r6
 80167ca:	3401      	adds	r4, #1
 80167cc:	46a8      	mov	r8, r5
 80167ce:	e7db      	b.n	8016788 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x14>
 80167d0:	4630      	mov	r0, r6
 80167d2:	b005      	add	sp, #20
 80167d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080167d8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 80167d8:	2a02      	cmp	r2, #2
 80167da:	b530      	push	{r4, r5, lr}
 80167dc:	d011      	beq.n	8016802 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 80167de:	2a03      	cmp	r2, #3
 80167e0:	d01c      	beq.n	801681c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 80167e2:	2a01      	cmp	r2, #1
 80167e4:	d10c      	bne.n	8016800 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80167e6:	888b      	ldrh	r3, [r1, #4]
 80167e8:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80167ec:	8801      	ldrh	r1, [r0, #0]
 80167ee:	1a9b      	subs	r3, r3, r2
 80167f0:	8844      	ldrh	r4, [r0, #2]
 80167f2:	1a5b      	subs	r3, r3, r1
 80167f4:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80167f8:	8004      	strh	r4, [r0, #0]
 80167fa:	8043      	strh	r3, [r0, #2]
 80167fc:	8081      	strh	r1, [r0, #4]
 80167fe:	80c2      	strh	r2, [r0, #6]
 8016800:	bd30      	pop	{r4, r5, pc}
 8016802:	88cb      	ldrh	r3, [r1, #6]
 8016804:	88c2      	ldrh	r2, [r0, #6]
 8016806:	1a9b      	subs	r3, r3, r2
 8016808:	8842      	ldrh	r2, [r0, #2]
 801680a:	1a9b      	subs	r3, r3, r2
 801680c:	888a      	ldrh	r2, [r1, #4]
 801680e:	8881      	ldrh	r1, [r0, #4]
 8016810:	8043      	strh	r3, [r0, #2]
 8016812:	1a52      	subs	r2, r2, r1
 8016814:	8801      	ldrh	r1, [r0, #0]
 8016816:	1a52      	subs	r2, r2, r1
 8016818:	8002      	strh	r2, [r0, #0]
 801681a:	e7f1      	b.n	8016800 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801681c:	88cb      	ldrh	r3, [r1, #6]
 801681e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8016822:	8841      	ldrh	r1, [r0, #2]
 8016824:	1a9b      	subs	r3, r3, r2
 8016826:	f9b0 5000 	ldrsh.w	r5, [r0]
 801682a:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801682e:	1a5b      	subs	r3, r3, r1
 8016830:	8045      	strh	r5, [r0, #2]
 8016832:	8082      	strh	r2, [r0, #4]
 8016834:	8003      	strh	r3, [r0, #0]
 8016836:	80c4      	strh	r4, [r0, #6]
 8016838:	e7e2      	b.n	8016800 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
	...

0801683c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
 801683c:	b570      	push	{r4, r5, r6, lr}
 801683e:	b086      	sub	sp, #24
 8016840:	ac02      	add	r4, sp, #8
 8016842:	e884 0006 	stmia.w	r4, {r1, r2}
 8016846:	461a      	mov	r2, r3
 8016848:	ab0c      	add	r3, sp, #48	; 0x30
 801684a:	9305      	str	r3, [sp, #20]
 801684c:	4b0a      	ldr	r3, [pc, #40]	; (8016878 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz+0x3c>)
 801684e:	685d      	ldr	r5, [r3, #4]
 8016850:	1069      	asrs	r1, r5, #1
 8016852:	07ed      	lsls	r5, r5, #31
 8016854:	eb00 0601 	add.w	r6, r0, r1
 8016858:	bf46      	itte	mi
 801685a:	681b      	ldrmi	r3, [r3, #0]
 801685c:	5841      	ldrmi	r1, [r0, r1]
 801685e:	681d      	ldrpl	r5, [r3, #0]
 8016860:	4630      	mov	r0, r6
 8016862:	bf48      	it	mi
 8016864:	58cd      	ldrmi	r5, [r1, r3]
 8016866:	4621      	mov	r1, r4
 8016868:	9b05      	ldr	r3, [sp, #20]
 801686a:	9301      	str	r3, [sp, #4]
 801686c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801686e:	9300      	str	r3, [sp, #0]
 8016870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016872:	47a8      	blx	r5
 8016874:	b006      	add	sp, #24
 8016876:	bd70      	pop	{r4, r5, r6, pc}
 8016878:	20000030 	.word	0x20000030

0801687c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801687c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016880:	b09d      	sub	sp, #116	; 0x74
 8016882:	9114      	str	r1, [sp, #80]	; 0x50
 8016884:	9315      	str	r3, [sp, #84]	; 0x54
 8016886:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8016888:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801688a:	8809      	ldrh	r1, [r1, #0]
 801688c:	889b      	ldrh	r3, [r3, #4]
 801688e:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8016890:	440b      	add	r3, r1
 8016892:	9210      	str	r2, [sp, #64]	; 0x40
 8016894:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 8016898:	b21b      	sxth	r3, r3
 801689a:	900f      	str	r0, [sp, #60]	; 0x3c
 801689c:	f89d b0a4 	ldrb.w	fp, [sp, #164]	; 0xa4
 80168a0:	930e      	str	r3, [sp, #56]	; 0x38
 80168a2:	6833      	ldr	r3, [r6, #0]
 80168a4:	7a59      	ldrb	r1, [r3, #9]
 80168a6:	7a1b      	ldrb	r3, [r3, #8]
 80168a8:	9113      	str	r1, [sp, #76]	; 0x4c
 80168aa:	9312      	str	r3, [sp, #72]	; 0x48
 80168ac:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80168ae:	f9b3 4000 	ldrsh.w	r4, [r3]
 80168b2:	2a00      	cmp	r2, #0
 80168b4:	d059      	beq.n	801696a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xee>
 80168b6:	7c33      	ldrb	r3, [r6, #16]
 80168b8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80168ba:	2b04      	cmp	r3, #4
 80168bc:	bf14      	ite	ne
 80168be:	2301      	movne	r3, #1
 80168c0:	2302      	moveq	r3, #2
 80168c2:	4413      	add	r3, r2
 80168c4:	f04f 0800 	mov.w	r8, #0
 80168c8:	930d      	str	r3, [sp, #52]	; 0x34
 80168ca:	4645      	mov	r5, r8
 80168cc:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80168d0:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 80168d4:	4293      	cmp	r3, r2
 80168d6:	da75      	bge.n	80169c4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x148>
 80168d8:	2300      	movs	r3, #0
 80168da:	992b      	ldr	r1, [sp, #172]	; 0xac
 80168dc:	6832      	ldr	r2, [r6, #0]
 80168de:	931a      	str	r3, [sp, #104]	; 0x68
 80168e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80168e2:	428b      	cmp	r3, r1
 80168e4:	db43      	blt.n	801696e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xf2>
 80168e6:	6813      	ldr	r3, [r2, #0]
 80168e8:	4610      	mov	r0, r2
 80168ea:	695b      	ldr	r3, [r3, #20]
 80168ec:	4798      	blx	r3
 80168ee:	4681      	mov	r9, r0
 80168f0:	6830      	ldr	r0, [r6, #0]
 80168f2:	aa1b      	add	r2, sp, #108	; 0x6c
 80168f4:	4649      	mov	r1, r9
 80168f6:	6803      	ldr	r3, [r0, #0]
 80168f8:	689f      	ldr	r7, [r3, #8]
 80168fa:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 80168fe:	47b8      	blx	r7
 8016900:	901a      	str	r0, [sp, #104]	; 0x68
 8016902:	f64f 6aff 	movw	sl, #65279	; 0xfeff
 8016906:	45d1      	cmp	r9, sl
 8016908:	d045      	beq.n	8016996 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801690a:	f242 070b 	movw	r7, #8203	; 0x200b
 801690e:	45b9      	cmp	r9, r7
 8016910:	d041      	beq.n	8016996 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8016912:	f1b9 0f00 	cmp.w	r9, #0
 8016916:	f000 80ee 	beq.w	8016af6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 801691a:	f1b9 0f0a 	cmp.w	r9, #10
 801691e:	d057      	beq.n	80169d0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 8016920:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8016922:	b383      	cbz	r3, 8016986 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10a>
 8016924:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 8016928:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801692a:	2a00      	cmp	r2, #0
 801692c:	f000 80d2 	beq.w	8016ad4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x258>
 8016930:	f1bb 0f00 	cmp.w	fp, #0
 8016934:	d100      	bne.n	8016938 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xbc>
 8016936:	4444      	add	r4, r8
 8016938:	f992 800d 	ldrsb.w	r8, [r2, #13]
 801693c:	f1bb 0f01 	cmp.w	fp, #1
 8016940:	f408 7380 	and.w	r3, r8, #256	; 0x100
 8016944:	f892 800a 	ldrb.w	r8, [r2, #10]
 8016948:	ea48 0803 	orr.w	r8, r8, r3
 801694c:	d128      	bne.n	80169a0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x124>
 801694e:	eba4 0408 	sub.w	r4, r4, r8
 8016952:	2d00      	cmp	r5, #0
 8016954:	d143      	bne.n	80169de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 8016956:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016958:	eb08 0304 	add.w	r3, r8, r4
 801695c:	4413      	add	r3, r2
 801695e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8016960:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016964:	4293      	cmp	r3, r2
 8016966:	da44      	bge.n	80169f2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8016968:	e02b      	b.n	80169c2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x146>
 801696a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801696c:	e7aa      	b.n	80168c4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x48>
 801696e:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 8016972:	4659      	mov	r1, fp
 8016974:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8016976:	9301      	str	r3, [sp, #4]
 8016978:	ab1b      	add	r3, sp, #108	; 0x6c
 801697a:	9300      	str	r3, [sp, #0]
 801697c:	ab1a      	add	r3, sp, #104	; 0x68
 801697e:	f002 fa93 	bl	8018ea8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8016982:	4681      	mov	r9, r0
 8016984:	e7bd      	b.n	8016902 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 8016986:	6830      	ldr	r0, [r6, #0]
 8016988:	6803      	ldr	r3, [r0, #0]
 801698a:	691b      	ldr	r3, [r3, #16]
 801698c:	4798      	blx	r3
 801698e:	4550      	cmp	r0, sl
 8016990:	d001      	beq.n	8016996 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8016992:	42b8      	cmp	r0, r7
 8016994:	d1c8      	bne.n	8016928 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 8016996:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016998:	464d      	mov	r5, r9
 801699a:	3301      	adds	r3, #1
 801699c:	930c      	str	r3, [sp, #48]	; 0x30
 801699e:	e797      	b.n	80168d0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x54>
 80169a0:	2d00      	cmp	r5, #0
 80169a2:	f000 80aa 	beq.w	8016afa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27e>
 80169a6:	f1bb 0f00 	cmp.w	fp, #0
 80169aa:	d118      	bne.n	80169de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 80169ac:	6830      	ldr	r0, [r6, #0]
 80169ae:	4629      	mov	r1, r5
 80169b0:	6803      	ldr	r3, [r0, #0]
 80169b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80169b4:	4798      	blx	r3
 80169b6:	4404      	add	r4, r0
 80169b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80169ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80169bc:	1ae3      	subs	r3, r4, r3
 80169be:	4293      	cmp	r3, r2
 80169c0:	dd17      	ble.n	80169f2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 80169c2:	464d      	mov	r5, r9
 80169c4:	2d00      	cmp	r5, #0
 80169c6:	f000 8096 	beq.w	8016af6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 80169ca:	2d0a      	cmp	r5, #10
 80169cc:	f040 8084 	bne.w	8016ad8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25c>
 80169d0:	250a      	movs	r5, #10
 80169d2:	fab5 f085 	clz	r0, r5
 80169d6:	0940      	lsrs	r0, r0, #5
 80169d8:	b01d      	add	sp, #116	; 0x74
 80169da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169de:	6830      	ldr	r0, [r6, #0]
 80169e0:	4629      	mov	r1, r5
 80169e2:	6803      	ldr	r3, [r0, #0]
 80169e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80169e6:	4798      	blx	r3
 80169e8:	f1bb 0f01 	cmp.w	fp, #1
 80169ec:	eba4 0400 	sub.w	r4, r4, r0
 80169f0:	d0b1      	beq.n	8016956 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 80169f2:	981a      	ldr	r0, [sp, #104]	; 0x68
 80169f4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80169f6:	f990 1009 	ldrsb.w	r1, [r0, #9]
 80169fa:	f9b3 5000 	ldrsh.w	r5, [r3]
 80169fe:	7b43      	ldrb	r3, [r0, #13]
 8016a00:	4421      	add	r1, r4
 8016a02:	015b      	lsls	r3, r3, #5
 8016a04:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8016a08:	7983      	ldrb	r3, [r0, #6]
 8016a0a:	4313      	orrs	r3, r2
 8016a0c:	440b      	add	r3, r1
 8016a0e:	42ab      	cmp	r3, r5
 8016a10:	dbc1      	blt.n	8016996 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8016a12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016a14:	4299      	cmp	r1, r3
 8016a16:	dabe      	bge.n	8016996 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8016a18:	6830      	ldr	r0, [r6, #0]
 8016a1a:	42a5      	cmp	r5, r4
 8016a1c:	6803      	ldr	r3, [r0, #0]
 8016a1e:	bfcc      	ite	gt
 8016a20:	1b2d      	subgt	r5, r5, r4
 8016a22:	2500      	movle	r5, #0
 8016a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a26:	bfc8      	it	gt
 8016a28:	b2ad      	uxthgt	r5, r5
 8016a2a:	4798      	blx	r3
 8016a2c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8016a2e:	4935      	ldr	r1, [pc, #212]	; (8016b04 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>)
 8016a30:	7b5a      	ldrb	r2, [r3, #13]
 8016a32:	f893 e008 	ldrb.w	lr, [r3, #8]
 8016a36:	f012 0f40 	tst.w	r2, #64	; 0x40
 8016a3a:	bf18      	it	ne
 8016a3c:	468c      	movne	ip, r1
 8016a3e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8016a40:	bf08      	it	eq
 8016a42:	f04f 0c00 	moveq.w	ip, #0
 8016a46:	4408      	add	r0, r1
 8016a48:	00d1      	lsls	r1, r2, #3
 8016a4a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8016a4e:	ea41 070e 	orr.w	r7, r1, lr
 8016a52:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8016a54:	ea4c 0707 	orr.w	r7, ip, r7
 8016a58:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8016a5c:	1bc7      	subs	r7, r0, r7
 8016a5e:	b2bf      	uxth	r7, r7
 8016a60:	fa0f fa87 	sxth.w	sl, r7
 8016a64:	4551      	cmp	r1, sl
 8016a66:	dd33      	ble.n	8016ad0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x254>
 8016a68:	0112      	lsls	r2, r2, #4
 8016a6a:	79d8      	ldrb	r0, [r3, #7]
 8016a6c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8016a70:	4302      	orrs	r2, r0
 8016a72:	4492      	add	sl, r2
 8016a74:	4551      	cmp	r1, sl
 8016a76:	dc8e      	bgt.n	8016996 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8016a78:	1bcf      	subs	r7, r1, r7
 8016a7a:	468a      	mov	sl, r1
 8016a7c:	b2bf      	uxth	r7, r7
 8016a7e:	9317      	str	r3, [sp, #92]	; 0x5c
 8016a80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016a82:	6830      	ldr	r0, [r6, #0]
 8016a84:	681a      	ldr	r2, [r3, #0]
 8016a86:	6801      	ldr	r1, [r0, #0]
 8016a88:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8016a8a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016a8c:	9311      	str	r3, [sp, #68]	; 0x44
 8016a8e:	9216      	str	r2, [sp, #88]	; 0x58
 8016a90:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8016a92:	4788      	blx	r1
 8016a94:	79b1      	ldrb	r1, [r6, #6]
 8016a96:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016a98:	910b      	str	r1, [sp, #44]	; 0x2c
 8016a9a:	7bb1      	ldrb	r1, [r6, #14]
 8016a9c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016a9e:	910a      	str	r1, [sp, #40]	; 0x28
 8016aa0:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
 8016aa4:	9109      	str	r1, [sp, #36]	; 0x24
 8016aa6:	68b1      	ldr	r1, [r6, #8]
 8016aa8:	9305      	str	r3, [sp, #20]
 8016aaa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8016aac:	9206      	str	r2, [sp, #24]
 8016aae:	e9cd a501 	strd	sl, r5, [sp, #4]
 8016ab2:	4425      	add	r5, r4
 8016ab4:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8016ab8:	b22d      	sxth	r5, r5
 8016aba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016abc:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8016ac0:	9500      	str	r5, [sp, #0]
 8016ac2:	9914      	ldr	r1, [sp, #80]	; 0x50
 8016ac4:	681a      	ldr	r2, [r3, #0]
 8016ac6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8016ac8:	685b      	ldr	r3, [r3, #4]
 8016aca:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8016acc:	47a8      	blx	r5
 8016ace:	e762      	b.n	8016996 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8016ad0:	2700      	movs	r7, #0
 8016ad2:	e7d4      	b.n	8016a7e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x202>
 8016ad4:	4690      	mov	r8, r2
 8016ad6:	e75e      	b.n	8016996 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8016ad8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8016ada:	3401      	adds	r4, #1
 8016adc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8016ade:	429c      	cmp	r4, r3
 8016ae0:	f6bf af77 	bge.w	80169d2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 8016ae4:	4659      	mov	r1, fp
 8016ae6:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8016ae8:	f002 f96a 	bl	8018dc0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8016aec:	4605      	mov	r5, r0
 8016aee:	b110      	cbz	r0, 8016af6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 8016af0:	280a      	cmp	r0, #10
 8016af2:	d1f2      	bne.n	8016ada <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25e>
 8016af4:	e76c      	b.n	80169d0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 8016af6:	2500      	movs	r5, #0
 8016af8:	e76b      	b.n	80169d2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 8016afa:	f1bb 0f00 	cmp.w	fp, #0
 8016afe:	f43f af5b 	beq.w	80169b8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x13c>
 8016b02:	e776      	b.n	80169f2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8016b04:	fffffe00 	.word	0xfffffe00

08016b08 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8016b08:	b530      	push	{r4, r5, lr}
 8016b0a:	8a44      	ldrh	r4, [r0, #18]
 8016b0c:	8ac5      	ldrh	r5, [r0, #22]
 8016b0e:	82c3      	strh	r3, [r0, #22]
 8016b10:	442c      	add	r4, r5
 8016b12:	1ae4      	subs	r4, r4, r3
 8016b14:	8b03      	ldrh	r3, [r0, #24]
 8016b16:	8244      	strh	r4, [r0, #18]
 8016b18:	8a84      	ldrh	r4, [r0, #20]
 8016b1a:	4422      	add	r2, r4
 8016b1c:	440c      	add	r4, r1
 8016b1e:	1a59      	subs	r1, r3, r1
 8016b20:	8342      	strh	r2, [r0, #26]
 8016b22:	8284      	strh	r4, [r0, #20]
 8016b24:	8301      	strh	r1, [r0, #24]
 8016b26:	bd30      	pop	{r4, r5, pc}

08016b28 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 8016b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b2c:	7a45      	ldrb	r5, [r0, #9]
 8016b2e:	b085      	sub	sp, #20
 8016b30:	4604      	mov	r4, r0
 8016b32:	4689      	mov	r9, r1
 8016b34:	1eeb      	subs	r3, r5, #3
 8016b36:	b2db      	uxtb	r3, r3
 8016b38:	b329      	cbz	r1, 8016b86 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5e>
 8016b3a:	2b01      	cmp	r3, #1
 8016b3c:	d921      	bls.n	8016b82 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5a>
 8016b3e:	1e69      	subs	r1, r5, #1
 8016b40:	f1d1 0b00 	rsbs	fp, r1, #0
 8016b44:	eb4b 0b01 	adc.w	fp, fp, r1
 8016b48:	1eaa      	subs	r2, r5, #2
 8016b4a:	2500      	movs	r5, #0
 8016b4c:	4253      	negs	r3, r2
 8016b4e:	9500      	str	r5, [sp, #0]
 8016b50:	4153      	adcs	r3, r2
 8016b52:	9301      	str	r3, [sp, #4]
 8016b54:	2600      	movs	r6, #0
 8016b56:	f242 080b 	movw	r8, #8203	; 0x200b
 8016b5a:	8266      	strh	r6, [r4, #18]
 8016b5c:	82a6      	strh	r6, [r4, #20]
 8016b5e:	2300      	movs	r3, #0
 8016b60:	68e2      	ldr	r2, [r4, #12]
 8016b62:	7a21      	ldrb	r1, [r4, #8]
 8016b64:	9303      	str	r3, [sp, #12]
 8016b66:	ab03      	add	r3, sp, #12
 8016b68:	6860      	ldr	r0, [r4, #4]
 8016b6a:	8827      	ldrh	r7, [r4, #0]
 8016b6c:	f002 f968 	bl	8018e40 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8016b70:	8020      	strh	r0, [r4, #0]
 8016b72:	b9b0      	cbnz	r0, 8016ba2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7a>
 8016b74:	8b22      	ldrh	r2, [r4, #24]
 8016b76:	2300      	movs	r3, #0
 8016b78:	4611      	mov	r1, r2
 8016b7a:	4620      	mov	r0, r4
 8016b7c:	f7ff ffc4 	bl	8016b08 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8016b80:	e062      	b.n	8016c48 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 8016b82:	468b      	mov	fp, r1
 8016b84:	e7e0      	b.n	8016b48 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x20>
 8016b86:	2b01      	cmp	r3, #1
 8016b88:	f105 35ff 	add.w	r5, r5, #4294967295
 8016b8c:	9101      	str	r1, [sp, #4]
 8016b8e:	468b      	mov	fp, r1
 8016b90:	bf8c      	ite	hi
 8016b92:	2300      	movhi	r3, #0
 8016b94:	2301      	movls	r3, #1
 8016b96:	2d01      	cmp	r5, #1
 8016b98:	9300      	str	r3, [sp, #0]
 8016b9a:	bf8c      	ite	hi
 8016b9c:	2500      	movhi	r5, #0
 8016b9e:	2501      	movls	r5, #1
 8016ba0:	e7d8      	b.n	8016b54 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x2c>
 8016ba2:	8ae3      	ldrh	r3, [r4, #22]
 8016ba4:	280a      	cmp	r0, #10
 8016ba6:	f103 0301 	add.w	r3, r3, #1
 8016baa:	82e3      	strh	r3, [r4, #22]
 8016bac:	d0e2      	beq.n	8016b74 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x4c>
 8016bae:	9a03      	ldr	r2, [sp, #12]
 8016bb0:	b972      	cbnz	r2, 8016bd0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa8>
 8016bb2:	4540      	cmp	r0, r8
 8016bb4:	d1d3      	bne.n	8016b5e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8016bb6:	8823      	ldrh	r3, [r4, #0]
 8016bb8:	8b21      	ldrh	r1, [r4, #24]
 8016bba:	2b20      	cmp	r3, #32
 8016bbc:	d001      	beq.n	8016bc2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9a>
 8016bbe:	4543      	cmp	r3, r8
 8016bc0:	d11d      	bne.n	8016bfe <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 8016bc2:	2f20      	cmp	r7, #32
 8016bc4:	d002      	beq.n	8016bcc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 8016bc6:	4547      	cmp	r7, r8
 8016bc8:	bf18      	it	ne
 8016bca:	460e      	movne	r6, r1
 8016bcc:	2001      	movs	r0, #1
 8016bce:	e017      	b.n	8016c00 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd8>
 8016bd0:	4540      	cmp	r0, r8
 8016bd2:	d012      	beq.n	8016bfa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd2>
 8016bd4:	8893      	ldrh	r3, [r2, #4]
 8016bd6:	4639      	mov	r1, r7
 8016bd8:	8023      	strh	r3, [r4, #0]
 8016bda:	f992 a00d 	ldrsb.w	sl, [r2, #13]
 8016bde:	f40a 7080 	and.w	r0, sl, #256	; 0x100
 8016be2:	f892 a00a 	ldrb.w	sl, [r2, #10]
 8016be6:	ea4a 0a00 	orr.w	sl, sl, r0
 8016bea:	68e0      	ldr	r0, [r4, #12]
 8016bec:	6803      	ldr	r3, [r0, #0]
 8016bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016bf0:	4798      	blx	r3
 8016bf2:	eb0a 0200 	add.w	r2, sl, r0
 8016bf6:	b292      	uxth	r2, r2
 8016bf8:	e7dd      	b.n	8016bb6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 8016bfa:	2200      	movs	r2, #0
 8016bfc:	e7db      	b.n	8016bb6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 8016bfe:	2000      	movs	r0, #0
 8016c00:	440a      	add	r2, r1
 8016c02:	8aa3      	ldrh	r3, [r4, #20]
 8016c04:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8016c08:	b292      	uxth	r2, r2
 8016c0a:	8322      	strh	r2, [r4, #24]
 8016c0c:	4413      	add	r3, r2
 8016c0e:	f1b9 0f00 	cmp.w	r9, #0
 8016c12:	d022      	beq.n	8016c5a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x132>
 8016c14:	f1bb 0f00 	cmp.w	fp, #0
 8016c18:	d102      	bne.n	8016c20 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf8>
 8016c1a:	9901      	ldr	r1, [sp, #4]
 8016c1c:	b149      	cbz	r1, 8016c32 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 8016c1e:	b140      	cbz	r0, 8016c32 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 8016c20:	8ba1      	ldrh	r1, [r4, #28]
 8016c22:	4419      	add	r1, r3
 8016c24:	458c      	cmp	ip, r1
 8016c26:	da12      	bge.n	8016c4e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 8016c28:	8a61      	ldrh	r1, [r4, #18]
 8016c2a:	b181      	cbz	r1, 8016c4e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 8016c2c:	4563      	cmp	r3, ip
 8016c2e:	dd96      	ble.n	8016b5e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8016c30:	e004      	b.n	8016c3c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x114>
 8016c32:	4563      	cmp	r3, ip
 8016c34:	dd93      	ble.n	8016b5e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8016c36:	8a63      	ldrh	r3, [r4, #18]
 8016c38:	2b00      	cmp	r3, #0
 8016c3a:	d090      	beq.n	8016b5e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8016c3c:	2301      	movs	r3, #1
 8016c3e:	8ba2      	ldrh	r2, [r4, #28]
 8016c40:	77a3      	strb	r3, [r4, #30]
 8016c42:	8b63      	ldrh	r3, [r4, #26]
 8016c44:	4413      	add	r3, r2
 8016c46:	8363      	strh	r3, [r4, #26]
 8016c48:	b005      	add	sp, #20
 8016c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c4e:	2300      	movs	r3, #0
 8016c50:	4611      	mov	r1, r2
 8016c52:	4620      	mov	r0, r4
 8016c54:	f7ff ff58 	bl	8016b08 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8016c58:	e781      	b.n	8016b5e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8016c5a:	4563      	cmp	r3, ip
 8016c5c:	dd16      	ble.n	8016c8c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x164>
 8016c5e:	9b00      	ldr	r3, [sp, #0]
 8016c60:	b113      	cbz	r3, 8016c68 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 8016c62:	2301      	movs	r3, #1
 8016c64:	460a      	mov	r2, r1
 8016c66:	e787      	b.n	8016b78 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x50>
 8016c68:	2d00      	cmp	r5, #0
 8016c6a:	f43f af78 	beq.w	8016b5e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8016c6e:	2800      	cmp	r0, #0
 8016c70:	f47f af75 	bne.w	8016b5e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8016c74:	2f20      	cmp	r7, #32
 8016c76:	d001      	beq.n	8016c7c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x154>
 8016c78:	4547      	cmp	r7, r8
 8016c7a:	d102      	bne.n	8016c82 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15a>
 8016c7c:	2301      	movs	r3, #1
 8016c7e:	4632      	mov	r2, r6
 8016c80:	e77b      	b.n	8016b7a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x52>
 8016c82:	8a63      	ldrh	r3, [r4, #18]
 8016c84:	2b00      	cmp	r3, #0
 8016c86:	f43f af6a 	beq.w	8016b5e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8016c8a:	e7dd      	b.n	8016c48 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 8016c8c:	2800      	cmp	r0, #0
 8016c8e:	f47f af66 	bne.w	8016b5e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8016c92:	2f20      	cmp	r7, #32
 8016c94:	d002      	beq.n	8016c9c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x174>
 8016c96:	4547      	cmp	r7, r8
 8016c98:	f47f af61 	bne.w	8016b5e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8016c9c:	2301      	movs	r3, #1
 8016c9e:	4632      	mov	r2, r6
 8016ca0:	e7d7      	b.n	8016c52 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x12a>

08016ca2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8016ca2:	b570      	push	{r4, r5, r6, lr}
 8016ca4:	4606      	mov	r6, r0
 8016ca6:	b08a      	sub	sp, #40	; 0x28
 8016ca8:	4615      	mov	r5, r2
 8016caa:	b191      	cbz	r1, 8016cd2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x30>
 8016cac:	2401      	movs	r4, #1
 8016cae:	e9cd 3100 	strd	r3, r1, [sp]
 8016cb2:	4613      	mov	r3, r2
 8016cb4:	4601      	mov	r1, r0
 8016cb6:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8016cba:	a802      	add	r0, sp, #8
 8016cbc:	f7ff fd20 	bl	8016700 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8016cc0:	2100      	movs	r1, #0
 8016cc2:	a802      	add	r0, sp, #8
 8016cc4:	f7ff ff30 	bl	8016b28 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8016cc8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8016ccc:	b173      	cbz	r3, 8016cec <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 8016cce:	3401      	adds	r4, #1
 8016cd0:	e7f6      	b.n	8016cc0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1e>
 8016cd2:	2401      	movs	r4, #1
 8016cd4:	4611      	mov	r1, r2
 8016cd6:	f002 f873 	bl	8018dc0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8016cda:	280a      	cmp	r0, #10
 8016cdc:	4629      	mov	r1, r5
 8016cde:	4630      	mov	r0, r6
 8016ce0:	bf08      	it	eq
 8016ce2:	3401      	addeq	r4, #1
 8016ce4:	f002 f86c 	bl	8018dc0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8016ce8:	2800      	cmp	r0, #0
 8016cea:	d1f6      	bne.n	8016cda <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x38>
 8016cec:	b2a0      	uxth	r0, r4
 8016cee:	b00a      	add	sp, #40	; 0x28
 8016cf0:	bd70      	pop	{r4, r5, r6, pc}

08016cf2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8016cf2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cf6:	b0db      	sub	sp, #364	; 0x16c
 8016cf8:	468a      	mov	sl, r1
 8016cfa:	461c      	mov	r4, r3
 8016cfc:	f8dd b190 	ldr.w	fp, [sp, #400]	; 0x190
 8016d00:	9009      	str	r0, [sp, #36]	; 0x24
 8016d02:	f1bb 0f00 	cmp.w	fp, #0
 8016d06:	f000 80c7 	beq.w	8016e98 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8016d0a:	681b      	ldr	r3, [r3, #0]
 8016d0c:	2b00      	cmp	r3, #0
 8016d0e:	f000 80c3 	beq.w	8016e98 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8016d12:	7ba3      	ldrb	r3, [r4, #14]
 8016d14:	2b00      	cmp	r3, #0
 8016d16:	f000 80bf 	beq.w	8016e98 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8016d1a:	af0c      	add	r7, sp, #48	; 0x30
 8016d1c:	6810      	ldr	r0, [r2, #0]
 8016d1e:	6851      	ldr	r1, [r2, #4]
 8016d20:	f10d 0960 	add.w	r9, sp, #96	; 0x60
 8016d24:	463b      	mov	r3, r7
 8016d26:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
 8016d2a:	c303      	stmia	r3!, {r0, r1}
 8016d2c:	2100      	movs	r1, #0
 8016d2e:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 8016d32:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8016d36:	4638      	mov	r0, r7
 8016d38:	910e      	str	r1, [sp, #56]	; 0x38
 8016d3a:	a90e      	add	r1, sp, #56	; 0x38
 8016d3c:	79a2      	ldrb	r2, [r4, #6]
 8016d3e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8016d42:	f7ff fd49 	bl	80167d8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8016d46:	a90e      	add	r1, sp, #56	; 0x38
 8016d48:	79a2      	ldrb	r2, [r4, #6]
 8016d4a:	4608      	mov	r0, r1
 8016d4c:	f7ff fd44 	bl	80167d8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8016d50:	4648      	mov	r0, r9
 8016d52:	f001 fef3 	bl	8018b3c <_ZN8touchgfx12TextProviderC1Ev>
 8016d56:	6820      	ldr	r0, [r4, #0]
 8016d58:	6803      	ldr	r3, [r0, #0]
 8016d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016d5c:	4798      	blx	r3
 8016d5e:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8016d60:	4603      	mov	r3, r0
 8016d62:	4659      	mov	r1, fp
 8016d64:	4648      	mov	r0, r9
 8016d66:	f001 ff06 	bl	8018b76 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8016d6a:	a82e      	add	r0, sp, #184	; 0xb8
 8016d6c:	f001 fee6 	bl	8018b3c <_ZN8touchgfx12TextProviderC1Ev>
 8016d70:	f894 8004 	ldrb.w	r8, [r4, #4]
 8016d74:	f1b8 0f00 	cmp.w	r8, #0
 8016d78:	d009      	beq.n	8016d8e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x9c>
 8016d7a:	6820      	ldr	r0, [r4, #0]
 8016d7c:	6803      	ldr	r3, [r0, #0]
 8016d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016d80:	4798      	blx	r3
 8016d82:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8016d84:	4603      	mov	r3, r0
 8016d86:	4659      	mov	r1, fp
 8016d88:	a82e      	add	r0, sp, #184	; 0xb8
 8016d8a:	f001 fef4 	bl	8018b76 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8016d8e:	6820      	ldr	r0, [r4, #0]
 8016d90:	6803      	ldr	r3, [r0, #0]
 8016d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016d94:	4798      	blx	r3
 8016d96:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016d9a:	182e      	adds	r6, r5, r0
 8016d9c:	2e00      	cmp	r6, #0
 8016d9e:	dd45      	ble.n	8016e2c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 8016da0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016da4:	4283      	cmp	r3, r0
 8016da6:	db41      	blt.n	8016e2c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 8016da8:	441d      	add	r5, r3
 8016daa:	fb95 f5f6 	sdiv	r5, r5, r6
 8016dae:	a844      	add	r0, sp, #272	; 0x110
 8016db0:	f001 fec4 	bl	8018b3c <_ZN8touchgfx12TextProviderC1Ev>
 8016db4:	7c23      	ldrb	r3, [r4, #16]
 8016db6:	b14b      	cbz	r3, 8016dcc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xda>
 8016db8:	6820      	ldr	r0, [r4, #0]
 8016dba:	6803      	ldr	r3, [r0, #0]
 8016dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016dbe:	4798      	blx	r3
 8016dc0:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8016dc2:	4603      	mov	r3, r0
 8016dc4:	4659      	mov	r1, fp
 8016dc6:	a844      	add	r0, sp, #272	; 0x110
 8016dc8:	f001 fed5 	bl	8018b76 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8016dcc:	7c21      	ldrb	r1, [r4, #16]
 8016dce:	a810      	add	r0, sp, #64	; 0x40
 8016dd0:	7963      	ldrb	r3, [r4, #5]
 8016dd2:	9101      	str	r1, [sp, #4]
 8016dd4:	6821      	ldr	r1, [r4, #0]
 8016dd6:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8016dda:	9100      	str	r1, [sp, #0]
 8016ddc:	a944      	add	r1, sp, #272	; 0x110
 8016dde:	f7ff fc8f 	bl	8016700 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8016de2:	7c23      	ldrb	r3, [r4, #16]
 8016de4:	bb23      	cbnz	r3, 8016e30 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13e>
 8016de6:	fa1f fb86 	uxth.w	fp, r6
 8016dea:	2d00      	cmp	r5, #0
 8016dec:	dd57      	ble.n	8016e9e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 8016dee:	7961      	ldrb	r1, [r4, #5]
 8016df0:	4648      	mov	r0, r9
 8016df2:	f001 ffe5 	bl	8018dc0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8016df6:	4603      	mov	r3, r0
 8016df8:	f1b8 0f00 	cmp.w	r8, #0
 8016dfc:	d005      	beq.n	8016e0a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x118>
 8016dfe:	9008      	str	r0, [sp, #32]
 8016e00:	a82e      	add	r0, sp, #184	; 0xb8
 8016e02:	7961      	ldrb	r1, [r4, #5]
 8016e04:	f001 ffdc 	bl	8018dc0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8016e08:	9b08      	ldr	r3, [sp, #32]
 8016e0a:	2b00      	cmp	r3, #0
 8016e0c:	d044      	beq.n	8016e98 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8016e0e:	2b0a      	cmp	r3, #10
 8016e10:	d1eb      	bne.n	8016dea <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 8016e12:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8016e16:	3d01      	subs	r5, #1
 8016e18:	445b      	add	r3, fp
 8016e1a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8016e1e:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8016e22:	eba3 030b 	sub.w	r3, r3, fp
 8016e26:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8016e2a:	e7de      	b.n	8016dea <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 8016e2c:	2500      	movs	r5, #0
 8016e2e:	e7be      	b.n	8016dae <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xbc>
 8016e30:	0073      	lsls	r3, r6, #1
 8016e32:	9308      	str	r3, [sp, #32]
 8016e34:	2d00      	cmp	r5, #0
 8016e36:	dd32      	ble.n	8016e9e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 8016e38:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8016e3c:	a810      	add	r0, sp, #64	; 0x40
 8016e3e:	9b08      	ldr	r3, [sp, #32]
 8016e40:	428b      	cmp	r3, r1
 8016e42:	bfd4      	ite	le
 8016e44:	2100      	movle	r1, #0
 8016e46:	2101      	movgt	r1, #1
 8016e48:	f7ff fe6e 	bl	8016b28 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8016e4c:	f8bd b052 	ldrh.w	fp, [sp, #82]	; 0x52
 8016e50:	f10b 33ff 	add.w	r3, fp, #4294967295
 8016e54:	fa1f fb83 	uxth.w	fp, r3
 8016e58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016e5c:	459b      	cmp	fp, r3
 8016e5e:	d00b      	beq.n	8016e78 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 8016e60:	7961      	ldrb	r1, [r4, #5]
 8016e62:	4648      	mov	r0, r9
 8016e64:	f001 ffac 	bl	8018dc0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8016e68:	f1b8 0f00 	cmp.w	r8, #0
 8016e6c:	d0f0      	beq.n	8016e50 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 8016e6e:	7961      	ldrb	r1, [r4, #5]
 8016e70:	a82e      	add	r0, sp, #184	; 0xb8
 8016e72:	f001 ffa5 	bl	8018dc0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8016e76:	e7eb      	b.n	8016e50 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 8016e78:	b2b3      	uxth	r3, r6
 8016e7a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8016e7e:	3d01      	subs	r5, #1
 8016e80:	441a      	add	r2, r3
 8016e82:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 8016e86:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 8016e8a:	1ad3      	subs	r3, r2, r3
 8016e8c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8016e90:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8016e94:	2b00      	cmp	r3, #0
 8016e96:	d1cd      	bne.n	8016e34 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 8016e98:	b05b      	add	sp, #364	; 0x16c
 8016e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e9e:	ea4f 0b46 	mov.w	fp, r6, lsl #1
 8016ea2:	f10d 052e 	add.w	r5, sp, #46	; 0x2e
 8016ea6:	7c23      	ldrb	r3, [r4, #16]
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	d05f      	beq.n	8016f6c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x27a>
 8016eac:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8016eb0:	a810      	add	r0, sp, #64	; 0x40
 8016eb2:	458b      	cmp	fp, r1
 8016eb4:	bfd4      	ite	le
 8016eb6:	2100      	movle	r1, #0
 8016eb8:	2101      	movgt	r1, #1
 8016eba:	f7ff fe35 	bl	8016b28 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8016ebe:	f1b8 0f00 	cmp.w	r8, #0
 8016ec2:	d04c      	beq.n	8016f5e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 8016ec4:	7c23      	ldrb	r3, [r4, #16]
 8016ec6:	2b00      	cmp	r3, #0
 8016ec8:	d053      	beq.n	8016f72 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x280>
 8016eca:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 8016ece:	7922      	ldrb	r2, [r4, #4]
 8016ed0:	2a01      	cmp	r2, #1
 8016ed2:	d13c      	bne.n	8016f4e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 8016ed4:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 8016ed8:	1ac0      	subs	r0, r0, r3
 8016eda:	2302      	movs	r3, #2
 8016edc:	fb90 f0f3 	sdiv	r0, r0, r3
 8016ee0:	b200      	sxth	r0, r0
 8016ee2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8016ee6:	4418      	add	r0, r3
 8016ee8:	7c23      	ldrb	r3, [r4, #16]
 8016eea:	8028      	strh	r0, [r5, #0]
 8016eec:	2b00      	cmp	r3, #0
 8016eee:	d03a      	beq.n	8016f66 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x274>
 8016ef0:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 8016ef4:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
 8016ef8:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8016efc:	f8cd 9010 	str.w	r9, [sp, #16]
 8016f00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016f02:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8016f06:	2200      	movs	r2, #0
 8016f08:	2100      	movs	r1, #0
 8016f0a:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8016f0e:	e9cd 5700 	strd	r5, r7, [sp]
 8016f12:	4652      	mov	r2, sl
 8016f14:	f7ff fcb2 	bl	801687c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8016f18:	2800      	cmp	r0, #0
 8016f1a:	d1bd      	bne.n	8016e98 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8016f1c:	b2b2      	uxth	r2, r6
 8016f1e:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8016f22:	4611      	mov	r1, r2
 8016f24:	4413      	add	r3, r2
 8016f26:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 8016f2a:	b21b      	sxth	r3, r3
 8016f2c:	1a52      	subs	r2, r2, r1
 8016f2e:	7c21      	ldrb	r1, [r4, #16]
 8016f30:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8016f34:	b212      	sxth	r2, r2
 8016f36:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 8016f3a:	b109      	cbz	r1, 8016f40 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 8016f3c:	42b2      	cmp	r2, r6
 8016f3e:	dbab      	blt.n	8016e98 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8016f40:	887a      	ldrh	r2, [r7, #2]
 8016f42:	88f9      	ldrh	r1, [r7, #6]
 8016f44:	440a      	add	r2, r1
 8016f46:	b212      	sxth	r2, r2
 8016f48:	4293      	cmp	r3, r2
 8016f4a:	ddac      	ble.n	8016ea6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1b4>
 8016f4c:	e7a4      	b.n	8016e98 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8016f4e:	2a02      	cmp	r2, #2
 8016f50:	d107      	bne.n	8016f62 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 8016f52:	7be2      	ldrb	r2, [r4, #15]
 8016f54:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 8016f58:	1a80      	subs	r0, r0, r2
 8016f5a:	1ac0      	subs	r0, r0, r3
 8016f5c:	e7c0      	b.n	8016ee0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 8016f5e:	7be0      	ldrb	r0, [r4, #15]
 8016f60:	e7bf      	b.n	8016ee2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 8016f62:	2000      	movs	r0, #0
 8016f64:	e7bd      	b.n	8016ee2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 8016f66:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8016f6a:	e7c3      	b.n	8016ef4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x202>
 8016f6c:	f1b8 0f00 	cmp.w	r8, #0
 8016f70:	d0f5      	beq.n	8016f5e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 8016f72:	2300      	movs	r3, #0
 8016f74:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8016f78:	6821      	ldr	r1, [r4, #0]
 8016f7a:	a82e      	add	r0, sp, #184	; 0xb8
 8016f7c:	f7ff fbfa 	bl	8016774 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8016f80:	b203      	sxth	r3, r0
 8016f82:	e7a4      	b.n	8016ece <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>

08016f84 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8016f84:	2b02      	cmp	r3, #2
 8016f86:	b510      	push	{r4, lr}
 8016f88:	f9b0 4000 	ldrsh.w	r4, [r0]
 8016f8c:	d00b      	beq.n	8016fa6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 8016f8e:	2b03      	cmp	r3, #3
 8016f90:	d00e      	beq.n	8016fb0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 8016f92:	2b01      	cmp	r3, #1
 8016f94:	d001      	beq.n	8016f9a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 8016f96:	1860      	adds	r0, r4, r1
 8016f98:	bd10      	pop	{r4, pc}
 8016f9a:	8880      	ldrh	r0, [r0, #4]
 8016f9c:	4420      	add	r0, r4
 8016f9e:	b200      	sxth	r0, r0
 8016fa0:	1a80      	subs	r0, r0, r2
 8016fa2:	3801      	subs	r0, #1
 8016fa4:	e7f8      	b.n	8016f98 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 8016fa6:	8880      	ldrh	r0, [r0, #4]
 8016fa8:	4420      	add	r0, r4
 8016faa:	b200      	sxth	r0, r0
 8016fac:	1a40      	subs	r0, r0, r1
 8016fae:	e7f8      	b.n	8016fa2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8016fb0:	18a0      	adds	r0, r4, r2
 8016fb2:	e7f1      	b.n	8016f98 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

08016fb4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8016fb4:	2b02      	cmp	r3, #2
 8016fb6:	b510      	push	{r4, lr}
 8016fb8:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8016fbc:	d006      	beq.n	8016fcc <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 8016fbe:	2b03      	cmp	r3, #3
 8016fc0:	d00a      	beq.n	8016fd8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8016fc2:	2b01      	cmp	r3, #1
 8016fc4:	bf14      	ite	ne
 8016fc6:	18a0      	addne	r0, r4, r2
 8016fc8:	1860      	addeq	r0, r4, r1
 8016fca:	bd10      	pop	{r4, pc}
 8016fcc:	88c0      	ldrh	r0, [r0, #6]
 8016fce:	4420      	add	r0, r4
 8016fd0:	b200      	sxth	r0, r0
 8016fd2:	1a80      	subs	r0, r0, r2
 8016fd4:	3801      	subs	r0, #1
 8016fd6:	e7f8      	b.n	8016fca <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 8016fd8:	88c0      	ldrh	r0, [r0, #6]
 8016fda:	4420      	add	r0, r4
 8016fdc:	b200      	sxth	r0, r0
 8016fde:	1a40      	subs	r0, r0, r1
 8016fe0:	e7f8      	b.n	8016fd4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

08016fe4 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8016fe4:	4b01      	ldr	r3, [pc, #4]	; (8016fec <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8016fe6:	2200      	movs	r2, #0
 8016fe8:	601a      	str	r2, [r3, #0]
 8016fea:	4770      	bx	lr
 8016fec:	2000bb00 	.word	0x2000bb00

08016ff0 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 8016ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016ff2:	1e05      	subs	r5, r0, #0
 8016ff4:	f04f 0601 	mov.w	r6, #1
 8016ff8:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8016ffc:	bfba      	itte	lt
 8016ffe:	f04f 37ff 	movlt.w	r7, #4294967295
 8017002:	426d      	neglt	r5, r5
 8017004:	2701      	movge	r7, #1
 8017006:	e9dd e405 	ldrd	lr, r4, [sp, #20]
 801700a:	f1be 0f00 	cmp.w	lr, #0
 801700e:	bfbc      	itt	lt
 8017010:	f1ce 0e00 	rsblt	lr, lr, #0
 8017014:	427f      	neglt	r7, r7
 8017016:	2c00      	cmp	r4, #0
 8017018:	fa4e f001 	asr.w	r0, lr, r1
 801701c:	fa06 f101 	lsl.w	r1, r6, r1
 8017020:	bfbc      	itt	lt
 8017022:	4264      	neglt	r4, r4
 8017024:	427f      	neglt	r7, r7
 8017026:	3901      	subs	r1, #1
 8017028:	ea01 010e 	and.w	r1, r1, lr
 801702c:	434d      	muls	r5, r1
 801702e:	f8dc 1000 	ldr.w	r1, [ip]
 8017032:	fb03 1300 	mla	r3, r3, r0, r1
 8017036:	fb95 f1f4 	sdiv	r1, r5, r4
 801703a:	fb04 5511 	mls	r5, r4, r1, r5
 801703e:	441d      	add	r5, r3
 8017040:	fb95 f3f4 	sdiv	r3, r5, r4
 8017044:	4419      	add	r1, r3
 8017046:	fb04 5413 	mls	r4, r4, r3, r5
 801704a:	fb02 1000 	mla	r0, r2, r0, r1
 801704e:	f8cc 4000 	str.w	r4, [ip]
 8017052:	4378      	muls	r0, r7
 8017054:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08017058 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8017058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801705c:	4c24      	ldr	r4, [pc, #144]	; (80170f0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 801705e:	b086      	sub	sp, #24
 8017060:	4605      	mov	r5, r0
 8017062:	6807      	ldr	r7, [r0, #0]
 8017064:	69a3      	ldr	r3, [r4, #24]
 8017066:	b92b      	cbnz	r3, 8017074 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 8017068:	6840      	ldr	r0, [r0, #4]
 801706a:	e9c5 7000 	strd	r7, r0, [r5]
 801706e:	b006      	add	sp, #24
 8017070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017074:	f04f 0802 	mov.w	r8, #2
 8017078:	68a2      	ldr	r2, [r4, #8]
 801707a:	ae06      	add	r6, sp, #24
 801707c:	6820      	ldr	r0, [r4, #0]
 801707e:	fb93 f1f8 	sdiv	r1, r3, r8
 8017082:	440a      	add	r2, r1
 8017084:	69e1      	ldr	r1, [r4, #28]
 8017086:	f846 2d04 	str.w	r2, [r6, #-4]!
 801708a:	9700      	str	r7, [sp, #0]
 801708c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801708e:	e9cd 3601 	strd	r3, r6, [sp, #4]
 8017092:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017094:	f7ff ffac 	bl	8016ff0 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8017098:	69a3      	ldr	r3, [r4, #24]
 801709a:	4607      	mov	r7, r0
 801709c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801709e:	9301      	str	r3, [sp, #4]
 80170a0:	686b      	ldr	r3, [r5, #4]
 80170a2:	6a21      	ldr	r1, [r4, #32]
 80170a4:	9300      	str	r3, [sp, #0]
 80170a6:	9602      	str	r6, [sp, #8]
 80170a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80170aa:	6860      	ldr	r0, [r4, #4]
 80170ac:	f7ff ffa0 	bl	8016ff0 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 80170b0:	69a2      	ldr	r2, [r4, #24]
 80170b2:	6963      	ldr	r3, [r4, #20]
 80170b4:	4407      	add	r7, r0
 80170b6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80170b8:	68e0      	ldr	r0, [r4, #12]
 80170ba:	fb92 f8f8 	sdiv	r8, r2, r8
 80170be:	4443      	add	r3, r8
 80170c0:	9305      	str	r3, [sp, #20]
 80170c2:	682b      	ldr	r3, [r5, #0]
 80170c4:	e9cd 2601 	strd	r2, r6, [sp, #4]
 80170c8:	9300      	str	r3, [sp, #0]
 80170ca:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80170cc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80170ce:	f7ff ff8f 	bl	8016ff0 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 80170d2:	69a3      	ldr	r3, [r4, #24]
 80170d4:	4680      	mov	r8, r0
 80170d6:	9602      	str	r6, [sp, #8]
 80170d8:	9301      	str	r3, [sp, #4]
 80170da:	686b      	ldr	r3, [r5, #4]
 80170dc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80170de:	9300      	str	r3, [sp, #0]
 80170e0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80170e2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80170e4:	6920      	ldr	r0, [r4, #16]
 80170e6:	f7ff ff83 	bl	8016ff0 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 80170ea:	4440      	add	r0, r8
 80170ec:	e7bd      	b.n	801706a <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 80170ee:	bf00      	nop
 80170f0:	2000bb04 	.word	0x2000bb04

080170f4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 80170f4:	4b07      	ldr	r3, [pc, #28]	; (8017114 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 80170f6:	b510      	push	{r4, lr}
 80170f8:	781b      	ldrb	r3, [r3, #0]
 80170fa:	2b01      	cmp	r3, #1
 80170fc:	d108      	bne.n	8017110 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 80170fe:	4b06      	ldr	r3, [pc, #24]	; (8017118 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8017100:	880c      	ldrh	r4, [r1, #0]
 8017102:	881b      	ldrh	r3, [r3, #0]
 8017104:	f9b0 2000 	ldrsh.w	r2, [r0]
 8017108:	3b01      	subs	r3, #1
 801710a:	1b1b      	subs	r3, r3, r4
 801710c:	8003      	strh	r3, [r0, #0]
 801710e:	800a      	strh	r2, [r1, #0]
 8017110:	bd10      	pop	{r4, pc}
 8017112:	bf00      	nop
 8017114:	2000bad0 	.word	0x2000bad0
 8017118:	2000bad4 	.word	0x2000bad4

0801711c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801711c:	4b0a      	ldr	r3, [pc, #40]	; (8017148 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801711e:	b510      	push	{r4, lr}
 8017120:	781b      	ldrb	r3, [r3, #0]
 8017122:	2b01      	cmp	r3, #1
 8017124:	d10e      	bne.n	8017144 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8017126:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801712a:	8843      	ldrh	r3, [r0, #2]
 801712c:	f9b0 4000 	ldrsh.w	r4, [r0]
 8017130:	18ca      	adds	r2, r1, r3
 8017132:	4b06      	ldr	r3, [pc, #24]	; (801714c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8017134:	8044      	strh	r4, [r0, #2]
 8017136:	881b      	ldrh	r3, [r3, #0]
 8017138:	1a9b      	subs	r3, r3, r2
 801713a:	8003      	strh	r3, [r0, #0]
 801713c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8017140:	8081      	strh	r1, [r0, #4]
 8017142:	80c3      	strh	r3, [r0, #6]
 8017144:	bd10      	pop	{r4, pc}
 8017146:	bf00      	nop
 8017148:	2000bad0 	.word	0x2000bad0
 801714c:	2000bacc 	.word	0x2000bacc

08017150 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8017150:	4b07      	ldr	r3, [pc, #28]	; (8017170 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8017152:	b510      	push	{r4, lr}
 8017154:	781b      	ldrb	r3, [r3, #0]
 8017156:	2b01      	cmp	r3, #1
 8017158:	d108      	bne.n	801716c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801715a:	f9b1 3000 	ldrsh.w	r3, [r1]
 801715e:	f9b0 4000 	ldrsh.w	r4, [r0]
 8017162:	8003      	strh	r3, [r0, #0]
 8017164:	8893      	ldrh	r3, [r2, #4]
 8017166:	3b01      	subs	r3, #1
 8017168:	1b1b      	subs	r3, r3, r4
 801716a:	800b      	strh	r3, [r1, #0]
 801716c:	bd10      	pop	{r4, pc}
 801716e:	bf00      	nop
 8017170:	2000bad0 	.word	0x2000bad0

08017174 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8017174:	4b08      	ldr	r3, [pc, #32]	; (8017198 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8017176:	b513      	push	{r0, r1, r4, lr}
 8017178:	f9b3 2000 	ldrsh.w	r2, [r3]
 801717c:	2400      	movs	r4, #0
 801717e:	4b07      	ldr	r3, [pc, #28]	; (801719c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 8017180:	f8ad 2004 	strh.w	r2, [sp, #4]
 8017184:	466a      	mov	r2, sp
 8017186:	f9b3 3000 	ldrsh.w	r3, [r3]
 801718a:	9400      	str	r4, [sp, #0]
 801718c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017190:	f7ff ffde 	bl	8017150 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8017194:	b002      	add	sp, #8
 8017196:	bd10      	pop	{r4, pc}
 8017198:	2000bacc 	.word	0x2000bacc
 801719c:	2000bace 	.word	0x2000bace

080171a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 80171a0:	4b0a      	ldr	r3, [pc, #40]	; (80171cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 80171a2:	460a      	mov	r2, r1
 80171a4:	b510      	push	{r4, lr}
 80171a6:	781b      	ldrb	r3, [r3, #0]
 80171a8:	2b01      	cmp	r3, #1
 80171aa:	d10d      	bne.n	80171c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 80171ac:	8881      	ldrh	r1, [r0, #4]
 80171ae:	8803      	ldrh	r3, [r0, #0]
 80171b0:	440b      	add	r3, r1
 80171b2:	4601      	mov	r1, r0
 80171b4:	3b01      	subs	r3, #1
 80171b6:	f821 3b02 	strh.w	r3, [r1], #2
 80171ba:	f7ff ffc9 	bl	8017150 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 80171be:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80171c2:	88c2      	ldrh	r2, [r0, #6]
 80171c4:	80c3      	strh	r3, [r0, #6]
 80171c6:	8082      	strh	r2, [r0, #4]
 80171c8:	bd10      	pop	{r4, pc}
 80171ca:	bf00      	nop
 80171cc:	2000bad0 	.word	0x2000bad0

080171d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 80171d0:	4b09      	ldr	r3, [pc, #36]	; (80171f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 80171d2:	b507      	push	{r0, r1, r2, lr}
 80171d4:	2100      	movs	r1, #0
 80171d6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80171da:	4b08      	ldr	r3, [pc, #32]	; (80171fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 80171dc:	9100      	str	r1, [sp, #0]
 80171de:	4669      	mov	r1, sp
 80171e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80171e4:	f8ad 2004 	strh.w	r2, [sp, #4]
 80171e8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80171ec:	f7ff ffd8 	bl	80171a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80171f0:	b003      	add	sp, #12
 80171f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80171f6:	bf00      	nop
 80171f8:	2000bacc 	.word	0x2000bacc
 80171fc:	2000bace 	.word	0x2000bace

08017200 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8017200:	4b03      	ldr	r3, [pc, #12]	; (8017210 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8017202:	6818      	ldr	r0, [r3, #0]
 8017204:	b110      	cbz	r0, 801720c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8017206:	6803      	ldr	r3, [r0, #0]
 8017208:	699b      	ldr	r3, [r3, #24]
 801720a:	4718      	bx	r3
 801720c:	4770      	bx	lr
 801720e:	bf00      	nop
 8017210:	2000bb54 	.word	0x2000bb54

08017214 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8017214:	4770      	bx	lr
	...

08017218 <_ZN8touchgfx11Application4drawEv>:
 8017218:	4b09      	ldr	r3, [pc, #36]	; (8017240 <_ZN8touchgfx11Application4drawEv+0x28>)
 801721a:	b507      	push	{r0, r1, r2, lr}
 801721c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017220:	2100      	movs	r1, #0
 8017222:	4b08      	ldr	r3, [pc, #32]	; (8017244 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8017224:	9100      	str	r1, [sp, #0]
 8017226:	4669      	mov	r1, sp
 8017228:	f9b3 3000 	ldrsh.w	r3, [r3]
 801722c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8017230:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017234:	6803      	ldr	r3, [r0, #0]
 8017236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017238:	4798      	blx	r3
 801723a:	b003      	add	sp, #12
 801723c:	f85d fb04 	ldr.w	pc, [sp], #4
 8017240:	2000bacc 	.word	0x2000bacc
 8017244:	2000bace 	.word	0x2000bace

08017248 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8017248:	4b03      	ldr	r3, [pc, #12]	; (8017258 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801724a:	6818      	ldr	r0, [r3, #0]
 801724c:	b110      	cbz	r0, 8017254 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801724e:	6803      	ldr	r3, [r0, #0]
 8017250:	69db      	ldr	r3, [r3, #28]
 8017252:	4718      	bx	r3
 8017254:	4770      	bx	lr
 8017256:	bf00      	nop
 8017258:	2000bb54 	.word	0x2000bb54

0801725c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801725c:	4b03      	ldr	r3, [pc, #12]	; (801726c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801725e:	6818      	ldr	r0, [r3, #0]
 8017260:	b110      	cbz	r0, 8017268 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8017262:	6803      	ldr	r3, [r0, #0]
 8017264:	6a1b      	ldr	r3, [r3, #32]
 8017266:	4718      	bx	r3
 8017268:	4770      	bx	lr
 801726a:	bf00      	nop
 801726c:	2000bb54 	.word	0x2000bb54

08017270 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8017270:	4b03      	ldr	r3, [pc, #12]	; (8017280 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8017272:	6818      	ldr	r0, [r3, #0]
 8017274:	b110      	cbz	r0, 801727c <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8017276:	6803      	ldr	r3, [r0, #0]
 8017278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801727a:	4718      	bx	r3
 801727c:	4770      	bx	lr
 801727e:	bf00      	nop
 8017280:	2000bb54 	.word	0x2000bb54

08017284 <_ZN8touchgfx11Application15handleTickEventEv>:
 8017284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017288:	4d3a      	ldr	r5, [pc, #232]	; (8017374 <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 801728a:	4604      	mov	r4, r0
 801728c:	6828      	ldr	r0, [r5, #0]
 801728e:	b140      	cbz	r0, 80172a2 <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 8017290:	7a03      	ldrb	r3, [r0, #8]
 8017292:	b933      	cbnz	r3, 80172a2 <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 8017294:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 8017298:	6803      	ldr	r3, [r0, #0]
 801729a:	689b      	ldr	r3, [r3, #8]
 801729c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80172a0:	4718      	bx	r3
 80172a2:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 80172a6:	b97b      	cbnz	r3, 80172c8 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 80172a8:	b170      	cbz	r0, 80172c8 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 80172aa:	7a03      	ldrb	r3, [r0, #8]
 80172ac:	b163      	cbz	r3, 80172c8 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 80172ae:	4b32      	ldr	r3, [pc, #200]	; (8017378 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 80172b0:	6818      	ldr	r0, [r3, #0]
 80172b2:	b110      	cbz	r0, 80172ba <_ZN8touchgfx11Application15handleTickEventEv+0x36>
 80172b4:	6803      	ldr	r3, [r0, #0]
 80172b6:	691b      	ldr	r3, [r3, #16]
 80172b8:	4798      	blx	r3
 80172ba:	6828      	ldr	r0, [r5, #0]
 80172bc:	6803      	ldr	r3, [r0, #0]
 80172be:	68db      	ldr	r3, [r3, #12]
 80172c0:	4798      	blx	r3
 80172c2:	2301      	movs	r3, #1
 80172c4:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 80172c8:	2500      	movs	r5, #0
 80172ca:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 80172ce:	42a8      	cmp	r0, r5
 80172d0:	dd0c      	ble.n	80172ec <_ZN8touchgfx11Application15handleTickEventEv+0x68>
 80172d2:	1963      	adds	r3, r4, r5
 80172d4:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 80172d8:	b132      	cbz	r2, 80172e8 <_ZN8touchgfx11Application15handleTickEventEv+0x64>
 80172da:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 80172de:	4413      	add	r3, r2
 80172e0:	6858      	ldr	r0, [r3, #4]
 80172e2:	6803      	ldr	r3, [r0, #0]
 80172e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80172e6:	4798      	blx	r3
 80172e8:	3501      	adds	r5, #1
 80172ea:	e7ee      	b.n	80172ca <_ZN8touchgfx11Application15handleTickEventEv+0x46>
 80172ec:	f5c4 467f 	rsb	r6, r4, #65280	; 0xff00
 80172f0:	3801      	subs	r0, #1
 80172f2:	f04f 0c00 	mov.w	ip, #0
 80172f6:	3678      	adds	r6, #120	; 0x78
 80172f8:	1c43      	adds	r3, r0, #1
 80172fa:	d033      	beq.n	8017364 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 80172fc:	1823      	adds	r3, r4, r0
 80172fe:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8017302:	bb6a      	cbnz	r2, 8017360 <_ZN8touchgfx11Application15handleTickEventEv+0xdc>
 8017304:	b281      	uxth	r1, r0
 8017306:	1d25      	adds	r5, r4, #4
 8017308:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 801730c:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8017310:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 8017314:	4293      	cmp	r3, r2
 8017316:	dc0a      	bgt.n	801732e <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 8017318:	f101 0288 	add.w	r2, r1, #136	; 0x88
 801731c:	4422      	add	r2, r4
 801731e:	18b1      	adds	r1, r6, r2
 8017320:	b289      	uxth	r1, r1
 8017322:	428b      	cmp	r3, r1
 8017324:	d919      	bls.n	801735a <_ZN8touchgfx11Application15handleTickEventEv+0xd6>
 8017326:	7851      	ldrb	r1, [r2, #1]
 8017328:	f802 1b01 	strb.w	r1, [r2], #1
 801732c:	e7f7      	b.n	801731e <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 801732e:	682f      	ldr	r7, [r5, #0]
 8017330:	f105 0804 	add.w	r8, r5, #4
 8017334:	45b9      	cmp	r9, r7
 8017336:	d10d      	bne.n	8017354 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>
 8017338:	4696      	mov	lr, r2
 801733a:	f1be 0f1e 	cmp.w	lr, #30
 801733e:	dc06      	bgt.n	801734e <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 8017340:	f10e 0e01 	add.w	lr, lr, #1
 8017344:	686f      	ldr	r7, [r5, #4]
 8017346:	4573      	cmp	r3, lr
 8017348:	f845 7b04 	str.w	r7, [r5], #4
 801734c:	dcf5      	bgt.n	801733a <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 801734e:	3b01      	subs	r3, #1
 8017350:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 8017354:	3201      	adds	r2, #1
 8017356:	4645      	mov	r5, r8
 8017358:	e7da      	b.n	8017310 <_ZN8touchgfx11Application15handleTickEventEv+0x8c>
 801735a:	4423      	add	r3, r4
 801735c:	f883 c088 	strb.w	ip, [r3, #136]	; 0x88
 8017360:	3801      	subs	r0, #1
 8017362:	e7c9      	b.n	80172f8 <_ZN8touchgfx11Application15handleTickEventEv+0x74>
 8017364:	4b04      	ldr	r3, [pc, #16]	; (8017378 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 8017366:	6818      	ldr	r0, [r3, #0]
 8017368:	b110      	cbz	r0, 8017370 <_ZN8touchgfx11Application15handleTickEventEv+0xec>
 801736a:	6803      	ldr	r3, [r0, #0]
 801736c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801736e:	e795      	b.n	801729c <_ZN8touchgfx11Application15handleTickEventEv+0x18>
 8017370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017374:	2000bb58 	.word	0x2000bb58
 8017378:	2000bb54 	.word	0x2000bb54

0801737c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801737c:	b570      	push	{r4, r5, r6, lr}
 801737e:	4606      	mov	r6, r0
 8017380:	460c      	mov	r4, r1
 8017382:	b929      	cbnz	r1, 8017390 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 8017384:	4b0c      	ldr	r3, [pc, #48]	; (80173b8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 8017386:	2164      	movs	r1, #100	; 0x64
 8017388:	4a0c      	ldr	r2, [pc, #48]	; (80173bc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801738a:	480d      	ldr	r0, [pc, #52]	; (80173c0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801738c:	f00c f854 	bl	8023438 <__assert_func>
 8017390:	2300      	movs	r3, #0
 8017392:	4d0c      	ldr	r5, [pc, #48]	; (80173c4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 8017394:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8017398:	6828      	ldr	r0, [r5, #0]
 801739a:	b110      	cbz	r0, 80173a2 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 801739c:	6803      	ldr	r3, [r0, #0]
 801739e:	695b      	ldr	r3, [r3, #20]
 80173a0:	4798      	blx	r3
 80173a2:	602c      	str	r4, [r5, #0]
 80173a4:	4620      	mov	r0, r4
 80173a6:	6823      	ldr	r3, [r4, #0]
 80173a8:	68db      	ldr	r3, [r3, #12]
 80173aa:	4798      	blx	r3
 80173ac:	6833      	ldr	r3, [r6, #0]
 80173ae:	4630      	mov	r0, r6
 80173b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80173b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80173b6:	4718      	bx	r3
 80173b8:	08026aa0 	.word	0x08026aa0
 80173bc:	08026b68 	.word	0x08026b68
 80173c0:	08026aaa 	.word	0x08026aaa
 80173c4:	2000bb54 	.word	0x2000bb54

080173c8 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 80173c8:	b510      	push	{r4, lr}
 80173ca:	f9b1 4000 	ldrsh.w	r4, [r1]
 80173ce:	888a      	ldrh	r2, [r1, #4]
 80173d0:	f9b0 3000 	ldrsh.w	r3, [r0]
 80173d4:	4422      	add	r2, r4
 80173d6:	b212      	sxth	r2, r2
 80173d8:	4293      	cmp	r3, r2
 80173da:	da15      	bge.n	8017408 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80173dc:	8882      	ldrh	r2, [r0, #4]
 80173de:	4413      	add	r3, r2
 80173e0:	b21b      	sxth	r3, r3
 80173e2:	429c      	cmp	r4, r3
 80173e4:	da10      	bge.n	8017408 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80173e6:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80173ea:	88c9      	ldrh	r1, [r1, #6]
 80173ec:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80173f0:	4419      	add	r1, r3
 80173f2:	b209      	sxth	r1, r1
 80173f4:	428a      	cmp	r2, r1
 80173f6:	da07      	bge.n	8017408 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80173f8:	88c0      	ldrh	r0, [r0, #6]
 80173fa:	4410      	add	r0, r2
 80173fc:	b200      	sxth	r0, r0
 80173fe:	4283      	cmp	r3, r0
 8017400:	bfac      	ite	ge
 8017402:	2000      	movge	r0, #0
 8017404:	2001      	movlt	r0, #1
 8017406:	bd10      	pop	{r4, pc}
 8017408:	2000      	movs	r0, #0
 801740a:	e7fc      	b.n	8017406 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801740c <_ZNK8touchgfx4Rect8includesERKS0_>:
 801740c:	b570      	push	{r4, r5, r6, lr}
 801740e:	f9b1 4000 	ldrsh.w	r4, [r1]
 8017412:	f9b0 5000 	ldrsh.w	r5, [r0]
 8017416:	42ac      	cmp	r4, r5
 8017418:	db18      	blt.n	801744c <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801741a:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801741e:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8017422:	429a      	cmp	r2, r3
 8017424:	db12      	blt.n	801744c <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8017426:	8886      	ldrh	r6, [r0, #4]
 8017428:	4435      	add	r5, r6
 801742a:	888e      	ldrh	r6, [r1, #4]
 801742c:	4434      	add	r4, r6
 801742e:	b22d      	sxth	r5, r5
 8017430:	b224      	sxth	r4, r4
 8017432:	42a5      	cmp	r5, r4
 8017434:	db0a      	blt.n	801744c <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8017436:	88c0      	ldrh	r0, [r0, #6]
 8017438:	4418      	add	r0, r3
 801743a:	88cb      	ldrh	r3, [r1, #6]
 801743c:	441a      	add	r2, r3
 801743e:	b200      	sxth	r0, r0
 8017440:	b212      	sxth	r2, r2
 8017442:	4290      	cmp	r0, r2
 8017444:	bfb4      	ite	lt
 8017446:	2000      	movlt	r0, #0
 8017448:	2001      	movge	r0, #1
 801744a:	bd70      	pop	{r4, r5, r6, pc}
 801744c:	2000      	movs	r0, #0
 801744e:	e7fc      	b.n	801744a <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

08017450 <_ZN8touchgfx11Application11getInstanceEv>:
 8017450:	4b01      	ldr	r3, [pc, #4]	; (8017458 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8017452:	6818      	ldr	r0, [r3, #0]
 8017454:	4770      	bx	lr
 8017456:	bf00      	nop
 8017458:	2000bb64 	.word	0x2000bb64

0801745c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801745c:	2300      	movs	r3, #0
 801745e:	f100 0288 	add.w	r2, r0, #136	; 0x88
 8017462:	30a8      	adds	r0, #168	; 0xa8
 8017464:	f820 3c24 	strh.w	r3, [r0, #-36]
 8017468:	f802 3b01 	strb.w	r3, [r2], #1
 801746c:	4282      	cmp	r2, r0
 801746e:	d1fb      	bne.n	8017468 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8017470:	4770      	bx	lr

08017472 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8017472:	4603      	mov	r3, r0
 8017474:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8017478:	2200      	movs	r2, #0
 801747a:	801a      	strh	r2, [r3, #0]
 801747c:	3308      	adds	r3, #8
 801747e:	f823 2c06 	strh.w	r2, [r3, #-6]
 8017482:	f823 2c04 	strh.w	r2, [r3, #-4]
 8017486:	f823 2c02 	strh.w	r2, [r3, #-2]
 801748a:	428b      	cmp	r3, r1
 801748c:	d1f5      	bne.n	801747a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801748e:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8017492:	4770      	bx	lr

08017494 <_ZN8touchgfx11ApplicationC1Ev>:
 8017494:	b570      	push	{r4, r5, r6, lr}
 8017496:	4b16      	ldr	r3, [pc, #88]	; (80174f0 <_ZN8touchgfx11ApplicationC1Ev+0x5c>)
 8017498:	2500      	movs	r5, #0
 801749a:	4604      	mov	r4, r0
 801749c:	30a8      	adds	r0, #168	; 0xa8
 801749e:	f840 3ca8 	str.w	r3, [r0, #-168]
 80174a2:	f820 5c24 	strh.w	r5, [r0, #-36]
 80174a6:	f7ff ffe4 	bl	8017472 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80174aa:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 80174ae:	f7ff ffe0 	bl	8017472 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80174b2:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
 80174b6:	f884 512d 	strb.w	r5, [r4, #301]	; 0x12d
 80174ba:	490e      	ldr	r1, [pc, #56]	; (80174f4 <_ZN8touchgfx11ApplicationC1Ev+0x60>)
 80174bc:	480e      	ldr	r0, [pc, #56]	; (80174f8 <_ZN8touchgfx11ApplicationC1Ev+0x64>)
 80174be:	f00a faa1 	bl	8021a04 <CRC_Lock>
 80174c2:	4e0e      	ldr	r6, [pc, #56]	; (80174fc <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 80174c4:	4b0e      	ldr	r3, [pc, #56]	; (8017500 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 80174c6:	b158      	cbz	r0, 80174e0 <_ZN8touchgfx11ApplicationC1Ev+0x4c>
 80174c8:	801d      	strh	r5, [r3, #0]
 80174ca:	2300      	movs	r3, #0
 80174cc:	4a0d      	ldr	r2, [pc, #52]	; (8017504 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 80174ce:	4620      	mov	r0, r4
 80174d0:	6013      	str	r3, [r2, #0]
 80174d2:	4a0d      	ldr	r2, [pc, #52]	; (8017508 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 80174d4:	6033      	str	r3, [r6, #0]
 80174d6:	6013      	str	r3, [r2, #0]
 80174d8:	f7ff ffc0 	bl	801745c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 80174dc:	4620      	mov	r0, r4
 80174de:	bd70      	pop	{r4, r5, r6, pc}
 80174e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80174e4:	2002      	movs	r0, #2
 80174e6:	801a      	strh	r2, [r3, #0]
 80174e8:	6030      	str	r0, [r6, #0]
 80174ea:	f000 ff81 	bl	80183f0 <_ZN8touchgfx6Screen4drawEv>
 80174ee:	e7ec      	b.n	80174ca <_ZN8touchgfx11ApplicationC1Ev+0x36>
 80174f0:	08026b34 	.word	0x08026b34
 80174f4:	b5e8b5cd 	.word	0xb5e8b5cd
 80174f8:	f407a5c2 	.word	0xf407a5c2
 80174fc:	2000bb54 	.word	0x2000bb54
 8017500:	20000040 	.word	0x20000040
 8017504:	2000bb64 	.word	0x2000bb64
 8017508:	2000bb58 	.word	0x2000bb58

0801750c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801750c:	2300      	movs	r3, #0
 801750e:	8003      	strh	r3, [r0, #0]
 8017510:	8043      	strh	r3, [r0, #2]
 8017512:	8083      	strh	r3, [r0, #4]
 8017514:	80c3      	strh	r3, [r0, #6]
 8017516:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 801751a:	4293      	cmp	r3, r2
 801751c:	b530      	push	{r4, r5, lr}
 801751e:	d912      	bls.n	8017546 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 8017520:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 8017524:	3b01      	subs	r3, #1
 8017526:	6825      	ldr	r5, [r4, #0]
 8017528:	b29b      	uxth	r3, r3
 801752a:	6005      	str	r5, [r0, #0]
 801752c:	4293      	cmp	r3, r2
 801752e:	6865      	ldr	r5, [r4, #4]
 8017530:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 8017534:	6045      	str	r5, [r0, #4]
 8017536:	d906      	bls.n	8017546 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 8017538:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801753c:	681d      	ldr	r5, [r3, #0]
 801753e:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 8017542:	685d      	ldr	r5, [r3, #4]
 8017544:	6065      	str	r5, [r4, #4]
 8017546:	bd30      	pop	{r4, r5, pc}

08017548 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 8017548:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801754a:	466b      	mov	r3, sp
 801754c:	4604      	mov	r4, r0
 801754e:	e883 0006 	stmia.w	r3, {r1, r2}
 8017552:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 8017556:	2a07      	cmp	r2, #7
 8017558:	d906      	bls.n	8017568 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801755a:	4b09      	ldr	r3, [pc, #36]	; (8017580 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 801755c:	f44f 7102 	mov.w	r1, #520	; 0x208
 8017560:	4a08      	ldr	r2, [pc, #32]	; (8017584 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 8017562:	4809      	ldr	r0, [pc, #36]	; (8017588 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 8017564:	f00b ff68 	bl	8023438 <__assert_func>
 8017568:	1c51      	adds	r1, r2, #1
 801756a:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801756e:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8017572:	cb03      	ldmia	r3!, {r0, r1}
 8017574:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 8017578:	6069      	str	r1, [r5, #4]
 801757a:	b003      	add	sp, #12
 801757c:	bd30      	pop	{r4, r5, pc}
 801757e:	bf00      	nop
 8017580:	08026ad4 	.word	0x08026ad4
 8017584:	08026bac 	.word	0x08026bac
 8017588:	08026b03 	.word	0x08026b03

0801758c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801758c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017590:	b089      	sub	sp, #36	; 0x24
 8017592:	4606      	mov	r6, r0
 8017594:	466c      	mov	r4, sp
 8017596:	4620      	mov	r0, r4
 8017598:	e884 0006 	stmia.w	r4, {r1, r2}
 801759c:	f7fc ff78 	bl	8014490 <_ZNK8touchgfx4Rect7isEmptyEv>
 80175a0:	bbb0      	cbnz	r0, 8017610 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 80175a2:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 80175a6:	b1fd      	cbz	r5, 80175e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 80175a8:	3d01      	subs	r5, #1
 80175aa:	af04      	add	r7, sp, #16
 80175ac:	f04f 090a 	mov.w	r9, #10
 80175b0:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 80175b4:	ab02      	add	r3, sp, #8
 80175b6:	fa1f f885 	uxth.w	r8, r5
 80175ba:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80175be:	6851      	ldr	r1, [r2, #4]
 80175c0:	c303      	stmia	r3!, {r0, r1}
 80175c2:	4621      	mov	r1, r4
 80175c4:	a802      	add	r0, sp, #8
 80175c6:	f7ff ff21 	bl	801740c <_ZNK8touchgfx4Rect8includesERKS0_>
 80175ca:	bb08      	cbnz	r0, 8017610 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 80175cc:	a902      	add	r1, sp, #8
 80175ce:	4620      	mov	r0, r4
 80175d0:	f7ff ff1c 	bl	801740c <_ZNK8touchgfx4Rect8includesERKS0_>
 80175d4:	b1f8      	cbz	r0, 8017616 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 80175d6:	4642      	mov	r2, r8
 80175d8:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 80175dc:	a806      	add	r0, sp, #24
 80175de:	f7ff ff95 	bl	801750c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80175e2:	f115 35ff 	adds.w	r5, r5, #4294967295
 80175e6:	d2e3      	bcs.n	80175b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 80175e8:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 80175ec:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 80175f0:	2b08      	cmp	r3, #8
 80175f2:	d108      	bne.n	8017606 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 80175f4:	4629      	mov	r1, r5
 80175f6:	a806      	add	r0, sp, #24
 80175f8:	2207      	movs	r2, #7
 80175fa:	f7ff ff87 	bl	801750c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80175fe:	a906      	add	r1, sp, #24
 8017600:	4620      	mov	r0, r4
 8017602:	f7fe f940 	bl	8015886 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8017606:	4628      	mov	r0, r5
 8017608:	e894 0006 	ldmia.w	r4, {r1, r2}
 801760c:	f7ff ff9c 	bl	8017548 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8017610:	b009      	add	sp, #36	; 0x24
 8017612:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017616:	4621      	mov	r1, r4
 8017618:	a802      	add	r0, sp, #8
 801761a:	f7ff fed5 	bl	80173c8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801761e:	b150      	cbz	r0, 8017636 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 8017620:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 8017624:	a806      	add	r0, sp, #24
 8017626:	4642      	mov	r2, r8
 8017628:	f7ff ff70 	bl	801750c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801762c:	a902      	add	r1, sp, #8
 801762e:	4620      	mov	r0, r4
 8017630:	f7fe f929 	bl	8015886 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8017634:	e7d5      	b.n	80175e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8017636:	e894 0003 	ldmia.w	r4, {r0, r1}
 801763a:	e887 0003 	stmia.w	r7, {r0, r1}
 801763e:	a902      	add	r1, sp, #8
 8017640:	4638      	mov	r0, r7
 8017642:	f7fe f920 	bl	8015886 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8017646:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801764a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801764e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8017652:	fb13 f302 	smulbb	r3, r3, r2
 8017656:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801765a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801765e:	fb11 f102 	smulbb	r1, r1, r2
 8017662:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8017666:	fb09 f303 	mul.w	r3, r9, r3
 801766a:	fb12 1100 	smlabb	r1, r2, r0, r1
 801766e:	220b      	movs	r2, #11
 8017670:	434a      	muls	r2, r1
 8017672:	4293      	cmp	r3, r2
 8017674:	dab5      	bge.n	80175e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8017676:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801767a:	a806      	add	r0, sp, #24
 801767c:	4642      	mov	r2, r8
 801767e:	f7ff ff45 	bl	801750c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017682:	e897 0003 	ldmia.w	r7, {r0, r1}
 8017686:	e884 0003 	stmia.w	r4, {r0, r1}
 801768a:	e7aa      	b.n	80175e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

0801768c <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801768c:	4b1d      	ldr	r3, [pc, #116]	; (8017704 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801768e:	b530      	push	{r4, r5, lr}
 8017690:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017694:	b085      	sub	sp, #20
 8017696:	4b1c      	ldr	r3, [pc, #112]	; (8017708 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 8017698:	460c      	mov	r4, r1
 801769a:	2100      	movs	r1, #0
 801769c:	4605      	mov	r5, r0
 801769e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80176a2:	6820      	ldr	r0, [r4, #0]
 80176a4:	9100      	str	r1, [sp, #0]
 80176a6:	f8ad 3006 	strh.w	r3, [sp, #6]
 80176aa:	ab02      	add	r3, sp, #8
 80176ac:	6861      	ldr	r1, [r4, #4]
 80176ae:	f8ad 2004 	strh.w	r2, [sp, #4]
 80176b2:	c303      	stmia	r3!, {r0, r1}
 80176b4:	4669      	mov	r1, sp
 80176b6:	a802      	add	r0, sp, #8
 80176b8:	f7fc fea6 	bl	8014408 <_ZN8touchgfx4RectaNERKS0_>
 80176bc:	ab02      	add	r3, sp, #8
 80176be:	cb03      	ldmia	r3!, {r0, r1}
 80176c0:	4b12      	ldr	r3, [pc, #72]	; (801770c <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 80176c2:	6020      	str	r0, [r4, #0]
 80176c4:	6818      	ldr	r0, [r3, #0]
 80176c6:	6061      	str	r1, [r4, #4]
 80176c8:	b138      	cbz	r0, 80176da <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 80176ca:	f895 312c 	ldrb.w	r3, [r5, #300]	; 0x12c
 80176ce:	b133      	cbz	r3, 80176de <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 80176d0:	6821      	ldr	r1, [r4, #0]
 80176d2:	4628      	mov	r0, r5
 80176d4:	6862      	ldr	r2, [r4, #4]
 80176d6:	f7ff ff59 	bl	801758c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80176da:	b005      	add	sp, #20
 80176dc:	bd30      	pop	{r4, r5, pc}
 80176de:	6803      	ldr	r3, [r0, #0]
 80176e0:	4621      	mov	r1, r4
 80176e2:	689b      	ldr	r3, [r3, #8]
 80176e4:	4798      	blx	r3
 80176e6:	4b0a      	ldr	r3, [pc, #40]	; (8017710 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 80176e8:	6818      	ldr	r0, [r3, #0]
 80176ea:	b118      	cbz	r0, 80176f4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 80176ec:	6803      	ldr	r3, [r0, #0]
 80176ee:	4621      	mov	r1, r4
 80176f0:	689b      	ldr	r3, [r3, #8]
 80176f2:	4798      	blx	r3
 80176f4:	4b07      	ldr	r3, [pc, #28]	; (8017714 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 80176f6:	4621      	mov	r1, r4
 80176f8:	6818      	ldr	r0, [r3, #0]
 80176fa:	6803      	ldr	r3, [r0, #0]
 80176fc:	695b      	ldr	r3, [r3, #20]
 80176fe:	4798      	blx	r3
 8017700:	e7eb      	b.n	80176da <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 8017702:	bf00      	nop
 8017704:	2000bacc 	.word	0x2000bacc
 8017708:	2000bace 	.word	0x2000bace
 801770c:	2000bb54 	.word	0x2000bb54
 8017710:	2000bb50 	.word	0x2000bb50
 8017714:	2000bad8 	.word	0x2000bad8

08017718 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 8017718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801771c:	4604      	mov	r4, r0
 801771e:	b09b      	sub	sp, #108	; 0x6c
 8017720:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
 8017724:	b129      	cbz	r1, 8017732 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 8017726:	2300      	movs	r3, #0
 8017728:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801772c:	b01b      	add	sp, #108	; 0x6c
 801772e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017732:	4baf      	ldr	r3, [pc, #700]	; (80179f0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 8017734:	681b      	ldr	r3, [r3, #0]
 8017736:	b33b      	cbz	r3, 8017788 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 8017738:	4dae      	ldr	r5, [pc, #696]	; (80179f4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 801773a:	4628      	mov	r0, r5
 801773c:	f7fc fea8 	bl	8014490 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017740:	4606      	mov	r6, r0
 8017742:	bb08      	cbnz	r0, 8017788 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 8017744:	4628      	mov	r0, r5
 8017746:	f7ff fce9 	bl	801711c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801774a:	6829      	ldr	r1, [r5, #0]
 801774c:	686a      	ldr	r2, [r5, #4]
 801774e:	4620      	mov	r0, r4
 8017750:	f7ff ff1c 	bl	801758c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8017754:	802e      	strh	r6, [r5, #0]
 8017756:	806e      	strh	r6, [r5, #2]
 8017758:	80ae      	strh	r6, [r5, #4]
 801775a:	80ee      	strh	r6, [r5, #6]
 801775c:	4fa6      	ldr	r7, [pc, #664]	; (80179f8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 801775e:	a809      	add	r0, sp, #36	; 0x24
 8017760:	f7ff fe87 	bl	8017472 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8017764:	883d      	ldrh	r5, [r7, #0]
 8017766:	462e      	mov	r6, r5
 8017768:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801776c:	42b3      	cmp	r3, r6
 801776e:	d910      	bls.n	8017792 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7a>
 8017770:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8017774:	3601      	adds	r6, #1
 8017776:	a809      	add	r0, sp, #36	; 0x24
 8017778:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801777c:	b2b6      	uxth	r6, r6
 801777e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8017782:	f7ff fee1 	bl	8017548 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8017786:	e7ef      	b.n	8017768 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x50>
 8017788:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801778c:	2b00      	cmp	r3, #0
 801778e:	d1e5      	bne.n	801775c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x44>
 8017790:	e7cc      	b.n	801772c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8017792:	462e      	mov	r6, r5
 8017794:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 8017798:	42b3      	cmp	r3, r6
 801779a:	d90b      	bls.n	80177b4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 801779c:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 80177a0:	3601      	adds	r6, #1
 80177a2:	4620      	mov	r0, r4
 80177a4:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 80177a8:	b2b6      	uxth	r6, r6
 80177aa:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 80177ae:	f7ff feed 	bl	801758c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80177b2:	e7ef      	b.n	8017794 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7c>
 80177b4:	4e91      	ldr	r6, [pc, #580]	; (80179fc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 80177b6:	6833      	ldr	r3, [r6, #0]
 80177b8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80177bc:	2b01      	cmp	r3, #1
 80177be:	f040 8092 	bne.w	80178e6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ce>
 80177c2:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 80177c6:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 80177ca:	f04f 0900 	mov.w	r9, #0
 80177ce:	33aa      	adds	r3, #170	; 0xaa
 80177d0:	42a8      	cmp	r0, r5
 80177d2:	f103 0308 	add.w	r3, r3, #8
 80177d6:	dd0a      	ble.n	80177ee <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xd6>
 80177d8:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 80177dc:	3501      	adds	r5, #1
 80177de:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 80177e2:	440a      	add	r2, r1
 80177e4:	b212      	sxth	r2, r2
 80177e6:	4591      	cmp	r9, r2
 80177e8:	bfb8      	it	lt
 80177ea:	4691      	movlt	r9, r2
 80177ec:	e7f0      	b.n	80177d0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xb8>
 80177ee:	4b84      	ldr	r3, [pc, #528]	; (8017a00 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 80177f0:	f8df 8214 	ldr.w	r8, [pc, #532]	; 8017a08 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>
 80177f4:	881d      	ldrh	r5, [r3, #0]
 80177f6:	2300      	movs	r3, #0
 80177f8:	2d0f      	cmp	r5, #15
 80177fa:	bf8c      	ite	hi
 80177fc:	08ed      	lsrhi	r5, r5, #3
 80177fe:	2501      	movls	r5, #1
 8017800:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8017804:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8017808:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 801780c:	6830      	ldr	r0, [r6, #0]
 801780e:	440b      	add	r3, r1
 8017810:	6802      	ldr	r2, [r0, #0]
 8017812:	b21b      	sxth	r3, r3
 8017814:	4599      	cmp	r9, r3
 8017816:	dd49      	ble.n	80178ac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x194>
 8017818:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 801781c:	4798      	blx	r3
 801781e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8017822:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8017826:	4413      	add	r3, r2
 8017828:	b21b      	sxth	r3, r3
 801782a:	195a      	adds	r2, r3, r5
 801782c:	4290      	cmp	r0, r2
 801782e:	da07      	bge.n	8017840 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 8017830:	4581      	cmp	r9, r0
 8017832:	dd05      	ble.n	8017840 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 8017834:	4298      	cmp	r0, r3
 8017836:	da33      	bge.n	80178a0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 8017838:	2b00      	cmp	r3, #0
 801783a:	dd31      	ble.n	80178a0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 801783c:	4648      	mov	r0, r9
 801783e:	e004      	b.n	801784a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x132>
 8017840:	4298      	cmp	r0, r3
 8017842:	dbfb      	blt.n	801783c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x124>
 8017844:	4548      	cmp	r0, r9
 8017846:	bfa8      	it	ge
 8017848:	4648      	movge	r0, r9
 801784a:	f9b8 2000 	ldrsh.w	r2, [r8]
 801784e:	2100      	movs	r1, #0
 8017850:	1ac0      	subs	r0, r0, r3
 8017852:	f8b7 a000 	ldrh.w	sl, [r7]
 8017856:	f8ad 1014 	strh.w	r1, [sp, #20]
 801785a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801785e:	f8ad 2018 	strh.w	r2, [sp, #24]
 8017862:	f8ad 001a 	strh.w	r0, [sp, #26]
 8017866:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801786a:	4553      	cmp	r3, sl
 801786c:	d9ca      	bls.n	8017804 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 801786e:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 8017872:	ab07      	add	r3, sp, #28
 8017874:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8017878:	6851      	ldr	r1, [r2, #4]
 801787a:	c303      	stmia	r3!, {r0, r1}
 801787c:	a807      	add	r0, sp, #28
 801787e:	a905      	add	r1, sp, #20
 8017880:	f7fc fdc2 	bl	8014408 <_ZN8touchgfx4RectaNERKS0_>
 8017884:	a807      	add	r0, sp, #28
 8017886:	f7fc fe03 	bl	8014490 <_ZNK8touchgfx4Rect7isEmptyEv>
 801788a:	b920      	cbnz	r0, 8017896 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x17e>
 801788c:	6823      	ldr	r3, [r4, #0]
 801788e:	a907      	add	r1, sp, #28
 8017890:	4620      	mov	r0, r4
 8017892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017894:	4798      	blx	r3
 8017896:	f10a 0a01 	add.w	sl, sl, #1
 801789a:	fa1f fa8a 	uxth.w	sl, sl
 801789e:	e7e2      	b.n	8017866 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14e>
 80178a0:	6830      	ldr	r0, [r6, #0]
 80178a2:	2101      	movs	r1, #1
 80178a4:	6803      	ldr	r3, [r0, #0]
 80178a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80178a8:	4798      	blx	r3
 80178aa:	e7ab      	b.n	8017804 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 80178ac:	69d3      	ldr	r3, [r2, #28]
 80178ae:	4798      	blx	r3
 80178b0:	4b54      	ldr	r3, [pc, #336]	; (8017a04 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 80178b2:	781b      	ldrb	r3, [r3, #0]
 80178b4:	2b00      	cmp	r3, #0
 80178b6:	f43f af39 	beq.w	801772c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 80178ba:	2300      	movs	r3, #0
 80178bc:	883d      	ldrh	r5, [r7, #0]
 80178be:	34ea      	adds	r4, #234	; 0xea
 80178c0:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 80178c4:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 80178c8:	42ab      	cmp	r3, r5
 80178ca:	f67f af2f 	bls.w	801772c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 80178ce:	ab1a      	add	r3, sp, #104	; 0x68
 80178d0:	4620      	mov	r0, r4
 80178d2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80178d6:	3501      	adds	r5, #1
 80178d8:	3b44      	subs	r3, #68	; 0x44
 80178da:	b2ad      	uxth	r5, r5
 80178dc:	e893 0006 	ldmia.w	r3, {r1, r2}
 80178e0:	f7ff fe32 	bl	8017548 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 80178e4:	e7ee      	b.n	80178c4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ac>
 80178e6:	2b02      	cmp	r3, #2
 80178e8:	d16a      	bne.n	80179c0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 80178ea:	f8df a120 	ldr.w	sl, [pc, #288]	; 8017a0c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 80178ee:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80178f2:	42ab      	cmp	r3, r5
 80178f4:	d9dc      	bls.n	80178b0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 80178f6:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 80178fa:	ab03      	add	r3, sp, #12
 80178fc:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8017900:	6851      	ldr	r1, [r2, #4]
 8017902:	c303      	stmia	r3!, {r0, r1}
 8017904:	f89a 3000 	ldrb.w	r3, [sl]
 8017908:	2b01      	cmp	r3, #1
 801790a:	d102      	bne.n	8017912 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1fa>
 801790c:	a803      	add	r0, sp, #12
 801790e:	f7ff fc5f 	bl	80171d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017912:	a803      	add	r0, sp, #12
 8017914:	f7fc fdbc 	bl	8014490 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017918:	2800      	cmp	r0, #0
 801791a:	d14a      	bne.n	80179b2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x29a>
 801791c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8017920:	f10d 0914 	add.w	r9, sp, #20
 8017924:	f10d 081c 	add.w	r8, sp, #28
 8017928:	f8ad 001a 	strh.w	r0, [sp, #26]
 801792c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017930:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8017934:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017938:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801793c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017940:	f8bd b012 	ldrh.w	fp, [sp, #18]
 8017944:	f8bd c00e 	ldrh.w	ip, [sp, #14]
 8017948:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801794c:	44dc      	add	ip, fp
 801794e:	6830      	ldr	r0, [r6, #0]
 8017950:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8017954:	ebac 0c02 	sub.w	ip, ip, r2
 8017958:	f8d0 e000 	ldr.w	lr, [r0]
 801795c:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8017960:	fa1f fc8c 	uxth.w	ip, ip
 8017964:	f8cd c000 	str.w	ip, [sp]
 8017968:	f8de b078 	ldr.w	fp, [lr, #120]	; 0x78
 801796c:	47d8      	blx	fp
 801796e:	f89a 3000 	ldrb.w	r3, [sl]
 8017972:	f8ad 001a 	strh.w	r0, [sp, #26]
 8017976:	2b01      	cmp	r3, #1
 8017978:	d11e      	bne.n	80179b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a0>
 801797a:	e899 0003 	ldmia.w	r9, {r0, r1}
 801797e:	e888 0003 	stmia.w	r8, {r0, r1}
 8017982:	4640      	mov	r0, r8
 8017984:	f7ff fbca 	bl	801711c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8017988:	6823      	ldr	r3, [r4, #0]
 801798a:	4641      	mov	r1, r8
 801798c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801798e:	4620      	mov	r0, r4
 8017990:	4798      	blx	r3
 8017992:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8017996:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801799a:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 801799e:	4413      	add	r3, r2
 80179a0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80179a4:	440a      	add	r2, r1
 80179a6:	b21b      	sxth	r3, r3
 80179a8:	b212      	sxth	r2, r2
 80179aa:	f8ad 3016 	strh.w	r3, [sp, #22]
 80179ae:	4293      	cmp	r3, r2
 80179b0:	dbc6      	blt.n	8017940 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x228>
 80179b2:	3501      	adds	r5, #1
 80179b4:	b2ad      	uxth	r5, r5
 80179b6:	e79a      	b.n	80178ee <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d6>
 80179b8:	6823      	ldr	r3, [r4, #0]
 80179ba:	4649      	mov	r1, r9
 80179bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80179be:	e7e6      	b.n	801798e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 80179c0:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80179c4:	42ab      	cmp	r3, r5
 80179c6:	f67f af73 	bls.w	80178b0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 80179ca:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 80179ce:	ab07      	add	r3, sp, #28
 80179d0:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80179d4:	6851      	ldr	r1, [r2, #4]
 80179d6:	c303      	stmia	r3!, {r0, r1}
 80179d8:	a807      	add	r0, sp, #28
 80179da:	f7fc fd59 	bl	8014490 <_ZNK8touchgfx4Rect7isEmptyEv>
 80179de:	b920      	cbnz	r0, 80179ea <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d2>
 80179e0:	6823      	ldr	r3, [r4, #0]
 80179e2:	a907      	add	r1, sp, #28
 80179e4:	4620      	mov	r0, r4
 80179e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80179e8:	4798      	blx	r3
 80179ea:	3501      	adds	r5, #1
 80179ec:	b2ad      	uxth	r5, r5
 80179ee:	e7e7      	b.n	80179c0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 80179f0:	2000bb50 	.word	0x2000bb50
 80179f4:	2000bb5c 	.word	0x2000bb5c
 80179f8:	20000040 	.word	0x20000040
 80179fc:	2000bad8 	.word	0x2000bad8
 8017a00:	2000bace 	.word	0x2000bace
 8017a04:	2000bad6 	.word	0x2000bad6
 8017a08:	2000bacc 	.word	0x2000bacc
 8017a0c:	2000bad0 	.word	0x2000bad0

08017a10 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8017a10:	4b03      	ldr	r3, [pc, #12]	; (8017a20 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8017a12:	2200      	movs	r2, #0
 8017a14:	801a      	strh	r2, [r3, #0]
 8017a16:	805a      	strh	r2, [r3, #2]
 8017a18:	809a      	strh	r2, [r3, #4]
 8017a1a:	80da      	strh	r2, [r3, #6]
 8017a1c:	4770      	bx	lr
 8017a1e:	bf00      	nop
 8017a20:	2000bb5c 	.word	0x2000bb5c

08017a24 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
 8017a24:	2000      	movs	r0, #0
 8017a26:	4770      	bx	lr

08017a28 <_ZNK8touchgfx4Font12getGSUBTableEv>:
 8017a28:	2000      	movs	r0, #0
 8017a2a:	4770      	bx	lr

08017a2c <_ZNK8touchgfx4Font12getCharWidthEt>:
 8017a2c:	b508      	push	{r3, lr}
 8017a2e:	6803      	ldr	r3, [r0, #0]
 8017a30:	68db      	ldr	r3, [r3, #12]
 8017a32:	4798      	blx	r3
 8017a34:	b128      	cbz	r0, 8017a42 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8017a36:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8017a3a:	7a80      	ldrb	r0, [r0, #10]
 8017a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017a40:	4318      	orrs	r0, r3
 8017a42:	bd08      	pop	{r3, pc}

08017a44 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
 8017a44:	b40e      	push	{r1, r2, r3}
 8017a46:	b533      	push	{r0, r1, r4, r5, lr}
 8017a48:	ab05      	add	r3, sp, #20
 8017a4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8017a4e:	9301      	str	r3, [sp, #4]
 8017a50:	4b0a      	ldr	r3, [pc, #40]	; (8017a7c <_ZNK8touchgfx4Font14getStringWidthEPKtz+0x38>)
 8017a52:	685c      	ldr	r4, [r3, #4]
 8017a54:	1061      	asrs	r1, r4, #1
 8017a56:	07e4      	lsls	r4, r4, #31
 8017a58:	eb00 0501 	add.w	r5, r0, r1
 8017a5c:	bf46      	itte	mi
 8017a5e:	681b      	ldrmi	r3, [r3, #0]
 8017a60:	5841      	ldrmi	r1, [r0, r1]
 8017a62:	681c      	ldrpl	r4, [r3, #0]
 8017a64:	4628      	mov	r0, r5
 8017a66:	bf48      	it	mi
 8017a68:	58cc      	ldrmi	r4, [r1, r3]
 8017a6a:	2100      	movs	r1, #0
 8017a6c:	9b01      	ldr	r3, [sp, #4]
 8017a6e:	47a0      	blx	r4
 8017a70:	b002      	add	sp, #8
 8017a72:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017a76:	b003      	add	sp, #12
 8017a78:	4770      	bx	lr
 8017a7a:	bf00      	nop
 8017a7c:	20000028 	.word	0x20000028

08017a80 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:
 8017a80:	b40c      	push	{r2, r3}
 8017a82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017a84:	ab06      	add	r3, sp, #24
 8017a86:	f853 2b04 	ldr.w	r2, [r3], #4
 8017a8a:	9301      	str	r3, [sp, #4]
 8017a8c:	4b09      	ldr	r3, [pc, #36]	; (8017ab4 <_ZNK8touchgfx4Font14getStringWidthEhPKtz+0x34>)
 8017a8e:	685d      	ldr	r5, [r3, #4]
 8017a90:	106c      	asrs	r4, r5, #1
 8017a92:	07ed      	lsls	r5, r5, #31
 8017a94:	eb00 0604 	add.w	r6, r0, r4
 8017a98:	bf45      	ittet	mi
 8017a9a:	681b      	ldrmi	r3, [r3, #0]
 8017a9c:	5900      	ldrmi	r0, [r0, r4]
 8017a9e:	681c      	ldrpl	r4, [r3, #0]
 8017aa0:	58c4      	ldrmi	r4, [r0, r3]
 8017aa2:	4630      	mov	r0, r6
 8017aa4:	9b01      	ldr	r3, [sp, #4]
 8017aa6:	47a0      	blx	r4
 8017aa8:	b002      	add	sp, #8
 8017aaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017aae:	b002      	add	sp, #8
 8017ab0:	4770      	bx	lr
 8017ab2:	bf00      	nop
 8017ab4:	20000028 	.word	0x20000028

08017ab8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8017ab8:	b40e      	push	{r1, r2, r3}
 8017aba:	b530      	push	{r4, r5, lr}
 8017abc:	b098      	sub	sp, #96	; 0x60
 8017abe:	4604      	mov	r4, r0
 8017ac0:	ab1b      	add	r3, sp, #108	; 0x6c
 8017ac2:	a802      	add	r0, sp, #8
 8017ac4:	f853 5b04 	ldr.w	r5, [r3], #4
 8017ac8:	9301      	str	r3, [sp, #4]
 8017aca:	f001 f837 	bl	8018b3c <_ZN8touchgfx12TextProviderC1Ev>
 8017ace:	6823      	ldr	r3, [r4, #0]
 8017ad0:	4620      	mov	r0, r4
 8017ad2:	2401      	movs	r4, #1
 8017ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017ad6:	4798      	blx	r3
 8017ad8:	9a01      	ldr	r2, [sp, #4]
 8017ada:	4603      	mov	r3, r0
 8017adc:	4629      	mov	r1, r5
 8017ade:	a802      	add	r0, sp, #8
 8017ae0:	f001 f849 	bl	8018b76 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8017ae4:	a802      	add	r0, sp, #8
 8017ae6:	f001 f87f 	bl	8018be8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8017aea:	b2a3      	uxth	r3, r4
 8017aec:	b138      	cbz	r0, 8017afe <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x46>
 8017aee:	280a      	cmp	r0, #10
 8017af0:	a802      	add	r0, sp, #8
 8017af2:	bf04      	itt	eq
 8017af4:	3301      	addeq	r3, #1
 8017af6:	b21c      	sxtheq	r4, r3
 8017af8:	f001 f876 	bl	8018be8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8017afc:	e7f5      	b.n	8017aea <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 8017afe:	4618      	mov	r0, r3
 8017b00:	b018      	add	sp, #96	; 0x60
 8017b02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017b06:	b003      	add	sp, #12
 8017b08:	4770      	bx	lr
	...

08017b0c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8017b0c:	b40e      	push	{r1, r2, r3}
 8017b0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017b10:	b098      	sub	sp, #96	; 0x60
 8017b12:	4605      	mov	r5, r0
 8017b14:	4f25      	ldr	r7, [pc, #148]	; (8017bac <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0xa0>)
 8017b16:	ab1d      	add	r3, sp, #116	; 0x74
 8017b18:	a802      	add	r0, sp, #8
 8017b1a:	ae18      	add	r6, sp, #96	; 0x60
 8017b1c:	f853 4b04 	ldr.w	r4, [r3], #4
 8017b20:	9300      	str	r3, [sp, #0]
 8017b22:	f001 f80b 	bl	8018b3c <_ZN8touchgfx12TextProviderC1Ev>
 8017b26:	682b      	ldr	r3, [r5, #0]
 8017b28:	4628      	mov	r0, r5
 8017b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017b2c:	4798      	blx	r3
 8017b2e:	4621      	mov	r1, r4
 8017b30:	2400      	movs	r4, #0
 8017b32:	4603      	mov	r3, r0
 8017b34:	9a00      	ldr	r2, [sp, #0]
 8017b36:	a802      	add	r0, sp, #8
 8017b38:	f001 f81d 	bl	8018b76 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8017b3c:	f846 4d5c 	str.w	r4, [r6, #-92]!
 8017b40:	462a      	mov	r2, r5
 8017b42:	4633      	mov	r3, r6
 8017b44:	4621      	mov	r1, r4
 8017b46:	a802      	add	r0, sp, #8
 8017b48:	f001 f97a 	bl	8018e40 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017b4c:	b340      	cbz	r0, 8017ba0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x94>
 8017b4e:	280a      	cmp	r0, #10
 8017b50:	d01f      	beq.n	8017b92 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8017b52:	9901      	ldr	r1, [sp, #4]
 8017b54:	b1e9      	cbz	r1, 8017b92 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8017b56:	7b4b      	ldrb	r3, [r1, #13]
 8017b58:	f891 c008 	ldrb.w	ip, [r1, #8]
 8017b5c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8017b60:	ea4f 1e03 	mov.w	lr, r3, lsl #4
 8017b64:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8017b68:	79c9      	ldrb	r1, [r1, #7]
 8017b6a:	f40e 7e80 	and.w	lr, lr, #256	; 0x100
 8017b6e:	bf18      	it	ne
 8017b70:	4638      	movne	r0, r7
 8017b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017b76:	bf08      	it	eq
 8017b78:	2000      	moveq	r0, #0
 8017b7a:	88aa      	ldrh	r2, [r5, #4]
 8017b7c:	ea41 010e 	orr.w	r1, r1, lr
 8017b80:	ea43 030c 	orr.w	r3, r3, ip
 8017b84:	440a      	add	r2, r1
 8017b86:	4303      	orrs	r3, r0
 8017b88:	1ad3      	subs	r3, r2, r3
 8017b8a:	b29b      	uxth	r3, r3
 8017b8c:	42a3      	cmp	r3, r4
 8017b8e:	bfc8      	it	gt
 8017b90:	b21c      	sxthgt	r4, r3
 8017b92:	4633      	mov	r3, r6
 8017b94:	462a      	mov	r2, r5
 8017b96:	2100      	movs	r1, #0
 8017b98:	a802      	add	r0, sp, #8
 8017b9a:	f001 f951 	bl	8018e40 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017b9e:	e7d5      	b.n	8017b4c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x40>
 8017ba0:	b2a0      	uxth	r0, r4
 8017ba2:	b018      	add	sp, #96	; 0x60
 8017ba4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017ba8:	b003      	add	sp, #12
 8017baa:	4770      	bx	lr
 8017bac:	fffffe00 	.word	0xfffffe00

08017bb0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8017bb0:	b40e      	push	{r1, r2, r3}
 8017bb2:	b570      	push	{r4, r5, r6, lr}
 8017bb4:	b099      	sub	sp, #100	; 0x64
 8017bb6:	4604      	mov	r4, r0
 8017bb8:	26ff      	movs	r6, #255	; 0xff
 8017bba:	ab1d      	add	r3, sp, #116	; 0x74
 8017bbc:	a802      	add	r0, sp, #8
 8017bbe:	f853 5b04 	ldr.w	r5, [r3], #4
 8017bc2:	9300      	str	r3, [sp, #0]
 8017bc4:	f000 ffba 	bl	8018b3c <_ZN8touchgfx12TextProviderC1Ev>
 8017bc8:	6823      	ldr	r3, [r4, #0]
 8017bca:	4620      	mov	r0, r4
 8017bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017bce:	4798      	blx	r3
 8017bd0:	4629      	mov	r1, r5
 8017bd2:	4603      	mov	r3, r0
 8017bd4:	9a00      	ldr	r2, [sp, #0]
 8017bd6:	a802      	add	r0, sp, #8
 8017bd8:	ad18      	add	r5, sp, #96	; 0x60
 8017bda:	f000 ffcc 	bl	8018b76 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8017bde:	2100      	movs	r1, #0
 8017be0:	4622      	mov	r2, r4
 8017be2:	a802      	add	r0, sp, #8
 8017be4:	f845 1d5c 	str.w	r1, [r5, #-92]!
 8017be8:	462b      	mov	r3, r5
 8017bea:	f001 f929 	bl	8018e40 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017bee:	b190      	cbz	r0, 8017c16 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x66>
 8017bf0:	280a      	cmp	r0, #10
 8017bf2:	d009      	beq.n	8017c08 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 8017bf4:	9a01      	ldr	r2, [sp, #4]
 8017bf6:	b13a      	cbz	r2, 8017c08 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 8017bf8:	7923      	ldrb	r3, [r4, #4]
 8017bfa:	7a12      	ldrb	r2, [r2, #8]
 8017bfc:	1a9b      	subs	r3, r3, r2
 8017bfe:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8017c02:	429e      	cmp	r6, r3
 8017c04:	bf28      	it	cs
 8017c06:	461e      	movcs	r6, r3
 8017c08:	462b      	mov	r3, r5
 8017c0a:	4622      	mov	r2, r4
 8017c0c:	2100      	movs	r1, #0
 8017c0e:	a802      	add	r0, sp, #8
 8017c10:	f001 f916 	bl	8018e40 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017c14:	e7eb      	b.n	8017bee <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 8017c16:	4630      	mov	r0, r6
 8017c18:	b019      	add	sp, #100	; 0x64
 8017c1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017c1e:	b003      	add	sp, #12
 8017c20:	4770      	bx	lr

08017c22 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8017c22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c26:	b099      	sub	sp, #100	; 0x64
 8017c28:	4606      	mov	r6, r0
 8017c2a:	4614      	mov	r4, r2
 8017c2c:	4688      	mov	r8, r1
 8017c2e:	a802      	add	r0, sp, #8
 8017c30:	461d      	mov	r5, r3
 8017c32:	f04f 0b00 	mov.w	fp, #0
 8017c36:	f000 ff81 	bl	8018b3c <_ZN8touchgfx12TextProviderC1Ev>
 8017c3a:	6833      	ldr	r3, [r6, #0]
 8017c3c:	4630      	mov	r0, r6
 8017c3e:	465f      	mov	r7, fp
 8017c40:	46da      	mov	sl, fp
 8017c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017c44:	46d9      	mov	r9, fp
 8017c46:	4798      	blx	r3
 8017c48:	462a      	mov	r2, r5
 8017c4a:	4603      	mov	r3, r0
 8017c4c:	4621      	mov	r1, r4
 8017c4e:	a802      	add	r0, sp, #8
 8017c50:	f000 ff91 	bl	8018b76 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8017c54:	ab01      	add	r3, sp, #4
 8017c56:	4632      	mov	r2, r6
 8017c58:	4641      	mov	r1, r8
 8017c5a:	a802      	add	r0, sp, #8
 8017c5c:	f8cd 9004 	str.w	r9, [sp, #4]
 8017c60:	f001 f8ee 	bl	8018e40 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017c64:	4605      	mov	r5, r0
 8017c66:	b108      	cbz	r0, 8017c6c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x4a>
 8017c68:	280a      	cmp	r0, #10
 8017c6a:	d10b      	bne.n	8017c84 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x62>
 8017c6c:	4557      	cmp	r7, sl
 8017c6e:	bf38      	it	cc
 8017c70:	4657      	movcc	r7, sl
 8017c72:	f04f 0a00 	mov.w	sl, #0
 8017c76:	b91d      	cbnz	r5, 8017c80 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 8017c78:	4638      	mov	r0, r7
 8017c7a:	b019      	add	sp, #100	; 0x64
 8017c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c80:	46ab      	mov	fp, r5
 8017c82:	e7e7      	b.n	8017c54 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x32>
 8017c84:	9a01      	ldr	r2, [sp, #4]
 8017c86:	2a00      	cmp	r2, #0
 8017c88:	d0fa      	beq.n	8017c80 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 8017c8a:	f992 400d 	ldrsb.w	r4, [r2, #13]
 8017c8e:	4659      	mov	r1, fp
 8017c90:	6833      	ldr	r3, [r6, #0]
 8017c92:	f404 7080 	and.w	r0, r4, #256	; 0x100
 8017c96:	7a94      	ldrb	r4, [r2, #10]
 8017c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017c9a:	4304      	orrs	r4, r0
 8017c9c:	4630      	mov	r0, r6
 8017c9e:	8895      	ldrh	r5, [r2, #4]
 8017ca0:	4798      	blx	r3
 8017ca2:	4420      	add	r0, r4
 8017ca4:	4450      	add	r0, sl
 8017ca6:	fa1f fa80 	uxth.w	sl, r0
 8017caa:	e7e4      	b.n	8017c76 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x54>

08017cac <_ZNK8touchgfx8Drawable10invalidateEv>:
 8017cac:	b513      	push	{r0, r1, r4, lr}
 8017cae:	1d01      	adds	r1, r0, #4
 8017cb0:	4603      	mov	r3, r0
 8017cb2:	466a      	mov	r2, sp
 8017cb4:	c903      	ldmia	r1, {r0, r1}
 8017cb6:	e882 0003 	stmia.w	r2, {r0, r1}
 8017cba:	2100      	movs	r1, #0
 8017cbc:	4618      	mov	r0, r3
 8017cbe:	9100      	str	r1, [sp, #0]
 8017cc0:	6819      	ldr	r1, [r3, #0]
 8017cc2:	690c      	ldr	r4, [r1, #16]
 8017cc4:	4611      	mov	r1, r2
 8017cc6:	47a0      	blx	r4
 8017cc8:	b002      	add	sp, #8
 8017cca:	bd10      	pop	{r4, pc}

08017ccc <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8017ccc:	b538      	push	{r3, r4, r5, lr}
 8017cce:	680b      	ldr	r3, [r1, #0]
 8017cd0:	460c      	mov	r4, r1
 8017cd2:	4605      	mov	r5, r0
 8017cd4:	68db      	ldr	r3, [r3, #12]
 8017cd6:	4798      	blx	r3
 8017cd8:	6823      	ldr	r3, [r4, #0]
 8017cda:	4620      	mov	r0, r4
 8017cdc:	4629      	mov	r1, r5
 8017cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ce0:	4798      	blx	r3
 8017ce2:	4628      	mov	r0, r5
 8017ce4:	bd38      	pop	{r3, r4, r5, pc}

08017ce6 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8017ce6:	b410      	push	{r4}
 8017ce8:	880a      	ldrh	r2, [r1, #0]
 8017cea:	8884      	ldrh	r4, [r0, #4]
 8017cec:	4422      	add	r2, r4
 8017cee:	800a      	strh	r2, [r1, #0]
 8017cf0:	884a      	ldrh	r2, [r1, #2]
 8017cf2:	88c4      	ldrh	r4, [r0, #6]
 8017cf4:	4422      	add	r2, r4
 8017cf6:	804a      	strh	r2, [r1, #2]
 8017cf8:	6940      	ldr	r0, [r0, #20]
 8017cfa:	b120      	cbz	r0, 8017d06 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8017cfc:	6803      	ldr	r3, [r0, #0]
 8017cfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d04:	4718      	bx	r3
 8017d06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017d0a:	4770      	bx	lr

08017d0c <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8017d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017d0e:	460b      	mov	r3, r1
 8017d10:	b085      	sub	sp, #20
 8017d12:	4604      	mov	r4, r0
 8017d14:	b901      	cbnz	r1, 8017d18 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8017d16:	b1fa      	cbz	r2, 8017d58 <_ZN8touchgfx8Drawable12moveRelativeEss+0x4c>
 8017d18:	1d27      	adds	r7, r4, #4
 8017d1a:	466e      	mov	r6, sp
 8017d1c:	ad02      	add	r5, sp, #8
 8017d1e:	e897 0003 	ldmia.w	r7, {r0, r1}
 8017d22:	e886 0003 	stmia.w	r6, {r0, r1}
 8017d26:	88e1      	ldrh	r1, [r4, #6]
 8017d28:	4620      	mov	r0, r4
 8017d2a:	440a      	add	r2, r1
 8017d2c:	88a1      	ldrh	r1, [r4, #4]
 8017d2e:	4419      	add	r1, r3
 8017d30:	6823      	ldr	r3, [r4, #0]
 8017d32:	b212      	sxth	r2, r2
 8017d34:	b209      	sxth	r1, r1
 8017d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017d38:	4798      	blx	r3
 8017d3a:	e897 0003 	ldmia.w	r7, {r0, r1}
 8017d3e:	e885 0003 	stmia.w	r5, {r0, r1}
 8017d42:	6960      	ldr	r0, [r4, #20]
 8017d44:	b150      	cbz	r0, 8017d5c <_ZN8touchgfx8Drawable12moveRelativeEss+0x50>
 8017d46:	6803      	ldr	r3, [r0, #0]
 8017d48:	4631      	mov	r1, r6
 8017d4a:	691b      	ldr	r3, [r3, #16]
 8017d4c:	4798      	blx	r3
 8017d4e:	6960      	ldr	r0, [r4, #20]
 8017d50:	6803      	ldr	r3, [r0, #0]
 8017d52:	691b      	ldr	r3, [r3, #16]
 8017d54:	4629      	mov	r1, r5
 8017d56:	4798      	blx	r3
 8017d58:	b005      	add	sp, #20
 8017d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017d5c:	f7ff fb78 	bl	8017450 <_ZN8touchgfx11Application11getInstanceEv>
 8017d60:	6803      	ldr	r3, [r0, #0]
 8017d62:	4631      	mov	r1, r6
 8017d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d66:	4798      	blx	r3
 8017d68:	f7ff fb72 	bl	8017450 <_ZN8touchgfx11Application11getInstanceEv>
 8017d6c:	6803      	ldr	r3, [r0, #0]
 8017d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d70:	e7f0      	b.n	8017d54 <_ZN8touchgfx8Drawable12moveRelativeEss+0x48>

08017d72 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8017d72:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017d74:	8882      	ldrh	r2, [r0, #4]
 8017d76:	4605      	mov	r5, r0
 8017d78:	880b      	ldrh	r3, [r1, #0]
 8017d7a:	460c      	mov	r4, r1
 8017d7c:	4413      	add	r3, r2
 8017d7e:	800b      	strh	r3, [r1, #0]
 8017d80:	884b      	ldrh	r3, [r1, #2]
 8017d82:	88c2      	ldrh	r2, [r0, #6]
 8017d84:	4413      	add	r3, r2
 8017d86:	4602      	mov	r2, r0
 8017d88:	804b      	strh	r3, [r1, #2]
 8017d8a:	466b      	mov	r3, sp
 8017d8c:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8017d90:	6851      	ldr	r1, [r2, #4]
 8017d92:	c303      	stmia	r3!, {r0, r1}
 8017d94:	4621      	mov	r1, r4
 8017d96:	4668      	mov	r0, sp
 8017d98:	f7fc fb36 	bl	8014408 <_ZN8touchgfx4RectaNERKS0_>
 8017d9c:	466b      	mov	r3, sp
 8017d9e:	cb03      	ldmia	r3!, {r0, r1}
 8017da0:	6020      	str	r0, [r4, #0]
 8017da2:	6061      	str	r1, [r4, #4]
 8017da4:	6968      	ldr	r0, [r5, #20]
 8017da6:	b128      	cbz	r0, 8017db4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 8017da8:	6803      	ldr	r3, [r0, #0]
 8017daa:	691b      	ldr	r3, [r3, #16]
 8017dac:	4621      	mov	r1, r4
 8017dae:	4798      	blx	r3
 8017db0:	b003      	add	sp, #12
 8017db2:	bd30      	pop	{r4, r5, pc}
 8017db4:	f7ff fb4c 	bl	8017450 <_ZN8touchgfx11Application11getInstanceEv>
 8017db8:	6803      	ldr	r3, [r0, #0]
 8017dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017dbc:	e7f6      	b.n	8017dac <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

08017dbe <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8017dbe:	b570      	push	{r4, r5, r6, lr}
 8017dc0:	8882      	ldrh	r2, [r0, #4]
 8017dc2:	460c      	mov	r4, r1
 8017dc4:	880b      	ldrh	r3, [r1, #0]
 8017dc6:	4605      	mov	r5, r0
 8017dc8:	4413      	add	r3, r2
 8017dca:	800b      	strh	r3, [r1, #0]
 8017dcc:	884b      	ldrh	r3, [r1, #2]
 8017dce:	88c2      	ldrh	r2, [r0, #6]
 8017dd0:	4413      	add	r3, r2
 8017dd2:	804b      	strh	r3, [r1, #2]
 8017dd4:	1d01      	adds	r1, r0, #4
 8017dd6:	4620      	mov	r0, r4
 8017dd8:	f7fc fb16 	bl	8014408 <_ZN8touchgfx4RectaNERKS0_>
 8017ddc:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8017de0:	b153      	cbz	r3, 8017df8 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 8017de2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8017de6:	b13b      	cbz	r3, 8017df8 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 8017de8:	6968      	ldr	r0, [r5, #20]
 8017dea:	b128      	cbz	r0, 8017df8 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 8017dec:	6803      	ldr	r3, [r0, #0]
 8017dee:	4621      	mov	r1, r4
 8017df0:	6a1b      	ldr	r3, [r3, #32]
 8017df2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017df6:	4718      	bx	r3
 8017df8:	bd70      	pop	{r4, r5, r6, pc}

08017dfa <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8017dfa:	b510      	push	{r4, lr}
 8017dfc:	2300      	movs	r3, #0
 8017dfe:	4604      	mov	r4, r0
 8017e00:	4608      	mov	r0, r1
 8017e02:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8017e06:	8023      	strh	r3, [r4, #0]
 8017e08:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8017e0c:	8063      	strh	r3, [r4, #2]
 8017e0e:	6803      	ldr	r3, [r0, #0]
 8017e10:	80a1      	strh	r1, [r4, #4]
 8017e12:	4621      	mov	r1, r4
 8017e14:	80e2      	strh	r2, [r4, #6]
 8017e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e18:	4798      	blx	r3
 8017e1a:	4620      	mov	r0, r4
 8017e1c:	bd10      	pop	{r4, pc}
	...

08017e20 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8017e20:	b530      	push	{r4, r5, lr}
 8017e22:	8083      	strh	r3, [r0, #4]
 8017e24:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8017e28:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8017e2c:	7183      	strb	r3, [r0, #6]
 8017e2e:	79c3      	ldrb	r3, [r0, #7]
 8017e30:	6101      	str	r1, [r0, #16]
 8017e32:	f365 0306 	bfi	r3, r5, #0, #7
 8017e36:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8017e3a:	8282      	strh	r2, [r0, #20]
 8017e3c:	f365 13c7 	bfi	r3, r5, #7, #1
 8017e40:	71c3      	strb	r3, [r0, #7]
 8017e42:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8017e46:	7203      	strb	r3, [r0, #8]
 8017e48:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8017e4c:	7243      	strb	r3, [r0, #9]
 8017e4e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8017e52:	8143      	strh	r3, [r0, #10]
 8017e54:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8017e58:	8183      	strh	r3, [r0, #12]
 8017e5a:	4b01      	ldr	r3, [pc, #4]	; (8017e60 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8017e5c:	6003      	str	r3, [r0, #0]
 8017e5e:	bd30      	pop	{r4, r5, pc}
 8017e60:	08026cd4 	.word	0x08026cd4

08017e64 <_ZNK8touchgfx9ConstFont4findEt>:
 8017e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017e66:	8a84      	ldrh	r4, [r0, #20]
 8017e68:	2500      	movs	r5, #0
 8017e6a:	260e      	movs	r6, #14
 8017e6c:	3c01      	subs	r4, #1
 8017e6e:	42a5      	cmp	r5, r4
 8017e70:	dc0c      	bgt.n	8017e8c <_ZNK8touchgfx9ConstFont4findEt+0x28>
 8017e72:	192a      	adds	r2, r5, r4
 8017e74:	6903      	ldr	r3, [r0, #16]
 8017e76:	1052      	asrs	r2, r2, #1
 8017e78:	fb06 3302 	mla	r3, r6, r2, r3
 8017e7c:	889f      	ldrh	r7, [r3, #4]
 8017e7e:	428f      	cmp	r7, r1
 8017e80:	d901      	bls.n	8017e86 <_ZNK8touchgfx9ConstFont4findEt+0x22>
 8017e82:	1e54      	subs	r4, r2, #1
 8017e84:	e7f3      	b.n	8017e6e <_ZNK8touchgfx9ConstFont4findEt+0xa>
 8017e86:	d202      	bcs.n	8017e8e <_ZNK8touchgfx9ConstFont4findEt+0x2a>
 8017e88:	1c55      	adds	r5, r2, #1
 8017e8a:	e7f0      	b.n	8017e6e <_ZNK8touchgfx9ConstFont4findEt+0xa>
 8017e8c:	2300      	movs	r3, #0
 8017e8e:	4618      	mov	r0, r3
 8017e90:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017e92 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8017e92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e94:	4605      	mov	r5, r0
 8017e96:	4617      	mov	r7, r2
 8017e98:	461e      	mov	r6, r3
 8017e9a:	f7ff ffe3 	bl	8017e64 <_ZNK8touchgfx9ConstFont4findEt>
 8017e9e:	b9e0      	cbnz	r0, 8017eda <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x48>
 8017ea0:	b911      	cbnz	r1, 8017ea8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x16>
 8017ea2:	2400      	movs	r4, #0
 8017ea4:	4620      	mov	r0, r4
 8017ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017ea8:	290a      	cmp	r1, #10
 8017eaa:	d0fa      	beq.n	8017ea2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8017eac:	682b      	ldr	r3, [r5, #0]
 8017eae:	4628      	mov	r0, r5
 8017eb0:	691b      	ldr	r3, [r3, #16]
 8017eb2:	4798      	blx	r3
 8017eb4:	4601      	mov	r1, r0
 8017eb6:	4628      	mov	r0, r5
 8017eb8:	f7ff ffd4 	bl	8017e64 <_ZNK8touchgfx9ConstFont4findEt>
 8017ebc:	4604      	mov	r4, r0
 8017ebe:	2800      	cmp	r0, #0
 8017ec0:	d0ef      	beq.n	8017ea2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8017ec2:	682b      	ldr	r3, [r5, #0]
 8017ec4:	4621      	mov	r1, r4
 8017ec6:	4628      	mov	r0, r5
 8017ec8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017eca:	4798      	blx	r3
 8017ecc:	6038      	str	r0, [r7, #0]
 8017ece:	682b      	ldr	r3, [r5, #0]
 8017ed0:	4628      	mov	r0, r5
 8017ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017ed4:	4798      	blx	r3
 8017ed6:	7030      	strb	r0, [r6, #0]
 8017ed8:	e7e4      	b.n	8017ea4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x12>
 8017eda:	4604      	mov	r4, r0
 8017edc:	e7f1      	b.n	8017ec2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x30>

08017ede <_ZN8touchgfx6memsetEPvhm>:
 8017ede:	4402      	add	r2, r0
 8017ee0:	4290      	cmp	r0, r2
 8017ee2:	d002      	beq.n	8017eea <_ZN8touchgfx6memsetEPvhm+0xc>
 8017ee4:	f800 1b01 	strb.w	r1, [r0], #1
 8017ee8:	e7fa      	b.n	8017ee0 <_ZN8touchgfx6memsetEPvhm+0x2>
 8017eea:	4770      	bx	lr

08017eec <_ZN8touchgfx3clzEl>:
 8017eec:	b1e8      	cbz	r0, 8017f2a <_ZN8touchgfx3clzEl+0x3e>
 8017eee:	2800      	cmp	r0, #0
 8017ef0:	bfb8      	it	lt
 8017ef2:	4240      	neglt	r0, r0
 8017ef4:	0c03      	lsrs	r3, r0, #16
 8017ef6:	041b      	lsls	r3, r3, #16
 8017ef8:	b9ab      	cbnz	r3, 8017f26 <_ZN8touchgfx3clzEl+0x3a>
 8017efa:	0400      	lsls	r0, r0, #16
 8017efc:	2310      	movs	r3, #16
 8017efe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8017f02:	bf04      	itt	eq
 8017f04:	0200      	lsleq	r0, r0, #8
 8017f06:	3308      	addeq	r3, #8
 8017f08:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8017f0c:	bf04      	itt	eq
 8017f0e:	0100      	lsleq	r0, r0, #4
 8017f10:	3304      	addeq	r3, #4
 8017f12:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8017f16:	bf04      	itt	eq
 8017f18:	0080      	lsleq	r0, r0, #2
 8017f1a:	3302      	addeq	r3, #2
 8017f1c:	2800      	cmp	r0, #0
 8017f1e:	bfa8      	it	ge
 8017f20:	3301      	addge	r3, #1
 8017f22:	1e58      	subs	r0, r3, #1
 8017f24:	4770      	bx	lr
 8017f26:	2300      	movs	r3, #0
 8017f28:	e7e9      	b.n	8017efe <_ZN8touchgfx3clzEl+0x12>
 8017f2a:	201f      	movs	r0, #31
 8017f2c:	4770      	bx	lr

08017f2e <_ZN8touchgfx6muldivElllRl>:
 8017f2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f32:	4604      	mov	r4, r0
 8017f34:	4698      	mov	r8, r3
 8017f36:	2601      	movs	r6, #1
 8017f38:	f7ff ffd8 	bl	8017eec <_ZN8touchgfx3clzEl>
 8017f3c:	2c00      	cmp	r4, #0
 8017f3e:	fa04 f500 	lsl.w	r5, r4, r0
 8017f42:	fa06 f600 	lsl.w	r6, r6, r0
 8017f46:	bfba      	itte	lt
 8017f48:	f04f 37ff 	movlt.w	r7, #4294967295
 8017f4c:	4264      	neglt	r4, r4
 8017f4e:	2701      	movge	r7, #1
 8017f50:	2900      	cmp	r1, #0
 8017f52:	f106 36ff 	add.w	r6, r6, #4294967295
 8017f56:	bfbc      	itt	lt
 8017f58:	4249      	neglt	r1, r1
 8017f5a:	427f      	neglt	r7, r7
 8017f5c:	2a00      	cmp	r2, #0
 8017f5e:	fa41 fc00 	asr.w	ip, r1, r0
 8017f62:	ea01 0106 	and.w	r1, r1, r6
 8017f66:	bfb8      	it	lt
 8017f68:	427f      	neglt	r7, r7
 8017f6a:	fb04 f401 	mul.w	r4, r4, r1
 8017f6e:	fb95 f3f2 	sdiv	r3, r5, r2
 8017f72:	fb02 5513 	mls	r5, r2, r3, r5
 8017f76:	bfb8      	it	lt
 8017f78:	4252      	neglt	r2, r2
 8017f7a:	fb94 f0f2 	sdiv	r0, r4, r2
 8017f7e:	fb02 4410 	mls	r4, r2, r0, r4
 8017f82:	fb0c 4405 	mla	r4, ip, r5, r4
 8017f86:	fb94 f1f2 	sdiv	r1, r4, r2
 8017f8a:	4408      	add	r0, r1
 8017f8c:	fb02 4211 	mls	r2, r2, r1, r4
 8017f90:	fb0c 0003 	mla	r0, ip, r3, r0
 8017f94:	f8c8 2000 	str.w	r2, [r8]
 8017f98:	4378      	muls	r0, r7
 8017f9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017f9e <_ZN8touchgfx10ClickEventD1Ev>:
 8017f9e:	4770      	bx	lr

08017fa0 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 8017fa0:	2000      	movs	r0, #0
 8017fa2:	4770      	bx	lr

08017fa4 <_ZN8touchgfx9DragEventD1Ev>:
 8017fa4:	4770      	bx	lr

08017fa6 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 8017fa6:	2001      	movs	r0, #1
 8017fa8:	4770      	bx	lr

08017faa <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 8017faa:	2002      	movs	r0, #2
 8017fac:	4770      	bx	lr

08017fae <_ZN8touchgfx12GestureEventD1Ev>:
 8017fae:	4770      	bx	lr

08017fb0 <_ZN8touchgfx10ClickEventD0Ev>:
 8017fb0:	b510      	push	{r4, lr}
 8017fb2:	4604      	mov	r4, r0
 8017fb4:	210c      	movs	r1, #12
 8017fb6:	f00b fa14 	bl	80233e2 <_ZdlPvj>
 8017fba:	4620      	mov	r0, r4
 8017fbc:	bd10      	pop	{r4, pc}

08017fbe <_ZN8touchgfx9DragEventD0Ev>:
 8017fbe:	b510      	push	{r4, lr}
 8017fc0:	4604      	mov	r4, r0
 8017fc2:	2110      	movs	r1, #16
 8017fc4:	f00b fa0d 	bl	80233e2 <_ZdlPvj>
 8017fc8:	4620      	mov	r0, r4
 8017fca:	bd10      	pop	{r4, pc}

08017fcc <_ZN8touchgfx12GestureEventD0Ev>:
 8017fcc:	b510      	push	{r4, lr}
 8017fce:	4604      	mov	r4, r0
 8017fd0:	210c      	movs	r1, #12
 8017fd2:	f00b fa06 	bl	80233e2 <_ZdlPvj>
 8017fd6:	4620      	mov	r0, r4
 8017fd8:	bd10      	pop	{r4, pc}
	...

08017fdc <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8017fdc:	b530      	push	{r4, r5, lr}
 8017fde:	460d      	mov	r5, r1
 8017fe0:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8017fe2:	b087      	sub	sp, #28
 8017fe4:	4604      	mov	r4, r0
 8017fe6:	b301      	cbz	r1, 801802a <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8017fe8:	a801      	add	r0, sp, #4
 8017fea:	f7ff ff06 	bl	8017dfa <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017fee:	892a      	ldrh	r2, [r5, #8]
 8017ff0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8017ff4:	7928      	ldrb	r0, [r5, #4]
 8017ff6:	1ad2      	subs	r2, r2, r3
 8017ff8:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8017ffa:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8017ffe:	441a      	add	r2, r3
 8018000:	896b      	ldrh	r3, [r5, #10]
 8018002:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8018006:	f88d 0010 	strb.w	r0, [sp, #16]
 801800a:	1b5b      	subs	r3, r3, r5
 801800c:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801800e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8018010:	442b      	add	r3, r5
 8018012:	4d07      	ldr	r5, [pc, #28]	; (8018030 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8018014:	f8ad 1012 	strh.w	r1, [sp, #18]
 8018018:	a903      	add	r1, sp, #12
 801801a:	9503      	str	r5, [sp, #12]
 801801c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8018020:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018024:	6803      	ldr	r3, [r0, #0]
 8018026:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018028:	4798      	blx	r3
 801802a:	b007      	add	sp, #28
 801802c:	bd30      	pop	{r4, r5, pc}
 801802e:	bf00      	nop
 8018030:	08026d50 	.word	0x08026d50

08018034 <_ZNK8touchgfx4Rect9intersectEss>:
 8018034:	b510      	push	{r4, lr}
 8018036:	f9b0 3000 	ldrsh.w	r3, [r0]
 801803a:	428b      	cmp	r3, r1
 801803c:	dc10      	bgt.n	8018060 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801803e:	8884      	ldrh	r4, [r0, #4]
 8018040:	4423      	add	r3, r4
 8018042:	b21b      	sxth	r3, r3
 8018044:	4299      	cmp	r1, r3
 8018046:	da0b      	bge.n	8018060 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8018048:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801804c:	4293      	cmp	r3, r2
 801804e:	dc07      	bgt.n	8018060 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8018050:	88c0      	ldrh	r0, [r0, #6]
 8018052:	4418      	add	r0, r3
 8018054:	b200      	sxth	r0, r0
 8018056:	4282      	cmp	r2, r0
 8018058:	bfac      	ite	ge
 801805a:	2000      	movge	r0, #0
 801805c:	2001      	movlt	r0, #1
 801805e:	bd10      	pop	{r4, pc}
 8018060:	2000      	movs	r0, #0
 8018062:	e7fc      	b.n	801805e <_ZNK8touchgfx4Rect9intersectEss+0x2a>

08018064 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8018064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018066:	460c      	mov	r4, r1
 8018068:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801806a:	b089      	sub	sp, #36	; 0x24
 801806c:	4605      	mov	r5, r0
 801806e:	2900      	cmp	r1, #0
 8018070:	d054      	beq.n	801811c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 8018072:	4668      	mov	r0, sp
 8018074:	f7ff fec1 	bl	8017dfa <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018078:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 801807a:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 801807c:	4668      	mov	r0, sp
 801807e:	8922      	ldrh	r2, [r4, #8]
 8018080:	88e1      	ldrh	r1, [r4, #6]
 8018082:	443a      	add	r2, r7
 8018084:	4431      	add	r1, r6
 8018086:	b212      	sxth	r2, r2
 8018088:	b209      	sxth	r1, r1
 801808a:	f7ff ffd3 	bl	8018034 <_ZNK8touchgfx4Rect9intersectEss>
 801808e:	b1d0      	cbz	r0, 80180c6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 8018090:	89a2      	ldrh	r2, [r4, #12]
 8018092:	4668      	mov	r0, sp
 8018094:	8961      	ldrh	r1, [r4, #10]
 8018096:	443a      	add	r2, r7
 8018098:	4431      	add	r1, r6
 801809a:	b212      	sxth	r2, r2
 801809c:	b209      	sxth	r1, r1
 801809e:	f7ff ffc9 	bl	8018034 <_ZNK8touchgfx4Rect9intersectEss>
 80180a2:	4603      	mov	r3, r0
 80180a4:	b978      	cbnz	r0, 80180c6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 80180a6:	4a1e      	ldr	r2, [pc, #120]	; (8018120 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 80180a8:	a904      	add	r1, sp, #16
 80180aa:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80180ac:	9204      	str	r2, [sp, #16]
 80180ae:	2202      	movs	r2, #2
 80180b0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80180b4:	f88d 2014 	strb.w	r2, [sp, #20]
 80180b8:	f8ad 3018 	strh.w	r3, [sp, #24]
 80180bc:	f8ad 301a 	strh.w	r3, [sp, #26]
 80180c0:	6803      	ldr	r3, [r0, #0]
 80180c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80180c4:	4798      	blx	r3
 80180c6:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80180c8:	a802      	add	r0, sp, #8
 80180ca:	f7ff fe96 	bl	8017dfa <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80180ce:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80180d2:	88e0      	ldrh	r0, [r4, #6]
 80180d4:	8961      	ldrh	r1, [r4, #10]
 80180d6:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 80180da:	1a80      	subs	r0, r0, r2
 80180dc:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 80180e0:	1a89      	subs	r1, r1, r2
 80180e2:	8923      	ldrh	r3, [r4, #8]
 80180e4:	4460      	add	r0, ip
 80180e6:	89a2      	ldrh	r2, [r4, #12]
 80180e8:	4461      	add	r1, ip
 80180ea:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 80180ec:	eba3 030e 	sub.w	r3, r3, lr
 80180f0:	eba2 020e 	sub.w	r2, r2, lr
 80180f4:	f8ad 0016 	strh.w	r0, [sp, #22]
 80180f8:	7927      	ldrb	r7, [r4, #4]
 80180fa:	4433      	add	r3, r6
 80180fc:	4432      	add	r2, r6
 80180fe:	4c09      	ldr	r4, [pc, #36]	; (8018124 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 8018100:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8018102:	f8ad 101a 	strh.w	r1, [sp, #26]
 8018106:	a904      	add	r1, sp, #16
 8018108:	9404      	str	r4, [sp, #16]
 801810a:	f88d 7014 	strb.w	r7, [sp, #20]
 801810e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018112:	f8ad 201c 	strh.w	r2, [sp, #28]
 8018116:	6803      	ldr	r3, [r0, #0]
 8018118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801811a:	4798      	blx	r3
 801811c:	b009      	add	sp, #36	; 0x24
 801811e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018120:	08026d28 	.word	0x08026d28
 8018124:	08026d3c 	.word	0x08026d3c

08018128 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8018128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801812c:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 8018130:	b0a1      	sub	sp, #132	; 0x84
 8018132:	4604      	mov	r4, r0
 8018134:	460d      	mov	r5, r1
 8018136:	790b      	ldrb	r3, [r1, #4]
 8018138:	f1b9 0f00 	cmp.w	r9, #0
 801813c:	d00f      	beq.n	801815e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 801813e:	2b00      	cmp	r3, #0
 8018140:	f040 80a2 	bne.w	8018288 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 8018144:	b021      	add	sp, #132	; 0x84
 8018146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801814a:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801814e:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8018152:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8018156:	1d20      	adds	r0, r4, #4
 8018158:	f7fc f8a4 	bl	80142a4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801815c:	e094      	b.n	8018288 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801815e:	2b00      	cmp	r3, #0
 8018160:	d1f0      	bne.n	8018144 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8018162:	4b5f      	ldr	r3, [pc, #380]	; (80182e0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 8018164:	681b      	ldr	r3, [r3, #0]
 8018166:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 801816a:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 801816e:	f1ba 0f03 	cmp.w	sl, #3
 8018172:	ddea      	ble.n	801814a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 8018174:	f1ba 0f0c 	cmp.w	sl, #12
 8018178:	f04f 0303 	mov.w	r3, #3
 801817c:	f04f 0600 	mov.w	r6, #0
 8018180:	4958      	ldr	r1, [pc, #352]	; (80182e4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 8018182:	bfd8      	it	le
 8018184:	f10a 32ff 	addle.w	r2, sl, #4294967295
 8018188:	960a      	str	r6, [sp, #40]	; 0x28
 801818a:	bfd8      	it	le
 801818c:	fb92 f3f3 	sdivle	r3, r2, r3
 8018190:	9301      	str	r3, [sp, #4]
 8018192:	4b55      	ldr	r3, [pc, #340]	; (80182e8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 8018194:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018198:	4b54      	ldr	r3, [pc, #336]	; (80182ec <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 801819a:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801819e:	2248      	movs	r2, #72	; 0x48
 80181a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80181a4:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80181a8:	ab0e      	add	r3, sp, #56	; 0x38
 80181aa:	4618      	mov	r0, r3
 80181ac:	f00b f9c2 	bl	8023534 <memcpy>
 80181b0:	f04f 32ff 	mov.w	r2, #4294967295
 80181b4:	f8cd a008 	str.w	sl, [sp, #8]
 80181b8:	e9cd 2006 	strd	r2, r0, [sp, #24]
 80181bc:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80181c0:	46b3      	mov	fp, r6
 80181c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80181c6:	b29b      	uxth	r3, r3
 80181c8:	9303      	str	r3, [sp, #12]
 80181ca:	2300      	movs	r3, #0
 80181cc:	9a03      	ldr	r2, [sp, #12]
 80181ce:	88ef      	ldrh	r7, [r5, #6]
 80181d0:	a80a      	add	r0, sp, #40	; 0x28
 80181d2:	9309      	str	r3, [sp, #36]	; 0x24
 80181d4:	9b07      	ldr	r3, [sp, #28]
 80181d6:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 80181da:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 80181de:	fb13 f302 	smulbb	r3, r3, r2
 80181e2:	b29b      	uxth	r3, r3
 80181e4:	9304      	str	r3, [sp, #16]
 80181e6:	9b07      	ldr	r3, [sp, #28]
 80181e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80181ec:	685b      	ldr	r3, [r3, #4]
 80181ee:	fb13 f302 	smulbb	r3, r3, r2
 80181f2:	b29b      	uxth	r3, r3
 80181f4:	9305      	str	r3, [sp, #20]
 80181f6:	9b04      	ldr	r3, [sp, #16]
 80181f8:	441f      	add	r7, r3
 80181fa:	9b05      	ldr	r3, [sp, #20]
 80181fc:	4498      	add	r8, r3
 80181fe:	b23f      	sxth	r7, r7
 8018200:	fa0f f888 	sxth.w	r8, r8
 8018204:	4639      	mov	r1, r7
 8018206:	4642      	mov	r2, r8
 8018208:	f7ff ff14 	bl	8018034 <_ZNK8touchgfx4Rect9intersectEss>
 801820c:	b380      	cbz	r0, 8018270 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801820e:	4639      	mov	r1, r7
 8018210:	ab09      	add	r3, sp, #36	; 0x24
 8018212:	4642      	mov	r2, r8
 8018214:	1d20      	adds	r0, r4, #4
 8018216:	f7fc f845 	bl	80142a4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801821a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801821c:	b341      	cbz	r1, 8018270 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801821e:	4549      	cmp	r1, r9
 8018220:	d026      	beq.n	8018270 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 8018222:	a80c      	add	r0, sp, #48	; 0x30
 8018224:	f7ff fde9 	bl	8017dfa <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018228:	2002      	movs	r0, #2
 801822a:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801822e:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8018232:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8018236:	fb92 f2f0 	sdiv	r2, r2, r0
 801823a:	440a      	add	r2, r1
 801823c:	1a99      	subs	r1, r3, r2
 801823e:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8018242:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8018246:	fb93 f3f0 	sdiv	r3, r3, r0
 801824a:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 801824e:	4403      	add	r3, r0
 8018250:	1ad3      	subs	r3, r2, r3
 8018252:	9a06      	ldr	r2, [sp, #24]
 8018254:	435b      	muls	r3, r3
 8018256:	fb01 3301 	mla	r3, r1, r1, r3
 801825a:	4293      	cmp	r3, r2
 801825c:	d208      	bcs.n	8018270 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801825e:	9a04      	ldr	r2, [sp, #16]
 8018260:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8018264:	86a2      	strh	r2, [r4, #52]	; 0x34
 8018266:	9a05      	ldr	r2, [sp, #20]
 8018268:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 801826c:	86e2      	strh	r2, [r4, #54]	; 0x36
 801826e:	9306      	str	r3, [sp, #24]
 8018270:	f10b 0b02 	add.w	fp, fp, #2
 8018274:	f1bb 0f08 	cmp.w	fp, #8
 8018278:	dda7      	ble.n	80181ca <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 801827a:	9b02      	ldr	r3, [sp, #8]
 801827c:	3601      	adds	r6, #1
 801827e:	4453      	add	r3, sl
 8018280:	9302      	str	r3, [sp, #8]
 8018282:	9b01      	ldr	r3, [sp, #4]
 8018284:	42b3      	cmp	r3, r6
 8018286:	d199      	bne.n	80181bc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 8018288:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801828a:	2900      	cmp	r1, #0
 801828c:	f43f af5a 	beq.w	8018144 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8018290:	a80c      	add	r0, sp, #48	; 0x30
 8018292:	2600      	movs	r6, #0
 8018294:	f7ff fdb1 	bl	8017dfa <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018298:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801829c:	88ea      	ldrh	r2, [r5, #6]
 801829e:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 80182a2:	1ad2      	subs	r2, r2, r3
 80182a4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80182a6:	7929      	ldrb	r1, [r5, #4]
 80182a8:	441a      	add	r2, r3
 80182aa:	892b      	ldrh	r3, [r5, #8]
 80182ac:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 80182b0:	a90e      	add	r1, sp, #56	; 0x38
 80182b2:	1a1b      	subs	r3, r3, r0
 80182b4:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 80182b6:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 80182ba:	4403      	add	r3, r0
 80182bc:	480c      	ldr	r0, [pc, #48]	; (80182f0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 80182be:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 80182c2:	900e      	str	r0, [sp, #56]	; 0x38
 80182c4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80182c6:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80182ca:	6803      	ldr	r3, [r0, #0]
 80182cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80182ce:	4798      	blx	r3
 80182d0:	792b      	ldrb	r3, [r5, #4]
 80182d2:	2b00      	cmp	r3, #0
 80182d4:	f43f af36 	beq.w	8018144 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 80182d8:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 80182dc:	e732      	b.n	8018144 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 80182de:	bf00      	nop
 80182e0:	2000bad8 	.word	0x2000bad8
 80182e4:	08024ad0 	.word	0x08024ad0
 80182e8:	2000bacc 	.word	0x2000bacc
 80182ec:	2000bace 	.word	0x2000bace
 80182f0:	08026d28 	.word	0x08026d28

080182f4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 80182f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80182f6:	4604      	mov	r4, r0
 80182f8:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 80182fc:	3201      	adds	r2, #1
 80182fe:	d112      	bne.n	8018326 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8018300:	2500      	movs	r5, #0
 8018302:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8018306:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801830a:	6803      	ldr	r3, [r0, #0]
 801830c:	9500      	str	r5, [sp, #0]
 801830e:	466d      	mov	r5, sp
 8018310:	f8ad 1004 	strh.w	r1, [sp, #4]
 8018314:	f8ad 2006 	strh.w	r2, [sp, #6]
 8018318:	4629      	mov	r1, r5
 801831a:	6a1b      	ldr	r3, [r3, #32]
 801831c:	4798      	blx	r3
 801831e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018322:	e884 0003 	stmia.w	r4, {r0, r1}
 8018326:	4620      	mov	r0, r4
 8018328:	b003      	add	sp, #12
 801832a:	bd30      	pop	{r4, r5, pc}

0801832c <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801832c:	b513      	push	{r0, r1, r4, lr}
 801832e:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8018332:	4604      	mov	r4, r0
 8018334:	3301      	adds	r3, #1
 8018336:	d109      	bne.n	801834c <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8018338:	4601      	mov	r1, r0
 801833a:	4668      	mov	r0, sp
 801833c:	f7ff fd5d 	bl	8017dfa <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018340:	f8bd 3000 	ldrh.w	r3, [sp]
 8018344:	8423      	strh	r3, [r4, #32]
 8018346:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801834a:	8463      	strh	r3, [r4, #34]	; 0x22
 801834c:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8018350:	b002      	add	sp, #8
 8018352:	bd10      	pop	{r4, pc}

08018354 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8018354:	b513      	push	{r0, r1, r4, lr}
 8018356:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801835a:	4604      	mov	r4, r0
 801835c:	3301      	adds	r3, #1
 801835e:	d109      	bne.n	8018374 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8018360:	4601      	mov	r1, r0
 8018362:	4668      	mov	r0, sp
 8018364:	f7ff fd49 	bl	8017dfa <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018368:	f8bd 3000 	ldrh.w	r3, [sp]
 801836c:	8423      	strh	r3, [r4, #32]
 801836e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018372:	8463      	strh	r3, [r4, #34]	; 0x22
 8018374:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8018378:	b002      	add	sp, #8
 801837a:	bd10      	pop	{r4, pc}

0801837c <_ZN8touchgfx6ScreenC1Ev>:
 801837c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801837e:	4605      	mov	r5, r0
 8018380:	4b17      	ldr	r3, [pc, #92]	; (80183e0 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8018382:	2200      	movs	r2, #0
 8018384:	4917      	ldr	r1, [pc, #92]	; (80183e4 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8018386:	f845 3b04 	str.w	r3, [r5], #4
 801838a:	2301      	movs	r3, #1
 801838c:	8102      	strh	r2, [r0, #8]
 801838e:	4604      	mov	r4, r0
 8018390:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 8018394:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8018398:	4b13      	ldr	r3, [pc, #76]	; (80183e8 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801839a:	8142      	strh	r2, [r0, #10]
 801839c:	f9b3 7000 	ldrsh.w	r7, [r3]
 80183a0:	4b12      	ldr	r3, [pc, #72]	; (80183ec <_ZN8touchgfx6ScreenC1Ev+0x70>)
 80183a2:	8182      	strh	r2, [r0, #12]
 80183a4:	81c2      	strh	r2, [r0, #14]
 80183a6:	8202      	strh	r2, [r0, #16]
 80183a8:	8242      	strh	r2, [r0, #18]
 80183aa:	8282      	strh	r2, [r0, #20]
 80183ac:	82c2      	strh	r2, [r0, #22]
 80183ae:	6202      	str	r2, [r0, #32]
 80183b0:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 80183b4:	6342      	str	r2, [r0, #52]	; 0x34
 80183b6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80183ba:	6041      	str	r1, [r0, #4]
 80183bc:	4611      	mov	r1, r2
 80183be:	e9c0 2206 	strd	r2, r2, [r0, #24]
 80183c2:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 80183c6:	4628      	mov	r0, r5
 80183c8:	f7f7 f9fb 	bl	800f7c2 <_ZN8touchgfx8Drawable5setXYEss>
 80183cc:	4639      	mov	r1, r7
 80183ce:	4628      	mov	r0, r5
 80183d0:	f7f7 fa15 	bl	800f7fe <_ZN8touchgfx8Drawable8setWidthEs>
 80183d4:	4628      	mov	r0, r5
 80183d6:	4631      	mov	r1, r6
 80183d8:	f7f7 fa20 	bl	800f81c <_ZN8touchgfx8Drawable9setHeightEs>
 80183dc:	4620      	mov	r0, r4
 80183de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80183e0:	08026d64 	.word	0x08026d64
 80183e4:	08025a54 	.word	0x08025a54
 80183e8:	2000bacc 	.word	0x2000bacc
 80183ec:	2000bace 	.word	0x2000bace

080183f0 <_ZN8touchgfx6Screen4drawEv>:
 80183f0:	4b09      	ldr	r3, [pc, #36]	; (8018418 <_ZN8touchgfx6Screen4drawEv+0x28>)
 80183f2:	b507      	push	{r0, r1, r2, lr}
 80183f4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80183f8:	2100      	movs	r1, #0
 80183fa:	4b08      	ldr	r3, [pc, #32]	; (801841c <_ZN8touchgfx6Screen4drawEv+0x2c>)
 80183fc:	9100      	str	r1, [sp, #0]
 80183fe:	4669      	mov	r1, sp
 8018400:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018404:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018408:	f8ad 3006 	strh.w	r3, [sp, #6]
 801840c:	6803      	ldr	r3, [r0, #0]
 801840e:	689b      	ldr	r3, [r3, #8]
 8018410:	4798      	blx	r3
 8018412:	b003      	add	sp, #12
 8018414:	f85d fb04 	ldr.w	pc, [sp], #4
 8018418:	2000bacc 	.word	0x2000bacc
 801841c:	2000bace 	.word	0x2000bace

08018420 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8018420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018424:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8018428:	b089      	sub	sp, #36	; 0x24
 801842a:	4680      	mov	r8, r0
 801842c:	460c      	mov	r4, r1
 801842e:	4615      	mov	r5, r2
 8018430:	b16b      	cbz	r3, 801844e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8018432:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8018436:	b153      	cbz	r3, 801844e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8018438:	4628      	mov	r0, r5
 801843a:	f7ff ff5b 	bl	80182f4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801843e:	4621      	mov	r1, r4
 8018440:	f7fe ffc2 	bl	80173c8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018444:	69eb      	ldr	r3, [r5, #28]
 8018446:	b928      	cbnz	r0, 8018454 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x34>
 8018448:	461d      	mov	r5, r3
 801844a:	2b00      	cmp	r3, #0
 801844c:	d1f4      	bne.n	8018438 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18>
 801844e:	b009      	add	sp, #36	; 0x24
 8018450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018454:	ae04      	add	r6, sp, #16
 8018456:	2b00      	cmp	r3, #0
 8018458:	d051      	beq.n	80184fe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 801845a:	682b      	ldr	r3, [r5, #0]
 801845c:	4629      	mov	r1, r5
 801845e:	a802      	add	r0, sp, #8
 8018460:	68db      	ldr	r3, [r3, #12]
 8018462:	4798      	blx	r3
 8018464:	4628      	mov	r0, r5
 8018466:	f7ff ff61 	bl	801832c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801846a:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801846e:	4407      	add	r7, r0
 8018470:	4628      	mov	r0, r5
 8018472:	f7ff ff6f 	bl	8018354 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8018476:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801847a:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801847e:	b23f      	sxth	r7, r7
 8018480:	4418      	add	r0, r3
 8018482:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8018486:	4621      	mov	r1, r4
 8018488:	f8ad 2014 	strh.w	r2, [sp, #20]
 801848c:	f8ad 0012 	strh.w	r0, [sp, #18]
 8018490:	4630      	mov	r0, r6
 8018492:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018496:	f8ad 7010 	strh.w	r7, [sp, #16]
 801849a:	f7fb ffb5 	bl	8014408 <_ZN8touchgfx4RectaNERKS0_>
 801849e:	4628      	mov	r0, r5
 80184a0:	f7ff ff28 	bl	80182f4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80184a4:	ab06      	add	r3, sp, #24
 80184a6:	4602      	mov	r2, r0
 80184a8:	e896 0003 	ldmia.w	r6, {r0, r1}
 80184ac:	e883 0003 	stmia.w	r3, {r0, r1}
 80184b0:	4611      	mov	r1, r2
 80184b2:	4618      	mov	r0, r3
 80184b4:	f7fb ffa8 	bl	8014408 <_ZN8touchgfx4RectaNERKS0_>
 80184b8:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80184bc:	f9b4 1000 	ldrsh.w	r1, [r4]
 80184c0:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 80184c4:	4299      	cmp	r1, r3
 80184c6:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 80184ca:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 80184ce:	d10b      	bne.n	80184e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 80184d0:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80184d4:	4552      	cmp	r2, sl
 80184d6:	d107      	bne.n	80184e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 80184d8:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80184dc:	455a      	cmp	r2, fp
 80184de:	d103      	bne.n	80184e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 80184e0:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80184e4:	454a      	cmp	r2, r9
 80184e6:	d00a      	beq.n	80184fe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 80184e8:	f1bb 0f00 	cmp.w	fp, #0
 80184ec:	d002      	beq.n	80184f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd4>
 80184ee:	f1b9 0f00 	cmp.w	r9, #0
 80184f2:	d12e      	bne.n	8018552 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x132>
 80184f4:	69ea      	ldr	r2, [r5, #28]
 80184f6:	4621      	mov	r1, r4
 80184f8:	4640      	mov	r0, r8
 80184fa:	f7ff ff91 	bl	8018420 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80184fe:	4628      	mov	r0, r5
 8018500:	f7ff fef8 	bl	80182f4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8018504:	6861      	ldr	r1, [r4, #4]
 8018506:	4602      	mov	r2, r0
 8018508:	4633      	mov	r3, r6
 801850a:	6820      	ldr	r0, [r4, #0]
 801850c:	c303      	stmia	r3!, {r0, r1}
 801850e:	4611      	mov	r1, r2
 8018510:	4630      	mov	r0, r6
 8018512:	f7fb ff79 	bl	8014408 <_ZN8touchgfx4RectaNERKS0_>
 8018516:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801851a:	2b00      	cmp	r3, #0
 801851c:	d097      	beq.n	801844e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801851e:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8018522:	2b00      	cmp	r3, #0
 8018524:	d093      	beq.n	801844e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8018526:	4628      	mov	r0, r5
 8018528:	f7ff ff00 	bl	801832c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801852c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8018530:	1a18      	subs	r0, r3, r0
 8018532:	f8ad 0010 	strh.w	r0, [sp, #16]
 8018536:	4628      	mov	r0, r5
 8018538:	f7ff ff0c 	bl	8018354 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801853c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8018540:	4631      	mov	r1, r6
 8018542:	1a18      	subs	r0, r3, r0
 8018544:	f8ad 0012 	strh.w	r0, [sp, #18]
 8018548:	4628      	mov	r0, r5
 801854a:	682b      	ldr	r3, [r5, #0]
 801854c:	689b      	ldr	r3, [r3, #8]
 801854e:	4798      	blx	r3
 8018550:	e77d      	b.n	801844e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8018552:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8018556:	fa1f f08a 	uxth.w	r0, sl
 801855a:	4552      	cmp	r2, sl
 801855c:	9000      	str	r0, [sp, #0]
 801855e:	da12      	bge.n	8018586 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x166>
 8018560:	9301      	str	r3, [sp, #4]
 8018562:	9b00      	ldr	r3, [sp, #0]
 8018564:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8018568:	f8ad 2012 	strh.w	r2, [sp, #18]
 801856c:	1a9a      	subs	r2, r3, r2
 801856e:	f8ad 1010 	strh.w	r1, [sp, #16]
 8018572:	4631      	mov	r1, r6
 8018574:	f8ad 0014 	strh.w	r0, [sp, #20]
 8018578:	4640      	mov	r0, r8
 801857a:	f8ad 2016 	strh.w	r2, [sp, #22]
 801857e:	69ea      	ldr	r2, [r5, #28]
 8018580:	f7ff ff4e 	bl	8018420 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018584:	9b01      	ldr	r3, [sp, #4]
 8018586:	f9b4 2000 	ldrsh.w	r2, [r4]
 801858a:	b29f      	uxth	r7, r3
 801858c:	429a      	cmp	r2, r3
 801858e:	da0d      	bge.n	80185ac <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18c>
 8018590:	f8ad 2010 	strh.w	r2, [sp, #16]
 8018594:	1aba      	subs	r2, r7, r2
 8018596:	f8ad a012 	strh.w	sl, [sp, #18]
 801859a:	4631      	mov	r1, r6
 801859c:	f8ad 2014 	strh.w	r2, [sp, #20]
 80185a0:	4640      	mov	r0, r8
 80185a2:	f8ad 9016 	strh.w	r9, [sp, #22]
 80185a6:	69ea      	ldr	r2, [r5, #28]
 80185a8:	f7ff ff3a 	bl	8018420 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80185ac:	8822      	ldrh	r2, [r4, #0]
 80185ae:	445f      	add	r7, fp
 80185b0:	88a3      	ldrh	r3, [r4, #4]
 80185b2:	b2bf      	uxth	r7, r7
 80185b4:	4413      	add	r3, r2
 80185b6:	b23a      	sxth	r2, r7
 80185b8:	b29b      	uxth	r3, r3
 80185ba:	b219      	sxth	r1, r3
 80185bc:	4291      	cmp	r1, r2
 80185be:	dd0d      	ble.n	80185dc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1bc>
 80185c0:	1bdb      	subs	r3, r3, r7
 80185c2:	f8ad 2010 	strh.w	r2, [sp, #16]
 80185c6:	f8ad a012 	strh.w	sl, [sp, #18]
 80185ca:	4631      	mov	r1, r6
 80185cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80185d0:	4640      	mov	r0, r8
 80185d2:	f8ad 9016 	strh.w	r9, [sp, #22]
 80185d6:	69ea      	ldr	r2, [r5, #28]
 80185d8:	f7ff ff22 	bl	8018420 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80185dc:	88e2      	ldrh	r2, [r4, #6]
 80185de:	8863      	ldrh	r3, [r4, #2]
 80185e0:	4413      	add	r3, r2
 80185e2:	9a00      	ldr	r2, [sp, #0]
 80185e4:	444a      	add	r2, r9
 80185e6:	b29b      	uxth	r3, r3
 80185e8:	fa1f f982 	uxth.w	r9, r2
 80185ec:	b219      	sxth	r1, r3
 80185ee:	fa0f f289 	sxth.w	r2, r9
 80185f2:	428a      	cmp	r2, r1
 80185f4:	da83      	bge.n	80184fe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 80185f6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80185fa:	eba3 0309 	sub.w	r3, r3, r9
 80185fe:	f9b4 0000 	ldrsh.w	r0, [r4]
 8018602:	f8ad 1014 	strh.w	r1, [sp, #20]
 8018606:	4631      	mov	r1, r6
 8018608:	f8ad 0010 	strh.w	r0, [sp, #16]
 801860c:	f8ad 2012 	strh.w	r2, [sp, #18]
 8018610:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018614:	69ea      	ldr	r2, [r5, #28]
 8018616:	e76f      	b.n	80184f8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd8>

08018618 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8018618:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801861a:	2300      	movs	r3, #0
 801861c:	aa02      	add	r2, sp, #8
 801861e:	4604      	mov	r4, r0
 8018620:	3004      	adds	r0, #4
 8018622:	f842 3d04 	str.w	r3, [r2, #-4]!
 8018626:	460d      	mov	r5, r1
 8018628:	f7fb ffc5 	bl	80145b6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801862c:	9a01      	ldr	r2, [sp, #4]
 801862e:	b11a      	cbz	r2, 8018638 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 8018630:	4629      	mov	r1, r5
 8018632:	4620      	mov	r0, r4
 8018634:	f7ff fef4 	bl	8018420 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018638:	b003      	add	sp, #12
 801863a:	bd30      	pop	{r4, r5, pc}

0801863c <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801863c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801863e:	4602      	mov	r2, r0
 8018640:	4604      	mov	r4, r0
 8018642:	460d      	mov	r5, r1
 8018644:	466b      	mov	r3, sp
 8018646:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801864a:	6851      	ldr	r1, [r2, #4]
 801864c:	c303      	stmia	r3!, {r0, r1}
 801864e:	4629      	mov	r1, r5
 8018650:	4668      	mov	r0, sp
 8018652:	f7fb fed9 	bl	8014408 <_ZN8touchgfx4RectaNERKS0_>
 8018656:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801865a:	4669      	mov	r1, sp
 801865c:	b123      	cbz	r3, 8018668 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 801865e:	4620      	mov	r0, r4
 8018660:	f7ff ffda 	bl	8018618 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8018664:	b003      	add	sp, #12
 8018666:	bd30      	pop	{r4, r5, pc}
 8018668:	1d20      	adds	r0, r4, #4
 801866a:	f7fb ff6b 	bl	8014544 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801866e:	e7f9      	b.n	8018664 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

08018670 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8018670:	460b      	mov	r3, r1
 8018672:	680a      	ldr	r2, [r1, #0]
 8018674:	1d01      	adds	r1, r0, #4
 8018676:	6952      	ldr	r2, [r2, #20]
 8018678:	4618      	mov	r0, r3
 801867a:	4710      	bx	r2

0801867c <_ZNK8touchgfx9GlyphNode3topEv.isra.2>:
 801867c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8018680:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 8018684:	4b03      	ldr	r3, [pc, #12]	; (8018694 <_ZNK8touchgfx9GlyphNode3topEv.isra.2+0x18>)
 8018686:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801868a:	bf08      	it	eq
 801868c:	2300      	moveq	r3, #0
 801868e:	4308      	orrs	r0, r1
 8018690:	4318      	orrs	r0, r3
 8018692:	4770      	bx	lr
 8018694:	fffffe00 	.word	0xfffffe00

08018698 <_ZN8touchgfx9GlyphNode6setTopEs>:
 8018698:	7b43      	ldrb	r3, [r0, #13]
 801869a:	7201      	strb	r1, [r0, #8]
 801869c:	b289      	uxth	r1, r1
 801869e:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 80186a2:	05ca      	lsls	r2, r1, #23
 80186a4:	bf48      	it	mi
 80186a6:	f043 0320 	orrmi.w	r3, r3, #32
 80186aa:	7343      	strb	r3, [r0, #13]
 80186ac:	058b      	lsls	r3, r1, #22
 80186ae:	bf42      	ittt	mi
 80186b0:	7b43      	ldrbmi	r3, [r0, #13]
 80186b2:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 80186b6:	7343      	strbmi	r3, [r0, #13]
 80186b8:	4770      	bx	lr

080186ba <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 80186ba:	b530      	push	{r4, r5, lr}
 80186bc:	2500      	movs	r5, #0
 80186be:	2401      	movs	r4, #1
 80186c0:	6843      	ldr	r3, [r0, #4]
 80186c2:	b913      	cbnz	r3, 80186ca <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 80186c4:	6803      	ldr	r3, [r0, #0]
 80186c6:	b1f3      	cbz	r3, 8018706 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 80186c8:	6043      	str	r3, [r0, #4]
 80186ca:	7c03      	ldrb	r3, [r0, #16]
 80186cc:	b143      	cbz	r3, 80186e0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 80186ce:	68c3      	ldr	r3, [r0, #12]
 80186d0:	b12b      	cbz	r3, 80186de <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80186d2:	881a      	ldrh	r2, [r3, #0]
 80186d4:	b11a      	cbz	r2, 80186de <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80186d6:	1c9a      	adds	r2, r3, #2
 80186d8:	60c2      	str	r2, [r0, #12]
 80186da:	8818      	ldrh	r0, [r3, #0]
 80186dc:	bd30      	pop	{r4, r5, pc}
 80186de:	7405      	strb	r5, [r0, #16]
 80186e0:	6843      	ldr	r3, [r0, #4]
 80186e2:	8819      	ldrh	r1, [r3, #0]
 80186e4:	b179      	cbz	r1, 8018706 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 80186e6:	1c9a      	adds	r2, r3, #2
 80186e8:	2902      	cmp	r1, #2
 80186ea:	6042      	str	r2, [r0, #4]
 80186ec:	d1f5      	bne.n	80186da <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 80186ee:	6883      	ldr	r3, [r0, #8]
 80186f0:	1d1a      	adds	r2, r3, #4
 80186f2:	6082      	str	r2, [r0, #8]
 80186f4:	681b      	ldr	r3, [r3, #0]
 80186f6:	60c3      	str	r3, [r0, #12]
 80186f8:	2b00      	cmp	r3, #0
 80186fa:	d0e1      	beq.n	80186c0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80186fc:	881b      	ldrh	r3, [r3, #0]
 80186fe:	2b00      	cmp	r3, #0
 8018700:	d0de      	beq.n	80186c0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8018702:	7404      	strb	r4, [r0, #16]
 8018704:	e7dc      	b.n	80186c0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8018706:	2000      	movs	r0, #0
 8018708:	e7e8      	b.n	80186dc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801870a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801870a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801870c:	4605      	mov	r5, r0
 801870e:	4608      	mov	r0, r1
 8018710:	b1f1      	cbz	r1, 8018750 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8018712:	f105 0440 	add.w	r4, r5, #64	; 0x40
 8018716:	460b      	mov	r3, r1
 8018718:	f101 0708 	add.w	r7, r1, #8
 801871c:	4622      	mov	r2, r4
 801871e:	6818      	ldr	r0, [r3, #0]
 8018720:	3308      	adds	r3, #8
 8018722:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8018726:	4626      	mov	r6, r4
 8018728:	42bb      	cmp	r3, r7
 801872a:	c603      	stmia	r6!, {r0, r1}
 801872c:	4634      	mov	r4, r6
 801872e:	d1f6      	bne.n	801871e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8018730:	6818      	ldr	r0, [r3, #0]
 8018732:	6030      	str	r0, [r6, #0]
 8018734:	4610      	mov	r0, r2
 8018736:	889b      	ldrh	r3, [r3, #4]
 8018738:	80b3      	strh	r3, [r6, #4]
 801873a:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 801873e:	015b      	lsls	r3, r3, #5
 8018740:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8018744:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 8018748:	430b      	orrs	r3, r1
 801874a:	425b      	negs	r3, r3
 801874c:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 8018750:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018752 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8018752:	b538      	push	{r3, r4, r5, lr}
 8018754:	460c      	mov	r4, r1
 8018756:	6811      	ldr	r1, [r2, #0]
 8018758:	4610      	mov	r0, r2
 801875a:	68cd      	ldr	r5, [r1, #12]
 801875c:	4619      	mov	r1, r3
 801875e:	47a8      	blx	r5
 8018760:	2800      	cmp	r0, #0
 8018762:	bf08      	it	eq
 8018764:	4620      	moveq	r0, r4
 8018766:	bd38      	pop	{r3, r4, r5, pc}

08018768 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8018768:	b570      	push	{r4, r5, r6, lr}
 801876a:	8810      	ldrh	r0, [r2, #0]
 801876c:	4298      	cmp	r0, r3
 801876e:	d817      	bhi.n	80187a0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8018770:	1e48      	subs	r0, r1, #1
 8018772:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8018776:	4298      	cmp	r0, r3
 8018778:	d312      	bcc.n	80187a0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801877a:	2400      	movs	r4, #0
 801877c:	428c      	cmp	r4, r1
 801877e:	d20f      	bcs.n	80187a0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8018780:	1860      	adds	r0, r4, r1
 8018782:	1040      	asrs	r0, r0, #1
 8018784:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8018788:	0085      	lsls	r5, r0, #2
 801878a:	42b3      	cmp	r3, r6
 801878c:	d902      	bls.n	8018794 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801878e:	3001      	adds	r0, #1
 8018790:	b284      	uxth	r4, r0
 8018792:	e7f3      	b.n	801877c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8018794:	d102      	bne.n	801879c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x34>
 8018796:	442a      	add	r2, r5
 8018798:	8850      	ldrh	r0, [r2, #2]
 801879a:	bd70      	pop	{r4, r5, r6, pc}
 801879c:	b281      	uxth	r1, r0
 801879e:	e7ed      	b.n	801877c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80187a0:	2000      	movs	r0, #0
 80187a2:	e7fa      	b.n	801879a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>

080187a4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>:
 80187a4:	b510      	push	{r4, lr}
 80187a6:	8ac3      	ldrh	r3, [r0, #22]
 80187a8:	428b      	cmp	r3, r1
 80187aa:	d805      	bhi.n	80187b8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x14>
 80187ac:	4b07      	ldr	r3, [pc, #28]	; (80187cc <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x28>)
 80187ae:	21fd      	movs	r1, #253	; 0xfd
 80187b0:	4a07      	ldr	r2, [pc, #28]	; (80187d0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x2c>)
 80187b2:	4808      	ldr	r0, [pc, #32]	; (80187d4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x30>)
 80187b4:	f00a fe40 	bl	8023438 <__assert_func>
 80187b8:	8a83      	ldrh	r3, [r0, #20]
 80187ba:	240a      	movs	r4, #10
 80187bc:	4419      	add	r1, r3
 80187be:	fbb1 f3f4 	udiv	r3, r1, r4
 80187c2:	fb04 1113 	mls	r1, r4, r3, r1
 80187c6:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 80187ca:	bd10      	pop	{r4, pc}
 80187cc:	08026db1 	.word	0x08026db1
 80187d0:	080271e0 	.word	0x080271e0
 80187d4:	08026dbf 	.word	0x08026dbf

080187d8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>:
 80187d8:	b508      	push	{r3, lr}
 80187da:	8ac3      	ldrh	r3, [r0, #22]
 80187dc:	428b      	cmp	r3, r1
 80187de:	d805      	bhi.n	80187ec <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x14>
 80187e0:	4b07      	ldr	r3, [pc, #28]	; (8018800 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x28>)
 80187e2:	21d3      	movs	r1, #211	; 0xd3
 80187e4:	4a07      	ldr	r2, [pc, #28]	; (8018804 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x2c>)
 80187e6:	4808      	ldr	r0, [pc, #32]	; (8018808 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x30>)
 80187e8:	f00a fe26 	bl	8023438 <__assert_func>
 80187ec:	8a83      	ldrh	r3, [r0, #20]
 80187ee:	220a      	movs	r2, #10
 80187f0:	4419      	add	r1, r3
 80187f2:	fbb1 f3f2 	udiv	r3, r1, r2
 80187f6:	fb02 1113 	mls	r1, r2, r3, r1
 80187fa:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 80187fe:	bd08      	pop	{r3, pc}
 8018800:	08026db1 	.word	0x08026db1
 8018804:	08026f30 	.word	0x08026f30
 8018808:	08026dbf 	.word	0x08026dbf

0801880c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801880c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018810:	4604      	mov	r4, r0
 8018812:	4688      	mov	r8, r1
 8018814:	4615      	mov	r5, r2
 8018816:	b94a      	cbnz	r2, 801882c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20>
 8018818:	4691      	mov	r9, r2
 801881a:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801881e:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 8018822:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8018826:	4648      	mov	r0, r9
 8018828:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801882c:	f100 0640 	add.w	r6, r0, #64	; 0x40
 8018830:	8892      	ldrh	r2, [r2, #4]
 8018832:	462b      	mov	r3, r5
 8018834:	f105 0c08 	add.w	ip, r5, #8
 8018838:	46b3      	mov	fp, r6
 801883a:	6818      	ldr	r0, [r3, #0]
 801883c:	3308      	adds	r3, #8
 801883e:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8018842:	4637      	mov	r7, r6
 8018844:	4563      	cmp	r3, ip
 8018846:	c703      	stmia	r7!, {r0, r1}
 8018848:	463e      	mov	r6, r7
 801884a:	d1f6      	bne.n	801883a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x2e>
 801884c:	6818      	ldr	r0, [r3, #0]
 801884e:	46d9      	mov	r9, fp
 8018850:	6038      	str	r0, [r7, #0]
 8018852:	889b      	ldrh	r3, [r3, #4]
 8018854:	80bb      	strh	r3, [r7, #4]
 8018856:	f46f 6363 	mvn.w	r3, #3632	; 0xe30
 801885a:	f894 704d 	ldrb.w	r7, [r4, #77]	; 0x4d
 801885e:	18d3      	adds	r3, r2, r3
 8018860:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 8018864:	b298      	uxth	r0, r3
 8018866:	f40a 7180 	and.w	r1, sl, #256	; 0x100
 801886a:	f894 a047 	ldrb.w	sl, [r4, #71]	; 0x47
 801886e:	281d      	cmp	r0, #29
 8018870:	ea4a 0a01 	orr.w	sl, sl, r1
 8018874:	fa1f f68a 	uxth.w	r6, sl
 8018878:	d842      	bhi.n	8018900 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf4>
 801887a:	2301      	movs	r3, #1
 801887c:	4950      	ldr	r1, [pc, #320]	; (80189c0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b4>)
 801887e:	ea4f 0aea 	mov.w	sl, sl, asr #3
 8018882:	4083      	lsls	r3, r0
 8018884:	420b      	tst	r3, r1
 8018886:	d114      	bne.n	80188b2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 8018888:	f413 7f60 	tst.w	r3, #896	; 0x380
 801888c:	d03c      	beq.n	8018908 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xfc>
 801888e:	fa1f fa8a 	uxth.w	sl, sl
 8018892:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8018896:	4658      	mov	r0, fp
 8018898:	eba1 010a 	sub.w	r1, r1, sl
 801889c:	b209      	sxth	r1, r1
 801889e:	f7ff fefb 	bl	8018698 <_ZN8touchgfx9GlyphNode6setTopEs>
 80188a2:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 80188a6:	1b86      	subs	r6, r0, r6
 80188a8:	eba6 0a0a 	sub.w	sl, r6, sl
 80188ac:	f8a4 a050 	strh.w	sl, [r4, #80]	; 0x50
 80188b0:	e7b9      	b.n	8018826 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 80188b2:	2100      	movs	r1, #0
 80188b4:	f104 001a 	add.w	r0, r4, #26
 80188b8:	f7ff ff8e 	bl	80187d8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 80188bc:	f640 6333 	movw	r3, #3635	; 0xe33
 80188c0:	4601      	mov	r1, r0
 80188c2:	4298      	cmp	r0, r3
 80188c4:	d10a      	bne.n	80188dc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd0>
 80188c6:	f8d8 3000 	ldr.w	r3, [r8]
 80188ca:	4640      	mov	r0, r8
 80188cc:	68db      	ldr	r3, [r3, #12]
 80188ce:	4798      	blx	r3
 80188d0:	7b41      	ldrb	r1, [r0, #13]
 80188d2:	7a00      	ldrb	r0, [r0, #8]
 80188d4:	f7ff fed2 	bl	801867c <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 80188d8:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 80188dc:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 80188e0:	4658      	mov	r0, fp
 80188e2:	4431      	add	r1, r6
 80188e4:	4451      	add	r1, sl
 80188e6:	b209      	sxth	r1, r1
 80188e8:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
 80188ec:	f7ff fed4 	bl	8018698 <_ZN8touchgfx9GlyphNode6setTopEs>
 80188f0:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 80188f4:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 80188f8:	1a9b      	subs	r3, r3, r2
 80188fa:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 80188fe:	e792      	b.n	8018826 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8018900:	f640 631b 	movw	r3, #3611	; 0xe1b
 8018904:	429a      	cmp	r2, r3
 8018906:	d005      	beq.n	8018914 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x108>
 8018908:	f022 0302 	bic.w	r3, r2, #2
 801890c:	f640 611d 	movw	r1, #3613	; 0xe1d
 8018910:	428b      	cmp	r3, r1
 8018912:	d119      	bne.n	8018948 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13c>
 8018914:	1e53      	subs	r3, r2, #1
 8018916:	4629      	mov	r1, r5
 8018918:	4642      	mov	r2, r8
 801891a:	4620      	mov	r0, r4
 801891c:	b29b      	uxth	r3, r3
 801891e:	f7ff ff18 	bl	8018752 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8018922:	7b41      	ldrb	r1, [r0, #13]
 8018924:	7a00      	ldrb	r0, [r0, #8]
 8018926:	f7ff fea9 	bl	801867c <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801892a:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 801892e:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 8018932:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018936:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801893a:	4313      	orrs	r3, r2
 801893c:	115a      	asrs	r2, r3, #5
 801893e:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8018942:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8018946:	e02e      	b.n	80189a6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 8018948:	4639      	mov	r1, r7
 801894a:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 801894e:	f7ff fe95 	bl	801867c <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 8018952:	f640 6109 	movw	r1, #3593	; 0xe09
 8018956:	f022 0310 	bic.w	r3, r2, #16
 801895a:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801895e:	428b      	cmp	r3, r1
 8018960:	d003      	beq.n	801896a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15e>
 8018962:	f640 6313 	movw	r3, #3603	; 0xe13
 8018966:	429a      	cmp	r2, r3
 8018968:	d127      	bne.n	80189ba <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ae>
 801896a:	b27f      	sxtb	r7, r7
 801896c:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8018970:	4629      	mov	r1, r5
 8018972:	4620      	mov	r0, r4
 8018974:	f407 7780 	and.w	r7, r7, #256	; 0x100
 8018978:	431f      	orrs	r7, r3
 801897a:	f640 6313 	movw	r3, #3603	; 0xe13
 801897e:	429a      	cmp	r2, r3
 8018980:	bf14      	ite	ne
 8018982:	f102 33ff 	addne.w	r3, r2, #4294967295
 8018986:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801898a:	4642      	mov	r2, r8
 801898c:	bf18      	it	ne
 801898e:	b29b      	uxthne	r3, r3
 8018990:	f7ff fedf 	bl	8018752 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8018994:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8018998:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801899c:	7a83      	ldrb	r3, [r0, #10]
 801899e:	4313      	orrs	r3, r2
 80189a0:	1aff      	subs	r7, r7, r3
 80189a2:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
 80189a6:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 80189aa:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 80189ae:	f7ff fe65 	bl	801867c <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 80189b2:	1b80      	subs	r0, r0, r6
 80189b4:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
 80189b8:	e735      	b.n	8018826 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 80189ba:	2300      	movs	r3, #0
 80189bc:	e7c1      	b.n	8018942 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x136>
 80189be:	bf00      	nop
 80189c0:	3fc00079 	.word	0x3fc00079

080189c4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 80189c4:	3a01      	subs	r2, #1
 80189c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80189ca:	b292      	uxth	r2, r2
 80189cc:	460c      	mov	r4, r1
 80189ce:	f64f 76ff 	movw	r6, #65535	; 0xffff
 80189d2:	42b2      	cmp	r2, r6
 80189d4:	d018      	beq.n	8018a08 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x44>
 80189d6:	8b01      	ldrh	r1, [r0, #24]
 80189d8:	f834 5b02 	ldrh.w	r5, [r4], #2
 80189dc:	4291      	cmp	r1, r2
 80189de:	d805      	bhi.n	80189ec <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x28>
 80189e0:	4b13      	ldr	r3, [pc, #76]	; (8018a30 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x6c>)
 80189e2:	21d3      	movs	r1, #211	; 0xd3
 80189e4:	4a13      	ldr	r2, [pc, #76]	; (8018a34 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x70>)
 80189e6:	4814      	ldr	r0, [pc, #80]	; (8018a38 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x74>)
 80189e8:	f00a fd26 	bl	8023438 <__assert_func>
 80189ec:	8ac1      	ldrh	r1, [r0, #22]
 80189ee:	4411      	add	r1, r2
 80189f0:	3a01      	subs	r2, #1
 80189f2:	f001 0101 	and.w	r1, r1, #1
 80189f6:	b292      	uxth	r2, r2
 80189f8:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80189fc:	8a49      	ldrh	r1, [r1, #18]
 80189fe:	428d      	cmp	r5, r1
 8018a00:	d0e7      	beq.n	80189d2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xe>
 8018a02:	2000      	movs	r0, #0
 8018a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a08:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 8018a0c:	2600      	movs	r6, #0
 8018a0e:	f100 051a 	add.w	r5, r0, #26
 8018a12:	441f      	add	r7, r3
 8018a14:	b2b1      	uxth	r1, r6
 8018a16:	42b9      	cmp	r1, r7
 8018a18:	da08      	bge.n	8018a2c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x68>
 8018a1a:	f834 8016 	ldrh.w	r8, [r4, r6, lsl #1]
 8018a1e:	4628      	mov	r0, r5
 8018a20:	f7ff feda 	bl	80187d8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8018a24:	3601      	adds	r6, #1
 8018a26:	4540      	cmp	r0, r8
 8018a28:	d0f4      	beq.n	8018a14 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x50>
 8018a2a:	e7ea      	b.n	8018a02 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 8018a2c:	2001      	movs	r0, #1
 8018a2e:	e7e9      	b.n	8018a04 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 8018a30:	08026db1 	.word	0x08026db1
 8018a34:	08027340 	.word	0x08027340
 8018a38:	08026dbf 	.word	0x08026dbf

08018a3c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>:
 8018a3c:	b538      	push	{r3, r4, r5, lr}
 8018a3e:	8ac3      	ldrh	r3, [r0, #22]
 8018a40:	428b      	cmp	r3, r1
 8018a42:	d205      	bcs.n	8018a50 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x14>
 8018a44:	4b08      	ldr	r3, [pc, #32]	; (8018a68 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x2c>)
 8018a46:	21d8      	movs	r1, #216	; 0xd8
 8018a48:	4a08      	ldr	r2, [pc, #32]	; (8018a6c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x30>)
 8018a4a:	4809      	ldr	r0, [pc, #36]	; (8018a70 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x34>)
 8018a4c:	f00a fcf4 	bl	8023438 <__assert_func>
 8018a50:	8a82      	ldrh	r2, [r0, #20]
 8018a52:	250a      	movs	r5, #10
 8018a54:	1a5b      	subs	r3, r3, r1
 8018a56:	440a      	add	r2, r1
 8018a58:	82c3      	strh	r3, [r0, #22]
 8018a5a:	fbb2 f4f5 	udiv	r4, r2, r5
 8018a5e:	fb05 2214 	mls	r2, r5, r4, r2
 8018a62:	8282      	strh	r2, [r0, #20]
 8018a64:	bd38      	pop	{r3, r4, r5, pc}
 8018a66:	bf00      	nop
 8018a68:	08026da5 	.word	0x08026da5
 8018a6c:	0802715c 	.word	0x0802715c
 8018a70:	08026dbf 	.word	0x08026dbf

08018a74 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>:
 8018a74:	b538      	push	{r3, r4, r5, lr}
 8018a76:	8ac3      	ldrh	r3, [r0, #22]
 8018a78:	2b09      	cmp	r3, #9
 8018a7a:	d905      	bls.n	8018a88 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x14>
 8018a7c:	4b08      	ldr	r3, [pc, #32]	; (8018aa0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x2c>)
 8018a7e:	21f7      	movs	r1, #247	; 0xf7
 8018a80:	4a08      	ldr	r2, [pc, #32]	; (8018aa4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x30>)
 8018a82:	4809      	ldr	r0, [pc, #36]	; (8018aa8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x34>)
 8018a84:	f00a fcd8 	bl	8023438 <__assert_func>
 8018a88:	8a82      	ldrh	r2, [r0, #20]
 8018a8a:	250a      	movs	r5, #10
 8018a8c:	441a      	add	r2, r3
 8018a8e:	3301      	adds	r3, #1
 8018a90:	fbb2 f4f5 	udiv	r4, r2, r5
 8018a94:	fb05 2214 	mls	r2, r5, r4, r2
 8018a98:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
 8018a9c:	82c3      	strh	r3, [r0, #22]
 8018a9e:	bd38      	pop	{r3, r4, r5, pc}
 8018aa0:	08026d99 	.word	0x08026d99
 8018aa4:	080270ad 	.word	0x080270ad
 8018aa8:	08026dbf 	.word	0x08026dbf

08018aac <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8018aac:	b538      	push	{r3, r4, r5, lr}
 8018aae:	4604      	mov	r4, r0
 8018ab0:	f100 051a 	add.w	r5, r0, #26
 8018ab4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8018ab6:	2b0a      	cmp	r3, #10
 8018ab8:	d01c      	beq.n	8018af4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 8018aba:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8018abc:	b962      	cbnz	r2, 8018ad8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 8018abe:	f104 051a 	add.w	r5, r4, #26
 8018ac2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8018ac4:	2b0a      	cmp	r3, #10
 8018ac6:	d015      	beq.n	8018af4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 8018ac8:	4620      	mov	r0, r4
 8018aca:	f7ff fdf6 	bl	80186ba <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8018ace:	4601      	mov	r1, r0
 8018ad0:	4628      	mov	r0, r5
 8018ad2:	f7ff ffcf 	bl	8018a74 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 8018ad6:	e7f4      	b.n	8018ac2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x16>
 8018ad8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8018ada:	3a01      	subs	r2, #1
 8018adc:	4628      	mov	r0, r5
 8018ade:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 8018ae2:	3301      	adds	r3, #1
 8018ae4:	f003 0301 	and.w	r3, r3, #1
 8018ae8:	8e49      	ldrh	r1, [r1, #50]	; 0x32
 8018aea:	8722      	strh	r2, [r4, #56]	; 0x38
 8018aec:	86e3      	strh	r3, [r4, #54]	; 0x36
 8018aee:	f7ff ffc1 	bl	8018a74 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 8018af2:	e7df      	b.n	8018ab4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8>
 8018af4:	bd38      	pop	{r3, r4, r5, pc}
	...

08018af8 <_ZN8touchgfx12TextProvider18initializeInternalEv>:
 8018af8:	2300      	movs	r3, #0
 8018afa:	b510      	push	{r4, lr}
 8018afc:	6043      	str	r3, [r0, #4]
 8018afe:	4604      	mov	r4, r0
 8018b00:	60c3      	str	r3, [r0, #12]
 8018b02:	7403      	strb	r3, [r0, #16]
 8018b04:	8603      	strh	r3, [r0, #48]	; 0x30
 8018b06:	8303      	strh	r3, [r0, #24]
 8018b08:	8703      	strh	r3, [r0, #56]	; 0x38
 8018b0a:	f7ff ffcf 	bl	8018aac <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8018b0e:	4a0a      	ldr	r2, [pc, #40]	; (8018b38 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x40>)
 8018b10:	6813      	ldr	r3, [r2, #0]
 8018b12:	4611      	mov	r1, r2
 8018b14:	b913      	cbnz	r3, 8018b1c <_ZN8touchgfx12TextProvider18initializeInternalEv+0x24>
 8018b16:	6852      	ldr	r2, [r2, #4]
 8018b18:	07d0      	lsls	r0, r2, #31
 8018b1a:	d50b      	bpl.n	8018b34 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x3c>
 8018b1c:	6849      	ldr	r1, [r1, #4]
 8018b1e:	104a      	asrs	r2, r1, #1
 8018b20:	07c9      	lsls	r1, r1, #31
 8018b22:	eb04 0002 	add.w	r0, r4, r2
 8018b26:	bf48      	it	mi
 8018b28:	58a2      	ldrmi	r2, [r4, r2]
 8018b2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018b2e:	bf48      	it	mi
 8018b30:	58d3      	ldrmi	r3, [r2, r3]
 8018b32:	4718      	bx	r3
 8018b34:	bd10      	pop	{r4, pc}
 8018b36:	bf00      	nop
 8018b38:	200085b0 	.word	0x200085b0

08018b3c <_ZN8touchgfx12TextProviderC1Ev>:
 8018b3c:	2300      	movs	r3, #0
 8018b3e:	2201      	movs	r2, #1
 8018b40:	b510      	push	{r4, lr}
 8018b42:	4604      	mov	r4, r0
 8018b44:	60c3      	str	r3, [r0, #12]
 8018b46:	7403      	strb	r3, [r0, #16]
 8018b48:	82c3      	strh	r3, [r0, #22]
 8018b4a:	8303      	strh	r3, [r0, #24]
 8018b4c:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8018b4e:	8603      	strh	r3, [r0, #48]	; 0x30
 8018b50:	86c3      	strh	r3, [r0, #54]	; 0x36
 8018b52:	8703      	strh	r3, [r0, #56]	; 0x38
 8018b54:	63c3      	str	r3, [r0, #60]	; 0x3c
 8018b56:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 8018b5a:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 8018b5e:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 8018b62:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 8018b66:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 8018b6a:	e9c0 3300 	strd	r3, r3, [r0]
 8018b6e:	f7ff ffc3 	bl	8018af8 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8018b72:	4620      	mov	r0, r4
 8018b74:	bd10      	pop	{r4, pc}

08018b76 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 8018b76:	b410      	push	{r4}
 8018b78:	6082      	str	r2, [r0, #8]
 8018b7a:	6001      	str	r1, [r0, #0]
 8018b7c:	63c3      	str	r3, [r0, #60]	; 0x3c
 8018b7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018b82:	f7ff bfb9 	b.w	8018af8 <_ZN8touchgfx12TextProvider18initializeInternalEv>
	...

08018b88 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>:
 8018b88:	b508      	push	{r3, lr}
 8018b8a:	88c2      	ldrh	r2, [r0, #6]
 8018b8c:	440a      	add	r2, r1
 8018b8e:	2a02      	cmp	r2, #2
 8018b90:	dd05      	ble.n	8018b9e <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x16>
 8018b92:	4b06      	ldr	r3, [pc, #24]	; (8018bac <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x24>)
 8018b94:	21ec      	movs	r1, #236	; 0xec
 8018b96:	4a06      	ldr	r2, [pc, #24]	; (8018bb0 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x28>)
 8018b98:	4806      	ldr	r0, [pc, #24]	; (8018bb4 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x2c>)
 8018b9a:	f00a fc4d 	bl	8023438 <__assert_func>
 8018b9e:	8883      	ldrh	r3, [r0, #4]
 8018ba0:	80c2      	strh	r2, [r0, #6]
 8018ba2:	1a59      	subs	r1, r3, r1
 8018ba4:	f001 0101 	and.w	r1, r1, #1
 8018ba8:	8081      	strh	r1, [r0, #4]
 8018baa:	bd08      	pop	{r3, pc}
 8018bac:	08026deb 	.word	0x08026deb
 8018bb0:	080272b9 	.word	0x080272b9
 8018bb4:	08026dbf 	.word	0x08026dbf

08018bb8 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>:
 8018bb8:	b508      	push	{r3, lr}
 8018bba:	88c3      	ldrh	r3, [r0, #6]
 8018bbc:	428b      	cmp	r3, r1
 8018bbe:	d805      	bhi.n	8018bcc <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x14>
 8018bc0:	4b06      	ldr	r3, [pc, #24]	; (8018bdc <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x24>)
 8018bc2:	21fd      	movs	r1, #253	; 0xfd
 8018bc4:	4a06      	ldr	r2, [pc, #24]	; (8018be0 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x28>)
 8018bc6:	4807      	ldr	r0, [pc, #28]	; (8018be4 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x2c>)
 8018bc8:	f00a fc36 	bl	8023438 <__assert_func>
 8018bcc:	8883      	ldrh	r3, [r0, #4]
 8018bce:	4419      	add	r1, r3
 8018bd0:	f001 0101 	and.w	r1, r1, #1
 8018bd4:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 8018bd8:	bd08      	pop	{r3, pc}
 8018bda:	bf00      	nop
 8018bdc:	08026db1 	.word	0x08026db1
 8018be0:	08027411 	.word	0x08027411
 8018be4:	08026dbf 	.word	0x08026dbf

08018be8 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8018be8:	b570      	push	{r4, r5, r6, lr}
 8018bea:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 8018bec:	4604      	mov	r4, r0
 8018bee:	b92a      	cbnz	r2, 8018bfc <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 8018bf0:	4b12      	ldr	r3, [pc, #72]	; (8018c3c <_ZN8touchgfx12TextProvider11getNextCharEv+0x54>)
 8018bf2:	21de      	movs	r1, #222	; 0xde
 8018bf4:	4a12      	ldr	r2, [pc, #72]	; (8018c40 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 8018bf6:	4813      	ldr	r0, [pc, #76]	; (8018c44 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 8018bf8:	f00a fc1e 	bl	8023438 <__assert_func>
 8018bfc:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8018bfe:	260a      	movs	r6, #10
 8018c00:	3a01      	subs	r2, #1
 8018c02:	3412      	adds	r4, #18
 8018c04:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 8018c08:	3301      	adds	r3, #1
 8018c0a:	8b4d      	ldrh	r5, [r1, #26]
 8018c0c:	8602      	strh	r2, [r0, #48]	; 0x30
 8018c0e:	fbb3 f1f6 	udiv	r1, r3, r6
 8018c12:	fb06 3311 	mls	r3, r6, r1, r3
 8018c16:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8018c18:	f7ff ff48 	bl	8018aac <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8018c1c:	88e3      	ldrh	r3, [r4, #6]
 8018c1e:	2101      	movs	r1, #1
 8018c20:	2b02      	cmp	r3, #2
 8018c22:	bf04      	itt	eq
 8018c24:	2301      	moveq	r3, #1
 8018c26:	80e3      	strheq	r3, [r4, #6]
 8018c28:	4620      	mov	r0, r4
 8018c2a:	f7ff ffad 	bl	8018b88 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 8018c2e:	4620      	mov	r0, r4
 8018c30:	462a      	mov	r2, r5
 8018c32:	2100      	movs	r1, #0
 8018c34:	f7ff ffc0 	bl	8018bb8 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 8018c38:	4628      	mov	r0, r5
 8018c3a:	bd70      	pop	{r4, r5, r6, pc}
 8018c3c:	08026d90 	.word	0x08026d90
 8018c40:	08027002 	.word	0x08027002
 8018c44:	08026dbf 	.word	0x08026dbf

08018c48 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8018c48:	428a      	cmp	r2, r1
 8018c4a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c4e:	4604      	mov	r4, r0
 8018c50:	460e      	mov	r6, r1
 8018c52:	4615      	mov	r5, r2
 8018c54:	469a      	mov	sl, r3
 8018c56:	d92b      	bls.n	8018cb0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x68>
 8018c58:	1a57      	subs	r7, r2, r1
 8018c5a:	f04f 0800 	mov.w	r8, #0
 8018c5e:	f100 0932 	add.w	r9, r0, #50	; 0x32
 8018c62:	f04f 0b0a 	mov.w	fp, #10
 8018c66:	b2bf      	uxth	r7, r7
 8018c68:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8018c6a:	b92b      	cbnz	r3, 8018c78 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x30>
 8018c6c:	4b24      	ldr	r3, [pc, #144]	; (8018d00 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xb8>)
 8018c6e:	21e6      	movs	r1, #230	; 0xe6
 8018c70:	4a24      	ldr	r2, [pc, #144]	; (8018d04 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xbc>)
 8018c72:	4825      	ldr	r0, [pc, #148]	; (8018d08 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc0>)
 8018c74:	f00a fbe0 	bl	8023438 <__assert_func>
 8018c78:	3b01      	subs	r3, #1
 8018c7a:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8018c7c:	2101      	movs	r1, #1
 8018c7e:	4648      	mov	r0, r9
 8018c80:	b29b      	uxth	r3, r3
 8018c82:	f108 0801 	add.w	r8, r8, #1
 8018c86:	441a      	add	r2, r3
 8018c88:	8623      	strh	r3, [r4, #48]	; 0x30
 8018c8a:	fbb2 f3fb 	udiv	r3, r2, fp
 8018c8e:	fb0b 2313 	mls	r3, fp, r3, r2
 8018c92:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8018c96:	8b5a      	ldrh	r2, [r3, #26]
 8018c98:	9201      	str	r2, [sp, #4]
 8018c9a:	f7ff ff75 	bl	8018b88 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 8018c9e:	9a01      	ldr	r2, [sp, #4]
 8018ca0:	2100      	movs	r1, #0
 8018ca2:	4648      	mov	r0, r9
 8018ca4:	f7ff ff88 	bl	8018bb8 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 8018ca8:	fa1f f388 	uxth.w	r3, r8
 8018cac:	429f      	cmp	r7, r3
 8018cae:	d8db      	bhi.n	8018c68 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x20>
 8018cb0:	f104 071a 	add.w	r7, r4, #26
 8018cb4:	4631      	mov	r1, r6
 8018cb6:	260a      	movs	r6, #10
 8018cb8:	4638      	mov	r0, r7
 8018cba:	f7ff febf 	bl	8018a3c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 8018cbe:	b1c5      	cbz	r5, 8018cf2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 8018cc0:	3d01      	subs	r5, #1
 8018cc2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8018cc4:	b2ad      	uxth	r5, r5
 8018cc6:	2b09      	cmp	r3, #9
 8018cc8:	f83a 2015 	ldrh.w	r2, [sl, r5, lsl #1]
 8018ccc:	d903      	bls.n	8018cd6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8e>
 8018cce:	4b0f      	ldr	r3, [pc, #60]	; (8018d0c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc4>)
 8018cd0:	21ec      	movs	r1, #236	; 0xec
 8018cd2:	4a0f      	ldr	r2, [pc, #60]	; (8018d10 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc8>)
 8018cd4:	e7cd      	b.n	8018c72 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2a>
 8018cd6:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8018cd8:	3301      	adds	r3, #1
 8018cda:	3109      	adds	r1, #9
 8018cdc:	8623      	strh	r3, [r4, #48]	; 0x30
 8018cde:	fbb1 f0f6 	udiv	r0, r1, r6
 8018ce2:	fb06 1110 	mls	r1, r6, r0, r1
 8018ce6:	4638      	mov	r0, r7
 8018ce8:	85e1      	strh	r1, [r4, #46]	; 0x2e
 8018cea:	2100      	movs	r1, #0
 8018cec:	f7ff fd5a 	bl	80187a4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 8018cf0:	e7e5      	b.n	8018cbe <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x76>
 8018cf2:	4620      	mov	r0, r4
 8018cf4:	b003      	add	sp, #12
 8018cf6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cfa:	f7ff bed7 	b.w	8018aac <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8018cfe:	bf00      	nop
 8018d00:	08026d90 	.word	0x08026d90
 8018d04:	08026e86 	.word	0x08026e86
 8018d08:	08026dbf 	.word	0x08026dbf
 8018d0c:	08026deb 	.word	0x08026deb
 8018d10:	08026dfe 	.word	0x08026dfe

08018d14 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8018d14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d18:	4605      	mov	r5, r0
 8018d1a:	4616      	mov	r6, r2
 8018d1c:	1c8c      	adds	r4, r1, #2
 8018d1e:	8809      	ldrh	r1, [r1, #0]
 8018d20:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8018d24:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8018d28:	42b3      	cmp	r3, r6
 8018d2a:	d124      	bne.n	8018d76 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8018d2c:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8018d30:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8018d34:	f001 070f 	and.w	r7, r1, #15
 8018d38:	4652      	mov	r2, sl
 8018d3a:	f8cd 8000 	str.w	r8, [sp]
 8018d3e:	464b      	mov	r3, r9
 8018d40:	4621      	mov	r1, r4
 8018d42:	4628      	mov	r0, r5
 8018d44:	f7ff fe3e 	bl	80189c4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8018d48:	4683      	mov	fp, r0
 8018d4a:	b168      	cbz	r0, 8018d68 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8018d4c:	eb0a 0109 	add.w	r1, sl, r9
 8018d50:	463a      	mov	r2, r7
 8018d52:	4628      	mov	r0, r5
 8018d54:	4441      	add	r1, r8
 8018d56:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8018d5a:	4649      	mov	r1, r9
 8018d5c:	f7ff ff74 	bl	8018c48 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8018d60:	4658      	mov	r0, fp
 8018d62:	b003      	add	sp, #12
 8018d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d68:	eb07 010a 	add.w	r1, r7, sl
 8018d6c:	4449      	add	r1, r9
 8018d6e:	4441      	add	r1, r8
 8018d70:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8018d74:	e7d2      	b.n	8018d1c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8018d76:	f04f 0b00 	mov.w	fp, #0
 8018d7a:	e7f1      	b.n	8018d60 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08018d7c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8018d7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018d80:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8018d82:	4604      	mov	r4, r0
 8018d84:	260b      	movs	r6, #11
 8018d86:	f100 091a 	add.w	r9, r0, #26
 8018d8a:	886f      	ldrh	r7, [r5, #2]
 8018d8c:	087f      	lsrs	r7, r7, #1
 8018d8e:	3e01      	subs	r6, #1
 8018d90:	d013      	beq.n	8018dba <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 8018d92:	2100      	movs	r1, #0
 8018d94:	4648      	mov	r0, r9
 8018d96:	f7ff fd1f 	bl	80187d8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8018d9a:	462a      	mov	r2, r5
 8018d9c:	4680      	mov	r8, r0
 8018d9e:	4603      	mov	r3, r0
 8018da0:	4639      	mov	r1, r7
 8018da2:	4620      	mov	r0, r4
 8018da4:	f7ff fce0 	bl	8018768 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8018da8:	b138      	cbz	r0, 8018dba <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 8018daa:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8018dae:	4642      	mov	r2, r8
 8018db0:	4620      	mov	r0, r4
 8018db2:	f7ff ffaf 	bl	8018d14 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8018db6:	2800      	cmp	r0, #0
 8018db8:	d1e9      	bne.n	8018d8e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x12>
 8018dba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08018dc0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:
 8018dc0:	4b1e      	ldr	r3, [pc, #120]	; (8018e3c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8018dc2:	b570      	push	{r4, r5, r6, lr}
 8018dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018dc8:	4604      	mov	r4, r0
 8018dca:	f003 0501 	and.w	r5, r3, #1
 8018dce:	b902      	cbnz	r2, 8018dd2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
 8018dd0:	b165      	cbz	r5, 8018dec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2c>
 8018dd2:	105b      	asrs	r3, r3, #1
 8018dd4:	f104 061a 	add.w	r6, r4, #26
 8018dd8:	18e0      	adds	r0, r4, r3
 8018dda:	b10d      	cbz	r5, 8018de0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x20>
 8018ddc:	58e3      	ldr	r3, [r4, r3]
 8018dde:	589a      	ldr	r2, [r3, r2]
 8018de0:	4790      	blx	r2
 8018de2:	2100      	movs	r1, #0
 8018de4:	4602      	mov	r2, r0
 8018de6:	4630      	mov	r0, r6
 8018de8:	f7ff fcdc 	bl	80187a4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 8018dec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018dee:	b303      	cbz	r3, 8018e32 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 8018df0:	f104 051a 	add.w	r5, r4, #26
 8018df4:	2100      	movs	r1, #0
 8018df6:	4628      	mov	r0, r5
 8018df8:	f7ff fcee 	bl	80187d8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8018dfc:	b1c8      	cbz	r0, 8018e32 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 8018dfe:	4620      	mov	r0, r4
 8018e00:	f7ff ffbc 	bl	8018d7c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
 8018e04:	2101      	movs	r1, #1
 8018e06:	4628      	mov	r0, r5
 8018e08:	f7ff fce6 	bl	80187d8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8018e0c:	f640 133f 	movw	r3, #2367	; 0x93f
 8018e10:	4606      	mov	r6, r0
 8018e12:	4298      	cmp	r0, r3
 8018e14:	d10d      	bne.n	8018e32 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 8018e16:	2100      	movs	r1, #0
 8018e18:	4628      	mov	r0, r5
 8018e1a:	f7ff fcdd 	bl	80187d8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8018e1e:	2101      	movs	r1, #1
 8018e20:	4602      	mov	r2, r0
 8018e22:	4628      	mov	r0, r5
 8018e24:	f7ff fcbe 	bl	80187a4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 8018e28:	4632      	mov	r2, r6
 8018e2a:	2100      	movs	r1, #0
 8018e2c:	4628      	mov	r0, r5
 8018e2e:	f7ff fcb9 	bl	80187a4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 8018e32:	4620      	mov	r0, r4
 8018e34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018e38:	f7ff bed6 	b.w	8018be8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018e3c:	200085b8 	.word	0x200085b8

08018e40 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8018e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e42:	4617      	mov	r7, r2
 8018e44:	461e      	mov	r6, r3
 8018e46:	4605      	mov	r5, r0
 8018e48:	f7ff ffba 	bl	8018dc0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018e4c:	683b      	ldr	r3, [r7, #0]
 8018e4e:	4604      	mov	r4, r0
 8018e50:	4601      	mov	r1, r0
 8018e52:	4638      	mov	r0, r7
 8018e54:	68db      	ldr	r3, [r3, #12]
 8018e56:	4798      	blx	r3
 8018e58:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 8018e5c:	4602      	mov	r2, r0
 8018e5e:	6030      	str	r0, [r6, #0]
 8018e60:	b29b      	uxth	r3, r3
 8018e62:	2b7f      	cmp	r3, #127	; 0x7f
 8018e64:	d813      	bhi.n	8018e8e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4e>
 8018e66:	4639      	mov	r1, r7
 8018e68:	4628      	mov	r0, r5
 8018e6a:	f7ff fccf 	bl	801880c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8018e6e:	6030      	str	r0, [r6, #0]
 8018e70:	6833      	ldr	r3, [r6, #0]
 8018e72:	b143      	cbz	r3, 8018e86 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8018e74:	f993 200d 	ldrsb.w	r2, [r3, #13]
 8018e78:	7a9b      	ldrb	r3, [r3, #10]
 8018e7a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8018e7e:	4313      	orrs	r3, r2
 8018e80:	bf0c      	ite	eq
 8018e82:	2301      	moveq	r3, #1
 8018e84:	2300      	movne	r3, #0
 8018e86:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8018e8a:	4620      	mov	r0, r4
 8018e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018e8e:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 8018e92:	2b00      	cmp	r3, #0
 8018e94:	d0ec      	beq.n	8018e70 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 8018e96:	f640 1302 	movw	r3, #2306	; 0x902
 8018e9a:	429c      	cmp	r4, r3
 8018e9c:	d1e8      	bne.n	8018e70 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 8018e9e:	4601      	mov	r1, r0
 8018ea0:	4628      	mov	r0, r5
 8018ea2:	f7ff fc32 	bl	801870a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8018ea6:	e7e2      	b.n	8018e6e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>

08018ea8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8018ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018eac:	4617      	mov	r7, r2
 8018eae:	461e      	mov	r6, r3
 8018eb0:	4605      	mov	r5, r0
 8018eb2:	f7ff ff85 	bl	8018dc0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018eb6:	683b      	ldr	r3, [r7, #0]
 8018eb8:	4604      	mov	r4, r0
 8018eba:	4601      	mov	r1, r0
 8018ebc:	4638      	mov	r0, r7
 8018ebe:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8018ec2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018ec6:	47c0      	blx	r8
 8018ec8:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 8018ecc:	4602      	mov	r2, r0
 8018ece:	6030      	str	r0, [r6, #0]
 8018ed0:	b29b      	uxth	r3, r3
 8018ed2:	2b7f      	cmp	r3, #127	; 0x7f
 8018ed4:	d814      	bhi.n	8018f00 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x58>
 8018ed6:	4639      	mov	r1, r7
 8018ed8:	4628      	mov	r0, r5
 8018eda:	f7ff fc97 	bl	801880c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8018ede:	6030      	str	r0, [r6, #0]
 8018ee0:	6833      	ldr	r3, [r6, #0]
 8018ee2:	b143      	cbz	r3, 8018ef6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8018ee4:	f993 200d 	ldrsb.w	r2, [r3, #13]
 8018ee8:	7a9b      	ldrb	r3, [r3, #10]
 8018eea:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8018eee:	4313      	orrs	r3, r2
 8018ef0:	bf0c      	ite	eq
 8018ef2:	2301      	moveq	r3, #1
 8018ef4:	2300      	movne	r3, #0
 8018ef6:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8018efa:	4620      	mov	r0, r4
 8018efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f00:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 8018f04:	2b00      	cmp	r3, #0
 8018f06:	d0eb      	beq.n	8018ee0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 8018f08:	f640 1302 	movw	r3, #2306	; 0x902
 8018f0c:	429c      	cmp	r4, r3
 8018f0e:	d1e7      	bne.n	8018ee0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 8018f10:	4601      	mov	r1, r0
 8018f12:	4628      	mov	r0, r5
 8018f14:	f7ff fbf9 	bl	801870a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8018f18:	e7e1      	b.n	8018ede <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x36>

08018f1a <_ZN8touchgfx7Unicode6strlenEPKt>:
 8018f1a:	4602      	mov	r2, r0
 8018f1c:	b148      	cbz	r0, 8018f32 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 8018f1e:	2300      	movs	r3, #0
 8018f20:	b298      	uxth	r0, r3
 8018f22:	3301      	adds	r3, #1
 8018f24:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8018f28:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 8018f2c:	2900      	cmp	r1, #0
 8018f2e:	d1f7      	bne.n	8018f20 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 8018f30:	4770      	bx	lr
 8018f32:	4770      	bx	lr

08018f34 <_ZN8touchgfx7Unicode6strlenEPKc>:
 8018f34:	b140      	cbz	r0, 8018f48 <_ZN8touchgfx7Unicode6strlenEPKc+0x14>
 8018f36:	4602      	mov	r2, r0
 8018f38:	1a13      	subs	r3, r2, r0
 8018f3a:	f812 1b01 	ldrb.w	r1, [r2], #1
 8018f3e:	b29b      	uxth	r3, r3
 8018f40:	2900      	cmp	r1, #0
 8018f42:	d1f9      	bne.n	8018f38 <_ZN8touchgfx7Unicode6strlenEPKc+0x4>
 8018f44:	4618      	mov	r0, r3
 8018f46:	4770      	bx	lr
 8018f48:	4603      	mov	r3, r0
 8018f4a:	e7fb      	b.n	8018f44 <_ZN8touchgfx7Unicode6strlenEPKc+0x10>

08018f4c <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 8018f4c:	b530      	push	{r4, r5, lr}
 8018f4e:	4604      	mov	r4, r0
 8018f50:	b159      	cbz	r1, 8018f6a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 8018f52:	b148      	cbz	r0, 8018f68 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8018f54:	2300      	movs	r3, #0
 8018f56:	b298      	uxth	r0, r3
 8018f58:	4282      	cmp	r2, r0
 8018f5a:	d905      	bls.n	8018f68 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8018f5c:	5ccd      	ldrb	r5, [r1, r3]
 8018f5e:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 8018f62:	3301      	adds	r3, #1
 8018f64:	2d00      	cmp	r5, #0
 8018f66:	d1f6      	bne.n	8018f56 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 8018f68:	bd30      	pop	{r4, r5, pc}
 8018f6a:	4608      	mov	r0, r1
 8018f6c:	e7fc      	b.n	8018f68 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

08018f6e <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 8018f6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018f70:	468c      	mov	ip, r1
 8018f72:	b08b      	sub	sp, #44	; 0x2c
 8018f74:	2100      	movs	r1, #0
 8018f76:	ae01      	add	r6, sp, #4
 8018f78:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8018f7c:	211f      	movs	r1, #31
 8018f7e:	fbb0 f7f3 	udiv	r7, r0, r3
 8018f82:	fb03 0517 	mls	r5, r3, r7, r0
 8018f86:	4638      	mov	r0, r7
 8018f88:	b2ec      	uxtb	r4, r5
 8018f8a:	2d09      	cmp	r5, #9
 8018f8c:	bfd4      	ite	le
 8018f8e:	3430      	addle	r4, #48	; 0x30
 8018f90:	3457      	addgt	r4, #87	; 0x57
 8018f92:	b2e4      	uxtb	r4, r4
 8018f94:	558c      	strb	r4, [r1, r6]
 8018f96:	1e4c      	subs	r4, r1, #1
 8018f98:	b92f      	cbnz	r7, 8018fa6 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 8018f9a:	4431      	add	r1, r6
 8018f9c:	4660      	mov	r0, ip
 8018f9e:	f7ff ffd5 	bl	8018f4c <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8018fa2:	b00b      	add	sp, #44	; 0x2c
 8018fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018fa6:	4621      	mov	r1, r4
 8018fa8:	e7e9      	b.n	8018f7e <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

08018faa <_ZN8touchgfx7Unicode4itoaElPtti>:
 8018faa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018fac:	4607      	mov	r7, r0
 8018fae:	b08b      	sub	sp, #44	; 0x2c
 8018fb0:	4608      	mov	r0, r1
 8018fb2:	b341      	cbz	r1, 8019006 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8018fb4:	1e99      	subs	r1, r3, #2
 8018fb6:	290e      	cmp	r1, #14
 8018fb8:	d825      	bhi.n	8019006 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8018fba:	2100      	movs	r1, #0
 8018fbc:	463c      	mov	r4, r7
 8018fbe:	261f      	movs	r6, #31
 8018fc0:	f10d 0c04 	add.w	ip, sp, #4
 8018fc4:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8018fc8:	1e71      	subs	r1, r6, #1
 8018fca:	fb94 fef3 	sdiv	lr, r4, r3
 8018fce:	fb03 441e 	mls	r4, r3, lr, r4
 8018fd2:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 8018fd6:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 8018fda:	b2ec      	uxtb	r4, r5
 8018fdc:	2d09      	cmp	r5, #9
 8018fde:	bfd4      	ite	le
 8018fe0:	3430      	addle	r4, #48	; 0x30
 8018fe2:	3457      	addgt	r4, #87	; 0x57
 8018fe4:	b2e4      	uxtb	r4, r4
 8018fe6:	f80c 4006 	strb.w	r4, [ip, r6]
 8018fea:	4674      	mov	r4, lr
 8018fec:	b96c      	cbnz	r4, 801900a <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 8018fee:	2f00      	cmp	r7, #0
 8018ff0:	da05      	bge.n	8018ffe <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 8018ff2:	ab0a      	add	r3, sp, #40	; 0x28
 8018ff4:	4419      	add	r1, r3
 8018ff6:	232d      	movs	r3, #45	; 0x2d
 8018ff8:	f801 3c24 	strb.w	r3, [r1, #-36]
 8018ffc:	1eb1      	subs	r1, r6, #2
 8018ffe:	3101      	adds	r1, #1
 8019000:	4461      	add	r1, ip
 8019002:	f7ff ffa3 	bl	8018f4c <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8019006:	b00b      	add	sp, #44	; 0x2c
 8019008:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801900a:	460e      	mov	r6, r1
 801900c:	e7dc      	b.n	8018fc8 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801900e <_ZN8touchgfx7Unicode4atoiEPKt>:
 801900e:	b510      	push	{r4, lr}
 8019010:	b158      	cbz	r0, 801902a <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 8019012:	1e82      	subs	r2, r0, #2
 8019014:	210a      	movs	r1, #10
 8019016:	2000      	movs	r0, #0
 8019018:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801901c:	3b30      	subs	r3, #48	; 0x30
 801901e:	b29c      	uxth	r4, r3
 8019020:	2c09      	cmp	r4, #9
 8019022:	d802      	bhi.n	801902a <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 8019024:	fb01 3000 	mla	r0, r1, r0, r3
 8019028:	e7f6      	b.n	8019018 <_ZN8touchgfx7Unicode4atoiEPKt+0xa>
 801902a:	bd10      	pop	{r4, pc}

0801902c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>:
 801902c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019030:	b085      	sub	sp, #20
 8019032:	f8d0 8000 	ldr.w	r8, [r0]
 8019036:	468a      	mov	sl, r1
 8019038:	461c      	mov	r4, r3
 801903a:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801903e:	4681      	mov	r9, r0
 8019040:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8019044:	4640      	mov	r0, r8
 8019046:	9203      	str	r2, [sp, #12]
 8019048:	9102      	str	r1, [sp, #8]
 801904a:	9301      	str	r3, [sp, #4]
 801904c:	f7ff ff65 	bl	8018f1a <_ZN8touchgfx7Unicode6strlenEPKt>
 8019050:	9a03      	ldr	r2, [sp, #12]
 8019052:	f1ba 0f00 	cmp.w	sl, #0
 8019056:	bf0c      	ite	eq
 8019058:	4684      	moveq	ip, r0
 801905a:	f100 0c01 	addne.w	ip, r0, #1
 801905e:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 8019062:	8812      	ldrh	r2, [r2, #0]
 8019064:	fa1f fc8c 	uxth.w	ip, ip
 8019068:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801906a:	2a69      	cmp	r2, #105	; 0x69
 801906c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801906e:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8019070:	e9dd 3101 	ldrd	r3, r1, [sp, #4]
 8019074:	d004      	beq.n	8019080 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 8019076:	d844      	bhi.n	8019102 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xd6>
 8019078:	2a58      	cmp	r2, #88	; 0x58
 801907a:	d001      	beq.n	8019080 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801907c:	2a64      	cmp	r2, #100	; 0x64
 801907e:	d14b      	bne.n	8019118 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 8019080:	b1a4      	cbz	r4, 80190ac <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 8019082:	b956      	cbnz	r6, 801909a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 8019084:	2801      	cmp	r0, #1
 8019086:	d108      	bne.n	801909a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 8019088:	f8b8 2000 	ldrh.w	r2, [r8]
 801908c:	2a30      	cmp	r2, #48	; 0x30
 801908e:	bf02      	ittt	eq
 8019090:	f108 0202 	addeq.w	r2, r8, #2
 8019094:	4630      	moveq	r0, r6
 8019096:	f8c9 2000 	streq.w	r2, [r9]
 801909a:	45b4      	cmp	ip, r6
 801909c:	da3e      	bge.n	801911c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf0>
 801909e:	b2b6      	uxth	r6, r6
 80190a0:	eba6 040c 	sub.w	r4, r6, ip
 80190a4:	46b4      	mov	ip, r6
 80190a6:	b2a4      	uxth	r4, r4
 80190a8:	f04f 0b00 	mov.w	fp, #0
 80190ac:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 80190b0:	3a01      	subs	r2, #1
 80190b2:	b169      	cbz	r1, 80190d0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 80190b4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80190b6:	458c      	cmp	ip, r1
 80190b8:	da09      	bge.n	80190ce <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 80190ba:	eba1 010c 	sub.w	r1, r1, ip
 80190be:	b289      	uxth	r1, r1
 80190c0:	b933      	cbnz	r3, 80190d0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 80190c2:	f1bb 0f00 	cmp.w	fp, #0
 80190c6:	d02b      	beq.n	8019120 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 80190c8:	b350      	cbz	r0, 8019120 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 80190ca:	440c      	add	r4, r1
 80190cc:	b2a4      	uxth	r4, r4
 80190ce:	2100      	movs	r1, #0
 80190d0:	682b      	ldr	r3, [r5, #0]
 80190d2:	4293      	cmp	r3, r2
 80190d4:	da07      	bge.n	80190e6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 80190d6:	f1ba 0f00 	cmp.w	sl, #0
 80190da:	d004      	beq.n	80190e6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 80190dc:	f827 a013 	strh.w	sl, [r7, r3, lsl #1]
 80190e0:	682b      	ldr	r3, [r5, #0]
 80190e2:	3301      	adds	r3, #1
 80190e4:	602b      	str	r3, [r5, #0]
 80190e6:	f04f 0c30 	mov.w	ip, #48	; 0x30
 80190ea:	b354      	cbz	r4, 8019142 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 80190ec:	682e      	ldr	r6, [r5, #0]
 80190ee:	3c01      	subs	r4, #1
 80190f0:	42b2      	cmp	r2, r6
 80190f2:	b2a4      	uxth	r4, r4
 80190f4:	dd25      	ble.n	8019142 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 80190f6:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 80190fa:	682b      	ldr	r3, [r5, #0]
 80190fc:	3301      	adds	r3, #1
 80190fe:	602b      	str	r3, [r5, #0]
 8019100:	e7f3      	b.n	80190ea <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xbe>
 8019102:	2a73      	cmp	r2, #115	; 0x73
 8019104:	d003      	beq.n	801910e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xe2>
 8019106:	2a78      	cmp	r2, #120	; 0x78
 8019108:	d0ba      	beq.n	8019080 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801910a:	2a6f      	cmp	r2, #111	; 0x6f
 801910c:	e7b7      	b.n	801907e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x52>
 801910e:	2c00      	cmp	r4, #0
 8019110:	d0cc      	beq.n	80190ac <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 8019112:	42b0      	cmp	r0, r6
 8019114:	dd00      	ble.n	8019118 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 8019116:	b2b0      	uxth	r0, r6
 8019118:	2400      	movs	r4, #0
 801911a:	e7c7      	b.n	80190ac <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801911c:	2400      	movs	r4, #0
 801911e:	e7c3      	b.n	80190a8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x7c>
 8019120:	2900      	cmp	r1, #0
 8019122:	d0d5      	beq.n	80190d0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 8019124:	f04f 0c20 	mov.w	ip, #32
 8019128:	682e      	ldr	r6, [r5, #0]
 801912a:	2900      	cmp	r1, #0
 801912c:	d0d0      	beq.n	80190d0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801912e:	3901      	subs	r1, #1
 8019130:	4296      	cmp	r6, r2
 8019132:	b289      	uxth	r1, r1
 8019134:	dacb      	bge.n	80190ce <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 8019136:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 801913a:	682b      	ldr	r3, [r5, #0]
 801913c:	3301      	adds	r3, #1
 801913e:	602b      	str	r3, [r5, #0]
 8019140:	e7f2      	b.n	8019128 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xfc>
 8019142:	b198      	cbz	r0, 801916c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 8019144:	f8d9 3000 	ldr.w	r3, [r9]
 8019148:	881c      	ldrh	r4, [r3, #0]
 801914a:	b17c      	cbz	r4, 801916c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801914c:	682c      	ldr	r4, [r5, #0]
 801914e:	3801      	subs	r0, #1
 8019150:	42a2      	cmp	r2, r4
 8019152:	b280      	uxth	r0, r0
 8019154:	dd0a      	ble.n	801916c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 8019156:	1c9c      	adds	r4, r3, #2
 8019158:	f8c9 4000 	str.w	r4, [r9]
 801915c:	881c      	ldrh	r4, [r3, #0]
 801915e:	682b      	ldr	r3, [r5, #0]
 8019160:	f827 4013 	strh.w	r4, [r7, r3, lsl #1]
 8019164:	682b      	ldr	r3, [r5, #0]
 8019166:	3301      	adds	r3, #1
 8019168:	602b      	str	r3, [r5, #0]
 801916a:	e7ea      	b.n	8019142 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801916c:	2620      	movs	r6, #32
 801916e:	b151      	cbz	r1, 8019186 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 8019170:	6828      	ldr	r0, [r5, #0]
 8019172:	3901      	subs	r1, #1
 8019174:	4282      	cmp	r2, r0
 8019176:	b289      	uxth	r1, r1
 8019178:	dd05      	ble.n	8019186 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 801917a:	f827 6010 	strh.w	r6, [r7, r0, lsl #1]
 801917e:	682b      	ldr	r3, [r5, #0]
 8019180:	3301      	adds	r3, #1
 8019182:	602b      	str	r3, [r5, #0]
 8019184:	e7f3      	b.n	801916e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x142>
 8019186:	b005      	add	sp, #20
 8019188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801918c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>:
 801918c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019190:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8019192:	4604      	mov	r4, r0
 8019194:	f04f 0801 	mov.w	r8, #1
 8019198:	2000      	movs	r0, #0
 801919a:	e9dd ce06 	ldrd	ip, lr, [sp, #24]
 801919e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80191a2:	8008      	strh	r0, [r1, #0]
 80191a4:	7010      	strb	r0, [r2, #0]
 80191a6:	7018      	strb	r0, [r3, #0]
 80191a8:	f88c 0000 	strb.w	r0, [ip]
 80191ac:	f88e 0000 	strb.w	r0, [lr]
 80191b0:	7030      	strb	r0, [r6, #0]
 80191b2:	6820      	ldr	r0, [r4, #0]
 80191b4:	8800      	ldrh	r0, [r0, #0]
 80191b6:	b190      	cbz	r0, 80191de <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 80191b8:	282b      	cmp	r0, #43	; 0x2b
 80191ba:	d001      	beq.n	80191c0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x34>
 80191bc:	2820      	cmp	r0, #32
 80191be:	d104      	bne.n	80191ca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x3e>
 80191c0:	8008      	strh	r0, [r1, #0]
 80191c2:	6820      	ldr	r0, [r4, #0]
 80191c4:	3002      	adds	r0, #2
 80191c6:	6020      	str	r0, [r4, #0]
 80191c8:	e7f3      	b.n	80191b2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x26>
 80191ca:	282d      	cmp	r0, #45	; 0x2d
 80191cc:	d102      	bne.n	80191d4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x48>
 80191ce:	f882 8000 	strb.w	r8, [r2]
 80191d2:	e7f6      	b.n	80191c2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 80191d4:	2823      	cmp	r0, #35	; 0x23
 80191d6:	d102      	bne.n	80191de <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 80191d8:	f883 8000 	strb.w	r8, [r3]
 80191dc:	e7f1      	b.n	80191c2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 80191de:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80191e2:	2b09      	cmp	r3, #9
 80191e4:	d901      	bls.n	80191ea <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x5e>
 80191e6:	282a      	cmp	r0, #42	; 0x2a
 80191e8:	d114      	bne.n	8019214 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 80191ea:	2201      	movs	r2, #1
 80191ec:	f88e 2000 	strb.w	r2, [lr]
 80191f0:	6823      	ldr	r3, [r4, #0]
 80191f2:	8819      	ldrh	r1, [r3, #0]
 80191f4:	2930      	cmp	r1, #48	; 0x30
 80191f6:	bf02      	ittt	eq
 80191f8:	3302      	addeq	r3, #2
 80191fa:	6023      	streq	r3, [r4, #0]
 80191fc:	f88c 2000 	strbeq.w	r2, [ip]
 8019200:	6820      	ldr	r0, [r4, #0]
 8019202:	8803      	ldrh	r3, [r0, #0]
 8019204:	2b2a      	cmp	r3, #42	; 0x2a
 8019206:	d11e      	bne.n	8019246 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xba>
 8019208:	f04f 33ff 	mov.w	r3, #4294967295
 801920c:	603b      	str	r3, [r7, #0]
 801920e:	6823      	ldr	r3, [r4, #0]
 8019210:	3302      	adds	r3, #2
 8019212:	6023      	str	r3, [r4, #0]
 8019214:	6823      	ldr	r3, [r4, #0]
 8019216:	881b      	ldrh	r3, [r3, #0]
 8019218:	2b2e      	cmp	r3, #46	; 0x2e
 801921a:	d112      	bne.n	8019242 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xb6>
 801921c:	2301      	movs	r3, #1
 801921e:	7033      	strb	r3, [r6, #0]
 8019220:	6823      	ldr	r3, [r4, #0]
 8019222:	1c98      	adds	r0, r3, #2
 8019224:	6020      	str	r0, [r4, #0]
 8019226:	885b      	ldrh	r3, [r3, #2]
 8019228:	2b2a      	cmp	r3, #42	; 0x2a
 801922a:	d117      	bne.n	801925c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd0>
 801922c:	f04f 33ff 	mov.w	r3, #4294967295
 8019230:	602b      	str	r3, [r5, #0]
 8019232:	6823      	ldr	r3, [r4, #0]
 8019234:	3302      	adds	r3, #2
 8019236:	6023      	str	r3, [r4, #0]
 8019238:	682b      	ldr	r3, [r5, #0]
 801923a:	2b06      	cmp	r3, #6
 801923c:	bfa8      	it	ge
 801923e:	2306      	movge	r3, #6
 8019240:	602b      	str	r3, [r5, #0]
 8019242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019246:	f7ff fee2 	bl	801900e <_ZN8touchgfx7Unicode4atoiEPKt>
 801924a:	6038      	str	r0, [r7, #0]
 801924c:	6823      	ldr	r3, [r4, #0]
 801924e:	881a      	ldrh	r2, [r3, #0]
 8019250:	3a30      	subs	r2, #48	; 0x30
 8019252:	2a09      	cmp	r2, #9
 8019254:	d8de      	bhi.n	8019214 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 8019256:	3302      	adds	r3, #2
 8019258:	6023      	str	r3, [r4, #0]
 801925a:	e7f7      	b.n	801924c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xc0>
 801925c:	f7ff fed7 	bl	801900e <_ZN8touchgfx7Unicode4atoiEPKt>
 8019260:	6028      	str	r0, [r5, #0]
 8019262:	6823      	ldr	r3, [r4, #0]
 8019264:	881a      	ldrh	r2, [r3, #0]
 8019266:	3a30      	subs	r2, #48	; 0x30
 8019268:	2a09      	cmp	r2, #9
 801926a:	d8e5      	bhi.n	8019238 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xac>
 801926c:	3302      	adds	r3, #2
 801926e:	6023      	str	r3, [r4, #0]
 8019270:	e7f7      	b.n	8019262 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd6>

08019272 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>:
 8019272:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019276:	b0a2      	sub	sp, #136	; 0x88
 8019278:	2500      	movs	r5, #0
 801927a:	4606      	mov	r6, r0
 801927c:	460f      	mov	r7, r1
 801927e:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 8019282:	9209      	str	r2, [sp, #36]	; 0x24
 8019284:	4629      	mov	r1, r5
 8019286:	2242      	movs	r2, #66	; 0x42
 8019288:	4640      	mov	r0, r8
 801928a:	461c      	mov	r4, r3
 801928c:	950d      	str	r5, [sp, #52]	; 0x34
 801928e:	f7fe fe26 	bl	8017ede <_ZN8touchgfx6memsetEPvhm>
 8019292:	b30e      	cbz	r6, 80192d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 8019294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019296:	b1f3      	cbz	r3, 80192d6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x64>
 8019298:	f107 3aff 	add.w	sl, r7, #4294967295
 801929c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801929e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80192a0:	8812      	ldrh	r2, [r2, #0]
 80192a2:	2a00      	cmp	r2, #0
 80192a4:	f000 80b3 	beq.w	801940e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 80192a8:	459a      	cmp	sl, r3
 80192aa:	f340 80b0 	ble.w	801940e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 80192ae:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80192b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80192b4:	f8b9 2000 	ldrh.w	r2, [r9]
 80192b8:	2a00      	cmp	r2, #0
 80192ba:	d0ef      	beq.n	801929c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 80192bc:	2a25      	cmp	r2, #37	; 0x25
 80192be:	f000 80aa 	beq.w	8019416 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1a4>
 80192c2:	459a      	cmp	sl, r3
 80192c4:	ddea      	ble.n	801929c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 80192c6:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 80192ca:	f109 0202 	add.w	r2, r9, #2
 80192ce:	3301      	adds	r3, #1
 80192d0:	9209      	str	r2, [sp, #36]	; 0x24
 80192d2:	930d      	str	r3, [sp, #52]	; 0x34
 80192d4:	e7eb      	b.n	80192ae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x3c>
 80192d6:	8033      	strh	r3, [r6, #0]
 80192d8:	4630      	mov	r0, r6
 80192da:	b022      	add	sp, #136	; 0x88
 80192dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80192e0:	3b63      	subs	r3, #99	; 0x63
 80192e2:	2b01      	cmp	r3, #1
 80192e4:	f200 80df 	bhi.w	80194a6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x234>
 80192e8:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80192ec:	8813      	ldrh	r3, [r2, #0]
 80192ee:	2b69      	cmp	r3, #105	; 0x69
 80192f0:	d058      	beq.n	80193a4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 80192f2:	d81b      	bhi.n	801932c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xba>
 80192f4:	2b63      	cmp	r3, #99	; 0x63
 80192f6:	d02e      	beq.n	8019356 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xe4>
 80192f8:	2b64      	cmp	r3, #100	; 0x64
 80192fa:	d053      	beq.n	80193a4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 80192fc:	2b58      	cmp	r3, #88	; 0x58
 80192fe:	d06f      	beq.n	80193e0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x16e>
 8019300:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8019304:	46a1      	mov	r9, r4
 8019306:	e02d      	b.n	8019364 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 8019308:	2b73      	cmp	r3, #115	; 0x73
 801930a:	d0ed      	beq.n	80192e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801930c:	d803      	bhi.n	8019316 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xa4>
 801930e:	2b6f      	cmp	r3, #111	; 0x6f
 8019310:	f040 80c9 	bne.w	80194a6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x234>
 8019314:	e7e8      	b.n	80192e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 8019316:	2b75      	cmp	r3, #117	; 0x75
 8019318:	d0e6      	beq.n	80192e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801931a:	2b78      	cmp	r3, #120	; 0x78
 801931c:	e7f8      	b.n	8019310 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x9e>
 801931e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019320:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 8019324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019326:	3302      	adds	r3, #2
 8019328:	9309      	str	r3, [sp, #36]	; 0x24
 801932a:	e7b7      	b.n	801929c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801932c:	2b73      	cmp	r3, #115	; 0x73
 801932e:	d034      	beq.n	801939a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x128>
 8019330:	d807      	bhi.n	8019342 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xd0>
 8019332:	2b6f      	cmp	r3, #111	; 0x6f
 8019334:	d1e4      	bne.n	8019300 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 8019336:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019338:	f104 0904 	add.w	r9, r4, #4
 801933c:	2308      	movs	r3, #8
 801933e:	1aba      	subs	r2, r7, r2
 8019340:	e048      	b.n	80193d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 8019342:	2b75      	cmp	r3, #117	; 0x75
 8019344:	d041      	beq.n	80193ca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x158>
 8019346:	2b78      	cmp	r3, #120	; 0x78
 8019348:	d1da      	bne.n	8019300 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 801934a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801934c:	f104 0904 	add.w	r9, r4, #4
 8019350:	2310      	movs	r3, #16
 8019352:	1aba      	subs	r2, r7, r2
 8019354:	e03e      	b.n	80193d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 8019356:	7823      	ldrb	r3, [r4, #0]
 8019358:	f104 0904 	add.w	r9, r4, #4
 801935c:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 8019360:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8019364:	aa0d      	add	r2, sp, #52	; 0x34
 8019366:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801936a:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801936e:	a810      	add	r0, sp, #64	; 0x40
 8019370:	9205      	str	r2, [sp, #20]
 8019372:	464c      	mov	r4, r9
 8019374:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 8019378:	9204      	str	r2, [sp, #16]
 801937a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801937c:	9203      	str	r2, [sp, #12]
 801937e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8019382:	9202      	str	r2, [sp, #8]
 8019384:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019386:	9201      	str	r2, [sp, #4]
 8019388:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 801938c:	e9cd 7606 	strd	r7, r6, [sp, #24]
 8019390:	9200      	str	r2, [sp, #0]
 8019392:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019394:	f7ff fe4a 	bl	801902c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 8019398:	e7c4      	b.n	8019324 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
 801939a:	f104 0904 	add.w	r9, r4, #4
 801939e:	6823      	ldr	r3, [r4, #0]
 80193a0:	9310      	str	r3, [sp, #64]	; 0x40
 80193a2:	e7df      	b.n	8019364 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 80193a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80193a6:	230a      	movs	r3, #10
 80193a8:	4641      	mov	r1, r8
 80193aa:	6820      	ldr	r0, [r4, #0]
 80193ac:	1aba      	subs	r2, r7, r2
 80193ae:	f104 0904 	add.w	r9, r4, #4
 80193b2:	b292      	uxth	r2, r2
 80193b4:	f7ff fdf9 	bl	8018faa <_ZN8touchgfx7Unicode4itoaElPtti>
 80193b8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80193bc:	2b2d      	cmp	r3, #45	; 0x2d
 80193be:	d1d1      	bne.n	8019364 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 80193c0:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 80193c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80193c6:	3302      	adds	r3, #2
 80193c8:	e7ea      	b.n	80193a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x12e>
 80193ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80193cc:	f104 0904 	add.w	r9, r4, #4
 80193d0:	230a      	movs	r3, #10
 80193d2:	1aba      	subs	r2, r7, r2
 80193d4:	b292      	uxth	r2, r2
 80193d6:	4641      	mov	r1, r8
 80193d8:	6820      	ldr	r0, [r4, #0]
 80193da:	f7ff fdc8 	bl	8018f6e <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 80193de:	e7c1      	b.n	8019364 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 80193e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80193e2:	2310      	movs	r3, #16
 80193e4:	4641      	mov	r1, r8
 80193e6:	6820      	ldr	r0, [r4, #0]
 80193e8:	1aba      	subs	r2, r7, r2
 80193ea:	f104 0904 	add.w	r9, r4, #4
 80193ee:	b292      	uxth	r2, r2
 80193f0:	f7ff fdbd 	bl	8018f6e <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 80193f4:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 80193f8:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 80193fc:	2b00      	cmp	r3, #0
 80193fe:	d0b1      	beq.n	8019364 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 8019400:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 8019404:	2919      	cmp	r1, #25
 8019406:	d8f7      	bhi.n	80193f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 8019408:	3b20      	subs	r3, #32
 801940a:	8013      	strh	r3, [r2, #0]
 801940c:	e7f4      	b.n	80193f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 801940e:	2200      	movs	r2, #0
 8019410:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 8019414:	e760      	b.n	80192d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 8019416:	459a      	cmp	sl, r3
 8019418:	f77f af40 	ble.w	801929c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801941c:	f109 0302 	add.w	r3, r9, #2
 8019420:	f10d 022d 	add.w	r2, sp, #45	; 0x2d
 8019424:	f10d 0132 	add.w	r1, sp, #50	; 0x32
 8019428:	a809      	add	r0, sp, #36	; 0x24
 801942a:	9309      	str	r3, [sp, #36]	; 0x24
 801942c:	ab0f      	add	r3, sp, #60	; 0x3c
 801942e:	f8ad 5032 	strh.w	r5, [sp, #50]	; 0x32
 8019432:	9304      	str	r3, [sp, #16]
 8019434:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 8019438:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
 801943c:	9303      	str	r3, [sp, #12]
 801943e:	ab0e      	add	r3, sp, #56	; 0x38
 8019440:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
 8019444:	9302      	str	r3, [sp, #8]
 8019446:	ab0c      	add	r3, sp, #48	; 0x30
 8019448:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
 801944c:	9301      	str	r3, [sp, #4]
 801944e:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8019452:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
 8019456:	9300      	str	r3, [sp, #0]
 8019458:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801945c:	950e      	str	r5, [sp, #56]	; 0x38
 801945e:	f88d 5031 	strb.w	r5, [sp, #49]	; 0x31
 8019462:	950f      	str	r5, [sp, #60]	; 0x3c
 8019464:	f7ff fe92 	bl	801918c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 8019468:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801946a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801946c:	2b00      	cmp	r3, #0
 801946e:	bfbf      	itttt	lt
 8019470:	6823      	ldrlt	r3, [r4, #0]
 8019472:	3404      	addlt	r4, #4
 8019474:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8019478:	930e      	strlt	r3, [sp, #56]	; 0x38
 801947a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801947c:	2b00      	cmp	r3, #0
 801947e:	bfbf      	itttt	lt
 8019480:	6823      	ldrlt	r3, [r4, #0]
 8019482:	3404      	addlt	r4, #4
 8019484:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8019488:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801948a:	8813      	ldrh	r3, [r2, #0]
 801948c:	2b69      	cmp	r3, #105	; 0x69
 801948e:	f43f af2b 	beq.w	80192e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 8019492:	f63f af39 	bhi.w	8019308 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x96>
 8019496:	2b58      	cmp	r3, #88	; 0x58
 8019498:	f43f af26 	beq.w	80192e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801949c:	f63f af20 	bhi.w	80192e0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x6e>
 80194a0:	2b25      	cmp	r3, #37	; 0x25
 80194a2:	f43f af3c 	beq.w	801931e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xac>
 80194a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80194a8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80194ac:	f8b9 2000 	ldrh.w	r2, [r9]
 80194b0:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 80194b4:	3301      	adds	r3, #1
 80194b6:	930d      	str	r3, [sp, #52]	; 0x34
 80194b8:	e734      	b.n	8019324 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
	...

080194bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 80194bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80194be:	4605      	mov	r5, r0
 80194c0:	b0a1      	sub	sp, #132	; 0x84
 80194c2:	4610      	mov	r0, r2
 80194c4:	460e      	mov	r6, r1
 80194c6:	4614      	mov	r4, r2
 80194c8:	461f      	mov	r7, r3
 80194ca:	f7ff fd33 	bl	8018f34 <_ZN8touchgfx7Unicode6strlenEPKc>
 80194ce:	283f      	cmp	r0, #63	; 0x3f
 80194d0:	d906      	bls.n	80194e0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x24>
 80194d2:	4b0a      	ldr	r3, [pc, #40]	; (80194fc <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x40>)
 80194d4:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80194d8:	4a09      	ldr	r2, [pc, #36]	; (8019500 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x44>)
 80194da:	480a      	ldr	r0, [pc, #40]	; (8019504 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x48>)
 80194dc:	f009 ffac 	bl	8023438 <__assert_func>
 80194e0:	4621      	mov	r1, r4
 80194e2:	2240      	movs	r2, #64	; 0x40
 80194e4:	4668      	mov	r0, sp
 80194e6:	f7ff fd31 	bl	8018f4c <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 80194ea:	463b      	mov	r3, r7
 80194ec:	466a      	mov	r2, sp
 80194ee:	4631      	mov	r1, r6
 80194f0:	4628      	mov	r0, r5
 80194f2:	f7ff febe 	bl	8019272 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>
 80194f6:	b021      	add	sp, #132	; 0x84
 80194f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80194fa:	bf00      	nop
 80194fc:	080274e9 	.word	0x080274e9
 8019500:	080275bb 	.word	0x080275bb
 8019504:	08027506 	.word	0x08027506

08019508 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 8019508:	b40c      	push	{r2, r3}
 801950a:	b507      	push	{r0, r1, r2, lr}
 801950c:	ab04      	add	r3, sp, #16
 801950e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019512:	9301      	str	r3, [sp, #4]
 8019514:	f7ff ffd2 	bl	80194bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 8019518:	b003      	add	sp, #12
 801951a:	f85d eb04 	ldr.w	lr, [sp], #4
 801951e:	b002      	add	sp, #8
 8019520:	4770      	bx	lr
	...

08019524 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf>:
 8019524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019528:	b0c3      	sub	sp, #268	; 0x10c
 801952a:	2400      	movs	r4, #0
 801952c:	4606      	mov	r6, r0
 801952e:	4689      	mov	r9, r1
 8019530:	af10      	add	r7, sp, #64	; 0x40
 8019532:	9209      	str	r2, [sp, #36]	; 0x24
 8019534:	4621      	mov	r1, r4
 8019536:	22c8      	movs	r2, #200	; 0xc8
 8019538:	4638      	mov	r0, r7
 801953a:	469a      	mov	sl, r3
 801953c:	940c      	str	r4, [sp, #48]	; 0x30
 801953e:	f7fe fcce 	bl	8017ede <_ZN8touchgfx6memsetEPvhm>
 8019542:	b116      	cbz	r6, 801954a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x26>
 8019544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019546:	b923      	cbnz	r3, 8019552 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x2e>
 8019548:	8033      	strh	r3, [r6, #0]
 801954a:	4630      	mov	r0, r6
 801954c:	b043      	add	sp, #268	; 0x10c
 801954e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019552:	f109 3bff 	add.w	fp, r9, #4294967295
 8019556:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019558:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801955a:	8812      	ldrh	r2, [r2, #0]
 801955c:	2a00      	cmp	r2, #0
 801955e:	f000 80d1 	beq.w	8019704 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e0>
 8019562:	459b      	cmp	fp, r3
 8019564:	f340 80ce 	ble.w	8019704 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e0>
 8019568:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801956a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801956c:	882a      	ldrh	r2, [r5, #0]
 801956e:	2a00      	cmp	r2, #0
 8019570:	d0f1      	beq.n	8019556 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 8019572:	2a25      	cmp	r2, #37	; 0x25
 8019574:	f000 80ca 	beq.w	801970c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e8>
 8019578:	459b      	cmp	fp, r3
 801957a:	ddec      	ble.n	8019556 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801957c:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 8019580:	3502      	adds	r5, #2
 8019582:	3301      	adds	r3, #1
 8019584:	9509      	str	r5, [sp, #36]	; 0x24
 8019586:	930c      	str	r3, [sp, #48]	; 0x30
 8019588:	e7ee      	b.n	8019568 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x44>
 801958a:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801958e:	3202      	adds	r2, #2
 8019590:	920c      	str	r2, [sp, #48]	; 0x30
 8019592:	e0ac      	b.n	80196ee <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1ca>
 8019594:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 8019598:	970f      	str	r7, [sp, #60]	; 0x3c
 801959a:	3401      	adds	r4, #1
 801959c:	edd3 7a00 	vldr	s15, [r3]
 80195a0:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 80195a4:	b923      	cbnz	r3, 80195b0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x8c>
 80195a6:	2301      	movs	r3, #1
 80195a8:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 80195ac:	2303      	movs	r3, #3
 80195ae:	930e      	str	r3, [sp, #56]	; 0x38
 80195b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80195b4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80195b6:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 80195ba:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 80197b8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x294>
 80195be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195c2:	bf42      	ittt	mi
 80195c4:	232d      	movmi	r3, #45	; 0x2d
 80195c6:	eef1 7a67 	vnegmi.f32	s15, s15
 80195ca:	f8ad 302e 	strhmi.w	r3, [sp, #46]	; 0x2e
 80195ce:	2300      	movs	r3, #0
 80195d0:	4298      	cmp	r0, r3
 80195d2:	dd03      	ble.n	80195dc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xb8>
 80195d4:	ee87 7a06 	vdiv.f32	s14, s14, s12
 80195d8:	3301      	adds	r3, #1
 80195da:	e7f9      	b.n	80195d0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xac>
 80195dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80195e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80195e4:	eeb0 7a67 	vmov.f32	s14, s15
 80195e8:	eeb4 7ac6 	vcmpe.f32	s14, s12
 80195ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195f0:	da26      	bge.n	8019640 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x11c>
 80195f2:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80195f6:	eba9 0202 	sub.w	r2, r9, r2
 80195fa:	2100      	movs	r1, #0
 80195fc:	eef4 6ae5 	vcmpe.f32	s13, s11
 8019600:	b28d      	uxth	r5, r1
 8019602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019606:	db21      	blt.n	801964c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x128>
 8019608:	1a53      	subs	r3, r2, r1
 801960a:	2b00      	cmp	r3, #0
 801960c:	dd1e      	ble.n	801964c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x128>
 801960e:	2963      	cmp	r1, #99	; 0x63
 8019610:	d01b      	beq.n	801964a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x126>
 8019612:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8019616:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801961a:	ee17 3a10 	vmov	r3, s14
 801961e:	2b09      	cmp	r3, #9
 8019620:	bfa8      	it	ge
 8019622:	2309      	movge	r3, #9
 8019624:	ee07 3a10 	vmov	s14, r3
 8019628:	f103 0530 	add.w	r5, r3, #48	; 0x30
 801962c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019630:	f827 5011 	strh.w	r5, [r7, r1, lsl #1]
 8019634:	3101      	adds	r1, #1
 8019636:	eee7 7a66 	vfms.f32	s15, s14, s13
 801963a:	eec6 6a86 	vdiv.f32	s13, s13, s12
 801963e:	e7dd      	b.n	80195fc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xd8>
 8019640:	ee66 6a86 	vmul.f32	s13, s13, s12
 8019644:	ee87 7a06 	vdiv.f32	s14, s14, s12
 8019648:	e7ce      	b.n	80195e8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xc4>
 801964a:	460d      	mov	r5, r1
 801964c:	2a63      	cmp	r2, #99	; 0x63
 801964e:	bfd4      	ite	le
 8019650:	ebc5 0202 	rsble	r2, r5, r2
 8019654:	f1c5 0263 	rsbgt	r2, r5, #99	; 0x63
 8019658:	2a00      	cmp	r2, #0
 801965a:	dd4e      	ble.n	80196fa <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1d6>
 801965c:	4603      	mov	r3, r0
 801965e:	f04f 0801 	mov.w	r8, #1
 8019662:	2b00      	cmp	r3, #0
 8019664:	dd0e      	ble.n	8019684 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x160>
 8019666:	ee67 7a86 	vmul.f32	s15, s15, s12
 801966a:	210a      	movs	r1, #10
 801966c:	3b01      	subs	r3, #1
 801966e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8019672:	ee17 ca10 	vmov	ip, s14
 8019676:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801967a:	fb01 c808 	mla	r8, r1, r8, ip
 801967e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019682:	e7ee      	b.n	8019662 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x13e>
 8019684:	2800      	cmp	r0, #0
 8019686:	f100 33ff 	add.w	r3, r0, #4294967295
 801968a:	ea4f 0545 	mov.w	r5, r5, lsl #1
 801968e:	bfac      	ite	ge
 8019690:	1a18      	subge	r0, r3, r0
 8019692:	4618      	movlt	r0, r3
 8019694:	b292      	uxth	r2, r2
 8019696:	230a      	movs	r3, #10
 8019698:	900e      	str	r0, [sp, #56]	; 0x38
 801969a:	1979      	adds	r1, r7, r5
 801969c:	4640      	mov	r0, r8
 801969e:	f7ff fc84 	bl	8018faa <_ZN8touchgfx7Unicode4itoaElPtti>
 80196a2:	f1b8 0f01 	cmp.w	r8, #1
 80196a6:	dc26      	bgt.n	80196f6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1d2>
 80196a8:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 80196ac:	2b00      	cmp	r3, #0
 80196ae:	bf0c      	ite	eq
 80196b0:	2300      	moveq	r3, #0
 80196b2:	232e      	movne	r3, #46	; 0x2e
 80196b4:	aa42      	add	r2, sp, #264	; 0x108
 80196b6:	4415      	add	r5, r2
 80196b8:	aa0c      	add	r2, sp, #48	; 0x30
 80196ba:	f825 3cc8 	strh.w	r3, [r5, #-200]
 80196be:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 80196c2:	a80f      	add	r0, sp, #60	; 0x3c
 80196c4:	9205      	str	r2, [sp, #20]
 80196c6:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 80196ca:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 80196ce:	9204      	str	r2, [sp, #16]
 80196d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80196d2:	9203      	str	r2, [sp, #12]
 80196d4:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 80196d8:	9202      	str	r2, [sp, #8]
 80196da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80196dc:	9201      	str	r2, [sp, #4]
 80196de:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
 80196e2:	e9cd 9606 	strd	r9, r6, [sp, #24]
 80196e6:	9200      	str	r2, [sp, #0]
 80196e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80196ea:	f7ff fc9f 	bl	801902c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 80196ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80196f0:	3302      	adds	r3, #2
 80196f2:	9309      	str	r3, [sp, #36]	; 0x24
 80196f4:	e72f      	b.n	8019556 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 80196f6:	232e      	movs	r3, #46	; 0x2e
 80196f8:	e7dc      	b.n	80196b4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x190>
 80196fa:	ab42      	add	r3, sp, #264	; 0x108
 80196fc:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8019700:	2300      	movs	r3, #0
 8019702:	e7d9      	b.n	80196b8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x194>
 8019704:	2200      	movs	r2, #0
 8019706:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801970a:	e71e      	b.n	801954a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x26>
 801970c:	459b      	cmp	fp, r3
 801970e:	f77f af22 	ble.w	8019556 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 8019712:	2300      	movs	r3, #0
 8019714:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 8019718:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 801971c:	a809      	add	r0, sp, #36	; 0x24
 801971e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8019722:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019726:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801972a:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 801972e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8019732:	930d      	str	r3, [sp, #52]	; 0x34
 8019734:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 8019738:	930e      	str	r3, [sp, #56]	; 0x38
 801973a:	1cab      	adds	r3, r5, #2
 801973c:	9309      	str	r3, [sp, #36]	; 0x24
 801973e:	ab0e      	add	r3, sp, #56	; 0x38
 8019740:	9304      	str	r3, [sp, #16]
 8019742:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 8019746:	9303      	str	r3, [sp, #12]
 8019748:	ab0d      	add	r3, sp, #52	; 0x34
 801974a:	9302      	str	r3, [sp, #8]
 801974c:	ab0b      	add	r3, sp, #44	; 0x2c
 801974e:	9301      	str	r3, [sp, #4]
 8019750:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 8019754:	9300      	str	r3, [sp, #0]
 8019756:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 801975a:	f7ff fd17 	bl	801918c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 801975e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019760:	2b00      	cmp	r3, #0
 8019762:	da0b      	bge.n	801977c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x258>
 8019764:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 8019768:	3401      	adds	r4, #1
 801976a:	edd3 7a00 	vldr	s15, [r3]
 801976e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019772:	ee17 3a90 	vmov	r3, s15
 8019776:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801977a:	930d      	str	r3, [sp, #52]	; 0x34
 801977c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801977e:	2b00      	cmp	r3, #0
 8019780:	da0b      	bge.n	801979a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x276>
 8019782:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 8019786:	3401      	adds	r4, #1
 8019788:	edd3 7a00 	vldr	s15, [r3]
 801978c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019790:	ee17 3a90 	vmov	r3, s15
 8019794:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019798:	930e      	str	r3, [sp, #56]	; 0x38
 801979a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801979c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801979e:	881b      	ldrh	r3, [r3, #0]
 80197a0:	2b25      	cmp	r3, #37	; 0x25
 80197a2:	f43f aef2 	beq.w	801958a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x66>
 80197a6:	2b66      	cmp	r3, #102	; 0x66
 80197a8:	f43f aef4 	beq.w	8019594 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x70>
 80197ac:	9509      	str	r5, [sp, #36]	; 0x24
 80197ae:	882b      	ldrh	r3, [r5, #0]
 80197b0:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 80197b4:	3201      	adds	r2, #1
 80197b6:	e6eb      	b.n	8019590 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x6c>
 80197b8:	3f000002 	.word	0x3f000002

080197bc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>:
 80197bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80197be:	4605      	mov	r5, r0
 80197c0:	b0a1      	sub	sp, #132	; 0x84
 80197c2:	4610      	mov	r0, r2
 80197c4:	460e      	mov	r6, r1
 80197c6:	4614      	mov	r4, r2
 80197c8:	461f      	mov	r7, r3
 80197ca:	f7ff fbb3 	bl	8018f34 <_ZN8touchgfx7Unicode6strlenEPKc>
 80197ce:	283f      	cmp	r0, #63	; 0x3f
 80197d0:	d906      	bls.n	80197e0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x24>
 80197d2:	4b0a      	ldr	r3, [pc, #40]	; (80197fc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x40>)
 80197d4:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 80197d8:	4a09      	ldr	r2, [pc, #36]	; (8019800 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x44>)
 80197da:	480a      	ldr	r0, [pc, #40]	; (8019804 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x48>)
 80197dc:	f009 fe2c 	bl	8023438 <__assert_func>
 80197e0:	4621      	mov	r1, r4
 80197e2:	2240      	movs	r2, #64	; 0x40
 80197e4:	4668      	mov	r0, sp
 80197e6:	f7ff fbb1 	bl	8018f4c <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 80197ea:	463b      	mov	r3, r7
 80197ec:	466a      	mov	r2, sp
 80197ee:	4631      	mov	r1, r6
 80197f0:	4628      	mov	r0, r5
 80197f2:	f7ff fe97 	bl	8019524 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf>
 80197f6:	b021      	add	sp, #132	; 0x84
 80197f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80197fa:	bf00      	nop
 80197fc:	080274e9 	.word	0x080274e9
 8019800:	0802752c 	.word	0x0802752c
 8019804:	08027506 	.word	0x08027506

08019808 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8019808:	4b01      	ldr	r3, [pc, #4]	; (8019810 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801980a:	6018      	str	r0, [r3, #0]
 801980c:	4770      	bx	lr
 801980e:	bf00      	nop
 8019810:	2000bb78 	.word	0x2000bb78

08019814 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8019814:	4b07      	ldr	r3, [pc, #28]	; (8019834 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x20>)
 8019816:	881a      	ldrh	r2, [r3, #0]
 8019818:	4282      	cmp	r2, r0
 801981a:	d809      	bhi.n	8019830 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801981c:	4b06      	ldr	r3, [pc, #24]	; (8019838 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x24>)
 801981e:	881b      	ldrh	r3, [r3, #0]
 8019820:	4413      	add	r3, r2
 8019822:	4298      	cmp	r0, r3
 8019824:	da04      	bge.n	8019830 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 8019826:	4b05      	ldr	r3, [pc, #20]	; (801983c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x28>)
 8019828:	681b      	ldr	r3, [r3, #0]
 801982a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801982e:	4770      	bx	lr
 8019830:	2000      	movs	r0, #0
 8019832:	4770      	bx	lr
 8019834:	2000bb98 	.word	0x2000bb98
 8019838:	2000bb9c 	.word	0x2000bb9c
 801983c:	2000bb7c 	.word	0x2000bb7c

08019840 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8019840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019844:	4d26      	ldr	r5, [pc, #152]	; (80198e0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8019846:	682b      	ldr	r3, [r5, #0]
 8019848:	2b00      	cmp	r3, #0
 801984a:	d046      	beq.n	80198da <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 801984c:	4a25      	ldr	r2, [pc, #148]	; (80198e4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801984e:	4f26      	ldr	r7, [pc, #152]	; (80198e8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8019850:	8810      	ldrh	r0, [r2, #0]
 8019852:	883c      	ldrh	r4, [r7, #0]
 8019854:	4e25      	ldr	r6, [pc, #148]	; (80198ec <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8019856:	4420      	add	r0, r4
 8019858:	1c42      	adds	r2, r0, #1
 801985a:	ea4f 0880 	mov.w	r8, r0, lsl #2
 801985e:	f022 0201 	bic.w	r2, r2, #1
 8019862:	0412      	lsls	r2, r2, #16
 8019864:	0c12      	lsrs	r2, r2, #16
 8019866:	0051      	lsls	r1, r2, #1
 8019868:	220e      	movs	r2, #14
 801986a:	eb08 0e01 	add.w	lr, r8, r1
 801986e:	fb02 fc04 	mul.w	ip, r2, r4
 8019872:	eb03 0208 	add.w	r2, r3, r8
 8019876:	4c1e      	ldr	r4, [pc, #120]	; (80198f0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8019878:	6022      	str	r2, [r4, #0]
 801987a:	eb03 020e 	add.w	r2, r3, lr
 801987e:	44e6      	add	lr, ip
 8019880:	6032      	str	r2, [r6, #0]
 8019882:	4473      	add	r3, lr
 8019884:	4a1b      	ldr	r2, [pc, #108]	; (80198f4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8019886:	6013      	str	r3, [r2, #0]
 8019888:	2300      	movs	r3, #0
 801988a:	4a1b      	ldr	r2, [pc, #108]	; (80198f8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801988c:	8013      	strh	r3, [r2, #0]
 801988e:	4a1b      	ldr	r2, [pc, #108]	; (80198fc <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 8019890:	6812      	ldr	r2, [r2, #0]
 8019892:	eba2 0208 	sub.w	r2, r2, r8
 8019896:	1a52      	subs	r2, r2, r1
 8019898:	4919      	ldr	r1, [pc, #100]	; (8019900 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801989a:	eba2 020c 	sub.w	r2, r2, ip
 801989e:	469c      	mov	ip, r3
 80198a0:	600a      	str	r2, [r1, #0]
 80198a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80198a6:	4a17      	ldr	r2, [pc, #92]	; (8019904 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 80198a8:	8013      	strh	r3, [r2, #0]
 80198aa:	4283      	cmp	r3, r0
 80198ac:	d10d      	bne.n	80198ca <_ZN8touchgfx6Bitmap10clearCacheEv+0x8a>
 80198ae:	883d      	ldrh	r5, [r7, #0]
 80198b0:	2300      	movs	r3, #0
 80198b2:	6830      	ldr	r0, [r6, #0]
 80198b4:	240e      	movs	r4, #14
 80198b6:	429d      	cmp	r5, r3
 80198b8:	d90f      	bls.n	80198da <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 80198ba:	fb04 0203 	mla	r2, r4, r3, r0
 80198be:	3301      	adds	r3, #1
 80198c0:	7b11      	ldrb	r1, [r2, #12]
 80198c2:	f36f 1145 	bfc	r1, #5, #1
 80198c6:	7311      	strb	r1, [r2, #12]
 80198c8:	e7f5      	b.n	80198b6 <_ZN8touchgfx6Bitmap10clearCacheEv+0x76>
 80198ca:	682a      	ldr	r2, [r5, #0]
 80198cc:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 80198d0:	6822      	ldr	r2, [r4, #0]
 80198d2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80198d6:	3301      	adds	r3, #1
 80198d8:	e7e7      	b.n	80198aa <_ZN8touchgfx6Bitmap10clearCacheEv+0x6a>
 80198da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80198de:	bf00      	nop
 80198e0:	2000bb7c 	.word	0x2000bb7c
 80198e4:	2000bb98 	.word	0x2000bb98
 80198e8:	2000bb9c 	.word	0x2000bb9c
 80198ec:	2000bb80 	.word	0x2000bb80
 80198f0:	2000bb90 	.word	0x2000bb90
 80198f4:	2000bb88 	.word	0x2000bb88
 80198f8:	2000bb9a 	.word	0x2000bb9a
 80198fc:	2000bb84 	.word	0x2000bb84
 8019900:	2000bb94 	.word	0x2000bb94
 8019904:	2000bb8c 	.word	0x2000bb8c

08019908 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8019908:	4b10      	ldr	r3, [pc, #64]	; (801994c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801990a:	b510      	push	{r4, lr}
 801990c:	681b      	ldr	r3, [r3, #0]
 801990e:	b9db      	cbnz	r3, 8019948 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8019910:	b1d1      	cbz	r1, 8019948 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8019912:	4b0f      	ldr	r3, [pc, #60]	; (8019950 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 8019914:	240e      	movs	r4, #14
 8019916:	801a      	strh	r2, [r3, #0]
 8019918:	b292      	uxth	r2, r2
 801991a:	4b0e      	ldr	r3, [pc, #56]	; (8019954 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801991c:	881b      	ldrh	r3, [r3, #0]
 801991e:	4413      	add	r3, r2
 8019920:	4362      	muls	r2, r4
 8019922:	2406      	movs	r4, #6
 8019924:	fb04 2203 	mla	r2, r4, r3, r2
 8019928:	428a      	cmp	r2, r1
 801992a:	d305      	bcc.n	8019938 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801992c:	4b0a      	ldr	r3, [pc, #40]	; (8019958 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801992e:	2137      	movs	r1, #55	; 0x37
 8019930:	4a0a      	ldr	r2, [pc, #40]	; (801995c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 8019932:	480b      	ldr	r0, [pc, #44]	; (8019960 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 8019934:	f009 fd80 	bl	8023438 <__assert_func>
 8019938:	4b0a      	ldr	r3, [pc, #40]	; (8019964 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801993a:	6019      	str	r1, [r3, #0]
 801993c:	4b0a      	ldr	r3, [pc, #40]	; (8019968 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801993e:	6018      	str	r0, [r3, #0]
 8019940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019944:	f7ff bf7c 	b.w	8019840 <_ZN8touchgfx6Bitmap10clearCacheEv>
 8019948:	bd10      	pop	{r4, pc}
 801994a:	bf00      	nop
 801994c:	2000bb88 	.word	0x2000bb88
 8019950:	2000bb9c 	.word	0x2000bb9c
 8019954:	2000bb98 	.word	0x2000bb98
 8019958:	0802769d 	.word	0x0802769d
 801995c:	08027732 	.word	0x08027732
 8019960:	08027678 	.word	0x08027678
 8019964:	2000bb84 	.word	0x2000bb84
 8019968:	2000bb7c 	.word	0x2000bb7c

0801996c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801996c:	b470      	push	{r4, r5, r6}
 801996e:	4c07      	ldr	r4, [pc, #28]	; (801998c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8019970:	4605      	mov	r5, r0
 8019972:	4610      	mov	r0, r2
 8019974:	9a03      	ldr	r2, [sp, #12]
 8019976:	6826      	ldr	r6, [r4, #0]
 8019978:	b936      	cbnz	r6, 8019988 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801997a:	6025      	str	r5, [r4, #0]
 801997c:	4c04      	ldr	r4, [pc, #16]	; (8019990 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801997e:	8021      	strh	r1, [r4, #0]
 8019980:	4619      	mov	r1, r3
 8019982:	bc70      	pop	{r4, r5, r6}
 8019984:	f7ff bfc0 	b.w	8019908 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8019988:	bc70      	pop	{r4, r5, r6}
 801998a:	4770      	bx	lr
 801998c:	2000bba0 	.word	0x2000bba0
 8019990:	2000bb98 	.word	0x2000bb98

08019994 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8019994:	b508      	push	{r3, lr}
 8019996:	4b14      	ldr	r3, [pc, #80]	; (80199e8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8019998:	6819      	ldr	r1, [r3, #0]
 801999a:	b931      	cbnz	r1, 80199aa <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801999c:	4b13      	ldr	r3, [pc, #76]	; (80199ec <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801999e:	f240 21e6 	movw	r1, #742	; 0x2e6
 80199a2:	4a13      	ldr	r2, [pc, #76]	; (80199f0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 80199a4:	4813      	ldr	r0, [pc, #76]	; (80199f4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 80199a6:	f009 fd47 	bl	8023438 <__assert_func>
 80199aa:	4a13      	ldr	r2, [pc, #76]	; (80199f8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 80199ac:	8803      	ldrh	r3, [r0, #0]
 80199ae:	8812      	ldrh	r2, [r2, #0]
 80199b0:	4293      	cmp	r3, r2
 80199b2:	d204      	bcs.n	80199be <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 80199b4:	2214      	movs	r2, #20
 80199b6:	fb02 1303 	mla	r3, r2, r3, r1
 80199ba:	8918      	ldrh	r0, [r3, #8]
 80199bc:	bd08      	pop	{r3, pc}
 80199be:	490f      	ldr	r1, [pc, #60]	; (80199fc <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 80199c0:	8809      	ldrh	r1, [r1, #0]
 80199c2:	4411      	add	r1, r2
 80199c4:	428b      	cmp	r3, r1
 80199c6:	da06      	bge.n	80199d6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 80199c8:	1a9b      	subs	r3, r3, r2
 80199ca:	4a0d      	ldr	r2, [pc, #52]	; (8019a00 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 80199cc:	210e      	movs	r1, #14
 80199ce:	6812      	ldr	r2, [r2, #0]
 80199d0:	fb01 2303 	mla	r3, r1, r3, r2
 80199d4:	e7f1      	b.n	80199ba <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 80199d6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80199da:	4293      	cmp	r3, r2
 80199dc:	bf0a      	itet	eq
 80199de:	4b09      	ldreq	r3, [pc, #36]	; (8019a04 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 80199e0:	2000      	movne	r0, #0
 80199e2:	8818      	ldrheq	r0, [r3, #0]
 80199e4:	e7ea      	b.n	80199bc <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 80199e6:	bf00      	nop
 80199e8:	2000bba0 	.word	0x2000bba0
 80199ec:	080276f6 	.word	0x080276f6
 80199f0:	080277df 	.word	0x080277df
 80199f4:	08027678 	.word	0x08027678
 80199f8:	2000bb98 	.word	0x2000bb98
 80199fc:	2000bb9c 	.word	0x2000bb9c
 8019a00:	2000bb80 	.word	0x2000bb80
 8019a04:	2000bacc 	.word	0x2000bacc

08019a08 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8019a08:	b508      	push	{r3, lr}
 8019a0a:	4b14      	ldr	r3, [pc, #80]	; (8019a5c <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8019a0c:	6819      	ldr	r1, [r3, #0]
 8019a0e:	b931      	cbnz	r1, 8019a1e <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 8019a10:	4b13      	ldr	r3, [pc, #76]	; (8019a60 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8019a12:	f240 21fa 	movw	r1, #762	; 0x2fa
 8019a16:	4a13      	ldr	r2, [pc, #76]	; (8019a64 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8019a18:	4813      	ldr	r0, [pc, #76]	; (8019a68 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8019a1a:	f009 fd0d 	bl	8023438 <__assert_func>
 8019a1e:	4a13      	ldr	r2, [pc, #76]	; (8019a6c <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8019a20:	8803      	ldrh	r3, [r0, #0]
 8019a22:	8812      	ldrh	r2, [r2, #0]
 8019a24:	4293      	cmp	r3, r2
 8019a26:	d204      	bcs.n	8019a32 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 8019a28:	2214      	movs	r2, #20
 8019a2a:	fb02 1303 	mla	r3, r2, r3, r1
 8019a2e:	8958      	ldrh	r0, [r3, #10]
 8019a30:	bd08      	pop	{r3, pc}
 8019a32:	490f      	ldr	r1, [pc, #60]	; (8019a70 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 8019a34:	8809      	ldrh	r1, [r1, #0]
 8019a36:	4411      	add	r1, r2
 8019a38:	428b      	cmp	r3, r1
 8019a3a:	da06      	bge.n	8019a4a <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 8019a3c:	1a9b      	subs	r3, r3, r2
 8019a3e:	4a0d      	ldr	r2, [pc, #52]	; (8019a74 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 8019a40:	210e      	movs	r1, #14
 8019a42:	6812      	ldr	r2, [r2, #0]
 8019a44:	fb01 2303 	mla	r3, r1, r3, r2
 8019a48:	e7f1      	b.n	8019a2e <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 8019a4a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019a4e:	4293      	cmp	r3, r2
 8019a50:	bf0a      	itet	eq
 8019a52:	4b09      	ldreq	r3, [pc, #36]	; (8019a78 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 8019a54:	2000      	movne	r0, #0
 8019a56:	8818      	ldrheq	r0, [r3, #0]
 8019a58:	e7ea      	b.n	8019a30 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 8019a5a:	bf00      	nop
 8019a5c:	2000bba0 	.word	0x2000bba0
 8019a60:	080276f6 	.word	0x080276f6
 8019a64:	0802780b 	.word	0x0802780b
 8019a68:	08027678 	.word	0x08027678
 8019a6c:	2000bb98 	.word	0x2000bb98
 8019a70:	2000bb9c 	.word	0x2000bb9c
 8019a74:	2000bb80 	.word	0x2000bb80
 8019a78:	2000bace 	.word	0x2000bace

08019a7c <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8019a7c:	4b23      	ldr	r3, [pc, #140]	; (8019b0c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8019a7e:	b510      	push	{r4, lr}
 8019a80:	681c      	ldr	r4, [r3, #0]
 8019a82:	b934      	cbnz	r4, 8019a92 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 8019a84:	4b22      	ldr	r3, [pc, #136]	; (8019b10 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8019a86:	f240 310e 	movw	r1, #782	; 0x30e
 8019a8a:	4a22      	ldr	r2, [pc, #136]	; (8019b14 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 8019a8c:	4822      	ldr	r0, [pc, #136]	; (8019b18 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 8019a8e:	f009 fcd3 	bl	8023438 <__assert_func>
 8019a92:	4a22      	ldr	r2, [pc, #136]	; (8019b1c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8019a94:	880b      	ldrh	r3, [r1, #0]
 8019a96:	8812      	ldrh	r2, [r2, #0]
 8019a98:	4293      	cmp	r3, r2
 8019a9a:	d211      	bcs.n	8019ac0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 8019a9c:	2214      	movs	r2, #20
 8019a9e:	fb02 4303 	mla	r3, r2, r3, r4
 8019aa2:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8019aa6:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8019aaa:	8a1a      	ldrh	r2, [r3, #16]
 8019aac:	8a5b      	ldrh	r3, [r3, #18]
 8019aae:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8019ab2:	8004      	strh	r4, [r0, #0]
 8019ab4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019ab8:	8041      	strh	r1, [r0, #2]
 8019aba:	8082      	strh	r2, [r0, #4]
 8019abc:	80c3      	strh	r3, [r0, #6]
 8019abe:	e00e      	b.n	8019ade <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8019ac0:	4917      	ldr	r1, [pc, #92]	; (8019b20 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 8019ac2:	8809      	ldrh	r1, [r1, #0]
 8019ac4:	4411      	add	r1, r2
 8019ac6:	428b      	cmp	r3, r1
 8019ac8:	da0a      	bge.n	8019ae0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 8019aca:	1a9b      	subs	r3, r3, r2
 8019acc:	4a15      	ldr	r2, [pc, #84]	; (8019b24 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 8019ace:	210e      	movs	r1, #14
 8019ad0:	6812      	ldr	r2, [r2, #0]
 8019ad2:	fb01 2303 	mla	r3, r1, r3, r2
 8019ad6:	681a      	ldr	r2, [r3, #0]
 8019ad8:	6002      	str	r2, [r0, #0]
 8019ada:	685a      	ldr	r2, [r3, #4]
 8019adc:	6042      	str	r2, [r0, #4]
 8019ade:	bd10      	pop	{r4, pc}
 8019ae0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019ae4:	4293      	cmp	r3, r2
 8019ae6:	d10b      	bne.n	8019b00 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 8019ae8:	4b0f      	ldr	r3, [pc, #60]	; (8019b28 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 8019aea:	f9b3 1000 	ldrsh.w	r1, [r3]
 8019aee:	4b0f      	ldr	r3, [pc, #60]	; (8019b2c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 8019af0:	8081      	strh	r1, [r0, #4]
 8019af2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019af6:	2300      	movs	r3, #0
 8019af8:	80c2      	strh	r2, [r0, #6]
 8019afa:	8003      	strh	r3, [r0, #0]
 8019afc:	8043      	strh	r3, [r0, #2]
 8019afe:	e7ee      	b.n	8019ade <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8019b00:	2300      	movs	r3, #0
 8019b02:	8003      	strh	r3, [r0, #0]
 8019b04:	8043      	strh	r3, [r0, #2]
 8019b06:	8083      	strh	r3, [r0, #4]
 8019b08:	e7d8      	b.n	8019abc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 8019b0a:	bf00      	nop
 8019b0c:	2000bba0 	.word	0x2000bba0
 8019b10:	080276f6 	.word	0x080276f6
 8019b14:	08027778 	.word	0x08027778
 8019b18:	08027678 	.word	0x08027678
 8019b1c:	2000bb98 	.word	0x2000bb98
 8019b20:	2000bb9c 	.word	0x2000bb9c
 8019b24:	2000bb80 	.word	0x2000bb80
 8019b28:	2000bacc 	.word	0x2000bacc
 8019b2c:	2000bace 	.word	0x2000bace

08019b30 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8019b30:	4b18      	ldr	r3, [pc, #96]	; (8019b94 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8019b32:	681b      	ldr	r3, [r3, #0]
 8019b34:	b34b      	cbz	r3, 8019b8a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 8019b36:	4a18      	ldr	r2, [pc, #96]	; (8019b98 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 8019b38:	8800      	ldrh	r0, [r0, #0]
 8019b3a:	8812      	ldrh	r2, [r2, #0]
 8019b3c:	4290      	cmp	r0, r2
 8019b3e:	d211      	bcs.n	8019b64 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 8019b40:	2214      	movs	r2, #20
 8019b42:	fb02 3300 	mla	r3, r2, r0, r3
 8019b46:	8a1a      	ldrh	r2, [r3, #16]
 8019b48:	8919      	ldrh	r1, [r3, #8]
 8019b4a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8019b4e:	428a      	cmp	r2, r1
 8019b50:	db1d      	blt.n	8019b8e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8019b52:	8a58      	ldrh	r0, [r3, #18]
 8019b54:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8019b58:	895b      	ldrh	r3, [r3, #10]
 8019b5a:	4298      	cmp	r0, r3
 8019b5c:	bfac      	ite	ge
 8019b5e:	2000      	movge	r0, #0
 8019b60:	2001      	movlt	r0, #1
 8019b62:	4770      	bx	lr
 8019b64:	4b0d      	ldr	r3, [pc, #52]	; (8019b9c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 8019b66:	881b      	ldrh	r3, [r3, #0]
 8019b68:	4413      	add	r3, r2
 8019b6a:	4298      	cmp	r0, r3
 8019b6c:	da0d      	bge.n	8019b8a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 8019b6e:	4b0c      	ldr	r3, [pc, #48]	; (8019ba0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 8019b70:	1a80      	subs	r0, r0, r2
 8019b72:	220e      	movs	r2, #14
 8019b74:	681b      	ldr	r3, [r3, #0]
 8019b76:	fb02 3300 	mla	r3, r2, r0, r3
 8019b7a:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8019b7e:	891a      	ldrh	r2, [r3, #8]
 8019b80:	4291      	cmp	r1, r2
 8019b82:	db04      	blt.n	8019b8e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8019b84:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8019b88:	e7e6      	b.n	8019b58 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 8019b8a:	2000      	movs	r0, #0
 8019b8c:	4770      	bx	lr
 8019b8e:	2001      	movs	r0, #1
 8019b90:	4770      	bx	lr
 8019b92:	bf00      	nop
 8019b94:	2000bba0 	.word	0x2000bba0
 8019b98:	2000bb98 	.word	0x2000bb98
 8019b9c:	2000bb9c 	.word	0x2000bb9c
 8019ba0:	2000bb80 	.word	0x2000bb80

08019ba4 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8019ba4:	b508      	push	{r3, lr}
 8019ba6:	4b12      	ldr	r3, [pc, #72]	; (8019bf0 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8019ba8:	6819      	ldr	r1, [r3, #0]
 8019baa:	b931      	cbnz	r1, 8019bba <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8019bac:	4b11      	ldr	r3, [pc, #68]	; (8019bf4 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8019bae:	f240 3132 	movw	r1, #818	; 0x332
 8019bb2:	4a11      	ldr	r2, [pc, #68]	; (8019bf8 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8019bb4:	4811      	ldr	r0, [pc, #68]	; (8019bfc <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8019bb6:	f009 fc3f 	bl	8023438 <__assert_func>
 8019bba:	8803      	ldrh	r3, [r0, #0]
 8019bbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019bc0:	4293      	cmp	r3, r2
 8019bc2:	d012      	beq.n	8019bea <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8019bc4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019bc8:	4293      	cmp	r3, r2
 8019bca:	d103      	bne.n	8019bd4 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 8019bcc:	4b0c      	ldr	r3, [pc, #48]	; (8019c00 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8019bce:	681b      	ldr	r3, [r3, #0]
 8019bd0:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8019bd2:	bd08      	pop	{r3, pc}
 8019bd4:	4a0b      	ldr	r2, [pc, #44]	; (8019c04 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 8019bd6:	6812      	ldr	r2, [r2, #0]
 8019bd8:	b11a      	cbz	r2, 8019be2 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 8019bda:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8019bde:	2800      	cmp	r0, #0
 8019be0:	d1f7      	bne.n	8019bd2 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8019be2:	2214      	movs	r2, #20
 8019be4:	4353      	muls	r3, r2
 8019be6:	58c8      	ldr	r0, [r1, r3]
 8019be8:	e7f3      	b.n	8019bd2 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8019bea:	2000      	movs	r0, #0
 8019bec:	e7f1      	b.n	8019bd2 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8019bee:	bf00      	nop
 8019bf0:	2000bba0 	.word	0x2000bba0
 8019bf4:	080276f6 	.word	0x080276f6
 8019bf8:	080277ae 	.word	0x080277ae
 8019bfc:	08027678 	.word	0x08027678
 8019c00:	2000bad8 	.word	0x2000bad8
 8019c04:	2000bb7c 	.word	0x2000bb7c

08019c08 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8019c08:	8802      	ldrh	r2, [r0, #0]
 8019c0a:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8019c0e:	429a      	cmp	r2, r3
 8019c10:	d840      	bhi.n	8019c94 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 8019c12:	4b21      	ldr	r3, [pc, #132]	; (8019c98 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>)
 8019c14:	881b      	ldrh	r3, [r3, #0]
 8019c16:	429a      	cmp	r2, r3
 8019c18:	d220      	bcs.n	8019c5c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x54>
 8019c1a:	4b20      	ldr	r3, [pc, #128]	; (8019c9c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 8019c1c:	6819      	ldr	r1, [r3, #0]
 8019c1e:	2314      	movs	r3, #20
 8019c20:	fb03 1302 	mla	r3, r3, r2, r1
 8019c24:	6858      	ldr	r0, [r3, #4]
 8019c26:	2800      	cmp	r0, #0
 8019c28:	d035      	beq.n	8019c96 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8019c2a:	491d      	ldr	r1, [pc, #116]	; (8019ca0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8019c2c:	6809      	ldr	r1, [r1, #0]
 8019c2e:	2900      	cmp	r1, #0
 8019c30:	d031      	beq.n	8019c96 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8019c32:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8019c36:	b371      	cbz	r1, 8019c96 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8019c38:	895a      	ldrh	r2, [r3, #10]
 8019c3a:	8918      	ldrh	r0, [r3, #8]
 8019c3c:	4350      	muls	r0, r2
 8019c3e:	7c5a      	ldrb	r2, [r3, #17]
 8019c40:	7cdb      	ldrb	r3, [r3, #19]
 8019c42:	0952      	lsrs	r2, r2, #5
 8019c44:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8019c48:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8019c4c:	2b0b      	cmp	r3, #11
 8019c4e:	bf18      	it	ne
 8019c50:	0040      	lslne	r0, r0, #1
 8019c52:	3003      	adds	r0, #3
 8019c54:	f020 0003 	bic.w	r0, r0, #3
 8019c58:	4408      	add	r0, r1
 8019c5a:	4770      	bx	lr
 8019c5c:	4911      	ldr	r1, [pc, #68]	; (8019ca4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8019c5e:	8809      	ldrh	r1, [r1, #0]
 8019c60:	4419      	add	r1, r3
 8019c62:	428a      	cmp	r2, r1
 8019c64:	da16      	bge.n	8019c94 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 8019c66:	4910      	ldr	r1, [pc, #64]	; (8019ca8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8019c68:	1ad3      	subs	r3, r2, r3
 8019c6a:	200e      	movs	r0, #14
 8019c6c:	6809      	ldr	r1, [r1, #0]
 8019c6e:	fb00 1303 	mla	r3, r0, r3, r1
 8019c72:	7b19      	ldrb	r1, [r3, #12]
 8019c74:	f001 011f 	and.w	r1, r1, #31
 8019c78:	290b      	cmp	r1, #11
 8019c7a:	d10b      	bne.n	8019c94 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 8019c7c:	8919      	ldrh	r1, [r3, #8]
 8019c7e:	8958      	ldrh	r0, [r3, #10]
 8019c80:	4b07      	ldr	r3, [pc, #28]	; (8019ca0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8019c82:	4348      	muls	r0, r1
 8019c84:	6819      	ldr	r1, [r3, #0]
 8019c86:	3003      	adds	r0, #3
 8019c88:	f020 0303 	bic.w	r3, r0, #3
 8019c8c:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8019c90:	4418      	add	r0, r3
 8019c92:	4770      	bx	lr
 8019c94:	2000      	movs	r0, #0
 8019c96:	4770      	bx	lr
 8019c98:	2000bb98 	.word	0x2000bb98
 8019c9c:	2000bba0 	.word	0x2000bba0
 8019ca0:	2000bb7c 	.word	0x2000bb7c
 8019ca4:	2000bb9c 	.word	0x2000bb9c
 8019ca8:	2000bb80 	.word	0x2000bb80

08019cac <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8019cac:	4b19      	ldr	r3, [pc, #100]	; (8019d14 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8019cae:	6819      	ldr	r1, [r3, #0]
 8019cb0:	8803      	ldrh	r3, [r0, #0]
 8019cb2:	b1e9      	cbz	r1, 8019cf0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8019cb4:	4a18      	ldr	r2, [pc, #96]	; (8019d18 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8019cb6:	8812      	ldrh	r2, [r2, #0]
 8019cb8:	429a      	cmp	r2, r3
 8019cba:	d90a      	bls.n	8019cd2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8019cbc:	2214      	movs	r2, #20
 8019cbe:	fb02 1303 	mla	r3, r2, r3, r1
 8019cc2:	7c58      	ldrb	r0, [r3, #17]
 8019cc4:	0942      	lsrs	r2, r0, #5
 8019cc6:	7cd8      	ldrb	r0, [r3, #19]
 8019cc8:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8019ccc:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8019cd0:	4770      	bx	lr
 8019cd2:	4912      	ldr	r1, [pc, #72]	; (8019d1c <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 8019cd4:	8809      	ldrh	r1, [r1, #0]
 8019cd6:	4411      	add	r1, r2
 8019cd8:	428b      	cmp	r3, r1
 8019cda:	da09      	bge.n	8019cf0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8019cdc:	1a9b      	subs	r3, r3, r2
 8019cde:	4a10      	ldr	r2, [pc, #64]	; (8019d20 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 8019ce0:	210e      	movs	r1, #14
 8019ce2:	6812      	ldr	r2, [r2, #0]
 8019ce4:	fb01 2303 	mla	r3, r1, r3, r2
 8019ce8:	7b18      	ldrb	r0, [r3, #12]
 8019cea:	f000 001f 	and.w	r0, r0, #31
 8019cee:	4770      	bx	lr
 8019cf0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019cf4:	4293      	cmp	r3, r2
 8019cf6:	d10a      	bne.n	8019d0e <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 8019cf8:	4b0a      	ldr	r3, [pc, #40]	; (8019d24 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 8019cfa:	681b      	ldr	r3, [r3, #0]
 8019cfc:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8019d00:	b10a      	cbz	r2, 8019d06 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 8019d02:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8019d04:	b900      	cbnz	r0, 8019d08 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 8019d06:	6898      	ldr	r0, [r3, #8]
 8019d08:	6803      	ldr	r3, [r0, #0]
 8019d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d0c:	4718      	bx	r3
 8019d0e:	2000      	movs	r0, #0
 8019d10:	4770      	bx	lr
 8019d12:	bf00      	nop
 8019d14:	2000bba0 	.word	0x2000bba0
 8019d18:	2000bb98 	.word	0x2000bb98
 8019d1c:	2000bb9c 	.word	0x2000bb9c
 8019d20:	2000bb80 	.word	0x2000bb80
 8019d24:	2000bad8 	.word	0x2000bad8

08019d28 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 8019d28:	2018      	movs	r0, #24
 8019d2a:	4770      	bx	lr

08019d2c <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 8019d2c:	2001      	movs	r0, #1
 8019d2e:	4770      	bx	lr

08019d30 <_ZNK8touchgfx8LCD24bpp20getColorFrom24BitRGBEhhh>:
 8019d30:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8019d34:	ea43 4001 	orr.w	r0, r3, r1, lsl #16
 8019d38:	4770      	bx	lr

08019d3a <_ZNK8touchgfx8LCD24bpp11getRedColorENS_9colortypeE>:
 8019d3a:	f3c1 4007 	ubfx	r0, r1, #16, #8
 8019d3e:	4770      	bx	lr

08019d40 <_ZNK8touchgfx8LCD24bpp13getGreenColorENS_9colortypeE>:
 8019d40:	f3c1 2007 	ubfx	r0, r1, #8, #8
 8019d44:	4770      	bx	lr

08019d46 <_ZNK8touchgfx8LCD24bpp12getBlueColorENS_9colortypeE>:
 8019d46:	b2c8      	uxtb	r0, r1
 8019d48:	4770      	bx	lr

08019d4a <_ZN8touchgfx8LCD24bpp4initEv>:
 8019d4a:	4770      	bx	lr

08019d4c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8019d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d50:	b085      	sub	sp, #20
 8019d52:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8019d54:	9203      	str	r2, [sp, #12]
 8019d56:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 8019d5a:	6878      	ldr	r0, [r7, #4]
 8019d5c:	9201      	str	r2, [sp, #4]
 8019d5e:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8019d60:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
 8019d64:	f9bd 8058 	ldrsh.w	r8, [sp, #88]	; 0x58
 8019d68:	fa1f fc84 	uxth.w	ip, r4
 8019d6c:	43e4      	mvns	r4, r4
 8019d6e:	9100      	str	r1, [sp, #0]
 8019d70:	b2e4      	uxtb	r4, r4
 8019d72:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8019d76:	fb00 2505 	mla	r5, r0, r5, r2
 8019d7a:	683a      	ldr	r2, [r7, #0]
 8019d7c:	6877      	ldr	r7, [r6, #4]
 8019d7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019d82:	3704      	adds	r7, #4
 8019d84:	4415      	add	r5, r2
 8019d86:	6832      	ldr	r2, [r6, #0]
 8019d88:	9202      	str	r2, [sp, #8]
 8019d8a:	9a00      	ldr	r2, [sp, #0]
 8019d8c:	2a00      	cmp	r2, #0
 8019d8e:	dc03      	bgt.n	8019d98 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 8019d90:	9a03      	ldr	r2, [sp, #12]
 8019d92:	2a00      	cmp	r2, #0
 8019d94:	f340 8116 	ble.w	8019fc4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8019d98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019d9a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019d9e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019da0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019da4:	2b00      	cmp	r3, #0
 8019da6:	dd0f      	ble.n	8019dc8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 8019da8:	1406      	asrs	r6, r0, #16
 8019daa:	d406      	bmi.n	8019dba <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8019dac:	4546      	cmp	r6, r8
 8019dae:	da04      	bge.n	8019dba <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8019db0:	1416      	asrs	r6, r2, #16
 8019db2:	d402      	bmi.n	8019dba <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8019db4:	9901      	ldr	r1, [sp, #4]
 8019db6:	428e      	cmp	r6, r1
 8019db8:	db07      	blt.n	8019dca <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8019dba:	9911      	ldr	r1, [sp, #68]	; 0x44
 8019dbc:	3b01      	subs	r3, #1
 8019dbe:	3503      	adds	r5, #3
 8019dc0:	4408      	add	r0, r1
 8019dc2:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019dc4:	440a      	add	r2, r1
 8019dc6:	e7ed      	b.n	8019da4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 8019dc8:	d011      	beq.n	8019dee <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 8019dca:	1e5e      	subs	r6, r3, #1
 8019dcc:	9911      	ldr	r1, [sp, #68]	; 0x44
 8019dce:	fb01 0e06 	mla	lr, r1, r6, r0
 8019dd2:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 8019dd6:	d548      	bpl.n	8019e6a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 8019dd8:	4699      	mov	r9, r3
 8019dda:	462e      	mov	r6, r5
 8019ddc:	f1b9 0f00 	cmp.w	r9, #0
 8019de0:	f300 809e 	bgt.w	8019f20 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>
 8019de4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019de8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019dec:	441d      	add	r5, r3
 8019dee:	9b00      	ldr	r3, [sp, #0]
 8019df0:	2b00      	cmp	r3, #0
 8019df2:	f340 80e7 	ble.w	8019fc4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8019df6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019dfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019dfc:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019e00:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019e04:	eef0 6a62 	vmov.f32	s13, s5
 8019e08:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019e0c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019e10:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019e14:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8019e18:	eef0 6a43 	vmov.f32	s13, s6
 8019e1c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019e20:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 8019e24:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019e28:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019e2c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019e30:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019e34:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019e38:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019e3c:	ee12 2a90 	vmov	r2, s5
 8019e40:	eef0 2a47 	vmov.f32	s5, s14
 8019e44:	fb92 f3f3 	sdiv	r3, r2, r3
 8019e48:	ee13 2a10 	vmov	r2, s6
 8019e4c:	9311      	str	r3, [sp, #68]	; 0x44
 8019e4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019e50:	eeb0 3a67 	vmov.f32	s6, s15
 8019e54:	fb92 f3f3 	sdiv	r3, r2, r3
 8019e58:	9312      	str	r3, [sp, #72]	; 0x48
 8019e5a:	9b00      	ldr	r3, [sp, #0]
 8019e5c:	9a03      	ldr	r2, [sp, #12]
 8019e5e:	3b01      	subs	r3, #1
 8019e60:	9300      	str	r3, [sp, #0]
 8019e62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019e64:	bf08      	it	eq
 8019e66:	4613      	moveq	r3, r2
 8019e68:	e78f      	b.n	8019d8a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 8019e6a:	45c6      	cmp	lr, r8
 8019e6c:	dab4      	bge.n	8019dd8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 8019e6e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019e70:	fb01 2606 	mla	r6, r1, r6, r2
 8019e74:	1436      	asrs	r6, r6, #16
 8019e76:	d4af      	bmi.n	8019dd8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 8019e78:	9901      	ldr	r1, [sp, #4]
 8019e7a:	428e      	cmp	r6, r1
 8019e7c:	daac      	bge.n	8019dd8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 8019e7e:	1cee      	adds	r6, r5, #3
 8019e80:	4699      	mov	r9, r3
 8019e82:	f1b9 0f00 	cmp.w	r9, #0
 8019e86:	f106 0603 	add.w	r6, r6, #3
 8019e8a:	ddab      	ble.n	8019de4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8019e8c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8019e90:	9902      	ldr	r1, [sp, #8]
 8019e92:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8019e96:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8019e9a:	fb08 1e0e 	mla	lr, r8, lr, r1
 8019e9e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8019ea0:	fb1b fb04 	smulbb	fp, fp, r4
 8019ea4:	f109 39ff 	add.w	r9, r9, #4294967295
 8019ea8:	f81e e00a 	ldrb.w	lr, [lr, sl]
 8019eac:	4408      	add	r0, r1
 8019eae:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019eb0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8019eb4:	440a      	add	r2, r1
 8019eb6:	eb07 0a0e 	add.w	sl, r7, lr
 8019eba:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8019ebe:	fb0e be0c 	mla	lr, lr, ip, fp
 8019ec2:	fa1f fe8e 	uxth.w	lr, lr
 8019ec6:	f10e 0b01 	add.w	fp, lr, #1
 8019eca:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8019ece:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8019ed2:	fb1b fb04 	smulbb	fp, fp, r4
 8019ed6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8019eda:	f806 ec06 	strb.w	lr, [r6, #-6]
 8019ede:	f89a e001 	ldrb.w	lr, [sl, #1]
 8019ee2:	fb0e be0c 	mla	lr, lr, ip, fp
 8019ee6:	fa1f fe8e 	uxth.w	lr, lr
 8019eea:	f10e 0b01 	add.w	fp, lr, #1
 8019eee:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8019ef2:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8019ef6:	f806 ec05 	strb.w	lr, [r6, #-5]
 8019efa:	f89a e002 	ldrb.w	lr, [sl, #2]
 8019efe:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8019f02:	fb1a fa04 	smulbb	sl, sl, r4
 8019f06:	fb0e ae0c 	mla	lr, lr, ip, sl
 8019f0a:	fa1f fe8e 	uxth.w	lr, lr
 8019f0e:	f10e 0a01 	add.w	sl, lr, #1
 8019f12:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 8019f16:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8019f1a:	f806 ec04 	strb.w	lr, [r6, #-4]
 8019f1e:	e7b0      	b.n	8019e82 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 8019f20:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8019f24:	d446      	bmi.n	8019fb4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8019f26:	45c2      	cmp	sl, r8
 8019f28:	da44      	bge.n	8019fb4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8019f2a:	ea5f 4e22 	movs.w	lr, r2, asr #16
 8019f2e:	d441      	bmi.n	8019fb4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8019f30:	9901      	ldr	r1, [sp, #4]
 8019f32:	458e      	cmp	lr, r1
 8019f34:	da3e      	bge.n	8019fb4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8019f36:	9902      	ldr	r1, [sp, #8]
 8019f38:	f896 b000 	ldrb.w	fp, [r6]
 8019f3c:	fb08 1e0e 	mla	lr, r8, lr, r1
 8019f40:	fb1b fb04 	smulbb	fp, fp, r4
 8019f44:	f81e e00a 	ldrb.w	lr, [lr, sl]
 8019f48:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8019f4c:	eb07 0a0e 	add.w	sl, r7, lr
 8019f50:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8019f54:	fb0e be0c 	mla	lr, lr, ip, fp
 8019f58:	fa1f fe8e 	uxth.w	lr, lr
 8019f5c:	f10e 0b01 	add.w	fp, lr, #1
 8019f60:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8019f64:	f896 b001 	ldrb.w	fp, [r6, #1]
 8019f68:	fb1b fb04 	smulbb	fp, fp, r4
 8019f6c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8019f70:	f886 e000 	strb.w	lr, [r6]
 8019f74:	f89a e001 	ldrb.w	lr, [sl, #1]
 8019f78:	fb0e be0c 	mla	lr, lr, ip, fp
 8019f7c:	fa1f fe8e 	uxth.w	lr, lr
 8019f80:	f10e 0b01 	add.w	fp, lr, #1
 8019f84:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8019f88:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8019f8c:	f886 e001 	strb.w	lr, [r6, #1]
 8019f90:	f89a e002 	ldrb.w	lr, [sl, #2]
 8019f94:	f896 a002 	ldrb.w	sl, [r6, #2]
 8019f98:	fb1a fa04 	smulbb	sl, sl, r4
 8019f9c:	fb0e ae0c 	mla	lr, lr, ip, sl
 8019fa0:	fa1f fe8e 	uxth.w	lr, lr
 8019fa4:	f10e 0a01 	add.w	sl, lr, #1
 8019fa8:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 8019fac:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8019fb0:	f886 e002 	strb.w	lr, [r6, #2]
 8019fb4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8019fb6:	3603      	adds	r6, #3
 8019fb8:	f109 39ff 	add.w	r9, r9, #4294967295
 8019fbc:	4408      	add	r0, r1
 8019fbe:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019fc0:	440a      	add	r2, r1
 8019fc2:	e70b      	b.n	8019ddc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 8019fc4:	b005      	add	sp, #20
 8019fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019fca <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8019fca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019fce:	b085      	sub	sp, #20
 8019fd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019fd4:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8019fd6:	9203      	str	r2, [sp, #12]
 8019fd8:	6870      	ldr	r0, [r6, #4]
 8019fda:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8019fdc:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8019fe0:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 8019fe4:	9101      	str	r1, [sp, #4]
 8019fe6:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8019fea:	e9dd c711 	ldrd	ip, r7, [sp, #68]	; 0x44
 8019fee:	fb00 2404 	mla	r4, r0, r4, r2
 8019ff2:	6832      	ldr	r2, [r6, #0]
 8019ff4:	686e      	ldr	r6, [r5, #4]
 8019ff6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019ffa:	3604      	adds	r6, #4
 8019ffc:	4414      	add	r4, r2
 8019ffe:	682a      	ldr	r2, [r5, #0]
 801a000:	9202      	str	r2, [sp, #8]
 801a002:	9a01      	ldr	r2, [sp, #4]
 801a004:	2a00      	cmp	r2, #0
 801a006:	dc03      	bgt.n	801a010 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46>
 801a008:	9a03      	ldr	r2, [sp, #12]
 801a00a:	2a00      	cmp	r2, #0
 801a00c:	f340 80b2 	ble.w	801a174 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801a010:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a012:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a016:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a018:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a01c:	2b00      	cmp	r3, #0
 801a01e:	dd0c      	ble.n	801a03a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801a020:	1405      	asrs	r5, r0, #16
 801a022:	d405      	bmi.n	801a030 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801a024:	4575      	cmp	r5, lr
 801a026:	da03      	bge.n	801a030 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801a028:	1415      	asrs	r5, r2, #16
 801a02a:	d401      	bmi.n	801a030 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801a02c:	4545      	cmp	r5, r8
 801a02e:	db05      	blt.n	801a03c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801a030:	4460      	add	r0, ip
 801a032:	443a      	add	r2, r7
 801a034:	3b01      	subs	r3, #1
 801a036:	3403      	adds	r4, #3
 801a038:	e7f0      	b.n	801a01c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52>
 801a03a:	d03d      	beq.n	801a0b8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 801a03c:	1e5d      	subs	r5, r3, #1
 801a03e:	fb0c 0905 	mla	r9, ip, r5, r0
 801a042:	ea5f 4929 	movs.w	r9, r9, asr #16
 801a046:	d42c      	bmi.n	801a0a2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801a048:	45f1      	cmp	r9, lr
 801a04a:	da2a      	bge.n	801a0a2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801a04c:	fb07 2505 	mla	r5, r7, r5, r2
 801a050:	142d      	asrs	r5, r5, #16
 801a052:	d426      	bmi.n	801a0a2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801a054:	4545      	cmp	r5, r8
 801a056:	da24      	bge.n	801a0a2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801a058:	1ce5      	adds	r5, r4, #3
 801a05a:	469a      	mov	sl, r3
 801a05c:	f1ba 0f00 	cmp.w	sl, #0
 801a060:	f105 0503 	add.w	r5, r5, #3
 801a064:	dd23      	ble.n	801a0ae <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801a066:	ea4f 4922 	mov.w	r9, r2, asr #16
 801a06a:	9902      	ldr	r1, [sp, #8]
 801a06c:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801a070:	443a      	add	r2, r7
 801a072:	fb0e 1909 	mla	r9, lr, r9, r1
 801a076:	4460      	add	r0, ip
 801a078:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a07c:	f819 900b 	ldrb.w	r9, [r9, fp]
 801a080:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801a084:	eb06 0b09 	add.w	fp, r6, r9
 801a088:	f816 9009 	ldrb.w	r9, [r6, r9]
 801a08c:	f805 9c06 	strb.w	r9, [r5, #-6]
 801a090:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801a094:	f805 9c05 	strb.w	r9, [r5, #-5]
 801a098:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801a09c:	f805 9c04 	strb.w	r9, [r5, #-4]
 801a0a0:	e7dc      	b.n	801a05c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801a0a2:	2500      	movs	r5, #0
 801a0a4:	eba3 0905 	sub.w	r9, r3, r5
 801a0a8:	f1b9 0f00 	cmp.w	r9, #0
 801a0ac:	dc3c      	bgt.n	801a128 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15e>
 801a0ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a0b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a0b6:	441c      	add	r4, r3
 801a0b8:	9b01      	ldr	r3, [sp, #4]
 801a0ba:	2b00      	cmp	r3, #0
 801a0bc:	dd5a      	ble.n	801a174 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801a0be:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a0c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a0c4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a0c8:	eeb0 6a62 	vmov.f32	s12, s5
 801a0cc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a0d0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a0d4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a0d8:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801a0dc:	eeb0 6a43 	vmov.f32	s12, s6
 801a0e0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a0e4:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801a0e8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a0ec:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a0f0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a0f4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a0f8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a0fc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a100:	ee12 2a90 	vmov	r2, s5
 801a104:	eef0 2a47 	vmov.f32	s5, s14
 801a108:	fb92 fcf3 	sdiv	ip, r2, r3
 801a10c:	ee13 2a10 	vmov	r2, s6
 801a110:	eeb0 3a67 	vmov.f32	s6, s15
 801a114:	fb92 f7f3 	sdiv	r7, r2, r3
 801a118:	9b01      	ldr	r3, [sp, #4]
 801a11a:	9a03      	ldr	r2, [sp, #12]
 801a11c:	3b01      	subs	r3, #1
 801a11e:	9301      	str	r3, [sp, #4]
 801a120:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a122:	bf08      	it	eq
 801a124:	4613      	moveq	r3, r2
 801a126:	e76c      	b.n	801a002 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38>
 801a128:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801a12c:	d41e      	bmi.n	801a16c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801a12e:	45f2      	cmp	sl, lr
 801a130:	da1c      	bge.n	801a16c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801a132:	ea5f 4922 	movs.w	r9, r2, asr #16
 801a136:	d419      	bmi.n	801a16c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801a138:	45c1      	cmp	r9, r8
 801a13a:	da17      	bge.n	801a16c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801a13c:	9902      	ldr	r1, [sp, #8]
 801a13e:	fb0e 1909 	mla	r9, lr, r9, r1
 801a142:	f819 900a 	ldrb.w	r9, [r9, sl]
 801a146:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801a14a:	f816 b009 	ldrb.w	fp, [r6, r9]
 801a14e:	eb06 0a09 	add.w	sl, r6, r9
 801a152:	eb05 0945 	add.w	r9, r5, r5, lsl #1
 801a156:	f804 b009 	strb.w	fp, [r4, r9]
 801a15a:	44a1      	add	r9, r4
 801a15c:	f89a b001 	ldrb.w	fp, [sl, #1]
 801a160:	f889 b001 	strb.w	fp, [r9, #1]
 801a164:	f89a a002 	ldrb.w	sl, [sl, #2]
 801a168:	f889 a002 	strb.w	sl, [r9, #2]
 801a16c:	4460      	add	r0, ip
 801a16e:	443a      	add	r2, r7
 801a170:	3501      	adds	r5, #1
 801a172:	e797      	b.n	801a0a4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 801a174:	b005      	add	sp, #20
 801a176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a17a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801a17a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a17e:	b087      	sub	sp, #28
 801a180:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a184:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801a186:	9204      	str	r2, [sp, #16]
 801a188:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801a18c:	6870      	ldr	r0, [r6, #4]
 801a18e:	9205      	str	r2, [sp, #20]
 801a190:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801a192:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801a196:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801a19a:	9101      	str	r1, [sp, #4]
 801a19c:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801a1a0:	fb00 2505 	mla	r5, r0, r5, r2
 801a1a4:	6832      	ldr	r2, [r6, #0]
 801a1a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a1aa:	4415      	add	r5, r2
 801a1ac:	6822      	ldr	r2, [r4, #0]
 801a1ae:	9202      	str	r2, [sp, #8]
 801a1b0:	6862      	ldr	r2, [r4, #4]
 801a1b2:	3204      	adds	r2, #4
 801a1b4:	9203      	str	r2, [sp, #12]
 801a1b6:	9a01      	ldr	r2, [sp, #4]
 801a1b8:	2a00      	cmp	r2, #0
 801a1ba:	dc03      	bgt.n	801a1c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801a1bc:	9a04      	ldr	r2, [sp, #16]
 801a1be:	2a00      	cmp	r2, #0
 801a1c0:	f340 8124 	ble.w	801a40c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801a1c4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a1c6:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801a1ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a1cc:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a1d0:	2b00      	cmp	r3, #0
 801a1d2:	dd0e      	ble.n	801a1f2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801a1d4:	1422      	asrs	r2, r4, #16
 801a1d6:	d405      	bmi.n	801a1e4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801a1d8:	4572      	cmp	r2, lr
 801a1da:	da03      	bge.n	801a1e4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801a1dc:	1402      	asrs	r2, r0, #16
 801a1de:	d401      	bmi.n	801a1e4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801a1e0:	4542      	cmp	r2, r8
 801a1e2:	db07      	blt.n	801a1f4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801a1e4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a1e6:	3b01      	subs	r3, #1
 801a1e8:	3503      	adds	r5, #3
 801a1ea:	4414      	add	r4, r2
 801a1ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a1ee:	4410      	add	r0, r2
 801a1f0:	e7ee      	b.n	801a1d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801a1f2:	d010      	beq.n	801a216 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 801a1f4:	1e5a      	subs	r2, r3, #1
 801a1f6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801a1f8:	fb06 4602 	mla	r6, r6, r2, r4
 801a1fc:	1436      	asrs	r6, r6, #16
 801a1fe:	d546      	bpl.n	801a28e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 801a200:	4699      	mov	r9, r3
 801a202:	462f      	mov	r7, r5
 801a204:	f1b9 0f00 	cmp.w	r9, #0
 801a208:	f300 80a5 	bgt.w	801a356 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801a20c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a210:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a214:	441d      	add	r5, r3
 801a216:	9b01      	ldr	r3, [sp, #4]
 801a218:	2b00      	cmp	r3, #0
 801a21a:	f340 80f7 	ble.w	801a40c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801a21e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a222:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a224:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a228:	eeb0 6a62 	vmov.f32	s12, s5
 801a22c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a230:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a234:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a238:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801a23c:	eeb0 6a43 	vmov.f32	s12, s6
 801a240:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a244:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801a248:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a24c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a250:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a254:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a258:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a25c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a260:	ee12 2a90 	vmov	r2, s5
 801a264:	eef0 2a47 	vmov.f32	s5, s14
 801a268:	fb92 f3f3 	sdiv	r3, r2, r3
 801a26c:	ee13 2a10 	vmov	r2, s6
 801a270:	9313      	str	r3, [sp, #76]	; 0x4c
 801a272:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a274:	eeb0 3a67 	vmov.f32	s6, s15
 801a278:	fb92 f3f3 	sdiv	r3, r2, r3
 801a27c:	9314      	str	r3, [sp, #80]	; 0x50
 801a27e:	9b01      	ldr	r3, [sp, #4]
 801a280:	9a04      	ldr	r2, [sp, #16]
 801a282:	3b01      	subs	r3, #1
 801a284:	9301      	str	r3, [sp, #4]
 801a286:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a288:	bf08      	it	eq
 801a28a:	4613      	moveq	r3, r2
 801a28c:	e793      	b.n	801a1b6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801a28e:	4576      	cmp	r6, lr
 801a290:	dab6      	bge.n	801a200 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801a292:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801a294:	fb06 0202 	mla	r2, r6, r2, r0
 801a298:	1412      	asrs	r2, r2, #16
 801a29a:	d4b1      	bmi.n	801a200 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801a29c:	4542      	cmp	r2, r8
 801a29e:	daaf      	bge.n	801a200 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801a2a0:	1cef      	adds	r7, r5, #3
 801a2a2:	4699      	mov	r9, r3
 801a2a4:	f1b9 0f00 	cmp.w	r9, #0
 801a2a8:	ddb0      	ble.n	801a20c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801a2aa:	9902      	ldr	r1, [sp, #8]
 801a2ac:	1402      	asrs	r2, r0, #16
 801a2ae:	1426      	asrs	r6, r4, #16
 801a2b0:	fb0e 1202 	mla	r2, lr, r2, r1
 801a2b4:	9903      	ldr	r1, [sp, #12]
 801a2b6:	5d92      	ldrb	r2, [r2, r6]
 801a2b8:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801a2bc:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801a2c0:	d041      	beq.n	801a346 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801a2c2:	9a05      	ldr	r2, [sp, #20]
 801a2c4:	fa5f fb86 	uxtb.w	fp, r6
 801a2c8:	fb02 fc0c 	mul.w	ip, r2, ip
 801a2cc:	f10c 0201 	add.w	r2, ip, #1
 801a2d0:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801a2d4:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801a2d8:	1212      	asrs	r2, r2, #8
 801a2da:	fa1f fa82 	uxth.w	sl, r2
 801a2de:	43d2      	mvns	r2, r2
 801a2e0:	fb1b fb0a 	smulbb	fp, fp, sl
 801a2e4:	b2d2      	uxtb	r2, r2
 801a2e6:	fb0c bc02 	mla	ip, ip, r2, fp
 801a2ea:	fa1f fc8c 	uxth.w	ip, ip
 801a2ee:	f10c 0b01 	add.w	fp, ip, #1
 801a2f2:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801a2f6:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801a2fa:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801a2fe:	fb1b fb0a 	smulbb	fp, fp, sl
 801a302:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801a306:	fb16 fa0a 	smulbb	sl, r6, sl
 801a30a:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801a30e:	f807 cc03 	strb.w	ip, [r7, #-3]
 801a312:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801a316:	fb06 aa02 	mla	sl, r6, r2, sl
 801a31a:	fb0c bc02 	mla	ip, ip, r2, fp
 801a31e:	fa1f fa8a 	uxth.w	sl, sl
 801a322:	fa1f fc8c 	uxth.w	ip, ip
 801a326:	f10a 0601 	add.w	r6, sl, #1
 801a32a:	f10c 0b01 	add.w	fp, ip, #1
 801a32e:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801a332:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801a336:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a33a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801a33e:	f807 ac01 	strb.w	sl, [r7, #-1]
 801a342:	f807 cc02 	strb.w	ip, [r7, #-2]
 801a346:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a348:	3703      	adds	r7, #3
 801a34a:	f109 39ff 	add.w	r9, r9, #4294967295
 801a34e:	4414      	add	r4, r2
 801a350:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a352:	4410      	add	r0, r2
 801a354:	e7a6      	b.n	801a2a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801a356:	1426      	asrs	r6, r4, #16
 801a358:	d450      	bmi.n	801a3fc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801a35a:	4576      	cmp	r6, lr
 801a35c:	da4e      	bge.n	801a3fc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801a35e:	1402      	asrs	r2, r0, #16
 801a360:	d44c      	bmi.n	801a3fc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801a362:	4542      	cmp	r2, r8
 801a364:	da4a      	bge.n	801a3fc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801a366:	9902      	ldr	r1, [sp, #8]
 801a368:	fb0e 1202 	mla	r2, lr, r2, r1
 801a36c:	9903      	ldr	r1, [sp, #12]
 801a36e:	5d92      	ldrb	r2, [r2, r6]
 801a370:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801a374:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801a378:	d040      	beq.n	801a3fc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801a37a:	9a05      	ldr	r2, [sp, #20]
 801a37c:	fa5f fb86 	uxtb.w	fp, r6
 801a380:	fb02 fc0c 	mul.w	ip, r2, ip
 801a384:	f10c 0201 	add.w	r2, ip, #1
 801a388:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801a38c:	f897 c000 	ldrb.w	ip, [r7]
 801a390:	1212      	asrs	r2, r2, #8
 801a392:	fa1f fa82 	uxth.w	sl, r2
 801a396:	43d2      	mvns	r2, r2
 801a398:	fb1b fb0a 	smulbb	fp, fp, sl
 801a39c:	b2d2      	uxtb	r2, r2
 801a39e:	fb0c bc02 	mla	ip, ip, r2, fp
 801a3a2:	fa1f fc8c 	uxth.w	ip, ip
 801a3a6:	f10c 0b01 	add.w	fp, ip, #1
 801a3aa:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801a3ae:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801a3b2:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801a3b6:	fb1b fb0a 	smulbb	fp, fp, sl
 801a3ba:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801a3be:	fb16 fa0a 	smulbb	sl, r6, sl
 801a3c2:	78be      	ldrb	r6, [r7, #2]
 801a3c4:	f887 c000 	strb.w	ip, [r7]
 801a3c8:	f897 c001 	ldrb.w	ip, [r7, #1]
 801a3cc:	fb06 aa02 	mla	sl, r6, r2, sl
 801a3d0:	fb0c bc02 	mla	ip, ip, r2, fp
 801a3d4:	fa1f fa8a 	uxth.w	sl, sl
 801a3d8:	fa1f fc8c 	uxth.w	ip, ip
 801a3dc:	f10a 0601 	add.w	r6, sl, #1
 801a3e0:	f10c 0b01 	add.w	fp, ip, #1
 801a3e4:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801a3e8:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801a3ec:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a3f0:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801a3f4:	f887 a002 	strb.w	sl, [r7, #2]
 801a3f8:	f887 c001 	strb.w	ip, [r7, #1]
 801a3fc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a3fe:	3703      	adds	r7, #3
 801a400:	f109 39ff 	add.w	r9, r9, #4294967295
 801a404:	4414      	add	r4, r2
 801a406:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a408:	4410      	add	r0, r2
 801a40a:	e6fb      	b.n	801a204 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801a40c:	b007      	add	sp, #28
 801a40e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a412 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801a412:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a416:	b085      	sub	sp, #20
 801a418:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a41c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801a41e:	9203      	str	r2, [sp, #12]
 801a420:	6870      	ldr	r0, [r6, #4]
 801a422:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801a424:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801a428:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801a42c:	9100      	str	r1, [sp, #0]
 801a42e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801a432:	fb00 2404 	mla	r4, r0, r4, r2
 801a436:	6832      	ldr	r2, [r6, #0]
 801a438:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a43c:	4414      	add	r4, r2
 801a43e:	682a      	ldr	r2, [r5, #0]
 801a440:	9201      	str	r2, [sp, #4]
 801a442:	686a      	ldr	r2, [r5, #4]
 801a444:	3204      	adds	r2, #4
 801a446:	9202      	str	r2, [sp, #8]
 801a448:	9a00      	ldr	r2, [sp, #0]
 801a44a:	2a00      	cmp	r2, #0
 801a44c:	dc03      	bgt.n	801a456 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 801a44e:	9a03      	ldr	r2, [sp, #12]
 801a450:	2a00      	cmp	r2, #0
 801a452:	f340 8131 	ble.w	801a6b8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801a456:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a458:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a45c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a45e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a462:	2b00      	cmp	r3, #0
 801a464:	dd0e      	ble.n	801a484 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801a466:	1405      	asrs	r5, r0, #16
 801a468:	d405      	bmi.n	801a476 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801a46a:	4575      	cmp	r5, lr
 801a46c:	da03      	bge.n	801a476 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801a46e:	1415      	asrs	r5, r2, #16
 801a470:	d401      	bmi.n	801a476 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801a472:	4545      	cmp	r5, r8
 801a474:	db07      	blt.n	801a486 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801a476:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801a478:	3b01      	subs	r3, #1
 801a47a:	3403      	adds	r4, #3
 801a47c:	4428      	add	r0, r5
 801a47e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801a480:	442a      	add	r2, r5
 801a482:	e7ee      	b.n	801a462 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 801a484:	d06f      	beq.n	801a566 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801a486:	1e5d      	subs	r5, r3, #1
 801a488:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801a48a:	fb06 0605 	mla	r6, r6, r5, r0
 801a48e:	1436      	asrs	r6, r6, #16
 801a490:	d460      	bmi.n	801a554 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801a492:	4576      	cmp	r6, lr
 801a494:	da5e      	bge.n	801a554 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801a496:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801a498:	fb06 2505 	mla	r5, r6, r5, r2
 801a49c:	142d      	asrs	r5, r5, #16
 801a49e:	d459      	bmi.n	801a554 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801a4a0:	4545      	cmp	r5, r8
 801a4a2:	da57      	bge.n	801a554 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801a4a4:	1ce5      	adds	r5, r4, #3
 801a4a6:	469a      	mov	sl, r3
 801a4a8:	f1ba 0f00 	cmp.w	sl, #0
 801a4ac:	dd56      	ble.n	801a55c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14a>
 801a4ae:	9901      	ldr	r1, [sp, #4]
 801a4b0:	1416      	asrs	r6, r2, #16
 801a4b2:	1407      	asrs	r7, r0, #16
 801a4b4:	fb0e 1606 	mla	r6, lr, r6, r1
 801a4b8:	9902      	ldr	r1, [sp, #8]
 801a4ba:	5df6      	ldrb	r6, [r6, r7]
 801a4bc:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 801a4c0:	0e37      	lsrs	r7, r6, #24
 801a4c2:	2fff      	cmp	r7, #255	; 0xff
 801a4c4:	f000 80ef 	beq.w	801a6a6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 801a4c8:	fa5f fc87 	uxtb.w	ip, r7
 801a4cc:	b3d7      	cbz	r7, 801a544 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801a4ce:	fa1f f78c 	uxth.w	r7, ip
 801a4d2:	ea6f 0c0c 	mvn.w	ip, ip
 801a4d6:	fa5f fb86 	uxtb.w	fp, r6
 801a4da:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801a4de:	fa5f fc8c 	uxtb.w	ip, ip
 801a4e2:	fb1b fb07 	smulbb	fp, fp, r7
 801a4e6:	fb09 b90c 	mla	r9, r9, ip, fp
 801a4ea:	fa1f f989 	uxth.w	r9, r9
 801a4ee:	f109 0b01 	add.w	fp, r9, #1
 801a4f2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a4f6:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801a4fa:	fb1b fb0c 	smulbb	fp, fp, ip
 801a4fe:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a502:	f805 9c03 	strb.w	r9, [r5, #-3]
 801a506:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801a50a:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801a50e:	fb09 b907 	mla	r9, r9, r7, fp
 801a512:	fa1f f989 	uxth.w	r9, r9
 801a516:	f109 0b01 	add.w	fp, r9, #1
 801a51a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a51e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a522:	f805 9c02 	strb.w	r9, [r5, #-2]
 801a526:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801a52a:	fb19 fc0c 	smulbb	ip, r9, ip
 801a52e:	fb06 c607 	mla	r6, r6, r7, ip
 801a532:	b2b6      	uxth	r6, r6
 801a534:	f106 0c01 	add.w	ip, r6, #1
 801a538:	eb0c 2c16 	add.w	ip, ip, r6, lsr #8
 801a53c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801a540:	f805 cc01 	strb.w	ip, [r5, #-1]
 801a544:	9911      	ldr	r1, [sp, #68]	; 0x44
 801a546:	3503      	adds	r5, #3
 801a548:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a54c:	4408      	add	r0, r1
 801a54e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a550:	440a      	add	r2, r1
 801a552:	e7a9      	b.n	801a4a8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801a554:	2600      	movs	r6, #0
 801a556:	1b9d      	subs	r5, r3, r6
 801a558:	2d00      	cmp	r5, #0
 801a55a:	dc40      	bgt.n	801a5de <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801a55c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a560:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a564:	441c      	add	r4, r3
 801a566:	9b00      	ldr	r3, [sp, #0]
 801a568:	2b00      	cmp	r3, #0
 801a56a:	f340 80a5 	ble.w	801a6b8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801a56e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a572:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a574:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a578:	eeb0 6a62 	vmov.f32	s12, s5
 801a57c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a580:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a584:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a588:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801a58c:	eeb0 6a43 	vmov.f32	s12, s6
 801a590:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a594:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801a598:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a59c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a5a0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a5a4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a5a8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a5ac:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a5b0:	ee12 2a90 	vmov	r2, s5
 801a5b4:	eef0 2a47 	vmov.f32	s5, s14
 801a5b8:	fb92 f3f3 	sdiv	r3, r2, r3
 801a5bc:	ee13 2a10 	vmov	r2, s6
 801a5c0:	9311      	str	r3, [sp, #68]	; 0x44
 801a5c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a5c4:	eeb0 3a67 	vmov.f32	s6, s15
 801a5c8:	fb92 f3f3 	sdiv	r3, r2, r3
 801a5cc:	9312      	str	r3, [sp, #72]	; 0x48
 801a5ce:	9b00      	ldr	r3, [sp, #0]
 801a5d0:	9a03      	ldr	r2, [sp, #12]
 801a5d2:	3b01      	subs	r3, #1
 801a5d4:	9300      	str	r3, [sp, #0]
 801a5d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a5d8:	bf08      	it	eq
 801a5da:	4613      	moveq	r3, r2
 801a5dc:	e734      	b.n	801a448 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801a5de:	1407      	asrs	r7, r0, #16
 801a5e0:	d450      	bmi.n	801a684 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801a5e2:	4577      	cmp	r7, lr
 801a5e4:	da4e      	bge.n	801a684 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801a5e6:	1415      	asrs	r5, r2, #16
 801a5e8:	d44c      	bmi.n	801a684 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801a5ea:	4545      	cmp	r5, r8
 801a5ec:	da4a      	bge.n	801a684 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801a5ee:	9901      	ldr	r1, [sp, #4]
 801a5f0:	fb0e 1505 	mla	r5, lr, r5, r1
 801a5f4:	9902      	ldr	r1, [sp, #8]
 801a5f6:	5ded      	ldrb	r5, [r5, r7]
 801a5f8:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 801a5fc:	0e2f      	lsrs	r7, r5, #24
 801a5fe:	2fff      	cmp	r7, #255	; 0xff
 801a600:	d046      	beq.n	801a690 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27e>
 801a602:	fa5f f987 	uxtb.w	r9, r7
 801a606:	b3ef      	cbz	r7, 801a684 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801a608:	fa1f fc89 	uxth.w	ip, r9
 801a60c:	ea6f 0909 	mvn.w	r9, r9
 801a610:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801a614:	fa5f fb85 	uxtb.w	fp, r5
 801a618:	f814 a007 	ldrb.w	sl, [r4, r7]
 801a61c:	fa5f f989 	uxtb.w	r9, r9
 801a620:	fb1b fb0c 	smulbb	fp, fp, ip
 801a624:	fb0a ba09 	mla	sl, sl, r9, fp
 801a628:	fa1f fa8a 	uxth.w	sl, sl
 801a62c:	f10a 0b01 	add.w	fp, sl, #1
 801a630:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801a634:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a638:	f804 a007 	strb.w	sl, [r4, r7]
 801a63c:	4427      	add	r7, r4
 801a63e:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801a642:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801a646:	f897 b001 	ldrb.w	fp, [r7, #1]
 801a64a:	fb1b fb09 	smulbb	fp, fp, r9
 801a64e:	fb0a ba0c 	mla	sl, sl, ip, fp
 801a652:	fa1f fa8a 	uxth.w	sl, sl
 801a656:	f10a 0b01 	add.w	fp, sl, #1
 801a65a:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801a65e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a662:	f887 a001 	strb.w	sl, [r7, #1]
 801a666:	f897 a002 	ldrb.w	sl, [r7, #2]
 801a66a:	fb1a f909 	smulbb	r9, sl, r9
 801a66e:	fb05 950c 	mla	r5, r5, ip, r9
 801a672:	b2ad      	uxth	r5, r5
 801a674:	f105 0901 	add.w	r9, r5, #1
 801a678:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801a67c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a680:	f887 9002 	strb.w	r9, [r7, #2]
 801a684:	9911      	ldr	r1, [sp, #68]	; 0x44
 801a686:	3601      	adds	r6, #1
 801a688:	4408      	add	r0, r1
 801a68a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a68c:	440a      	add	r2, r1
 801a68e:	e762      	b.n	801a556 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801a690:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801a694:	ea4f 2c15 	mov.w	ip, r5, lsr #8
 801a698:	55e5      	strb	r5, [r4, r7]
 801a69a:	4427      	add	r7, r4
 801a69c:	0c2d      	lsrs	r5, r5, #16
 801a69e:	f887 c001 	strb.w	ip, [r7, #1]
 801a6a2:	70bd      	strb	r5, [r7, #2]
 801a6a4:	e7ee      	b.n	801a684 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801a6a6:	0a37      	lsrs	r7, r6, #8
 801a6a8:	f805 6c03 	strb.w	r6, [r5, #-3]
 801a6ac:	0c36      	lsrs	r6, r6, #16
 801a6ae:	f805 7c02 	strb.w	r7, [r5, #-2]
 801a6b2:	f805 6c01 	strb.w	r6, [r5, #-1]
 801a6b6:	e745      	b.n	801a544 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801a6b8:	b005      	add	sp, #20
 801a6ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a6be <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801a6be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6c2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801a6c4:	9201      	str	r2, [sp, #4]
 801a6c6:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 801a6ca:	6870      	ldr	r0, [r6, #4]
 801a6cc:	9200      	str	r2, [sp, #0]
 801a6ce:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801a6d2:	f9bd e050 	ldrsh.w	lr, [sp, #80]	; 0x50
 801a6d6:	fa1f fc85 	uxth.w	ip, r5
 801a6da:	43ed      	mvns	r5, r5
 801a6dc:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801a6e0:	b2ed      	uxtb	r5, r5
 801a6e2:	fb00 2404 	mla	r4, r0, r4, r2
 801a6e6:	6832      	ldr	r2, [r6, #0]
 801a6e8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a6ec:	4414      	add	r4, r2
 801a6ee:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801a6f0:	f8d2 8000 	ldr.w	r8, [r2]
 801a6f4:	2900      	cmp	r1, #0
 801a6f6:	dc03      	bgt.n	801a700 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42>
 801a6f8:	9a01      	ldr	r2, [sp, #4]
 801a6fa:	2a00      	cmp	r2, #0
 801a6fc:	f340 8104 	ble.w	801a908 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801a700:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a702:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a706:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a708:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a70c:	2b00      	cmp	r3, #0
 801a70e:	dd0f      	ble.n	801a730 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801a710:	1406      	asrs	r6, r0, #16
 801a712:	d406      	bmi.n	801a722 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801a714:	4576      	cmp	r6, lr
 801a716:	da04      	bge.n	801a722 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801a718:	1416      	asrs	r6, r2, #16
 801a71a:	d402      	bmi.n	801a722 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801a71c:	9f00      	ldr	r7, [sp, #0]
 801a71e:	42be      	cmp	r6, r7
 801a720:	db07      	blt.n	801a732 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801a722:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801a724:	3b01      	subs	r3, #1
 801a726:	3403      	adds	r4, #3
 801a728:	4430      	add	r0, r6
 801a72a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801a72c:	4432      	add	r2, r6
 801a72e:	e7ed      	b.n	801a70c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801a730:	d05f      	beq.n	801a7f2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x134>
 801a732:	1e5e      	subs	r6, r3, #1
 801a734:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801a736:	fb07 0706 	mla	r7, r7, r6, r0
 801a73a:	143f      	asrs	r7, r7, #16
 801a73c:	d450      	bmi.n	801a7e0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801a73e:	4577      	cmp	r7, lr
 801a740:	da4e      	bge.n	801a7e0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801a742:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801a744:	fb07 2606 	mla	r6, r7, r6, r2
 801a748:	1436      	asrs	r6, r6, #16
 801a74a:	d449      	bmi.n	801a7e0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801a74c:	9f00      	ldr	r7, [sp, #0]
 801a74e:	42be      	cmp	r6, r7
 801a750:	da46      	bge.n	801a7e0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801a752:	1ce6      	adds	r6, r4, #3
 801a754:	4699      	mov	r9, r3
 801a756:	f1b9 0f00 	cmp.w	r9, #0
 801a75a:	f106 0603 	add.w	r6, r6, #3
 801a75e:	dd43      	ble.n	801a7e8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801a760:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801a764:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801a768:	1417      	asrs	r7, r2, #16
 801a76a:	f109 39ff 	add.w	r9, r9, #4294967295
 801a76e:	fb1b fb05 	smulbb	fp, fp, r5
 801a772:	fb0e a707 	mla	r7, lr, r7, sl
 801a776:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801a77a:	eb08 0a07 	add.w	sl, r8, r7
 801a77e:	f818 7007 	ldrb.w	r7, [r8, r7]
 801a782:	fb07 b70c 	mla	r7, r7, ip, fp
 801a786:	b2bf      	uxth	r7, r7
 801a788:	f107 0b01 	add.w	fp, r7, #1
 801a78c:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801a790:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801a794:	fb1b fb05 	smulbb	fp, fp, r5
 801a798:	123f      	asrs	r7, r7, #8
 801a79a:	f806 7c06 	strb.w	r7, [r6, #-6]
 801a79e:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801a7a2:	fb07 b70c 	mla	r7, r7, ip, fp
 801a7a6:	b2bf      	uxth	r7, r7
 801a7a8:	f107 0b01 	add.w	fp, r7, #1
 801a7ac:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801a7b0:	123f      	asrs	r7, r7, #8
 801a7b2:	f806 7c05 	strb.w	r7, [r6, #-5]
 801a7b6:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801a7ba:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801a7be:	fb1a fa05 	smulbb	sl, sl, r5
 801a7c2:	fb07 a70c 	mla	r7, r7, ip, sl
 801a7c6:	b2bf      	uxth	r7, r7
 801a7c8:	f107 0a01 	add.w	sl, r7, #1
 801a7cc:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801a7d0:	123f      	asrs	r7, r7, #8
 801a7d2:	f806 7c04 	strb.w	r7, [r6, #-4]
 801a7d6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801a7d8:	4438      	add	r0, r7
 801a7da:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801a7dc:	443a      	add	r2, r7
 801a7de:	e7ba      	b.n	801a756 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801a7e0:	2700      	movs	r7, #0
 801a7e2:	1bde      	subs	r6, r3, r7
 801a7e4:	2e00      	cmp	r6, #0
 801a7e6:	dc3f      	bgt.n	801a868 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801a7e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a7ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a7f0:	441c      	add	r4, r3
 801a7f2:	2900      	cmp	r1, #0
 801a7f4:	f340 8088 	ble.w	801a908 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801a7f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a7fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a7fe:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a802:	3901      	subs	r1, #1
 801a804:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a808:	eef0 6a62 	vmov.f32	s13, s5
 801a80c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a810:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a814:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a818:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801a81c:	eef0 6a43 	vmov.f32	s13, s6
 801a820:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a824:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 801a828:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a82c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a830:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a834:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a838:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a83c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a840:	ee12 2a90 	vmov	r2, s5
 801a844:	eef0 2a47 	vmov.f32	s5, s14
 801a848:	fb92 f3f3 	sdiv	r3, r2, r3
 801a84c:	ee13 2a10 	vmov	r2, s6
 801a850:	930f      	str	r3, [sp, #60]	; 0x3c
 801a852:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a854:	eeb0 3a67 	vmov.f32	s6, s15
 801a858:	fb92 f3f3 	sdiv	r3, r2, r3
 801a85c:	9a01      	ldr	r2, [sp, #4]
 801a85e:	9310      	str	r3, [sp, #64]	; 0x40
 801a860:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a862:	bf08      	it	eq
 801a864:	4613      	moveq	r3, r2
 801a866:	e745      	b.n	801a6f4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801a868:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801a86c:	d446      	bmi.n	801a8fc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801a86e:	45f2      	cmp	sl, lr
 801a870:	da44      	bge.n	801a8fc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801a872:	ea5f 4922 	movs.w	r9, r2, asr #16
 801a876:	d441      	bmi.n	801a8fc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801a878:	9e00      	ldr	r6, [sp, #0]
 801a87a:	45b1      	cmp	r9, r6
 801a87c:	da3e      	bge.n	801a8fc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801a87e:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801a882:	fb0e a909 	mla	r9, lr, r9, sl
 801a886:	f814 b006 	ldrb.w	fp, [r4, r6]
 801a88a:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801a88e:	fb1b fb05 	smulbb	fp, fp, r5
 801a892:	eb08 0a09 	add.w	sl, r8, r9
 801a896:	f818 9009 	ldrb.w	r9, [r8, r9]
 801a89a:	fb09 b90c 	mla	r9, r9, ip, fp
 801a89e:	fa1f f989 	uxth.w	r9, r9
 801a8a2:	f109 0b01 	add.w	fp, r9, #1
 801a8a6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a8aa:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a8ae:	f804 9006 	strb.w	r9, [r4, r6]
 801a8b2:	4426      	add	r6, r4
 801a8b4:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801a8b8:	f896 b001 	ldrb.w	fp, [r6, #1]
 801a8bc:	fb1b fb05 	smulbb	fp, fp, r5
 801a8c0:	fb09 b90c 	mla	r9, r9, ip, fp
 801a8c4:	fa1f f989 	uxth.w	r9, r9
 801a8c8:	f109 0b01 	add.w	fp, r9, #1
 801a8cc:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a8d0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a8d4:	f886 9001 	strb.w	r9, [r6, #1]
 801a8d8:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801a8dc:	f896 a002 	ldrb.w	sl, [r6, #2]
 801a8e0:	fb1a fa05 	smulbb	sl, sl, r5
 801a8e4:	fb09 a90c 	mla	r9, r9, ip, sl
 801a8e8:	fa1f f989 	uxth.w	r9, r9
 801a8ec:	f109 0a01 	add.w	sl, r9, #1
 801a8f0:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801a8f4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a8f8:	f886 9002 	strb.w	r9, [r6, #2]
 801a8fc:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801a8fe:	3701      	adds	r7, #1
 801a900:	4430      	add	r0, r6
 801a902:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801a904:	4432      	add	r2, r6
 801a906:	e76c      	b.n	801a7e2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x124>
 801a908:	b003      	add	sp, #12
 801a90a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a90e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801a90e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a912:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801a914:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a918:	9201      	str	r2, [sp, #4]
 801a91a:	6868      	ldr	r0, [r5, #4]
 801a91c:	f9bd c050 	ldrsh.w	ip, [sp, #80]	; 0x50
 801a920:	f9bd e054 	ldrsh.w	lr, [sp, #84]	; 0x54
 801a924:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801a928:	e9dd 760f 	ldrd	r7, r6, [sp, #60]	; 0x3c
 801a92c:	fb00 2404 	mla	r4, r0, r4, r2
 801a930:	682a      	ldr	r2, [r5, #0]
 801a932:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a936:	4414      	add	r4, r2
 801a938:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801a93a:	f8d2 9000 	ldr.w	r9, [r2]
 801a93e:	2900      	cmp	r1, #0
 801a940:	dc03      	bgt.n	801a94a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801a942:	9a01      	ldr	r2, [sp, #4]
 801a944:	2a00      	cmp	r2, #0
 801a946:	f340 80a8 	ble.w	801aa9a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801a94a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a94c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a950:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a952:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a956:	2b00      	cmp	r3, #0
 801a958:	dd0c      	ble.n	801a974 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801a95a:	1405      	asrs	r5, r0, #16
 801a95c:	d405      	bmi.n	801a96a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801a95e:	4565      	cmp	r5, ip
 801a960:	da03      	bge.n	801a96a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801a962:	1415      	asrs	r5, r2, #16
 801a964:	d401      	bmi.n	801a96a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801a966:	4575      	cmp	r5, lr
 801a968:	db05      	blt.n	801a976 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801a96a:	4438      	add	r0, r7
 801a96c:	4432      	add	r2, r6
 801a96e:	3b01      	subs	r3, #1
 801a970:	3403      	adds	r4, #3
 801a972:	e7f0      	b.n	801a956 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801a974:	d03a      	beq.n	801a9ec <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801a976:	1e5d      	subs	r5, r3, #1
 801a978:	fb07 0805 	mla	r8, r7, r5, r0
 801a97c:	ea5f 4828 	movs.w	r8, r8, asr #16
 801a980:	d429      	bmi.n	801a9d6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801a982:	45e0      	cmp	r8, ip
 801a984:	da27      	bge.n	801a9d6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801a986:	fb06 2505 	mla	r5, r6, r5, r2
 801a98a:	142d      	asrs	r5, r5, #16
 801a98c:	d423      	bmi.n	801a9d6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801a98e:	4575      	cmp	r5, lr
 801a990:	da21      	bge.n	801a9d6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801a992:	f104 0803 	add.w	r8, r4, #3
 801a996:	469a      	mov	sl, r3
 801a998:	f1ba 0f00 	cmp.w	sl, #0
 801a99c:	f108 0803 	add.w	r8, r8, #3
 801a9a0:	dd1f      	ble.n	801a9e2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 801a9a2:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801a9a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a9aa:	1415      	asrs	r5, r2, #16
 801a9ac:	4438      	add	r0, r7
 801a9ae:	4432      	add	r2, r6
 801a9b0:	fb0c b505 	mla	r5, ip, r5, fp
 801a9b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a9b8:	eb09 0b05 	add.w	fp, r9, r5
 801a9bc:	f819 5005 	ldrb.w	r5, [r9, r5]
 801a9c0:	f808 5c06 	strb.w	r5, [r8, #-6]
 801a9c4:	f89b 5001 	ldrb.w	r5, [fp, #1]
 801a9c8:	f808 5c05 	strb.w	r5, [r8, #-5]
 801a9cc:	f89b 5002 	ldrb.w	r5, [fp, #2]
 801a9d0:	f808 5c04 	strb.w	r5, [r8, #-4]
 801a9d4:	e7e0      	b.n	801a998 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801a9d6:	2500      	movs	r5, #0
 801a9d8:	eba3 0805 	sub.w	r8, r3, r5
 801a9dc:	f1b8 0f00 	cmp.w	r8, #0
 801a9e0:	dc38      	bgt.n	801aa54 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x146>
 801a9e2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a9e6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a9ea:	441c      	add	r4, r3
 801a9ec:	2900      	cmp	r1, #0
 801a9ee:	dd54      	ble.n	801aa9a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801a9f0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a9f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a9f6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a9fa:	3901      	subs	r1, #1
 801a9fc:	eeb0 6a62 	vmov.f32	s12, s5
 801aa00:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801aa04:	ee31 1a05 	vadd.f32	s2, s2, s10
 801aa08:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801aa0c:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801aa10:	eeb0 6a43 	vmov.f32	s12, s6
 801aa14:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801aa18:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801aa1c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801aa20:	ee61 7a27 	vmul.f32	s15, s2, s15
 801aa24:	ee77 2a62 	vsub.f32	s5, s14, s5
 801aa28:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801aa2c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801aa30:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801aa34:	ee12 2a90 	vmov	r2, s5
 801aa38:	eef0 2a47 	vmov.f32	s5, s14
 801aa3c:	fb92 f7f3 	sdiv	r7, r2, r3
 801aa40:	ee13 2a10 	vmov	r2, s6
 801aa44:	eeb0 3a67 	vmov.f32	s6, s15
 801aa48:	fb92 f6f3 	sdiv	r6, r2, r3
 801aa4c:	9a01      	ldr	r2, [sp, #4]
 801aa4e:	bf08      	it	eq
 801aa50:	4613      	moveq	r3, r2
 801aa52:	e774      	b.n	801a93e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801aa54:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801aa58:	d41b      	bmi.n	801aa92 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801aa5a:	45e2      	cmp	sl, ip
 801aa5c:	da19      	bge.n	801aa92 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801aa5e:	ea5f 4822 	movs.w	r8, r2, asr #16
 801aa62:	d416      	bmi.n	801aa92 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801aa64:	45f0      	cmp	r8, lr
 801aa66:	da14      	bge.n	801aa92 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801aa68:	fb0c a808 	mla	r8, ip, r8, sl
 801aa6c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801aa70:	f819 b008 	ldrb.w	fp, [r9, r8]
 801aa74:	eb09 0a08 	add.w	sl, r9, r8
 801aa78:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 801aa7c:	f804 b008 	strb.w	fp, [r4, r8]
 801aa80:	44a0      	add	r8, r4
 801aa82:	f89a b001 	ldrb.w	fp, [sl, #1]
 801aa86:	f888 b001 	strb.w	fp, [r8, #1]
 801aa8a:	f89a a002 	ldrb.w	sl, [sl, #2]
 801aa8e:	f888 a002 	strb.w	sl, [r8, #2]
 801aa92:	4438      	add	r0, r7
 801aa94:	4432      	add	r2, r6
 801aa96:	3501      	adds	r5, #1
 801aa98:	e79e      	b.n	801a9d8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 801aa9a:	b003      	add	sp, #12
 801aa9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801aaa0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801aaa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aaa4:	b085      	sub	sp, #20
 801aaa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801aaaa:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801aaac:	9202      	str	r2, [sp, #8]
 801aaae:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801aab2:	6860      	ldr	r0, [r4, #4]
 801aab4:	9203      	str	r2, [sp, #12]
 801aab6:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801aaba:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801aabe:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801aac2:	fb00 2505 	mla	r5, r0, r5, r2
 801aac6:	6822      	ldr	r2, [r4, #0]
 801aac8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801aacc:	4415      	add	r5, r2
 801aace:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801aad0:	6812      	ldr	r2, [r2, #0]
 801aad2:	9201      	str	r2, [sp, #4]
 801aad4:	2900      	cmp	r1, #0
 801aad6:	dc03      	bgt.n	801aae0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801aad8:	9a02      	ldr	r2, [sp, #8]
 801aada:	2a00      	cmp	r2, #0
 801aadc:	f340 811c 	ble.w	801ad18 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801aae0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801aae2:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801aae6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801aae8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801aaec:	2b00      	cmp	r3, #0
 801aaee:	dd0e      	ble.n	801ab0e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801aaf0:	1422      	asrs	r2, r4, #16
 801aaf2:	d405      	bmi.n	801ab00 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801aaf4:	4572      	cmp	r2, lr
 801aaf6:	da03      	bge.n	801ab00 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801aaf8:	1402      	asrs	r2, r0, #16
 801aafa:	d401      	bmi.n	801ab00 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801aafc:	4542      	cmp	r2, r8
 801aafe:	db07      	blt.n	801ab10 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801ab00:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ab02:	3b01      	subs	r3, #1
 801ab04:	3503      	adds	r5, #3
 801ab06:	4414      	add	r4, r2
 801ab08:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ab0a:	4410      	add	r0, r2
 801ab0c:	e7ee      	b.n	801aaec <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801ab0e:	d072      	beq.n	801abf6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x156>
 801ab10:	1e5a      	subs	r2, r3, #1
 801ab12:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801ab14:	fb06 4602 	mla	r6, r6, r2, r4
 801ab18:	1436      	asrs	r6, r6, #16
 801ab1a:	d461      	bmi.n	801abe0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801ab1c:	4576      	cmp	r6, lr
 801ab1e:	da5f      	bge.n	801abe0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801ab20:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801ab22:	fb06 0202 	mla	r2, r6, r2, r0
 801ab26:	1412      	asrs	r2, r2, #16
 801ab28:	d45a      	bmi.n	801abe0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801ab2a:	4542      	cmp	r2, r8
 801ab2c:	da58      	bge.n	801abe0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801ab2e:	1cef      	adds	r7, r5, #3
 801ab30:	4699      	mov	r9, r3
 801ab32:	f1b9 0f00 	cmp.w	r9, #0
 801ab36:	dd59      	ble.n	801abec <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801ab38:	1426      	asrs	r6, r4, #16
 801ab3a:	1402      	asrs	r2, r0, #16
 801ab3c:	fb0e 6202 	mla	r2, lr, r2, r6
 801ab40:	9e01      	ldr	r6, [sp, #4]
 801ab42:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801ab46:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801ab4a:	d041      	beq.n	801abd0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x130>
 801ab4c:	9a03      	ldr	r2, [sp, #12]
 801ab4e:	fa5f fb86 	uxtb.w	fp, r6
 801ab52:	fb02 fc0c 	mul.w	ip, r2, ip
 801ab56:	f10c 0201 	add.w	r2, ip, #1
 801ab5a:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801ab5e:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801ab62:	1212      	asrs	r2, r2, #8
 801ab64:	fa1f fa82 	uxth.w	sl, r2
 801ab68:	43d2      	mvns	r2, r2
 801ab6a:	fb1b fb0a 	smulbb	fp, fp, sl
 801ab6e:	b2d2      	uxtb	r2, r2
 801ab70:	fb0c bc02 	mla	ip, ip, r2, fp
 801ab74:	fa1f fc8c 	uxth.w	ip, ip
 801ab78:	f10c 0b01 	add.w	fp, ip, #1
 801ab7c:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801ab80:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801ab84:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801ab88:	fb1b fb0a 	smulbb	fp, fp, sl
 801ab8c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ab90:	fb16 fa0a 	smulbb	sl, r6, sl
 801ab94:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801ab98:	f807 cc03 	strb.w	ip, [r7, #-3]
 801ab9c:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801aba0:	fb06 aa02 	mla	sl, r6, r2, sl
 801aba4:	fb0c bc02 	mla	ip, ip, r2, fp
 801aba8:	fa1f fa8a 	uxth.w	sl, sl
 801abac:	fa1f fc8c 	uxth.w	ip, ip
 801abb0:	f10a 0601 	add.w	r6, sl, #1
 801abb4:	f10c 0b01 	add.w	fp, ip, #1
 801abb8:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801abbc:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801abc0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801abc4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801abc8:	f807 ac01 	strb.w	sl, [r7, #-1]
 801abcc:	f807 cc02 	strb.w	ip, [r7, #-2]
 801abd0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801abd2:	3703      	adds	r7, #3
 801abd4:	f109 39ff 	add.w	r9, r9, #4294967295
 801abd8:	4414      	add	r4, r2
 801abda:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801abdc:	4410      	add	r0, r2
 801abde:	e7a8      	b.n	801ab32 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801abe0:	f04f 0c00 	mov.w	ip, #0
 801abe4:	eba3 020c 	sub.w	r2, r3, ip
 801abe8:	2a00      	cmp	r2, #0
 801abea:	dc3d      	bgt.n	801ac68 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c8>
 801abec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801abf0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801abf4:	441d      	add	r5, r3
 801abf6:	2900      	cmp	r1, #0
 801abf8:	f340 808e 	ble.w	801ad18 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801abfc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ac00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ac02:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ac06:	3901      	subs	r1, #1
 801ac08:	eeb0 6a62 	vmov.f32	s12, s5
 801ac0c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ac10:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ac14:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ac18:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801ac1c:	eeb0 6a43 	vmov.f32	s12, s6
 801ac20:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ac24:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801ac28:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ac2c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ac30:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ac34:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ac38:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ac3c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ac40:	ee12 2a90 	vmov	r2, s5
 801ac44:	eef0 2a47 	vmov.f32	s5, s14
 801ac48:	fb92 f3f3 	sdiv	r3, r2, r3
 801ac4c:	ee13 2a10 	vmov	r2, s6
 801ac50:	9311      	str	r3, [sp, #68]	; 0x44
 801ac52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ac54:	eeb0 3a67 	vmov.f32	s6, s15
 801ac58:	fb92 f3f3 	sdiv	r3, r2, r3
 801ac5c:	9a02      	ldr	r2, [sp, #8]
 801ac5e:	9312      	str	r3, [sp, #72]	; 0x48
 801ac60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ac62:	bf08      	it	eq
 801ac64:	4613      	moveq	r3, r2
 801ac66:	e735      	b.n	801aad4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34>
 801ac68:	1426      	asrs	r6, r4, #16
 801ac6a:	d44e      	bmi.n	801ad0a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801ac6c:	4576      	cmp	r6, lr
 801ac6e:	da4c      	bge.n	801ad0a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801ac70:	1402      	asrs	r2, r0, #16
 801ac72:	d44a      	bmi.n	801ad0a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801ac74:	4542      	cmp	r2, r8
 801ac76:	da48      	bge.n	801ad0a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801ac78:	fb0e 6202 	mla	r2, lr, r2, r6
 801ac7c:	9e01      	ldr	r6, [sp, #4]
 801ac7e:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801ac82:	0e3a      	lsrs	r2, r7, #24
 801ac84:	d041      	beq.n	801ad0a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801ac86:	9e03      	ldr	r6, [sp, #12]
 801ac88:	fa5f fb87 	uxtb.w	fp, r7
 801ac8c:	4372      	muls	r2, r6
 801ac8e:	1c56      	adds	r6, r2, #1
 801ac90:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801ac94:	eb0c 064c 	add.w	r6, ip, ip, lsl #1
 801ac98:	1212      	asrs	r2, r2, #8
 801ac9a:	f815 9006 	ldrb.w	r9, [r5, r6]
 801ac9e:	fa1f fa82 	uxth.w	sl, r2
 801aca2:	43d2      	mvns	r2, r2
 801aca4:	fb1b fb0a 	smulbb	fp, fp, sl
 801aca8:	b2d2      	uxtb	r2, r2
 801acaa:	fb09 b902 	mla	r9, r9, r2, fp
 801acae:	fa1f f989 	uxth.w	r9, r9
 801acb2:	f109 0b01 	add.w	fp, r9, #1
 801acb6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801acba:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801acbe:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801acc2:	fb1b fb0a 	smulbb	fp, fp, sl
 801acc6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801acca:	fb17 fa0a 	smulbb	sl, r7, sl
 801acce:	f805 9006 	strb.w	r9, [r5, r6]
 801acd2:	442e      	add	r6, r5
 801acd4:	78b7      	ldrb	r7, [r6, #2]
 801acd6:	f896 9001 	ldrb.w	r9, [r6, #1]
 801acda:	fb07 aa02 	mla	sl, r7, r2, sl
 801acde:	fb09 b902 	mla	r9, r9, r2, fp
 801ace2:	fa1f fa8a 	uxth.w	sl, sl
 801ace6:	fa1f f989 	uxth.w	r9, r9
 801acea:	f10a 0701 	add.w	r7, sl, #1
 801acee:	f109 0b01 	add.w	fp, r9, #1
 801acf2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801acf6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801acfa:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801acfe:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ad02:	f886 a002 	strb.w	sl, [r6, #2]
 801ad06:	f886 9001 	strb.w	r9, [r6, #1]
 801ad0a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ad0c:	f10c 0c01 	add.w	ip, ip, #1
 801ad10:	4414      	add	r4, r2
 801ad12:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ad14:	4410      	add	r0, r2
 801ad16:	e765      	b.n	801abe4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801ad18:	b005      	add	sp, #20
 801ad1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ad1e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801ad1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad22:	b085      	sub	sp, #20
 801ad24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ad28:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ad2a:	9203      	str	r2, [sp, #12]
 801ad2c:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801ad30:	6860      	ldr	r0, [r4, #4]
 801ad32:	9201      	str	r2, [sp, #4]
 801ad34:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801ad38:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801ad3c:	fb00 2505 	mla	r5, r0, r5, r2
 801ad40:	6822      	ldr	r2, [r4, #0]
 801ad42:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ad46:	4415      	add	r5, r2
 801ad48:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801ad4a:	6812      	ldr	r2, [r2, #0]
 801ad4c:	9202      	str	r2, [sp, #8]
 801ad4e:	2900      	cmp	r1, #0
 801ad50:	dc03      	bgt.n	801ad5a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801ad52:	9a03      	ldr	r2, [sp, #12]
 801ad54:	2a00      	cmp	r2, #0
 801ad56:	f340 8122 	ble.w	801af9e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801ad5a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ad5c:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801ad60:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ad62:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ad66:	2b00      	cmp	r3, #0
 801ad68:	dd0f      	ble.n	801ad8a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801ad6a:	1422      	asrs	r2, r4, #16
 801ad6c:	d406      	bmi.n	801ad7c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801ad6e:	4572      	cmp	r2, lr
 801ad70:	da04      	bge.n	801ad7c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801ad72:	1402      	asrs	r2, r0, #16
 801ad74:	d402      	bmi.n	801ad7c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801ad76:	9e01      	ldr	r6, [sp, #4]
 801ad78:	42b2      	cmp	r2, r6
 801ad7a:	db07      	blt.n	801ad8c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801ad7c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ad7e:	3b01      	subs	r3, #1
 801ad80:	3503      	adds	r5, #3
 801ad82:	4414      	add	r4, r2
 801ad84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ad86:	4410      	add	r0, r2
 801ad88:	e7ed      	b.n	801ad66 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801ad8a:	d06e      	beq.n	801ae6a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801ad8c:	1e5a      	subs	r2, r3, #1
 801ad8e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801ad90:	fb06 4602 	mla	r6, r6, r2, r4
 801ad94:	1436      	asrs	r6, r6, #16
 801ad96:	d45d      	bmi.n	801ae54 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801ad98:	4576      	cmp	r6, lr
 801ad9a:	da5b      	bge.n	801ae54 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801ad9c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801ad9e:	fb06 0202 	mla	r2, r6, r2, r0
 801ada2:	1412      	asrs	r2, r2, #16
 801ada4:	d456      	bmi.n	801ae54 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801ada6:	9e01      	ldr	r6, [sp, #4]
 801ada8:	42b2      	cmp	r2, r6
 801adaa:	da53      	bge.n	801ae54 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801adac:	1cee      	adds	r6, r5, #3
 801adae:	469a      	mov	sl, r3
 801adb0:	f1ba 0f00 	cmp.w	sl, #0
 801adb4:	dd54      	ble.n	801ae60 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801adb6:	1427      	asrs	r7, r4, #16
 801adb8:	1402      	asrs	r2, r0, #16
 801adba:	fb0e 7202 	mla	r2, lr, r2, r7
 801adbe:	9f02      	ldr	r7, [sp, #8]
 801adc0:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801adc4:	ea5f 6c17 	movs.w	ip, r7, lsr #24
 801adc8:	d03c      	beq.n	801ae44 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801adca:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801adce:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801add2:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801add6:	fa5f f28c 	uxtb.w	r2, ip
 801adda:	b2ff      	uxtb	r7, r7
 801addc:	f000 80d8 	beq.w	801af90 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801ade0:	fa1f f882 	uxth.w	r8, r2
 801ade4:	43d2      	mvns	r2, r2
 801ade6:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801adea:	fb17 f708 	smulbb	r7, r7, r8
 801adee:	b2d2      	uxtb	r2, r2
 801adf0:	fb19 f908 	smulbb	r9, r9, r8
 801adf4:	fb0c 7702 	mla	r7, ip, r2, r7
 801adf8:	fb1b f808 	smulbb	r8, fp, r8
 801adfc:	b2bf      	uxth	r7, r7
 801adfe:	f107 0c01 	add.w	ip, r7, #1
 801ae02:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801ae06:	123f      	asrs	r7, r7, #8
 801ae08:	f806 7c03 	strb.w	r7, [r6, #-3]
 801ae0c:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801ae10:	fb07 9902 	mla	r9, r7, r2, r9
 801ae14:	fa1f f989 	uxth.w	r9, r9
 801ae18:	f109 0701 	add.w	r7, r9, #1
 801ae1c:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801ae20:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801ae24:	fb07 8802 	mla	r8, r7, r2, r8
 801ae28:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ae2c:	fa1f f888 	uxth.w	r8, r8
 801ae30:	f806 9c02 	strb.w	r9, [r6, #-2]
 801ae34:	f108 0201 	add.w	r2, r8, #1
 801ae38:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801ae3c:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ae40:	f806 8c01 	strb.w	r8, [r6, #-1]
 801ae44:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ae46:	3603      	adds	r6, #3
 801ae48:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ae4c:	4414      	add	r4, r2
 801ae4e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ae50:	4410      	add	r0, r2
 801ae52:	e7ad      	b.n	801adb0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801ae54:	f04f 0c00 	mov.w	ip, #0
 801ae58:	eba3 020c 	sub.w	r2, r3, ip
 801ae5c:	2a00      	cmp	r2, #0
 801ae5e:	dc3d      	bgt.n	801aedc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 801ae60:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ae64:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ae68:	441d      	add	r5, r3
 801ae6a:	2900      	cmp	r1, #0
 801ae6c:	f340 8097 	ble.w	801af9e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801ae70:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ae74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ae76:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ae7a:	3901      	subs	r1, #1
 801ae7c:	eeb0 6a62 	vmov.f32	s12, s5
 801ae80:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ae84:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ae88:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ae8c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801ae90:	eeb0 6a43 	vmov.f32	s12, s6
 801ae94:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ae98:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801ae9c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801aea0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801aea4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801aea8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801aeac:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801aeb0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801aeb4:	ee12 2a90 	vmov	r2, s5
 801aeb8:	eef0 2a47 	vmov.f32	s5, s14
 801aebc:	fb92 f3f3 	sdiv	r3, r2, r3
 801aec0:	ee13 2a10 	vmov	r2, s6
 801aec4:	9311      	str	r3, [sp, #68]	; 0x44
 801aec6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801aec8:	eeb0 3a67 	vmov.f32	s6, s15
 801aecc:	fb92 f3f3 	sdiv	r3, r2, r3
 801aed0:	9a03      	ldr	r2, [sp, #12]
 801aed2:	9312      	str	r3, [sp, #72]	; 0x48
 801aed4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801aed6:	bf08      	it	eq
 801aed8:	4613      	moveq	r3, r2
 801aeda:	e738      	b.n	801ad4e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801aedc:	1426      	asrs	r6, r4, #16
 801aede:	d448      	bmi.n	801af72 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801aee0:	4576      	cmp	r6, lr
 801aee2:	da46      	bge.n	801af72 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801aee4:	1402      	asrs	r2, r0, #16
 801aee6:	d444      	bmi.n	801af72 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801aee8:	9f01      	ldr	r7, [sp, #4]
 801aeea:	42ba      	cmp	r2, r7
 801aeec:	da41      	bge.n	801af72 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801aeee:	fb0e 6202 	mla	r2, lr, r2, r6
 801aef2:	9e02      	ldr	r6, [sp, #8]
 801aef4:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801aef8:	0e3a      	lsrs	r2, r7, #24
 801aefa:	d03a      	beq.n	801af72 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801aefc:	2aff      	cmp	r2, #255	; 0xff
 801aefe:	b2d6      	uxtb	r6, r2
 801af00:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801af04:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801af08:	ea4f 024c 	mov.w	r2, ip, lsl #1
 801af0c:	b2ff      	uxtb	r7, r7
 801af0e:	d037      	beq.n	801af80 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x262>
 801af10:	fa1f f986 	uxth.w	r9, r6
 801af14:	4462      	add	r2, ip
 801af16:	43f6      	mvns	r6, r6
 801af18:	f815 8002 	ldrb.w	r8, [r5, r2]
 801af1c:	fb17 f709 	smulbb	r7, r7, r9
 801af20:	fb1a fa09 	smulbb	sl, sl, r9
 801af24:	b2f6      	uxtb	r6, r6
 801af26:	fb1b f909 	smulbb	r9, fp, r9
 801af2a:	fb08 7706 	mla	r7, r8, r6, r7
 801af2e:	b2bf      	uxth	r7, r7
 801af30:	f107 0801 	add.w	r8, r7, #1
 801af34:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801af38:	123f      	asrs	r7, r7, #8
 801af3a:	54af      	strb	r7, [r5, r2]
 801af3c:	442a      	add	r2, r5
 801af3e:	7857      	ldrb	r7, [r2, #1]
 801af40:	fb07 aa06 	mla	sl, r7, r6, sl
 801af44:	fa1f fa8a 	uxth.w	sl, sl
 801af48:	f10a 0701 	add.w	r7, sl, #1
 801af4c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801af50:	7897      	ldrb	r7, [r2, #2]
 801af52:	fb07 9906 	mla	r9, r7, r6, r9
 801af56:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801af5a:	fa1f f989 	uxth.w	r9, r9
 801af5e:	f882 a001 	strb.w	sl, [r2, #1]
 801af62:	f109 0601 	add.w	r6, r9, #1
 801af66:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801af6a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801af6e:	f882 9002 	strb.w	r9, [r2, #2]
 801af72:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801af74:	f10c 0c01 	add.w	ip, ip, #1
 801af78:	4414      	add	r4, r2
 801af7a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801af7c:	4410      	add	r0, r2
 801af7e:	e76b      	b.n	801ae58 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x13a>
 801af80:	4462      	add	r2, ip
 801af82:	54af      	strb	r7, [r5, r2]
 801af84:	442a      	add	r2, r5
 801af86:	f882 a001 	strb.w	sl, [r2, #1]
 801af8a:	f882 b002 	strb.w	fp, [r2, #2]
 801af8e:	e7f0      	b.n	801af72 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801af90:	f806 7c03 	strb.w	r7, [r6, #-3]
 801af94:	f806 9c02 	strb.w	r9, [r6, #-2]
 801af98:	f806 bc01 	strb.w	fp, [r6, #-1]
 801af9c:	e752      	b.n	801ae44 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801af9e:	b005      	add	sp, #20
 801afa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801afa4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801afa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801afa8:	b087      	sub	sp, #28
 801afaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801afae:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801afb0:	9204      	str	r2, [sp, #16]
 801afb2:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801afb6:	6860      	ldr	r0, [r4, #4]
 801afb8:	9205      	str	r2, [sp, #20]
 801afba:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801afbe:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801afc2:	9101      	str	r1, [sp, #4]
 801afc4:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801afc8:	fb00 2505 	mla	r5, r0, r5, r2
 801afcc:	6822      	ldr	r2, [r4, #0]
 801afce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801afd2:	4415      	add	r5, r2
 801afd4:	f10e 0201 	add.w	r2, lr, #1
 801afd8:	f022 0201 	bic.w	r2, r2, #1
 801afdc:	9202      	str	r2, [sp, #8]
 801afde:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801afe0:	6812      	ldr	r2, [r2, #0]
 801afe2:	9203      	str	r2, [sp, #12]
 801afe4:	9a01      	ldr	r2, [sp, #4]
 801afe6:	2a00      	cmp	r2, #0
 801afe8:	dc03      	bgt.n	801aff2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801afea:	9a04      	ldr	r2, [sp, #16]
 801afec:	2a00      	cmp	r2, #0
 801afee:	f340 8132 	ble.w	801b256 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801aff2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801aff4:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801aff8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801affa:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801affe:	2b00      	cmp	r3, #0
 801b000:	dd0e      	ble.n	801b020 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801b002:	1422      	asrs	r2, r4, #16
 801b004:	d405      	bmi.n	801b012 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801b006:	4596      	cmp	lr, r2
 801b008:	dd03      	ble.n	801b012 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801b00a:	1402      	asrs	r2, r0, #16
 801b00c:	d401      	bmi.n	801b012 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801b00e:	4542      	cmp	r2, r8
 801b010:	db07      	blt.n	801b022 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801b012:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b014:	3b01      	subs	r3, #1
 801b016:	3503      	adds	r5, #3
 801b018:	4414      	add	r4, r2
 801b01a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b01c:	4410      	add	r0, r2
 801b01e:	e7ee      	b.n	801affe <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a>
 801b020:	d010      	beq.n	801b044 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801b022:	1e5a      	subs	r2, r3, #1
 801b024:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801b026:	fb06 4602 	mla	r6, r6, r2, r4
 801b02a:	1436      	asrs	r6, r6, #16
 801b02c:	d546      	bpl.n	801b0bc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801b02e:	4699      	mov	r9, r3
 801b030:	462e      	mov	r6, r5
 801b032:	f1b9 0f00 	cmp.w	r9, #0
 801b036:	f300 80ac 	bgt.w	801b192 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ee>
 801b03a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b03e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b042:	441d      	add	r5, r3
 801b044:	9b01      	ldr	r3, [sp, #4]
 801b046:	2b00      	cmp	r3, #0
 801b048:	f340 8105 	ble.w	801b256 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801b04c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b050:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b052:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b056:	eeb0 6a62 	vmov.f32	s12, s5
 801b05a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b05e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b062:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b066:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801b06a:	eeb0 6a43 	vmov.f32	s12, s6
 801b06e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b072:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801b076:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b07a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b07e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b082:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b086:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b08a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b08e:	ee12 2a90 	vmov	r2, s5
 801b092:	eef0 2a47 	vmov.f32	s5, s14
 801b096:	fb92 f3f3 	sdiv	r3, r2, r3
 801b09a:	ee13 2a10 	vmov	r2, s6
 801b09e:	9313      	str	r3, [sp, #76]	; 0x4c
 801b0a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b0a2:	eeb0 3a67 	vmov.f32	s6, s15
 801b0a6:	fb92 f3f3 	sdiv	r3, r2, r3
 801b0aa:	9314      	str	r3, [sp, #80]	; 0x50
 801b0ac:	9b01      	ldr	r3, [sp, #4]
 801b0ae:	9a04      	ldr	r2, [sp, #16]
 801b0b0:	3b01      	subs	r3, #1
 801b0b2:	9301      	str	r3, [sp, #4]
 801b0b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b0b6:	bf08      	it	eq
 801b0b8:	4613      	moveq	r3, r2
 801b0ba:	e793      	b.n	801afe4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801b0bc:	45b6      	cmp	lr, r6
 801b0be:	ddb6      	ble.n	801b02e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801b0c0:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801b0c2:	fb06 0202 	mla	r2, r6, r2, r0
 801b0c6:	1412      	asrs	r2, r2, #16
 801b0c8:	d4b1      	bmi.n	801b02e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801b0ca:	4542      	cmp	r2, r8
 801b0cc:	daaf      	bge.n	801b02e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801b0ce:	1cee      	adds	r6, r5, #3
 801b0d0:	4699      	mov	r9, r3
 801b0d2:	f1b9 0f00 	cmp.w	r9, #0
 801b0d6:	ddb0      	ble.n	801b03a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801b0d8:	1422      	asrs	r2, r4, #16
 801b0da:	9902      	ldr	r1, [sp, #8]
 801b0dc:	1407      	asrs	r7, r0, #16
 801b0de:	fb01 2707 	mla	r7, r1, r7, r2
 801b0e2:	9903      	ldr	r1, [sp, #12]
 801b0e4:	087a      	lsrs	r2, r7, #1
 801b0e6:	5c8a      	ldrb	r2, [r1, r2]
 801b0e8:	07f9      	lsls	r1, r7, #31
 801b0ea:	bf54      	ite	pl
 801b0ec:	f002 020f 	andpl.w	r2, r2, #15
 801b0f0:	1112      	asrmi	r2, r2, #4
 801b0f2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801b0f6:	b2d2      	uxtb	r2, r2
 801b0f8:	2a00      	cmp	r2, #0
 801b0fa:	d042      	beq.n	801b182 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1de>
 801b0fc:	4957      	ldr	r1, [pc, #348]	; (801b25c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801b0fe:	680f      	ldr	r7, [r1, #0]
 801b100:	9905      	ldr	r1, [sp, #20]
 801b102:	fa5f fb87 	uxtb.w	fp, r7
 801b106:	434a      	muls	r2, r1
 801b108:	f102 0c01 	add.w	ip, r2, #1
 801b10c:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801b110:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801b114:	1212      	asrs	r2, r2, #8
 801b116:	fa1f fa82 	uxth.w	sl, r2
 801b11a:	43d2      	mvns	r2, r2
 801b11c:	fb1b fb0a 	smulbb	fp, fp, sl
 801b120:	b2d2      	uxtb	r2, r2
 801b122:	fb0c bc02 	mla	ip, ip, r2, fp
 801b126:	fa1f fc8c 	uxth.w	ip, ip
 801b12a:	f10c 0b01 	add.w	fp, ip, #1
 801b12e:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801b132:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801b136:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801b13a:	fb1b fb0a 	smulbb	fp, fp, sl
 801b13e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801b142:	fb17 fa0a 	smulbb	sl, r7, sl
 801b146:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801b14a:	f806 cc03 	strb.w	ip, [r6, #-3]
 801b14e:	f816 cc02 	ldrb.w	ip, [r6, #-2]
 801b152:	fb07 aa02 	mla	sl, r7, r2, sl
 801b156:	fb0c bc02 	mla	ip, ip, r2, fp
 801b15a:	fa1f fa8a 	uxth.w	sl, sl
 801b15e:	fa1f fc8c 	uxth.w	ip, ip
 801b162:	f10a 0701 	add.w	r7, sl, #1
 801b166:	f10c 0b01 	add.w	fp, ip, #1
 801b16a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801b16e:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801b172:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b176:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801b17a:	f806 ac01 	strb.w	sl, [r6, #-1]
 801b17e:	f806 cc02 	strb.w	ip, [r6, #-2]
 801b182:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b184:	3603      	adds	r6, #3
 801b186:	f109 39ff 	add.w	r9, r9, #4294967295
 801b18a:	4414      	add	r4, r2
 801b18c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b18e:	4410      	add	r0, r2
 801b190:	e79f      	b.n	801b0d2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12e>
 801b192:	1422      	asrs	r2, r4, #16
 801b194:	d457      	bmi.n	801b246 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801b196:	4596      	cmp	lr, r2
 801b198:	dd55      	ble.n	801b246 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801b19a:	1407      	asrs	r7, r0, #16
 801b19c:	d453      	bmi.n	801b246 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801b19e:	4547      	cmp	r7, r8
 801b1a0:	da51      	bge.n	801b246 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801b1a2:	9902      	ldr	r1, [sp, #8]
 801b1a4:	fb07 2701 	mla	r7, r7, r1, r2
 801b1a8:	9903      	ldr	r1, [sp, #12]
 801b1aa:	087a      	lsrs	r2, r7, #1
 801b1ac:	07ff      	lsls	r7, r7, #31
 801b1ae:	5c8a      	ldrb	r2, [r1, r2]
 801b1b0:	bf54      	ite	pl
 801b1b2:	f002 020f 	andpl.w	r2, r2, #15
 801b1b6:	1112      	asrmi	r2, r2, #4
 801b1b8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801b1bc:	b2d2      	uxtb	r2, r2
 801b1be:	2a00      	cmp	r2, #0
 801b1c0:	d041      	beq.n	801b246 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801b1c2:	4926      	ldr	r1, [pc, #152]	; (801b25c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801b1c4:	680f      	ldr	r7, [r1, #0]
 801b1c6:	9905      	ldr	r1, [sp, #20]
 801b1c8:	fa5f fb87 	uxtb.w	fp, r7
 801b1cc:	434a      	muls	r2, r1
 801b1ce:	f102 0c01 	add.w	ip, r2, #1
 801b1d2:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801b1d6:	f896 c000 	ldrb.w	ip, [r6]
 801b1da:	1212      	asrs	r2, r2, #8
 801b1dc:	fa1f fa82 	uxth.w	sl, r2
 801b1e0:	43d2      	mvns	r2, r2
 801b1e2:	fb1b fb0a 	smulbb	fp, fp, sl
 801b1e6:	b2d2      	uxtb	r2, r2
 801b1e8:	fb0c bc02 	mla	ip, ip, r2, fp
 801b1ec:	fa1f fc8c 	uxth.w	ip, ip
 801b1f0:	f10c 0b01 	add.w	fp, ip, #1
 801b1f4:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801b1f8:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801b1fc:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801b200:	fb1b fb0a 	smulbb	fp, fp, sl
 801b204:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801b208:	fb17 fa0a 	smulbb	sl, r7, sl
 801b20c:	78b7      	ldrb	r7, [r6, #2]
 801b20e:	f886 c000 	strb.w	ip, [r6]
 801b212:	f896 c001 	ldrb.w	ip, [r6, #1]
 801b216:	fb07 aa02 	mla	sl, r7, r2, sl
 801b21a:	fb0c bc02 	mla	ip, ip, r2, fp
 801b21e:	fa1f fa8a 	uxth.w	sl, sl
 801b222:	fa1f fc8c 	uxth.w	ip, ip
 801b226:	f10a 0701 	add.w	r7, sl, #1
 801b22a:	f10c 0b01 	add.w	fp, ip, #1
 801b22e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801b232:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801b236:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b23a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801b23e:	f886 a002 	strb.w	sl, [r6, #2]
 801b242:	f886 c001 	strb.w	ip, [r6, #1]
 801b246:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b248:	3603      	adds	r6, #3
 801b24a:	f109 39ff 	add.w	r9, r9, #4294967295
 801b24e:	4414      	add	r4, r2
 801b250:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b252:	4410      	add	r0, r2
 801b254:	e6ed      	b.n	801b032 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 801b256:	b007      	add	sp, #28
 801b258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b25c:	2000bb00 	.word	0x2000bb00

0801b260 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801b260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b264:	b087      	sub	sp, #28
 801b266:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b26a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801b26c:	9205      	str	r2, [sp, #20]
 801b26e:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 801b272:	6860      	ldr	r0, [r4, #4]
 801b274:	9202      	str	r2, [sp, #8]
 801b276:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 801b27a:	9101      	str	r1, [sp, #4]
 801b27c:	e9dd 2616 	ldrd	r2, r6, [sp, #88]	; 0x58
 801b280:	fb00 2606 	mla	r6, r0, r6, r2
 801b284:	6822      	ldr	r2, [r4, #0]
 801b286:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801b28a:	4416      	add	r6, r2
 801b28c:	f108 0201 	add.w	r2, r8, #1
 801b290:	f022 0201 	bic.w	r2, r2, #1
 801b294:	9203      	str	r2, [sp, #12]
 801b296:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801b298:	6812      	ldr	r2, [r2, #0]
 801b29a:	9204      	str	r2, [sp, #16]
 801b29c:	9a01      	ldr	r2, [sp, #4]
 801b29e:	2a00      	cmp	r2, #0
 801b2a0:	dc03      	bgt.n	801b2aa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801b2a2:	9a05      	ldr	r2, [sp, #20]
 801b2a4:	2a00      	cmp	r2, #0
 801b2a6:	f340 813a 	ble.w	801b51e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801b2aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b2ac:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 801b2b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b2b2:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801b2b6:	2b00      	cmp	r3, #0
 801b2b8:	dd0f      	ble.n	801b2da <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801b2ba:	142a      	asrs	r2, r5, #16
 801b2bc:	d406      	bmi.n	801b2cc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801b2be:	4590      	cmp	r8, r2
 801b2c0:	dd04      	ble.n	801b2cc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801b2c2:	1422      	asrs	r2, r4, #16
 801b2c4:	d402      	bmi.n	801b2cc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801b2c6:	9802      	ldr	r0, [sp, #8]
 801b2c8:	4282      	cmp	r2, r0
 801b2ca:	db07      	blt.n	801b2dc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801b2cc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b2ce:	3b01      	subs	r3, #1
 801b2d0:	3603      	adds	r6, #3
 801b2d2:	4415      	add	r5, r2
 801b2d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b2d6:	4414      	add	r4, r2
 801b2d8:	e7ed      	b.n	801b2b6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801b2da:	d073      	beq.n	801b3c4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x164>
 801b2dc:	1e5a      	subs	r2, r3, #1
 801b2de:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801b2e0:	fb00 5002 	mla	r0, r0, r2, r5
 801b2e4:	1400      	asrs	r0, r0, #16
 801b2e6:	d464      	bmi.n	801b3b2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801b2e8:	4580      	cmp	r8, r0
 801b2ea:	dd62      	ble.n	801b3b2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801b2ec:	9814      	ldr	r0, [sp, #80]	; 0x50
 801b2ee:	fb00 4202 	mla	r2, r0, r2, r4
 801b2f2:	1412      	asrs	r2, r2, #16
 801b2f4:	d45d      	bmi.n	801b3b2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801b2f6:	9802      	ldr	r0, [sp, #8]
 801b2f8:	4282      	cmp	r2, r0
 801b2fa:	da5a      	bge.n	801b3b2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801b2fc:	1cf0      	adds	r0, r6, #3
 801b2fe:	469a      	mov	sl, r3
 801b300:	f1ba 0f00 	cmp.w	sl, #0
 801b304:	dd59      	ble.n	801b3ba <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 801b306:	142a      	asrs	r2, r5, #16
 801b308:	9903      	ldr	r1, [sp, #12]
 801b30a:	1427      	asrs	r7, r4, #16
 801b30c:	fb01 2707 	mla	r7, r1, r7, r2
 801b310:	9904      	ldr	r1, [sp, #16]
 801b312:	087a      	lsrs	r2, r7, #1
 801b314:	5c8a      	ldrb	r2, [r1, r2]
 801b316:	07f9      	lsls	r1, r7, #31
 801b318:	bf54      	ite	pl
 801b31a:	f002 020f 	andpl.w	r2, r2, #15
 801b31e:	1112      	asrmi	r2, r2, #4
 801b320:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801b324:	b2d2      	uxtb	r2, r2
 801b326:	2a00      	cmp	r2, #0
 801b328:	d03b      	beq.n	801b3a2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801b32a:	497e      	ldr	r1, [pc, #504]	; (801b524 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 801b32c:	2aff      	cmp	r2, #255	; 0xff
 801b32e:	680f      	ldr	r7, [r1, #0]
 801b330:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801b334:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801b338:	b2ff      	uxtb	r7, r7
 801b33a:	f000 80e9 	beq.w	801b510 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801b33e:	fa1f fe82 	uxth.w	lr, r2
 801b342:	43d2      	mvns	r2, r2
 801b344:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 801b348:	fb17 f70e 	smulbb	r7, r7, lr
 801b34c:	b2d2      	uxtb	r2, r2
 801b34e:	fb19 f90e 	smulbb	r9, r9, lr
 801b352:	fb0c 7702 	mla	r7, ip, r2, r7
 801b356:	fb1b fe0e 	smulbb	lr, fp, lr
 801b35a:	b2bf      	uxth	r7, r7
 801b35c:	f107 0c01 	add.w	ip, r7, #1
 801b360:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801b364:	123f      	asrs	r7, r7, #8
 801b366:	f800 7c03 	strb.w	r7, [r0, #-3]
 801b36a:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801b36e:	fb07 9902 	mla	r9, r7, r2, r9
 801b372:	fa1f f989 	uxth.w	r9, r9
 801b376:	f109 0701 	add.w	r7, r9, #1
 801b37a:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801b37e:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801b382:	fb07 ee02 	mla	lr, r7, r2, lr
 801b386:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b38a:	fa1f fe8e 	uxth.w	lr, lr
 801b38e:	f800 9c02 	strb.w	r9, [r0, #-2]
 801b392:	f10e 0201 	add.w	r2, lr, #1
 801b396:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801b39a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b39e:	f800 ec01 	strb.w	lr, [r0, #-1]
 801b3a2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b3a4:	3003      	adds	r0, #3
 801b3a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b3aa:	4415      	add	r5, r2
 801b3ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b3ae:	4414      	add	r4, r2
 801b3b0:	e7a6      	b.n	801b300 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801b3b2:	2700      	movs	r7, #0
 801b3b4:	1bda      	subs	r2, r3, r7
 801b3b6:	2a00      	cmp	r2, #0
 801b3b8:	dc40      	bgt.n	801b43c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801b3ba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b3be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b3c2:	441e      	add	r6, r3
 801b3c4:	9b01      	ldr	r3, [sp, #4]
 801b3c6:	2b00      	cmp	r3, #0
 801b3c8:	f340 80a9 	ble.w	801b51e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801b3cc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b3d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b3d2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b3d6:	eeb0 6a62 	vmov.f32	s12, s5
 801b3da:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b3de:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b3e2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b3e6:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801b3ea:	eeb0 6a43 	vmov.f32	s12, s6
 801b3ee:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b3f2:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801b3f6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b3fa:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b3fe:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b402:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b406:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b40a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b40e:	ee12 2a90 	vmov	r2, s5
 801b412:	eef0 2a47 	vmov.f32	s5, s14
 801b416:	fb92 f3f3 	sdiv	r3, r2, r3
 801b41a:	ee13 2a10 	vmov	r2, s6
 801b41e:	9313      	str	r3, [sp, #76]	; 0x4c
 801b420:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b422:	eeb0 3a67 	vmov.f32	s6, s15
 801b426:	fb92 f3f3 	sdiv	r3, r2, r3
 801b42a:	9314      	str	r3, [sp, #80]	; 0x50
 801b42c:	9b01      	ldr	r3, [sp, #4]
 801b42e:	9a05      	ldr	r2, [sp, #20]
 801b430:	3b01      	subs	r3, #1
 801b432:	9301      	str	r3, [sp, #4]
 801b434:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b436:	bf08      	it	eq
 801b438:	4613      	moveq	r3, r2
 801b43a:	e72f      	b.n	801b29c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801b43c:	142a      	asrs	r2, r5, #16
 801b43e:	d458      	bmi.n	801b4f2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801b440:	4590      	cmp	r8, r2
 801b442:	dd56      	ble.n	801b4f2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801b444:	1420      	asrs	r0, r4, #16
 801b446:	d454      	bmi.n	801b4f2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801b448:	9902      	ldr	r1, [sp, #8]
 801b44a:	4288      	cmp	r0, r1
 801b44c:	da51      	bge.n	801b4f2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801b44e:	9903      	ldr	r1, [sp, #12]
 801b450:	fb00 2001 	mla	r0, r0, r1, r2
 801b454:	9904      	ldr	r1, [sp, #16]
 801b456:	0842      	lsrs	r2, r0, #1
 801b458:	07c0      	lsls	r0, r0, #31
 801b45a:	5c8a      	ldrb	r2, [r1, r2]
 801b45c:	bf54      	ite	pl
 801b45e:	f002 020f 	andpl.w	r2, r2, #15
 801b462:	1112      	asrmi	r2, r2, #4
 801b464:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801b468:	b2d2      	uxtb	r2, r2
 801b46a:	2a00      	cmp	r2, #0
 801b46c:	d041      	beq.n	801b4f2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801b46e:	492d      	ldr	r1, [pc, #180]	; (801b524 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 801b470:	2aff      	cmp	r2, #255	; 0xff
 801b472:	6808      	ldr	r0, [r1, #0]
 801b474:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801b478:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801b47c:	fa5f fc80 	uxtb.w	ip, r0
 801b480:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801b484:	d03b      	beq.n	801b4fe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29e>
 801b486:	fa1f f982 	uxth.w	r9, r2
 801b48a:	4438      	add	r0, r7
 801b48c:	43d2      	mvns	r2, r2
 801b48e:	f816 e000 	ldrb.w	lr, [r6, r0]
 801b492:	fb1c fc09 	smulbb	ip, ip, r9
 801b496:	fb1a fa09 	smulbb	sl, sl, r9
 801b49a:	b2d2      	uxtb	r2, r2
 801b49c:	fb1b f909 	smulbb	r9, fp, r9
 801b4a0:	fb0e cc02 	mla	ip, lr, r2, ip
 801b4a4:	fa1f fc8c 	uxth.w	ip, ip
 801b4a8:	f10c 0e01 	add.w	lr, ip, #1
 801b4ac:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801b4b0:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801b4b4:	f806 c000 	strb.w	ip, [r6, r0]
 801b4b8:	4430      	add	r0, r6
 801b4ba:	f890 c001 	ldrb.w	ip, [r0, #1]
 801b4be:	fb0c aa02 	mla	sl, ip, r2, sl
 801b4c2:	fa1f fa8a 	uxth.w	sl, sl
 801b4c6:	f10a 0c01 	add.w	ip, sl, #1
 801b4ca:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801b4ce:	f890 c002 	ldrb.w	ip, [r0, #2]
 801b4d2:	fb0c 9902 	mla	r9, ip, r2, r9
 801b4d6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b4da:	fa1f f989 	uxth.w	r9, r9
 801b4de:	f880 a001 	strb.w	sl, [r0, #1]
 801b4e2:	f109 0201 	add.w	r2, r9, #1
 801b4e6:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801b4ea:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b4ee:	f880 9002 	strb.w	r9, [r0, #2]
 801b4f2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b4f4:	3701      	adds	r7, #1
 801b4f6:	4415      	add	r5, r2
 801b4f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b4fa:	4414      	add	r4, r2
 801b4fc:	e75a      	b.n	801b3b4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801b4fe:	4438      	add	r0, r7
 801b500:	f806 c000 	strb.w	ip, [r6, r0]
 801b504:	4430      	add	r0, r6
 801b506:	f880 a001 	strb.w	sl, [r0, #1]
 801b50a:	f880 b002 	strb.w	fp, [r0, #2]
 801b50e:	e7f0      	b.n	801b4f2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801b510:	f800 7c03 	strb.w	r7, [r0, #-3]
 801b514:	f800 9c02 	strb.w	r9, [r0, #-2]
 801b518:	f800 bc01 	strb.w	fp, [r0, #-1]
 801b51c:	e741      	b.n	801b3a2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801b51e:	b007      	add	sp, #28
 801b520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b524:	2000bb00 	.word	0x2000bb00

0801b528 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801b528:	4770      	bx	lr

0801b52a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801b52a:	4770      	bx	lr

0801b52c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801b52c:	4770      	bx	lr

0801b52e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801b52e:	4770      	bx	lr

0801b530 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801b530:	4770      	bx	lr

0801b532 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801b532:	4770      	bx	lr

0801b534 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801b534:	4770      	bx	lr

0801b536 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801b536:	4770      	bx	lr

0801b538 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801b538:	4770      	bx	lr

0801b53a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801b53a:	4770      	bx	lr

0801b53c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801b53c:	4770      	bx	lr

0801b53e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801b53e:	4770      	bx	lr

0801b540 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801b540:	4770      	bx	lr

0801b542 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801b542:	4770      	bx	lr

0801b544 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801b544:	4770      	bx	lr

0801b546 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801b546:	4770      	bx	lr

0801b548 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801b548:	4770      	bx	lr

0801b54a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801b54a:	4770      	bx	lr

0801b54c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801b54c:	4770      	bx	lr

0801b54e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801b54e:	4770      	bx	lr

0801b550 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801b550:	2bff      	cmp	r3, #255	; 0xff
 801b552:	b508      	push	{r3, lr}
 801b554:	d04f      	beq.n	801b5f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801b556:	2a2c      	cmp	r2, #44	; 0x2c
 801b558:	d032      	beq.n	801b5c0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 801b55a:	d80f      	bhi.n	801b57c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 801b55c:	2a08      	cmp	r2, #8
 801b55e:	d046      	beq.n	801b5ee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801b560:	d805      	bhi.n	801b56e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 801b562:	2a04      	cmp	r2, #4
 801b564:	d041      	beq.n	801b5ea <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801b566:	2a05      	cmp	r2, #5
 801b568:	d03d      	beq.n	801b5e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801b56a:	2000      	movs	r0, #0
 801b56c:	e027      	b.n	801b5be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801b56e:	2a0a      	cmp	r2, #10
 801b570:	d03d      	beq.n	801b5ee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801b572:	d301      	bcc.n	801b578 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801b574:	2a0b      	cmp	r2, #11
 801b576:	d1f8      	bne.n	801b56a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801b578:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801b57a:	e020      	b.n	801b5be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801b57c:	2a30      	cmp	r2, #48	; 0x30
 801b57e:	d038      	beq.n	801b5f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801b580:	d808      	bhi.n	801b594 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 801b582:	2a2e      	cmp	r2, #46	; 0x2e
 801b584:	684b      	ldr	r3, [r1, #4]
 801b586:	d029      	beq.n	801b5dc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 801b588:	d90b      	bls.n	801b5a2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 801b58a:	781b      	ldrb	r3, [r3, #0]
 801b58c:	2b00      	cmp	r3, #0
 801b58e:	d1ec      	bne.n	801b56a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801b590:	6a00      	ldr	r0, [r0, #32]
 801b592:	e014      	b.n	801b5be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801b594:	2a32      	cmp	r2, #50	; 0x32
 801b596:	d02c      	beq.n	801b5f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801b598:	d301      	bcc.n	801b59e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 801b59a:	2a33      	cmp	r2, #51	; 0x33
 801b59c:	d1e5      	bne.n	801b56a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801b59e:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801b5a0:	e00d      	b.n	801b5be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801b5a2:	781b      	ldrb	r3, [r3, #0]
 801b5a4:	2b01      	cmp	r3, #1
 801b5a6:	d009      	beq.n	801b5bc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801b5a8:	d3f2      	bcc.n	801b590 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 801b5aa:	2b02      	cmp	r3, #2
 801b5ac:	d1dd      	bne.n	801b56a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801b5ae:	4b39      	ldr	r3, [pc, #228]	; (801b694 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801b5b0:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 801b5b4:	4a38      	ldr	r2, [pc, #224]	; (801b698 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801b5b6:	4839      	ldr	r0, [pc, #228]	; (801b69c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 801b5b8:	f007 ff3e 	bl	8023438 <__assert_func>
 801b5bc:	6900      	ldr	r0, [r0, #16]
 801b5be:	bd08      	pop	{r3, pc}
 801b5c0:	684b      	ldr	r3, [r1, #4]
 801b5c2:	781b      	ldrb	r3, [r3, #0]
 801b5c4:	2b01      	cmp	r3, #1
 801b5c6:	d007      	beq.n	801b5d8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 801b5c8:	d30b      	bcc.n	801b5e2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801b5ca:	2b02      	cmp	r3, #2
 801b5cc:	d1cd      	bne.n	801b56a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801b5ce:	4b31      	ldr	r3, [pc, #196]	; (801b694 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801b5d0:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 801b5d4:	4a30      	ldr	r2, [pc, #192]	; (801b698 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801b5d6:	e7ee      	b.n	801b5b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801b5d8:	6880      	ldr	r0, [r0, #8]
 801b5da:	e7f0      	b.n	801b5be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801b5dc:	781b      	ldrb	r3, [r3, #0]
 801b5de:	2b00      	cmp	r3, #0
 801b5e0:	d1c3      	bne.n	801b56a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801b5e2:	6980      	ldr	r0, [r0, #24]
 801b5e4:	e7eb      	b.n	801b5be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801b5e6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801b5e8:	e7e9      	b.n	801b5be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801b5ea:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801b5ec:	e7e7      	b.n	801b5be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801b5ee:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801b5f0:	e7e5      	b.n	801b5be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801b5f2:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801b5f4:	e7e3      	b.n	801b5be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801b5f6:	2a2c      	cmp	r2, #44	; 0x2c
 801b5f8:	d030      	beq.n	801b65c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 801b5fa:	d80f      	bhi.n	801b61c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 801b5fc:	2a08      	cmp	r2, #8
 801b5fe:	d044      	beq.n	801b68a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801b600:	d805      	bhi.n	801b60e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801b602:	2a04      	cmp	r2, #4
 801b604:	d03f      	beq.n	801b686 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801b606:	2a05      	cmp	r2, #5
 801b608:	d1af      	bne.n	801b56a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801b60a:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801b60c:	e7d7      	b.n	801b5be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801b60e:	2a0a      	cmp	r2, #10
 801b610:	d03b      	beq.n	801b68a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801b612:	d301      	bcc.n	801b618 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 801b614:	2a0b      	cmp	r2, #11
 801b616:	d1a8      	bne.n	801b56a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801b618:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801b61a:	e7d0      	b.n	801b5be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801b61c:	2a30      	cmp	r2, #48	; 0x30
 801b61e:	d036      	beq.n	801b68e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801b620:	d808      	bhi.n	801b634 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 801b622:	2a2e      	cmp	r2, #46	; 0x2e
 801b624:	684b      	ldr	r3, [r1, #4]
 801b626:	d028      	beq.n	801b67a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 801b628:	d90b      	bls.n	801b642 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 801b62a:	781b      	ldrb	r3, [r3, #0]
 801b62c:	2b00      	cmp	r3, #0
 801b62e:	d19c      	bne.n	801b56a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801b630:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801b632:	e7c4      	b.n	801b5be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801b634:	2a32      	cmp	r2, #50	; 0x32
 801b636:	d02a      	beq.n	801b68e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801b638:	d301      	bcc.n	801b63e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 801b63a:	2a33      	cmp	r2, #51	; 0x33
 801b63c:	d195      	bne.n	801b56a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801b63e:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801b640:	e7bd      	b.n	801b5be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801b642:	781b      	ldrb	r3, [r3, #0]
 801b644:	2b01      	cmp	r3, #1
 801b646:	d007      	beq.n	801b658 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 801b648:	d3f2      	bcc.n	801b630 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801b64a:	2b02      	cmp	r3, #2
 801b64c:	d18d      	bne.n	801b56a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801b64e:	4b11      	ldr	r3, [pc, #68]	; (801b694 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801b650:	f240 31e1 	movw	r1, #993	; 0x3e1
 801b654:	4a10      	ldr	r2, [pc, #64]	; (801b698 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801b656:	e7ae      	b.n	801b5b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801b658:	6940      	ldr	r0, [r0, #20]
 801b65a:	e7b0      	b.n	801b5be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801b65c:	684b      	ldr	r3, [r1, #4]
 801b65e:	781b      	ldrb	r3, [r3, #0]
 801b660:	2b01      	cmp	r3, #1
 801b662:	d008      	beq.n	801b676 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 801b664:	d30d      	bcc.n	801b682 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801b666:	2b02      	cmp	r3, #2
 801b668:	f47f af7f 	bne.w	801b56a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801b66c:	4b09      	ldr	r3, [pc, #36]	; (801b694 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801b66e:	f240 31ed 	movw	r1, #1005	; 0x3ed
 801b672:	4a09      	ldr	r2, [pc, #36]	; (801b698 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801b674:	e79f      	b.n	801b5b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801b676:	68c0      	ldr	r0, [r0, #12]
 801b678:	e7a1      	b.n	801b5be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801b67a:	781b      	ldrb	r3, [r3, #0]
 801b67c:	2b00      	cmp	r3, #0
 801b67e:	f47f af74 	bne.w	801b56a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801b682:	69c0      	ldr	r0, [r0, #28]
 801b684:	e79b      	b.n	801b5be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801b686:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801b688:	e799      	b.n	801b5be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801b68a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801b68c:	e797      	b.n	801b5be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801b68e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801b690:	e795      	b.n	801b5be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801b692:	bf00      	nop
 801b694:	080279c7 	.word	0x080279c7
 801b698:	0802817b 	.word	0x0802817b
 801b69c:	08027a13 	.word	0x08027a13

0801b6a0 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801b6a0:	b508      	push	{r3, lr}
 801b6a2:	4b06      	ldr	r3, [pc, #24]	; (801b6bc <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 801b6a4:	8818      	ldrh	r0, [r3, #0]
 801b6a6:	b928      	cbnz	r0, 801b6b4 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 801b6a8:	4b05      	ldr	r3, [pc, #20]	; (801b6c0 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 801b6aa:	21d7      	movs	r1, #215	; 0xd7
 801b6ac:	4a05      	ldr	r2, [pc, #20]	; (801b6c4 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 801b6ae:	4806      	ldr	r0, [pc, #24]	; (801b6c8 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 801b6b0:	f007 fec2 	bl	8023438 <__assert_func>
 801b6b4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b6b8:	b280      	uxth	r0, r0
 801b6ba:	bd08      	pop	{r3, pc}
 801b6bc:	2000bad2 	.word	0x2000bad2
 801b6c0:	08027c62 	.word	0x08027c62
 801b6c4:	08028140 	.word	0x08028140
 801b6c8:	08027ca4 	.word	0x08027ca4

0801b6cc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801b6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6d0:	4616      	mov	r6, r2
 801b6d2:	b087      	sub	sp, #28
 801b6d4:	461f      	mov	r7, r3
 801b6d6:	b33b      	cbz	r3, 801b728 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801b6d8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801b6dc:	b323      	cbz	r3, 801b728 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801b6de:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801b6e2:	b30b      	cbz	r3, 801b728 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801b6e4:	6808      	ldr	r0, [r1, #0]
 801b6e6:	ab04      	add	r3, sp, #16
 801b6e8:	6849      	ldr	r1, [r1, #4]
 801b6ea:	4c5a      	ldr	r4, [pc, #360]	; (801b854 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 801b6ec:	c303      	stmia	r3!, {r0, r1}
 801b6ee:	a804      	add	r0, sp, #16
 801b6f0:	f7fb fd6e 	bl	80171d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b6f4:	6820      	ldr	r0, [r4, #0]
 801b6f6:	6803      	ldr	r3, [r0, #0]
 801b6f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b6fa:	4798      	blx	r3
 801b6fc:	2fff      	cmp	r7, #255	; 0xff
 801b6fe:	4623      	mov	r3, r4
 801b700:	d015      	beq.n	801b72e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801b702:	f010 0f08 	tst.w	r0, #8
 801b706:	d015      	beq.n	801b734 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x68>
 801b708:	6818      	ldr	r0, [r3, #0]
 801b70a:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801b70e:	6801      	ldr	r1, [r0, #0]
 801b710:	9401      	str	r4, [sp, #4]
 801b712:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801b716:	9702      	str	r7, [sp, #8]
 801b718:	9400      	str	r4, [sp, #0]
 801b71a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801b71e:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 801b720:	4631      	mov	r1, r6
 801b722:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801b726:	47a0      	blx	r4
 801b728:	b007      	add	sp, #28
 801b72a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b72e:	f010 0f02 	tst.w	r0, #2
 801b732:	e7e8      	b.n	801b706 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3a>
 801b734:	6818      	ldr	r0, [r3, #0]
 801b736:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 801b73a:	6803      	ldr	r3, [r0, #0]
 801b73c:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801b740:	6a1b      	ldr	r3, [r3, #32]
 801b742:	4798      	blx	r3
 801b744:	4944      	ldr	r1, [pc, #272]	; (801b858 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x18c>)
 801b746:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801b74a:	2fff      	cmp	r7, #255	; 0xff
 801b74c:	f8b1 c000 	ldrh.w	ip, [r1]
 801b750:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 801b754:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801b758:	4688      	mov	r8, r1
 801b75a:	fb0c 2303 	mla	r3, ip, r3, r2
 801b75e:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 801b762:	b2f2      	uxtb	r2, r6
 801b764:	ea24 76e4 	bic.w	r6, r4, r4, asr #31
 801b768:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b76c:	4418      	add	r0, r3
 801b76e:	d112      	bne.n	801b796 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xca>
 801b770:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801b774:	2100      	movs	r1, #0
 801b776:	42a9      	cmp	r1, r5
 801b778:	da66      	bge.n	801b848 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 801b77a:	4603      	mov	r3, r0
 801b77c:	2700      	movs	r7, #0
 801b77e:	42a7      	cmp	r7, r4
 801b780:	f103 0303 	add.w	r3, r3, #3
 801b784:	da57      	bge.n	801b836 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16a>
 801b786:	f803 2c03 	strb.w	r2, [r3, #-3]
 801b78a:	3701      	adds	r7, #1
 801b78c:	f803 ec02 	strb.w	lr, [r3, #-2]
 801b790:	f803 cc01 	strb.w	ip, [r3, #-1]
 801b794:	e7f3      	b.n	801b77e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xb2>
 801b796:	b2bb      	uxth	r3, r7
 801b798:	f04f 0800 	mov.w	r8, #0
 801b79c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801b7a0:	fb0c fc03 	mul.w	ip, ip, r3
 801b7a4:	fb0e fe03 	mul.w	lr, lr, r3
 801b7a8:	435a      	muls	r2, r3
 801b7aa:	f1c7 03ff 	rsb	r3, r7, #255	; 0xff
 801b7ae:	460f      	mov	r7, r1
 801b7b0:	b29b      	uxth	r3, r3
 801b7b2:	45a8      	cmp	r8, r5
 801b7b4:	da48      	bge.n	801b848 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 801b7b6:	4601      	mov	r1, r0
 801b7b8:	f04f 0a00 	mov.w	sl, #0
 801b7bc:	45a2      	cmp	sl, r4
 801b7be:	f101 0103 	add.w	r1, r1, #3
 801b7c2:	da2f      	bge.n	801b824 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x158>
 801b7c4:	f811 9c03 	ldrb.w	r9, [r1, #-3]
 801b7c8:	f10a 0a01 	add.w	sl, sl, #1
 801b7cc:	fb19 f903 	smulbb	r9, r9, r3
 801b7d0:	4491      	add	r9, r2
 801b7d2:	fa1f f989 	uxth.w	r9, r9
 801b7d6:	f109 0b01 	add.w	fp, r9, #1
 801b7da:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b7de:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b7e2:	f801 9c03 	strb.w	r9, [r1, #-3]
 801b7e6:	f811 9c02 	ldrb.w	r9, [r1, #-2]
 801b7ea:	fb19 f903 	smulbb	r9, r9, r3
 801b7ee:	44f1      	add	r9, lr
 801b7f0:	fa1f f989 	uxth.w	r9, r9
 801b7f4:	f109 0b01 	add.w	fp, r9, #1
 801b7f8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b7fc:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b800:	f801 9c02 	strb.w	r9, [r1, #-2]
 801b804:	f811 9c01 	ldrb.w	r9, [r1, #-1]
 801b808:	fb19 f903 	smulbb	r9, r9, r3
 801b80c:	44e1      	add	r9, ip
 801b80e:	fa1f f989 	uxth.w	r9, r9
 801b812:	f109 0b01 	add.w	fp, r9, #1
 801b816:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b81a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b81e:	f801 9c01 	strb.w	r9, [r1, #-1]
 801b822:	e7cb      	b.n	801b7bc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xf0>
 801b824:	8839      	ldrh	r1, [r7, #0]
 801b826:	f108 0801 	add.w	r8, r8, #1
 801b82a:	1b09      	subs	r1, r1, r4
 801b82c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801b830:	4431      	add	r1, r6
 801b832:	4408      	add	r0, r1
 801b834:	e7bd      	b.n	801b7b2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xe6>
 801b836:	f8b8 3000 	ldrh.w	r3, [r8]
 801b83a:	3101      	adds	r1, #1
 801b83c:	1b1b      	subs	r3, r3, r4
 801b83e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b842:	4433      	add	r3, r6
 801b844:	4418      	add	r0, r3
 801b846:	e796      	b.n	801b776 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xaa>
 801b848:	4b02      	ldr	r3, [pc, #8]	; (801b854 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 801b84a:	6818      	ldr	r0, [r3, #0]
 801b84c:	6803      	ldr	r3, [r0, #0]
 801b84e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b850:	4798      	blx	r3
 801b852:	e769      	b.n	801b728 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801b854:	2000bad8 	.word	0x2000bad8
 801b858:	2000bad2 	.word	0x2000bad2

0801b85c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801b85c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b860:	b08d      	sub	sp, #52	; 0x34
 801b862:	460c      	mov	r4, r1
 801b864:	4617      	mov	r7, r2
 801b866:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
 801b86a:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
 801b86e:	2e00      	cmp	r6, #0
 801b870:	d04a      	beq.n	801b908 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801b872:	6810      	ldr	r0, [r2, #0]
 801b874:	ad08      	add	r5, sp, #32
 801b876:	6851      	ldr	r1, [r2, #4]
 801b878:	c503      	stmia	r5!, {r0, r1}
 801b87a:	6818      	ldr	r0, [r3, #0]
 801b87c:	ad0a      	add	r5, sp, #40	; 0x28
 801b87e:	6859      	ldr	r1, [r3, #4]
 801b880:	c503      	stmia	r5!, {r0, r1}
 801b882:	a808      	add	r0, sp, #32
 801b884:	f7fb fca4 	bl	80171d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b888:	4639      	mov	r1, r7
 801b88a:	a80a      	add	r0, sp, #40	; 0x28
 801b88c:	4f59      	ldr	r7, [pc, #356]	; (801b9f4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>)
 801b88e:	f7fb fc87 	bl	80171a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b892:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801b896:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801b89a:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801b89e:	6838      	ldr	r0, [r7, #0]
 801b8a0:	fb11 2103 	smlabb	r1, r1, r3, r2
 801b8a4:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 801b8a8:	f9bd 802e 	ldrsh.w	r8, [sp, #46]	; 0x2e
 801b8ac:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801b8b0:	440c      	add	r4, r1
 801b8b2:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801b8b6:	440a      	add	r2, r1
 801b8b8:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801b8bc:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801b8c0:	4413      	add	r3, r2
 801b8c2:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801b8c6:	6803      	ldr	r3, [r0, #0]
 801b8c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b8ca:	4798      	blx	r3
 801b8cc:	2eff      	cmp	r6, #255	; 0xff
 801b8ce:	f000 8089 	beq.w	801b9e4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x188>
 801b8d2:	0743      	lsls	r3, r0, #29
 801b8d4:	d405      	bmi.n	801b8e2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x86>
 801b8d6:	f1b9 0f00 	cmp.w	r9, #0
 801b8da:	d018      	beq.n	801b90e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801b8dc:	f010 0f10 	tst.w	r0, #16
 801b8e0:	d015      	beq.n	801b90e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801b8e2:	6838      	ldr	r0, [r7, #0]
 801b8e4:	b2ad      	uxth	r5, r5
 801b8e6:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801b8ea:	6801      	ldr	r1, [r0, #0]
 801b8ec:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801b8f0:	9500      	str	r5, [sp, #0]
 801b8f2:	e9cd 6903 	strd	r6, r9, [sp, #12]
 801b8f6:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 801b8fa:	9602      	str	r6, [sp, #8]
 801b8fc:	fa1f f688 	uxth.w	r6, r8
 801b900:	9601      	str	r6, [sp, #4]
 801b902:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 801b904:	4621      	mov	r1, r4
 801b906:	47a8      	blx	r5
 801b908:	b00d      	add	sp, #52	; 0x34
 801b90a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b90e:	6838      	ldr	r0, [r7, #0]
 801b910:	6803      	ldr	r3, [r0, #0]
 801b912:	6a1b      	ldr	r3, [r3, #32]
 801b914:	4798      	blx	r3
 801b916:	4a38      	ldr	r2, [pc, #224]	; (801b9f8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>)
 801b918:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801b91c:	2eff      	cmp	r6, #255	; 0xff
 801b91e:	8813      	ldrh	r3, [r2, #0]
 801b920:	f9bd c02a 	ldrsh.w	ip, [sp, #42]	; 0x2a
 801b924:	fb0c 1303 	mla	r3, ip, r3, r1
 801b928:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 801b92c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b930:	4418      	add	r0, r3
 801b932:	d032      	beq.n	801b99a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801b934:	f1c6 03ff 	rsb	r3, r6, #255	; 0xff
 801b938:	f04f 0c00 	mov.w	ip, #0
 801b93c:	ea21 7ae1 	bic.w	sl, r1, r1, asr #31
 801b940:	9306      	str	r3, [sp, #24]
 801b942:	45c4      	cmp	ip, r8
 801b944:	da49      	bge.n	801b9da <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801b946:	4686      	mov	lr, r0
 801b948:	46a1      	mov	r9, r4
 801b94a:	eba9 0304 	sub.w	r3, r9, r4
 801b94e:	428b      	cmp	r3, r1
 801b950:	da13      	bge.n	801b97a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11e>
 801b952:	f819 3b01 	ldrb.w	r3, [r9], #1
 801b956:	f89e b000 	ldrb.w	fp, [lr]
 801b95a:	9307      	str	r3, [sp, #28]
 801b95c:	9b06      	ldr	r3, [sp, #24]
 801b95e:	fb1b fb03 	smulbb	fp, fp, r3
 801b962:	9b07      	ldr	r3, [sp, #28]
 801b964:	fb03 b306 	mla	r3, r3, r6, fp
 801b968:	b29b      	uxth	r3, r3
 801b96a:	f103 0b01 	add.w	fp, r3, #1
 801b96e:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 801b972:	121b      	asrs	r3, r3, #8
 801b974:	f80e 3b01 	strb.w	r3, [lr], #1
 801b978:	e7e7      	b.n	801b94a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xee>
 801b97a:	8813      	ldrh	r3, [r2, #0]
 801b97c:	f10c 0c01 	add.w	ip, ip, #1
 801b980:	1b5b      	subs	r3, r3, r5
 801b982:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b986:	4453      	add	r3, sl
 801b988:	4418      	add	r0, r3
 801b98a:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801b98e:	1b5b      	subs	r3, r3, r5
 801b990:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b994:	4453      	add	r3, sl
 801b996:	441c      	add	r4, r3
 801b998:	e7d3      	b.n	801b942 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xe6>
 801b99a:	2600      	movs	r6, #0
 801b99c:	ea21 7ce1 	bic.w	ip, r1, r1, asr #31
 801b9a0:	4546      	cmp	r6, r8
 801b9a2:	da1a      	bge.n	801b9da <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801b9a4:	f100 3eff 	add.w	lr, r0, #4294967295
 801b9a8:	4623      	mov	r3, r4
 801b9aa:	eba3 0904 	sub.w	r9, r3, r4
 801b9ae:	4589      	cmp	r9, r1
 801b9b0:	da04      	bge.n	801b9bc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>
 801b9b2:	f813 9b01 	ldrb.w	r9, [r3], #1
 801b9b6:	f80e 9f01 	strb.w	r9, [lr, #1]!
 801b9ba:	e7f6      	b.n	801b9aa <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x14e>
 801b9bc:	8813      	ldrh	r3, [r2, #0]
 801b9be:	3601      	adds	r6, #1
 801b9c0:	1b5b      	subs	r3, r3, r5
 801b9c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b9c6:	4463      	add	r3, ip
 801b9c8:	4418      	add	r0, r3
 801b9ca:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801b9ce:	1b5b      	subs	r3, r3, r5
 801b9d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b9d4:	4463      	add	r3, ip
 801b9d6:	441c      	add	r4, r3
 801b9d8:	e7e2      	b.n	801b9a0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x144>
 801b9da:	6838      	ldr	r0, [r7, #0]
 801b9dc:	6803      	ldr	r3, [r0, #0]
 801b9de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b9e0:	4798      	blx	r3
 801b9e2:	e791      	b.n	801b908 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801b9e4:	f1b9 0f00 	cmp.w	r9, #0
 801b9e8:	f47f af78 	bne.w	801b8dc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x80>
 801b9ec:	f010 0f01 	tst.w	r0, #1
 801b9f0:	e776      	b.n	801b8e0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x84>
 801b9f2:	bf00      	nop
 801b9f4:	2000bad8 	.word	0x2000bad8
 801b9f8:	2000bad2 	.word	0x2000bad2

0801b9fc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801b9fc:	b510      	push	{r4, lr}
 801b9fe:	4604      	mov	r4, r0
 801ba00:	2104      	movs	r1, #4
 801ba02:	f007 fcee 	bl	80233e2 <_ZdlPvj>
 801ba06:	4620      	mov	r0, r4
 801ba08:	bd10      	pop	{r4, pc}

0801ba0a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801ba0a:	b510      	push	{r4, lr}
 801ba0c:	4604      	mov	r4, r0
 801ba0e:	2104      	movs	r1, #4
 801ba10:	f007 fce7 	bl	80233e2 <_ZdlPvj>
 801ba14:	4620      	mov	r0, r4
 801ba16:	bd10      	pop	{r4, pc}

0801ba18 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801ba18:	b510      	push	{r4, lr}
 801ba1a:	4604      	mov	r4, r0
 801ba1c:	2104      	movs	r1, #4
 801ba1e:	f007 fce0 	bl	80233e2 <_ZdlPvj>
 801ba22:	4620      	mov	r0, r4
 801ba24:	bd10      	pop	{r4, pc}

0801ba26 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801ba26:	b510      	push	{r4, lr}
 801ba28:	4604      	mov	r4, r0
 801ba2a:	2104      	movs	r1, #4
 801ba2c:	f007 fcd9 	bl	80233e2 <_ZdlPvj>
 801ba30:	4620      	mov	r0, r4
 801ba32:	bd10      	pop	{r4, pc}

0801ba34 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801ba34:	b510      	push	{r4, lr}
 801ba36:	4604      	mov	r4, r0
 801ba38:	2104      	movs	r1, #4
 801ba3a:	f007 fcd2 	bl	80233e2 <_ZdlPvj>
 801ba3e:	4620      	mov	r0, r4
 801ba40:	bd10      	pop	{r4, pc}

0801ba42 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801ba42:	b510      	push	{r4, lr}
 801ba44:	4604      	mov	r4, r0
 801ba46:	2104      	movs	r1, #4
 801ba48:	f007 fccb 	bl	80233e2 <_ZdlPvj>
 801ba4c:	4620      	mov	r0, r4
 801ba4e:	bd10      	pop	{r4, pc}

0801ba50 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801ba50:	b510      	push	{r4, lr}
 801ba52:	4604      	mov	r4, r0
 801ba54:	2104      	movs	r1, #4
 801ba56:	f007 fcc4 	bl	80233e2 <_ZdlPvj>
 801ba5a:	4620      	mov	r0, r4
 801ba5c:	bd10      	pop	{r4, pc}

0801ba5e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801ba5e:	b510      	push	{r4, lr}
 801ba60:	4604      	mov	r4, r0
 801ba62:	2104      	movs	r1, #4
 801ba64:	f007 fcbd 	bl	80233e2 <_ZdlPvj>
 801ba68:	4620      	mov	r0, r4
 801ba6a:	bd10      	pop	{r4, pc}

0801ba6c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801ba6c:	b510      	push	{r4, lr}
 801ba6e:	4604      	mov	r4, r0
 801ba70:	2104      	movs	r1, #4
 801ba72:	f007 fcb6 	bl	80233e2 <_ZdlPvj>
 801ba76:	4620      	mov	r0, r4
 801ba78:	bd10      	pop	{r4, pc}

0801ba7a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801ba7a:	b510      	push	{r4, lr}
 801ba7c:	4604      	mov	r4, r0
 801ba7e:	2104      	movs	r1, #4
 801ba80:	f007 fcaf 	bl	80233e2 <_ZdlPvj>
 801ba84:	4620      	mov	r0, r4
 801ba86:	bd10      	pop	{r4, pc}

0801ba88 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801ba88:	b510      	push	{r4, lr}
 801ba8a:	4604      	mov	r4, r0
 801ba8c:	2104      	movs	r1, #4
 801ba8e:	f007 fca8 	bl	80233e2 <_ZdlPvj>
 801ba92:	4620      	mov	r0, r4
 801ba94:	bd10      	pop	{r4, pc}

0801ba96 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801ba96:	b510      	push	{r4, lr}
 801ba98:	4604      	mov	r4, r0
 801ba9a:	2104      	movs	r1, #4
 801ba9c:	f007 fca1 	bl	80233e2 <_ZdlPvj>
 801baa0:	4620      	mov	r0, r4
 801baa2:	bd10      	pop	{r4, pc}

0801baa4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801baa4:	b510      	push	{r4, lr}
 801baa6:	4604      	mov	r4, r0
 801baa8:	2104      	movs	r1, #4
 801baaa:	f007 fc9a 	bl	80233e2 <_ZdlPvj>
 801baae:	4620      	mov	r0, r4
 801bab0:	bd10      	pop	{r4, pc}

0801bab2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801bab2:	b510      	push	{r4, lr}
 801bab4:	4604      	mov	r4, r0
 801bab6:	2104      	movs	r1, #4
 801bab8:	f007 fc93 	bl	80233e2 <_ZdlPvj>
 801babc:	4620      	mov	r0, r4
 801babe:	bd10      	pop	{r4, pc}

0801bac0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801bac0:	b510      	push	{r4, lr}
 801bac2:	4604      	mov	r4, r0
 801bac4:	2104      	movs	r1, #4
 801bac6:	f007 fc8c 	bl	80233e2 <_ZdlPvj>
 801baca:	4620      	mov	r0, r4
 801bacc:	bd10      	pop	{r4, pc}

0801bace <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801bace:	b510      	push	{r4, lr}
 801bad0:	4604      	mov	r4, r0
 801bad2:	2104      	movs	r1, #4
 801bad4:	f007 fc85 	bl	80233e2 <_ZdlPvj>
 801bad8:	4620      	mov	r0, r4
 801bada:	bd10      	pop	{r4, pc}

0801badc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801badc:	b510      	push	{r4, lr}
 801bade:	4604      	mov	r4, r0
 801bae0:	2104      	movs	r1, #4
 801bae2:	f007 fc7e 	bl	80233e2 <_ZdlPvj>
 801bae6:	4620      	mov	r0, r4
 801bae8:	bd10      	pop	{r4, pc}

0801baea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801baea:	b510      	push	{r4, lr}
 801baec:	4604      	mov	r4, r0
 801baee:	2104      	movs	r1, #4
 801baf0:	f007 fc77 	bl	80233e2 <_ZdlPvj>
 801baf4:	4620      	mov	r0, r4
 801baf6:	bd10      	pop	{r4, pc}

0801baf8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801baf8:	b510      	push	{r4, lr}
 801bafa:	4604      	mov	r4, r0
 801bafc:	2104      	movs	r1, #4
 801bafe:	f007 fc70 	bl	80233e2 <_ZdlPvj>
 801bb02:	4620      	mov	r0, r4
 801bb04:	bd10      	pop	{r4, pc}

0801bb06 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801bb06:	b510      	push	{r4, lr}
 801bb08:	4604      	mov	r4, r0
 801bb0a:	2104      	movs	r1, #4
 801bb0c:	f007 fc69 	bl	80233e2 <_ZdlPvj>
 801bb10:	4620      	mov	r0, r4
 801bb12:	bd10      	pop	{r4, pc}

0801bb14 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801bb14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb18:	4d9e      	ldr	r5, [pc, #632]	; (801bd94 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 801bb1a:	4690      	mov	r8, r2
 801bb1c:	b08f      	sub	sp, #60	; 0x3c
 801bb1e:	4604      	mov	r4, r0
 801bb20:	682a      	ldr	r2, [r5, #0]
 801bb22:	4689      	mov	r9, r1
 801bb24:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801bb28:	2a02      	cmp	r2, #2
 801bb2a:	d106      	bne.n	801bb3a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801bb2c:	4b9a      	ldr	r3, [pc, #616]	; (801bd98 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 801bb2e:	f44f 71cc 	mov.w	r1, #408	; 0x198
 801bb32:	4a9a      	ldr	r2, [pc, #616]	; (801bd9c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801bb34:	489a      	ldr	r0, [pc, #616]	; (801bda0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28c>)
 801bb36:	f007 fc7f 	bl	8023438 <__assert_func>
 801bb3a:	ae0e      	add	r6, sp, #56	; 0x38
 801bb3c:	f826 3d24 	strh.w	r3, [r6, #-36]!
 801bb40:	4630      	mov	r0, r6
 801bb42:	f7fe f8b3 	bl	8019cac <_ZNK8touchgfx6Bitmap9getFormatEv>
 801bb46:	6823      	ldr	r3, [r4, #0]
 801bb48:	4607      	mov	r7, r0
 801bb4a:	4620      	mov	r0, r4
 801bb4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bb4e:	4798      	blx	r3
 801bb50:	4287      	cmp	r7, r0
 801bb52:	d004      	beq.n	801bb5e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801bb54:	4b93      	ldr	r3, [pc, #588]	; (801bda4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 801bb56:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 801bb5a:	4a90      	ldr	r2, [pc, #576]	; (801bd9c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801bb5c:	e7ea      	b.n	801bb34 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801bb5e:	4630      	mov	r0, r6
 801bb60:	f7fe f820 	bl	8019ba4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801bb64:	4607      	mov	r7, r0
 801bb66:	b920      	cbnz	r0, 801bb72 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801bb68:	4b8f      	ldr	r3, [pc, #572]	; (801bda8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 801bb6a:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 801bb6e:	4a8b      	ldr	r2, [pc, #556]	; (801bd9c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801bb70:	e7e0      	b.n	801bb34 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801bb72:	f8d8 0000 	ldr.w	r0, [r8]
 801bb76:	ab06      	add	r3, sp, #24
 801bb78:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801bb7c:	f9b8 a000 	ldrsh.w	sl, [r8]
 801bb80:	c303      	stmia	r3!, {r0, r1}
 801bb82:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801bb86:	ab08      	add	r3, sp, #32
 801bb88:	f8d9 0000 	ldr.w	r0, [r9]
 801bb8c:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 801bb90:	c303      	stmia	r3!, {r0, r1}
 801bb92:	4630      	mov	r0, r6
 801bb94:	f7fd fefe 	bl	8019994 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801bb98:	4680      	mov	r8, r0
 801bb9a:	4630      	mov	r0, r6
 801bb9c:	4e83      	ldr	r6, [pc, #524]	; (801bdac <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x298>)
 801bb9e:	f7fd ff33 	bl	8019a08 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801bba2:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801bba6:	f10d 0920 	add.w	r9, sp, #32
 801bbaa:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801bbae:	a806      	add	r0, sp, #24
 801bbb0:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801bbb4:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 801bbb8:	f7fb fb0a 	bl	80171d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bbbc:	4648      	mov	r0, r9
 801bbbe:	f7fb fb07 	bl	80171d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bbc2:	a80a      	add	r0, sp, #40	; 0x28
 801bbc4:	f7fb fb04 	bl	80171d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bbc8:	4b79      	ldr	r3, [pc, #484]	; (801bdb0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801bbca:	2100      	movs	r1, #0
 801bbcc:	f9b6 2000 	ldrsh.w	r2, [r6]
 801bbd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bbd4:	4648      	mov	r0, r9
 801bbd6:	910c      	str	r1, [sp, #48]	; 0x30
 801bbd8:	a90c      	add	r1, sp, #48	; 0x30
 801bbda:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801bbde:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801bbe2:	f7f8 fc11 	bl	8014408 <_ZN8touchgfx4RectaNERKS0_>
 801bbe6:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 801bbea:	9602      	str	r6, [sp, #8]
 801bbec:	f1bc 0f00 	cmp.w	ip, #0
 801bbf0:	f000 80a4 	beq.w	801bd3c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801bbf4:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 801bbf8:	2e00      	cmp	r6, #0
 801bbfa:	f000 809f 	beq.w	801bd3c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801bbfe:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801bc02:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801bc06:	4288      	cmp	r0, r1
 801bc08:	db36      	blt.n	801bc78 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801bc0a:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801bc0e:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801bc12:	429a      	cmp	r2, r3
 801bc14:	db30      	blt.n	801bc78 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801bc16:	4460      	add	r0, ip
 801bc18:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 801bc1c:	4461      	add	r1, ip
 801bc1e:	b200      	sxth	r0, r0
 801bc20:	b209      	sxth	r1, r1
 801bc22:	4288      	cmp	r0, r1
 801bc24:	dc28      	bgt.n	801bc78 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801bc26:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801bc2a:	4432      	add	r2, r6
 801bc2c:	440b      	add	r3, r1
 801bc2e:	b212      	sxth	r2, r2
 801bc30:	b21b      	sxth	r3, r3
 801bc32:	429a      	cmp	r2, r3
 801bc34:	dc20      	bgt.n	801bc78 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801bc36:	6823      	ldr	r3, [r4, #0]
 801bc38:	4620      	mov	r0, r4
 801bc3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bc3c:	4798      	blx	r3
 801bc3e:	4682      	mov	sl, r0
 801bc40:	6828      	ldr	r0, [r5, #0]
 801bc42:	6803      	ldr	r3, [r0, #0]
 801bc44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bc46:	4798      	blx	r3
 801bc48:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 801bc4c:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801bc50:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801bc54:	9303      	str	r3, [sp, #12]
 801bc56:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801bc5a:	1a9b      	subs	r3, r3, r2
 801bc5c:	b29b      	uxth	r3, r3
 801bc5e:	b21c      	sxth	r4, r3
 801bc60:	2c00      	cmp	r4, #0
 801bc62:	dc0e      	bgt.n	801bc82 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16e>
 801bc64:	b134      	cbz	r4, 801bc74 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x160>
 801bc66:	f8ad 2020 	strh.w	r2, [sp, #32]
 801bc6a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801bc6e:	4413      	add	r3, r2
 801bc70:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801bc74:	463c      	mov	r4, r7
 801bc76:	e00b      	b.n	801bc90 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x17c>
 801bc78:	4b4e      	ldr	r3, [pc, #312]	; (801bdb4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a0>)
 801bc7a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801bc7e:	4a47      	ldr	r2, [pc, #284]	; (801bd9c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801bc80:	e758      	b.n	801bb34 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801bc82:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801bc86:	ebab 0303 	sub.w	r3, fp, r3
 801bc8a:	443c      	add	r4, r7
 801bc8c:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801bc90:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801bc94:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801bc98:	1a9b      	subs	r3, r3, r2
 801bc9a:	b29b      	uxth	r3, r3
 801bc9c:	b219      	sxth	r1, r3
 801bc9e:	2900      	cmp	r1, #0
 801bca0:	dd50      	ble.n	801bd44 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x230>
 801bca2:	9a03      	ldr	r2, [sp, #12]
 801bca4:	fb02 4401 	mla	r4, r2, r1, r4
 801bca8:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801bcac:	1ad3      	subs	r3, r2, r3
 801bcae:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801bcb2:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801bcb6:	f1bc 0f00 	cmp.w	ip, #0
 801bcba:	dd3f      	ble.n	801bd3c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801bcbc:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801bcc0:	2e00      	cmp	r6, #0
 801bcc2:	dd3b      	ble.n	801bd3c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801bcc4:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801bcc8:	2203      	movs	r2, #3
 801bcca:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801bcce:	fb0a f801 	mul.w	r8, sl, r1
 801bcd2:	fb13 8802 	smlabb	r8, r3, r2, r8
 801bcd6:	9a02      	ldr	r2, [sp, #8]
 801bcd8:	4480      	add	r8, r0
 801bcda:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 801bcde:	8812      	ldrh	r2, [r2, #0]
 801bce0:	4584      	cmp	ip, r0
 801bce2:	eba2 0303 	sub.w	r3, r2, r3
 801bce6:	bfa8      	it	ge
 801bce8:	4684      	movge	ip, r0
 801bcea:	459c      	cmp	ip, r3
 801bcec:	bfa8      	it	ge
 801bcee:	469c      	movge	ip, r3
 801bcf0:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 801bcf4:	429e      	cmp	r6, r3
 801bcf6:	bfa8      	it	ge
 801bcf8:	461e      	movge	r6, r3
 801bcfa:	4b2d      	ldr	r3, [pc, #180]	; (801bdb0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801bcfc:	881b      	ldrh	r3, [r3, #0]
 801bcfe:	1a59      	subs	r1, r3, r1
 801bd00:	4633      	mov	r3, r6
 801bd02:	428e      	cmp	r6, r1
 801bd04:	bfa8      	it	ge
 801bd06:	460b      	movge	r3, r1
 801bd08:	4562      	cmp	r2, ip
 801bd0a:	9302      	str	r3, [sp, #8]
 801bd0c:	d12d      	bne.n	801bd6a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801bd0e:	455a      	cmp	r2, fp
 801bd10:	d12b      	bne.n	801bd6a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801bd12:	6828      	ldr	r0, [r5, #0]
 801bd14:	6803      	ldr	r3, [r0, #0]
 801bd16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bd18:	4798      	blx	r3
 801bd1a:	07c3      	lsls	r3, r0, #31
 801bd1c:	d51b      	bpl.n	801bd56 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x242>
 801bd1e:	6828      	ldr	r0, [r5, #0]
 801bd20:	9b02      	ldr	r3, [sp, #8]
 801bd22:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 801bd26:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801bd2a:	6803      	ldr	r3, [r0, #0]
 801bd2c:	f8cd b000 	str.w	fp, [sp]
 801bd30:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 801bd32:	4623      	mov	r3, r4
 801bd34:	e899 0006 	ldmia.w	r9, {r1, r2}
 801bd38:	47a8      	blx	r5
 801bd3a:	4607      	mov	r7, r0
 801bd3c:	4638      	mov	r0, r7
 801bd3e:	b00f      	add	sp, #60	; 0x3c
 801bd40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd44:	bf1f      	itttt	ne
 801bd46:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 801bd4a:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 801bd4e:	189b      	addne	r3, r3, r2
 801bd50:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 801bd54:	e7ad      	b.n	801bcb2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19e>
 801bd56:	6828      	ldr	r0, [r5, #0]
 801bd58:	4642      	mov	r2, r8
 801bd5a:	4621      	mov	r1, r4
 801bd5c:	6803      	ldr	r3, [r0, #0]
 801bd5e:	6add      	ldr	r5, [r3, #44]	; 0x2c
 801bd60:	9b02      	ldr	r3, [sp, #8]
 801bd62:	fb03 f30a 	mul.w	r3, r3, sl
 801bd66:	47a8      	blx	r5
 801bd68:	e7e8      	b.n	801bd3c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801bd6a:	eb0c 0b4c 	add.w	fp, ip, ip, lsl #1
 801bd6e:	f04f 0900 	mov.w	r9, #0
 801bd72:	9b02      	ldr	r3, [sp, #8]
 801bd74:	454b      	cmp	r3, r9
 801bd76:	dde1      	ble.n	801bd3c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801bd78:	6828      	ldr	r0, [r5, #0]
 801bd7a:	4642      	mov	r2, r8
 801bd7c:	4621      	mov	r1, r4
 801bd7e:	44d0      	add	r8, sl
 801bd80:	6803      	ldr	r3, [r0, #0]
 801bd82:	f109 0901 	add.w	r9, r9, #1
 801bd86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bd88:	461e      	mov	r6, r3
 801bd8a:	465b      	mov	r3, fp
 801bd8c:	47b0      	blx	r6
 801bd8e:	9b03      	ldr	r3, [sp, #12]
 801bd90:	441c      	add	r4, r3
 801bd92:	e7ee      	b.n	801bd72 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x25e>
 801bd94:	2000bad8 	.word	0x2000bad8
 801bd98:	08027a45 	.word	0x08027a45
 801bd9c:	08028225 	.word	0x08028225
 801bda0:	08027a13 	.word	0x08027a13
 801bda4:	08027af9 	.word	0x08027af9
 801bda8:	08027b4e 	.word	0x08027b4e
 801bdac:	2000bad2 	.word	0x2000bad2
 801bdb0:	2000bad4 	.word	0x2000bad4
 801bdb4:	08027b8c 	.word	0x08027b8c

0801bdb8 <_ZN8touchgfx8LCD24bppC1Ev>:
 801bdb8:	4a0b      	ldr	r2, [pc, #44]	; (801bde8 <_ZN8touchgfx8LCD24bppC1Ev+0x30>)
 801bdba:	6002      	str	r2, [r0, #0]
 801bdbc:	2200      	movs	r2, #0
 801bdbe:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801bdc2:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801bdc6:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801bdca:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801bdce:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801bdd2:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801bdd6:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801bdda:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801bdde:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801bde2:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801bde6:	4770      	bx	lr
 801bde8:	08027e70 	.word	0x08027e70

0801bdec <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801bdec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bdf0:	b093      	sub	sp, #76	; 0x4c
 801bdf2:	880c      	ldrh	r4, [r1, #0]
 801bdf4:	4605      	mov	r5, r0
 801bdf6:	460f      	mov	r7, r1
 801bdf8:	4691      	mov	r9, r2
 801bdfa:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 801bdfe:	b12c      	cbz	r4, 801be0c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 801be00:	4b71      	ldr	r3, [pc, #452]	; (801bfc8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801be02:	2167      	movs	r1, #103	; 0x67
 801be04:	4a71      	ldr	r2, [pc, #452]	; (801bfcc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 801be06:	4872      	ldr	r0, [pc, #456]	; (801bfd0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801be08:	f007 fb16 	bl	8023438 <__assert_func>
 801be0c:	6810      	ldr	r0, [r2, #0]
 801be0e:	ae0e      	add	r6, sp, #56	; 0x38
 801be10:	6851      	ldr	r1, [r2, #4]
 801be12:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 801bfd8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ec>
 801be16:	c603      	stmia	r6!, {r0, r1}
 801be18:	6818      	ldr	r0, [r3, #0]
 801be1a:	ae10      	add	r6, sp, #64	; 0x40
 801be1c:	6859      	ldr	r1, [r3, #4]
 801be1e:	c603      	stmia	r6!, {r0, r1}
 801be20:	a80e      	add	r0, sp, #56	; 0x38
 801be22:	f7fb f9d5 	bl	80171d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801be26:	4649      	mov	r1, r9
 801be28:	a810      	add	r0, sp, #64	; 0x40
 801be2a:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 801bfd4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 801be2e:	f7fb f9b7 	bl	80171a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801be32:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801be36:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801be3a:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801be3e:	f8d9 0000 	ldr.w	r0, [r9]
 801be42:	fb11 2103 	smlabb	r1, r1, r3, r2
 801be46:	f9bd 6044 	ldrsh.w	r6, [sp, #68]	; 0x44
 801be4a:	440d      	add	r5, r1
 801be4c:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801be50:	440a      	add	r2, r1
 801be52:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801be56:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801be5a:	4413      	add	r3, r2
 801be5c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801be60:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 801be64:	930b      	str	r3, [sp, #44]	; 0x2c
 801be66:	6803      	ldr	r3, [r0, #0]
 801be68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801be6c:	4798      	blx	r3
 801be6e:	2801      	cmp	r0, #1
 801be70:	d11e      	bne.n	801beb0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc4>
 801be72:	220b      	movs	r2, #11
 801be74:	9008      	str	r0, [sp, #32]
 801be76:	b2b6      	uxth	r6, r6
 801be78:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801be7c:	9207      	str	r2, [sp, #28]
 801be7e:	4629      	mov	r1, r5
 801be80:	f8ba 2000 	ldrh.w	r2, [sl]
 801be84:	f8cd 8010 	str.w	r8, [sp, #16]
 801be88:	9601      	str	r6, [sp, #4]
 801be8a:	e9cd 0205 	strd	r0, r2, [sp, #20]
 801be8e:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801be92:	9203      	str	r2, [sp, #12]
 801be94:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801be98:	9202      	str	r2, [sp, #8]
 801be9a:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801be9e:	9200      	str	r2, [sp, #0]
 801bea0:	463a      	mov	r2, r7
 801bea2:	f8d9 0000 	ldr.w	r0, [r9]
 801bea6:	f7f8 fefd 	bl	8014ca4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801beaa:	b013      	add	sp, #76	; 0x4c
 801beac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801beb0:	f8d9 0000 	ldr.w	r0, [r9]
 801beb4:	ea26 79e6 	bic.w	r9, r6, r6, asr #31
 801beb8:	6803      	ldr	r3, [r0, #0]
 801beba:	6a1b      	ldr	r3, [r3, #32]
 801bebc:	4798      	blx	r3
 801bebe:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801bec2:	f8ba 3000 	ldrh.w	r3, [sl]
 801bec6:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801beca:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801bece:	fb01 2303 	mla	r3, r1, r3, r2
 801bed2:	4621      	mov	r1, r4
 801bed4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bed8:	4418      	add	r0, r3
 801beda:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 801bede:	930c      	str	r3, [sp, #48]	; 0x30
 801bee0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bee2:	4299      	cmp	r1, r3
 801bee4:	da6a      	bge.n	801bfbc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d0>
 801bee6:	1cc2      	adds	r2, r0, #3
 801bee8:	46aa      	mov	sl, r5
 801beea:	ebaa 0305 	sub.w	r3, sl, r5
 801beee:	429e      	cmp	r6, r3
 801bef0:	dd55      	ble.n	801bf9e <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b2>
 801bef2:	2404      	movs	r4, #4
 801bef4:	f81a 3b01 	ldrb.w	r3, [sl], #1
 801bef8:	fb14 4303 	smlabb	r3, r4, r3, r4
 801befc:	eb07 0e03 	add.w	lr, r7, r3
 801bf00:	f89e 4003 	ldrb.w	r4, [lr, #3]
 801bf04:	b184      	cbz	r4, 801bf28 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 801bf06:	2cff      	cmp	r4, #255	; 0xff
 801bf08:	f817 b003 	ldrb.w	fp, [r7, r3]
 801bf0c:	d10e      	bne.n	801bf2c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801bf0e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801bf12:	d10b      	bne.n	801bf2c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801bf14:	f802 bc03 	strb.w	fp, [r2, #-3]
 801bf18:	f89e 3001 	ldrb.w	r3, [lr, #1]
 801bf1c:	f802 3c02 	strb.w	r3, [r2, #-2]
 801bf20:	f89e 3002 	ldrb.w	r3, [lr, #2]
 801bf24:	f802 3c01 	strb.w	r3, [r2, #-1]
 801bf28:	3203      	adds	r2, #3
 801bf2a:	e7de      	b.n	801beea <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfe>
 801bf2c:	fb08 f404 	mul.w	r4, r8, r4
 801bf30:	f812 cc03 	ldrb.w	ip, [r2, #-3]
 801bf34:	1c63      	adds	r3, r4, #1
 801bf36:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 801bf3a:	121b      	asrs	r3, r3, #8
 801bf3c:	b29c      	uxth	r4, r3
 801bf3e:	43db      	mvns	r3, r3
 801bf40:	fb1b fb04 	smulbb	fp, fp, r4
 801bf44:	b2db      	uxtb	r3, r3
 801bf46:	fb0c bc03 	mla	ip, ip, r3, fp
 801bf4a:	fa1f fc8c 	uxth.w	ip, ip
 801bf4e:	f10c 0b01 	add.w	fp, ip, #1
 801bf52:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801bf56:	f812 bc02 	ldrb.w	fp, [r2, #-2]
 801bf5a:	fb1b fb03 	smulbb	fp, fp, r3
 801bf5e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801bf62:	f802 cc03 	strb.w	ip, [r2, #-3]
 801bf66:	f89e c001 	ldrb.w	ip, [lr, #1]
 801bf6a:	fb0c bc04 	mla	ip, ip, r4, fp
 801bf6e:	fa1f fc8c 	uxth.w	ip, ip
 801bf72:	f10c 0b01 	add.w	fp, ip, #1
 801bf76:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801bf7a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801bf7e:	f802 cc02 	strb.w	ip, [r2, #-2]
 801bf82:	f812 cc01 	ldrb.w	ip, [r2, #-1]
 801bf86:	f89e e002 	ldrb.w	lr, [lr, #2]
 801bf8a:	fb1c f303 	smulbb	r3, ip, r3
 801bf8e:	fb0e 3304 	mla	r3, lr, r4, r3
 801bf92:	b29b      	uxth	r3, r3
 801bf94:	1c5c      	adds	r4, r3, #1
 801bf96:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801bf9a:	121b      	asrs	r3, r3, #8
 801bf9c:	e7c2      	b.n	801bf24 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801bf9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bfa0:	3101      	adds	r1, #1
 801bfa2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801bfa4:	881b      	ldrh	r3, [r3, #0]
 801bfa6:	1b9b      	subs	r3, r3, r6
 801bfa8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bfac:	4413      	add	r3, r2
 801bfae:	4418      	add	r0, r3
 801bfb0:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801bfb4:	1b9b      	subs	r3, r3, r6
 801bfb6:	444b      	add	r3, r9
 801bfb8:	441d      	add	r5, r3
 801bfba:	e791      	b.n	801bee0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801bfbc:	4b05      	ldr	r3, [pc, #20]	; (801bfd4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 801bfbe:	6818      	ldr	r0, [r3, #0]
 801bfc0:	6803      	ldr	r3, [r0, #0]
 801bfc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bfc4:	4798      	blx	r3
 801bfc6:	e770      	b.n	801beaa <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 801bfc8:	08027977 	.word	0x08027977
 801bfcc:	08028047 	.word	0x08028047
 801bfd0:	08027a13 	.word	0x08027a13
 801bfd4:	2000bad8 	.word	0x2000bad8
 801bfd8:	2000bad2 	.word	0x2000bad2

0801bfdc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801bfdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bfe0:	4614      	mov	r4, r2
 801bfe2:	880a      	ldrh	r2, [r1, #0]
 801bfe4:	b091      	sub	sp, #68	; 0x44
 801bfe6:	4680      	mov	r8, r0
 801bfe8:	2a01      	cmp	r2, #1
 801bfea:	460e      	mov	r6, r1
 801bfec:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801bff0:	d005      	beq.n	801bffe <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22>
 801bff2:	4b6d      	ldr	r3, [pc, #436]	; (801c1a8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 801bff4:	21b5      	movs	r1, #181	; 0xb5
 801bff6:	4a6d      	ldr	r2, [pc, #436]	; (801c1ac <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>)
 801bff8:	486d      	ldr	r0, [pc, #436]	; (801c1b0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 801bffa:	f007 fa1d 	bl	8023438 <__assert_func>
 801bffe:	6820      	ldr	r0, [r4, #0]
 801c000:	ad0c      	add	r5, sp, #48	; 0x30
 801c002:	6861      	ldr	r1, [r4, #4]
 801c004:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 801c1b4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>
 801c008:	c503      	stmia	r5!, {r0, r1}
 801c00a:	6818      	ldr	r0, [r3, #0]
 801c00c:	ad0e      	add	r5, sp, #56	; 0x38
 801c00e:	6859      	ldr	r1, [r3, #4]
 801c010:	c503      	stmia	r5!, {r0, r1}
 801c012:	a80c      	add	r0, sp, #48	; 0x30
 801c014:	f7fb f8dc 	bl	80171d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c018:	4621      	mov	r1, r4
 801c01a:	a80e      	add	r0, sp, #56	; 0x38
 801c01c:	f7fb f8c0 	bl	80171a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c020:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801c024:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801c028:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801c02c:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 801c030:	fb11 2103 	smlabb	r1, r1, r3, r2
 801c034:	eb08 0401 	add.w	r4, r8, r1
 801c038:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801c03c:	f8df 8178 	ldr.w	r8, [pc, #376]	; 801c1b8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>
 801c040:	440a      	add	r2, r1
 801c042:	f8d8 0000 	ldr.w	r0, [r8]
 801c046:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801c04a:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801c04e:	4413      	add	r3, r2
 801c050:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801c054:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801c058:	930a      	str	r3, [sp, #40]	; 0x28
 801c05a:	6803      	ldr	r3, [r0, #0]
 801c05c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801c060:	4798      	blx	r3
 801c062:	2801      	cmp	r0, #1
 801c064:	d11e      	bne.n	801c0a4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc8>
 801c066:	220b      	movs	r2, #11
 801c068:	9008      	str	r0, [sp, #32]
 801c06a:	b2ad      	uxth	r5, r5
 801c06c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801c070:	9207      	str	r2, [sp, #28]
 801c072:	4621      	mov	r1, r4
 801c074:	f8b9 2000 	ldrh.w	r2, [r9]
 801c078:	9501      	str	r5, [sp, #4]
 801c07a:	9206      	str	r2, [sp, #24]
 801c07c:	2200      	movs	r2, #0
 801c07e:	e9cd 7204 	strd	r7, r2, [sp, #16]
 801c082:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801c086:	9203      	str	r2, [sp, #12]
 801c088:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801c08c:	9202      	str	r2, [sp, #8]
 801c08e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801c092:	9200      	str	r2, [sp, #0]
 801c094:	4632      	mov	r2, r6
 801c096:	f8d8 0000 	ldr.w	r0, [r8]
 801c09a:	f7f8 fe03 	bl	8014ca4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801c09e:	b011      	add	sp, #68	; 0x44
 801c0a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c0a4:	f8d8 0000 	ldr.w	r0, [r8]
 801c0a8:	ea25 78e5 	bic.w	r8, r5, r5, asr #31
 801c0ac:	6803      	ldr	r3, [r0, #0]
 801c0ae:	6a1b      	ldr	r3, [r3, #32]
 801c0b0:	4798      	blx	r3
 801c0b2:	f8b9 3000 	ldrh.w	r3, [r9]
 801c0b6:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 801c0ba:	f04f 0e00 	mov.w	lr, #0
 801c0be:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801c0c2:	fa1f f987 	uxth.w	r9, r7
 801c0c6:	fb01 2303 	mla	r3, r1, r3, r2
 801c0ca:	f1c7 01ff 	rsb	r1, r7, #255	; 0xff
 801c0ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c0d2:	b289      	uxth	r1, r1
 801c0d4:	4418      	add	r0, r3
 801c0d6:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801c0da:	930b      	str	r3, [sp, #44]	; 0x2c
 801c0dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c0de:	459e      	cmp	lr, r3
 801c0e0:	da5c      	bge.n	801c19c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>
 801c0e2:	1cc3      	adds	r3, r0, #3
 801c0e4:	46a2      	mov	sl, r4
 801c0e6:	ebaa 0204 	sub.w	r2, sl, r4
 801c0ea:	4295      	cmp	r5, r2
 801c0ec:	dd46      	ble.n	801c17c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a0>
 801c0ee:	f04f 0c03 	mov.w	ip, #3
 801c0f2:	f04f 0b04 	mov.w	fp, #4
 801c0f6:	f81a 2b01 	ldrb.w	r2, [sl], #1
 801c0fa:	2fff      	cmp	r7, #255	; 0xff
 801c0fc:	fb1c b202 	smlabb	r2, ip, r2, fp
 801c100:	eb06 0c02 	add.w	ip, r6, r2
 801c104:	f816 b002 	ldrb.w	fp, [r6, r2]
 801c108:	d02f      	beq.n	801c16a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18e>
 801c10a:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 801c10e:	fb12 f201 	smulbb	r2, r2, r1
 801c112:	fb0b 2209 	mla	r2, fp, r9, r2
 801c116:	b292      	uxth	r2, r2
 801c118:	f102 0b01 	add.w	fp, r2, #1
 801c11c:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801c120:	f813 bc02 	ldrb.w	fp, [r3, #-2]
 801c124:	fb1b fb01 	smulbb	fp, fp, r1
 801c128:	1212      	asrs	r2, r2, #8
 801c12a:	f803 2c03 	strb.w	r2, [r3, #-3]
 801c12e:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801c132:	fb02 b209 	mla	r2, r2, r9, fp
 801c136:	b292      	uxth	r2, r2
 801c138:	f102 0b01 	add.w	fp, r2, #1
 801c13c:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801c140:	1212      	asrs	r2, r2, #8
 801c142:	f803 2c02 	strb.w	r2, [r3, #-2]
 801c146:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801c14a:	f813 cc01 	ldrb.w	ip, [r3, #-1]
 801c14e:	fb1c fc01 	smulbb	ip, ip, r1
 801c152:	fb02 c209 	mla	r2, r2, r9, ip
 801c156:	b292      	uxth	r2, r2
 801c158:	f102 0c01 	add.w	ip, r2, #1
 801c15c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801c160:	1212      	asrs	r2, r2, #8
 801c162:	f803 2c01 	strb.w	r2, [r3, #-1]
 801c166:	3303      	adds	r3, #3
 801c168:	e7bd      	b.n	801c0e6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10a>
 801c16a:	f803 bc03 	strb.w	fp, [r3, #-3]
 801c16e:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801c172:	f803 2c02 	strb.w	r2, [r3, #-2]
 801c176:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801c17a:	e7f2      	b.n	801c162 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x186>
 801c17c:	4b0d      	ldr	r3, [pc, #52]	; (801c1b4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 801c17e:	f10e 0e01 	add.w	lr, lr, #1
 801c182:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c184:	881b      	ldrh	r3, [r3, #0]
 801c186:	1b5b      	subs	r3, r3, r5
 801c188:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c18c:	4413      	add	r3, r2
 801c18e:	4418      	add	r0, r3
 801c190:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801c194:	1b5b      	subs	r3, r3, r5
 801c196:	4443      	add	r3, r8
 801c198:	441c      	add	r4, r3
 801c19a:	e79f      	b.n	801c0dc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x100>
 801c19c:	4b06      	ldr	r3, [pc, #24]	; (801c1b8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801c19e:	6818      	ldr	r0, [r3, #0]
 801c1a0:	6803      	ldr	r3, [r0, #0]
 801c1a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c1a4:	4798      	blx	r3
 801c1a6:	e77a      	b.n	801c09e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc2>
 801c1a8:	08027883 	.word	0x08027883
 801c1ac:	08027f3a 	.word	0x08027f3a
 801c1b0:	08027a13 	.word	0x08027a13
 801c1b4:	2000bad2 	.word	0x2000bad2
 801c1b8:	2000bad8 	.word	0x2000bad8

0801c1bc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801c1bc:	b570      	push	{r4, r5, r6, lr}
 801c1be:	780d      	ldrb	r5, [r1, #0]
 801c1c0:	f89d 4010 	ldrb.w	r4, [sp, #16]
 801c1c4:	2d01      	cmp	r5, #1
 801c1c6:	d00d      	beq.n	801c1e4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 801c1c8:	d307      	bcc.n	801c1da <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 801c1ca:	2d02      	cmp	r5, #2
 801c1cc:	d10f      	bne.n	801c1ee <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 801c1ce:	4b08      	ldr	r3, [pc, #32]	; (801c1f0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 801c1d0:	215a      	movs	r1, #90	; 0x5a
 801c1d2:	4a08      	ldr	r2, [pc, #32]	; (801c1f4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 801c1d4:	4808      	ldr	r0, [pc, #32]	; (801c1f8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 801c1d6:	f007 f92f 	bl	8023438 <__assert_func>
 801c1da:	9404      	str	r4, [sp, #16]
 801c1dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c1e0:	f7ff be04 	b.w	801bdec <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801c1e4:	9404      	str	r4, [sp, #16]
 801c1e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c1ea:	f7ff bef7 	b.w	801bfdc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801c1ee:	bd70      	pop	{r4, r5, r6, pc}
 801c1f0:	08027838 	.word	0x08027838
 801c1f4:	08027eb8 	.word	0x08027eb8
 801c1f8:	08027a13 	.word	0x08027a13

0801c1fc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801c1fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c200:	b08b      	sub	sp, #44	; 0x2c
 801c202:	460c      	mov	r4, r1
 801c204:	4680      	mov	r8, r0
 801c206:	469a      	mov	sl, r3
 801c208:	6808      	ldr	r0, [r1, #0]
 801c20a:	ab06      	add	r3, sp, #24
 801c20c:	6849      	ldr	r1, [r1, #4]
 801c20e:	c303      	stmia	r3!, {r0, r1}
 801c210:	6810      	ldr	r0, [r2, #0]
 801c212:	ab08      	add	r3, sp, #32
 801c214:	6851      	ldr	r1, [r2, #4]
 801c216:	c303      	stmia	r3!, {r0, r1}
 801c218:	a806      	add	r0, sp, #24
 801c21a:	f7fa ffd9 	bl	80171d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c21e:	4621      	mov	r1, r4
 801c220:	a808      	add	r0, sp, #32
 801c222:	4c61      	ldr	r4, [pc, #388]	; (801c3a8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 801c224:	f7fa ffbc 	bl	80171a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c228:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801c22c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801c230:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801c234:	6820      	ldr	r0, [r4, #0]
 801c236:	fb11 2103 	smlabb	r1, r1, r3, r2
 801c23a:	f9bd 7024 	ldrsh.w	r7, [sp, #36]	; 0x24
 801c23e:	f9bd 9026 	ldrsh.w	r9, [sp, #38]	; 0x26
 801c242:	eb08 0881 	add.w	r8, r8, r1, lsl #2
 801c246:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801c24a:	440a      	add	r2, r1
 801c24c:	f8ad 2020 	strh.w	r2, [sp, #32]
 801c250:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801c254:	4413      	add	r3, r2
 801c256:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801c25a:	6803      	ldr	r3, [r0, #0]
 801c25c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c25e:	4798      	blx	r3
 801c260:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801c264:	d118      	bne.n	801c298 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801c266:	f010 0f20 	tst.w	r0, #32
 801c26a:	6820      	ldr	r0, [r4, #0]
 801c26c:	d017      	beq.n	801c29e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801c26e:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801c272:	b2bf      	uxth	r7, r7
 801c274:	6801      	ldr	r1, [r0, #0]
 801c276:	9402      	str	r4, [sp, #8]
 801c278:	fa1f f489 	uxth.w	r4, r9
 801c27c:	f8cd a00c 	str.w	sl, [sp, #12]
 801c280:	9401      	str	r4, [sp, #4]
 801c282:	9700      	str	r7, [sp, #0]
 801c284:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801c288:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801c28a:	4641      	mov	r1, r8
 801c28c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801c290:	47a0      	blx	r4
 801c292:	b00b      	add	sp, #44	; 0x2c
 801c294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c298:	f010 0f40 	tst.w	r0, #64	; 0x40
 801c29c:	e7e5      	b.n	801c26a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801c29e:	6803      	ldr	r3, [r0, #0]
 801c2a0:	6a1b      	ldr	r3, [r3, #32]
 801c2a2:	4798      	blx	r3
 801c2a4:	4b41      	ldr	r3, [pc, #260]	; (801c3ac <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b0>)
 801c2a6:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801c2aa:	f04f 0c00 	mov.w	ip, #0
 801c2ae:	881a      	ldrh	r2, [r3, #0]
 801c2b0:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801c2b4:	fb04 1202 	mla	r2, r4, r2, r1
 801c2b8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c2bc:	4410      	add	r0, r2
 801c2be:	ea27 72e7 	bic.w	r2, r7, r7, asr #31
 801c2c2:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 801c2c6:	0092      	lsls	r2, r2, #2
 801c2c8:	9105      	str	r1, [sp, #20]
 801c2ca:	9204      	str	r2, [sp, #16]
 801c2cc:	45cc      	cmp	ip, r9
 801c2ce:	da65      	bge.n	801c39c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a0>
 801c2d0:	1cc4      	adds	r4, r0, #3
 801c2d2:	f108 0504 	add.w	r5, r8, #4
 801c2d6:	f04f 0e00 	mov.w	lr, #0
 801c2da:	45be      	cmp	lr, r7
 801c2dc:	da4d      	bge.n	801c37a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17e>
 801c2de:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801c2e2:	b181      	cbz	r1, 801c306 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801c2e4:	29ff      	cmp	r1, #255	; 0xff
 801c2e6:	f815 bc04 	ldrb.w	fp, [r5, #-4]
 801c2ea:	d111      	bne.n	801c310 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801c2ec:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801c2f0:	d10e      	bne.n	801c310 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801c2f2:	f804 bc03 	strb.w	fp, [r4, #-3]
 801c2f6:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 801c2fa:	f804 2c02 	strb.w	r2, [r4, #-2]
 801c2fe:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 801c302:	f804 2c01 	strb.w	r2, [r4, #-1]
 801c306:	f10e 0e01 	add.w	lr, lr, #1
 801c30a:	3403      	adds	r4, #3
 801c30c:	3504      	adds	r5, #4
 801c30e:	e7e4      	b.n	801c2da <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 801c310:	fb0a f101 	mul.w	r1, sl, r1
 801c314:	1c4a      	adds	r2, r1, #1
 801c316:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 801c31a:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801c31e:	1212      	asrs	r2, r2, #8
 801c320:	b296      	uxth	r6, r2
 801c322:	43d2      	mvns	r2, r2
 801c324:	fb1b fb06 	smulbb	fp, fp, r6
 801c328:	b2d2      	uxtb	r2, r2
 801c32a:	fb01 b102 	mla	r1, r1, r2, fp
 801c32e:	b289      	uxth	r1, r1
 801c330:	f101 0b01 	add.w	fp, r1, #1
 801c334:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801c338:	f814 bc02 	ldrb.w	fp, [r4, #-2]
 801c33c:	fb1b fb02 	smulbb	fp, fp, r2
 801c340:	1209      	asrs	r1, r1, #8
 801c342:	f804 1c03 	strb.w	r1, [r4, #-3]
 801c346:	f815 1c03 	ldrb.w	r1, [r5, #-3]
 801c34a:	fb01 b106 	mla	r1, r1, r6, fp
 801c34e:	b289      	uxth	r1, r1
 801c350:	f101 0b01 	add.w	fp, r1, #1
 801c354:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801c358:	1209      	asrs	r1, r1, #8
 801c35a:	f804 1c02 	strb.w	r1, [r4, #-2]
 801c35e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801c362:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801c366:	fb11 f202 	smulbb	r2, r1, r2
 801c36a:	fb0b 2206 	mla	r2, fp, r6, r2
 801c36e:	b292      	uxth	r2, r2
 801c370:	1c56      	adds	r6, r2, #1
 801c372:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801c376:	1212      	asrs	r2, r2, #8
 801c378:	e7c3      	b.n	801c302 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x106>
 801c37a:	881a      	ldrh	r2, [r3, #0]
 801c37c:	f10c 0c01 	add.w	ip, ip, #1
 801c380:	9905      	ldr	r1, [sp, #20]
 801c382:	1bd2      	subs	r2, r2, r7
 801c384:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c388:	440a      	add	r2, r1
 801c38a:	9904      	ldr	r1, [sp, #16]
 801c38c:	4410      	add	r0, r2
 801c38e:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801c392:	1bd2      	subs	r2, r2, r7
 801c394:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801c398:	4490      	add	r8, r2
 801c39a:	e797      	b.n	801c2cc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd0>
 801c39c:	4b02      	ldr	r3, [pc, #8]	; (801c3a8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 801c39e:	6818      	ldr	r0, [r3, #0]
 801c3a0:	6803      	ldr	r3, [r0, #0]
 801c3a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c3a4:	4798      	blx	r3
 801c3a6:	e774      	b.n	801c292 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801c3a8:	2000bad8 	.word	0x2000bad8
 801c3ac:	2000bad2 	.word	0x2000bad2

0801c3b0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801c3b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c3b4:	b085      	sub	sp, #20
 801c3b6:	4606      	mov	r6, r0
 801c3b8:	460c      	mov	r4, r1
 801c3ba:	4691      	mov	r9, r2
 801c3bc:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801c3c0:	4698      	mov	r8, r3
 801c3c2:	b385      	cbz	r5, 801c426 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801c3c4:	4608      	mov	r0, r1
 801c3c6:	f7fd fae5 	bl	8019994 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c3ca:	4607      	mov	r7, r0
 801c3cc:	4620      	mov	r0, r4
 801c3ce:	f7fd fb1b 	bl	8019a08 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c3d2:	f8ad 000e 	strh.w	r0, [sp, #14]
 801c3d6:	4620      	mov	r0, r4
 801c3d8:	f8ad 9008 	strh.w	r9, [sp, #8]
 801c3dc:	f8ad 800a 	strh.w	r8, [sp, #10]
 801c3e0:	f8ad 700c 	strh.w	r7, [sp, #12]
 801c3e4:	f7fd fc62 	bl	8019cac <_ZNK8touchgfx6Bitmap9getFormatEv>
 801c3e8:	2801      	cmp	r0, #1
 801c3ea:	d00f      	beq.n	801c40c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801c3ec:	4620      	mov	r0, r4
 801c3ee:	f7fd fc5d 	bl	8019cac <_ZNK8touchgfx6Bitmap9getFormatEv>
 801c3f2:	2802      	cmp	r0, #2
 801c3f4:	d00a      	beq.n	801c40c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801c3f6:	4620      	mov	r0, r4
 801c3f8:	f7fd fc58 	bl	8019cac <_ZNK8touchgfx6Bitmap9getFormatEv>
 801c3fc:	280b      	cmp	r0, #11
 801c3fe:	d005      	beq.n	801c40c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801c400:	4b1b      	ldr	r3, [pc, #108]	; (801c470 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>)
 801c402:	2142      	movs	r1, #66	; 0x42
 801c404:	4a1b      	ldr	r2, [pc, #108]	; (801c474 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>)
 801c406:	481c      	ldr	r0, [pc, #112]	; (801c478 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc8>)
 801c408:	f007 f816 	bl	8023438 <__assert_func>
 801c40c:	4620      	mov	r0, r4
 801c40e:	f7fd fc4d 	bl	8019cac <_ZNK8touchgfx6Bitmap9getFormatEv>
 801c412:	2802      	cmp	r0, #2
 801c414:	4620      	mov	r0, r4
 801c416:	d109      	bne.n	801c42c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7c>
 801c418:	f7fd fbc4 	bl	8019ba4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801c41c:	462b      	mov	r3, r5
 801c41e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c420:	a902      	add	r1, sp, #8
 801c422:	f7ff feeb 	bl	801c1fc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801c426:	b005      	add	sp, #20
 801c428:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c42c:	f7fd fc3e 	bl	8019cac <_ZNK8touchgfx6Bitmap9getFormatEv>
 801c430:	280b      	cmp	r0, #11
 801c432:	d10e      	bne.n	801c452 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 801c434:	4620      	mov	r0, r4
 801c436:	f7fd fbb5 	bl	8019ba4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801c43a:	4606      	mov	r6, r0
 801c43c:	4620      	mov	r0, r4
 801c43e:	f7fd fbe3 	bl	8019c08 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801c442:	9500      	str	r5, [sp, #0]
 801c444:	4601      	mov	r1, r0
 801c446:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c448:	aa02      	add	r2, sp, #8
 801c44a:	4630      	mov	r0, r6
 801c44c:	f7ff feb6 	bl	801c1bc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801c450:	e7e9      	b.n	801c426 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801c452:	6833      	ldr	r3, [r6, #0]
 801c454:	4620      	mov	r0, r4
 801c456:	691f      	ldr	r7, [r3, #16]
 801c458:	f7fd fba4 	bl	8019ba4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801c45c:	2300      	movs	r3, #0
 801c45e:	4601      	mov	r1, r0
 801c460:	aa02      	add	r2, sp, #8
 801c462:	4630      	mov	r0, r6
 801c464:	e9cd 5300 	strd	r5, r3, [sp]
 801c468:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c46a:	47b8      	blx	r7
 801c46c:	e7db      	b.n	801c426 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801c46e:	bf00      	nop
 801c470:	080278d1 	.word	0x080278d1
 801c474:	08027fc3 	.word	0x08027fc3
 801c478:	08027a13 	.word	0x08027a13

0801c47c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801c47c:	b570      	push	{r4, r5, r6, lr}
 801c47e:	9d04      	ldr	r5, [sp, #16]
 801c480:	460c      	mov	r4, r1
 801c482:	4619      	mov	r1, r3
 801c484:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801c488:	2a0c      	cmp	r2, #12
 801c48a:	d826      	bhi.n	801c4da <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5e>
 801c48c:	e8df f002 	tbb	[pc, r2]
 801c490:	200e1407 	.word	0x200e1407
 801c494:	20202020 	.word	0x20202020
 801c498:	20202020 	.word	0x20202020
 801c49c:	20          	.byte	0x20
 801c49d:	00          	.byte	0x00
 801c49e:	4b0f      	ldr	r3, [pc, #60]	; (801c4dc <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 801c4a0:	f240 117f 	movw	r1, #383	; 0x17f
 801c4a4:	4a0e      	ldr	r2, [pc, #56]	; (801c4e0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801c4a6:	480f      	ldr	r0, [pc, #60]	; (801c4e4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 801c4a8:	f006 ffc6 	bl	8023438 <__assert_func>
 801c4ac:	462a      	mov	r2, r5
 801c4ae:	4620      	mov	r0, r4
 801c4b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c4b4:	f7ff bea2 	b.w	801c1fc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801c4b8:	6802      	ldr	r2, [r0, #0]
 801c4ba:	2600      	movs	r6, #0
 801c4bc:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801c4c0:	6916      	ldr	r6, [r2, #16]
 801c4c2:	462b      	mov	r3, r5
 801c4c4:	460a      	mov	r2, r1
 801c4c6:	4621      	mov	r1, r4
 801c4c8:	46b4      	mov	ip, r6
 801c4ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c4ce:	4760      	bx	ip
 801c4d0:	4b05      	ldr	r3, [pc, #20]	; (801c4e8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 801c4d2:	f240 1191 	movw	r1, #401	; 0x191
 801c4d6:	4a02      	ldr	r2, [pc, #8]	; (801c4e0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801c4d8:	e7e5      	b.n	801c4a6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 801c4da:	bd70      	pop	{r4, r5, r6, pc}
 801c4dc:	08027bec 	.word	0x08027bec
 801c4e0:	080282ab 	.word	0x080282ab
 801c4e4:	08027a13 	.word	0x08027a13
 801c4e8:	08027c2d 	.word	0x08027c2d

0801c4ec <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801c4ec:	b158      	cbz	r0, 801c506 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 801c4ee:	2902      	cmp	r1, #2
 801c4f0:	d00f      	beq.n	801c512 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 801c4f2:	2903      	cmp	r1, #3
 801c4f4:	d010      	beq.n	801c518 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801c4f6:	2901      	cmp	r1, #1
 801c4f8:	d101      	bne.n	801c4fe <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801c4fa:	2001      	movs	r0, #1
 801c4fc:	4770      	bx	lr
 801c4fe:	4b08      	ldr	r3, [pc, #32]	; (801c520 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801c500:	8819      	ldrh	r1, [r3, #0]
 801c502:	4248      	negs	r0, r1
 801c504:	4770      	bx	lr
 801c506:	2902      	cmp	r1, #2
 801c508:	d006      	beq.n	801c518 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801c50a:	2903      	cmp	r1, #3
 801c50c:	d0f7      	beq.n	801c4fe <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801c50e:	2901      	cmp	r1, #1
 801c510:	d1f3      	bne.n	801c4fa <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 801c512:	4b03      	ldr	r3, [pc, #12]	; (801c520 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801c514:	8818      	ldrh	r0, [r3, #0]
 801c516:	4770      	bx	lr
 801c518:	f04f 30ff 	mov.w	r0, #4294967295
 801c51c:	4770      	bx	lr
 801c51e:	bf00      	nop
 801c520:	2000bad2 	.word	0x2000bad2

0801c524 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801c524:	b170      	cbz	r0, 801c544 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 801c526:	2902      	cmp	r1, #2
 801c528:	d012      	beq.n	801c550 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 801c52a:	2903      	cmp	r1, #3
 801c52c:	d006      	beq.n	801c53c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801c52e:	2901      	cmp	r1, #1
 801c530:	d001      	beq.n	801c536 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801c532:	2001      	movs	r0, #1
 801c534:	4770      	bx	lr
 801c536:	4b08      	ldr	r3, [pc, #32]	; (801c558 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801c538:	8818      	ldrh	r0, [r3, #0]
 801c53a:	4770      	bx	lr
 801c53c:	4b06      	ldr	r3, [pc, #24]	; (801c558 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801c53e:	8818      	ldrh	r0, [r3, #0]
 801c540:	4240      	negs	r0, r0
 801c542:	4770      	bx	lr
 801c544:	2902      	cmp	r1, #2
 801c546:	d0f9      	beq.n	801c53c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801c548:	2903      	cmp	r1, #3
 801c54a:	d0f2      	beq.n	801c532 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 801c54c:	2901      	cmp	r1, #1
 801c54e:	d1f2      	bne.n	801c536 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801c550:	f04f 30ff 	mov.w	r0, #4294967295
 801c554:	4770      	bx	lr
 801c556:	bf00      	nop
 801c558:	2000bad2 	.word	0x2000bad2

0801c55c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801c55c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c560:	b095      	sub	sp, #84	; 0x54
 801c562:	9109      	str	r1, [sp, #36]	; 0x24
 801c564:	a910      	add	r1, sp, #64	; 0x40
 801c566:	f9bd 5078 	ldrsh.w	r5, [sp, #120]	; 0x78
 801c56a:	f8bd 6080 	ldrh.w	r6, [sp, #128]	; 0x80
 801c56e:	f8bd 4084 	ldrh.w	r4, [sp, #132]	; 0x84
 801c572:	f89d 809c 	ldrb.w	r8, [sp, #156]	; 0x9c
 801c576:	f89d 90a4 	ldrb.w	r9, [sp, #164]	; 0xa4
 801c57a:	e881 000c 	stmia.w	r1, {r2, r3}
 801c57e:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
 801c582:	9306      	str	r3, [sp, #24]
 801c584:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 801c588:	e9dd 2122 	ldrd	r2, r1, [sp, #136]	; 0x88
 801c58c:	930e      	str	r3, [sp, #56]	; 0x38
 801c58e:	f89d 30a0 	ldrb.w	r3, [sp, #160]	; 0xa0
 801c592:	798f      	ldrb	r7, [r1, #6]
 801c594:	930a      	str	r3, [sp, #40]	; 0x28
 801c596:	7b4b      	ldrb	r3, [r1, #13]
 801c598:	0158      	lsls	r0, r3, #5
 801c59a:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801c59e:	4338      	orrs	r0, r7
 801c5a0:	9008      	str	r0, [sp, #32]
 801c5a2:	f000 8174 	beq.w	801c88e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801c5a6:	011b      	lsls	r3, r3, #4
 801c5a8:	79c8      	ldrb	r0, [r1, #7]
 801c5aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c5ae:	4303      	orrs	r3, r0
 801c5b0:	9307      	str	r3, [sp, #28]
 801c5b2:	f000 816c 	beq.w	801c88e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801c5b6:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801c5ba:	b29b      	uxth	r3, r3
 801c5bc:	2e00      	cmp	r6, #0
 801c5be:	f000 8112 	beq.w	801c7e6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x28a>
 801c5c2:	1af6      	subs	r6, r6, r3
 801c5c4:	b2b6      	uxth	r6, r6
 801c5c6:	0433      	lsls	r3, r6, #16
 801c5c8:	d502      	bpl.n	801c5d0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801c5ca:	1bad      	subs	r5, r5, r6
 801c5cc:	2600      	movs	r6, #0
 801c5ce:	b22d      	sxth	r5, r5
 801c5d0:	f9b2 1000 	ldrsh.w	r1, [r2]
 801c5d4:	a810      	add	r0, sp, #64	; 0x40
 801c5d6:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801c5da:	428d      	cmp	r5, r1
 801c5dc:	b28b      	uxth	r3, r1
 801c5de:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 801c5e2:	bfbf      	itttt	lt
 801c5e4:	18f6      	addlt	r6, r6, r3
 801c5e6:	1b75      	sublt	r5, r6, r5
 801c5e8:	b2ae      	uxthlt	r6, r5
 801c5ea:	460d      	movlt	r5, r1
 801c5ec:	8891      	ldrh	r1, [r2, #4]
 801c5ee:	440b      	add	r3, r1
 801c5f0:	4629      	mov	r1, r5
 801c5f2:	b21b      	sxth	r3, r3
 801c5f4:	930d      	str	r3, [sp, #52]	; 0x34
 801c5f6:	88d3      	ldrh	r3, [r2, #6]
 801c5f8:	9a06      	ldr	r2, [sp, #24]
 801c5fa:	449a      	add	sl, r3
 801c5fc:	fa0f f38a 	sxth.w	r3, sl
 801c600:	f8bd a01c 	ldrh.w	sl, [sp, #28]
 801c604:	930c      	str	r3, [sp, #48]	; 0x30
 801c606:	4bb8      	ldr	r3, [pc, #736]	; (801c8e8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 801c608:	f893 b000 	ldrb.w	fp, [r3]
 801c60c:	f10b 3cff 	add.w	ip, fp, #4294967295
 801c610:	f1dc 0300 	rsbs	r3, ip, #0
 801c614:	eb43 030c 	adc.w	r3, r3, ip
 801c618:	930b      	str	r3, [sp, #44]	; 0x2c
 801c61a:	464b      	mov	r3, r9
 801c61c:	f7fa fcb2 	bl	8016f84 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801c620:	4629      	mov	r1, r5
 801c622:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
 801c626:	464b      	mov	r3, r9
 801c628:	9a06      	ldr	r2, [sp, #24]
 801c62a:	a810      	add	r0, sp, #64	; 0x40
 801c62c:	f7fa fcc2 	bl	8016fb4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801c630:	a914      	add	r1, sp, #80	; 0x50
 801c632:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801c636:	a813      	add	r0, sp, #76	; 0x4c
 801c638:	f7fa fd9c 	bl	8017174 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801c63c:	f1b9 0f00 	cmp.w	r9, #0
 801c640:	f040 80d4 	bne.w	801c7ec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x290>
 801c644:	f1bb 0f01 	cmp.w	fp, #1
 801c648:	f040 80d8 	bne.w	801c7fc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 801c64c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c64e:	2b00      	cmp	r3, #0
 801c650:	f040 8122 	bne.w	801c898 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33c>
 801c654:	4ba5      	ldr	r3, [pc, #660]	; (801c8ec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 801c656:	6818      	ldr	r0, [r3, #0]
 801c658:	6803      	ldr	r3, [r0, #0]
 801c65a:	6a1b      	ldr	r3, [r3, #32]
 801c65c:	4798      	blx	r3
 801c65e:	4aa4      	ldr	r2, [pc, #656]	; (801c8f0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>)
 801c660:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 801c664:	8811      	ldrh	r1, [r2, #0]
 801c666:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 801c66a:	fb01 2303 	mla	r3, r1, r3, r2
 801c66e:	2201      	movs	r2, #1
 801c670:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c674:	4590      	cmp	r8, r2
 801c676:	4403      	add	r3, r0
 801c678:	9307      	str	r3, [sp, #28]
 801c67a:	fa02 f308 	lsl.w	r3, r2, r8
 801c67e:	f103 33ff 	add.w	r3, r3, #4294967295
 801c682:	b2db      	uxtb	r3, r3
 801c684:	930f      	str	r3, [sp, #60]	; 0x3c
 801c686:	f000 8109 	beq.w	801c89c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x340>
 801c68a:	f1b8 0f02 	cmp.w	r8, #2
 801c68e:	f000 813e 	beq.w	801c90e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b2>
 801c692:	f1b8 0f04 	cmp.w	r8, #4
 801c696:	f000 8132 	beq.w	801c8fe <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 801c69a:	b906      	cbnz	r6, 801c69e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x142>
 801c69c:	b174      	cbz	r4, 801c6bc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x160>
 801c69e:	fb17 6304 	smlabb	r3, r7, r4, r6
 801c6a2:	9924      	ldr	r1, [sp, #144]	; 0x90
 801c6a4:	ebaa 0a04 	sub.w	sl, sl, r4
 801c6a8:	fb13 f308 	smulbb	r3, r3, r8
 801c6ac:	fa1f fa8a 	uxth.w	sl, sl
 801c6b0:	b29b      	uxth	r3, r3
 801c6b2:	eb01 01d3 	add.w	r1, r1, r3, lsr #3
 801c6b6:	f003 0407 	and.w	r4, r3, #7
 801c6ba:	9124      	str	r1, [sp, #144]	; 0x90
 801c6bc:	4649      	mov	r1, r9
 801c6be:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801c6c0:	f7ff ff14 	bl	801c4ec <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801c6c4:	4649      	mov	r1, r9
 801c6c6:	4683      	mov	fp, r0
 801c6c8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801c6ca:	f7ff ff2b 	bl	801c524 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801c6ce:	9906      	ldr	r1, [sp, #24]
 801c6d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c6d2:	1bad      	subs	r5, r5, r6
 801c6d4:	1a5b      	subs	r3, r3, r1
 801c6d6:	459a      	cmp	sl, r3
 801c6d8:	bfa8      	it	ge
 801c6da:	469a      	movge	sl, r3
 801c6dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c6de:	1b5d      	subs	r5, r3, r5
 801c6e0:	9b08      	ldr	r3, [sp, #32]
 801c6e2:	429d      	cmp	r5, r3
 801c6e4:	bfd4      	ite	le
 801c6e6:	ebc6 0605 	rsble	r6, r6, r5
 801c6ea:	ebc6 0603 	rsbgt	r6, r6, r3
 801c6ee:	1bbf      	subs	r7, r7, r6
 801c6f0:	fb0b 0016 	mls	r0, fp, r6, r0
 801c6f4:	fb08 f307 	mul.w	r3, r8, r7
 801c6f8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801c6fc:	9308      	str	r3, [sp, #32]
 801c6fe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c700:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801c704:	930b      	str	r3, [sp, #44]	; 0x2c
 801c706:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c708:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801c70c:	930c      	str	r3, [sp, #48]	; 0x30
 801c70e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c710:	b2db      	uxtb	r3, r3
 801c712:	930d      	str	r3, [sp, #52]	; 0x34
 801c714:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c716:	7819      	ldrb	r1, [r3, #0]
 801c718:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801c71c:	ea26 7be6 	bic.w	fp, r6, r6, asr #31
 801c720:	4121      	asrs	r1, r4
 801c722:	9306      	str	r3, [sp, #24]
 801c724:	fb03 0b0b 	mla	fp, r3, fp, r0
 801c728:	b2c9      	uxtb	r1, r1
 801c72a:	f1ba 0f00 	cmp.w	sl, #0
 801c72e:	f340 80d1 	ble.w	801c8d4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801c732:	46b6      	mov	lr, r6
 801c734:	9807      	ldr	r0, [sp, #28]
 801c736:	f1be 0f00 	cmp.w	lr, #0
 801c73a:	f340 80b8 	ble.w	801c8ae <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 801c73e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c740:	400b      	ands	r3, r1
 801c742:	d03e      	beq.n	801c7c2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 801c744:	fb13 f302 	smulbb	r3, r3, r2
 801c748:	2bfe      	cmp	r3, #254	; 0xfe
 801c74a:	dd03      	ble.n	801c754 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f8>
 801c74c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801c74e:	2dff      	cmp	r5, #255	; 0xff
 801c750:	f000 80a6 	beq.w	801c8a0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 801c754:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801c756:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801c758:	fb15 f303 	smulbb	r3, r5, r3
 801c75c:	b29b      	uxth	r3, r3
 801c75e:	1c5d      	adds	r5, r3, #1
 801c760:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801c764:	7805      	ldrb	r5, [r0, #0]
 801c766:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801c76a:	fa1f fc83 	uxth.w	ip, r3
 801c76e:	43db      	mvns	r3, r3
 801c770:	fb17 f90c 	smulbb	r9, r7, ip
 801c774:	b2db      	uxtb	r3, r3
 801c776:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801c778:	fb05 9503 	mla	r5, r5, r3, r9
 801c77c:	b2ad      	uxth	r5, r5
 801c77e:	f105 0901 	add.w	r9, r5, #1
 801c782:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801c786:	fb17 f90c 	smulbb	r9, r7, ip
 801c78a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801c78c:	122d      	asrs	r5, r5, #8
 801c78e:	fb17 fc0c 	smulbb	ip, r7, ip
 801c792:	7005      	strb	r5, [r0, #0]
 801c794:	7845      	ldrb	r5, [r0, #1]
 801c796:	fb05 9503 	mla	r5, r5, r3, r9
 801c79a:	b2ad      	uxth	r5, r5
 801c79c:	f105 0901 	add.w	r9, r5, #1
 801c7a0:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801c7a4:	122d      	asrs	r5, r5, #8
 801c7a6:	7045      	strb	r5, [r0, #1]
 801c7a8:	7885      	ldrb	r5, [r0, #2]
 801c7aa:	fb05 cc03 	mla	ip, r5, r3, ip
 801c7ae:	fa1f fc8c 	uxth.w	ip, ip
 801c7b2:	f10c 0301 	add.w	r3, ip, #1
 801c7b6:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801c7ba:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c7be:	f880 c002 	strb.w	ip, [r0, #2]
 801c7c2:	4444      	add	r4, r8
 801c7c4:	f10e 3eff 	add.w	lr, lr, #4294967295
 801c7c8:	b2a4      	uxth	r4, r4
 801c7ca:	2c07      	cmp	r4, #7
 801c7cc:	bf89      	itett	hi
 801c7ce:	9b24      	ldrhi	r3, [sp, #144]	; 0x90
 801c7d0:	fa41 f108 	asrls.w	r1, r1, r8
 801c7d4:	2400      	movhi	r4, #0
 801c7d6:	7859      	ldrbhi	r1, [r3, #1]
 801c7d8:	bf8a      	itet	hi
 801c7da:	3301      	addhi	r3, #1
 801c7dc:	b2c9      	uxtbls	r1, r1
 801c7de:	9324      	strhi	r3, [sp, #144]	; 0x90
 801c7e0:	9b06      	ldr	r3, [sp, #24]
 801c7e2:	4418      	add	r0, r3
 801c7e4:	e7a7      	b.n	801c736 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1da>
 801c7e6:	441d      	add	r5, r3
 801c7e8:	b22d      	sxth	r5, r5
 801c7ea:	e6f1      	b.n	801c5d0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801c7ec:	f1b9 0f01 	cmp.w	r9, #1
 801c7f0:	f47f af2c 	bne.w	801c64c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c7f4:	f1bb 0f01 	cmp.w	fp, #1
 801c7f8:	f47f af28 	bne.w	801c64c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c7fc:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 801c8ec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801c800:	f8db 0000 	ldr.w	r0, [fp]
 801c804:	6803      	ldr	r3, [r0, #0]
 801c806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c808:	4798      	blx	r3
 801c80a:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 801c80e:	465a      	mov	r2, fp
 801c810:	d006      	beq.n	801c820 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 801c812:	f1b8 0f04 	cmp.w	r8, #4
 801c816:	d13d      	bne.n	801c894 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x338>
 801c818:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c81a:	3300      	adds	r3, #0
 801c81c:	bf18      	it	ne
 801c81e:	2301      	movne	r3, #1
 801c820:	05c0      	lsls	r0, r0, #23
 801c822:	d567      	bpl.n	801c8f4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 801c824:	f1b8 0f08 	cmp.w	r8, #8
 801c828:	d164      	bne.n	801c8f4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 801c82a:	2b00      	cmp	r3, #0
 801c82c:	bf0c      	ite	eq
 801c82e:	f44f 7180 	moveq.w	r1, #256	; 0x100
 801c832:	2180      	movne	r1, #128	; 0x80
 801c834:	2e00      	cmp	r6, #0
 801c836:	f47f af09 	bne.w	801c64c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c83a:	2c00      	cmp	r4, #0
 801c83c:	f47f af06 	bne.w	801c64c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c840:	9b08      	ldr	r3, [sp, #32]
 801c842:	980d      	ldr	r0, [sp, #52]	; 0x34
 801c844:	442b      	add	r3, r5
 801c846:	4283      	cmp	r3, r0
 801c848:	f73f af00 	bgt.w	801c64c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c84c:	e9dd 0306 	ldrd	r0, r3, [sp, #24]
 801c850:	4403      	add	r3, r0
 801c852:	980c      	ldr	r0, [sp, #48]	; 0x30
 801c854:	4283      	cmp	r3, r0
 801c856:	f73f aef9 	bgt.w	801c64c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c85a:	f1b8 0f08 	cmp.w	r8, #8
 801c85e:	6810      	ldr	r0, [r2, #0]
 801c860:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 801c864:	bf18      	it	ne
 801c866:	3701      	addne	r7, #1
 801c868:	6804      	ldr	r4, [r0, #0]
 801c86a:	9105      	str	r1, [sp, #20]
 801c86c:	bf18      	it	ne
 801c86e:	f027 0701 	bicne.w	r7, r7, #1
 801c872:	990a      	ldr	r1, [sp, #40]	; 0x28
 801c874:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 801c878:	bf18      	it	ne
 801c87a:	b2bf      	uxthne	r7, r7
 801c87c:	9104      	str	r1, [sp, #16]
 801c87e:	9926      	ldr	r1, [sp, #152]	; 0x98
 801c880:	e9cd 7a00 	strd	r7, sl, [sp]
 801c884:	e9cd 7102 	strd	r7, r1, [sp, #8]
 801c888:	9924      	ldr	r1, [sp, #144]	; 0x90
 801c88a:	6c24      	ldr	r4, [r4, #64]	; 0x40
 801c88c:	47a0      	blx	r4
 801c88e:	b015      	add	sp, #84	; 0x54
 801c890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c894:	2300      	movs	r3, #0
 801c896:	e7c3      	b.n	801c820 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 801c898:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c89a:	e6e0      	b.n	801c65e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 801c89c:	22ff      	movs	r2, #255	; 0xff
 801c89e:	e6fc      	b.n	801c69a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801c8a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c8a2:	7003      	strb	r3, [r0, #0]
 801c8a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c8a6:	7043      	strb	r3, [r0, #1]
 801c8a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c8aa:	7083      	strb	r3, [r0, #2]
 801c8ac:	e789      	b.n	801c7c2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 801c8ae:	9b08      	ldr	r3, [sp, #32]
 801c8b0:	b153      	cbz	r3, 801c8c8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x36c>
 801c8b2:	441c      	add	r4, r3
 801c8b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c8b6:	b2a4      	uxth	r4, r4
 801c8b8:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801c8bc:	f004 0407 	and.w	r4, r4, #7
 801c8c0:	7819      	ldrb	r1, [r3, #0]
 801c8c2:	9324      	str	r3, [sp, #144]	; 0x90
 801c8c4:	4121      	asrs	r1, r4
 801c8c6:	b2c9      	uxtb	r1, r1
 801c8c8:	9b07      	ldr	r3, [sp, #28]
 801c8ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c8ce:	445b      	add	r3, fp
 801c8d0:	9307      	str	r3, [sp, #28]
 801c8d2:	e72a      	b.n	801c72a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ce>
 801c8d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c8d6:	2b00      	cmp	r3, #0
 801c8d8:	d1d9      	bne.n	801c88e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801c8da:	4b04      	ldr	r3, [pc, #16]	; (801c8ec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 801c8dc:	6818      	ldr	r0, [r3, #0]
 801c8de:	6803      	ldr	r3, [r0, #0]
 801c8e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c8e2:	4798      	blx	r3
 801c8e4:	e7d3      	b.n	801c88e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801c8e6:	bf00      	nop
 801c8e8:	2000bad0 	.word	0x2000bad0
 801c8ec:	2000bad8 	.word	0x2000bad8
 801c8f0:	2000bad2 	.word	0x2000bad2
 801c8f4:	2b00      	cmp	r3, #0
 801c8f6:	f43f aea9 	beq.w	801c64c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c8fa:	2180      	movs	r1, #128	; 0x80
 801c8fc:	e79a      	b.n	801c834 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d8>
 801c8fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c900:	b11b      	cbz	r3, 801c90a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 801c902:	07fb      	lsls	r3, r7, #31
 801c904:	d501      	bpl.n	801c90a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 801c906:	3701      	adds	r7, #1
 801c908:	b2bf      	uxth	r7, r7
 801c90a:	2211      	movs	r2, #17
 801c90c:	e6c5      	b.n	801c69a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801c90e:	2255      	movs	r2, #85	; 0x55
 801c910:	e6c3      	b.n	801c69a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801c912:	bf00      	nop

0801c914 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801c914:	b538      	push	{r3, r4, r5, lr}
 801c916:	4c15      	ldr	r4, [pc, #84]	; (801c96c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801c918:	4605      	mov	r5, r0
 801c91a:	7823      	ldrb	r3, [r4, #0]
 801c91c:	f3bf 8f5b 	dmb	ish
 801c920:	07da      	lsls	r2, r3, #31
 801c922:	d40b      	bmi.n	801c93c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801c924:	4620      	mov	r0, r4
 801c926:	f006 fd5e 	bl	80233e6 <__cxa_guard_acquire>
 801c92a:	b138      	cbz	r0, 801c93c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801c92c:	4620      	mov	r0, r4
 801c92e:	f006 fd66 	bl	80233fe <__cxa_guard_release>
 801c932:	4a0f      	ldr	r2, [pc, #60]	; (801c970 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801c934:	490f      	ldr	r1, [pc, #60]	; (801c974 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801c936:	4810      	ldr	r0, [pc, #64]	; (801c978 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801c938:	f006 fd4b 	bl	80233d2 <__aeabi_atexit>
 801c93c:	4c0f      	ldr	r4, [pc, #60]	; (801c97c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801c93e:	7823      	ldrb	r3, [r4, #0]
 801c940:	f3bf 8f5b 	dmb	ish
 801c944:	07db      	lsls	r3, r3, #31
 801c946:	d40b      	bmi.n	801c960 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801c948:	4620      	mov	r0, r4
 801c94a:	f006 fd4c 	bl	80233e6 <__cxa_guard_acquire>
 801c94e:	b138      	cbz	r0, 801c960 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801c950:	4620      	mov	r0, r4
 801c952:	f006 fd54 	bl	80233fe <__cxa_guard_release>
 801c956:	4a06      	ldr	r2, [pc, #24]	; (801c970 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801c958:	4909      	ldr	r1, [pc, #36]	; (801c980 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801c95a:	480a      	ldr	r0, [pc, #40]	; (801c984 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801c95c:	f006 fd39 	bl	80233d2 <__aeabi_atexit>
 801c960:	4b05      	ldr	r3, [pc, #20]	; (801c978 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801c962:	612b      	str	r3, [r5, #16]
 801c964:	4b07      	ldr	r3, [pc, #28]	; (801c984 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801c966:	616b      	str	r3, [r5, #20]
 801c968:	bd38      	pop	{r3, r4, r5, pc}
 801c96a:	bf00      	nop
 801c96c:	2000bbe4 	.word	0x2000bbe4
 801c970:	20000000 	.word	0x20000000
 801c974:	0801b54b 	.word	0x0801b54b
 801c978:	20000084 	.word	0x20000084
 801c97c:	2000bbe8 	.word	0x2000bbe8
 801c980:	0801b549 	.word	0x0801b549
 801c984:	20000088 	.word	0x20000088

0801c988 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801c988:	b538      	push	{r3, r4, r5, lr}
 801c98a:	4c15      	ldr	r4, [pc, #84]	; (801c9e0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801c98c:	4605      	mov	r5, r0
 801c98e:	7823      	ldrb	r3, [r4, #0]
 801c990:	f3bf 8f5b 	dmb	ish
 801c994:	07da      	lsls	r2, r3, #31
 801c996:	d40b      	bmi.n	801c9b0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801c998:	4620      	mov	r0, r4
 801c99a:	f006 fd24 	bl	80233e6 <__cxa_guard_acquire>
 801c99e:	b138      	cbz	r0, 801c9b0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801c9a0:	4620      	mov	r0, r4
 801c9a2:	f006 fd2c 	bl	80233fe <__cxa_guard_release>
 801c9a6:	4a0f      	ldr	r2, [pc, #60]	; (801c9e4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801c9a8:	490f      	ldr	r1, [pc, #60]	; (801c9e8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801c9aa:	4810      	ldr	r0, [pc, #64]	; (801c9ec <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801c9ac:	f006 fd11 	bl	80233d2 <__aeabi_atexit>
 801c9b0:	4c0f      	ldr	r4, [pc, #60]	; (801c9f0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801c9b2:	7823      	ldrb	r3, [r4, #0]
 801c9b4:	f3bf 8f5b 	dmb	ish
 801c9b8:	07db      	lsls	r3, r3, #31
 801c9ba:	d40b      	bmi.n	801c9d4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801c9bc:	4620      	mov	r0, r4
 801c9be:	f006 fd12 	bl	80233e6 <__cxa_guard_acquire>
 801c9c2:	b138      	cbz	r0, 801c9d4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801c9c4:	4620      	mov	r0, r4
 801c9c6:	f006 fd1a 	bl	80233fe <__cxa_guard_release>
 801c9ca:	4a06      	ldr	r2, [pc, #24]	; (801c9e4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801c9cc:	4909      	ldr	r1, [pc, #36]	; (801c9f4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801c9ce:	480a      	ldr	r0, [pc, #40]	; (801c9f8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801c9d0:	f006 fcff 	bl	80233d2 <__aeabi_atexit>
 801c9d4:	4b05      	ldr	r3, [pc, #20]	; (801c9ec <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801c9d6:	60ab      	str	r3, [r5, #8]
 801c9d8:	4b07      	ldr	r3, [pc, #28]	; (801c9f8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801c9da:	60eb      	str	r3, [r5, #12]
 801c9dc:	bd38      	pop	{r3, r4, r5, pc}
 801c9de:	bf00      	nop
 801c9e0:	2000bbc4 	.word	0x2000bbc4
 801c9e4:	20000000 	.word	0x20000000
 801c9e8:	0801b54f 	.word	0x0801b54f
 801c9ec:	20000064 	.word	0x20000064
 801c9f0:	2000bbc8 	.word	0x2000bbc8
 801c9f4:	0801b54d 	.word	0x0801b54d
 801c9f8:	20000068 	.word	0x20000068

0801c9fc <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801c9fc:	b510      	push	{r4, lr}
 801c9fe:	4604      	mov	r4, r0
 801ca00:	f7ff ff88 	bl	801c914 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801ca04:	4620      	mov	r0, r4
 801ca06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ca0a:	f7ff bfbd 	b.w	801c988 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801ca10 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801ca10:	b538      	push	{r3, r4, r5, lr}
 801ca12:	4c15      	ldr	r4, [pc, #84]	; (801ca68 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801ca14:	4605      	mov	r5, r0
 801ca16:	7823      	ldrb	r3, [r4, #0]
 801ca18:	f3bf 8f5b 	dmb	ish
 801ca1c:	07da      	lsls	r2, r3, #31
 801ca1e:	d40b      	bmi.n	801ca38 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801ca20:	4620      	mov	r0, r4
 801ca22:	f006 fce0 	bl	80233e6 <__cxa_guard_acquire>
 801ca26:	b138      	cbz	r0, 801ca38 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801ca28:	4620      	mov	r0, r4
 801ca2a:	f006 fce8 	bl	80233fe <__cxa_guard_release>
 801ca2e:	4a0f      	ldr	r2, [pc, #60]	; (801ca6c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801ca30:	490f      	ldr	r1, [pc, #60]	; (801ca70 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801ca32:	4810      	ldr	r0, [pc, #64]	; (801ca74 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801ca34:	f006 fccd 	bl	80233d2 <__aeabi_atexit>
 801ca38:	4c0f      	ldr	r4, [pc, #60]	; (801ca78 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801ca3a:	7823      	ldrb	r3, [r4, #0]
 801ca3c:	f3bf 8f5b 	dmb	ish
 801ca40:	07db      	lsls	r3, r3, #31
 801ca42:	d40b      	bmi.n	801ca5c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801ca44:	4620      	mov	r0, r4
 801ca46:	f006 fcce 	bl	80233e6 <__cxa_guard_acquire>
 801ca4a:	b138      	cbz	r0, 801ca5c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801ca4c:	4620      	mov	r0, r4
 801ca4e:	f006 fcd6 	bl	80233fe <__cxa_guard_release>
 801ca52:	4a06      	ldr	r2, [pc, #24]	; (801ca6c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801ca54:	4909      	ldr	r1, [pc, #36]	; (801ca7c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801ca56:	480a      	ldr	r0, [pc, #40]	; (801ca80 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801ca58:	f006 fcbb 	bl	80233d2 <__aeabi_atexit>
 801ca5c:	4b05      	ldr	r3, [pc, #20]	; (801ca74 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801ca5e:	622b      	str	r3, [r5, #32]
 801ca60:	4b07      	ldr	r3, [pc, #28]	; (801ca80 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801ca62:	626b      	str	r3, [r5, #36]	; 0x24
 801ca64:	bd38      	pop	{r3, r4, r5, pc}
 801ca66:	bf00      	nop
 801ca68:	2000bbec 	.word	0x2000bbec
 801ca6c:	20000000 	.word	0x20000000
 801ca70:	0801b543 	.word	0x0801b543
 801ca74:	2000008c 	.word	0x2000008c
 801ca78:	2000bbf0 	.word	0x2000bbf0
 801ca7c:	0801b541 	.word	0x0801b541
 801ca80:	20000090 	.word	0x20000090

0801ca84 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801ca84:	b538      	push	{r3, r4, r5, lr}
 801ca86:	4c15      	ldr	r4, [pc, #84]	; (801cadc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801ca88:	4605      	mov	r5, r0
 801ca8a:	7823      	ldrb	r3, [r4, #0]
 801ca8c:	f3bf 8f5b 	dmb	ish
 801ca90:	07da      	lsls	r2, r3, #31
 801ca92:	d40b      	bmi.n	801caac <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801ca94:	4620      	mov	r0, r4
 801ca96:	f006 fca6 	bl	80233e6 <__cxa_guard_acquire>
 801ca9a:	b138      	cbz	r0, 801caac <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801ca9c:	4620      	mov	r0, r4
 801ca9e:	f006 fcae 	bl	80233fe <__cxa_guard_release>
 801caa2:	4a0f      	ldr	r2, [pc, #60]	; (801cae0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801caa4:	490f      	ldr	r1, [pc, #60]	; (801cae4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801caa6:	4810      	ldr	r0, [pc, #64]	; (801cae8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801caa8:	f006 fc93 	bl	80233d2 <__aeabi_atexit>
 801caac:	4c0f      	ldr	r4, [pc, #60]	; (801caec <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801caae:	7823      	ldrb	r3, [r4, #0]
 801cab0:	f3bf 8f5b 	dmb	ish
 801cab4:	07db      	lsls	r3, r3, #31
 801cab6:	d40b      	bmi.n	801cad0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801cab8:	4620      	mov	r0, r4
 801caba:	f006 fc94 	bl	80233e6 <__cxa_guard_acquire>
 801cabe:	b138      	cbz	r0, 801cad0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801cac0:	4620      	mov	r0, r4
 801cac2:	f006 fc9c 	bl	80233fe <__cxa_guard_release>
 801cac6:	4a06      	ldr	r2, [pc, #24]	; (801cae0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801cac8:	4909      	ldr	r1, [pc, #36]	; (801caf0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801caca:	480a      	ldr	r0, [pc, #40]	; (801caf4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801cacc:	f006 fc81 	bl	80233d2 <__aeabi_atexit>
 801cad0:	4b05      	ldr	r3, [pc, #20]	; (801cae8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801cad2:	61ab      	str	r3, [r5, #24]
 801cad4:	4b07      	ldr	r3, [pc, #28]	; (801caf4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801cad6:	61eb      	str	r3, [r5, #28]
 801cad8:	bd38      	pop	{r3, r4, r5, pc}
 801cada:	bf00      	nop
 801cadc:	2000bbcc 	.word	0x2000bbcc
 801cae0:	20000000 	.word	0x20000000
 801cae4:	0801b547 	.word	0x0801b547
 801cae8:	2000006c 	.word	0x2000006c
 801caec:	2000bbd0 	.word	0x2000bbd0
 801caf0:	0801b545 	.word	0x0801b545
 801caf4:	20000070 	.word	0x20000070

0801caf8 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801caf8:	b510      	push	{r4, lr}
 801cafa:	4604      	mov	r4, r0
 801cafc:	f7ff ff88 	bl	801ca10 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801cb00:	4620      	mov	r0, r4
 801cb02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cb06:	f7ff bfbd 	b.w	801ca84 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801cb0c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801cb0c:	b538      	push	{r3, r4, r5, lr}
 801cb0e:	4c15      	ldr	r4, [pc, #84]	; (801cb64 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801cb10:	4605      	mov	r5, r0
 801cb12:	7823      	ldrb	r3, [r4, #0]
 801cb14:	f3bf 8f5b 	dmb	ish
 801cb18:	07da      	lsls	r2, r3, #31
 801cb1a:	d40b      	bmi.n	801cb34 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801cb1c:	4620      	mov	r0, r4
 801cb1e:	f006 fc62 	bl	80233e6 <__cxa_guard_acquire>
 801cb22:	b138      	cbz	r0, 801cb34 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801cb24:	4620      	mov	r0, r4
 801cb26:	f006 fc6a 	bl	80233fe <__cxa_guard_release>
 801cb2a:	4a0f      	ldr	r2, [pc, #60]	; (801cb68 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801cb2c:	490f      	ldr	r1, [pc, #60]	; (801cb6c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801cb2e:	4810      	ldr	r0, [pc, #64]	; (801cb70 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801cb30:	f006 fc4f 	bl	80233d2 <__aeabi_atexit>
 801cb34:	4c0f      	ldr	r4, [pc, #60]	; (801cb74 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801cb36:	7823      	ldrb	r3, [r4, #0]
 801cb38:	f3bf 8f5b 	dmb	ish
 801cb3c:	07db      	lsls	r3, r3, #31
 801cb3e:	d40b      	bmi.n	801cb58 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801cb40:	4620      	mov	r0, r4
 801cb42:	f006 fc50 	bl	80233e6 <__cxa_guard_acquire>
 801cb46:	b138      	cbz	r0, 801cb58 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801cb48:	4620      	mov	r0, r4
 801cb4a:	f006 fc58 	bl	80233fe <__cxa_guard_release>
 801cb4e:	4a06      	ldr	r2, [pc, #24]	; (801cb68 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801cb50:	4909      	ldr	r1, [pc, #36]	; (801cb78 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801cb52:	480a      	ldr	r0, [pc, #40]	; (801cb7c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801cb54:	f006 fc3d 	bl	80233d2 <__aeabi_atexit>
 801cb58:	4b05      	ldr	r3, [pc, #20]	; (801cb70 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801cb5a:	632b      	str	r3, [r5, #48]	; 0x30
 801cb5c:	4b07      	ldr	r3, [pc, #28]	; (801cb7c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801cb5e:	636b      	str	r3, [r5, #52]	; 0x34
 801cb60:	bd38      	pop	{r3, r4, r5, pc}
 801cb62:	bf00      	nop
 801cb64:	2000bbd4 	.word	0x2000bbd4
 801cb68:	20000000 	.word	0x20000000
 801cb6c:	0801b53b 	.word	0x0801b53b
 801cb70:	20000074 	.word	0x20000074
 801cb74:	2000bbd8 	.word	0x2000bbd8
 801cb78:	0801b539 	.word	0x0801b539
 801cb7c:	20000078 	.word	0x20000078

0801cb80 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801cb80:	b538      	push	{r3, r4, r5, lr}
 801cb82:	4c15      	ldr	r4, [pc, #84]	; (801cbd8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801cb84:	4605      	mov	r5, r0
 801cb86:	7823      	ldrb	r3, [r4, #0]
 801cb88:	f3bf 8f5b 	dmb	ish
 801cb8c:	07da      	lsls	r2, r3, #31
 801cb8e:	d40b      	bmi.n	801cba8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801cb90:	4620      	mov	r0, r4
 801cb92:	f006 fc28 	bl	80233e6 <__cxa_guard_acquire>
 801cb96:	b138      	cbz	r0, 801cba8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801cb98:	4620      	mov	r0, r4
 801cb9a:	f006 fc30 	bl	80233fe <__cxa_guard_release>
 801cb9e:	4a0f      	ldr	r2, [pc, #60]	; (801cbdc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801cba0:	490f      	ldr	r1, [pc, #60]	; (801cbe0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801cba2:	4810      	ldr	r0, [pc, #64]	; (801cbe4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801cba4:	f006 fc15 	bl	80233d2 <__aeabi_atexit>
 801cba8:	4c0f      	ldr	r4, [pc, #60]	; (801cbe8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801cbaa:	7823      	ldrb	r3, [r4, #0]
 801cbac:	f3bf 8f5b 	dmb	ish
 801cbb0:	07db      	lsls	r3, r3, #31
 801cbb2:	d40b      	bmi.n	801cbcc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801cbb4:	4620      	mov	r0, r4
 801cbb6:	f006 fc16 	bl	80233e6 <__cxa_guard_acquire>
 801cbba:	b138      	cbz	r0, 801cbcc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801cbbc:	4620      	mov	r0, r4
 801cbbe:	f006 fc1e 	bl	80233fe <__cxa_guard_release>
 801cbc2:	4a06      	ldr	r2, [pc, #24]	; (801cbdc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801cbc4:	4909      	ldr	r1, [pc, #36]	; (801cbec <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801cbc6:	480a      	ldr	r0, [pc, #40]	; (801cbf0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801cbc8:	f006 fc03 	bl	80233d2 <__aeabi_atexit>
 801cbcc:	4b05      	ldr	r3, [pc, #20]	; (801cbe4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801cbce:	62ab      	str	r3, [r5, #40]	; 0x28
 801cbd0:	4b07      	ldr	r3, [pc, #28]	; (801cbf0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801cbd2:	62eb      	str	r3, [r5, #44]	; 0x2c
 801cbd4:	bd38      	pop	{r3, r4, r5, pc}
 801cbd6:	bf00      	nop
 801cbd8:	2000bbac 	.word	0x2000bbac
 801cbdc:	20000000 	.word	0x20000000
 801cbe0:	0801b53f 	.word	0x0801b53f
 801cbe4:	2000004c 	.word	0x2000004c
 801cbe8:	2000bbb0 	.word	0x2000bbb0
 801cbec:	0801b53d 	.word	0x0801b53d
 801cbf0:	20000050 	.word	0x20000050

0801cbf4 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801cbf4:	b510      	push	{r4, lr}
 801cbf6:	4604      	mov	r4, r0
 801cbf8:	f7ff ff88 	bl	801cb0c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801cbfc:	4620      	mov	r0, r4
 801cbfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cc02:	f7ff bfbd 	b.w	801cb80 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801cc08 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801cc08:	b538      	push	{r3, r4, r5, lr}
 801cc0a:	4c15      	ldr	r4, [pc, #84]	; (801cc60 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801cc0c:	4605      	mov	r5, r0
 801cc0e:	7823      	ldrb	r3, [r4, #0]
 801cc10:	f3bf 8f5b 	dmb	ish
 801cc14:	07da      	lsls	r2, r3, #31
 801cc16:	d40b      	bmi.n	801cc30 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801cc18:	4620      	mov	r0, r4
 801cc1a:	f006 fbe4 	bl	80233e6 <__cxa_guard_acquire>
 801cc1e:	b138      	cbz	r0, 801cc30 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801cc20:	4620      	mov	r0, r4
 801cc22:	f006 fbec 	bl	80233fe <__cxa_guard_release>
 801cc26:	4a0f      	ldr	r2, [pc, #60]	; (801cc64 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801cc28:	490f      	ldr	r1, [pc, #60]	; (801cc68 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801cc2a:	4810      	ldr	r0, [pc, #64]	; (801cc6c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801cc2c:	f006 fbd1 	bl	80233d2 <__aeabi_atexit>
 801cc30:	4c0f      	ldr	r4, [pc, #60]	; (801cc70 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801cc32:	7823      	ldrb	r3, [r4, #0]
 801cc34:	f3bf 8f5b 	dmb	ish
 801cc38:	07db      	lsls	r3, r3, #31
 801cc3a:	d40b      	bmi.n	801cc54 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801cc3c:	4620      	mov	r0, r4
 801cc3e:	f006 fbd2 	bl	80233e6 <__cxa_guard_acquire>
 801cc42:	b138      	cbz	r0, 801cc54 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801cc44:	4620      	mov	r0, r4
 801cc46:	f006 fbda 	bl	80233fe <__cxa_guard_release>
 801cc4a:	4a06      	ldr	r2, [pc, #24]	; (801cc64 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801cc4c:	4909      	ldr	r1, [pc, #36]	; (801cc74 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801cc4e:	480a      	ldr	r0, [pc, #40]	; (801cc78 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801cc50:	f006 fbbf 	bl	80233d2 <__aeabi_atexit>
 801cc54:	4b05      	ldr	r3, [pc, #20]	; (801cc6c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801cc56:	642b      	str	r3, [r5, #64]	; 0x40
 801cc58:	4b07      	ldr	r3, [pc, #28]	; (801cc78 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801cc5a:	646b      	str	r3, [r5, #68]	; 0x44
 801cc5c:	bd38      	pop	{r3, r4, r5, pc}
 801cc5e:	bf00      	nop
 801cc60:	2000bbdc 	.word	0x2000bbdc
 801cc64:	20000000 	.word	0x20000000
 801cc68:	0801b533 	.word	0x0801b533
 801cc6c:	2000007c 	.word	0x2000007c
 801cc70:	2000bbe0 	.word	0x2000bbe0
 801cc74:	0801b531 	.word	0x0801b531
 801cc78:	20000080 	.word	0x20000080

0801cc7c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801cc7c:	b538      	push	{r3, r4, r5, lr}
 801cc7e:	4c15      	ldr	r4, [pc, #84]	; (801ccd4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801cc80:	4605      	mov	r5, r0
 801cc82:	7823      	ldrb	r3, [r4, #0]
 801cc84:	f3bf 8f5b 	dmb	ish
 801cc88:	07da      	lsls	r2, r3, #31
 801cc8a:	d40b      	bmi.n	801cca4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801cc8c:	4620      	mov	r0, r4
 801cc8e:	f006 fbaa 	bl	80233e6 <__cxa_guard_acquire>
 801cc92:	b138      	cbz	r0, 801cca4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801cc94:	4620      	mov	r0, r4
 801cc96:	f006 fbb2 	bl	80233fe <__cxa_guard_release>
 801cc9a:	4a0f      	ldr	r2, [pc, #60]	; (801ccd8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801cc9c:	490f      	ldr	r1, [pc, #60]	; (801ccdc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801cc9e:	4810      	ldr	r0, [pc, #64]	; (801cce0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801cca0:	f006 fb97 	bl	80233d2 <__aeabi_atexit>
 801cca4:	4c0f      	ldr	r4, [pc, #60]	; (801cce4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801cca6:	7823      	ldrb	r3, [r4, #0]
 801cca8:	f3bf 8f5b 	dmb	ish
 801ccac:	07db      	lsls	r3, r3, #31
 801ccae:	d40b      	bmi.n	801ccc8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801ccb0:	4620      	mov	r0, r4
 801ccb2:	f006 fb98 	bl	80233e6 <__cxa_guard_acquire>
 801ccb6:	b138      	cbz	r0, 801ccc8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801ccb8:	4620      	mov	r0, r4
 801ccba:	f006 fba0 	bl	80233fe <__cxa_guard_release>
 801ccbe:	4a06      	ldr	r2, [pc, #24]	; (801ccd8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801ccc0:	4909      	ldr	r1, [pc, #36]	; (801cce8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801ccc2:	480a      	ldr	r0, [pc, #40]	; (801ccec <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801ccc4:	f006 fb85 	bl	80233d2 <__aeabi_atexit>
 801ccc8:	4b05      	ldr	r3, [pc, #20]	; (801cce0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801ccca:	63ab      	str	r3, [r5, #56]	; 0x38
 801cccc:	4b07      	ldr	r3, [pc, #28]	; (801ccec <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801ccce:	63eb      	str	r3, [r5, #60]	; 0x3c
 801ccd0:	bd38      	pop	{r3, r4, r5, pc}
 801ccd2:	bf00      	nop
 801ccd4:	2000bbbc 	.word	0x2000bbbc
 801ccd8:	20000000 	.word	0x20000000
 801ccdc:	0801b537 	.word	0x0801b537
 801cce0:	2000005c 	.word	0x2000005c
 801cce4:	2000bbc0 	.word	0x2000bbc0
 801cce8:	0801b535 	.word	0x0801b535
 801ccec:	20000060 	.word	0x20000060

0801ccf0 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801ccf0:	b510      	push	{r4, lr}
 801ccf2:	4604      	mov	r4, r0
 801ccf4:	f7ff ff88 	bl	801cc08 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801ccf8:	4620      	mov	r0, r4
 801ccfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ccfe:	f7ff bfbd 	b.w	801cc7c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801cd04 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801cd04:	b538      	push	{r3, r4, r5, lr}
 801cd06:	4c15      	ldr	r4, [pc, #84]	; (801cd5c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801cd08:	4605      	mov	r5, r0
 801cd0a:	7823      	ldrb	r3, [r4, #0]
 801cd0c:	f3bf 8f5b 	dmb	ish
 801cd10:	07da      	lsls	r2, r3, #31
 801cd12:	d40b      	bmi.n	801cd2c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801cd14:	4620      	mov	r0, r4
 801cd16:	f006 fb66 	bl	80233e6 <__cxa_guard_acquire>
 801cd1a:	b138      	cbz	r0, 801cd2c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801cd1c:	4620      	mov	r0, r4
 801cd1e:	f006 fb6e 	bl	80233fe <__cxa_guard_release>
 801cd22:	4a0f      	ldr	r2, [pc, #60]	; (801cd60 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801cd24:	490f      	ldr	r1, [pc, #60]	; (801cd64 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801cd26:	4810      	ldr	r0, [pc, #64]	; (801cd68 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801cd28:	f006 fb53 	bl	80233d2 <__aeabi_atexit>
 801cd2c:	4c0f      	ldr	r4, [pc, #60]	; (801cd6c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801cd2e:	7823      	ldrb	r3, [r4, #0]
 801cd30:	f3bf 8f5b 	dmb	ish
 801cd34:	07db      	lsls	r3, r3, #31
 801cd36:	d40b      	bmi.n	801cd50 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801cd38:	4620      	mov	r0, r4
 801cd3a:	f006 fb54 	bl	80233e6 <__cxa_guard_acquire>
 801cd3e:	b138      	cbz	r0, 801cd50 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801cd40:	4620      	mov	r0, r4
 801cd42:	f006 fb5c 	bl	80233fe <__cxa_guard_release>
 801cd46:	4a06      	ldr	r2, [pc, #24]	; (801cd60 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801cd48:	4909      	ldr	r1, [pc, #36]	; (801cd70 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801cd4a:	480a      	ldr	r0, [pc, #40]	; (801cd74 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801cd4c:	f006 fb41 	bl	80233d2 <__aeabi_atexit>
 801cd50:	4b05      	ldr	r3, [pc, #20]	; (801cd68 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801cd52:	652b      	str	r3, [r5, #80]	; 0x50
 801cd54:	4b07      	ldr	r3, [pc, #28]	; (801cd74 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801cd56:	656b      	str	r3, [r5, #84]	; 0x54
 801cd58:	bd38      	pop	{r3, r4, r5, pc}
 801cd5a:	bf00      	nop
 801cd5c:	2000bbb4 	.word	0x2000bbb4
 801cd60:	20000000 	.word	0x20000000
 801cd64:	0801b52b 	.word	0x0801b52b
 801cd68:	20000054 	.word	0x20000054
 801cd6c:	2000bbb8 	.word	0x2000bbb8
 801cd70:	0801b529 	.word	0x0801b529
 801cd74:	20000058 	.word	0x20000058

0801cd78 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801cd78:	b538      	push	{r3, r4, r5, lr}
 801cd7a:	4c15      	ldr	r4, [pc, #84]	; (801cdd0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801cd7c:	4605      	mov	r5, r0
 801cd7e:	7823      	ldrb	r3, [r4, #0]
 801cd80:	f3bf 8f5b 	dmb	ish
 801cd84:	07da      	lsls	r2, r3, #31
 801cd86:	d40b      	bmi.n	801cda0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801cd88:	4620      	mov	r0, r4
 801cd8a:	f006 fb2c 	bl	80233e6 <__cxa_guard_acquire>
 801cd8e:	b138      	cbz	r0, 801cda0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801cd90:	4620      	mov	r0, r4
 801cd92:	f006 fb34 	bl	80233fe <__cxa_guard_release>
 801cd96:	4a0f      	ldr	r2, [pc, #60]	; (801cdd4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801cd98:	490f      	ldr	r1, [pc, #60]	; (801cdd8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801cd9a:	4810      	ldr	r0, [pc, #64]	; (801cddc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801cd9c:	f006 fb19 	bl	80233d2 <__aeabi_atexit>
 801cda0:	4c0f      	ldr	r4, [pc, #60]	; (801cde0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801cda2:	7823      	ldrb	r3, [r4, #0]
 801cda4:	f3bf 8f5b 	dmb	ish
 801cda8:	07db      	lsls	r3, r3, #31
 801cdaa:	d40b      	bmi.n	801cdc4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801cdac:	4620      	mov	r0, r4
 801cdae:	f006 fb1a 	bl	80233e6 <__cxa_guard_acquire>
 801cdb2:	b138      	cbz	r0, 801cdc4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801cdb4:	4620      	mov	r0, r4
 801cdb6:	f006 fb22 	bl	80233fe <__cxa_guard_release>
 801cdba:	4a06      	ldr	r2, [pc, #24]	; (801cdd4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801cdbc:	4909      	ldr	r1, [pc, #36]	; (801cde4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801cdbe:	480a      	ldr	r0, [pc, #40]	; (801cde8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801cdc0:	f006 fb07 	bl	80233d2 <__aeabi_atexit>
 801cdc4:	4b05      	ldr	r3, [pc, #20]	; (801cddc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801cdc6:	64ab      	str	r3, [r5, #72]	; 0x48
 801cdc8:	4b07      	ldr	r3, [pc, #28]	; (801cde8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801cdca:	64eb      	str	r3, [r5, #76]	; 0x4c
 801cdcc:	bd38      	pop	{r3, r4, r5, pc}
 801cdce:	bf00      	nop
 801cdd0:	2000bba4 	.word	0x2000bba4
 801cdd4:	20000000 	.word	0x20000000
 801cdd8:	0801b52f 	.word	0x0801b52f
 801cddc:	20000044 	.word	0x20000044
 801cde0:	2000bba8 	.word	0x2000bba8
 801cde4:	0801b52d 	.word	0x0801b52d
 801cde8:	20000048 	.word	0x20000048

0801cdec <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801cdec:	b510      	push	{r4, lr}
 801cdee:	4604      	mov	r4, r0
 801cdf0:	f7ff ff88 	bl	801cd04 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801cdf4:	4620      	mov	r0, r4
 801cdf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cdfa:	f7ff bfbd 	b.w	801cd78 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801cdfe <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801cdfe:	b510      	push	{r4, lr}
 801ce00:	4604      	mov	r4, r0
 801ce02:	f7ff fff3 	bl	801cdec <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801ce06:	4620      	mov	r0, r4
 801ce08:	f7ff ff72 	bl	801ccf0 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801ce0c:	4620      	mov	r0, r4
 801ce0e:	f7ff fe73 	bl	801caf8 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801ce12:	4620      	mov	r0, r4
 801ce14:	f7ff fdf2 	bl	801c9fc <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801ce18:	4620      	mov	r0, r4
 801ce1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ce1e:	f7ff bee9 	b.w	801cbf4 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

0801ce24 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801ce24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce28:	b087      	sub	sp, #28
 801ce2a:	7888      	ldrb	r0, [r1, #2]
 801ce2c:	4616      	mov	r6, r2
 801ce2e:	9001      	str	r0, [sp, #4]
 801ce30:	7848      	ldrb	r0, [r1, #1]
 801ce32:	9100      	str	r1, [sp, #0]
 801ce34:	9002      	str	r0, [sp, #8]
 801ce36:	7808      	ldrb	r0, [r1, #0]
 801ce38:	9901      	ldr	r1, [sp, #4]
 801ce3a:	9003      	str	r0, [sp, #12]
 801ce3c:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801ce40:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 801ce44:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 801ce48:	9902      	ldr	r1, [sp, #8]
 801ce4a:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 801ce4e:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 801ce52:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 801ce56:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801ce5a:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 801ce5e:	9005      	str	r0, [sp, #20]
 801ce60:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 801ce64:	fb05 ca0e 	mla	sl, r5, lr, ip
 801ce68:	2d00      	cmp	r5, #0
 801ce6a:	eb06 080a 	add.w	r8, r6, sl
 801ce6e:	db4a      	blt.n	801cf06 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 801ce70:	45a9      	cmp	r9, r5
 801ce72:	dd48      	ble.n	801cf06 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 801ce74:	f1bc 0f00 	cmp.w	ip, #0
 801ce78:	db43      	blt.n	801cf02 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 801ce7a:	45e6      	cmp	lr, ip
 801ce7c:	dd41      	ble.n	801cf02 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 801ce7e:	f816 600a 	ldrb.w	r6, [r6, sl]
 801ce82:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ce86:	441e      	add	r6, r3
 801ce88:	f11c 0001 	adds.w	r0, ip, #1
 801ce8c:	d43e      	bmi.n	801cf0c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801ce8e:	4586      	cmp	lr, r0
 801ce90:	dd3c      	ble.n	801cf0c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801ce92:	2a00      	cmp	r2, #0
 801ce94:	d03a      	beq.n	801cf0c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801ce96:	f898 0001 	ldrb.w	r0, [r8, #1]
 801ce9a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ce9e:	4418      	add	r0, r3
 801cea0:	3501      	adds	r5, #1
 801cea2:	d437      	bmi.n	801cf14 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801cea4:	45a9      	cmp	r9, r5
 801cea6:	dd35      	ble.n	801cf14 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801cea8:	b3a4      	cbz	r4, 801cf14 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801ceaa:	f1bc 0f00 	cmp.w	ip, #0
 801ceae:	db2f      	blt.n	801cf10 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 801ceb0:	45e6      	cmp	lr, ip
 801ceb2:	dd2d      	ble.n	801cf10 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 801ceb4:	f818 500e 	ldrb.w	r5, [r8, lr]
 801ceb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cebc:	441d      	add	r5, r3
 801cebe:	f11c 0c01 	adds.w	ip, ip, #1
 801cec2:	d42a      	bmi.n	801cf1a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801cec4:	45e6      	cmp	lr, ip
 801cec6:	dd28      	ble.n	801cf1a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801cec8:	b33a      	cbz	r2, 801cf1a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801ceca:	44c6      	add	lr, r8
 801cecc:	f89e c001 	ldrb.w	ip, [lr, #1]
 801ced0:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801ced4:	4463      	add	r3, ip
 801ced6:	ea6f 0c07 	mvn.w	ip, r7
 801ceda:	2a0f      	cmp	r2, #15
 801cedc:	f896 a000 	ldrb.w	sl, [r6]
 801cee0:	fa5f fc8c 	uxtb.w	ip, ip
 801cee4:	f890 b000 	ldrb.w	fp, [r0]
 801cee8:	f895 9000 	ldrb.w	r9, [r5]
 801ceec:	7819      	ldrb	r1, [r3, #0]
 801ceee:	d801      	bhi.n	801cef4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xd0>
 801cef0:	2c0f      	cmp	r4, #15
 801cef2:	d914      	bls.n	801cf1e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xfa>
 801cef4:	4b40      	ldr	r3, [pc, #256]	; (801cff8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 801cef6:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801cefa:	4a40      	ldr	r2, [pc, #256]	; (801cffc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 801cefc:	4840      	ldr	r0, [pc, #256]	; (801d000 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1dc>)
 801cefe:	f006 fa9b 	bl	8023438 <__assert_func>
 801cf02:	ae05      	add	r6, sp, #20
 801cf04:	e7c0      	b.n	801ce88 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x64>
 801cf06:	a805      	add	r0, sp, #20
 801cf08:	4606      	mov	r6, r0
 801cf0a:	e7c9      	b.n	801cea0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 801cf0c:	a805      	add	r0, sp, #20
 801cf0e:	e7c7      	b.n	801cea0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 801cf10:	ad05      	add	r5, sp, #20
 801cf12:	e7d4      	b.n	801cebe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x9a>
 801cf14:	ab05      	add	r3, sp, #20
 801cf16:	461d      	mov	r5, r3
 801cf18:	e7dd      	b.n	801ced6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 801cf1a:	ab05      	add	r3, sp, #20
 801cf1c:	e7db      	b.n	801ced6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 801cf1e:	b292      	uxth	r2, r2
 801cf20:	b2a4      	uxth	r4, r4
 801cf22:	fa1f fc8c 	uxth.w	ip, ip
 801cf26:	fb02 f804 	mul.w	r8, r2, r4
 801cf2a:	0112      	lsls	r2, r2, #4
 801cf2c:	b2bf      	uxth	r7, r7
 801cf2e:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 801cf32:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 801cf36:	eba2 0208 	sub.w	r2, r2, r8
 801cf3a:	b2a4      	uxth	r4, r4
 801cf3c:	b292      	uxth	r2, r2
 801cf3e:	ebae 0e04 	sub.w	lr, lr, r4
 801cf42:	fb02 fb0b 	mul.w	fp, r2, fp
 801cf46:	fa1f fe8e 	uxth.w	lr, lr
 801cf4a:	fb0e ba0a 	mla	sl, lr, sl, fp
 801cf4e:	fb04 aa09 	mla	sl, r4, r9, sl
 801cf52:	fb08 aa01 	mla	sl, r8, r1, sl
 801cf56:	9903      	ldr	r1, [sp, #12]
 801cf58:	fb11 f90c 	smulbb	r9, r1, ip
 801cf5c:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801cf60:	9900      	ldr	r1, [sp, #0]
 801cf62:	fb0a 9a07 	mla	sl, sl, r7, r9
 801cf66:	fa1f fa8a 	uxth.w	sl, sl
 801cf6a:	f10a 0901 	add.w	r9, sl, #1
 801cf6e:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 801cf72:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801cf76:	f881 a000 	strb.w	sl, [r1]
 801cf7a:	f890 a001 	ldrb.w	sl, [r0, #1]
 801cf7e:	f896 9001 	ldrb.w	r9, [r6, #1]
 801cf82:	fb02 fa0a 	mul.w	sl, r2, sl
 801cf86:	9902      	ldr	r1, [sp, #8]
 801cf88:	fb0e aa09 	mla	sl, lr, r9, sl
 801cf8c:	f895 9001 	ldrb.w	r9, [r5, #1]
 801cf90:	fb04 aa09 	mla	sl, r4, r9, sl
 801cf94:	f893 9001 	ldrb.w	r9, [r3, #1]
 801cf98:	fb08 a909 	mla	r9, r8, r9, sl
 801cf9c:	fb11 fa0c 	smulbb	sl, r1, ip
 801cfa0:	9900      	ldr	r1, [sp, #0]
 801cfa2:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801cfa6:	fb09 a907 	mla	r9, r9, r7, sl
 801cfaa:	fa1f f989 	uxth.w	r9, r9
 801cfae:	f109 0a01 	add.w	sl, r9, #1
 801cfb2:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801cfb6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cfba:	f881 9001 	strb.w	r9, [r1, #1]
 801cfbe:	7880      	ldrb	r0, [r0, #2]
 801cfc0:	78b6      	ldrb	r6, [r6, #2]
 801cfc2:	4342      	muls	r2, r0
 801cfc4:	78a8      	ldrb	r0, [r5, #2]
 801cfc6:	789b      	ldrb	r3, [r3, #2]
 801cfc8:	fb0e 2206 	mla	r2, lr, r6, r2
 801cfcc:	fb04 2400 	mla	r4, r4, r0, r2
 801cfd0:	fb08 4803 	mla	r8, r8, r3, r4
 801cfd4:	9b01      	ldr	r3, [sp, #4]
 801cfd6:	fb13 fc0c 	smulbb	ip, r3, ip
 801cfda:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801cfde:	fb08 c707 	mla	r7, r8, r7, ip
 801cfe2:	b2bf      	uxth	r7, r7
 801cfe4:	f107 0c01 	add.w	ip, r7, #1
 801cfe8:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801cfec:	123f      	asrs	r7, r7, #8
 801cfee:	708f      	strb	r7, [r1, #2]
 801cff0:	b007      	add	sp, #28
 801cff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cff6:	bf00      	nop
 801cff8:	08027bdb 	.word	0x08027bdb
 801cffc:	080280d2 	.word	0x080280d2
 801d000:	08027ca4 	.word	0x08027ca4

0801d004 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801d004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d008:	ed2d 8b08 	vpush	{d8-d11}
 801d00c:	b095      	sub	sp, #84	; 0x54
 801d00e:	eeb0 aa40 	vmov.f32	s20, s0
 801d012:	eef0 9a60 	vmov.f32	s19, s1
 801d016:	930a      	str	r3, [sp, #40]	; 0x28
 801d018:	eeb0 9a41 	vmov.f32	s18, s2
 801d01c:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 801d020:	eeb0 8a62 	vmov.f32	s16, s5
 801d024:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 801d026:	eef0 8a43 	vmov.f32	s17, s6
 801d02a:	930c      	str	r3, [sp, #48]	; 0x30
 801d02c:	eef0 ba44 	vmov.f32	s23, s8
 801d030:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801d034:	eeb0 ba64 	vmov.f32	s22, s9
 801d038:	9013      	str	r0, [sp, #76]	; 0x4c
 801d03a:	eef0 aa45 	vmov.f32	s21, s10
 801d03e:	9310      	str	r3, [sp, #64]	; 0x40
 801d040:	6860      	ldr	r0, [r4, #4]
 801d042:	910f      	str	r1, [sp, #60]	; 0x3c
 801d044:	9212      	str	r2, [sp, #72]	; 0x48
 801d046:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801d048:	f9bd 50b8 	ldrsh.w	r5, [sp, #184]	; 0xb8
 801d04c:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801d050:	fb00 1303 	mla	r3, r0, r3, r1
 801d054:	6821      	ldr	r1, [r4, #0]
 801d056:	6854      	ldr	r4, [r2, #4]
 801d058:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d05c:	18cb      	adds	r3, r1, r3
 801d05e:	930b      	str	r3, [sp, #44]	; 0x2c
 801d060:	6813      	ldr	r3, [r2, #0]
 801d062:	930e      	str	r3, [sp, #56]	; 0x38
 801d064:	1d23      	adds	r3, r4, #4
 801d066:	9309      	str	r3, [sp, #36]	; 0x24
 801d068:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d06a:	43db      	mvns	r3, r3
 801d06c:	b2db      	uxtb	r3, r3
 801d06e:	930d      	str	r3, [sp, #52]	; 0x34
 801d070:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d072:	2b00      	cmp	r3, #0
 801d074:	dc03      	bgt.n	801d07e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801d076:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801d078:	2b00      	cmp	r3, #0
 801d07a:	f340 823c 	ble.w	801d4f6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 801d07e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d080:	2b00      	cmp	r3, #0
 801d082:	f340 8115 	ble.w	801d2b0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 801d086:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801d088:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d08a:	1412      	asrs	r2, r2, #16
 801d08c:	ea4f 4323 	mov.w	r3, r3, asr #16
 801d090:	d431      	bmi.n	801d0f6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801d092:	1c51      	adds	r1, r2, #1
 801d094:	428d      	cmp	r5, r1
 801d096:	dd31      	ble.n	801d0fc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801d098:	2b00      	cmp	r3, #0
 801d09a:	db2f      	blt.n	801d0fc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801d09c:	1c59      	adds	r1, r3, #1
 801d09e:	980c      	ldr	r0, [sp, #48]	; 0x30
 801d0a0:	4288      	cmp	r0, r1
 801d0a2:	dd2b      	ble.n	801d0fc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801d0a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d0a6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801d0a8:	3b01      	subs	r3, #1
 801d0aa:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801d0ac:	fb02 1203 	mla	r2, r2, r3, r1
 801d0b0:	1412      	asrs	r2, r2, #16
 801d0b2:	d42d      	bmi.n	801d110 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801d0b4:	3201      	adds	r2, #1
 801d0b6:	4295      	cmp	r5, r2
 801d0b8:	dd2a      	ble.n	801d110 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801d0ba:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801d0bc:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801d0be:	fb02 1303 	mla	r3, r2, r3, r1
 801d0c2:	141b      	asrs	r3, r3, #16
 801d0c4:	d424      	bmi.n	801d110 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801d0c6:	3301      	adds	r3, #1
 801d0c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d0ca:	429a      	cmp	r2, r3
 801d0cc:	dd20      	ble.n	801d110 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801d0ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d0d0:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 801d0d4:	f103 0c03 	add.w	ip, r3, #3
 801d0d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d0da:	9311      	str	r3, [sp, #68]	; 0x44
 801d0dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d0de:	2b00      	cmp	r3, #0
 801d0e0:	f300 814f 	bgt.w	801d382 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37e>
 801d0e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d0e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d0e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d0ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d0f0:	441a      	add	r2, r3
 801d0f2:	920b      	str	r2, [sp, #44]	; 0x2c
 801d0f4:	e0de      	b.n	801d2b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801d0f6:	1c51      	adds	r1, r2, #1
 801d0f8:	f040 80cb 	bne.w	801d292 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801d0fc:	42aa      	cmp	r2, r5
 801d0fe:	f280 80c8 	bge.w	801d292 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801d102:	1c5f      	adds	r7, r3, #1
 801d104:	f2c0 80c5 	blt.w	801d292 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801d108:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d10a:	4293      	cmp	r3, r2
 801d10c:	f280 80c1 	bge.w	801d292 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801d110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d112:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801d114:	9311      	str	r3, [sp, #68]	; 0x44
 801d116:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d118:	2b00      	cmp	r3, #0
 801d11a:	dde3      	ble.n	801d0e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 801d11c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d11e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801d120:	141a      	asrs	r2, r3, #16
 801d122:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801d124:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801d126:	1400      	asrs	r0, r0, #16
 801d128:	f3c1 3103 	ubfx	r1, r1, #12, #4
 801d12c:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801d130:	f100 810e 	bmi.w	801d350 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801d134:	1c46      	adds	r6, r0, #1
 801d136:	42b5      	cmp	r5, r6
 801d138:	f340 810c 	ble.w	801d354 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801d13c:	2a00      	cmp	r2, #0
 801d13e:	f2c0 8109 	blt.w	801d354 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801d142:	1c56      	adds	r6, r2, #1
 801d144:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801d146:	42b4      	cmp	r4, r6
 801d148:	f340 8104 	ble.w	801d354 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801d14c:	fb02 0005 	mla	r0, r2, r5, r0
 801d150:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801d152:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d154:	f814 e000 	ldrb.w	lr, [r4, r0]
 801d158:	4402      	add	r2, r0
 801d15a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d15c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801d160:	eb00 080e 	add.w	r8, r0, lr
 801d164:	2b00      	cmp	r3, #0
 801d166:	f000 80e4 	beq.w	801d332 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x32e>
 801d16a:	f892 c001 	ldrb.w	ip, [r2, #1]
 801d16e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801d172:	4484      	add	ip, r0
 801d174:	2900      	cmp	r1, #0
 801d176:	f000 80e5 	beq.w	801d344 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x340>
 801d17a:	1950      	adds	r0, r2, r5
 801d17c:	5d52      	ldrb	r2, [r2, r5]
 801d17e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801d180:	7840      	ldrb	r0, [r0, #1]
 801d182:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d186:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d18a:	4422      	add	r2, r4
 801d18c:	4420      	add	r0, r4
 801d18e:	b29b      	uxth	r3, r3
 801d190:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801d192:	b289      	uxth	r1, r1
 801d194:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
 801d198:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801d19c:	fb03 fa01 	mul.w	sl, r3, r1
 801d1a0:	011b      	lsls	r3, r3, #4
 801d1a2:	f89c e000 	ldrb.w	lr, [ip]
 801d1a6:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 801d1aa:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 801d1ae:	eba3 030a 	sub.w	r3, r3, sl
 801d1b2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801d1b4:	b289      	uxth	r1, r1
 801d1b6:	b29b      	uxth	r3, r3
 801d1b8:	eba9 0901 	sub.w	r9, r9, r1
 801d1bc:	fb03 fe0e 	mul.w	lr, r3, lr
 801d1c0:	fa1f f989 	uxth.w	r9, r9
 801d1c4:	fb09 ee0b 	mla	lr, r9, fp, lr
 801d1c8:	f892 b000 	ldrb.w	fp, [r2]
 801d1cc:	fb01 ee0b 	mla	lr, r1, fp, lr
 801d1d0:	f890 b000 	ldrb.w	fp, [r0]
 801d1d4:	fb0a ee0b 	mla	lr, sl, fp, lr
 801d1d8:	f897 b000 	ldrb.w	fp, [r7]
 801d1dc:	fb1b fb04 	smulbb	fp, fp, r4
 801d1e0:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801d1e4:	fb0e be06 	mla	lr, lr, r6, fp
 801d1e8:	fa1f fe8e 	uxth.w	lr, lr
 801d1ec:	f10e 0b01 	add.w	fp, lr, #1
 801d1f0:	eb0b 2b1e 	add.w	fp, fp, lr, lsr #8
 801d1f4:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 801d1f8:	f887 b000 	strb.w	fp, [r7]
 801d1fc:	f89c e001 	ldrb.w	lr, [ip, #1]
 801d200:	f898 b001 	ldrb.w	fp, [r8, #1]
 801d204:	fb03 fe0e 	mul.w	lr, r3, lr
 801d208:	fb09 ee0b 	mla	lr, r9, fp, lr
 801d20c:	f892 b001 	ldrb.w	fp, [r2, #1]
 801d210:	fb01 ee0b 	mla	lr, r1, fp, lr
 801d214:	f890 b001 	ldrb.w	fp, [r0, #1]
 801d218:	fb0a ee0b 	mla	lr, sl, fp, lr
 801d21c:	f897 b001 	ldrb.w	fp, [r7, #1]
 801d220:	fb1b fb04 	smulbb	fp, fp, r4
 801d224:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801d228:	fb0e be06 	mla	lr, lr, r6, fp
 801d22c:	fa1f fe8e 	uxth.w	lr, lr
 801d230:	f10e 0b01 	add.w	fp, lr, #1
 801d234:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801d238:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d23c:	f887 e001 	strb.w	lr, [r7, #1]
 801d240:	f89c c002 	ldrb.w	ip, [ip, #2]
 801d244:	f898 e002 	ldrb.w	lr, [r8, #2]
 801d248:	fb03 f30c 	mul.w	r3, r3, ip
 801d24c:	fb09 330e 	mla	r3, r9, lr, r3
 801d250:	f892 e002 	ldrb.w	lr, [r2, #2]
 801d254:	7882      	ldrb	r2, [r0, #2]
 801d256:	fb01 310e 	mla	r1, r1, lr, r3
 801d25a:	fb0a 1a02 	mla	sl, sl, r2, r1
 801d25e:	78b9      	ldrb	r1, [r7, #2]
 801d260:	fb11 f104 	smulbb	r1, r1, r4
 801d264:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801d268:	fb0a 1606 	mla	r6, sl, r6, r1
 801d26c:	b2b6      	uxth	r6, r6
 801d26e:	1c73      	adds	r3, r6, #1
 801d270:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801d274:	1236      	asrs	r6, r6, #8
 801d276:	70be      	strb	r6, [r7, #2]
 801d278:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801d27a:	3703      	adds	r7, #3
 801d27c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801d27e:	4413      	add	r3, r2
 801d280:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801d282:	9327      	str	r3, [sp, #156]	; 0x9c
 801d284:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d286:	4413      	add	r3, r2
 801d288:	9328      	str	r3, [sp, #160]	; 0xa0
 801d28a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d28c:	3b01      	subs	r3, #1
 801d28e:	9311      	str	r3, [sp, #68]	; 0x44
 801d290:	e741      	b.n	801d116 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x112>
 801d292:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801d294:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801d296:	4413      	add	r3, r2
 801d298:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801d29a:	9327      	str	r3, [sp, #156]	; 0x9c
 801d29c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d29e:	4413      	add	r3, r2
 801d2a0:	9328      	str	r3, [sp, #160]	; 0xa0
 801d2a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d2a4:	3b01      	subs	r3, #1
 801d2a6:	930a      	str	r3, [sp, #40]	; 0x28
 801d2a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d2aa:	3303      	adds	r3, #3
 801d2ac:	930b      	str	r3, [sp, #44]	; 0x2c
 801d2ae:	e6e6      	b.n	801d07e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801d2b0:	f47f aef8 	bne.w	801d0a4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801d2b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d2b6:	2b00      	cmp	r3, #0
 801d2b8:	f340 811d 	ble.w	801d4f6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 801d2bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d2c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801d2c2:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801d2c6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801d2ca:	eef0 6a48 	vmov.f32	s13, s16
 801d2ce:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801d2d2:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801d2d6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d2da:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 801d2de:	eef0 6a68 	vmov.f32	s13, s17
 801d2e2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d2e6:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 801d2ea:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801d2ee:	ee69 7a27 	vmul.f32	s15, s18, s15
 801d2f2:	ee37 8a48 	vsub.f32	s16, s14, s16
 801d2f6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801d2fa:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801d2fe:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801d302:	ee18 2a10 	vmov	r2, s16
 801d306:	eeb0 8a47 	vmov.f32	s16, s14
 801d30a:	fb92 f3f3 	sdiv	r3, r2, r3
 801d30e:	ee18 2a90 	vmov	r2, s17
 801d312:	9329      	str	r3, [sp, #164]	; 0xa4
 801d314:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801d316:	eef0 8a67 	vmov.f32	s17, s15
 801d31a:	fb92 f3f3 	sdiv	r3, r2, r3
 801d31e:	932a      	str	r3, [sp, #168]	; 0xa8
 801d320:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d322:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d324:	3b01      	subs	r3, #1
 801d326:	930f      	str	r3, [sp, #60]	; 0x3c
 801d328:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801d32a:	bf08      	it	eq
 801d32c:	4613      	moveq	r3, r2
 801d32e:	930a      	str	r3, [sp, #40]	; 0x28
 801d330:	e69e      	b.n	801d070 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801d332:	b151      	cbz	r1, 801d34a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 801d334:	5d52      	ldrb	r2, [r2, r5]
 801d336:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d338:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d33c:	4402      	add	r2, r0
 801d33e:	4640      	mov	r0, r8
 801d340:	46c4      	mov	ip, r8
 801d342:	e724      	b.n	801d18e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 801d344:	4640      	mov	r0, r8
 801d346:	4642      	mov	r2, r8
 801d348:	e721      	b.n	801d18e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 801d34a:	4640      	mov	r0, r8
 801d34c:	4642      	mov	r2, r8
 801d34e:	e7f7      	b.n	801d340 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33c>
 801d350:	1c46      	adds	r6, r0, #1
 801d352:	d191      	bne.n	801d278 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801d354:	4285      	cmp	r5, r0
 801d356:	dd8f      	ble.n	801d278 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801d358:	1c54      	adds	r4, r2, #1
 801d35a:	db8d      	blt.n	801d278 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801d35c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801d35e:	4294      	cmp	r4, r2
 801d360:	dd8a      	ble.n	801d278 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801d362:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801d364:	9002      	str	r0, [sp, #8]
 801d366:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801d368:	e9cd 2303 	strd	r2, r3, [sp, #12]
 801d36c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d36e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d370:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801d374:	e9cd 5300 	strd	r5, r3, [sp]
 801d378:	4639      	mov	r1, r7
 801d37a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d37c:	f7ff fd52 	bl	801ce24 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801d380:	e77a      	b.n	801d278 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801d382:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801d384:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801d386:	1410      	asrs	r0, r2, #16
 801d388:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801d38c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801d38e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801d390:	1412      	asrs	r2, r2, #16
 801d392:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801d396:	fb05 2000 	mla	r0, r5, r0, r2
 801d39a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d39c:	f814 8000 	ldrb.w	r8, [r4, r0]
 801d3a0:	4402      	add	r2, r0
 801d3a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d3a4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801d3a8:	eb00 0708 	add.w	r7, r0, r8
 801d3ac:	2b00      	cmp	r3, #0
 801d3ae:	f000 8093 	beq.w	801d4d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 801d3b2:	7856      	ldrb	r6, [r2, #1]
 801d3b4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d3b8:	4406      	add	r6, r0
 801d3ba:	2900      	cmp	r1, #0
 801d3bc:	f000 8095 	beq.w	801d4ea <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 801d3c0:	1950      	adds	r0, r2, r5
 801d3c2:	5d52      	ldrb	r2, [r2, r5]
 801d3c4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801d3c6:	7840      	ldrb	r0, [r0, #1]
 801d3c8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d3cc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d3d0:	4422      	add	r2, r4
 801d3d2:	4420      	add	r0, r4
 801d3d4:	b29b      	uxth	r3, r3
 801d3d6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801d3d8:	b289      	uxth	r1, r1
 801d3da:	f10c 0c03 	add.w	ip, ip, #3
 801d3de:	f814 b008 	ldrb.w	fp, [r4, r8]
 801d3e2:	fb03 f901 	mul.w	r9, r3, r1
 801d3e6:	011b      	lsls	r3, r3, #4
 801d3e8:	f896 8000 	ldrb.w	r8, [r6]
 801d3ec:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801d3f0:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801d3f4:	eba3 0309 	sub.w	r3, r3, r9
 801d3f8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801d3fa:	b289      	uxth	r1, r1
 801d3fc:	b29b      	uxth	r3, r3
 801d3fe:	ebae 0e01 	sub.w	lr, lr, r1
 801d402:	fb03 f808 	mul.w	r8, r3, r8
 801d406:	fa1f fe8e 	uxth.w	lr, lr
 801d40a:	fb0e 880b 	mla	r8, lr, fp, r8
 801d40e:	f892 b000 	ldrb.w	fp, [r2]
 801d412:	fb01 880b 	mla	r8, r1, fp, r8
 801d416:	f890 b000 	ldrb.w	fp, [r0]
 801d41a:	fb09 880b 	mla	r8, r9, fp, r8
 801d41e:	f81c bc06 	ldrb.w	fp, [ip, #-6]
 801d422:	fb1b fb04 	smulbb	fp, fp, r4
 801d426:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801d42a:	fb08 b80a 	mla	r8, r8, sl, fp
 801d42e:	fa1f f888 	uxth.w	r8, r8
 801d432:	f108 0b01 	add.w	fp, r8, #1
 801d436:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801d43a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d43e:	f80c 8c06 	strb.w	r8, [ip, #-6]
 801d442:	f896 8001 	ldrb.w	r8, [r6, #1]
 801d446:	f897 b001 	ldrb.w	fp, [r7, #1]
 801d44a:	fb03 f808 	mul.w	r8, r3, r8
 801d44e:	fb0e 880b 	mla	r8, lr, fp, r8
 801d452:	f892 b001 	ldrb.w	fp, [r2, #1]
 801d456:	fb01 880b 	mla	r8, r1, fp, r8
 801d45a:	f890 b001 	ldrb.w	fp, [r0, #1]
 801d45e:	fb09 880b 	mla	r8, r9, fp, r8
 801d462:	f81c bc05 	ldrb.w	fp, [ip, #-5]
 801d466:	fb1b fb04 	smulbb	fp, fp, r4
 801d46a:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801d46e:	fb08 b80a 	mla	r8, r8, sl, fp
 801d472:	fa1f f888 	uxth.w	r8, r8
 801d476:	f108 0b01 	add.w	fp, r8, #1
 801d47a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801d47e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d482:	f80c 8c05 	strb.w	r8, [ip, #-5]
 801d486:	78b6      	ldrb	r6, [r6, #2]
 801d488:	78bf      	ldrb	r7, [r7, #2]
 801d48a:	4373      	muls	r3, r6
 801d48c:	7896      	ldrb	r6, [r2, #2]
 801d48e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801d490:	fb0e 3307 	mla	r3, lr, r7, r3
 801d494:	fb01 3306 	mla	r3, r1, r6, r3
 801d498:	7886      	ldrb	r6, [r0, #2]
 801d49a:	fb09 3906 	mla	r9, r9, r6, r3
 801d49e:	f81c 3c04 	ldrb.w	r3, [ip, #-4]
 801d4a2:	fb13 f304 	smulbb	r3, r3, r4
 801d4a6:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801d4aa:	fb09 390a 	mla	r9, r9, sl, r3
 801d4ae:	fa1f f989 	uxth.w	r9, r9
 801d4b2:	f109 0301 	add.w	r3, r9, #1
 801d4b6:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801d4ba:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801d4bc:	4413      	add	r3, r2
 801d4be:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801d4c0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d4c4:	9327      	str	r3, [sp, #156]	; 0x9c
 801d4c6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d4c8:	f80c 9c04 	strb.w	r9, [ip, #-4]
 801d4cc:	4413      	add	r3, r2
 801d4ce:	9328      	str	r3, [sp, #160]	; 0xa0
 801d4d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d4d2:	3b01      	subs	r3, #1
 801d4d4:	9311      	str	r3, [sp, #68]	; 0x44
 801d4d6:	e601      	b.n	801d0dc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801d4d8:	b151      	cbz	r1, 801d4f0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>
 801d4da:	5d52      	ldrb	r2, [r2, r5]
 801d4dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d4de:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d4e2:	4402      	add	r2, r0
 801d4e4:	4638      	mov	r0, r7
 801d4e6:	463e      	mov	r6, r7
 801d4e8:	e774      	b.n	801d3d4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 801d4ea:	4638      	mov	r0, r7
 801d4ec:	463a      	mov	r2, r7
 801d4ee:	e771      	b.n	801d3d4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 801d4f0:	4638      	mov	r0, r7
 801d4f2:	463a      	mov	r2, r7
 801d4f4:	e7f7      	b.n	801d4e6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 801d4f6:	b015      	add	sp, #84	; 0x54
 801d4f8:	ecbd 8b08 	vpop	{d8-d11}
 801d4fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d500 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801d500:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d504:	780d      	ldrb	r5, [r1, #0]
 801d506:	f891 9002 	ldrb.w	r9, [r1, #2]
 801d50a:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
 801d50e:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801d512:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 801d516:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 801d51a:	f891 9001 	ldrb.w	r9, [r1, #1]
 801d51e:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801d522:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 801d526:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801d52a:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 801d52e:	9501      	str	r5, [sp, #4]
 801d530:	fb06 470c 	mla	r7, r6, ip, r4
 801d534:	2e00      	cmp	r6, #0
 801d536:	eb02 0e07 	add.w	lr, r2, r7
 801d53a:	db46      	blt.n	801d5ca <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 801d53c:	45b0      	cmp	r8, r6
 801d53e:	dd44      	ble.n	801d5ca <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 801d540:	2c00      	cmp	r4, #0
 801d542:	db40      	blt.n	801d5c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 801d544:	45a4      	cmp	ip, r4
 801d546:	dd3e      	ble.n	801d5c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 801d548:	5dd7      	ldrb	r7, [r2, r7]
 801d54a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801d54e:	441f      	add	r7, r3
 801d550:	1c62      	adds	r2, r4, #1
 801d552:	d43d      	bmi.n	801d5d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801d554:	4594      	cmp	ip, r2
 801d556:	dd3b      	ble.n	801d5d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801d558:	f1ba 0f00 	cmp.w	sl, #0
 801d55c:	d038      	beq.n	801d5d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801d55e:	f89e 5001 	ldrb.w	r5, [lr, #1]
 801d562:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d566:	441d      	add	r5, r3
 801d568:	3601      	adds	r6, #1
 801d56a:	d435      	bmi.n	801d5d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801d56c:	45b0      	cmp	r8, r6
 801d56e:	dd33      	ble.n	801d5d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801d570:	b390      	cbz	r0, 801d5d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801d572:	2c00      	cmp	r4, #0
 801d574:	db2e      	blt.n	801d5d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 801d576:	45a4      	cmp	ip, r4
 801d578:	dd2c      	ble.n	801d5d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 801d57a:	f81e 600c 	ldrb.w	r6, [lr, ip]
 801d57e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d582:	441e      	add	r6, r3
 801d584:	1c62      	adds	r2, r4, #1
 801d586:	d42a      	bmi.n	801d5de <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801d588:	4594      	cmp	ip, r2
 801d58a:	dd28      	ble.n	801d5de <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801d58c:	f1ba 0f00 	cmp.w	sl, #0
 801d590:	d025      	beq.n	801d5de <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801d592:	44f4      	add	ip, lr
 801d594:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801d598:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d59c:	4413      	add	r3, r2
 801d59e:	f1ba 0f0f 	cmp.w	sl, #15
 801d5a2:	f897 8000 	ldrb.w	r8, [r7]
 801d5a6:	f895 9000 	ldrb.w	r9, [r5]
 801d5aa:	f896 e000 	ldrb.w	lr, [r6]
 801d5ae:	f893 c000 	ldrb.w	ip, [r3]
 801d5b2:	d801      	bhi.n	801d5b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb8>
 801d5b4:	280f      	cmp	r0, #15
 801d5b6:	d914      	bls.n	801d5e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe2>
 801d5b8:	4b29      	ldr	r3, [pc, #164]	; (801d660 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 801d5ba:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801d5be:	4a29      	ldr	r2, [pc, #164]	; (801d664 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 801d5c0:	4829      	ldr	r0, [pc, #164]	; (801d668 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x168>)
 801d5c2:	f005 ff39 	bl	8023438 <__assert_func>
 801d5c6:	af01      	add	r7, sp, #4
 801d5c8:	e7c2      	b.n	801d550 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801d5ca:	ad01      	add	r5, sp, #4
 801d5cc:	462f      	mov	r7, r5
 801d5ce:	e7cb      	b.n	801d568 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801d5d0:	ad01      	add	r5, sp, #4
 801d5d2:	e7c9      	b.n	801d568 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801d5d4:	ae01      	add	r6, sp, #4
 801d5d6:	e7d5      	b.n	801d584 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x84>
 801d5d8:	ab01      	add	r3, sp, #4
 801d5da:	461e      	mov	r6, r3
 801d5dc:	e7df      	b.n	801d59e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 801d5de:	ab01      	add	r3, sp, #4
 801d5e0:	e7dd      	b.n	801d59e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 801d5e2:	fa1f f48a 	uxth.w	r4, sl
 801d5e6:	b280      	uxth	r0, r0
 801d5e8:	fb04 fa00 	mul.w	sl, r4, r0
 801d5ec:	0124      	lsls	r4, r4, #4
 801d5ee:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801d5f2:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 801d5f6:	b282      	uxth	r2, r0
 801d5f8:	eba4 000a 	sub.w	r0, r4, sl
 801d5fc:	ebab 0b02 	sub.w	fp, fp, r2
 801d600:	b280      	uxth	r0, r0
 801d602:	fa1f fb8b 	uxth.w	fp, fp
 801d606:	fb00 f909 	mul.w	r9, r0, r9
 801d60a:	fb0b 9808 	mla	r8, fp, r8, r9
 801d60e:	fb02 8e0e 	mla	lr, r2, lr, r8
 801d612:	fb0a ec0c 	mla	ip, sl, ip, lr
 801d616:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d61a:	f881 c000 	strb.w	ip, [r1]
 801d61e:	786c      	ldrb	r4, [r5, #1]
 801d620:	f897 c001 	ldrb.w	ip, [r7, #1]
 801d624:	4344      	muls	r4, r0
 801d626:	fb0b 4c0c 	mla	ip, fp, ip, r4
 801d62a:	7874      	ldrb	r4, [r6, #1]
 801d62c:	fb02 cc04 	mla	ip, r2, r4, ip
 801d630:	785c      	ldrb	r4, [r3, #1]
 801d632:	fb0a c404 	mla	r4, sl, r4, ip
 801d636:	1224      	asrs	r4, r4, #8
 801d638:	704c      	strb	r4, [r1, #1]
 801d63a:	78ad      	ldrb	r5, [r5, #2]
 801d63c:	78bc      	ldrb	r4, [r7, #2]
 801d63e:	4368      	muls	r0, r5
 801d640:	fb0b 0b04 	mla	fp, fp, r4, r0
 801d644:	78b0      	ldrb	r0, [r6, #2]
 801d646:	fb02 b000 	mla	r0, r2, r0, fp
 801d64a:	789a      	ldrb	r2, [r3, #2]
 801d64c:	fb0a 0a02 	mla	sl, sl, r2, r0
 801d650:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d654:	f881 a002 	strb.w	sl, [r1, #2]
 801d658:	b003      	add	sp, #12
 801d65a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d65e:	bf00      	nop
 801d660:	08027bdb 	.word	0x08027bdb
 801d664:	080280d2 	.word	0x080280d2
 801d668:	08027ca4 	.word	0x08027ca4

0801d66c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801d66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d670:	ed2d 8b0a 	vpush	{d8-d12}
 801d674:	b08f      	sub	sp, #60	; 0x3c
 801d676:	eeb0 aa40 	vmov.f32	s20, s0
 801d67a:	eef0 9a60 	vmov.f32	s19, s1
 801d67e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 801d680:	eeb0 9a41 	vmov.f32	s18, s2
 801d684:	9307      	str	r3, [sp, #28]
 801d686:	eeb0 8a62 	vmov.f32	s16, s5
 801d68a:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 801d68e:	eef0 8a43 	vmov.f32	s17, s6
 801d692:	900d      	str	r0, [sp, #52]	; 0x34
 801d694:	eeb0 ca44 	vmov.f32	s24, s8
 801d698:	6860      	ldr	r0, [r4, #4]
 801d69a:	eef0 ba64 	vmov.f32	s23, s9
 801d69e:	9309      	str	r3, [sp, #36]	; 0x24
 801d6a0:	eeb0 ba45 	vmov.f32	s22, s10
 801d6a4:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801d6a8:	f9bd 50a8 	ldrsh.w	r5, [sp, #168]	; 0xa8
 801d6ac:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
 801d6b0:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801d6b4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801d6b6:	fb00 1303 	mla	r3, r0, r3, r1
 801d6ba:	6821      	ldr	r1, [r4, #0]
 801d6bc:	6854      	ldr	r4, [r2, #4]
 801d6be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d6c2:	3404      	adds	r4, #4
 801d6c4:	18cb      	adds	r3, r1, r3
 801d6c6:	9308      	str	r3, [sp, #32]
 801d6c8:	6813      	ldr	r3, [r2, #0]
 801d6ca:	930a      	str	r3, [sp, #40]	; 0x28
 801d6cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d6ce:	2b00      	cmp	r3, #0
 801d6d0:	dc03      	bgt.n	801d6da <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801d6d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d6d4:	2b00      	cmp	r3, #0
 801d6d6:	f340 81d2 	ble.w	801da7e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 801d6da:	9b07      	ldr	r3, [sp, #28]
 801d6dc:	2b00      	cmp	r3, #0
 801d6de:	f340 80e3 	ble.w	801d8a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23c>
 801d6e2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801d6e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d6e6:	1412      	asrs	r2, r2, #16
 801d6e8:	ea4f 4323 	mov.w	r3, r3, asr #16
 801d6ec:	d42f      	bmi.n	801d74e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801d6ee:	1c51      	adds	r1, r2, #1
 801d6f0:	428d      	cmp	r5, r1
 801d6f2:	dd2f      	ble.n	801d754 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801d6f4:	2b00      	cmp	r3, #0
 801d6f6:	db2d      	blt.n	801d754 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801d6f8:	1c59      	adds	r1, r3, #1
 801d6fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d6fc:	4288      	cmp	r0, r1
 801d6fe:	dd29      	ble.n	801d754 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801d700:	9b07      	ldr	r3, [sp, #28]
 801d702:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801d704:	3b01      	subs	r3, #1
 801d706:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801d708:	fb02 1203 	mla	r2, r2, r3, r1
 801d70c:	1412      	asrs	r2, r2, #16
 801d70e:	d42b      	bmi.n	801d768 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801d710:	3201      	adds	r2, #1
 801d712:	4295      	cmp	r5, r2
 801d714:	dd28      	ble.n	801d768 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801d716:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801d718:	9924      	ldr	r1, [sp, #144]	; 0x90
 801d71a:	fb02 1303 	mla	r3, r2, r3, r1
 801d71e:	141b      	asrs	r3, r3, #16
 801d720:	d422      	bmi.n	801d768 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801d722:	3301      	adds	r3, #1
 801d724:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d726:	429a      	cmp	r2, r3
 801d728:	dd1e      	ble.n	801d768 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801d72a:	9b08      	ldr	r3, [sp, #32]
 801d72c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801d730:	f103 0803 	add.w	r8, r3, #3
 801d734:	f1ba 0f00 	cmp.w	sl, #0
 801d738:	f300 8119 	bgt.w	801d96e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x302>
 801d73c:	9b07      	ldr	r3, [sp, #28]
 801d73e:	9a08      	ldr	r2, [sp, #32]
 801d740:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d744:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d748:	441a      	add	r2, r3
 801d74a:	9208      	str	r2, [sp, #32]
 801d74c:	e0ae      	b.n	801d8ac <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x240>
 801d74e:	1c51      	adds	r1, r2, #1
 801d750:	f040 809b 	bne.w	801d88a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801d754:	42aa      	cmp	r2, r5
 801d756:	f280 8098 	bge.w	801d88a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801d75a:	1c5a      	adds	r2, r3, #1
 801d75c:	f2c0 8095 	blt.w	801d88a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801d760:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d762:	4293      	cmp	r3, r2
 801d764:	f280 8091 	bge.w	801d88a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801d768:	e9dd b607 	ldrd	fp, r6, [sp, #28]
 801d76c:	f1bb 0f00 	cmp.w	fp, #0
 801d770:	dde4      	ble.n	801d73c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801d772:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d774:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801d776:	141a      	asrs	r2, r3, #16
 801d778:	9924      	ldr	r1, [sp, #144]	; 0x90
 801d77a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801d77c:	1400      	asrs	r0, r0, #16
 801d77e:	f3c1 3103 	ubfx	r1, r1, #12, #4
 801d782:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801d786:	f100 80dc 	bmi.w	801d942 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d6>
 801d78a:	1c47      	adds	r7, r0, #1
 801d78c:	42bd      	cmp	r5, r7
 801d78e:	f340 80da 	ble.w	801d946 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801d792:	2a00      	cmp	r2, #0
 801d794:	f2c0 80d7 	blt.w	801d946 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801d798:	f102 0c01 	add.w	ip, r2, #1
 801d79c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801d79e:	4567      	cmp	r7, ip
 801d7a0:	f340 80d1 	ble.w	801d946 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801d7a4:	fb02 0005 	mla	r0, r2, r5, r0
 801d7a8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801d7aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d7ac:	f817 8000 	ldrb.w	r8, [r7, r0]
 801d7b0:	4402      	add	r2, r0
 801d7b2:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801d7b6:	eb04 0c08 	add.w	ip, r4, r8
 801d7ba:	2b00      	cmp	r3, #0
 801d7bc:	f000 80b3 	beq.w	801d926 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ba>
 801d7c0:	7857      	ldrb	r7, [r2, #1]
 801d7c2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801d7c6:	4427      	add	r7, r4
 801d7c8:	2900      	cmp	r1, #0
 801d7ca:	f000 80b4 	beq.w	801d936 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ca>
 801d7ce:	1950      	adds	r0, r2, r5
 801d7d0:	5d52      	ldrb	r2, [r2, r5]
 801d7d2:	7840      	ldrb	r0, [r0, #1]
 801d7d4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d7d8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d7dc:	4422      	add	r2, r4
 801d7de:	4420      	add	r0, r4
 801d7e0:	b29b      	uxth	r3, r3
 801d7e2:	f814 a008 	ldrb.w	sl, [r4, r8]
 801d7e6:	b289      	uxth	r1, r1
 801d7e8:	f897 8000 	ldrb.w	r8, [r7]
 801d7ec:	fb03 f901 	mul.w	r9, r3, r1
 801d7f0:	011b      	lsls	r3, r3, #4
 801d7f2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801d7f6:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801d7fa:	eba3 0309 	sub.w	r3, r3, r9
 801d7fe:	b289      	uxth	r1, r1
 801d800:	b29b      	uxth	r3, r3
 801d802:	ebae 0e01 	sub.w	lr, lr, r1
 801d806:	fb03 f808 	mul.w	r8, r3, r8
 801d80a:	fa1f fe8e 	uxth.w	lr, lr
 801d80e:	fb0e 880a 	mla	r8, lr, sl, r8
 801d812:	f892 a000 	ldrb.w	sl, [r2]
 801d816:	fb01 880a 	mla	r8, r1, sl, r8
 801d81a:	f890 a000 	ldrb.w	sl, [r0]
 801d81e:	fb09 880a 	mla	r8, r9, sl, r8
 801d822:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d826:	f886 8000 	strb.w	r8, [r6]
 801d82a:	f897 8001 	ldrb.w	r8, [r7, #1]
 801d82e:	f89c a001 	ldrb.w	sl, [ip, #1]
 801d832:	fb03 f808 	mul.w	r8, r3, r8
 801d836:	fb0e 880a 	mla	r8, lr, sl, r8
 801d83a:	f892 a001 	ldrb.w	sl, [r2, #1]
 801d83e:	fb01 880a 	mla	r8, r1, sl, r8
 801d842:	f890 a001 	ldrb.w	sl, [r0, #1]
 801d846:	fb09 880a 	mla	r8, r9, sl, r8
 801d84a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d84e:	f886 8001 	strb.w	r8, [r6, #1]
 801d852:	78bf      	ldrb	r7, [r7, #2]
 801d854:	f89c c002 	ldrb.w	ip, [ip, #2]
 801d858:	437b      	muls	r3, r7
 801d85a:	7892      	ldrb	r2, [r2, #2]
 801d85c:	fb0e 330c 	mla	r3, lr, ip, r3
 801d860:	fb01 3102 	mla	r1, r1, r2, r3
 801d864:	7882      	ldrb	r2, [r0, #2]
 801d866:	fb09 1902 	mla	r9, r9, r2, r1
 801d86a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d86e:	f886 9002 	strb.w	r9, [r6, #2]
 801d872:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801d874:	3603      	adds	r6, #3
 801d876:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801d878:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d87c:	4413      	add	r3, r2
 801d87e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801d880:	9323      	str	r3, [sp, #140]	; 0x8c
 801d882:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d884:	4413      	add	r3, r2
 801d886:	9324      	str	r3, [sp, #144]	; 0x90
 801d888:	e770      	b.n	801d76c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 801d88a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801d88c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801d88e:	4413      	add	r3, r2
 801d890:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801d892:	9323      	str	r3, [sp, #140]	; 0x8c
 801d894:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d896:	4413      	add	r3, r2
 801d898:	9324      	str	r3, [sp, #144]	; 0x90
 801d89a:	9b07      	ldr	r3, [sp, #28]
 801d89c:	3b01      	subs	r3, #1
 801d89e:	9307      	str	r3, [sp, #28]
 801d8a0:	9b08      	ldr	r3, [sp, #32]
 801d8a2:	3303      	adds	r3, #3
 801d8a4:	9308      	str	r3, [sp, #32]
 801d8a6:	e718      	b.n	801d6da <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801d8a8:	f47f af2a 	bne.w	801d700 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 801d8ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d8ae:	2b00      	cmp	r3, #0
 801d8b0:	f340 80e5 	ble.w	801da7e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 801d8b4:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801d8b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801d8ba:	ee79 9aab 	vadd.f32	s19, s19, s23
 801d8be:	eef0 6a48 	vmov.f32	s13, s16
 801d8c2:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801d8c6:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801d8ca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d8ce:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801d8d2:	eef0 6a68 	vmov.f32	s13, s17
 801d8d6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d8da:	edcd 6a24 	vstr	s13, [sp, #144]	; 0x90
 801d8de:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801d8e2:	ee69 7a27 	vmul.f32	s15, s18, s15
 801d8e6:	ee37 8a48 	vsub.f32	s16, s14, s16
 801d8ea:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801d8ee:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801d8f2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801d8f6:	ee18 2a10 	vmov	r2, s16
 801d8fa:	eeb0 8a47 	vmov.f32	s16, s14
 801d8fe:	fb92 f3f3 	sdiv	r3, r2, r3
 801d902:	ee18 2a90 	vmov	r2, s17
 801d906:	9325      	str	r3, [sp, #148]	; 0x94
 801d908:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801d90a:	eef0 8a67 	vmov.f32	s17, s15
 801d90e:	fb92 f3f3 	sdiv	r3, r2, r3
 801d912:	9326      	str	r3, [sp, #152]	; 0x98
 801d914:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d916:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d918:	3b01      	subs	r3, #1
 801d91a:	930b      	str	r3, [sp, #44]	; 0x2c
 801d91c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801d91e:	bf08      	it	eq
 801d920:	4613      	moveq	r3, r2
 801d922:	9307      	str	r3, [sp, #28]
 801d924:	e6d2      	b.n	801d6cc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801d926:	b149      	cbz	r1, 801d93c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 801d928:	5d52      	ldrb	r2, [r2, r5]
 801d92a:	4660      	mov	r0, ip
 801d92c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d930:	4422      	add	r2, r4
 801d932:	4667      	mov	r7, ip
 801d934:	e754      	b.n	801d7e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 801d936:	4660      	mov	r0, ip
 801d938:	4662      	mov	r2, ip
 801d93a:	e751      	b.n	801d7e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 801d93c:	4660      	mov	r0, ip
 801d93e:	4662      	mov	r2, ip
 801d940:	e7f7      	b.n	801d932 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c6>
 801d942:	1c47      	adds	r7, r0, #1
 801d944:	d195      	bne.n	801d872 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801d946:	4285      	cmp	r5, r0
 801d948:	dd93      	ble.n	801d872 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801d94a:	1c57      	adds	r7, r2, #1
 801d94c:	db91      	blt.n	801d872 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801d94e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801d950:	4297      	cmp	r7, r2
 801d952:	dd8e      	ble.n	801d872 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801d954:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801d958:	e9cd 0202 	strd	r0, r2, [sp, #8]
 801d95c:	e9cd 5700 	strd	r5, r7, [sp]
 801d960:	4623      	mov	r3, r4
 801d962:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d964:	4631      	mov	r1, r6
 801d966:	980d      	ldr	r0, [sp, #52]	; 0x34
 801d968:	f7ff fdca 	bl	801d500 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801d96c:	e781      	b.n	801d872 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801d96e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801d970:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801d972:	1410      	asrs	r0, r2, #16
 801d974:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801d978:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801d97a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801d97c:	1412      	asrs	r2, r2, #16
 801d97e:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801d982:	fb05 2000 	mla	r0, r5, r0, r2
 801d986:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d988:	f816 e000 	ldrb.w	lr, [r6, r0]
 801d98c:	4402      	add	r2, r0
 801d98e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801d992:	eb04 070e 	add.w	r7, r4, lr
 801d996:	2b00      	cmp	r3, #0
 801d998:	d063      	beq.n	801da62 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f6>
 801d99a:	7856      	ldrb	r6, [r2, #1]
 801d99c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d9a0:	4426      	add	r6, r4
 801d9a2:	2900      	cmp	r1, #0
 801d9a4:	d065      	beq.n	801da72 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 801d9a6:	1950      	adds	r0, r2, r5
 801d9a8:	5d52      	ldrb	r2, [r2, r5]
 801d9aa:	7840      	ldrb	r0, [r0, #1]
 801d9ac:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d9b0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d9b4:	4422      	add	r2, r4
 801d9b6:	4420      	add	r0, r4
 801d9b8:	b29b      	uxth	r3, r3
 801d9ba:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801d9be:	b289      	uxth	r1, r1
 801d9c0:	f896 e000 	ldrb.w	lr, [r6]
 801d9c4:	f108 0803 	add.w	r8, r8, #3
 801d9c8:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d9cc:	fb03 f901 	mul.w	r9, r3, r1
 801d9d0:	011b      	lsls	r3, r3, #4
 801d9d2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801d9d6:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801d9da:	eba3 0309 	sub.w	r3, r3, r9
 801d9de:	b289      	uxth	r1, r1
 801d9e0:	b29b      	uxth	r3, r3
 801d9e2:	ebac 0c01 	sub.w	ip, ip, r1
 801d9e6:	fb03 fe0e 	mul.w	lr, r3, lr
 801d9ea:	fa1f fc8c 	uxth.w	ip, ip
 801d9ee:	fb0c ee0b 	mla	lr, ip, fp, lr
 801d9f2:	f892 b000 	ldrb.w	fp, [r2]
 801d9f6:	fb01 ee0b 	mla	lr, r1, fp, lr
 801d9fa:	f890 b000 	ldrb.w	fp, [r0]
 801d9fe:	fb09 ee0b 	mla	lr, r9, fp, lr
 801da02:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801da06:	f808 ec06 	strb.w	lr, [r8, #-6]
 801da0a:	f896 e001 	ldrb.w	lr, [r6, #1]
 801da0e:	f897 b001 	ldrb.w	fp, [r7, #1]
 801da12:	fb03 fe0e 	mul.w	lr, r3, lr
 801da16:	fb0c ee0b 	mla	lr, ip, fp, lr
 801da1a:	f892 b001 	ldrb.w	fp, [r2, #1]
 801da1e:	fb01 ee0b 	mla	lr, r1, fp, lr
 801da22:	f890 b001 	ldrb.w	fp, [r0, #1]
 801da26:	fb09 ee0b 	mla	lr, r9, fp, lr
 801da2a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801da2e:	f808 ec05 	strb.w	lr, [r8, #-5]
 801da32:	78b6      	ldrb	r6, [r6, #2]
 801da34:	78bf      	ldrb	r7, [r7, #2]
 801da36:	4373      	muls	r3, r6
 801da38:	7896      	ldrb	r6, [r2, #2]
 801da3a:	7882      	ldrb	r2, [r0, #2]
 801da3c:	fb0c 3307 	mla	r3, ip, r7, r3
 801da40:	fb01 3306 	mla	r3, r1, r6, r3
 801da44:	fb09 3902 	mla	r9, r9, r2, r3
 801da48:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801da4a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801da4c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801da50:	4413      	add	r3, r2
 801da52:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801da54:	f808 9c04 	strb.w	r9, [r8, #-4]
 801da58:	9323      	str	r3, [sp, #140]	; 0x8c
 801da5a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801da5c:	4413      	add	r3, r2
 801da5e:	9324      	str	r3, [sp, #144]	; 0x90
 801da60:	e668      	b.n	801d734 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801da62:	b149      	cbz	r1, 801da78 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40c>
 801da64:	5d52      	ldrb	r2, [r2, r5]
 801da66:	4638      	mov	r0, r7
 801da68:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801da6c:	4422      	add	r2, r4
 801da6e:	463e      	mov	r6, r7
 801da70:	e7a2      	b.n	801d9b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801da72:	4638      	mov	r0, r7
 801da74:	463a      	mov	r2, r7
 801da76:	e79f      	b.n	801d9b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801da78:	4638      	mov	r0, r7
 801da7a:	463a      	mov	r2, r7
 801da7c:	e7f7      	b.n	801da6e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x402>
 801da7e:	b00f      	add	sp, #60	; 0x3c
 801da80:	ecbd 8b0a 	vpop	{d8-d12}
 801da84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801da88 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 801da88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da8c:	b087      	sub	sp, #28
 801da8e:	7888      	ldrb	r0, [r1, #2]
 801da90:	9002      	str	r0, [sp, #8]
 801da92:	7848      	ldrb	r0, [r1, #1]
 801da94:	9e02      	ldr	r6, [sp, #8]
 801da96:	9003      	str	r0, [sp, #12]
 801da98:	7808      	ldrb	r0, [r1, #0]
 801da9a:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801da9e:	9004      	str	r0, [sp, #16]
 801daa0:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801daa4:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 801daa8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 801daac:	9e03      	ldr	r6, [sp, #12]
 801daae:	f89d c050 	ldrb.w	ip, [sp, #80]	; 0x50
 801dab2:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 801dab6:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 801daba:	e9dd 7412 	ldrd	r7, r4, [sp, #72]	; 0x48
 801dabe:	fb04 7508 	mla	r5, r4, r8, r7
 801dac2:	2c00      	cmp	r4, #0
 801dac4:	eb02 0905 	add.w	r9, r2, r5
 801dac8:	db45      	blt.n	801db56 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 801daca:	45a2      	cmp	sl, r4
 801dacc:	dd43      	ble.n	801db56 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 801dace:	2f00      	cmp	r7, #0
 801dad0:	db3f      	blt.n	801db52 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 801dad2:	45b8      	cmp	r8, r7
 801dad4:	dd3d      	ble.n	801db52 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 801dad6:	5d52      	ldrb	r2, [r2, r5]
 801dad8:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801dadc:	1c7a      	adds	r2, r7, #1
 801dade:	d43d      	bmi.n	801db5c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801dae0:	4590      	cmp	r8, r2
 801dae2:	dd3b      	ble.n	801db5c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801dae4:	f1bc 0f00 	cmp.w	ip, #0
 801dae8:	d038      	beq.n	801db5c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801daea:	f899 2001 	ldrb.w	r2, [r9, #1]
 801daee:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801daf2:	3401      	adds	r4, #1
 801daf4:	d436      	bmi.n	801db64 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801daf6:	45a2      	cmp	sl, r4
 801daf8:	dd34      	ble.n	801db64 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801dafa:	f1be 0f00 	cmp.w	lr, #0
 801dafe:	d031      	beq.n	801db64 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801db00:	2f00      	cmp	r7, #0
 801db02:	db2d      	blt.n	801db60 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 801db04:	45b8      	cmp	r8, r7
 801db06:	dd2b      	ble.n	801db60 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 801db08:	f819 2008 	ldrb.w	r2, [r9, r8]
 801db0c:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 801db10:	3701      	adds	r7, #1
 801db12:	d409      	bmi.n	801db28 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801db14:	45b8      	cmp	r8, r7
 801db16:	dd07      	ble.n	801db28 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801db18:	f1bc 0f00 	cmp.w	ip, #0
 801db1c:	d004      	beq.n	801db28 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801db1e:	44c8      	add	r8, r9
 801db20:	f898 2001 	ldrb.w	r2, [r8, #1]
 801db24:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801db28:	f1bc 0f0f 	cmp.w	ip, #15
 801db2c:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801db30:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 801db34:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801db38:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801db3c:	d802      	bhi.n	801db44 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbc>
 801db3e:	f1be 0f0f 	cmp.w	lr, #15
 801db42:	d911      	bls.n	801db68 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xe0>
 801db44:	4b77      	ldr	r3, [pc, #476]	; (801dd24 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x29c>)
 801db46:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801db4a:	4a77      	ldr	r2, [pc, #476]	; (801dd28 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a0>)
 801db4c:	4877      	ldr	r0, [pc, #476]	; (801dd2c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a4>)
 801db4e:	f005 fc73 	bl	8023438 <__assert_func>
 801db52:	4606      	mov	r6, r0
 801db54:	e7c2      	b.n	801dadc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x54>
 801db56:	4605      	mov	r5, r0
 801db58:	4606      	mov	r6, r0
 801db5a:	e7ca      	b.n	801daf2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 801db5c:	4605      	mov	r5, r0
 801db5e:	e7c8      	b.n	801daf2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 801db60:	4604      	mov	r4, r0
 801db62:	e7d5      	b.n	801db10 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x88>
 801db64:	4604      	mov	r4, r0
 801db66:	e7df      	b.n	801db28 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801db68:	fa1f fc8c 	uxth.w	ip, ip
 801db6c:	fa1f f28e 	uxth.w	r2, lr
 801db70:	fb02 fe0c 	mul.w	lr, r2, ip
 801db74:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801db78:	ebce 1202 	rsb	r2, lr, r2, lsl #4
 801db7c:	ebac 070e 	sub.w	r7, ip, lr
 801db80:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801db84:	b292      	uxth	r2, r2
 801db86:	b2bf      	uxth	r7, r7
 801db88:	1a9b      	subs	r3, r3, r2
 801db8a:	fb07 fc0a 	mul.w	ip, r7, sl
 801db8e:	b29b      	uxth	r3, r3
 801db90:	fb03 cc0b 	mla	ip, r3, fp, ip
 801db94:	9301      	str	r3, [sp, #4]
 801db96:	fb02 cc09 	mla	ip, r2, r9, ip
 801db9a:	fb0e cc08 	mla	ip, lr, r8, ip
 801db9e:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801dba2:	9305      	str	r3, [sp, #20]
 801dba4:	2b00      	cmp	r3, #0
 801dba6:	f000 80b9 	beq.w	801dd1c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x294>
 801dbaa:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801dbae:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801dbb2:	fb0b fc0c 	mul.w	ip, fp, ip
 801dbb6:	fb0b f606 	mul.w	r6, fp, r6
 801dbba:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801dbbe:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801dbc2:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801dbc6:	44dc      	add	ip, fp
 801dbc8:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801dbcc:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801dbd0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801dbd4:	fb0a fb0b 	mul.w	fp, sl, fp
 801dbd8:	fb0a fa05 	mul.w	sl, sl, r5
 801dbdc:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 801dbe0:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801dbe4:	f50a 7580 	add.w	r5, sl, #256	; 0x100
 801dbe8:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801dbec:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801dbf0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801dbf4:	eb05 2a1a 	add.w	sl, r5, sl, lsr #8
 801dbf8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801dbfc:	0a36      	lsrs	r6, r6, #8
 801dbfe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801dc02:	44dc      	add	ip, fp
 801dc04:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801dc08:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801dc0c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801dc10:	fb09 fb0b 	mul.w	fp, r9, fp
 801dc14:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801dc18:	fb09 f904 	mul.w	r9, r9, r4
 801dc1c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801dc20:	ea4f 251b 	mov.w	r5, fp, lsr #8
 801dc24:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801dc28:	f509 7480 	add.w	r4, r9, #256	; 0x100
 801dc2c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801dc30:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801dc34:	fb0c fc07 	mul.w	ip, ip, r7
 801dc38:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801dc3c:	f000 14ff 	and.w	r4, r0, #16711935	; 0xff00ff
 801dc40:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801dc44:	445d      	add	r5, fp
 801dc46:	fb08 f404 	mul.w	r4, r8, r4
 801dc4a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801dc4e:	fb08 f800 	mul.w	r8, r8, r0
 801dc52:	0a2d      	lsrs	r5, r5, #8
 801dc54:	0a20      	lsrs	r0, r4, #8
 801dc56:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 801dc5a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801dc5e:	fb07 f70a 	mul.w	r7, r7, sl
 801dc62:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801dc66:	4404      	add	r4, r0
 801dc68:	f508 7080 	add.w	r0, r8, #256	; 0x100
 801dc6c:	0a24      	lsrs	r4, r4, #8
 801dc6e:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 801dc72:	9801      	ldr	r0, [sp, #4]
 801dc74:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801dc78:	fb03 cc00 	mla	ip, r3, r0, ip
 801dc7c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801dc80:	fb00 7606 	mla	r6, r0, r6, r7
 801dc84:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 801dc88:	fb04 cc0e 	mla	ip, r4, lr, ip
 801dc8c:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801dc90:	b280      	uxth	r0, r0
 801dc92:	9c04      	ldr	r4, [sp, #16]
 801dc94:	fb05 cc02 	mla	ip, r5, r2, ip
 801dc98:	fb0e 6e08 	mla	lr, lr, r8, r6
 801dc9c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801dca0:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 801dca4:	f409 4c7f 	and.w	ip, r9, #65280	; 0xff00
 801dca8:	fb02 ec0c 	mla	ip, r2, ip, lr
 801dcac:	9a05      	ldr	r2, [sp, #20]
 801dcae:	4342      	muls	r2, r0
 801dcb0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801dcb4:	1c53      	adds	r3, r2, #1
 801dcb6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801dcba:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801dcbe:	ea45 0c0c 	orr.w	ip, r5, ip
 801dcc2:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 801dcc6:	fa5f f28c 	uxtb.w	r2, ip
 801dcca:	b2db      	uxtb	r3, r3
 801dccc:	fb14 f403 	smulbb	r4, r4, r3
 801dcd0:	fb02 4200 	mla	r2, r2, r0, r4
 801dcd4:	b292      	uxth	r2, r2
 801dcd6:	1c54      	adds	r4, r2, #1
 801dcd8:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 801dcdc:	9c03      	ldr	r4, [sp, #12]
 801dcde:	fb14 f403 	smulbb	r4, r4, r3
 801dce2:	1212      	asrs	r2, r2, #8
 801dce4:	700a      	strb	r2, [r1, #0]
 801dce6:	f3cc 2207 	ubfx	r2, ip, #8, #8
 801dcea:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801dcee:	fb02 4200 	mla	r2, r2, r0, r4
 801dcf2:	b292      	uxth	r2, r2
 801dcf4:	1c54      	adds	r4, r2, #1
 801dcf6:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 801dcfa:	1212      	asrs	r2, r2, #8
 801dcfc:	704a      	strb	r2, [r1, #1]
 801dcfe:	9a02      	ldr	r2, [sp, #8]
 801dd00:	fb12 f303 	smulbb	r3, r2, r3
 801dd04:	fb0c 3c00 	mla	ip, ip, r0, r3
 801dd08:	fa1f fc8c 	uxth.w	ip, ip
 801dd0c:	f10c 0301 	add.w	r3, ip, #1
 801dd10:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801dd14:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801dd18:	f881 c002 	strb.w	ip, [r1, #2]
 801dd1c:	b007      	add	sp, #28
 801dd1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dd22:	bf00      	nop
 801dd24:	08027bdb 	.word	0x08027bdb
 801dd28:	080280d2 	.word	0x080280d2
 801dd2c:	08027ca4 	.word	0x08027ca4

0801dd30 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801dd30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd34:	ed2d 8b08 	vpush	{d8-d11}
 801dd38:	b09b      	sub	sp, #108	; 0x6c
 801dd3a:	eeb0 aa40 	vmov.f32	s20, s0
 801dd3e:	eef0 9a60 	vmov.f32	s19, s1
 801dd42:	930a      	str	r3, [sp, #40]	; 0x28
 801dd44:	eeb0 9a41 	vmov.f32	s18, s2
 801dd48:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 801dd4c:	eeb0 8a62 	vmov.f32	s16, s5
 801dd50:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 801dd52:	eef0 8a43 	vmov.f32	s17, s6
 801dd56:	9312      	str	r3, [sp, #72]	; 0x48
 801dd58:	eef0 ba44 	vmov.f32	s23, s8
 801dd5c:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 801dd60:	eeb0 ba64 	vmov.f32	s22, s9
 801dd64:	9019      	str	r0, [sp, #100]	; 0x64
 801dd66:	eef0 aa45 	vmov.f32	s21, s10
 801dd6a:	9114      	str	r1, [sp, #80]	; 0x50
 801dd6c:	9317      	str	r3, [sp, #92]	; 0x5c
 801dd6e:	6868      	ldr	r0, [r5, #4]
 801dd70:	9218      	str	r2, [sp, #96]	; 0x60
 801dd72:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 801dd74:	f9bd 40d0 	ldrsh.w	r4, [sp, #208]	; 0xd0
 801dd78:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 801dd7c:	fb00 1303 	mla	r3, r0, r3, r1
 801dd80:	6829      	ldr	r1, [r5, #0]
 801dd82:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dd86:	18cb      	adds	r3, r1, r3
 801dd88:	930d      	str	r3, [sp, #52]	; 0x34
 801dd8a:	6813      	ldr	r3, [r2, #0]
 801dd8c:	9313      	str	r3, [sp, #76]	; 0x4c
 801dd8e:	6853      	ldr	r3, [r2, #4]
 801dd90:	3304      	adds	r3, #4
 801dd92:	9309      	str	r3, [sp, #36]	; 0x24
 801dd94:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801dd96:	2b00      	cmp	r3, #0
 801dd98:	dc03      	bgt.n	801dda2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801dd9a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801dd9c:	2b00      	cmp	r3, #0
 801dd9e:	f340 8352 	ble.w	801e446 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 801dda2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dda4:	2b00      	cmp	r3, #0
 801dda6:	f340 81a2 	ble.w	801e0ee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3be>
 801ddaa:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801ddac:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801ddae:	1412      	asrs	r2, r2, #16
 801ddb0:	ea4f 4323 	mov.w	r3, r3, asr #16
 801ddb4:	d431      	bmi.n	801de1a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 801ddb6:	1c51      	adds	r1, r2, #1
 801ddb8:	428c      	cmp	r4, r1
 801ddba:	dd31      	ble.n	801de20 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 801ddbc:	2b00      	cmp	r3, #0
 801ddbe:	db2f      	blt.n	801de20 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 801ddc0:	1c59      	adds	r1, r3, #1
 801ddc2:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ddc4:	4288      	cmp	r0, r1
 801ddc6:	dd2b      	ble.n	801de20 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 801ddc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ddca:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801ddcc:	3b01      	subs	r3, #1
 801ddce:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801ddd0:	fb02 1203 	mla	r2, r2, r3, r1
 801ddd4:	1412      	asrs	r2, r2, #16
 801ddd6:	d42d      	bmi.n	801de34 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801ddd8:	3201      	adds	r2, #1
 801ddda:	4294      	cmp	r4, r2
 801dddc:	dd2a      	ble.n	801de34 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801ddde:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801dde0:	992e      	ldr	r1, [sp, #184]	; 0xb8
 801dde2:	fb02 1303 	mla	r3, r2, r3, r1
 801dde6:	141b      	asrs	r3, r3, #16
 801dde8:	d424      	bmi.n	801de34 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801ddea:	3301      	adds	r3, #1
 801ddec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ddee:	429a      	cmp	r2, r3
 801ddf0:	dd20      	ble.n	801de34 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801ddf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ddf4:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
 801ddf8:	f103 0e03 	add.w	lr, r3, #3
 801ddfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ddfe:	9315      	str	r3, [sp, #84]	; 0x54
 801de00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801de02:	2b00      	cmp	r3, #0
 801de04:	f300 81de 	bgt.w	801e1c4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x494>
 801de08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801de0a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801de0c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801de10:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801de14:	441a      	add	r2, r3
 801de16:	920d      	str	r2, [sp, #52]	; 0x34
 801de18:	e16b      	b.n	801e0f2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c2>
 801de1a:	1c51      	adds	r1, r2, #1
 801de1c:	f040 8158 	bne.w	801e0d0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801de20:	42a2      	cmp	r2, r4
 801de22:	f280 8155 	bge.w	801e0d0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801de26:	1c5a      	adds	r2, r3, #1
 801de28:	f2c0 8152 	blt.w	801e0d0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801de2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801de2e:	4293      	cmp	r3, r2
 801de30:	f280 814e 	bge.w	801e0d0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801de34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801de36:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801de38:	9316      	str	r3, [sp, #88]	; 0x58
 801de3a:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 801de3e:	9315      	str	r3, [sp, #84]	; 0x54
 801de40:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801de42:	2b00      	cmp	r3, #0
 801de44:	dde0      	ble.n	801de08 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801de46:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801de48:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801de4a:	f3c2 3003 	ubfx	r0, r2, #12, #4
 801de4e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801de50:	141b      	asrs	r3, r3, #16
 801de52:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801de56:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801de58:	1412      	asrs	r2, r2, #16
 801de5a:	f100 819a 	bmi.w	801e192 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x462>
 801de5e:	1c55      	adds	r5, r2, #1
 801de60:	42ac      	cmp	r4, r5
 801de62:	f340 8198 	ble.w	801e196 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801de66:	2b00      	cmp	r3, #0
 801de68:	f2c0 8195 	blt.w	801e196 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801de6c:	1c5d      	adds	r5, r3, #1
 801de6e:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801de70:	42af      	cmp	r7, r5
 801de72:	f340 8190 	ble.w	801e196 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801de76:	fb03 2304 	mla	r3, r3, r4, r2
 801de7a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801de7c:	18d5      	adds	r5, r2, r3
 801de7e:	5cd3      	ldrb	r3, [r2, r3]
 801de80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801de82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801de86:	0e1f      	lsrs	r7, r3, #24
 801de88:	2800      	cmp	r0, #0
 801de8a:	f000 8171 	beq.w	801e170 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 801de8e:	f895 c001 	ldrb.w	ip, [r5, #1]
 801de92:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801de96:	920e      	str	r2, [sp, #56]	; 0x38
 801de98:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801de9c:	2900      	cmp	r1, #0
 801de9e:	f000 8172 	beq.w	801e186 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 801dea2:	eb05 0c04 	add.w	ip, r5, r4
 801dea6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801dea8:	5d2d      	ldrb	r5, [r5, r4]
 801deaa:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 801deae:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801deb2:	950b      	str	r5, [sp, #44]	; 0x2c
 801deb4:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801deb8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801deba:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801debe:	0e15      	lsrs	r5, r2, #24
 801dec0:	920f      	str	r2, [sp, #60]	; 0x3c
 801dec2:	b280      	uxth	r0, r0
 801dec4:	b289      	uxth	r1, r1
 801dec6:	fb00 fa01 	mul.w	sl, r0, r1
 801deca:	0100      	lsls	r0, r0, #4
 801decc:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 801ded0:	eba0 080a 	sub.w	r8, r0, sl
 801ded4:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 801ded8:	b289      	uxth	r1, r1
 801deda:	fa1f f888 	uxth.w	r8, r8
 801dede:	1a52      	subs	r2, r2, r1
 801dee0:	fb08 f00e 	mul.w	r0, r8, lr
 801dee4:	b292      	uxth	r2, r2
 801dee6:	fb02 0007 	mla	r0, r2, r7, r0
 801deea:	fb01 0009 	mla	r0, r1, r9, r0
 801deee:	fb0a 0005 	mla	r0, sl, r5, r0
 801def2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801def6:	2800      	cmp	r0, #0
 801def8:	f000 80dd 	beq.w	801e0b6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801defc:	2fff      	cmp	r7, #255	; 0xff
 801defe:	d01a      	beq.n	801df36 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801df00:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801df04:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801df08:	fb07 fc0c 	mul.w	ip, r7, ip
 801df0c:	435f      	muls	r7, r3
 801df0e:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801df12:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801df16:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 801df1a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801df1e:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 801df22:	4463      	add	r3, ip
 801df24:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801df28:	0a1b      	lsrs	r3, r3, #8
 801df2a:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801df2e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801df32:	ea43 030b 	orr.w	r3, r3, fp
 801df36:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801df3a:	d01e      	beq.n	801df7a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801df3c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801df3e:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 801df42:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801df46:	fb0e fb0b 	mul.w	fp, lr, fp
 801df4a:	fb0e fe07 	mul.w	lr, lr, r7
 801df4e:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801df52:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801df56:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 801df5a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801df5e:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 801df62:	44dc      	add	ip, fp
 801df64:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801df68:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801df6c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801df70:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801df74:	ea4c 070e 	orr.w	r7, ip, lr
 801df78:	970e      	str	r7, [sp, #56]	; 0x38
 801df7a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801df7e:	d01e      	beq.n	801dfbe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801df80:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801df82:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 801df86:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801df8a:	fb09 fe0e 	mul.w	lr, r9, lr
 801df8e:	fb09 f907 	mul.w	r9, r9, r7
 801df92:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801df96:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801df9a:	f509 7780 	add.w	r7, r9, #256	; 0x100
 801df9e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801dfa2:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801dfa6:	44f4      	add	ip, lr
 801dfa8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801dfac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801dfb0:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801dfb4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801dfb8:	ea4c 0709 	orr.w	r7, ip, r9
 801dfbc:	970b      	str	r7, [sp, #44]	; 0x2c
 801dfbe:	2dff      	cmp	r5, #255	; 0xff
 801dfc0:	d01c      	beq.n	801dffc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2cc>
 801dfc2:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801dfc4:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 801dfc8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801dfcc:	fb05 fe0e 	mul.w	lr, r5, lr
 801dfd0:	437d      	muls	r5, r7
 801dfd2:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801dfd6:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801dfda:	f505 7780 	add.w	r7, r5, #256	; 0x100
 801dfde:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801dfe2:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 801dfe6:	44f4      	add	ip, lr
 801dfe8:	0a2d      	lsrs	r5, r5, #8
 801dfea:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801dfee:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801dff2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801dff6:	ea4c 0505 	orr.w	r5, ip, r5
 801dffa:	950f      	str	r5, [sp, #60]	; 0x3c
 801dffc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801dffe:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801e002:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e006:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801e00a:	fb08 f505 	mul.w	r5, r8, r5
 801e00e:	fb02 5507 	mla	r5, r2, r7, r5
 801e012:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801e014:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801e018:	fb01 5507 	mla	r5, r1, r7, r5
 801e01c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801e01e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801e022:	fb0a 5507 	mla	r5, sl, r7, r5
 801e026:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801e028:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801e02c:	0a2d      	lsrs	r5, r5, #8
 801e02e:	fb08 f807 	mul.w	r8, r8, r7
 801e032:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801e036:	fb02 8303 	mla	r3, r2, r3, r8
 801e03a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e03c:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801e040:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e042:	fb01 330c 	mla	r3, r1, ip, r3
 801e046:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801e04a:	fb0a 3a01 	mla	sl, sl, r1, r3
 801e04e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e050:	9915      	ldr	r1, [sp, #84]	; 0x54
 801e052:	4343      	muls	r3, r0
 801e054:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e058:	1c58      	adds	r0, r3, #1
 801e05a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e05e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801e062:	ea45 050a 	orr.w	r5, r5, sl
 801e066:	7833      	ldrb	r3, [r6, #0]
 801e068:	b2ea      	uxtb	r2, r5
 801e06a:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801e06e:	fb12 f201 	smulbb	r2, r2, r1
 801e072:	b2c0      	uxtb	r0, r0
 801e074:	fb03 2300 	mla	r3, r3, r0, r2
 801e078:	b29b      	uxth	r3, r3
 801e07a:	1c5a      	adds	r2, r3, #1
 801e07c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e080:	7872      	ldrb	r2, [r6, #1]
 801e082:	fb12 f200 	smulbb	r2, r2, r0
 801e086:	121b      	asrs	r3, r3, #8
 801e088:	7033      	strb	r3, [r6, #0]
 801e08a:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801e08e:	0c2d      	lsrs	r5, r5, #16
 801e090:	fb03 2301 	mla	r3, r3, r1, r2
 801e094:	b29b      	uxth	r3, r3
 801e096:	1c5a      	adds	r2, r3, #1
 801e098:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e09c:	121b      	asrs	r3, r3, #8
 801e09e:	7073      	strb	r3, [r6, #1]
 801e0a0:	78b3      	ldrb	r3, [r6, #2]
 801e0a2:	fb13 f000 	smulbb	r0, r3, r0
 801e0a6:	fb05 0501 	mla	r5, r5, r1, r0
 801e0aa:	b2ad      	uxth	r5, r5
 801e0ac:	1c6b      	adds	r3, r5, #1
 801e0ae:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801e0b2:	122d      	asrs	r5, r5, #8
 801e0b4:	70b5      	strb	r5, [r6, #2]
 801e0b6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801e0b8:	3603      	adds	r6, #3
 801e0ba:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801e0bc:	4413      	add	r3, r2
 801e0be:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801e0c0:	932d      	str	r3, [sp, #180]	; 0xb4
 801e0c2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801e0c4:	4413      	add	r3, r2
 801e0c6:	932e      	str	r3, [sp, #184]	; 0xb8
 801e0c8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801e0ca:	3b01      	subs	r3, #1
 801e0cc:	9316      	str	r3, [sp, #88]	; 0x58
 801e0ce:	e6b7      	b.n	801de40 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 801e0d0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801e0d2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801e0d4:	4413      	add	r3, r2
 801e0d6:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801e0d8:	932d      	str	r3, [sp, #180]	; 0xb4
 801e0da:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801e0dc:	4413      	add	r3, r2
 801e0de:	932e      	str	r3, [sp, #184]	; 0xb8
 801e0e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e0e2:	3b01      	subs	r3, #1
 801e0e4:	930a      	str	r3, [sp, #40]	; 0x28
 801e0e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e0e8:	3303      	adds	r3, #3
 801e0ea:	930d      	str	r3, [sp, #52]	; 0x34
 801e0ec:	e659      	b.n	801dda2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801e0ee:	f47f ae6b 	bne.w	801ddc8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801e0f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e0f4:	2b00      	cmp	r3, #0
 801e0f6:	f340 81a6 	ble.w	801e446 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 801e0fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e0fe:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e100:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801e104:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801e108:	eef0 6a48 	vmov.f32	s13, s16
 801e10c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801e110:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801e114:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e118:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 801e11c:	eef0 6a68 	vmov.f32	s13, s17
 801e120:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e124:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 801e128:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801e12c:	ee69 7a27 	vmul.f32	s15, s18, s15
 801e130:	ee37 8a48 	vsub.f32	s16, s14, s16
 801e134:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801e138:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801e13c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801e140:	ee18 2a10 	vmov	r2, s16
 801e144:	eeb0 8a47 	vmov.f32	s16, s14
 801e148:	fb92 f3f3 	sdiv	r3, r2, r3
 801e14c:	ee18 2a90 	vmov	r2, s17
 801e150:	932f      	str	r3, [sp, #188]	; 0xbc
 801e152:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e154:	eef0 8a67 	vmov.f32	s17, s15
 801e158:	fb92 f3f3 	sdiv	r3, r2, r3
 801e15c:	9330      	str	r3, [sp, #192]	; 0xc0
 801e15e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e160:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801e162:	3b01      	subs	r3, #1
 801e164:	9314      	str	r3, [sp, #80]	; 0x50
 801e166:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e168:	bf08      	it	eq
 801e16a:	4613      	moveq	r3, r2
 801e16c:	930a      	str	r3, [sp, #40]	; 0x28
 801e16e:	e611      	b.n	801dd94 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801e170:	b161      	cbz	r1, 801e18c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45c>
 801e172:	5d2a      	ldrb	r2, [r5, r4]
 801e174:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801e176:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801e17a:	25ff      	movs	r5, #255	; 0xff
 801e17c:	ea4f 6912 	mov.w	r9, r2, lsr #24
 801e180:	920b      	str	r2, [sp, #44]	; 0x2c
 801e182:	46ae      	mov	lr, r5
 801e184:	e69d      	b.n	801dec2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 801e186:	25ff      	movs	r5, #255	; 0xff
 801e188:	46a9      	mov	r9, r5
 801e18a:	e69a      	b.n	801dec2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 801e18c:	25ff      	movs	r5, #255	; 0xff
 801e18e:	46a9      	mov	r9, r5
 801e190:	e7f7      	b.n	801e182 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x452>
 801e192:	1c57      	adds	r7, r2, #1
 801e194:	d18f      	bne.n	801e0b6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801e196:	4294      	cmp	r4, r2
 801e198:	dd8d      	ble.n	801e0b6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801e19a:	1c5d      	adds	r5, r3, #1
 801e19c:	db8b      	blt.n	801e0b6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801e19e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801e1a0:	429d      	cmp	r5, r3
 801e1a2:	dd88      	ble.n	801e0b6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801e1a4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 801e1a6:	9202      	str	r2, [sp, #8]
 801e1a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e1aa:	e9cd 3003 	strd	r3, r0, [sp, #12]
 801e1ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e1b0:	9819      	ldr	r0, [sp, #100]	; 0x64
 801e1b2:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801e1b6:	e9cd 4300 	strd	r4, r3, [sp]
 801e1ba:	4631      	mov	r1, r6
 801e1bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e1be:	f7ff fc63 	bl	801da88 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 801e1c2:	e778      	b.n	801e0b6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801e1c4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801e1c6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801e1c8:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801e1cc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801e1ce:	1412      	asrs	r2, r2, #16
 801e1d0:	f3c3 3003 	ubfx	r0, r3, #12, #4
 801e1d4:	141b      	asrs	r3, r3, #16
 801e1d6:	fb04 2303 	mla	r3, r4, r3, r2
 801e1da:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e1dc:	18d5      	adds	r5, r2, r3
 801e1de:	5cd3      	ldrb	r3, [r2, r3]
 801e1e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e1e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801e1e6:	0e1e      	lsrs	r6, r3, #24
 801e1e8:	2900      	cmp	r1, #0
 801e1ea:	f000 811b 	beq.w	801e424 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f4>
 801e1ee:	786a      	ldrb	r2, [r5, #1]
 801e1f0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801e1f2:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801e1f6:	9210      	str	r2, [sp, #64]	; 0x40
 801e1f8:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 801e1fc:	2800      	cmp	r0, #0
 801e1fe:	f000 811c 	beq.w	801e43a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70a>
 801e202:	192a      	adds	r2, r5, r4
 801e204:	5d2d      	ldrb	r5, [r5, r4]
 801e206:	7852      	ldrb	r2, [r2, #1]
 801e208:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801e20c:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801e210:	950c      	str	r5, [sp, #48]	; 0x30
 801e212:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801e216:	0e15      	lsrs	r5, r2, #24
 801e218:	9211      	str	r2, [sp, #68]	; 0x44
 801e21a:	b289      	uxth	r1, r1
 801e21c:	b280      	uxth	r0, r0
 801e21e:	fb01 fa00 	mul.w	sl, r1, r0
 801e222:	0109      	lsls	r1, r1, #4
 801e224:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801e228:	eba1 080a 	sub.w	r8, r1, sl
 801e22c:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801e230:	b280      	uxth	r0, r0
 801e232:	fa1f f888 	uxth.w	r8, r8
 801e236:	1a12      	subs	r2, r2, r0
 801e238:	fb08 f10c 	mul.w	r1, r8, ip
 801e23c:	b292      	uxth	r2, r2
 801e23e:	fb02 1106 	mla	r1, r2, r6, r1
 801e242:	fb00 1109 	mla	r1, r0, r9, r1
 801e246:	fb0a 1105 	mla	r1, sl, r5, r1
 801e24a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801e24e:	2900      	cmp	r1, #0
 801e250:	f000 80da 	beq.w	801e408 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d8>
 801e254:	2eff      	cmp	r6, #255	; 0xff
 801e256:	d016      	beq.n	801e286 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x556>
 801e258:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801e25c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e260:	4377      	muls	r7, r6
 801e262:	435e      	muls	r6, r3
 801e264:	0a3b      	lsrs	r3, r7, #8
 801e266:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801e26a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e26e:	443b      	add	r3, r7
 801e270:	f506 7780 	add.w	r7, r6, #256	; 0x100
 801e274:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801e278:	0a1b      	lsrs	r3, r3, #8
 801e27a:	0a3f      	lsrs	r7, r7, #8
 801e27c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e280:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801e284:	433b      	orrs	r3, r7
 801e286:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801e28a:	d01d      	beq.n	801e2c8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x598>
 801e28c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801e28e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801e290:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801e294:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801e298:	fb0c f606 	mul.w	r6, ip, r6
 801e29c:	fb0c fc07 	mul.w	ip, ip, r7
 801e2a0:	0a37      	lsrs	r7, r6, #8
 801e2a2:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801e2a6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801e2aa:	4437      	add	r7, r6
 801e2ac:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 801e2b0:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 801e2b4:	0a3f      	lsrs	r7, r7, #8
 801e2b6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e2ba:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801e2be:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801e2c2:	ea47 060c 	orr.w	r6, r7, ip
 801e2c6:	9610      	str	r6, [sp, #64]	; 0x40
 801e2c8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801e2cc:	d01d      	beq.n	801e30a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5da>
 801e2ce:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801e2d0:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801e2d4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801e2d8:	fb09 fc0c 	mul.w	ip, r9, ip
 801e2dc:	fb09 f906 	mul.w	r9, r9, r6
 801e2e0:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801e2e4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801e2e8:	f509 7680 	add.w	r6, r9, #256	; 0x100
 801e2ec:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801e2f0:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801e2f4:	4467      	add	r7, ip
 801e2f6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801e2fa:	0a3f      	lsrs	r7, r7, #8
 801e2fc:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801e300:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801e304:	ea47 0609 	orr.w	r6, r7, r9
 801e308:	960c      	str	r6, [sp, #48]	; 0x30
 801e30a:	2dff      	cmp	r5, #255	; 0xff
 801e30c:	d01a      	beq.n	801e344 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x614>
 801e30e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801e310:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801e314:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801e318:	fb05 fc0c 	mul.w	ip, r5, ip
 801e31c:	4375      	muls	r5, r6
 801e31e:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801e322:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801e326:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801e32a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801e32e:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801e332:	4467      	add	r7, ip
 801e334:	0a2d      	lsrs	r5, r5, #8
 801e336:	0a3f      	lsrs	r7, r7, #8
 801e338:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801e33c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801e340:	433d      	orrs	r5, r7
 801e342:	9511      	str	r5, [sp, #68]	; 0x44
 801e344:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801e346:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 801e34a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e34e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801e352:	fb08 f505 	mul.w	r5, r8, r5
 801e356:	fb02 5506 	mla	r5, r2, r6, r5
 801e35a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801e35c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801e360:	fb00 5506 	mla	r5, r0, r6, r5
 801e364:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801e366:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801e36a:	fb0a 5506 	mla	r5, sl, r6, r5
 801e36e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801e370:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801e374:	0a2d      	lsrs	r5, r5, #8
 801e376:	fb08 f806 	mul.w	r8, r8, r6
 801e37a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801e37e:	fb02 8303 	mla	r3, r2, r3, r8
 801e382:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e384:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801e388:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e38a:	fb00 3307 	mla	r3, r0, r7, r3
 801e38e:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801e392:	fb0a 3c0c 	mla	ip, sl, ip, r3
 801e396:	fb01 f30b 	mul.w	r3, r1, fp
 801e39a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e39e:	1c59      	adds	r1, r3, #1
 801e3a0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801e3a4:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801e3a8:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801e3ac:	ea45 050c 	orr.w	r5, r5, ip
 801e3b0:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801e3b4:	b2ea      	uxtb	r2, r5
 801e3b6:	b2c9      	uxtb	r1, r1
 801e3b8:	fb12 f20b 	smulbb	r2, r2, fp
 801e3bc:	fb03 2301 	mla	r3, r3, r1, r2
 801e3c0:	b29b      	uxth	r3, r3
 801e3c2:	1c5a      	adds	r2, r3, #1
 801e3c4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e3c8:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801e3cc:	fb12 f201 	smulbb	r2, r2, r1
 801e3d0:	121b      	asrs	r3, r3, #8
 801e3d2:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801e3d6:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801e3da:	0c2d      	lsrs	r5, r5, #16
 801e3dc:	fb03 230b 	mla	r3, r3, fp, r2
 801e3e0:	b29b      	uxth	r3, r3
 801e3e2:	1c5a      	adds	r2, r3, #1
 801e3e4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e3e8:	121b      	asrs	r3, r3, #8
 801e3ea:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801e3ee:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801e3f2:	fb13 f101 	smulbb	r1, r3, r1
 801e3f6:	fb05 150b 	mla	r5, r5, fp, r1
 801e3fa:	b2ad      	uxth	r5, r5
 801e3fc:	1c69      	adds	r1, r5, #1
 801e3fe:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801e402:	122d      	asrs	r5, r5, #8
 801e404:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801e408:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801e40a:	f10e 0e03 	add.w	lr, lr, #3
 801e40e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801e410:	4413      	add	r3, r2
 801e412:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801e414:	932d      	str	r3, [sp, #180]	; 0xb4
 801e416:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801e418:	4413      	add	r3, r2
 801e41a:	932e      	str	r3, [sp, #184]	; 0xb8
 801e41c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e41e:	3b01      	subs	r3, #1
 801e420:	9315      	str	r3, [sp, #84]	; 0x54
 801e422:	e4ed      	b.n	801de00 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801e424:	b160      	cbz	r0, 801e440 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x710>
 801e426:	5d2a      	ldrb	r2, [r5, r4]
 801e428:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801e42a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801e42e:	25ff      	movs	r5, #255	; 0xff
 801e430:	ea4f 6912 	mov.w	r9, r2, lsr #24
 801e434:	920c      	str	r2, [sp, #48]	; 0x30
 801e436:	46ac      	mov	ip, r5
 801e438:	e6ef      	b.n	801e21a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 801e43a:	25ff      	movs	r5, #255	; 0xff
 801e43c:	46a9      	mov	r9, r5
 801e43e:	e6ec      	b.n	801e21a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 801e440:	25ff      	movs	r5, #255	; 0xff
 801e442:	46a9      	mov	r9, r5
 801e444:	e7f7      	b.n	801e436 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x706>
 801e446:	b01b      	add	sp, #108	; 0x6c
 801e448:	ecbd 8b08 	vpop	{d8-d11}
 801e44c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e450 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 801e450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e454:	b085      	sub	sp, #20
 801e456:	7888      	ldrb	r0, [r1, #2]
 801e458:	4692      	mov	sl, r2
 801e45a:	4698      	mov	r8, r3
 801e45c:	9000      	str	r0, [sp, #0]
 801e45e:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 801e462:	7848      	ldrb	r0, [r1, #1]
 801e464:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801e468:	9001      	str	r0, [sp, #4]
 801e46a:	7808      	ldrb	r0, [r1, #0]
 801e46c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801e470:	9002      	str	r0, [sp, #8]
 801e472:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801e476:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 801e47a:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 801e47e:	fb04 560c 	mla	r6, r4, ip, r5
 801e482:	2c00      	cmp	r4, #0
 801e484:	eb02 0e06 	add.w	lr, r2, r6
 801e488:	9a00      	ldr	r2, [sp, #0]
 801e48a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 801e48e:	9a01      	ldr	r2, [sp, #4]
 801e490:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 801e494:	db3e      	blt.n	801e514 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 801e496:	45a1      	cmp	r9, r4
 801e498:	dd3c      	ble.n	801e514 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 801e49a:	2d00      	cmp	r5, #0
 801e49c:	db38      	blt.n	801e510 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 801e49e:	45ac      	cmp	ip, r5
 801e4a0:	dd36      	ble.n	801e510 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 801e4a2:	f81a 2006 	ldrb.w	r2, [sl, r6]
 801e4a6:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 801e4aa:	1c6e      	adds	r6, r5, #1
 801e4ac:	d435      	bmi.n	801e51a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 801e4ae:	45b4      	cmp	ip, r6
 801e4b0:	dd33      	ble.n	801e51a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 801e4b2:	b393      	cbz	r3, 801e51a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 801e4b4:	f89e 6001 	ldrb.w	r6, [lr, #1]
 801e4b8:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 801e4bc:	3401      	adds	r4, #1
 801e4be:	d430      	bmi.n	801e522 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 801e4c0:	45a1      	cmp	r9, r4
 801e4c2:	dd2e      	ble.n	801e522 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 801e4c4:	b36f      	cbz	r7, 801e522 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 801e4c6:	2d00      	cmp	r5, #0
 801e4c8:	db29      	blt.n	801e51e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 801e4ca:	45ac      	cmp	ip, r5
 801e4cc:	dd27      	ble.n	801e51e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 801e4ce:	f81e 400c 	ldrb.w	r4, [lr, ip]
 801e4d2:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 801e4d6:	3501      	adds	r5, #1
 801e4d8:	d407      	bmi.n	801e4ea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801e4da:	45ac      	cmp	ip, r5
 801e4dc:	dd05      	ble.n	801e4ea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801e4de:	b123      	cbz	r3, 801e4ea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801e4e0:	44f4      	add	ip, lr
 801e4e2:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801e4e6:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 801e4ea:	2b0f      	cmp	r3, #15
 801e4ec:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801e4f0:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801e4f4:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801e4f8:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801e4fc:	d801      	bhi.n	801e502 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 801e4fe:	2f0f      	cmp	r7, #15
 801e500:	d911      	bls.n	801e526 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd6>
 801e502:	4b76      	ldr	r3, [pc, #472]	; (801e6dc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 801e504:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801e508:	4a75      	ldr	r2, [pc, #468]	; (801e6e0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 801e50a:	4876      	ldr	r0, [pc, #472]	; (801e6e4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 801e50c:	f004 ff94 	bl	8023438 <__assert_func>
 801e510:	4602      	mov	r2, r0
 801e512:	e7ca      	b.n	801e4aa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x5a>
 801e514:	4606      	mov	r6, r0
 801e516:	4602      	mov	r2, r0
 801e518:	e7d0      	b.n	801e4bc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 801e51a:	4606      	mov	r6, r0
 801e51c:	e7ce      	b.n	801e4bc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 801e51e:	4604      	mov	r4, r0
 801e520:	e7d9      	b.n	801e4d6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x86>
 801e522:	4604      	mov	r4, r0
 801e524:	e7e1      	b.n	801e4ea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801e526:	b29b      	uxth	r3, r3
 801e528:	b2bf      	uxth	r7, r7
 801e52a:	fb07 fe03 	mul.w	lr, r7, r3
 801e52e:	011b      	lsls	r3, r3, #4
 801e530:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801e534:	eba3 0c0e 	sub.w	ip, r3, lr
 801e538:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 801e53c:	b2bf      	uxth	r7, r7
 801e53e:	fa1f fc8c 	uxth.w	ip, ip
 801e542:	1bed      	subs	r5, r5, r7
 801e544:	fb0c f30a 	mul.w	r3, ip, sl
 801e548:	b2ad      	uxth	r5, r5
 801e54a:	fb05 330b 	mla	r3, r5, fp, r3
 801e54e:	fb07 3309 	mla	r3, r7, r9, r3
 801e552:	fb0e 3308 	mla	r3, lr, r8, r3
 801e556:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e55a:	9303      	str	r3, [sp, #12]
 801e55c:	2b00      	cmp	r3, #0
 801e55e:	f000 80b9 	beq.w	801e6d4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x284>
 801e562:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801e566:	d018      	beq.n	801e59a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x14a>
 801e568:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801e56c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801e570:	fb0b f303 	mul.w	r3, fp, r3
 801e574:	fb0b fb02 	mul.w	fp, fp, r2
 801e578:	0a1a      	lsrs	r2, r3, #8
 801e57a:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 801e57e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801e582:	441a      	add	r2, r3
 801e584:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 801e588:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 801e58c:	0a12      	lsrs	r2, r2, #8
 801e58e:	0a1b      	lsrs	r3, r3, #8
 801e590:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801e594:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e598:	431a      	orrs	r2, r3
 801e59a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801e59e:	d019      	beq.n	801e5d4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x184>
 801e5a0:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 801e5a4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801e5a8:	fb0a fb0b 	mul.w	fp, sl, fp
 801e5ac:	fb0a fa06 	mul.w	sl, sl, r6
 801e5b0:	ea4f 261b 	mov.w	r6, fp, lsr #8
 801e5b4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801e5b8:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 801e5bc:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801e5c0:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801e5c4:	445e      	add	r6, fp
 801e5c6:	0a1b      	lsrs	r3, r3, #8
 801e5c8:	0a36      	lsrs	r6, r6, #8
 801e5ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e5ce:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801e5d2:	431e      	orrs	r6, r3
 801e5d4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801e5d8:	d019      	beq.n	801e60e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1be>
 801e5da:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801e5de:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801e5e2:	fb09 fa0a 	mul.w	sl, r9, sl
 801e5e6:	fb09 f904 	mul.w	r9, r9, r4
 801e5ea:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801e5ee:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801e5f2:	f509 7380 	add.w	r3, r9, #256	; 0x100
 801e5f6:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801e5fa:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 801e5fe:	4454      	add	r4, sl
 801e600:	0a1b      	lsrs	r3, r3, #8
 801e602:	0a24      	lsrs	r4, r4, #8
 801e604:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e608:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801e60c:	431c      	orrs	r4, r3
 801e60e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801e612:	d019      	beq.n	801e648 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f8>
 801e614:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 801e618:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801e61c:	fb08 f909 	mul.w	r9, r8, r9
 801e620:	fb08 f800 	mul.w	r8, r8, r0
 801e624:	ea4f 2019 	mov.w	r0, r9, lsr #8
 801e628:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801e62c:	f508 7380 	add.w	r3, r8, #256	; 0x100
 801e630:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801e634:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 801e638:	4448      	add	r0, r9
 801e63a:	0a1b      	lsrs	r3, r3, #8
 801e63c:	0a00      	lsrs	r0, r0, #8
 801e63e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e642:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801e646:	4318      	orrs	r0, r3
 801e648:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801e64c:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801e650:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801e654:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801e658:	fb0c f808 	mul.w	r8, ip, r8
 801e65c:	fb0c f606 	mul.w	r6, ip, r6
 801e660:	fb05 8803 	mla	r8, r5, r3, r8
 801e664:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 801e668:	fb05 6202 	mla	r2, r5, r2, r6
 801e66c:	fb07 8803 	mla	r8, r7, r3, r8
 801e670:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 801e674:	fb0e 8303 	mla	r3, lr, r3, r8
 801e678:	0a1b      	lsrs	r3, r3, #8
 801e67a:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 801e67e:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 801e682:	9c02      	ldr	r4, [sp, #8]
 801e684:	fb07 2703 	mla	r7, r7, r3, r2
 801e688:	9a03      	ldr	r2, [sp, #12]
 801e68a:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 801e68e:	43d2      	mvns	r2, r2
 801e690:	fb0e 7303 	mla	r3, lr, r3, r7
 801e694:	b2d2      	uxtb	r2, r2
 801e696:	0a1b      	lsrs	r3, r3, #8
 801e698:	4354      	muls	r4, r2
 801e69a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e69e:	1c60      	adds	r0, r4, #1
 801e6a0:	ea48 0303 	orr.w	r3, r8, r3
 801e6a4:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 801e6a8:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801e6ac:	7008      	strb	r0, [r1, #0]
 801e6ae:	9801      	ldr	r0, [sp, #4]
 801e6b0:	4350      	muls	r0, r2
 801e6b2:	1c44      	adds	r4, r0, #1
 801e6b4:	eb04 2410 	add.w	r4, r4, r0, lsr #8
 801e6b8:	0a18      	lsrs	r0, r3, #8
 801e6ba:	0c1b      	lsrs	r3, r3, #16
 801e6bc:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 801e6c0:	7048      	strb	r0, [r1, #1]
 801e6c2:	9800      	ldr	r0, [sp, #0]
 801e6c4:	4350      	muls	r0, r2
 801e6c6:	4602      	mov	r2, r0
 801e6c8:	3001      	adds	r0, #1
 801e6ca:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801e6ce:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801e6d2:	708b      	strb	r3, [r1, #2]
 801e6d4:	b005      	add	sp, #20
 801e6d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e6da:	bf00      	nop
 801e6dc:	08027bdb 	.word	0x08027bdb
 801e6e0:	080280d2 	.word	0x080280d2
 801e6e4:	08027ca4 	.word	0x08027ca4

0801e6e8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801e6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e6ec:	ed2d 8b08 	vpush	{d8-d11}
 801e6f0:	b097      	sub	sp, #92	; 0x5c
 801e6f2:	eeb0 aa40 	vmov.f32	s20, s0
 801e6f6:	eef0 9a60 	vmov.f32	s19, s1
 801e6fa:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 801e6fc:	eeb0 9a41 	vmov.f32	s18, s2
 801e700:	9308      	str	r3, [sp, #32]
 801e702:	eeb0 8a62 	vmov.f32	s16, s5
 801e706:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 801e70a:	eef0 8a43 	vmov.f32	s17, s6
 801e70e:	9015      	str	r0, [sp, #84]	; 0x54
 801e710:	eef0 ba44 	vmov.f32	s23, s8
 801e714:	6868      	ldr	r0, [r5, #4]
 801e716:	eeb0 ba64 	vmov.f32	s22, s9
 801e71a:	9112      	str	r1, [sp, #72]	; 0x48
 801e71c:	eef0 aa45 	vmov.f32	s21, s10
 801e720:	9310      	str	r3, [sp, #64]	; 0x40
 801e722:	9214      	str	r2, [sp, #80]	; 0x50
 801e724:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 801e726:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 801e72a:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801e72e:	fb00 1303 	mla	r3, r0, r3, r1
 801e732:	6829      	ldr	r1, [r5, #0]
 801e734:	6855      	ldr	r5, [r2, #4]
 801e736:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e73a:	3504      	adds	r5, #4
 801e73c:	18cb      	adds	r3, r1, r3
 801e73e:	930b      	str	r3, [sp, #44]	; 0x2c
 801e740:	6813      	ldr	r3, [r2, #0]
 801e742:	9311      	str	r3, [sp, #68]	; 0x44
 801e744:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e746:	2b00      	cmp	r3, #0
 801e748:	dc03      	bgt.n	801e752 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801e74a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e74c:	2b00      	cmp	r3, #0
 801e74e:	f340 8333 	ble.w	801edb8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 801e752:	9b08      	ldr	r3, [sp, #32]
 801e754:	2b00      	cmp	r3, #0
 801e756:	f340 8190 	ble.w	801ea7a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 801e75a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801e75c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e75e:	1412      	asrs	r2, r2, #16
 801e760:	ea4f 4323 	mov.w	r3, r3, asr #16
 801e764:	d42f      	bmi.n	801e7c6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801e766:	1c51      	adds	r1, r2, #1
 801e768:	428c      	cmp	r4, r1
 801e76a:	dd2f      	ble.n	801e7cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801e76c:	2b00      	cmp	r3, #0
 801e76e:	db2d      	blt.n	801e7cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801e770:	1c59      	adds	r1, r3, #1
 801e772:	9810      	ldr	r0, [sp, #64]	; 0x40
 801e774:	4288      	cmp	r0, r1
 801e776:	dd29      	ble.n	801e7cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801e778:	9b08      	ldr	r3, [sp, #32]
 801e77a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801e77c:	3b01      	subs	r3, #1
 801e77e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801e780:	fb02 1203 	mla	r2, r2, r3, r1
 801e784:	1412      	asrs	r2, r2, #16
 801e786:	d42b      	bmi.n	801e7e0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801e788:	3201      	adds	r2, #1
 801e78a:	4294      	cmp	r4, r2
 801e78c:	dd28      	ble.n	801e7e0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801e78e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801e790:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801e792:	fb02 1303 	mla	r3, r2, r3, r1
 801e796:	141b      	asrs	r3, r3, #16
 801e798:	d422      	bmi.n	801e7e0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801e79a:	3301      	adds	r3, #1
 801e79c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e79e:	429a      	cmp	r2, r3
 801e7a0:	dd1e      	ble.n	801e7e0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801e7a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e7a4:	f103 0803 	add.w	r8, r3, #3
 801e7a8:	9b08      	ldr	r3, [sp, #32]
 801e7aa:	9307      	str	r3, [sp, #28]
 801e7ac:	9b07      	ldr	r3, [sp, #28]
 801e7ae:	2b00      	cmp	r3, #0
 801e7b0:	f300 81ca 	bgt.w	801eb48 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x460>
 801e7b4:	9b08      	ldr	r3, [sp, #32]
 801e7b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e7b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e7bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e7c0:	441a      	add	r2, r3
 801e7c2:	920b      	str	r2, [sp, #44]	; 0x2c
 801e7c4:	e15b      	b.n	801ea7e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 801e7c6:	1c51      	adds	r1, r2, #1
 801e7c8:	f040 8148 	bne.w	801ea5c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 801e7cc:	42a2      	cmp	r2, r4
 801e7ce:	f280 8145 	bge.w	801ea5c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 801e7d2:	1c5a      	adds	r2, r3, #1
 801e7d4:	f2c0 8142 	blt.w	801ea5c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 801e7d8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e7da:	4293      	cmp	r3, r2
 801e7dc:	f280 813e 	bge.w	801ea5c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 801e7e0:	9b08      	ldr	r3, [sp, #32]
 801e7e2:	9313      	str	r3, [sp, #76]	; 0x4c
 801e7e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e7e6:	9307      	str	r3, [sp, #28]
 801e7e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e7ea:	2b00      	cmp	r3, #0
 801e7ec:	dde2      	ble.n	801e7b4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 801e7ee:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801e7f0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e7f2:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801e7f6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801e7f8:	141b      	asrs	r3, r3, #16
 801e7fa:	f3c2 3003 	ubfx	r0, r2, #12, #4
 801e7fe:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801e800:	1412      	asrs	r2, r2, #16
 801e802:	f100 818b 	bmi.w	801eb1c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x434>
 801e806:	1c56      	adds	r6, r2, #1
 801e808:	42b4      	cmp	r4, r6
 801e80a:	f340 8189 	ble.w	801eb20 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 801e80e:	2b00      	cmp	r3, #0
 801e810:	f2c0 8186 	blt.w	801eb20 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 801e814:	1c5e      	adds	r6, r3, #1
 801e816:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801e818:	42b7      	cmp	r7, r6
 801e81a:	f340 8181 	ble.w	801eb20 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 801e81e:	fb03 2304 	mla	r3, r3, r4, r2
 801e822:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e824:	18d6      	adds	r6, r2, r3
 801e826:	5cd3      	ldrb	r3, [r2, r3]
 801e828:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801e82c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801e830:	2900      	cmp	r1, #0
 801e832:	f000 8163 	beq.w	801eafc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 801e836:	7872      	ldrb	r2, [r6, #1]
 801e838:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801e83c:	920c      	str	r2, [sp, #48]	; 0x30
 801e83e:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801e842:	2800      	cmp	r0, #0
 801e844:	f000 8164 	beq.w	801eb10 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x428>
 801e848:	1932      	adds	r2, r6, r4
 801e84a:	5d36      	ldrb	r6, [r6, r4]
 801e84c:	7852      	ldrb	r2, [r2, #1]
 801e84e:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 801e852:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801e856:	9609      	str	r6, [sp, #36]	; 0x24
 801e858:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801e85c:	0e16      	lsrs	r6, r2, #24
 801e85e:	920d      	str	r2, [sp, #52]	; 0x34
 801e860:	b289      	uxth	r1, r1
 801e862:	b280      	uxth	r0, r0
 801e864:	fb01 fb00 	mul.w	fp, r1, r0
 801e868:	0109      	lsls	r1, r1, #4
 801e86a:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 801e86e:	eba1 090b 	sub.w	r9, r1, fp
 801e872:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801e876:	b280      	uxth	r0, r0
 801e878:	fa1f f989 	uxth.w	r9, r9
 801e87c:	1a12      	subs	r2, r2, r0
 801e87e:	fb09 f108 	mul.w	r1, r9, r8
 801e882:	b292      	uxth	r2, r2
 801e884:	fb02 110c 	mla	r1, r2, ip, r1
 801e888:	fb00 110a 	mla	r1, r0, sl, r1
 801e88c:	fb0b 1106 	mla	r1, fp, r6, r1
 801e890:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801e894:	2900      	cmp	r1, #0
 801e896:	f000 80d2 	beq.w	801ea3e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801e89a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801e89e:	d01b      	beq.n	801e8d8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f0>
 801e8a0:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801e8a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e8a8:	fb0c fe0e 	mul.w	lr, ip, lr
 801e8ac:	fb0c fc03 	mul.w	ip, ip, r3
 801e8b0:	ea4f 231e 	mov.w	r3, lr, lsr #8
 801e8b4:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801e8b8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e8bc:	4473      	add	r3, lr
 801e8be:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 801e8c2:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 801e8c6:	0a1b      	lsrs	r3, r3, #8
 801e8c8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e8cc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e8d0:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801e8d4:	ea43 030e 	orr.w	r3, r3, lr
 801e8d8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801e8dc:	d01e      	beq.n	801e91c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x234>
 801e8de:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801e8e0:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801e8e4:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 801e8e8:	fb08 fc0c 	mul.w	ip, r8, ip
 801e8ec:	fb08 f80e 	mul.w	r8, r8, lr
 801e8f0:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801e8f4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801e8f8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e8fc:	44e6      	add	lr, ip
 801e8fe:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 801e902:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 801e906:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e90a:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801e90e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e912:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801e916:	ea4e 0708 	orr.w	r7, lr, r8
 801e91a:	970c      	str	r7, [sp, #48]	; 0x30
 801e91c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801e920:	d01e      	beq.n	801e960 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801e922:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801e924:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 801e928:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801e92c:	fb0a f808 	mul.w	r8, sl, r8
 801e930:	fb0a fa0c 	mul.w	sl, sl, ip
 801e934:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 801e938:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 801e93c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801e940:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e944:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e948:	44c6      	add	lr, r8
 801e94a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e94e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e952:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e956:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e95a:	ea4e 070a 	orr.w	r7, lr, sl
 801e95e:	9709      	str	r7, [sp, #36]	; 0x24
 801e960:	2eff      	cmp	r6, #255	; 0xff
 801e962:	d01d      	beq.n	801e9a0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>
 801e964:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801e966:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 801e96a:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801e96e:	fb06 f808 	mul.w	r8, r6, r8
 801e972:	fb06 f60c 	mul.w	r6, r6, ip
 801e976:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 801e97a:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 801e97e:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801e982:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e986:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801e98a:	44c6      	add	lr, r8
 801e98c:	0a36      	lsrs	r6, r6, #8
 801e98e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e992:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801e996:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e99a:	ea4e 0606 	orr.w	r6, lr, r6
 801e99e:	960d      	str	r6, [sp, #52]	; 0x34
 801e9a0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801e9a2:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801e9a6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801e9a8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e9ac:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801e9b0:	43c9      	mvns	r1, r1
 801e9b2:	fb09 f606 	mul.w	r6, r9, r6
 801e9b6:	b2c9      	uxtb	r1, r1
 801e9b8:	fb02 660c 	mla	r6, r2, ip, r6
 801e9bc:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801e9c0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801e9c2:	fb00 660c 	mla	r6, r0, ip, r6
 801e9c6:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801e9ca:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801e9cc:	fb0b 660c 	mla	r6, fp, ip, r6
 801e9d0:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801e9d4:	fb09 f90c 	mul.w	r9, r9, ip
 801e9d8:	0a36      	lsrs	r6, r6, #8
 801e9da:	fb02 9303 	mla	r3, r2, r3, r9
 801e9de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e9e0:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801e9e4:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 801e9e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e9ea:	fb00 330e 	mla	r3, r0, lr, r3
 801e9ee:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 801e9f2:	fb0b 3b00 	mla	fp, fp, r0, r3
 801e9f6:	9b07      	ldr	r3, [sp, #28]
 801e9f8:	781b      	ldrb	r3, [r3, #0]
 801e9fa:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801e9fe:	fb03 f201 	mul.w	r2, r3, r1
 801ea02:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801ea06:	1c53      	adds	r3, r2, #1
 801ea08:	ea46 060b 	orr.w	r6, r6, fp
 801ea0c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801ea10:	9a07      	ldr	r2, [sp, #28]
 801ea12:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801ea16:	7013      	strb	r3, [r2, #0]
 801ea18:	7853      	ldrb	r3, [r2, #1]
 801ea1a:	434b      	muls	r3, r1
 801ea1c:	1c5a      	adds	r2, r3, #1
 801ea1e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801ea22:	0a33      	lsrs	r3, r6, #8
 801ea24:	0c36      	lsrs	r6, r6, #16
 801ea26:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801ea2a:	9a07      	ldr	r2, [sp, #28]
 801ea2c:	7053      	strb	r3, [r2, #1]
 801ea2e:	7893      	ldrb	r3, [r2, #2]
 801ea30:	4359      	muls	r1, r3
 801ea32:	1c4b      	adds	r3, r1, #1
 801ea34:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801ea38:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 801ea3c:	7096      	strb	r6, [r2, #2]
 801ea3e:	9b07      	ldr	r3, [sp, #28]
 801ea40:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801ea42:	3303      	adds	r3, #3
 801ea44:	9307      	str	r3, [sp, #28]
 801ea46:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801ea48:	4413      	add	r3, r2
 801ea4a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801ea4c:	9329      	str	r3, [sp, #164]	; 0xa4
 801ea4e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ea50:	4413      	add	r3, r2
 801ea52:	932a      	str	r3, [sp, #168]	; 0xa8
 801ea54:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ea56:	3b01      	subs	r3, #1
 801ea58:	9313      	str	r3, [sp, #76]	; 0x4c
 801ea5a:	e6c5      	b.n	801e7e8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 801ea5c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801ea5e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801ea60:	4413      	add	r3, r2
 801ea62:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801ea64:	9329      	str	r3, [sp, #164]	; 0xa4
 801ea66:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ea68:	4413      	add	r3, r2
 801ea6a:	932a      	str	r3, [sp, #168]	; 0xa8
 801ea6c:	9b08      	ldr	r3, [sp, #32]
 801ea6e:	3b01      	subs	r3, #1
 801ea70:	9308      	str	r3, [sp, #32]
 801ea72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ea74:	3303      	adds	r3, #3
 801ea76:	930b      	str	r3, [sp, #44]	; 0x2c
 801ea78:	e66b      	b.n	801e752 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801ea7a:	f47f ae7d 	bne.w	801e778 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 801ea7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ea80:	2b00      	cmp	r3, #0
 801ea82:	f340 8199 	ble.w	801edb8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 801ea86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ea8a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ea8c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801ea90:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801ea94:	eef0 6a48 	vmov.f32	s13, s16
 801ea98:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801ea9c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801eaa0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801eaa4:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 801eaa8:	eef0 6a68 	vmov.f32	s13, s17
 801eaac:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801eab0:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 801eab4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801eab8:	ee69 7a27 	vmul.f32	s15, s18, s15
 801eabc:	ee37 8a48 	vsub.f32	s16, s14, s16
 801eac0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801eac4:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801eac8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801eacc:	ee18 2a10 	vmov	r2, s16
 801ead0:	eeb0 8a47 	vmov.f32	s16, s14
 801ead4:	fb92 f3f3 	sdiv	r3, r2, r3
 801ead8:	ee18 2a90 	vmov	r2, s17
 801eadc:	932b      	str	r3, [sp, #172]	; 0xac
 801eade:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801eae0:	eef0 8a67 	vmov.f32	s17, s15
 801eae4:	fb92 f3f3 	sdiv	r3, r2, r3
 801eae8:	932c      	str	r3, [sp, #176]	; 0xb0
 801eaea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801eaec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801eaee:	3b01      	subs	r3, #1
 801eaf0:	9312      	str	r3, [sp, #72]	; 0x48
 801eaf2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801eaf4:	bf08      	it	eq
 801eaf6:	4613      	moveq	r3, r2
 801eaf8:	9308      	str	r3, [sp, #32]
 801eafa:	e623      	b.n	801e744 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801eafc:	b158      	cbz	r0, 801eb16 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 801eafe:	5d32      	ldrb	r2, [r6, r4]
 801eb00:	26ff      	movs	r6, #255	; 0xff
 801eb02:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801eb06:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 801eb0a:	9209      	str	r2, [sp, #36]	; 0x24
 801eb0c:	46b0      	mov	r8, r6
 801eb0e:	e6a7      	b.n	801e860 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 801eb10:	26ff      	movs	r6, #255	; 0xff
 801eb12:	46b2      	mov	sl, r6
 801eb14:	e6a4      	b.n	801e860 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 801eb16:	26ff      	movs	r6, #255	; 0xff
 801eb18:	46b2      	mov	sl, r6
 801eb1a:	e7f7      	b.n	801eb0c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 801eb1c:	1c57      	adds	r7, r2, #1
 801eb1e:	d18e      	bne.n	801ea3e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801eb20:	4294      	cmp	r4, r2
 801eb22:	dd8c      	ble.n	801ea3e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801eb24:	1c5e      	adds	r6, r3, #1
 801eb26:	db8a      	blt.n	801ea3e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801eb28:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801eb2a:	429e      	cmp	r6, r3
 801eb2c:	dd87      	ble.n	801ea3e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801eb2e:	e9cd 1004 	strd	r1, r0, [sp, #16]
 801eb32:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801eb36:	e9cd 4600 	strd	r4, r6, [sp]
 801eb3a:	462b      	mov	r3, r5
 801eb3c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801eb3e:	9907      	ldr	r1, [sp, #28]
 801eb40:	9815      	ldr	r0, [sp, #84]	; 0x54
 801eb42:	f7ff fc85 	bl	801e450 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 801eb46:	e77a      	b.n	801ea3e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801eb48:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801eb4a:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801eb4c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801eb50:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801eb52:	1409      	asrs	r1, r1, #16
 801eb54:	f3c3 3003 	ubfx	r0, r3, #12, #4
 801eb58:	141b      	asrs	r3, r3, #16
 801eb5a:	fb04 1303 	mla	r3, r4, r3, r1
 801eb5e:	9911      	ldr	r1, [sp, #68]	; 0x44
 801eb60:	18ce      	adds	r6, r1, r3
 801eb62:	5ccb      	ldrb	r3, [r1, r3]
 801eb64:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801eb68:	0e1f      	lsrs	r7, r3, #24
 801eb6a:	2a00      	cmp	r2, #0
 801eb6c:	f000 8114 	beq.w	801ed98 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b0>
 801eb70:	7871      	ldrb	r1, [r6, #1]
 801eb72:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 801eb76:	910e      	str	r1, [sp, #56]	; 0x38
 801eb78:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 801eb7c:	2800      	cmp	r0, #0
 801eb7e:	f000 8115 	beq.w	801edac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c4>
 801eb82:	1931      	adds	r1, r6, r4
 801eb84:	5d36      	ldrb	r6, [r6, r4]
 801eb86:	7849      	ldrb	r1, [r1, #1]
 801eb88:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 801eb8c:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 801eb90:	960a      	str	r6, [sp, #40]	; 0x28
 801eb92:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801eb96:	0e0e      	lsrs	r6, r1, #24
 801eb98:	910f      	str	r1, [sp, #60]	; 0x3c
 801eb9a:	b292      	uxth	r2, r2
 801eb9c:	b280      	uxth	r0, r0
 801eb9e:	fb02 fb00 	mul.w	fp, r2, r0
 801eba2:	0112      	lsls	r2, r2, #4
 801eba4:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 801eba8:	eba2 090b 	sub.w	r9, r2, fp
 801ebac:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801ebb0:	b280      	uxth	r0, r0
 801ebb2:	fa1f f989 	uxth.w	r9, r9
 801ebb6:	1a09      	subs	r1, r1, r0
 801ebb8:	fb09 f20e 	mul.w	r2, r9, lr
 801ebbc:	b289      	uxth	r1, r1
 801ebbe:	fb01 2207 	mla	r2, r1, r7, r2
 801ebc2:	fb00 220a 	mla	r2, r0, sl, r2
 801ebc6:	fb0b 2206 	mla	r2, fp, r6, r2
 801ebca:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801ebce:	9213      	str	r2, [sp, #76]	; 0x4c
 801ebd0:	2a00      	cmp	r2, #0
 801ebd2:	f000 80d4 	beq.w	801ed7e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x696>
 801ebd6:	2fff      	cmp	r7, #255	; 0xff
 801ebd8:	d01a      	beq.n	801ec10 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x528>
 801ebda:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801ebde:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ebe2:	fb07 fc0c 	mul.w	ip, r7, ip
 801ebe6:	435f      	muls	r7, r3
 801ebe8:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801ebec:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801ebf0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ebf4:	4463      	add	r3, ip
 801ebf6:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 801ebfa:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 801ebfe:	0a1b      	lsrs	r3, r3, #8
 801ec00:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ec04:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ec08:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801ec0c:	ea43 030c 	orr.w	r3, r3, ip
 801ec10:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801ec14:	d01f      	beq.n	801ec56 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56e>
 801ec16:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801ec18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ec1a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801ec1e:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801ec22:	fb0e f707 	mul.w	r7, lr, r7
 801ec26:	fb0e fe0c 	mul.w	lr, lr, ip
 801ec2a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ec2e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801ec32:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ec36:	44bc      	add	ip, r7
 801ec38:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 801ec3c:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 801ec40:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ec44:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ec48:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ec4c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801ec50:	ea4c 020e 	orr.w	r2, ip, lr
 801ec54:	920e      	str	r2, [sp, #56]	; 0x38
 801ec56:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801ec5a:	d01e      	beq.n	801ec9a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b2>
 801ec5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ec5e:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801ec62:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801ec66:	fb0a fe0e 	mul.w	lr, sl, lr
 801ec6a:	fb0a fa07 	mul.w	sl, sl, r7
 801ec6e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801ec72:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801ec76:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801ec7a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ec7e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ec82:	44f4      	add	ip, lr
 801ec84:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ec88:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ec8c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ec90:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ec94:	ea4c 020a 	orr.w	r2, ip, sl
 801ec98:	920a      	str	r2, [sp, #40]	; 0x28
 801ec9a:	2eff      	cmp	r6, #255	; 0xff
 801ec9c:	d01c      	beq.n	801ecd8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f0>
 801ec9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801eca0:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801eca4:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801eca8:	fb06 fe0e 	mul.w	lr, r6, lr
 801ecac:	437e      	muls	r6, r7
 801ecae:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801ecb2:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801ecb6:	f506 7780 	add.w	r7, r6, #256	; 0x100
 801ecba:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ecbe:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 801ecc2:	44f4      	add	ip, lr
 801ecc4:	0a36      	lsrs	r6, r6, #8
 801ecc6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ecca:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801ecce:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ecd2:	ea4c 0206 	orr.w	r2, ip, r6
 801ecd6:	920f      	str	r2, [sp, #60]	; 0x3c
 801ecd8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ecda:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801ecde:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ece2:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 801ece6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ece8:	fb09 f606 	mul.w	r6, r9, r6
 801ecec:	fb01 6607 	mla	r6, r1, r7, r6
 801ecf0:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 801ecf4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ecf6:	fb00 6607 	mla	r6, r0, r7, r6
 801ecfa:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 801ecfe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ed00:	fb0b 6607 	mla	r6, fp, r7, r6
 801ed04:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801ed08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ed0a:	fb09 f907 	mul.w	r9, r9, r7
 801ed0e:	0a36      	lsrs	r6, r6, #8
 801ed10:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801ed14:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ed16:	fb01 9303 	mla	r3, r1, r3, r9
 801ed1a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801ed1e:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 801ed22:	fb00 330c 	mla	r3, r0, ip, r3
 801ed26:	fb0b 3e0e 	mla	lr, fp, lr, r3
 801ed2a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ed2c:	43da      	mvns	r2, r3
 801ed2e:	f818 3c03 	ldrb.w	r3, [r8, #-3]
 801ed32:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ed36:	b2d2      	uxtb	r2, r2
 801ed38:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801ed3c:	fb03 f102 	mul.w	r1, r3, r2
 801ed40:	ea46 060e 	orr.w	r6, r6, lr
 801ed44:	1c4b      	adds	r3, r1, #1
 801ed46:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801ed4a:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801ed4e:	f808 3c03 	strb.w	r3, [r8, #-3]
 801ed52:	f818 3c02 	ldrb.w	r3, [r8, #-2]
 801ed56:	4353      	muls	r3, r2
 801ed58:	1c59      	adds	r1, r3, #1
 801ed5a:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801ed5e:	0a33      	lsrs	r3, r6, #8
 801ed60:	0c36      	lsrs	r6, r6, #16
 801ed62:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801ed66:	f808 3c02 	strb.w	r3, [r8, #-2]
 801ed6a:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801ed6e:	435a      	muls	r2, r3
 801ed70:	1c53      	adds	r3, r2, #1
 801ed72:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801ed76:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 801ed7a:	f808 6c01 	strb.w	r6, [r8, #-1]
 801ed7e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801ed80:	f108 0803 	add.w	r8, r8, #3
 801ed84:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801ed86:	4413      	add	r3, r2
 801ed88:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801ed8a:	9329      	str	r3, [sp, #164]	; 0xa4
 801ed8c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ed8e:	4413      	add	r3, r2
 801ed90:	932a      	str	r3, [sp, #168]	; 0xa8
 801ed92:	9b07      	ldr	r3, [sp, #28]
 801ed94:	3b01      	subs	r3, #1
 801ed96:	e508      	b.n	801e7aa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc2>
 801ed98:	b158      	cbz	r0, 801edb2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ca>
 801ed9a:	5d31      	ldrb	r1, [r6, r4]
 801ed9c:	26ff      	movs	r6, #255	; 0xff
 801ed9e:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 801eda2:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 801eda6:	910a      	str	r1, [sp, #40]	; 0x28
 801eda8:	46b6      	mov	lr, r6
 801edaa:	e6f6      	b.n	801eb9a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 801edac:	26ff      	movs	r6, #255	; 0xff
 801edae:	46b2      	mov	sl, r6
 801edb0:	e6f3      	b.n	801eb9a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 801edb2:	26ff      	movs	r6, #255	; 0xff
 801edb4:	46b2      	mov	sl, r6
 801edb6:	e7f7      	b.n	801eda8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c0>
 801edb8:	b017      	add	sp, #92	; 0x5c
 801edba:	ecbd 8b08 	vpop	{d8-d11}
 801edbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801edc4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 801edc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801edc8:	b08d      	sub	sp, #52	; 0x34
 801edca:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 801edce:	9103      	str	r1, [sp, #12]
 801edd0:	fb07 5803 	mla	r8, r7, r3, r5
 801edd4:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 801edd8:	9803      	ldr	r0, [sp, #12]
 801edda:	2f00      	cmp	r7, #0
 801eddc:	910b      	str	r1, [sp, #44]	; 0x2c
 801edde:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801ede2:	9903      	ldr	r1, [sp, #12]
 801ede4:	9c03      	ldr	r4, [sp, #12]
 801ede6:	eb02 0608 	add.w	r6, r2, r8
 801edea:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801edee:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 801edf2:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 801edf6:	7809      	ldrb	r1, [r1, #0]
 801edf8:	7840      	ldrb	r0, [r0, #1]
 801edfa:	78a4      	ldrb	r4, [r4, #2]
 801edfc:	db51      	blt.n	801eea2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 801edfe:	45be      	cmp	lr, r7
 801ee00:	dd4f      	ble.n	801eea2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 801ee02:	2d00      	cmp	r5, #0
 801ee04:	db49      	blt.n	801ee9a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 801ee06:	42ab      	cmp	r3, r5
 801ee08:	dd47      	ble.n	801ee9a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 801ee0a:	f812 2008 	ldrb.w	r2, [r2, r8]
 801ee0e:	9204      	str	r2, [sp, #16]
 801ee10:	7872      	ldrb	r2, [r6, #1]
 801ee12:	9205      	str	r2, [sp, #20]
 801ee14:	78b2      	ldrb	r2, [r6, #2]
 801ee16:	9206      	str	r2, [sp, #24]
 801ee18:	1c6a      	adds	r2, r5, #1
 801ee1a:	d449      	bmi.n	801eeb0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 801ee1c:	4293      	cmp	r3, r2
 801ee1e:	dd47      	ble.n	801eeb0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 801ee20:	f1bc 0f00 	cmp.w	ip, #0
 801ee24:	d044      	beq.n	801eeb0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 801ee26:	7972      	ldrb	r2, [r6, #5]
 801ee28:	f896 b003 	ldrb.w	fp, [r6, #3]
 801ee2c:	f896 a004 	ldrb.w	sl, [r6, #4]
 801ee30:	9201      	str	r2, [sp, #4]
 801ee32:	3701      	adds	r7, #1
 801ee34:	d444      	bmi.n	801eec0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 801ee36:	45be      	cmp	lr, r7
 801ee38:	dd42      	ble.n	801eec0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 801ee3a:	f1b9 0f00 	cmp.w	r9, #0
 801ee3e:	f000 80c1 	beq.w	801efc4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 801ee42:	2d00      	cmp	r5, #0
 801ee44:	db38      	blt.n	801eeb8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 801ee46:	42ab      	cmp	r3, r5
 801ee48:	dd36      	ble.n	801eeb8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 801ee4a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801ee4e:	f816 8002 	ldrb.w	r8, [r6, r2]
 801ee52:	2203      	movs	r2, #3
 801ee54:	fb03 6702 	mla	r7, r3, r2, r6
 801ee58:	fb03 6202 	mla	r2, r3, r2, r6
 801ee5c:	787f      	ldrb	r7, [r7, #1]
 801ee5e:	f892 e002 	ldrb.w	lr, [r2, #2]
 801ee62:	9702      	str	r7, [sp, #8]
 801ee64:	3501      	adds	r5, #1
 801ee66:	d432      	bmi.n	801eece <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 801ee68:	42ab      	cmp	r3, r5
 801ee6a:	dd30      	ble.n	801eece <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 801ee6c:	f1bc 0f00 	cmp.w	ip, #0
 801ee70:	d031      	beq.n	801eed6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 801ee72:	2703      	movs	r7, #3
 801ee74:	fb13 7207 	smlabb	r2, r3, r7, r7
 801ee78:	5cb5      	ldrb	r5, [r6, r2]
 801ee7a:	fb03 6207 	mla	r2, r3, r7, r6
 801ee7e:	fb03 6307 	mla	r3, r3, r7, r6
 801ee82:	7912      	ldrb	r2, [r2, #4]
 801ee84:	795e      	ldrb	r6, [r3, #5]
 801ee86:	f1bc 0f0f 	cmp.w	ip, #15
 801ee8a:	d927      	bls.n	801eedc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 801ee8c:	4b53      	ldr	r3, [pc, #332]	; (801efdc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 801ee8e:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801ee92:	4a53      	ldr	r2, [pc, #332]	; (801efe0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 801ee94:	4853      	ldr	r0, [pc, #332]	; (801efe4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 801ee96:	f004 facf 	bl	8023438 <__assert_func>
 801ee9a:	e9cd 0405 	strd	r0, r4, [sp, #20]
 801ee9e:	9104      	str	r1, [sp, #16]
 801eea0:	e7ba      	b.n	801ee18 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 801eea2:	9401      	str	r4, [sp, #4]
 801eea4:	4682      	mov	sl, r0
 801eea6:	468b      	mov	fp, r1
 801eea8:	9104      	str	r1, [sp, #16]
 801eeaa:	e9cd 0405 	strd	r0, r4, [sp, #20]
 801eeae:	e7c0      	b.n	801ee32 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 801eeb0:	9401      	str	r4, [sp, #4]
 801eeb2:	4682      	mov	sl, r0
 801eeb4:	468b      	mov	fp, r1
 801eeb6:	e7bc      	b.n	801ee32 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 801eeb8:	46a6      	mov	lr, r4
 801eeba:	9002      	str	r0, [sp, #8]
 801eebc:	4688      	mov	r8, r1
 801eebe:	e7d1      	b.n	801ee64 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 801eec0:	4626      	mov	r6, r4
 801eec2:	4602      	mov	r2, r0
 801eec4:	460d      	mov	r5, r1
 801eec6:	46a6      	mov	lr, r4
 801eec8:	9002      	str	r0, [sp, #8]
 801eeca:	4688      	mov	r8, r1
 801eecc:	e7db      	b.n	801ee86 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 801eece:	4626      	mov	r6, r4
 801eed0:	4602      	mov	r2, r0
 801eed2:	460d      	mov	r5, r1
 801eed4:	e7d7      	b.n	801ee86 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 801eed6:	4626      	mov	r6, r4
 801eed8:	4602      	mov	r2, r0
 801eeda:	460d      	mov	r5, r1
 801eedc:	f1b9 0f0f 	cmp.w	r9, #15
 801eee0:	d8d4      	bhi.n	801ee8c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 801eee2:	fa1f f38c 	uxth.w	r3, ip
 801eee6:	fa1f fc89 	uxth.w	ip, r9
 801eeea:	fb03 f70c 	mul.w	r7, r3, ip
 801eeee:	011b      	lsls	r3, r3, #4
 801eef0:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 801eef4:	9707      	str	r7, [sp, #28]
 801eef6:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 801eefa:	fa1f fc8c 	uxth.w	ip, ip
 801eefe:	eba7 070c 	sub.w	r7, r7, ip
 801ef02:	b2bf      	uxth	r7, r7
 801ef04:	9709      	str	r7, [sp, #36]	; 0x24
 801ef06:	9f07      	ldr	r7, [sp, #28]
 801ef08:	1bdb      	subs	r3, r3, r7
 801ef0a:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 801ef0e:	b29b      	uxth	r3, r3
 801ef10:	9708      	str	r7, [sp, #32]
 801ef12:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801ef14:	930a      	str	r3, [sp, #40]	; 0x28
 801ef16:	ea6f 0907 	mvn.w	r9, r7
 801ef1a:	fb03 fb0b 	mul.w	fp, r3, fp
 801ef1e:	9f04      	ldr	r7, [sp, #16]
 801ef20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ef22:	fa5f f989 	uxtb.w	r9, r9
 801ef26:	fb03 bb07 	mla	fp, r3, r7, fp
 801ef2a:	9f07      	ldr	r7, [sp, #28]
 801ef2c:	fb11 f109 	smulbb	r1, r1, r9
 801ef30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ef32:	fb0c b808 	mla	r8, ip, r8, fp
 801ef36:	fb10 f009 	smulbb	r0, r0, r9
 801ef3a:	fb14 f409 	smulbb	r4, r4, r9
 801ef3e:	fb07 8805 	mla	r8, r7, r5, r8
 801ef42:	9d08      	ldr	r5, [sp, #32]
 801ef44:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801ef46:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801ef4a:	fb08 1805 	mla	r8, r8, r5, r1
 801ef4e:	9d05      	ldr	r5, [sp, #20]
 801ef50:	fa1f f888 	uxth.w	r8, r8
 801ef54:	f108 0101 	add.w	r1, r8, #1
 801ef58:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 801ef5c:	9903      	ldr	r1, [sp, #12]
 801ef5e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ef62:	f881 8000 	strb.w	r8, [r1]
 801ef66:	fb03 f10a 	mul.w	r1, r3, sl
 801ef6a:	fb07 1105 	mla	r1, r7, r5, r1
 801ef6e:	9d02      	ldr	r5, [sp, #8]
 801ef70:	fb0c 1105 	mla	r1, ip, r5, r1
 801ef74:	9d07      	ldr	r5, [sp, #28]
 801ef76:	fb05 1102 	mla	r1, r5, r2, r1
 801ef7a:	9a08      	ldr	r2, [sp, #32]
 801ef7c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801ef80:	fb01 0102 	mla	r1, r1, r2, r0
 801ef84:	9a03      	ldr	r2, [sp, #12]
 801ef86:	b289      	uxth	r1, r1
 801ef88:	1c48      	adds	r0, r1, #1
 801ef8a:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801ef8e:	1209      	asrs	r1, r1, #8
 801ef90:	7051      	strb	r1, [r2, #1]
 801ef92:	9a01      	ldr	r2, [sp, #4]
 801ef94:	4353      	muls	r3, r2
 801ef96:	9a06      	ldr	r2, [sp, #24]
 801ef98:	fb07 3702 	mla	r7, r7, r2, r3
 801ef9c:	9b08      	ldr	r3, [sp, #32]
 801ef9e:	fb0c 7c0e 	mla	ip, ip, lr, r7
 801efa2:	fb05 c606 	mla	r6, r5, r6, ip
 801efa6:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801efaa:	fb06 4603 	mla	r6, r6, r3, r4
 801efae:	9b03      	ldr	r3, [sp, #12]
 801efb0:	b2b6      	uxth	r6, r6
 801efb2:	f106 0e01 	add.w	lr, r6, #1
 801efb6:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 801efba:	1236      	asrs	r6, r6, #8
 801efbc:	709e      	strb	r6, [r3, #2]
 801efbe:	b00d      	add	sp, #52	; 0x34
 801efc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801efc4:	f1bc 0f0f 	cmp.w	ip, #15
 801efc8:	f63f af60 	bhi.w	801ee8c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 801efcc:	4626      	mov	r6, r4
 801efce:	4602      	mov	r2, r0
 801efd0:	460d      	mov	r5, r1
 801efd2:	46a6      	mov	lr, r4
 801efd4:	9002      	str	r0, [sp, #8]
 801efd6:	4688      	mov	r8, r1
 801efd8:	e783      	b.n	801eee2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 801efda:	bf00      	nop
 801efdc:	08027bdb 	.word	0x08027bdb
 801efe0:	080280d2 	.word	0x080280d2
 801efe4:	08027ca4 	.word	0x08027ca4

0801efe8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801efe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801efec:	ed2d 8b08 	vpush	{d8-d11}
 801eff0:	b0a1      	sub	sp, #132	; 0x84
 801eff2:	eeb0 aa40 	vmov.f32	s20, s0
 801eff6:	eef0 9a60 	vmov.f32	s19, s1
 801effa:	9307      	str	r3, [sp, #28]
 801effc:	eeb0 9a41 	vmov.f32	s18, s2
 801f000:	f9bd 30e8 	ldrsh.w	r3, [sp, #232]	; 0xe8
 801f004:	eeb0 8a62 	vmov.f32	s16, s5
 801f008:	9210      	str	r2, [sp, #64]	; 0x40
 801f00a:	eef0 8a43 	vmov.f32	s17, s6
 801f00e:	9308      	str	r3, [sp, #32]
 801f010:	eef0 ba44 	vmov.f32	s23, s8
 801f014:	f9bd 30ec 	ldrsh.w	r3, [sp, #236]	; 0xec
 801f018:	eeb0 ba64 	vmov.f32	s22, s9
 801f01c:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 801f01e:	eef0 aa45 	vmov.f32	s21, s10
 801f022:	930a      	str	r3, [sp, #40]	; 0x28
 801f024:	f89d 30f4 	ldrb.w	r3, [sp, #244]	; 0xf4
 801f028:	901f      	str	r0, [sp, #124]	; 0x7c
 801f02a:	930f      	str	r3, [sp, #60]	; 0x3c
 801f02c:	6850      	ldr	r0, [r2, #4]
 801f02e:	910e      	str	r1, [sp, #56]	; 0x38
 801f030:	6812      	ldr	r2, [r2, #0]
 801f032:	e9dd 1338 	ldrd	r1, r3, [sp, #224]	; 0xe0
 801f036:	e9dd 8b33 	ldrd	r8, fp, [sp, #204]	; 0xcc
 801f03a:	fb00 1303 	mla	r3, r0, r3, r1
 801f03e:	9908      	ldr	r1, [sp, #32]
 801f040:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f044:	18d3      	adds	r3, r2, r3
 801f046:	2203      	movs	r2, #3
 801f048:	9309      	str	r3, [sp, #36]	; 0x24
 801f04a:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 801f04c:	681b      	ldr	r3, [r3, #0]
 801f04e:	930c      	str	r3, [sp, #48]	; 0x30
 801f050:	f06f 0304 	mvn.w	r3, #4
 801f054:	fb11 3302 	smlabb	r3, r1, r2, r3
 801f058:	930d      	str	r3, [sp, #52]	; 0x34
 801f05a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f05c:	43db      	mvns	r3, r3
 801f05e:	b2db      	uxtb	r3, r3
 801f060:	930b      	str	r3, [sp, #44]	; 0x2c
 801f062:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f064:	2b00      	cmp	r3, #0
 801f066:	dc03      	bgt.n	801f070 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 801f068:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f06a:	2b00      	cmp	r3, #0
 801f06c:	f340 81df 	ble.w	801f42e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 801f070:	9b07      	ldr	r3, [sp, #28]
 801f072:	2b00      	cmp	r3, #0
 801f074:	f340 80f2 	ble.w	801f25c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801f078:	ea5f 4228 	movs.w	r2, r8, asr #16
 801f07c:	ea4f 432b 	mov.w	r3, fp, asr #16
 801f080:	d430      	bmi.n	801f0e4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801f082:	1c51      	adds	r1, r2, #1
 801f084:	9808      	ldr	r0, [sp, #32]
 801f086:	4281      	cmp	r1, r0
 801f088:	da2f      	bge.n	801f0ea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 801f08a:	2b00      	cmp	r3, #0
 801f08c:	db2d      	blt.n	801f0ea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 801f08e:	1c59      	adds	r1, r3, #1
 801f090:	980a      	ldr	r0, [sp, #40]	; 0x28
 801f092:	4288      	cmp	r0, r1
 801f094:	dd29      	ble.n	801f0ea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 801f096:	9b07      	ldr	r3, [sp, #28]
 801f098:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801f09a:	3b01      	subs	r3, #1
 801f09c:	fb02 8203 	mla	r2, r2, r3, r8
 801f0a0:	1412      	asrs	r2, r2, #16
 801f0a2:	d42d      	bmi.n	801f100 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801f0a4:	3201      	adds	r2, #1
 801f0a6:	9908      	ldr	r1, [sp, #32]
 801f0a8:	4291      	cmp	r1, r2
 801f0aa:	dd29      	ble.n	801f100 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801f0ac:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 801f0ae:	fb02 b303 	mla	r3, r2, r3, fp
 801f0b2:	141b      	asrs	r3, r3, #16
 801f0b4:	d424      	bmi.n	801f100 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801f0b6:	3301      	adds	r3, #1
 801f0b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f0ba:	429a      	cmp	r2, r3
 801f0bc:	dd20      	ble.n	801f100 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801f0be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f0c0:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801f0c4:	1cde      	adds	r6, r3, #3
 801f0c6:	f8bd e03c 	ldrh.w	lr, [sp, #60]	; 0x3c
 801f0ca:	f1bc 0f00 	cmp.w	ip, #0
 801f0ce:	f300 811f 	bgt.w	801f310 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x328>
 801f0d2:	9b07      	ldr	r3, [sp, #28]
 801f0d4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801f0d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f0da:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f0de:	4423      	add	r3, r4
 801f0e0:	9309      	str	r3, [sp, #36]	; 0x24
 801f0e2:	e0bd      	b.n	801f260 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801f0e4:	1c57      	adds	r7, r2, #1
 801f0e6:	f040 80ae 	bne.w	801f246 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 801f0ea:	9908      	ldr	r1, [sp, #32]
 801f0ec:	428a      	cmp	r2, r1
 801f0ee:	f280 80aa 	bge.w	801f246 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 801f0f2:	1c5e      	adds	r6, r3, #1
 801f0f4:	f2c0 80a7 	blt.w	801f246 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 801f0f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f0fa:	4293      	cmp	r3, r2
 801f0fc:	f280 80a3 	bge.w	801f246 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 801f100:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801f104:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801f106:	f1ba 0f00 	cmp.w	sl, #0
 801f10a:	dde2      	ble.n	801f0d2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 801f10c:	ea5f 4028 	movs.w	r0, r8, asr #16
 801f110:	f3c8 3303 	ubfx	r3, r8, #12, #4
 801f114:	ea4f 412b 	mov.w	r1, fp, asr #16
 801f118:	f3cb 3203 	ubfx	r2, fp, #12, #4
 801f11c:	f100 80df 	bmi.w	801f2de <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 801f120:	1c45      	adds	r5, r0, #1
 801f122:	9f08      	ldr	r7, [sp, #32]
 801f124:	42af      	cmp	r7, r5
 801f126:	f340 80dc 	ble.w	801f2e2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 801f12a:	2900      	cmp	r1, #0
 801f12c:	f2c0 80d9 	blt.w	801f2e2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 801f130:	1c4d      	adds	r5, r1, #1
 801f132:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801f134:	42af      	cmp	r7, r5
 801f136:	f340 80d4 	ble.w	801f2e2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 801f13a:	9d08      	ldr	r5, [sp, #32]
 801f13c:	fb05 0101 	mla	r1, r5, r1, r0
 801f140:	980c      	ldr	r0, [sp, #48]	; 0x30
 801f142:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801f146:	1845      	adds	r5, r0, r1
 801f148:	5c40      	ldrb	r0, [r0, r1]
 801f14a:	792f      	ldrb	r7, [r5, #4]
 801f14c:	7869      	ldrb	r1, [r5, #1]
 801f14e:	9711      	str	r7, [sp, #68]	; 0x44
 801f150:	796f      	ldrb	r7, [r5, #5]
 801f152:	f895 e002 	ldrb.w	lr, [r5, #2]
 801f156:	f895 9003 	ldrb.w	r9, [r5, #3]
 801f15a:	9712      	str	r7, [sp, #72]	; 0x48
 801f15c:	b17a      	cbz	r2, 801f17e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x196>
 801f15e:	3505      	adds	r5, #5
 801f160:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801f162:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f164:	19ef      	adds	r7, r5, r7
 801f166:	5d2d      	ldrb	r5, [r5, r4]
 801f168:	787c      	ldrb	r4, [r7, #1]
 801f16a:	9513      	str	r5, [sp, #76]	; 0x4c
 801f16c:	9415      	str	r4, [sp, #84]	; 0x54
 801f16e:	78bc      	ldrb	r4, [r7, #2]
 801f170:	9417      	str	r4, [sp, #92]	; 0x5c
 801f172:	78fc      	ldrb	r4, [r7, #3]
 801f174:	9414      	str	r4, [sp, #80]	; 0x50
 801f176:	793c      	ldrb	r4, [r7, #4]
 801f178:	9416      	str	r4, [sp, #88]	; 0x58
 801f17a:	797c      	ldrb	r4, [r7, #5]
 801f17c:	9418      	str	r4, [sp, #96]	; 0x60
 801f17e:	b29b      	uxth	r3, r3
 801f180:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f182:	b292      	uxth	r2, r2
 801f184:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801f188:	fb03 f702 	mul.w	r7, r3, r2
 801f18c:	011b      	lsls	r3, r3, #4
 801f18e:	ebc7 1202 	rsb	r2, r7, r2, lsl #4
 801f192:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801f196:	1bdb      	subs	r3, r3, r7
 801f198:	b292      	uxth	r2, r2
 801f19a:	b29b      	uxth	r3, r3
 801f19c:	ebac 0c02 	sub.w	ip, ip, r2
 801f1a0:	fb03 f909 	mul.w	r9, r3, r9
 801f1a4:	fa1f fc8c 	uxth.w	ip, ip
 801f1a8:	fb0c 9000 	mla	r0, ip, r0, r9
 801f1ac:	f896 9000 	ldrb.w	r9, [r6]
 801f1b0:	fb02 0004 	mla	r0, r2, r4, r0
 801f1b4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f1b6:	fb07 0004 	mla	r0, r7, r4, r0
 801f1ba:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f1bc:	fb19 f904 	smulbb	r9, r9, r4
 801f1c0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801f1c4:	fb00 9005 	mla	r0, r0, r5, r9
 801f1c8:	b280      	uxth	r0, r0
 801f1ca:	f100 0901 	add.w	r9, r0, #1
 801f1ce:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 801f1d2:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f1d4:	4358      	muls	r0, r3
 801f1d6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f1da:	fb0c 0101 	mla	r1, ip, r1, r0
 801f1de:	9815      	ldr	r0, [sp, #84]	; 0x54
 801f1e0:	f886 9000 	strb.w	r9, [r6]
 801f1e4:	fb02 1100 	mla	r1, r2, r0, r1
 801f1e8:	9816      	ldr	r0, [sp, #88]	; 0x58
 801f1ea:	fb07 1100 	mla	r1, r7, r0, r1
 801f1ee:	7870      	ldrb	r0, [r6, #1]
 801f1f0:	fb10 f004 	smulbb	r0, r0, r4
 801f1f4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801f1f8:	fb01 0105 	mla	r1, r1, r5, r0
 801f1fc:	b289      	uxth	r1, r1
 801f1fe:	1c48      	adds	r0, r1, #1
 801f200:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801f204:	1209      	asrs	r1, r1, #8
 801f206:	7071      	strb	r1, [r6, #1]
 801f208:	9912      	ldr	r1, [sp, #72]	; 0x48
 801f20a:	434b      	muls	r3, r1
 801f20c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801f20e:	fb0c 330e 	mla	r3, ip, lr, r3
 801f212:	fb02 3201 	mla	r2, r2, r1, r3
 801f216:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801f218:	fb07 2703 	mla	r7, r7, r3, r2
 801f21c:	78b2      	ldrb	r2, [r6, #2]
 801f21e:	fb12 f204 	smulbb	r2, r2, r4
 801f222:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801f226:	fb07 2505 	mla	r5, r7, r5, r2
 801f22a:	b2ad      	uxth	r5, r5
 801f22c:	1c6f      	adds	r7, r5, #1
 801f22e:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 801f232:	122d      	asrs	r5, r5, #8
 801f234:	70b5      	strb	r5, [r6, #2]
 801f236:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 801f238:	3603      	adds	r6, #3
 801f23a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f23e:	4498      	add	r8, r3
 801f240:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801f242:	449b      	add	fp, r3
 801f244:	e75f      	b.n	801f106 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 801f246:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 801f248:	4498      	add	r8, r3
 801f24a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801f24c:	449b      	add	fp, r3
 801f24e:	9b07      	ldr	r3, [sp, #28]
 801f250:	3b01      	subs	r3, #1
 801f252:	9307      	str	r3, [sp, #28]
 801f254:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f256:	3303      	adds	r3, #3
 801f258:	9309      	str	r3, [sp, #36]	; 0x24
 801f25a:	e709      	b.n	801f070 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 801f25c:	f47f af1b 	bne.w	801f096 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xae>
 801f260:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f262:	2b00      	cmp	r3, #0
 801f264:	f340 80e3 	ble.w	801f42e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 801f268:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f26c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801f26e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801f272:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801f276:	eef0 6a48 	vmov.f32	s13, s16
 801f27a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801f27e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801f282:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f286:	ee16 8a90 	vmov	r8, s13
 801f28a:	eef0 6a68 	vmov.f32	s13, s17
 801f28e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f292:	ee16 ba90 	vmov	fp, s13
 801f296:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801f29a:	ee69 7a27 	vmul.f32	s15, s18, s15
 801f29e:	ee37 8a48 	vsub.f32	s16, s14, s16
 801f2a2:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801f2a6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801f2aa:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801f2ae:	ee18 2a10 	vmov	r2, s16
 801f2b2:	eeb0 8a47 	vmov.f32	s16, s14
 801f2b6:	fb92 f3f3 	sdiv	r3, r2, r3
 801f2ba:	ee18 2a90 	vmov	r2, s17
 801f2be:	9335      	str	r3, [sp, #212]	; 0xd4
 801f2c0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801f2c2:	eef0 8a67 	vmov.f32	s17, s15
 801f2c6:	fb92 f3f3 	sdiv	r3, r2, r3
 801f2ca:	9336      	str	r3, [sp, #216]	; 0xd8
 801f2cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f2ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f2d0:	3b01      	subs	r3, #1
 801f2d2:	930e      	str	r3, [sp, #56]	; 0x38
 801f2d4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801f2d6:	bf08      	it	eq
 801f2d8:	4613      	moveq	r3, r2
 801f2da:	9307      	str	r3, [sp, #28]
 801f2dc:	e6c1      	b.n	801f062 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801f2de:	1c45      	adds	r5, r0, #1
 801f2e0:	d1a9      	bne.n	801f236 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 801f2e2:	9c08      	ldr	r4, [sp, #32]
 801f2e4:	42a0      	cmp	r0, r4
 801f2e6:	daa6      	bge.n	801f236 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 801f2e8:	1c4c      	adds	r4, r1, #1
 801f2ea:	dba4      	blt.n	801f236 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 801f2ec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f2ee:	428c      	cmp	r4, r1
 801f2f0:	dda1      	ble.n	801f236 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 801f2f2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801f2f4:	9001      	str	r0, [sp, #4]
 801f2f6:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801f2f8:	e9cd 1302 	strd	r1, r3, [sp, #8]
 801f2fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f2fe:	4631      	mov	r1, r6
 801f300:	e9cd 2404 	strd	r2, r4, [sp, #16]
 801f304:	9300      	str	r3, [sp, #0]
 801f306:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f308:	9b08      	ldr	r3, [sp, #32]
 801f30a:	f7ff fd5b 	bl	801edc4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 801f30e:	e792      	b.n	801f236 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 801f310:	ea4f 4228 	mov.w	r2, r8, asr #16
 801f314:	9c08      	ldr	r4, [sp, #32]
 801f316:	ea4f 402b 	mov.w	r0, fp, asr #16
 801f31a:	f3cb 3103 	ubfx	r1, fp, #12, #4
 801f31e:	f3c8 3303 	ubfx	r3, r8, #12, #4
 801f322:	fb04 2000 	mla	r0, r4, r0, r2
 801f326:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f328:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801f32a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f32e:	4402      	add	r2, r0
 801f330:	5c25      	ldrb	r5, [r4, r0]
 801f332:	7894      	ldrb	r4, [r2, #2]
 801f334:	7850      	ldrb	r0, [r2, #1]
 801f336:	9411      	str	r4, [sp, #68]	; 0x44
 801f338:	7954      	ldrb	r4, [r2, #5]
 801f33a:	f892 a003 	ldrb.w	sl, [r2, #3]
 801f33e:	f892 9004 	ldrb.w	r9, [r2, #4]
 801f342:	9412      	str	r4, [sp, #72]	; 0x48
 801f344:	b171      	cbz	r1, 801f364 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 801f346:	3205      	adds	r2, #5
 801f348:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f34a:	1917      	adds	r7, r2, r4
 801f34c:	5d12      	ldrb	r2, [r2, r4]
 801f34e:	9219      	str	r2, [sp, #100]	; 0x64
 801f350:	787a      	ldrb	r2, [r7, #1]
 801f352:	921b      	str	r2, [sp, #108]	; 0x6c
 801f354:	78ba      	ldrb	r2, [r7, #2]
 801f356:	921d      	str	r2, [sp, #116]	; 0x74
 801f358:	78fa      	ldrb	r2, [r7, #3]
 801f35a:	921a      	str	r2, [sp, #104]	; 0x68
 801f35c:	793a      	ldrb	r2, [r7, #4]
 801f35e:	921c      	str	r2, [sp, #112]	; 0x70
 801f360:	797a      	ldrb	r2, [r7, #5]
 801f362:	921e      	str	r2, [sp, #120]	; 0x78
 801f364:	b29b      	uxth	r3, r3
 801f366:	9c19      	ldr	r4, [sp, #100]	; 0x64
 801f368:	b289      	uxth	r1, r1
 801f36a:	3603      	adds	r6, #3
 801f36c:	f10c 3cff 	add.w	ip, ip, #4294967295
 801f370:	fb03 f201 	mul.w	r2, r3, r1
 801f374:	011b      	lsls	r3, r3, #4
 801f376:	ebc2 1101 	rsb	r1, r2, r1, lsl #4
 801f37a:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 801f37e:	1a9b      	subs	r3, r3, r2
 801f380:	b289      	uxth	r1, r1
 801f382:	b29b      	uxth	r3, r3
 801f384:	1a7f      	subs	r7, r7, r1
 801f386:	fb03 fa0a 	mul.w	sl, r3, sl
 801f38a:	b2bf      	uxth	r7, r7
 801f38c:	fb03 f909 	mul.w	r9, r3, r9
 801f390:	fb07 a505 	mla	r5, r7, r5, sl
 801f394:	f816 ac06 	ldrb.w	sl, [r6, #-6]
 801f398:	fb07 9000 	mla	r0, r7, r0, r9
 801f39c:	fb01 5504 	mla	r5, r1, r4, r5
 801f3a0:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801f3a2:	fb02 5504 	mla	r5, r2, r4, r5
 801f3a6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f3a8:	fb1a fa04 	smulbb	sl, sl, r4
 801f3ac:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801f3b0:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 801f3b2:	fb05 a50e 	mla	r5, r5, lr, sl
 801f3b6:	fb01 0004 	mla	r0, r1, r4, r0
 801f3ba:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801f3bc:	b2ad      	uxth	r5, r5
 801f3be:	fb02 0004 	mla	r0, r2, r4, r0
 801f3c2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f3c4:	f105 0a01 	add.w	sl, r5, #1
 801f3c8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801f3cc:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 801f3d0:	122d      	asrs	r5, r5, #8
 801f3d2:	f806 5c06 	strb.w	r5, [r6, #-6]
 801f3d6:	f816 5c05 	ldrb.w	r5, [r6, #-5]
 801f3da:	fb15 f504 	smulbb	r5, r5, r4
 801f3de:	fb00 500e 	mla	r0, r0, lr, r5
 801f3e2:	b280      	uxth	r0, r0
 801f3e4:	1c45      	adds	r5, r0, #1
 801f3e6:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801f3ea:	1200      	asrs	r0, r0, #8
 801f3ec:	f806 0c05 	strb.w	r0, [r6, #-5]
 801f3f0:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f3f2:	4343      	muls	r3, r0
 801f3f4:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f3f6:	fb07 3300 	mla	r3, r7, r0, r3
 801f3fa:	981d      	ldr	r0, [sp, #116]	; 0x74
 801f3fc:	fb01 3100 	mla	r1, r1, r0, r3
 801f400:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801f402:	fb02 1203 	mla	r2, r2, r3, r1
 801f406:	f816 1c04 	ldrb.w	r1, [r6, #-4]
 801f40a:	fb11 f104 	smulbb	r1, r1, r4
 801f40e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801f412:	fb02 120e 	mla	r2, r2, lr, r1
 801f416:	b292      	uxth	r2, r2
 801f418:	1c53      	adds	r3, r2, #1
 801f41a:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801f41e:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 801f420:	1212      	asrs	r2, r2, #8
 801f422:	4498      	add	r8, r3
 801f424:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801f426:	f806 2c04 	strb.w	r2, [r6, #-4]
 801f42a:	449b      	add	fp, r3
 801f42c:	e64d      	b.n	801f0ca <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801f42e:	b021      	add	sp, #132	; 0x84
 801f430:	ecbd 8b08 	vpop	{d8-d11}
 801f434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f438 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 801f438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f43c:	b085      	sub	sp, #20
 801f43e:	784d      	ldrb	r5, [r1, #1]
 801f440:	788e      	ldrb	r6, [r1, #2]
 801f442:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 801f446:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 801f44a:	9403      	str	r4, [sp, #12]
 801f44c:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801f450:	780c      	ldrb	r4, [r1, #0]
 801f452:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 801f456:	fb07 ce03 	mla	lr, r7, r3, ip
 801f45a:	2f00      	cmp	r7, #0
 801f45c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801f460:	eb02 0b0e 	add.w	fp, r2, lr
 801f464:	db56      	blt.n	801f514 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 801f466:	45b9      	cmp	r9, r7
 801f468:	dd54      	ble.n	801f514 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 801f46a:	f1bc 0f00 	cmp.w	ip, #0
 801f46e:	db4d      	blt.n	801f50c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 801f470:	4563      	cmp	r3, ip
 801f472:	dd4b      	ble.n	801f50c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 801f474:	f812 200e 	ldrb.w	r2, [r2, lr]
 801f478:	9200      	str	r2, [sp, #0]
 801f47a:	f89b 2001 	ldrb.w	r2, [fp, #1]
 801f47e:	9201      	str	r2, [sp, #4]
 801f480:	f89b 2002 	ldrb.w	r2, [fp, #2]
 801f484:	9202      	str	r2, [sp, #8]
 801f486:	f11c 0201 	adds.w	r2, ip, #1
 801f48a:	d44a      	bmi.n	801f522 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 801f48c:	4293      	cmp	r3, r2
 801f48e:	dd48      	ble.n	801f522 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 801f490:	2800      	cmp	r0, #0
 801f492:	d046      	beq.n	801f522 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 801f494:	f89b e003 	ldrb.w	lr, [fp, #3]
 801f498:	f89b 8004 	ldrb.w	r8, [fp, #4]
 801f49c:	f89b a005 	ldrb.w	sl, [fp, #5]
 801f4a0:	3701      	adds	r7, #1
 801f4a2:	d446      	bmi.n	801f532 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 801f4a4:	45b9      	cmp	r9, r7
 801f4a6:	dd44      	ble.n	801f532 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 801f4a8:	9a03      	ldr	r2, [sp, #12]
 801f4aa:	2a00      	cmp	r2, #0
 801f4ac:	d045      	beq.n	801f53a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 801f4ae:	f1bc 0f00 	cmp.w	ip, #0
 801f4b2:	db3a      	blt.n	801f52a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 801f4b4:	4563      	cmp	r3, ip
 801f4b6:	dd38      	ble.n	801f52a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 801f4b8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801f4bc:	f04f 0903 	mov.w	r9, #3
 801f4c0:	f81b 7002 	ldrb.w	r7, [fp, r2]
 801f4c4:	fb03 b209 	mla	r2, r3, r9, fp
 801f4c8:	fb03 b909 	mla	r9, r3, r9, fp
 801f4cc:	7852      	ldrb	r2, [r2, #1]
 801f4ce:	f899 9002 	ldrb.w	r9, [r9, #2]
 801f4d2:	f11c 0c01 	adds.w	ip, ip, #1
 801f4d6:	d40d      	bmi.n	801f4f4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 801f4d8:	4563      	cmp	r3, ip
 801f4da:	dd0b      	ble.n	801f4f4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 801f4dc:	b160      	cbz	r0, 801f4f8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 801f4de:	2603      	movs	r6, #3
 801f4e0:	fb13 6406 	smlabb	r4, r3, r6, r6
 801f4e4:	fb03 b506 	mla	r5, r3, r6, fp
 801f4e8:	fb03 b306 	mla	r3, r3, r6, fp
 801f4ec:	f81b 4004 	ldrb.w	r4, [fp, r4]
 801f4f0:	792d      	ldrb	r5, [r5, #4]
 801f4f2:	795e      	ldrb	r6, [r3, #5]
 801f4f4:	280f      	cmp	r0, #15
 801f4f6:	d802      	bhi.n	801f4fe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 801f4f8:	9b03      	ldr	r3, [sp, #12]
 801f4fa:	2b0f      	cmp	r3, #15
 801f4fc:	d922      	bls.n	801f544 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 801f4fe:	4b2f      	ldr	r3, [pc, #188]	; (801f5bc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 801f500:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801f504:	4a2e      	ldr	r2, [pc, #184]	; (801f5c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 801f506:	482f      	ldr	r0, [pc, #188]	; (801f5c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 801f508:	f003 ff96 	bl	8023438 <__assert_func>
 801f50c:	e9cd 5601 	strd	r5, r6, [sp, #4]
 801f510:	9400      	str	r4, [sp, #0]
 801f512:	e7b8      	b.n	801f486 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 801f514:	46b2      	mov	sl, r6
 801f516:	46a8      	mov	r8, r5
 801f518:	46a6      	mov	lr, r4
 801f51a:	9400      	str	r4, [sp, #0]
 801f51c:	e9cd 5601 	strd	r5, r6, [sp, #4]
 801f520:	e7be      	b.n	801f4a0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 801f522:	46b2      	mov	sl, r6
 801f524:	46a8      	mov	r8, r5
 801f526:	46a6      	mov	lr, r4
 801f528:	e7ba      	b.n	801f4a0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 801f52a:	46b1      	mov	r9, r6
 801f52c:	462a      	mov	r2, r5
 801f52e:	4627      	mov	r7, r4
 801f530:	e7cf      	b.n	801f4d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 801f532:	46b1      	mov	r9, r6
 801f534:	462a      	mov	r2, r5
 801f536:	4627      	mov	r7, r4
 801f538:	e7dc      	b.n	801f4f4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 801f53a:	280f      	cmp	r0, #15
 801f53c:	d8df      	bhi.n	801f4fe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 801f53e:	46b1      	mov	r9, r6
 801f540:	462a      	mov	r2, r5
 801f542:	4627      	mov	r7, r4
 801f544:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 801f548:	b280      	uxth	r0, r0
 801f54a:	fb00 f30b 	mul.w	r3, r0, fp
 801f54e:	0100      	lsls	r0, r0, #4
 801f550:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 801f554:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 801f558:	1ac0      	subs	r0, r0, r3
 801f55a:	fa1f fb8b 	uxth.w	fp, fp
 801f55e:	b280      	uxth	r0, r0
 801f560:	ebac 0c0b 	sub.w	ip, ip, fp
 801f564:	9003      	str	r0, [sp, #12]
 801f566:	fa1f fc8c 	uxth.w	ip, ip
 801f56a:	fb00 fe0e 	mul.w	lr, r0, lr
 801f56e:	9800      	ldr	r0, [sp, #0]
 801f570:	fb0c ee00 	mla	lr, ip, r0, lr
 801f574:	9803      	ldr	r0, [sp, #12]
 801f576:	fb00 f808 	mul.w	r8, r0, r8
 801f57a:	9801      	ldr	r0, [sp, #4]
 801f57c:	fb0b ee07 	mla	lr, fp, r7, lr
 801f580:	fb0c 8800 	mla	r8, ip, r0, r8
 801f584:	fb03 ee04 	mla	lr, r3, r4, lr
 801f588:	fb0b 8202 	mla	r2, fp, r2, r8
 801f58c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f590:	fb03 2505 	mla	r5, r3, r5, r2
 801f594:	9a03      	ldr	r2, [sp, #12]
 801f596:	f881 e000 	strb.w	lr, [r1]
 801f59a:	fb02 f00a 	mul.w	r0, r2, sl
 801f59e:	9a02      	ldr	r2, [sp, #8]
 801f5a0:	122d      	asrs	r5, r5, #8
 801f5a2:	fb0c 0c02 	mla	ip, ip, r2, r0
 801f5a6:	704d      	strb	r5, [r1, #1]
 801f5a8:	fb0b c909 	mla	r9, fp, r9, ip
 801f5ac:	fb03 9606 	mla	r6, r3, r6, r9
 801f5b0:	1236      	asrs	r6, r6, #8
 801f5b2:	708e      	strb	r6, [r1, #2]
 801f5b4:	b005      	add	sp, #20
 801f5b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f5ba:	bf00      	nop
 801f5bc:	08027bdb 	.word	0x08027bdb
 801f5c0:	080280d2 	.word	0x080280d2
 801f5c4:	08027ca4 	.word	0x08027ca4

0801f5c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801f5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f5cc:	ed2d 8b0a 	vpush	{d8-d12}
 801f5d0:	b09d      	sub	sp, #116	; 0x74
 801f5d2:	eeb0 aa40 	vmov.f32	s20, s0
 801f5d6:	eef0 9a60 	vmov.f32	s19, s1
 801f5da:	9306      	str	r3, [sp, #24]
 801f5dc:	eeb0 9a41 	vmov.f32	s18, s2
 801f5e0:	f9bd 30e0 	ldrsh.w	r3, [sp, #224]	; 0xe0
 801f5e4:	eeb0 8a62 	vmov.f32	s16, s5
 801f5e8:	901b      	str	r0, [sp, #108]	; 0x6c
 801f5ea:	eef0 8a43 	vmov.f32	s17, s6
 801f5ee:	9307      	str	r3, [sp, #28]
 801f5f0:	eeb0 ca44 	vmov.f32	s24, s8
 801f5f4:	f9bd 30e4 	ldrsh.w	r3, [sp, #228]	; 0xe4
 801f5f8:	eef0 ba64 	vmov.f32	s23, s9
 801f5fc:	eeb0 ba45 	vmov.f32	s22, s10
 801f600:	9309      	str	r3, [sp, #36]	; 0x24
 801f602:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801f606:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
 801f60a:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801f60c:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 801f610:	6850      	ldr	r0, [r2, #4]
 801f612:	6812      	ldr	r2, [r2, #0]
 801f614:	fb00 1303 	mla	r3, r0, r3, r1
 801f618:	9907      	ldr	r1, [sp, #28]
 801f61a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f61e:	18d3      	adds	r3, r2, r3
 801f620:	2203      	movs	r2, #3
 801f622:	9308      	str	r3, [sp, #32]
 801f624:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 801f626:	681b      	ldr	r3, [r3, #0]
 801f628:	930a      	str	r3, [sp, #40]	; 0x28
 801f62a:	f06f 0304 	mvn.w	r3, #4
 801f62e:	e9dd 6531 	ldrd	r6, r5, [sp, #196]	; 0xc4
 801f632:	fb11 3302 	smlabb	r3, r1, r2, r3
 801f636:	930b      	str	r3, [sp, #44]	; 0x2c
 801f638:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f63a:	2b00      	cmp	r3, #0
 801f63c:	dc03      	bgt.n	801f646 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801f63e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f640:	2b00      	cmp	r3, #0
 801f642:	f340 8193 	ble.w	801f96c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 801f646:	9b06      	ldr	r3, [sp, #24]
 801f648:	2b00      	cmp	r3, #0
 801f64a:	f340 80d0 	ble.w	801f7ee <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x226>
 801f64e:	1432      	asrs	r2, r6, #16
 801f650:	ea4f 4325 	mov.w	r3, r5, asr #16
 801f654:	d42f      	bmi.n	801f6b6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 801f656:	1c51      	adds	r1, r2, #1
 801f658:	9807      	ldr	r0, [sp, #28]
 801f65a:	4281      	cmp	r1, r0
 801f65c:	da2e      	bge.n	801f6bc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 801f65e:	2b00      	cmp	r3, #0
 801f660:	db2c      	blt.n	801f6bc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 801f662:	1c59      	adds	r1, r3, #1
 801f664:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f666:	4288      	cmp	r0, r1
 801f668:	dd28      	ble.n	801f6bc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 801f66a:	9b06      	ldr	r3, [sp, #24]
 801f66c:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 801f66e:	3b01      	subs	r3, #1
 801f670:	fb02 6203 	mla	r2, r2, r3, r6
 801f674:	1412      	asrs	r2, r2, #16
 801f676:	d42c      	bmi.n	801f6d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 801f678:	3201      	adds	r2, #1
 801f67a:	9907      	ldr	r1, [sp, #28]
 801f67c:	4291      	cmp	r1, r2
 801f67e:	dd28      	ble.n	801f6d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 801f680:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 801f682:	fb02 5303 	mla	r3, r2, r3, r5
 801f686:	141b      	asrs	r3, r3, #16
 801f688:	d423      	bmi.n	801f6d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 801f68a:	3301      	adds	r3, #1
 801f68c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f68e:	429a      	cmp	r2, r3
 801f690:	dd1f      	ble.n	801f6d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 801f692:	9b08      	ldr	r3, [sp, #32]
 801f694:	f8dd e018 	ldr.w	lr, [sp, #24]
 801f698:	f103 0c03 	add.w	ip, r3, #3
 801f69c:	f1be 0f00 	cmp.w	lr, #0
 801f6a0:	f300 80fa 	bgt.w	801f898 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 801f6a4:	9b06      	ldr	r3, [sp, #24]
 801f6a6:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801f6aa:	9b08      	ldr	r3, [sp, #32]
 801f6ac:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f6b0:	4423      	add	r3, r4
 801f6b2:	9308      	str	r3, [sp, #32]
 801f6b4:	e09d      	b.n	801f7f2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 801f6b6:	1c51      	adds	r1, r2, #1
 801f6b8:	f040 808e 	bne.w	801f7d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 801f6bc:	9907      	ldr	r1, [sp, #28]
 801f6be:	428a      	cmp	r2, r1
 801f6c0:	f280 808a 	bge.w	801f7d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 801f6c4:	1c5f      	adds	r7, r3, #1
 801f6c6:	f2c0 8087 	blt.w	801f7d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 801f6ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f6cc:	4293      	cmp	r3, r2
 801f6ce:	f280 8083 	bge.w	801f7d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 801f6d2:	9f06      	ldr	r7, [sp, #24]
 801f6d4:	f8dd a020 	ldr.w	sl, [sp, #32]
 801f6d8:	2f00      	cmp	r7, #0
 801f6da:	dde3      	ble.n	801f6a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 801f6dc:	1432      	asrs	r2, r6, #16
 801f6de:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801f6e2:	ea4f 4325 	mov.w	r3, r5, asr #16
 801f6e6:	f3c5 3b03 	ubfx	fp, r5, #12, #4
 801f6ea:	f100 80bf 	bmi.w	801f86c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a4>
 801f6ee:	1c50      	adds	r0, r2, #1
 801f6f0:	9c07      	ldr	r4, [sp, #28]
 801f6f2:	4284      	cmp	r4, r0
 801f6f4:	f340 80bc 	ble.w	801f870 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 801f6f8:	2b00      	cmp	r3, #0
 801f6fa:	f2c0 80b9 	blt.w	801f870 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 801f6fe:	1c58      	adds	r0, r3, #1
 801f700:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801f702:	4284      	cmp	r4, r0
 801f704:	f340 80b4 	ble.w	801f870 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 801f708:	9807      	ldr	r0, [sp, #28]
 801f70a:	fb00 2303 	mla	r3, r0, r3, r2
 801f70e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f710:	980a      	ldr	r0, [sp, #40]	; 0x28
 801f712:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f716:	441a      	add	r2, r3
 801f718:	f810 c003 	ldrb.w	ip, [r0, r3]
 801f71c:	7953      	ldrb	r3, [r2, #5]
 801f71e:	7850      	ldrb	r0, [r2, #1]
 801f720:	f892 e002 	ldrb.w	lr, [r2, #2]
 801f724:	f892 9003 	ldrb.w	r9, [r2, #3]
 801f728:	f892 8004 	ldrb.w	r8, [r2, #4]
 801f72c:	930e      	str	r3, [sp, #56]	; 0x38
 801f72e:	f1bb 0f00 	cmp.w	fp, #0
 801f732:	d00f      	beq.n	801f754 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801f734:	3205      	adds	r2, #5
 801f736:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f738:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f73a:	18d3      	adds	r3, r2, r3
 801f73c:	5d12      	ldrb	r2, [r2, r4]
 801f73e:	920f      	str	r2, [sp, #60]	; 0x3c
 801f740:	785a      	ldrb	r2, [r3, #1]
 801f742:	9211      	str	r2, [sp, #68]	; 0x44
 801f744:	789a      	ldrb	r2, [r3, #2]
 801f746:	9213      	str	r2, [sp, #76]	; 0x4c
 801f748:	78da      	ldrb	r2, [r3, #3]
 801f74a:	9210      	str	r2, [sp, #64]	; 0x40
 801f74c:	791a      	ldrb	r2, [r3, #4]
 801f74e:	795b      	ldrb	r3, [r3, #5]
 801f750:	9212      	str	r2, [sp, #72]	; 0x48
 801f752:	9314      	str	r3, [sp, #80]	; 0x50
 801f754:	b28b      	uxth	r3, r1
 801f756:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801f758:	fa1f f28b 	uxth.w	r2, fp
 801f75c:	fb03 fb02 	mul.w	fp, r3, r2
 801f760:	011b      	lsls	r3, r3, #4
 801f762:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 801f766:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 801f76a:	eba3 030b 	sub.w	r3, r3, fp
 801f76e:	b292      	uxth	r2, r2
 801f770:	b29b      	uxth	r3, r3
 801f772:	1a89      	subs	r1, r1, r2
 801f774:	fb03 f808 	mul.w	r8, r3, r8
 801f778:	b289      	uxth	r1, r1
 801f77a:	fb03 f909 	mul.w	r9, r3, r9
 801f77e:	fb01 8800 	mla	r8, r1, r0, r8
 801f782:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f784:	fb01 990c 	mla	r9, r1, ip, r9
 801f788:	fb02 8800 	mla	r8, r2, r0, r8
 801f78c:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f78e:	fb02 9904 	mla	r9, r2, r4, r9
 801f792:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f794:	fb0b 8800 	mla	r8, fp, r0, r8
 801f798:	980e      	ldr	r0, [sp, #56]	; 0x38
 801f79a:	fb0b 9904 	mla	r9, fp, r4, r9
 801f79e:	4343      	muls	r3, r0
 801f7a0:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f7a4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f7a8:	fb01 330e 	mla	r3, r1, lr, r3
 801f7ac:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801f7ae:	f88a 9000 	strb.w	r9, [sl]
 801f7b2:	fb02 3201 	mla	r2, r2, r1, r3
 801f7b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f7b8:	f88a 8001 	strb.w	r8, [sl, #1]
 801f7bc:	fb0b 2b03 	mla	fp, fp, r3, r2
 801f7c0:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 801f7c4:	f88a b002 	strb.w	fp, [sl, #2]
 801f7c8:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801f7ca:	f10a 0a03 	add.w	sl, sl, #3
 801f7ce:	3f01      	subs	r7, #1
 801f7d0:	441e      	add	r6, r3
 801f7d2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801f7d4:	441d      	add	r5, r3
 801f7d6:	e77f      	b.n	801f6d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 801f7d8:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801f7da:	441e      	add	r6, r3
 801f7dc:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801f7de:	441d      	add	r5, r3
 801f7e0:	9b06      	ldr	r3, [sp, #24]
 801f7e2:	3b01      	subs	r3, #1
 801f7e4:	9306      	str	r3, [sp, #24]
 801f7e6:	9b08      	ldr	r3, [sp, #32]
 801f7e8:	3303      	adds	r3, #3
 801f7ea:	9308      	str	r3, [sp, #32]
 801f7ec:	e72b      	b.n	801f646 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801f7ee:	f47f af3c 	bne.w	801f66a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 801f7f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f7f4:	2b00      	cmp	r3, #0
 801f7f6:	f340 80b9 	ble.w	801f96c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 801f7fa:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801f7fe:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801f800:	ee79 9aab 	vadd.f32	s19, s19, s23
 801f804:	eef0 6a48 	vmov.f32	s13, s16
 801f808:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801f80c:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801f810:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f814:	ee16 6a90 	vmov	r6, s13
 801f818:	eef0 6a68 	vmov.f32	s13, s17
 801f81c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f820:	ee16 5a90 	vmov	r5, s13
 801f824:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801f828:	ee69 7a27 	vmul.f32	s15, s18, s15
 801f82c:	ee37 8a48 	vsub.f32	s16, s14, s16
 801f830:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801f834:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801f838:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801f83c:	ee18 2a10 	vmov	r2, s16
 801f840:	eeb0 8a47 	vmov.f32	s16, s14
 801f844:	fb92 f3f3 	sdiv	r3, r2, r3
 801f848:	ee18 2a90 	vmov	r2, s17
 801f84c:	9333      	str	r3, [sp, #204]	; 0xcc
 801f84e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801f850:	eef0 8a67 	vmov.f32	s17, s15
 801f854:	fb92 f3f3 	sdiv	r3, r2, r3
 801f858:	9334      	str	r3, [sp, #208]	; 0xd0
 801f85a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f85c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f85e:	3b01      	subs	r3, #1
 801f860:	930c      	str	r3, [sp, #48]	; 0x30
 801f862:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801f864:	bf08      	it	eq
 801f866:	4613      	moveq	r3, r2
 801f868:	9306      	str	r3, [sp, #24]
 801f86a:	e6e5      	b.n	801f638 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801f86c:	1c54      	adds	r4, r2, #1
 801f86e:	d1ab      	bne.n	801f7c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 801f870:	9807      	ldr	r0, [sp, #28]
 801f872:	4282      	cmp	r2, r0
 801f874:	daa8      	bge.n	801f7c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 801f876:	1c58      	adds	r0, r3, #1
 801f878:	dba6      	blt.n	801f7c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 801f87a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f87c:	4298      	cmp	r0, r3
 801f87e:	dda3      	ble.n	801f7c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 801f880:	9000      	str	r0, [sp, #0]
 801f882:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801f884:	e9cd 2301 	strd	r2, r3, [sp, #4]
 801f888:	e9cd 1b03 	strd	r1, fp, [sp, #12]
 801f88c:	9b07      	ldr	r3, [sp, #28]
 801f88e:	4651      	mov	r1, sl
 801f890:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f892:	f7ff fdd1 	bl	801f438 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 801f896:	e797      	b.n	801f7c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 801f898:	1431      	asrs	r1, r6, #16
 801f89a:	9c07      	ldr	r4, [sp, #28]
 801f89c:	1428      	asrs	r0, r5, #16
 801f89e:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801f8a2:	f3c6 3303 	ubfx	r3, r6, #12, #4
 801f8a6:	fb04 1000 	mla	r0, r4, r0, r1
 801f8aa:	990a      	ldr	r1, [sp, #40]	; 0x28
 801f8ac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f8ae:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f8b2:	4401      	add	r1, r0
 801f8b4:	5c20      	ldrb	r0, [r4, r0]
 801f8b6:	f891 8002 	ldrb.w	r8, [r1, #2]
 801f8ba:	900e      	str	r0, [sp, #56]	; 0x38
 801f8bc:	f891 a003 	ldrb.w	sl, [r1, #3]
 801f8c0:	7848      	ldrb	r0, [r1, #1]
 801f8c2:	f891 9004 	ldrb.w	r9, [r1, #4]
 801f8c6:	f891 b005 	ldrb.w	fp, [r1, #5]
 801f8ca:	b172      	cbz	r2, 801f8ea <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x322>
 801f8cc:	3105      	adds	r1, #5
 801f8ce:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f8d0:	190f      	adds	r7, r1, r4
 801f8d2:	5d09      	ldrb	r1, [r1, r4]
 801f8d4:	9115      	str	r1, [sp, #84]	; 0x54
 801f8d6:	7879      	ldrb	r1, [r7, #1]
 801f8d8:	9117      	str	r1, [sp, #92]	; 0x5c
 801f8da:	78b9      	ldrb	r1, [r7, #2]
 801f8dc:	9119      	str	r1, [sp, #100]	; 0x64
 801f8de:	78f9      	ldrb	r1, [r7, #3]
 801f8e0:	9116      	str	r1, [sp, #88]	; 0x58
 801f8e2:	7939      	ldrb	r1, [r7, #4]
 801f8e4:	9118      	str	r1, [sp, #96]	; 0x60
 801f8e6:	7979      	ldrb	r1, [r7, #5]
 801f8e8:	911a      	str	r1, [sp, #104]	; 0x68
 801f8ea:	b29b      	uxth	r3, r3
 801f8ec:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f8ee:	b292      	uxth	r2, r2
 801f8f0:	f10c 0c03 	add.w	ip, ip, #3
 801f8f4:	f10e 3eff 	add.w	lr, lr, #4294967295
 801f8f8:	fb03 f102 	mul.w	r1, r3, r2
 801f8fc:	011b      	lsls	r3, r3, #4
 801f8fe:	ebc1 1202 	rsb	r2, r1, r2, lsl #4
 801f902:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 801f906:	1a5b      	subs	r3, r3, r1
 801f908:	b292      	uxth	r2, r2
 801f90a:	b29b      	uxth	r3, r3
 801f90c:	1abf      	subs	r7, r7, r2
 801f90e:	fb03 f909 	mul.w	r9, r3, r9
 801f912:	b2bf      	uxth	r7, r7
 801f914:	fb03 fa0a 	mul.w	sl, r3, sl
 801f918:	fb03 f30b 	mul.w	r3, r3, fp
 801f91c:	fb07 9900 	mla	r9, r7, r0, r9
 801f920:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801f922:	fb07 aa04 	mla	sl, r7, r4, sl
 801f926:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f928:	fb02 9900 	mla	r9, r2, r0, r9
 801f92c:	9818      	ldr	r0, [sp, #96]	; 0x60
 801f92e:	fb07 3308 	mla	r3, r7, r8, r3
 801f932:	fb01 9900 	mla	r9, r1, r0, r9
 801f936:	9819      	ldr	r0, [sp, #100]	; 0x64
 801f938:	fb02 aa04 	mla	sl, r2, r4, sl
 801f93c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801f93e:	fb02 3200 	mla	r2, r2, r0, r3
 801f942:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801f944:	fb01 aa04 	mla	sl, r1, r4, sl
 801f948:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f94c:	fb01 2103 	mla	r1, r1, r3, r2
 801f950:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801f952:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f956:	f80c 9c05 	strb.w	r9, [ip, #-5]
 801f95a:	1209      	asrs	r1, r1, #8
 801f95c:	441e      	add	r6, r3
 801f95e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801f960:	f80c ac06 	strb.w	sl, [ip, #-6]
 801f964:	f80c 1c04 	strb.w	r1, [ip, #-4]
 801f968:	441d      	add	r5, r3
 801f96a:	e697      	b.n	801f69c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 801f96c:	b01d      	add	sp, #116	; 0x74
 801f96e:	ecbd 8b0a 	vpop	{d8-d12}
 801f972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801f978 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 801f978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f97c:	b085      	sub	sp, #20
 801f97e:	7888      	ldrb	r0, [r1, #2]
 801f980:	4691      	mov	r9, r2
 801f982:	9000      	str	r0, [sp, #0]
 801f984:	7848      	ldrb	r0, [r1, #1]
 801f986:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 801f98a:	9001      	str	r0, [sp, #4]
 801f98c:	7808      	ldrb	r0, [r1, #0]
 801f98e:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 801f992:	9002      	str	r0, [sp, #8]
 801f994:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801f998:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 801f99c:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 801f9a0:	fb04 c603 	mla	r6, r4, r3, ip
 801f9a4:	2c00      	cmp	r4, #0
 801f9a6:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 801f9aa:	9a00      	ldr	r2, [sp, #0]
 801f9ac:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 801f9b0:	9a01      	ldr	r2, [sp, #4]
 801f9b2:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 801f9b6:	db3a      	blt.n	801fa2e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 801f9b8:	45a0      	cmp	r8, r4
 801f9ba:	dd38      	ble.n	801fa2e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 801f9bc:	f1bc 0f00 	cmp.w	ip, #0
 801f9c0:	db33      	blt.n	801fa2a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 801f9c2:	4563      	cmp	r3, ip
 801f9c4:	dd31      	ble.n	801fa2a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 801f9c6:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 801f9ca:	f11c 0601 	adds.w	r6, ip, #1
 801f9ce:	d431      	bmi.n	801fa34 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 801f9d0:	42b3      	cmp	r3, r6
 801f9d2:	dd2f      	ble.n	801fa34 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 801f9d4:	b375      	cbz	r5, 801fa34 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 801f9d6:	f8de 6004 	ldr.w	r6, [lr, #4]
 801f9da:	3401      	adds	r4, #1
 801f9dc:	d42e      	bmi.n	801fa3c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 801f9de:	45a0      	cmp	r8, r4
 801f9e0:	dd2c      	ble.n	801fa3c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 801f9e2:	b35f      	cbz	r7, 801fa3c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 801f9e4:	f1bc 0f00 	cmp.w	ip, #0
 801f9e8:	db26      	blt.n	801fa38 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 801f9ea:	4563      	cmp	r3, ip
 801f9ec:	dd24      	ble.n	801fa38 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 801f9ee:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 801f9f2:	f11c 0c01 	adds.w	ip, ip, #1
 801f9f6:	d405      	bmi.n	801fa04 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801f9f8:	4563      	cmp	r3, ip
 801f9fa:	dd03      	ble.n	801fa04 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801f9fc:	b115      	cbz	r5, 801fa04 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801f9fe:	3301      	adds	r3, #1
 801fa00:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 801fa04:	2d0f      	cmp	r5, #15
 801fa06:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801fa0a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801fa0e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801fa12:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801fa16:	d801      	bhi.n	801fa1c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa4>
 801fa18:	2f0f      	cmp	r7, #15
 801fa1a:	d911      	bls.n	801fa40 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc8>
 801fa1c:	4b80      	ldr	r3, [pc, #512]	; (801fc20 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 801fa1e:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801fa22:	4a80      	ldr	r2, [pc, #512]	; (801fc24 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 801fa24:	4880      	ldr	r0, [pc, #512]	; (801fc28 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2b0>)
 801fa26:	f003 fd07 	bl	8023438 <__assert_func>
 801fa2a:	4602      	mov	r2, r0
 801fa2c:	e7cd      	b.n	801f9ca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x52>
 801fa2e:	4606      	mov	r6, r0
 801fa30:	4602      	mov	r2, r0
 801fa32:	e7d2      	b.n	801f9da <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 801fa34:	4606      	mov	r6, r0
 801fa36:	e7d0      	b.n	801f9da <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 801fa38:	4604      	mov	r4, r0
 801fa3a:	e7da      	b.n	801f9f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7a>
 801fa3c:	4604      	mov	r4, r0
 801fa3e:	e7e1      	b.n	801fa04 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801fa40:	b2ab      	uxth	r3, r5
 801fa42:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801fa46:	b2bf      	uxth	r7, r7
 801fa48:	fb03 fe07 	mul.w	lr, r3, r7
 801fa4c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 801fa50:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801fa54:	eba3 0c0e 	sub.w	ip, r3, lr
 801fa58:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 801fa5c:	b2bf      	uxth	r7, r7
 801fa5e:	fa1f fc8c 	uxth.w	ip, ip
 801fa62:	eba5 0507 	sub.w	r5, r5, r7
 801fa66:	fb0c f30a 	mul.w	r3, ip, sl
 801fa6a:	b2ad      	uxth	r5, r5
 801fa6c:	fb05 330b 	mla	r3, r5, fp, r3
 801fa70:	fb07 3309 	mla	r3, r7, r9, r3
 801fa74:	fb0e 3308 	mla	r3, lr, r8, r3
 801fa78:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801fa7c:	9303      	str	r3, [sp, #12]
 801fa7e:	d018      	beq.n	801fab2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x13a>
 801fa80:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801fa84:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801fa88:	fb0b f303 	mul.w	r3, fp, r3
 801fa8c:	fb0b fb02 	mul.w	fp, fp, r2
 801fa90:	0a1a      	lsrs	r2, r3, #8
 801fa92:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 801fa96:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801fa9a:	441a      	add	r2, r3
 801fa9c:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 801faa0:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 801faa4:	0a12      	lsrs	r2, r2, #8
 801faa6:	0a1b      	lsrs	r3, r3, #8
 801faa8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801faac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fab0:	431a      	orrs	r2, r3
 801fab2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801fab6:	d019      	beq.n	801faec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x174>
 801fab8:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 801fabc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801fac0:	fb0a fb0b 	mul.w	fp, sl, fp
 801fac4:	fb0a fa06 	mul.w	sl, sl, r6
 801fac8:	ea4f 261b 	mov.w	r6, fp, lsr #8
 801facc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801fad0:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 801fad4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801fad8:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801fadc:	445e      	add	r6, fp
 801fade:	0a1b      	lsrs	r3, r3, #8
 801fae0:	0a36      	lsrs	r6, r6, #8
 801fae2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fae6:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801faea:	431e      	orrs	r6, r3
 801faec:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801faf0:	d019      	beq.n	801fb26 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1ae>
 801faf2:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801faf6:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801fafa:	fb09 fa0a 	mul.w	sl, r9, sl
 801fafe:	fb09 f904 	mul.w	r9, r9, r4
 801fb02:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801fb06:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801fb0a:	f509 7380 	add.w	r3, r9, #256	; 0x100
 801fb0e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801fb12:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 801fb16:	4454      	add	r4, sl
 801fb18:	0a1b      	lsrs	r3, r3, #8
 801fb1a:	0a24      	lsrs	r4, r4, #8
 801fb1c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fb20:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801fb24:	431c      	orrs	r4, r3
 801fb26:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801fb2a:	d019      	beq.n	801fb60 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1e8>
 801fb2c:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 801fb30:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801fb34:	fb08 f909 	mul.w	r9, r8, r9
 801fb38:	fb08 f800 	mul.w	r8, r8, r0
 801fb3c:	ea4f 2019 	mov.w	r0, r9, lsr #8
 801fb40:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801fb44:	f508 7380 	add.w	r3, r8, #256	; 0x100
 801fb48:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801fb4c:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 801fb50:	4448      	add	r0, r9
 801fb52:	0a1b      	lsrs	r3, r3, #8
 801fb54:	0a00      	lsrs	r0, r0, #8
 801fb56:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fb5a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801fb5e:	4318      	orrs	r0, r3
 801fb60:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801fb64:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801fb68:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801fb6c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801fb70:	fb0c f808 	mul.w	r8, ip, r8
 801fb74:	fb0c f606 	mul.w	r6, ip, r6
 801fb78:	fb05 8803 	mla	r8, r5, r3, r8
 801fb7c:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 801fb80:	fb05 6202 	mla	r2, r5, r2, r6
 801fb84:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801fb88:	fb07 8803 	mla	r8, r7, r3, r8
 801fb8c:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 801fb90:	fb07 2704 	mla	r7, r7, r4, r2
 801fb94:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801fb98:	fb0e 8303 	mla	r3, lr, r3, r8
 801fb9c:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 801fba0:	fb0e 7e00 	mla	lr, lr, r0, r7
 801fba4:	9803      	ldr	r0, [sp, #12]
 801fba6:	b292      	uxth	r2, r2
 801fba8:	9c02      	ldr	r4, [sp, #8]
 801fbaa:	0a1b      	lsrs	r3, r3, #8
 801fbac:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fbb0:	4350      	muls	r0, r2
 801fbb2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fbb6:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801fbba:	ea43 0e0e 	orr.w	lr, r3, lr
 801fbbe:	1c43      	adds	r3, r0, #1
 801fbc0:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801fbc4:	fa5f f08e 	uxtb.w	r0, lr
 801fbc8:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 801fbcc:	b2db      	uxtb	r3, r3
 801fbce:	fb14 f403 	smulbb	r4, r4, r3
 801fbd2:	fb00 4002 	mla	r0, r0, r2, r4
 801fbd6:	b280      	uxth	r0, r0
 801fbd8:	1c44      	adds	r4, r0, #1
 801fbda:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801fbde:	9c01      	ldr	r4, [sp, #4]
 801fbe0:	fb14 f403 	smulbb	r4, r4, r3
 801fbe4:	1200      	asrs	r0, r0, #8
 801fbe6:	7008      	strb	r0, [r1, #0]
 801fbe8:	f3ce 2007 	ubfx	r0, lr, #8, #8
 801fbec:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801fbf0:	fb00 4002 	mla	r0, r0, r2, r4
 801fbf4:	b280      	uxth	r0, r0
 801fbf6:	1c44      	adds	r4, r0, #1
 801fbf8:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801fbfc:	1200      	asrs	r0, r0, #8
 801fbfe:	7048      	strb	r0, [r1, #1]
 801fc00:	9800      	ldr	r0, [sp, #0]
 801fc02:	fb10 f303 	smulbb	r3, r0, r3
 801fc06:	fb0e 3202 	mla	r2, lr, r2, r3
 801fc0a:	b292      	uxth	r2, r2
 801fc0c:	f102 0e01 	add.w	lr, r2, #1
 801fc10:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 801fc14:	1212      	asrs	r2, r2, #8
 801fc16:	708a      	strb	r2, [r1, #2]
 801fc18:	b005      	add	sp, #20
 801fc1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fc1e:	bf00      	nop
 801fc20:	08027bdb 	.word	0x08027bdb
 801fc24:	080280d2 	.word	0x080280d2
 801fc28:	08027ca4 	.word	0x08027ca4

0801fc2c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801fc2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc30:	ed2d 8b08 	vpush	{d8-d11}
 801fc34:	b099      	sub	sp, #100	; 0x64
 801fc36:	eeb0 aa40 	vmov.f32	s20, s0
 801fc3a:	eef0 9a60 	vmov.f32	s19, s1
 801fc3e:	9306      	str	r3, [sp, #24]
 801fc40:	eeb0 9a41 	vmov.f32	s18, s2
 801fc44:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 801fc48:	eeb0 8a62 	vmov.f32	s16, s5
 801fc4c:	9216      	str	r2, [sp, #88]	; 0x58
 801fc4e:	eef0 8a43 	vmov.f32	s17, s6
 801fc52:	9307      	str	r3, [sp, #28]
 801fc54:	eef0 ba44 	vmov.f32	s23, s8
 801fc58:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 801fc5c:	eeb0 ba64 	vmov.f32	s22, s9
 801fc60:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801fc62:	eef0 aa45 	vmov.f32	s21, s10
 801fc66:	9310      	str	r3, [sp, #64]	; 0x40
 801fc68:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 801fc6c:	9017      	str	r0, [sp, #92]	; 0x5c
 801fc6e:	9112      	str	r1, [sp, #72]	; 0x48
 801fc70:	6850      	ldr	r0, [r2, #4]
 801fc72:	9315      	str	r3, [sp, #84]	; 0x54
 801fc74:	6812      	ldr	r2, [r2, #0]
 801fc76:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801fc78:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 801fc7c:	fb00 1303 	mla	r3, r0, r3, r1
 801fc80:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fc84:	18d3      	adds	r3, r2, r3
 801fc86:	930a      	str	r3, [sp, #40]	; 0x28
 801fc88:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801fc8a:	681b      	ldr	r3, [r3, #0]
 801fc8c:	9311      	str	r3, [sp, #68]	; 0x44
 801fc8e:	9b07      	ldr	r3, [sp, #28]
 801fc90:	009b      	lsls	r3, r3, #2
 801fc92:	930e      	str	r3, [sp, #56]	; 0x38
 801fc94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801fc96:	2b00      	cmp	r3, #0
 801fc98:	dc03      	bgt.n	801fca2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 801fc9a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801fc9c:	2b00      	cmp	r3, #0
 801fc9e:	f340 833b 	ble.w	8020318 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 801fca2:	9b06      	ldr	r3, [sp, #24]
 801fca4:	2b00      	cmp	r3, #0
 801fca6:	f340 8197 	ble.w	801ffd8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ac>
 801fcaa:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801fcac:	1423      	asrs	r3, r4, #16
 801fcae:	1412      	asrs	r2, r2, #16
 801fcb0:	d432      	bmi.n	801fd18 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 801fcb2:	1c51      	adds	r1, r2, #1
 801fcb4:	9807      	ldr	r0, [sp, #28]
 801fcb6:	4288      	cmp	r0, r1
 801fcb8:	dd31      	ble.n	801fd1e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801fcba:	2b00      	cmp	r3, #0
 801fcbc:	db2f      	blt.n	801fd1e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801fcbe:	1c59      	adds	r1, r3, #1
 801fcc0:	9810      	ldr	r0, [sp, #64]	; 0x40
 801fcc2:	4288      	cmp	r0, r1
 801fcc4:	dd2b      	ble.n	801fd1e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801fcc6:	9b06      	ldr	r3, [sp, #24]
 801fcc8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801fcca:	3b01      	subs	r3, #1
 801fccc:	992b      	ldr	r1, [sp, #172]	; 0xac
 801fcce:	fb02 1203 	mla	r2, r2, r3, r1
 801fcd2:	1412      	asrs	r2, r2, #16
 801fcd4:	d42e      	bmi.n	801fd34 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 801fcd6:	3201      	adds	r2, #1
 801fcd8:	9907      	ldr	r1, [sp, #28]
 801fcda:	4291      	cmp	r1, r2
 801fcdc:	dd2a      	ble.n	801fd34 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 801fcde:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801fce0:	fb02 4303 	mla	r3, r2, r3, r4
 801fce4:	141b      	asrs	r3, r3, #16
 801fce6:	d425      	bmi.n	801fd34 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 801fce8:	3301      	adds	r3, #1
 801fcea:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801fcec:	429a      	cmp	r2, r3
 801fcee:	dd21      	ble.n	801fd34 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 801fcf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fcf2:	f8bd b054 	ldrh.w	fp, [sp, #84]	; 0x54
 801fcf6:	f103 0e03 	add.w	lr, r3, #3
 801fcfa:	9b06      	ldr	r3, [sp, #24]
 801fcfc:	9313      	str	r3, [sp, #76]	; 0x4c
 801fcfe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801fd00:	2b00      	cmp	r3, #0
 801fd02:	f300 81d2 	bgt.w	80200aa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47e>
 801fd06:	9b06      	ldr	r3, [sp, #24]
 801fd08:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801fd0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fd0e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801fd12:	4423      	add	r3, r4
 801fd14:	930a      	str	r3, [sp, #40]	; 0x28
 801fd16:	e161      	b.n	801ffdc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b0>
 801fd18:	1c51      	adds	r1, r2, #1
 801fd1a:	f040 8150 	bne.w	801ffbe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 801fd1e:	9907      	ldr	r1, [sp, #28]
 801fd20:	428a      	cmp	r2, r1
 801fd22:	f280 814c 	bge.w	801ffbe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 801fd26:	1c5a      	adds	r2, r3, #1
 801fd28:	f2c0 8149 	blt.w	801ffbe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 801fd2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801fd2e:	4293      	cmp	r3, r2
 801fd30:	f280 8145 	bge.w	801ffbe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 801fd34:	9b06      	ldr	r3, [sp, #24]
 801fd36:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801fd38:	9314      	str	r3, [sp, #80]	; 0x50
 801fd3a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801fd3e:	9313      	str	r3, [sp, #76]	; 0x4c
 801fd40:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801fd42:	2b00      	cmp	r3, #0
 801fd44:	dddf      	ble.n	801fd06 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 801fd46:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801fd48:	1423      	asrs	r3, r4, #16
 801fd4a:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801fd4e:	f3c2 3003 	ubfx	r0, r2, #12, #4
 801fd52:	1412      	asrs	r2, r2, #16
 801fd54:	f100 8190 	bmi.w	8020078 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44c>
 801fd58:	1c55      	adds	r5, r2, #1
 801fd5a:	9f07      	ldr	r7, [sp, #28]
 801fd5c:	42af      	cmp	r7, r5
 801fd5e:	f340 818d 	ble.w	802007c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 801fd62:	2b00      	cmp	r3, #0
 801fd64:	f2c0 818a 	blt.w	802007c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 801fd68:	1c5d      	adds	r5, r3, #1
 801fd6a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801fd6c:	42af      	cmp	r7, r5
 801fd6e:	f340 8185 	ble.w	802007c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 801fd72:	9d07      	ldr	r5, [sp, #28]
 801fd74:	fb03 2305 	mla	r3, r3, r5, r2
 801fd78:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fd7a:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801fd7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801fd82:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801fd86:	2800      	cmp	r0, #0
 801fd88:	f000 8167 	beq.w	802005a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 801fd8c:	686a      	ldr	r2, [r5, #4]
 801fd8e:	920b      	str	r2, [sp, #44]	; 0x2c
 801fd90:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801fd94:	2900      	cmp	r1, #0
 801fd96:	f000 8169 	beq.w	802006c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 801fd9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801fd9c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801fd9e:	18aa      	adds	r2, r5, r2
 801fda0:	59ed      	ldr	r5, [r5, r7]
 801fda2:	6852      	ldr	r2, [r2, #4]
 801fda4:	9508      	str	r5, [sp, #32]
 801fda6:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 801fdaa:	0e15      	lsrs	r5, r2, #24
 801fdac:	920c      	str	r2, [sp, #48]	; 0x30
 801fdae:	b280      	uxth	r0, r0
 801fdb0:	b289      	uxth	r1, r1
 801fdb2:	fb00 fb01 	mul.w	fp, r0, r1
 801fdb6:	0100      	lsls	r0, r0, #4
 801fdb8:	ebcb 1101 	rsb	r1, fp, r1, lsl #4
 801fdbc:	eba0 090b 	sub.w	r9, r0, fp
 801fdc0:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 801fdc4:	b289      	uxth	r1, r1
 801fdc6:	fa1f f989 	uxth.w	r9, r9
 801fdca:	1a52      	subs	r2, r2, r1
 801fdcc:	fb09 f008 	mul.w	r0, r9, r8
 801fdd0:	b292      	uxth	r2, r2
 801fdd2:	fb02 000c 	mla	r0, r2, ip, r0
 801fdd6:	fb01 000a 	mla	r0, r1, sl, r0
 801fdda:	fb0b 0005 	mla	r0, fp, r5, r0
 801fdde:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801fde2:	2800      	cmp	r0, #0
 801fde4:	f000 80e0 	beq.w	801ffa8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 801fde8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801fdec:	d01b      	beq.n	801fe26 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fa>
 801fdee:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801fdf2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fdf6:	fb0c fe0e 	mul.w	lr, ip, lr
 801fdfa:	fb0c fc03 	mul.w	ip, ip, r3
 801fdfe:	ea4f 231e 	mov.w	r3, lr, lsr #8
 801fe02:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801fe06:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fe0a:	4473      	add	r3, lr
 801fe0c:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 801fe10:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 801fe14:	0a1b      	lsrs	r3, r3, #8
 801fe16:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fe1a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fe1e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801fe22:	ea43 030e 	orr.w	r3, r3, lr
 801fe26:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801fe2a:	d01e      	beq.n	801fe6a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801fe2c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801fe2e:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801fe32:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 801fe36:	fb08 fc0c 	mul.w	ip, r8, ip
 801fe3a:	fb08 f80e 	mul.w	r8, r8, lr
 801fe3e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801fe42:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801fe46:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fe4a:	44e6      	add	lr, ip
 801fe4c:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 801fe50:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 801fe54:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fe58:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801fe5c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fe60:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801fe64:	ea4e 0708 	orr.w	r7, lr, r8
 801fe68:	970b      	str	r7, [sp, #44]	; 0x2c
 801fe6a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801fe6e:	d01e      	beq.n	801feae <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801fe70:	9f08      	ldr	r7, [sp, #32]
 801fe72:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 801fe76:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801fe7a:	fb0a f808 	mul.w	r8, sl, r8
 801fe7e:	fb0a fa0c 	mul.w	sl, sl, ip
 801fe82:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 801fe86:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 801fe8a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801fe8e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fe92:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801fe96:	44c6      	add	lr, r8
 801fe98:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fe9c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fea0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fea4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fea8:	ea4e 070a 	orr.w	r7, lr, sl
 801feac:	9708      	str	r7, [sp, #32]
 801feae:	2dff      	cmp	r5, #255	; 0xff
 801feb0:	d01d      	beq.n	801feee <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c2>
 801feb2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801feb4:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 801feb8:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801febc:	fb05 f808 	mul.w	r8, r5, r8
 801fec0:	fb05 f50c 	mul.w	r5, r5, ip
 801fec4:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 801fec8:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 801fecc:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 801fed0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fed4:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801fed8:	44c6      	add	lr, r8
 801feda:	0a2d      	lsrs	r5, r5, #8
 801fedc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fee0:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801fee4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fee8:	ea4e 0505 	orr.w	r5, lr, r5
 801feec:	950c      	str	r5, [sp, #48]	; 0x30
 801feee:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801fef0:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801fef4:	9f08      	ldr	r7, [sp, #32]
 801fef6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fefa:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801fefe:	fb09 f505 	mul.w	r5, r9, r5
 801ff02:	fb02 550c 	mla	r5, r2, ip, r5
 801ff06:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801ff0a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801ff0c:	fb01 550c 	mla	r5, r1, ip, r5
 801ff10:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801ff14:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801ff16:	fb0b 550c 	mla	r5, fp, ip, r5
 801ff1a:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801ff1e:	fb09 f90c 	mul.w	r9, r9, ip
 801ff22:	0a2d      	lsrs	r5, r5, #8
 801ff24:	fb02 9303 	mla	r3, r2, r3, r9
 801ff28:	9a08      	ldr	r2, [sp, #32]
 801ff2a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801ff2e:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 801ff32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ff34:	fb01 330e 	mla	r3, r1, lr, r3
 801ff38:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801ff3c:	fb0b 3b01 	mla	fp, fp, r1, r3
 801ff40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ff42:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801ff44:	4343      	muls	r3, r0
 801ff46:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801ff4a:	1c58      	adds	r0, r3, #1
 801ff4c:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801ff50:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801ff54:	ea45 050b 	orr.w	r5, r5, fp
 801ff58:	7833      	ldrb	r3, [r6, #0]
 801ff5a:	b2ea      	uxtb	r2, r5
 801ff5c:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801ff60:	fb12 f201 	smulbb	r2, r2, r1
 801ff64:	b2c0      	uxtb	r0, r0
 801ff66:	fb03 2300 	mla	r3, r3, r0, r2
 801ff6a:	b29b      	uxth	r3, r3
 801ff6c:	1c5a      	adds	r2, r3, #1
 801ff6e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ff72:	7872      	ldrb	r2, [r6, #1]
 801ff74:	fb12 f200 	smulbb	r2, r2, r0
 801ff78:	121b      	asrs	r3, r3, #8
 801ff7a:	7033      	strb	r3, [r6, #0]
 801ff7c:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801ff80:	0c2d      	lsrs	r5, r5, #16
 801ff82:	fb03 2301 	mla	r3, r3, r1, r2
 801ff86:	b29b      	uxth	r3, r3
 801ff88:	1c5a      	adds	r2, r3, #1
 801ff8a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ff8e:	121b      	asrs	r3, r3, #8
 801ff90:	7073      	strb	r3, [r6, #1]
 801ff92:	78b3      	ldrb	r3, [r6, #2]
 801ff94:	fb13 f000 	smulbb	r0, r3, r0
 801ff98:	fb05 0501 	mla	r5, r5, r1, r0
 801ff9c:	b2ad      	uxth	r5, r5
 801ff9e:	1c6b      	adds	r3, r5, #1
 801ffa0:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801ffa4:	122d      	asrs	r5, r5, #8
 801ffa6:	70b5      	strb	r5, [r6, #2]
 801ffa8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801ffaa:	3603      	adds	r6, #3
 801ffac:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801ffae:	4413      	add	r3, r2
 801ffb0:	932b      	str	r3, [sp, #172]	; 0xac
 801ffb2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801ffb4:	441c      	add	r4, r3
 801ffb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ffb8:	3b01      	subs	r3, #1
 801ffba:	9314      	str	r3, [sp, #80]	; 0x50
 801ffbc:	e6c0      	b.n	801fd40 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 801ffbe:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801ffc0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801ffc2:	4413      	add	r3, r2
 801ffc4:	932b      	str	r3, [sp, #172]	; 0xac
 801ffc6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801ffc8:	441c      	add	r4, r3
 801ffca:	9b06      	ldr	r3, [sp, #24]
 801ffcc:	3b01      	subs	r3, #1
 801ffce:	9306      	str	r3, [sp, #24]
 801ffd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ffd2:	3303      	adds	r3, #3
 801ffd4:	930a      	str	r3, [sp, #40]	; 0x28
 801ffd6:	e664      	b.n	801fca2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 801ffd8:	f47f ae75 	bne.w	801fcc6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 801ffdc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ffde:	2b00      	cmp	r3, #0
 801ffe0:	f340 819a 	ble.w	8020318 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 801ffe4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ffe8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ffea:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801ffee:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801fff2:	eef0 6a48 	vmov.f32	s13, s16
 801fff6:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801fffa:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801fffe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020002:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 8020006:	eef0 6a68 	vmov.f32	s13, s17
 802000a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802000e:	ee16 4a90 	vmov	r4, s13
 8020012:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020016:	ee69 7a27 	vmul.f32	s15, s18, s15
 802001a:	ee37 8a48 	vsub.f32	s16, s14, s16
 802001e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020022:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020026:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802002a:	ee18 2a10 	vmov	r2, s16
 802002e:	eeb0 8a47 	vmov.f32	s16, s14
 8020032:	fb92 f3f3 	sdiv	r3, r2, r3
 8020036:	ee18 2a90 	vmov	r2, s17
 802003a:	932d      	str	r3, [sp, #180]	; 0xb4
 802003c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802003e:	eef0 8a67 	vmov.f32	s17, s15
 8020042:	fb92 f3f3 	sdiv	r3, r2, r3
 8020046:	932e      	str	r3, [sp, #184]	; 0xb8
 8020048:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802004a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802004c:	3b01      	subs	r3, #1
 802004e:	9312      	str	r3, [sp, #72]	; 0x48
 8020050:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020052:	bf08      	it	eq
 8020054:	4613      	moveq	r3, r2
 8020056:	9306      	str	r3, [sp, #24]
 8020058:	e61c      	b.n	801fc94 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 802005a:	b151      	cbz	r1, 8020072 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 802005c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802005e:	58aa      	ldr	r2, [r5, r2]
 8020060:	25ff      	movs	r5, #255	; 0xff
 8020062:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 8020066:	9208      	str	r2, [sp, #32]
 8020068:	46a8      	mov	r8, r5
 802006a:	e6a0      	b.n	801fdae <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 802006c:	25ff      	movs	r5, #255	; 0xff
 802006e:	46aa      	mov	sl, r5
 8020070:	e69d      	b.n	801fdae <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 8020072:	25ff      	movs	r5, #255	; 0xff
 8020074:	46aa      	mov	sl, r5
 8020076:	e7f7      	b.n	8020068 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43c>
 8020078:	1c57      	adds	r7, r2, #1
 802007a:	d195      	bne.n	801ffa8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802007c:	9d07      	ldr	r5, [sp, #28]
 802007e:	4295      	cmp	r5, r2
 8020080:	dd92      	ble.n	801ffa8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8020082:	1c5d      	adds	r5, r3, #1
 8020084:	db90      	blt.n	801ffa8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8020086:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8020088:	429d      	cmp	r5, r3
 802008a:	dd8d      	ble.n	801ffa8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802008c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802008e:	9201      	str	r2, [sp, #4]
 8020090:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020092:	e9cd 3002 	strd	r3, r0, [sp, #8]
 8020096:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020098:	9817      	ldr	r0, [sp, #92]	; 0x5c
 802009a:	9300      	str	r3, [sp, #0]
 802009c:	9b07      	ldr	r3, [sp, #28]
 802009e:	e9cd 1504 	strd	r1, r5, [sp, #16]
 80200a2:	4631      	mov	r1, r6
 80200a4:	f7ff fc68 	bl	801f978 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 80200a8:	e77e      	b.n	801ffa8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 80200aa:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80200ac:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80200b0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80200b2:	9d07      	ldr	r5, [sp, #28]
 80200b4:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80200b8:	1412      	asrs	r2, r2, #16
 80200ba:	1423      	asrs	r3, r4, #16
 80200bc:	fb05 2303 	mla	r3, r5, r3, r2
 80200c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80200c2:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80200c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80200ca:	0e1e      	lsrs	r6, r3, #24
 80200cc:	2900      	cmp	r1, #0
 80200ce:	f000 8114 	beq.w	80202fa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ce>
 80200d2:	686a      	ldr	r2, [r5, #4]
 80200d4:	920d      	str	r2, [sp, #52]	; 0x34
 80200d6:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 80200da:	2800      	cmp	r0, #0
 80200dc:	f000 8116 	beq.w	802030c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e0>
 80200e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80200e2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80200e4:	18aa      	adds	r2, r5, r2
 80200e6:	59ed      	ldr	r5, [r5, r7]
 80200e8:	6852      	ldr	r2, [r2, #4]
 80200ea:	9509      	str	r5, [sp, #36]	; 0x24
 80200ec:	ea4f 6915 	mov.w	r9, r5, lsr #24
 80200f0:	0e15      	lsrs	r5, r2, #24
 80200f2:	920f      	str	r2, [sp, #60]	; 0x3c
 80200f4:	b289      	uxth	r1, r1
 80200f6:	b280      	uxth	r0, r0
 80200f8:	fb01 fa00 	mul.w	sl, r1, r0
 80200fc:	0109      	lsls	r1, r1, #4
 80200fe:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8020102:	eba1 080a 	sub.w	r8, r1, sl
 8020106:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 802010a:	b280      	uxth	r0, r0
 802010c:	fa1f f888 	uxth.w	r8, r8
 8020110:	1a12      	subs	r2, r2, r0
 8020112:	fb08 f10c 	mul.w	r1, r8, ip
 8020116:	b292      	uxth	r2, r2
 8020118:	fb02 1106 	mla	r1, r2, r6, r1
 802011c:	fb00 1109 	mla	r1, r0, r9, r1
 8020120:	fb0a 1105 	mla	r1, sl, r5, r1
 8020124:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020128:	2900      	cmp	r1, #0
 802012a:	f000 80da 	beq.w	80202e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 802012e:	2eff      	cmp	r6, #255	; 0xff
 8020130:	d016      	beq.n	8020160 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x534>
 8020132:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8020136:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802013a:	4377      	muls	r7, r6
 802013c:	435e      	muls	r6, r3
 802013e:	0a3b      	lsrs	r3, r7, #8
 8020140:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020144:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020148:	443b      	add	r3, r7
 802014a:	f506 7780 	add.w	r7, r6, #256	; 0x100
 802014e:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8020152:	0a1b      	lsrs	r3, r3, #8
 8020154:	0a3f      	lsrs	r7, r7, #8
 8020156:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802015a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802015e:	433b      	orrs	r3, r7
 8020160:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8020164:	d01d      	beq.n	80201a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x576>
 8020166:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8020168:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 802016a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802016e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020172:	fb0c f606 	mul.w	r6, ip, r6
 8020176:	fb0c fc07 	mul.w	ip, ip, r7
 802017a:	0a37      	lsrs	r7, r6, #8
 802017c:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8020180:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020184:	4437      	add	r7, r6
 8020186:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 802018a:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 802018e:	0a3f      	lsrs	r7, r7, #8
 8020190:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020194:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020198:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802019c:	ea47 060c 	orr.w	r6, r7, ip
 80201a0:	960d      	str	r6, [sp, #52]	; 0x34
 80201a2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80201a6:	d01d      	beq.n	80201e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b8>
 80201a8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80201aa:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80201ae:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80201b2:	fb09 fc0c 	mul.w	ip, r9, ip
 80201b6:	fb09 f906 	mul.w	r9, r9, r6
 80201ba:	ea4f 271c 	mov.w	r7, ip, lsr #8
 80201be:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80201c2:	f509 7680 	add.w	r6, r9, #256	; 0x100
 80201c6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80201ca:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 80201ce:	4467      	add	r7, ip
 80201d0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80201d4:	0a3f      	lsrs	r7, r7, #8
 80201d6:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80201da:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80201de:	ea47 0609 	orr.w	r6, r7, r9
 80201e2:	9609      	str	r6, [sp, #36]	; 0x24
 80201e4:	2dff      	cmp	r5, #255	; 0xff
 80201e6:	d01a      	beq.n	802021e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f2>
 80201e8:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80201ea:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80201ee:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80201f2:	fb05 fc0c 	mul.w	ip, r5, ip
 80201f6:	4375      	muls	r5, r6
 80201f8:	ea4f 271c 	mov.w	r7, ip, lsr #8
 80201fc:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020200:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8020204:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020208:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 802020c:	4467      	add	r7, ip
 802020e:	0a2d      	lsrs	r5, r5, #8
 8020210:	0a3f      	lsrs	r7, r7, #8
 8020212:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8020216:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802021a:	433d      	orrs	r5, r7
 802021c:	950f      	str	r5, [sp, #60]	; 0x3c
 802021e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8020220:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 8020224:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020228:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802022c:	fb08 f505 	mul.w	r5, r8, r5
 8020230:	fb02 5506 	mla	r5, r2, r6, r5
 8020234:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8020236:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802023a:	fb00 5506 	mla	r5, r0, r6, r5
 802023e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8020240:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020244:	fb0a 5506 	mla	r5, sl, r6, r5
 8020248:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 802024a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802024e:	0a2d      	lsrs	r5, r5, #8
 8020250:	fb08 f806 	mul.w	r8, r8, r6
 8020254:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8020258:	fb02 8303 	mla	r3, r2, r3, r8
 802025c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802025e:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8020262:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020264:	fb00 3307 	mla	r3, r0, r7, r3
 8020268:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 802026c:	fb0a 3c0c 	mla	ip, sl, ip, r3
 8020270:	fb01 f30b 	mul.w	r3, r1, fp
 8020274:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020278:	1c59      	adds	r1, r3, #1
 802027a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802027e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8020282:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8020286:	ea45 050c 	orr.w	r5, r5, ip
 802028a:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 802028e:	b2ea      	uxtb	r2, r5
 8020290:	b2c9      	uxtb	r1, r1
 8020292:	fb12 f20b 	smulbb	r2, r2, fp
 8020296:	fb03 2301 	mla	r3, r3, r1, r2
 802029a:	b29b      	uxth	r3, r3
 802029c:	1c5a      	adds	r2, r3, #1
 802029e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80202a2:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 80202a6:	fb12 f201 	smulbb	r2, r2, r1
 80202aa:	121b      	asrs	r3, r3, #8
 80202ac:	f80e 3c03 	strb.w	r3, [lr, #-3]
 80202b0:	f3c5 2307 	ubfx	r3, r5, #8, #8
 80202b4:	0c2d      	lsrs	r5, r5, #16
 80202b6:	fb03 230b 	mla	r3, r3, fp, r2
 80202ba:	b29b      	uxth	r3, r3
 80202bc:	1c5a      	adds	r2, r3, #1
 80202be:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80202c2:	121b      	asrs	r3, r3, #8
 80202c4:	f80e 3c02 	strb.w	r3, [lr, #-2]
 80202c8:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 80202cc:	fb13 f101 	smulbb	r1, r3, r1
 80202d0:	fb05 150b 	mla	r5, r5, fp, r1
 80202d4:	b2ad      	uxth	r5, r5
 80202d6:	1c69      	adds	r1, r5, #1
 80202d8:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 80202dc:	122d      	asrs	r5, r5, #8
 80202de:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80202e2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80202e4:	f10e 0e03 	add.w	lr, lr, #3
 80202e8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80202ea:	4413      	add	r3, r2
 80202ec:	932b      	str	r3, [sp, #172]	; 0xac
 80202ee:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80202f0:	441c      	add	r4, r3
 80202f2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80202f4:	3b01      	subs	r3, #1
 80202f6:	9313      	str	r3, [sp, #76]	; 0x4c
 80202f8:	e501      	b.n	801fcfe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 80202fa:	b150      	cbz	r0, 8020312 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e6>
 80202fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80202fe:	58aa      	ldr	r2, [r5, r2]
 8020300:	25ff      	movs	r5, #255	; 0xff
 8020302:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8020306:	9209      	str	r2, [sp, #36]	; 0x24
 8020308:	46ac      	mov	ip, r5
 802030a:	e6f3      	b.n	80200f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 802030c:	25ff      	movs	r5, #255	; 0xff
 802030e:	46a9      	mov	r9, r5
 8020310:	e6f0      	b.n	80200f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 8020312:	25ff      	movs	r5, #255	; 0xff
 8020314:	46a9      	mov	r9, r5
 8020316:	e7f7      	b.n	8020308 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6dc>
 8020318:	b019      	add	sp, #100	; 0x64
 802031a:	ecbd 8b08 	vpop	{d8-d11}
 802031e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08020324 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 8020324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020328:	b085      	sub	sp, #20
 802032a:	7888      	ldrb	r0, [r1, #2]
 802032c:	4691      	mov	r9, r2
 802032e:	9000      	str	r0, [sp, #0]
 8020330:	7848      	ldrb	r0, [r1, #1]
 8020332:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 8020336:	9001      	str	r0, [sp, #4]
 8020338:	7808      	ldrb	r0, [r1, #0]
 802033a:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 802033e:	9002      	str	r0, [sp, #8]
 8020340:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8020344:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8020348:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 802034c:	fb04 c603 	mla	r6, r4, r3, ip
 8020350:	2c00      	cmp	r4, #0
 8020352:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 8020356:	9a00      	ldr	r2, [sp, #0]
 8020358:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 802035c:	9a01      	ldr	r2, [sp, #4]
 802035e:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8020362:	db3a      	blt.n	80203da <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 8020364:	45a0      	cmp	r8, r4
 8020366:	dd38      	ble.n	80203da <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 8020368:	f1bc 0f00 	cmp.w	ip, #0
 802036c:	db33      	blt.n	80203d6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 802036e:	4563      	cmp	r3, ip
 8020370:	dd31      	ble.n	80203d6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 8020372:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 8020376:	f11c 0601 	adds.w	r6, ip, #1
 802037a:	d431      	bmi.n	80203e0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 802037c:	42b3      	cmp	r3, r6
 802037e:	dd2f      	ble.n	80203e0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8020380:	b375      	cbz	r5, 80203e0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8020382:	f8de 6004 	ldr.w	r6, [lr, #4]
 8020386:	3401      	adds	r4, #1
 8020388:	d42e      	bmi.n	80203e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 802038a:	45a0      	cmp	r8, r4
 802038c:	dd2c      	ble.n	80203e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 802038e:	b35f      	cbz	r7, 80203e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8020390:	f1bc 0f00 	cmp.w	ip, #0
 8020394:	db26      	blt.n	80203e4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 8020396:	4563      	cmp	r3, ip
 8020398:	dd24      	ble.n	80203e4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 802039a:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 802039e:	f11c 0c01 	adds.w	ip, ip, #1
 80203a2:	d405      	bmi.n	80203b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 80203a4:	4563      	cmp	r3, ip
 80203a6:	dd03      	ble.n	80203b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 80203a8:	b115      	cbz	r5, 80203b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 80203aa:	3301      	adds	r3, #1
 80203ac:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 80203b0:	2d0f      	cmp	r5, #15
 80203b2:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80203b6:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80203ba:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80203be:	ea4f 6810 	mov.w	r8, r0, lsr #24
 80203c2:	d801      	bhi.n	80203c8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa4>
 80203c4:	2f0f      	cmp	r7, #15
 80203c6:	d911      	bls.n	80203ec <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc8>
 80203c8:	4b77      	ldr	r3, [pc, #476]	; (80205a8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x284>)
 80203ca:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80203ce:	4a77      	ldr	r2, [pc, #476]	; (80205ac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x288>)
 80203d0:	4877      	ldr	r0, [pc, #476]	; (80205b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x28c>)
 80203d2:	f003 f831 	bl	8023438 <__assert_func>
 80203d6:	4602      	mov	r2, r0
 80203d8:	e7cd      	b.n	8020376 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x52>
 80203da:	4606      	mov	r6, r0
 80203dc:	4602      	mov	r2, r0
 80203de:	e7d2      	b.n	8020386 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 80203e0:	4606      	mov	r6, r0
 80203e2:	e7d0      	b.n	8020386 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 80203e4:	4604      	mov	r4, r0
 80203e6:	e7da      	b.n	802039e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7a>
 80203e8:	4604      	mov	r4, r0
 80203ea:	e7e1      	b.n	80203b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 80203ec:	b2ab      	uxth	r3, r5
 80203ee:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80203f2:	b2bf      	uxth	r7, r7
 80203f4:	fb03 fe07 	mul.w	lr, r3, r7
 80203f8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80203fc:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8020400:	eba3 0c0e 	sub.w	ip, r3, lr
 8020404:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8020408:	b2bf      	uxth	r7, r7
 802040a:	fa1f fc8c 	uxth.w	ip, ip
 802040e:	eba5 0507 	sub.w	r5, r5, r7
 8020412:	fb0c f30a 	mul.w	r3, ip, sl
 8020416:	b2ad      	uxth	r5, r5
 8020418:	fb05 330b 	mla	r3, r5, fp, r3
 802041c:	fb07 3309 	mla	r3, r7, r9, r3
 8020420:	fb0e 3308 	mla	r3, lr, r8, r3
 8020424:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020428:	9303      	str	r3, [sp, #12]
 802042a:	d018      	beq.n	802045e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x13a>
 802042c:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8020430:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020434:	fb0b f303 	mul.w	r3, fp, r3
 8020438:	fb0b fb02 	mul.w	fp, fp, r2
 802043c:	0a1a      	lsrs	r2, r3, #8
 802043e:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8020442:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020446:	441a      	add	r2, r3
 8020448:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 802044c:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8020450:	0a12      	lsrs	r2, r2, #8
 8020452:	0a1b      	lsrs	r3, r3, #8
 8020454:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020458:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802045c:	431a      	orrs	r2, r3
 802045e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8020462:	d019      	beq.n	8020498 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x174>
 8020464:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8020468:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802046c:	fb0a fb0b 	mul.w	fp, sl, fp
 8020470:	fb0a fa06 	mul.w	sl, sl, r6
 8020474:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8020478:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802047c:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8020480:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020484:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8020488:	445e      	add	r6, fp
 802048a:	0a1b      	lsrs	r3, r3, #8
 802048c:	0a36      	lsrs	r6, r6, #8
 802048e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020492:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020496:	431e      	orrs	r6, r3
 8020498:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802049c:	d019      	beq.n	80204d2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1ae>
 802049e:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80204a2:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80204a6:	fb09 fa0a 	mul.w	sl, r9, sl
 80204aa:	fb09 f904 	mul.w	r9, r9, r4
 80204ae:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80204b2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80204b6:	f509 7380 	add.w	r3, r9, #256	; 0x100
 80204ba:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80204be:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 80204c2:	4454      	add	r4, sl
 80204c4:	0a1b      	lsrs	r3, r3, #8
 80204c6:	0a24      	lsrs	r4, r4, #8
 80204c8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80204cc:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80204d0:	431c      	orrs	r4, r3
 80204d2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80204d6:	d019      	beq.n	802050c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1e8>
 80204d8:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 80204dc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80204e0:	fb08 f909 	mul.w	r9, r8, r9
 80204e4:	fb08 f800 	mul.w	r8, r8, r0
 80204e8:	ea4f 2019 	mov.w	r0, r9, lsr #8
 80204ec:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80204f0:	f508 7380 	add.w	r3, r8, #256	; 0x100
 80204f4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80204f8:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 80204fc:	4448      	add	r0, r9
 80204fe:	0a1b      	lsrs	r3, r3, #8
 8020500:	0a00      	lsrs	r0, r0, #8
 8020502:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020506:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802050a:	4318      	orrs	r0, r3
 802050c:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8020510:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020514:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8020518:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802051c:	fb0c f808 	mul.w	r8, ip, r8
 8020520:	fb0c f606 	mul.w	r6, ip, r6
 8020524:	fb05 8803 	mla	r8, r5, r3, r8
 8020528:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 802052c:	fb05 6202 	mla	r2, r5, r2, r6
 8020530:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8020534:	fb07 8803 	mla	r8, r7, r3, r8
 8020538:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 802053c:	fb07 2704 	mla	r7, r7, r4, r2
 8020540:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8020544:	fb0e 8303 	mla	r3, lr, r3, r8
 8020548:	fb0e 7e00 	mla	lr, lr, r0, r7
 802054c:	9802      	ldr	r0, [sp, #8]
 802054e:	0a1b      	lsrs	r3, r3, #8
 8020550:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020554:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020558:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802055c:	ea43 0e0e 	orr.w	lr, r3, lr
 8020560:	9b03      	ldr	r3, [sp, #12]
 8020562:	43db      	mvns	r3, r3
 8020564:	b2db      	uxtb	r3, r3
 8020566:	4358      	muls	r0, r3
 8020568:	1c42      	adds	r2, r0, #1
 802056a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802056e:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8020572:	700a      	strb	r2, [r1, #0]
 8020574:	9a01      	ldr	r2, [sp, #4]
 8020576:	435a      	muls	r2, r3
 8020578:	1c50      	adds	r0, r2, #1
 802057a:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 802057e:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8020582:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8020586:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802058a:	704a      	strb	r2, [r1, #1]
 802058c:	9a00      	ldr	r2, [sp, #0]
 802058e:	435a      	muls	r2, r3
 8020590:	4613      	mov	r3, r2
 8020592:	3201      	adds	r2, #1
 8020594:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020598:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 802059c:	f881 e002 	strb.w	lr, [r1, #2]
 80205a0:	b005      	add	sp, #20
 80205a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80205a6:	bf00      	nop
 80205a8:	08027bdb 	.word	0x08027bdb
 80205ac:	080280d2 	.word	0x080280d2
 80205b0:	08027ca4 	.word	0x08027ca4

080205b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80205b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80205b8:	ed2d 8b08 	vpush	{d8-d11}
 80205bc:	b097      	sub	sp, #92	; 0x5c
 80205be:	eeb0 aa40 	vmov.f32	s20, s0
 80205c2:	eef0 9a60 	vmov.f32	s19, s1
 80205c6:	9306      	str	r3, [sp, #24]
 80205c8:	eeb0 9a41 	vmov.f32	s18, s2
 80205cc:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 80205d0:	eeb0 8a62 	vmov.f32	s16, s5
 80205d4:	9214      	str	r2, [sp, #80]	; 0x50
 80205d6:	eef0 8a43 	vmov.f32	s17, s6
 80205da:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80205dc:	eef0 ba44 	vmov.f32	s23, s8
 80205e0:	9307      	str	r3, [sp, #28]
 80205e2:	eeb0 ba64 	vmov.f32	s22, s9
 80205e6:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 80205ea:	eef0 aa45 	vmov.f32	s21, s10
 80205ee:	9015      	str	r0, [sp, #84]	; 0x54
 80205f0:	9112      	str	r1, [sp, #72]	; 0x48
 80205f2:	6850      	ldr	r0, [r2, #4]
 80205f4:	9310      	str	r3, [sp, #64]	; 0x40
 80205f6:	6812      	ldr	r2, [r2, #0]
 80205f8:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 80205fa:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80205fe:	fb00 1303 	mla	r3, r0, r3, r1
 8020602:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020606:	18d3      	adds	r3, r2, r3
 8020608:	930a      	str	r3, [sp, #40]	; 0x28
 802060a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802060c:	681b      	ldr	r3, [r3, #0]
 802060e:	9311      	str	r3, [sp, #68]	; 0x44
 8020610:	9b07      	ldr	r3, [sp, #28]
 8020612:	009b      	lsls	r3, r3, #2
 8020614:	930e      	str	r3, [sp, #56]	; 0x38
 8020616:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020618:	2b00      	cmp	r3, #0
 802061a:	dc03      	bgt.n	8020624 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 802061c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802061e:	2b00      	cmp	r3, #0
 8020620:	f340 832e 	ble.w	8020c80 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 8020624:	9b06      	ldr	r3, [sp, #24]
 8020626:	2b00      	cmp	r3, #0
 8020628:	f340 8186 	ble.w	8020938 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x384>
 802062c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802062e:	1423      	asrs	r3, r4, #16
 8020630:	1412      	asrs	r2, r2, #16
 8020632:	d42f      	bmi.n	8020694 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 8020634:	1c51      	adds	r1, r2, #1
 8020636:	9807      	ldr	r0, [sp, #28]
 8020638:	4288      	cmp	r0, r1
 802063a:	dd2e      	ble.n	802069a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 802063c:	2b00      	cmp	r3, #0
 802063e:	db2c      	blt.n	802069a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8020640:	1c59      	adds	r1, r3, #1
 8020642:	9810      	ldr	r0, [sp, #64]	; 0x40
 8020644:	4288      	cmp	r0, r1
 8020646:	dd28      	ble.n	802069a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8020648:	9b06      	ldr	r3, [sp, #24]
 802064a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802064c:	3b01      	subs	r3, #1
 802064e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8020650:	fb02 1203 	mla	r2, r2, r3, r1
 8020654:	1412      	asrs	r2, r2, #16
 8020656:	d42b      	bmi.n	80206b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8020658:	3201      	adds	r2, #1
 802065a:	9907      	ldr	r1, [sp, #28]
 802065c:	4291      	cmp	r1, r2
 802065e:	dd27      	ble.n	80206b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8020660:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8020662:	fb02 4303 	mla	r3, r2, r3, r4
 8020666:	141b      	asrs	r3, r3, #16
 8020668:	d422      	bmi.n	80206b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 802066a:	3301      	adds	r3, #1
 802066c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802066e:	429a      	cmp	r2, r3
 8020670:	dd1e      	ble.n	80206b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8020672:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020674:	f8dd b018 	ldr.w	fp, [sp, #24]
 8020678:	1cdd      	adds	r5, r3, #3
 802067a:	f1bb 0f00 	cmp.w	fp, #0
 802067e:	f300 81c4 	bgt.w	8020a0a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 8020682:	9b06      	ldr	r3, [sp, #24]
 8020684:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020688:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802068a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802068e:	4423      	add	r3, r4
 8020690:	930a      	str	r3, [sp, #40]	; 0x28
 8020692:	e153      	b.n	802093c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x388>
 8020694:	1c51      	adds	r1, r2, #1
 8020696:	f040 8142 	bne.w	802091e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 802069a:	9907      	ldr	r1, [sp, #28]
 802069c:	428a      	cmp	r2, r1
 802069e:	f280 813e 	bge.w	802091e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 80206a2:	1c5a      	adds	r2, r3, #1
 80206a4:	f2c0 813b 	blt.w	802091e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 80206a8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80206aa:	4293      	cmp	r3, r2
 80206ac:	f280 8137 	bge.w	802091e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 80206b0:	9b06      	ldr	r3, [sp, #24]
 80206b2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80206b4:	9313      	str	r3, [sp, #76]	; 0x4c
 80206b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80206b8:	2b00      	cmp	r3, #0
 80206ba:	dde2      	ble.n	8020682 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xce>
 80206bc:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80206be:	1423      	asrs	r3, r4, #16
 80206c0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80206c2:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80206c6:	1409      	asrs	r1, r1, #16
 80206c8:	f3c2 3203 	ubfx	r2, r2, #12, #4
 80206cc:	f100 8187 	bmi.w	80209de <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42a>
 80206d0:	1c4e      	adds	r6, r1, #1
 80206d2:	9f07      	ldr	r7, [sp, #28]
 80206d4:	42b7      	cmp	r7, r6
 80206d6:	f340 8184 	ble.w	80209e2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 80206da:	2b00      	cmp	r3, #0
 80206dc:	f2c0 8181 	blt.w	80209e2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 80206e0:	1c5e      	adds	r6, r3, #1
 80206e2:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80206e4:	42b7      	cmp	r7, r6
 80206e6:	f340 817c 	ble.w	80209e2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 80206ea:	9e07      	ldr	r6, [sp, #28]
 80206ec:	fb03 1306 	mla	r3, r3, r6, r1
 80206f0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80206f2:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 80206f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80206fa:	0e1f      	lsrs	r7, r3, #24
 80206fc:	2a00      	cmp	r2, #0
 80206fe:	f000 815c 	beq.w	80209ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 8020702:	6871      	ldr	r1, [r6, #4]
 8020704:	910b      	str	r1, [sp, #44]	; 0x2c
 8020706:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 802070a:	2800      	cmp	r0, #0
 802070c:	f000 815e 	beq.w	80209cc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x418>
 8020710:	990e      	ldr	r1, [sp, #56]	; 0x38
 8020712:	eb06 0c01 	add.w	ip, r6, r1
 8020716:	5876      	ldr	r6, [r6, r1]
 8020718:	f8dc 1004 	ldr.w	r1, [ip, #4]
 802071c:	ea4f 6916 	mov.w	r9, r6, lsr #24
 8020720:	9608      	str	r6, [sp, #32]
 8020722:	0e0e      	lsrs	r6, r1, #24
 8020724:	910c      	str	r1, [sp, #48]	; 0x30
 8020726:	b292      	uxth	r2, r2
 8020728:	b280      	uxth	r0, r0
 802072a:	fb02 fa00 	mul.w	sl, r2, r0
 802072e:	0112      	lsls	r2, r2, #4
 8020730:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8020734:	eba2 080a 	sub.w	r8, r2, sl
 8020738:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 802073c:	b280      	uxth	r0, r0
 802073e:	fa1f f888 	uxth.w	r8, r8
 8020742:	1a09      	subs	r1, r1, r0
 8020744:	fb08 f20e 	mul.w	r2, r8, lr
 8020748:	b289      	uxth	r1, r1
 802074a:	fb01 2207 	mla	r2, r1, r7, r2
 802074e:	fb00 2209 	mla	r2, r0, r9, r2
 8020752:	fb0a 2206 	mla	r2, sl, r6, r2
 8020756:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802075a:	2a00      	cmp	r2, #0
 802075c:	f000 80d4 	beq.w	8020908 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8020760:	2fff      	cmp	r7, #255	; 0xff
 8020762:	d01a      	beq.n	802079a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e6>
 8020764:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8020768:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802076c:	fb07 fc0c 	mul.w	ip, r7, ip
 8020770:	435f      	muls	r7, r3
 8020772:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8020776:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802077a:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 802077e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020782:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 8020786:	4463      	add	r3, ip
 8020788:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802078c:	0a1b      	lsrs	r3, r3, #8
 802078e:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8020792:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020796:	ea43 030b 	orr.w	r3, r3, fp
 802079a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802079e:	d01e      	beq.n	80207de <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 80207a0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80207a2:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 80207a6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80207aa:	fb0e fb0b 	mul.w	fp, lr, fp
 80207ae:	fb0e fe07 	mul.w	lr, lr, r7
 80207b2:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 80207b6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80207ba:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 80207be:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80207c2:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 80207c6:	44dc      	add	ip, fp
 80207c8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80207cc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80207d0:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80207d4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80207d8:	ea4c 070e 	orr.w	r7, ip, lr
 80207dc:	970b      	str	r7, [sp, #44]	; 0x2c
 80207de:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80207e2:	d01e      	beq.n	8020822 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 80207e4:	9f08      	ldr	r7, [sp, #32]
 80207e6:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 80207ea:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80207ee:	fb09 fe0e 	mul.w	lr, r9, lr
 80207f2:	fb09 f907 	mul.w	r9, r9, r7
 80207f6:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80207fa:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80207fe:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8020802:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020806:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 802080a:	44f4      	add	ip, lr
 802080c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020810:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020814:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8020818:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802081c:	ea4c 0709 	orr.w	r7, ip, r9
 8020820:	9708      	str	r7, [sp, #32]
 8020822:	2eff      	cmp	r6, #255	; 0xff
 8020824:	d01c      	beq.n	8020860 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 8020826:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8020828:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 802082c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020830:	fb06 fe0e 	mul.w	lr, r6, lr
 8020834:	437e      	muls	r6, r7
 8020836:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 802083a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802083e:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8020842:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020846:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 802084a:	44f4      	add	ip, lr
 802084c:	0a36      	lsrs	r6, r6, #8
 802084e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020852:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020856:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802085a:	ea4c 0606 	orr.w	r6, ip, r6
 802085e:	960c      	str	r6, [sp, #48]	; 0x30
 8020860:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8020862:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8020866:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802086a:	2aff      	cmp	r2, #255	; 0xff
 802086c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020870:	fb08 f606 	mul.w	r6, r8, r6
 8020874:	fb01 6607 	mla	r6, r1, r7, r6
 8020878:	9f08      	ldr	r7, [sp, #32]
 802087a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802087e:	fb00 6607 	mla	r6, r0, r7, r6
 8020882:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8020884:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020888:	fb0a 6607 	mla	r6, sl, r7, r6
 802088c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 802088e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020892:	ea4f 2616 	mov.w	r6, r6, lsr #8
 8020896:	fb08 f807 	mul.w	r8, r8, r7
 802089a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802089e:	fb01 8303 	mla	r3, r1, r3, r8
 80208a2:	9908      	ldr	r1, [sp, #32]
 80208a4:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 80208a8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80208aa:	fb00 330c 	mla	r3, r0, ip, r3
 80208ae:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 80208b2:	fb0a 3a00 	mla	sl, sl, r0, r3
 80208b6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80208ba:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80208be:	ea46 060a 	orr.w	r6, r6, sl
 80208c2:	b2f0      	uxtb	r0, r6
 80208c4:	f3c6 2107 	ubfx	r1, r6, #8, #8
 80208c8:	ea4f 4616 	mov.w	r6, r6, lsr #16
 80208cc:	f000 8084 	beq.w	80209d8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 80208d0:	43d2      	mvns	r2, r2
 80208d2:	782b      	ldrb	r3, [r5, #0]
 80208d4:	b2d2      	uxtb	r2, r2
 80208d6:	fb03 f702 	mul.w	r7, r3, r2
 80208da:	1c7b      	adds	r3, r7, #1
 80208dc:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 80208e0:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80208e4:	702b      	strb	r3, [r5, #0]
 80208e6:	786b      	ldrb	r3, [r5, #1]
 80208e8:	fb03 f002 	mul.w	r0, r3, r2
 80208ec:	1c43      	adds	r3, r0, #1
 80208ee:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80208f2:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80208f6:	706b      	strb	r3, [r5, #1]
 80208f8:	78ab      	ldrb	r3, [r5, #2]
 80208fa:	4353      	muls	r3, r2
 80208fc:	1c5a      	adds	r2, r3, #1
 80208fe:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8020902:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8020906:	70ae      	strb	r6, [r5, #2]
 8020908:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802090a:	3503      	adds	r5, #3
 802090c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802090e:	4413      	add	r3, r2
 8020910:	9329      	str	r3, [sp, #164]	; 0xa4
 8020912:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020914:	441c      	add	r4, r3
 8020916:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020918:	3b01      	subs	r3, #1
 802091a:	9313      	str	r3, [sp, #76]	; 0x4c
 802091c:	e6cb      	b.n	80206b6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 802091e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020920:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020922:	4413      	add	r3, r2
 8020924:	9329      	str	r3, [sp, #164]	; 0xa4
 8020926:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020928:	441c      	add	r4, r3
 802092a:	9b06      	ldr	r3, [sp, #24]
 802092c:	3b01      	subs	r3, #1
 802092e:	9306      	str	r3, [sp, #24]
 8020930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020932:	3303      	adds	r3, #3
 8020934:	930a      	str	r3, [sp, #40]	; 0x28
 8020936:	e675      	b.n	8020624 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8020938:	f47f ae86 	bne.w	8020648 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 802093c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802093e:	2b00      	cmp	r3, #0
 8020940:	f340 819e 	ble.w	8020c80 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 8020944:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020948:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802094a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802094e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8020952:	eef0 6a48 	vmov.f32	s13, s16
 8020956:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802095a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802095e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020962:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8020966:	eef0 6a68 	vmov.f32	s13, s17
 802096a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802096e:	ee16 4a90 	vmov	r4, s13
 8020972:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020976:	ee69 7a27 	vmul.f32	s15, s18, s15
 802097a:	ee37 8a48 	vsub.f32	s16, s14, s16
 802097e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020982:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020986:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802098a:	ee18 2a10 	vmov	r2, s16
 802098e:	eeb0 8a47 	vmov.f32	s16, s14
 8020992:	fb92 f3f3 	sdiv	r3, r2, r3
 8020996:	ee18 2a90 	vmov	r2, s17
 802099a:	932b      	str	r3, [sp, #172]	; 0xac
 802099c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802099e:	eef0 8a67 	vmov.f32	s17, s15
 80209a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80209a6:	932c      	str	r3, [sp, #176]	; 0xb0
 80209a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80209aa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80209ac:	3b01      	subs	r3, #1
 80209ae:	9312      	str	r3, [sp, #72]	; 0x48
 80209b0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80209b2:	bf08      	it	eq
 80209b4:	4613      	moveq	r3, r2
 80209b6:	9306      	str	r3, [sp, #24]
 80209b8:	e62d      	b.n	8020616 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 80209ba:	b150      	cbz	r0, 80209d2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41e>
 80209bc:	990e      	ldr	r1, [sp, #56]	; 0x38
 80209be:	5871      	ldr	r1, [r6, r1]
 80209c0:	26ff      	movs	r6, #255	; 0xff
 80209c2:	ea4f 6911 	mov.w	r9, r1, lsr #24
 80209c6:	9108      	str	r1, [sp, #32]
 80209c8:	46b6      	mov	lr, r6
 80209ca:	e6ac      	b.n	8020726 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 80209cc:	26ff      	movs	r6, #255	; 0xff
 80209ce:	46b1      	mov	r9, r6
 80209d0:	e6a9      	b.n	8020726 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 80209d2:	26ff      	movs	r6, #255	; 0xff
 80209d4:	46b1      	mov	r9, r6
 80209d6:	e7f7      	b.n	80209c8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 80209d8:	7028      	strb	r0, [r5, #0]
 80209da:	7069      	strb	r1, [r5, #1]
 80209dc:	e793      	b.n	8020906 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x352>
 80209de:	1c4f      	adds	r7, r1, #1
 80209e0:	d192      	bne.n	8020908 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 80209e2:	9e07      	ldr	r6, [sp, #28]
 80209e4:	428e      	cmp	r6, r1
 80209e6:	dd8f      	ble.n	8020908 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 80209e8:	1c5e      	adds	r6, r3, #1
 80209ea:	db8d      	blt.n	8020908 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 80209ec:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80209ee:	429e      	cmp	r6, r3
 80209f0:	dd8a      	ble.n	8020908 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 80209f2:	9600      	str	r6, [sp, #0]
 80209f4:	e9cd 2003 	strd	r2, r0, [sp, #12]
 80209f8:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80209fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80209fe:	4629      	mov	r1, r5
 8020a00:	9b07      	ldr	r3, [sp, #28]
 8020a02:	9815      	ldr	r0, [sp, #84]	; 0x54
 8020a04:	f7ff fc8e 	bl	8020324 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8020a08:	e77e      	b.n	8020908 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8020a0a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020a0c:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8020a10:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8020a12:	9e07      	ldr	r6, [sp, #28]
 8020a14:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020a18:	1409      	asrs	r1, r1, #16
 8020a1a:	1423      	asrs	r3, r4, #16
 8020a1c:	fb06 1303 	mla	r3, r6, r3, r1
 8020a20:	9911      	ldr	r1, [sp, #68]	; 0x44
 8020a22:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 8020a26:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8020a2a:	0e1f      	lsrs	r7, r3, #24
 8020a2c:	2a00      	cmp	r2, #0
 8020a2e:	f000 8113 	beq.w	8020c58 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a4>
 8020a32:	6871      	ldr	r1, [r6, #4]
 8020a34:	910d      	str	r1, [sp, #52]	; 0x34
 8020a36:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8020a3a:	2800      	cmp	r0, #0
 8020a3c:	f000 8115 	beq.w	8020c6a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 8020a40:	990e      	ldr	r1, [sp, #56]	; 0x38
 8020a42:	eb06 0c01 	add.w	ip, r6, r1
 8020a46:	5876      	ldr	r6, [r6, r1]
 8020a48:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8020a4c:	ea4f 6916 	mov.w	r9, r6, lsr #24
 8020a50:	9609      	str	r6, [sp, #36]	; 0x24
 8020a52:	0e0e      	lsrs	r6, r1, #24
 8020a54:	910f      	str	r1, [sp, #60]	; 0x3c
 8020a56:	b292      	uxth	r2, r2
 8020a58:	b280      	uxth	r0, r0
 8020a5a:	fb02 fa00 	mul.w	sl, r2, r0
 8020a5e:	0112      	lsls	r2, r2, #4
 8020a60:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8020a64:	eba2 080a 	sub.w	r8, r2, sl
 8020a68:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8020a6c:	b280      	uxth	r0, r0
 8020a6e:	fa1f f888 	uxth.w	r8, r8
 8020a72:	1a09      	subs	r1, r1, r0
 8020a74:	fb08 f20e 	mul.w	r2, r8, lr
 8020a78:	b289      	uxth	r1, r1
 8020a7a:	fb01 2207 	mla	r2, r1, r7, r2
 8020a7e:	fb00 2209 	mla	r2, r0, r9, r2
 8020a82:	fb0a 2206 	mla	r2, sl, r6, r2
 8020a86:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8020a8a:	2a00      	cmp	r2, #0
 8020a8c:	f000 80da 	beq.w	8020c44 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x690>
 8020a90:	2fff      	cmp	r7, #255	; 0xff
 8020a92:	d01a      	beq.n	8020aca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x516>
 8020a94:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8020a98:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020a9c:	fb07 fc0c 	mul.w	ip, r7, ip
 8020aa0:	435f      	muls	r7, r3
 8020aa2:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8020aa6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020aaa:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020aae:	4463      	add	r3, ip
 8020ab0:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 8020ab4:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 8020ab8:	0a1b      	lsrs	r3, r3, #8
 8020aba:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020abe:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020ac2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020ac6:	ea43 030c 	orr.w	r3, r3, ip
 8020aca:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8020ace:	d021      	beq.n	8020b14 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x560>
 8020ad0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8020ad2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020ad6:	fb0e f707 	mul.w	r7, lr, r7
 8020ada:	9713      	str	r7, [sp, #76]	; 0x4c
 8020adc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8020ade:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8020ae2:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8020ae4:	fb0e fe0c 	mul.w	lr, lr, ip
 8020ae8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020aec:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020af0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020af4:	44bc      	add	ip, r7
 8020af6:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8020afa:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8020afe:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020b02:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020b06:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020b0a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8020b0e:	ea4c 070e 	orr.w	r7, ip, lr
 8020b12:	970d      	str	r7, [sp, #52]	; 0x34
 8020b14:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020b18:	d01e      	beq.n	8020b58 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a4>
 8020b1a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8020b1c:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8020b20:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020b24:	fb09 fe0e 	mul.w	lr, r9, lr
 8020b28:	fb09 f907 	mul.w	r9, r9, r7
 8020b2c:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8020b30:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8020b34:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8020b38:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020b3c:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8020b40:	44f4      	add	ip, lr
 8020b42:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020b46:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020b4a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8020b4e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020b52:	ea4c 0709 	orr.w	r7, ip, r9
 8020b56:	9709      	str	r7, [sp, #36]	; 0x24
 8020b58:	2eff      	cmp	r6, #255	; 0xff
 8020b5a:	d01c      	beq.n	8020b96 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e2>
 8020b5c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8020b5e:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8020b62:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020b66:	fb06 fe0e 	mul.w	lr, r6, lr
 8020b6a:	437e      	muls	r6, r7
 8020b6c:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8020b70:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8020b74:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8020b78:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020b7c:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8020b80:	44f4      	add	ip, lr
 8020b82:	0a36      	lsrs	r6, r6, #8
 8020b84:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020b88:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020b8c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020b90:	ea4c 0606 	orr.w	r6, ip, r6
 8020b94:	960f      	str	r6, [sp, #60]	; 0x3c
 8020b96:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8020b98:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8020b9c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020ba0:	2aff      	cmp	r2, #255	; 0xff
 8020ba2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020ba6:	fb08 f606 	mul.w	r6, r8, r6
 8020baa:	fb01 6607 	mla	r6, r1, r7, r6
 8020bae:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8020bb0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020bb4:	fb00 6607 	mla	r6, r0, r7, r6
 8020bb8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8020bba:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020bbe:	fb0a 6607 	mla	r6, sl, r7, r6
 8020bc2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8020bc4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020bc8:	ea4f 2616 	mov.w	r6, r6, lsr #8
 8020bcc:	fb08 f807 	mul.w	r8, r8, r7
 8020bd0:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020bd4:	fb01 8303 	mla	r3, r1, r3, r8
 8020bd8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020bda:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8020bde:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8020be0:	fb00 330c 	mla	r3, r0, ip, r3
 8020be4:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8020be8:	fb0a 3e0e 	mla	lr, sl, lr, r3
 8020bec:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020bf0:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8020bf4:	ea46 060e 	orr.w	r6, r6, lr
 8020bf8:	b2f0      	uxtb	r0, r6
 8020bfa:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8020bfe:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8020c02:	d038      	beq.n	8020c76 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c2>
 8020c04:	43d2      	mvns	r2, r2
 8020c06:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 8020c0a:	b2d2      	uxtb	r2, r2
 8020c0c:	4357      	muls	r7, r2
 8020c0e:	1c7b      	adds	r3, r7, #1
 8020c10:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8020c14:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8020c18:	f815 0c02 	ldrb.w	r0, [r5, #-2]
 8020c1c:	4350      	muls	r0, r2
 8020c1e:	f805 3c03 	strb.w	r3, [r5, #-3]
 8020c22:	1c43      	adds	r3, r0, #1
 8020c24:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8020c28:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8020c2c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8020c30:	4353      	muls	r3, r2
 8020c32:	f805 1c02 	strb.w	r1, [r5, #-2]
 8020c36:	1c5a      	adds	r2, r3, #1
 8020c38:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8020c3c:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8020c40:	f805 6c01 	strb.w	r6, [r5, #-1]
 8020c44:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020c46:	3503      	adds	r5, #3
 8020c48:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020c4a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020c4e:	4413      	add	r3, r2
 8020c50:	9329      	str	r3, [sp, #164]	; 0xa4
 8020c52:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020c54:	441c      	add	r4, r3
 8020c56:	e510      	b.n	802067a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc6>
 8020c58:	b150      	cbz	r0, 8020c70 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6bc>
 8020c5a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8020c5c:	5871      	ldr	r1, [r6, r1]
 8020c5e:	26ff      	movs	r6, #255	; 0xff
 8020c60:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8020c64:	9109      	str	r1, [sp, #36]	; 0x24
 8020c66:	46b6      	mov	lr, r6
 8020c68:	e6f5      	b.n	8020a56 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8020c6a:	26ff      	movs	r6, #255	; 0xff
 8020c6c:	46b1      	mov	r9, r6
 8020c6e:	e6f2      	b.n	8020a56 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8020c70:	26ff      	movs	r6, #255	; 0xff
 8020c72:	46b1      	mov	r9, r6
 8020c74:	e7f7      	b.n	8020c66 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b2>
 8020c76:	f805 0c03 	strb.w	r0, [r5, #-3]
 8020c7a:	f805 1c02 	strb.w	r1, [r5, #-2]
 8020c7e:	e7df      	b.n	8020c40 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68c>
 8020c80:	b017      	add	sp, #92	; 0x5c
 8020c82:	ecbd 8b08 	vpop	{d8-d11}
 8020c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08020c8c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8020c8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c90:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8020c94:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8020c98:	2800      	cmp	r0, #0
 8020c9a:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8020c9e:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8020ca2:	fb0c 0e03 	mla	lr, ip, r3, r0
 8020ca6:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8020caa:	db6b      	blt.n	8020d84 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8020cac:	4580      	cmp	r8, r0
 8020cae:	dd69      	ble.n	8020d84 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8020cb0:	f1bc 0f00 	cmp.w	ip, #0
 8020cb4:	db66      	blt.n	8020d84 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8020cb6:	45e1      	cmp	r9, ip
 8020cb8:	dd64      	ble.n	8020d84 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8020cba:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8020cbe:	f01e 0f01 	tst.w	lr, #1
 8020cc2:	5d16      	ldrb	r6, [r2, r4]
 8020cc4:	bf0c      	ite	eq
 8020cc6:	f006 060f 	andeq.w	r6, r6, #15
 8020cca:	1136      	asrne	r6, r6, #4
 8020ccc:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8020cd0:	b2f6      	uxtb	r6, r6
 8020cd2:	f110 0a01 	adds.w	sl, r0, #1
 8020cd6:	d457      	bmi.n	8020d88 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8020cd8:	45d0      	cmp	r8, sl
 8020cda:	dd55      	ble.n	8020d88 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8020cdc:	f1bc 0f00 	cmp.w	ip, #0
 8020ce0:	db52      	blt.n	8020d88 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8020ce2:	45e1      	cmp	r9, ip
 8020ce4:	dd50      	ble.n	8020d88 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8020ce6:	2f00      	cmp	r7, #0
 8020ce8:	f000 80ac 	beq.w	8020e44 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 8020cec:	f10e 0b01 	add.w	fp, lr, #1
 8020cf0:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8020cf4:	f01b 0f01 	tst.w	fp, #1
 8020cf8:	5d14      	ldrb	r4, [r2, r4]
 8020cfa:	bf0c      	ite	eq
 8020cfc:	f004 040f 	andeq.w	r4, r4, #15
 8020d00:	1124      	asrne	r4, r4, #4
 8020d02:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8020d06:	b2e4      	uxtb	r4, r4
 8020d08:	2d00      	cmp	r5, #0
 8020d0a:	f000 8096 	beq.w	8020e3a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 8020d0e:	2800      	cmp	r0, #0
 8020d10:	f10c 0c01 	add.w	ip, ip, #1
 8020d14:	db3c      	blt.n	8020d90 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8020d16:	4580      	cmp	r8, r0
 8020d18:	dd3a      	ble.n	8020d90 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8020d1a:	f1bc 0f00 	cmp.w	ip, #0
 8020d1e:	db37      	blt.n	8020d90 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8020d20:	45e1      	cmp	r9, ip
 8020d22:	dd35      	ble.n	8020d90 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8020d24:	eb03 0b0e 	add.w	fp, r3, lr
 8020d28:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8020d2c:	f01b 0f01 	tst.w	fp, #1
 8020d30:	5c10      	ldrb	r0, [r2, r0]
 8020d32:	bf0c      	ite	eq
 8020d34:	f000 000f 	andeq.w	r0, r0, #15
 8020d38:	1100      	asrne	r0, r0, #4
 8020d3a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8020d3e:	b2c0      	uxtb	r0, r0
 8020d40:	f1ba 0f00 	cmp.w	sl, #0
 8020d44:	db26      	blt.n	8020d94 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8020d46:	45d0      	cmp	r8, sl
 8020d48:	dd24      	ble.n	8020d94 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8020d4a:	f1bc 0f00 	cmp.w	ip, #0
 8020d4e:	db21      	blt.n	8020d94 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8020d50:	45e1      	cmp	r9, ip
 8020d52:	dd1f      	ble.n	8020d94 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8020d54:	b307      	cbz	r7, 8020d98 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 8020d56:	3301      	adds	r3, #1
 8020d58:	449e      	add	lr, r3
 8020d5a:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8020d5e:	f01e 0f01 	tst.w	lr, #1
 8020d62:	5cd3      	ldrb	r3, [r2, r3]
 8020d64:	bf0c      	ite	eq
 8020d66:	f003 030f 	andeq.w	r3, r3, #15
 8020d6a:	111b      	asrne	r3, r3, #4
 8020d6c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8020d70:	b2db      	uxtb	r3, r3
 8020d72:	2f0f      	cmp	r7, #15
 8020d74:	d911      	bls.n	8020d9a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 8020d76:	4b35      	ldr	r3, [pc, #212]	; (8020e4c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 8020d78:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8020d7c:	4a34      	ldr	r2, [pc, #208]	; (8020e50 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 8020d7e:	4835      	ldr	r0, [pc, #212]	; (8020e54 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 8020d80:	f002 fb5a 	bl	8023438 <__assert_func>
 8020d84:	2600      	movs	r6, #0
 8020d86:	e7a4      	b.n	8020cd2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 8020d88:	2400      	movs	r4, #0
 8020d8a:	e7bd      	b.n	8020d08 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 8020d8c:	463c      	mov	r4, r7
 8020d8e:	e7be      	b.n	8020d0e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 8020d90:	2000      	movs	r0, #0
 8020d92:	e7d5      	b.n	8020d40 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 8020d94:	2300      	movs	r3, #0
 8020d96:	e7ec      	b.n	8020d72 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 8020d98:	463b      	mov	r3, r7
 8020d9a:	2d0f      	cmp	r5, #15
 8020d9c:	d8eb      	bhi.n	8020d76 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8020d9e:	b2bf      	uxth	r7, r7
 8020da0:	b2ad      	uxth	r5, r5
 8020da2:	fb07 f205 	mul.w	r2, r7, r5
 8020da6:	013f      	lsls	r7, r7, #4
 8020da8:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8020dac:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8020db0:	1abf      	subs	r7, r7, r2
 8020db2:	b2ad      	uxth	r5, r5
 8020db4:	b2bf      	uxth	r7, r7
 8020db6:	ebac 0c05 	sub.w	ip, ip, r5
 8020dba:	437c      	muls	r4, r7
 8020dbc:	fa1f fc8c 	uxth.w	ip, ip
 8020dc0:	fb06 440c 	mla	r4, r6, ip, r4
 8020dc4:	fb05 4400 	mla	r4, r5, r0, r4
 8020dc8:	fb02 4203 	mla	r2, r2, r3, r4
 8020dcc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8020dd0:	b38a      	cbz	r2, 8020e36 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 8020dd2:	4b21      	ldr	r3, [pc, #132]	; (8020e58 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 8020dd4:	681c      	ldr	r4, [r3, #0]
 8020dd6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8020dda:	b2e5      	uxtb	r5, r4
 8020ddc:	4353      	muls	r3, r2
 8020dde:	1c5a      	adds	r2, r3, #1
 8020de0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8020de4:	1212      	asrs	r2, r2, #8
 8020de6:	b290      	uxth	r0, r2
 8020de8:	43d2      	mvns	r2, r2
 8020dea:	fb15 f500 	smulbb	r5, r5, r0
 8020dee:	b2d3      	uxtb	r3, r2
 8020df0:	780a      	ldrb	r2, [r1, #0]
 8020df2:	fb02 5203 	mla	r2, r2, r3, r5
 8020df6:	b292      	uxth	r2, r2
 8020df8:	1c55      	adds	r5, r2, #1
 8020dfa:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8020dfe:	784d      	ldrb	r5, [r1, #1]
 8020e00:	fb15 f503 	smulbb	r5, r5, r3
 8020e04:	1212      	asrs	r2, r2, #8
 8020e06:	700a      	strb	r2, [r1, #0]
 8020e08:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8020e0c:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8020e10:	fb02 5200 	mla	r2, r2, r0, r5
 8020e14:	b292      	uxth	r2, r2
 8020e16:	1c55      	adds	r5, r2, #1
 8020e18:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8020e1c:	1212      	asrs	r2, r2, #8
 8020e1e:	704a      	strb	r2, [r1, #1]
 8020e20:	788a      	ldrb	r2, [r1, #2]
 8020e22:	fb12 f303 	smulbb	r3, r2, r3
 8020e26:	fb04 3300 	mla	r3, r4, r0, r3
 8020e2a:	b29b      	uxth	r3, r3
 8020e2c:	1c5a      	adds	r2, r3, #1
 8020e2e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020e32:	121b      	asrs	r3, r3, #8
 8020e34:	708b      	strb	r3, [r1, #2]
 8020e36:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020e3a:	2f0f      	cmp	r7, #15
 8020e3c:	d89b      	bhi.n	8020d76 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8020e3e:	462b      	mov	r3, r5
 8020e40:	4628      	mov	r0, r5
 8020e42:	e7ac      	b.n	8020d9e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 8020e44:	2d00      	cmp	r5, #0
 8020e46:	d1a1      	bne.n	8020d8c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 8020e48:	462c      	mov	r4, r5
 8020e4a:	e7f8      	b.n	8020e3e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 8020e4c:	08027bdb 	.word	0x08027bdb
 8020e50:	080280d2 	.word	0x080280d2
 8020e54:	08027ca4 	.word	0x08027ca4
 8020e58:	2000bb00 	.word	0x2000bb00

08020e5c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8020e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e60:	ed2d 8b08 	vpush	{d8-d11}
 8020e64:	b097      	sub	sp, #92	; 0x5c
 8020e66:	eeb0 aa40 	vmov.f32	s20, s0
 8020e6a:	eef0 9a60 	vmov.f32	s19, s1
 8020e6e:	9308      	str	r3, [sp, #32]
 8020e70:	eeb0 9a41 	vmov.f32	s18, s2
 8020e74:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8020e78:	eeb0 8a62 	vmov.f32	s16, s5
 8020e7c:	9214      	str	r2, [sp, #80]	; 0x50
 8020e7e:	eef0 8a43 	vmov.f32	s17, s6
 8020e82:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8020e84:	eef0 ba44 	vmov.f32	s23, s8
 8020e88:	9309      	str	r3, [sp, #36]	; 0x24
 8020e8a:	eeb0 ba64 	vmov.f32	s22, s9
 8020e8e:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8020e92:	eef0 aa45 	vmov.f32	s21, s10
 8020e96:	9015      	str	r0, [sp, #84]	; 0x54
 8020e98:	910c      	str	r1, [sp, #48]	; 0x30
 8020e9a:	930e      	str	r3, [sp, #56]	; 0x38
 8020e9c:	6850      	ldr	r0, [r2, #4]
 8020e9e:	f9bd b0c0 	ldrsh.w	fp, [sp, #192]	; 0xc0
 8020ea2:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8020ea6:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 8020eaa:	fb00 1803 	mla	r8, r0, r3, r1
 8020eae:	6813      	ldr	r3, [r2, #0]
 8020eb0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8020eb4:	4498      	add	r8, r3
 8020eb6:	f10b 0301 	add.w	r3, fp, #1
 8020eba:	f023 0301 	bic.w	r3, r3, #1
 8020ebe:	930f      	str	r3, [sp, #60]	; 0x3c
 8020ec0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8020ec2:	681f      	ldr	r7, [r3, #0]
 8020ec4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020ec6:	2b00      	cmp	r3, #0
 8020ec8:	dc03      	bgt.n	8020ed2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8020eca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020ecc:	2b00      	cmp	r3, #0
 8020ece:	f340 8238 	ble.w	8021342 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 8020ed2:	9b08      	ldr	r3, [sp, #32]
 8020ed4:	2b00      	cmp	r3, #0
 8020ed6:	f340 810c 	ble.w	80210f2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 8020eda:	142a      	asrs	r2, r5, #16
 8020edc:	ea4f 4326 	mov.w	r3, r6, asr #16
 8020ee0:	d42c      	bmi.n	8020f3c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 8020ee2:	1c51      	adds	r1, r2, #1
 8020ee4:	458b      	cmp	fp, r1
 8020ee6:	dd2c      	ble.n	8020f42 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8020ee8:	2b00      	cmp	r3, #0
 8020eea:	db2a      	blt.n	8020f42 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8020eec:	1c59      	adds	r1, r3, #1
 8020eee:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020ef0:	4288      	cmp	r0, r1
 8020ef2:	dd26      	ble.n	8020f42 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8020ef4:	9b08      	ldr	r3, [sp, #32]
 8020ef6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020ef8:	3b01      	subs	r3, #1
 8020efa:	fb02 5203 	mla	r2, r2, r3, r5
 8020efe:	1412      	asrs	r2, r2, #16
 8020f00:	d429      	bmi.n	8020f56 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8020f02:	3201      	adds	r2, #1
 8020f04:	4593      	cmp	fp, r2
 8020f06:	dd26      	ble.n	8020f56 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8020f08:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8020f0a:	fb02 6303 	mla	r3, r2, r3, r6
 8020f0e:	141b      	asrs	r3, r3, #16
 8020f10:	d421      	bmi.n	8020f56 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8020f12:	3301      	adds	r3, #1
 8020f14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020f16:	429a      	cmp	r2, r3
 8020f18:	dd1d      	ble.n	8020f56 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8020f1a:	f108 0e03 	add.w	lr, r8, #3
 8020f1e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8020f22:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8020f26:	f1b9 0f00 	cmp.w	r9, #0
 8020f2a:	f300 814f 	bgt.w	80211cc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x370>
 8020f2e:	9b08      	ldr	r3, [sp, #32]
 8020f30:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020f34:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020f38:	44a0      	add	r8, r4
 8020f3a:	e0dc      	b.n	80210f6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29a>
 8020f3c:	1c51      	adds	r1, r2, #1
 8020f3e:	f040 80ce 	bne.w	80210de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8020f42:	4593      	cmp	fp, r2
 8020f44:	f340 80cb 	ble.w	80210de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8020f48:	1c5a      	adds	r2, r3, #1
 8020f4a:	f2c0 80c8 	blt.w	80210de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8020f4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020f50:	4293      	cmp	r3, r2
 8020f52:	f280 80c4 	bge.w	80210de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8020f56:	9b08      	ldr	r3, [sp, #32]
 8020f58:	46c1      	mov	r9, r8
 8020f5a:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8020f5e:	930d      	str	r3, [sp, #52]	; 0x34
 8020f60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020f62:	2b00      	cmp	r3, #0
 8020f64:	dde3      	ble.n	8020f2e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 8020f66:	1428      	asrs	r0, r5, #16
 8020f68:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8020f6c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8020f70:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8020f74:	f100 8111 	bmi.w	802119a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33e>
 8020f78:	f100 0c01 	add.w	ip, r0, #1
 8020f7c:	45e3      	cmp	fp, ip
 8020f7e:	f340 810e 	ble.w	802119e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8020f82:	2b00      	cmp	r3, #0
 8020f84:	f2c0 810b 	blt.w	802119e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8020f88:	f103 0c01 	add.w	ip, r3, #1
 8020f8c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8020f8e:	4564      	cmp	r4, ip
 8020f90:	f340 8105 	ble.w	802119e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8020f94:	fb03 030a 	mla	r3, r3, sl, r0
 8020f98:	0858      	lsrs	r0, r3, #1
 8020f9a:	07dc      	lsls	r4, r3, #31
 8020f9c:	5c38      	ldrb	r0, [r7, r0]
 8020f9e:	bf54      	ite	pl
 8020fa0:	f000 000f 	andpl.w	r0, r0, #15
 8020fa4:	1100      	asrmi	r0, r0, #4
 8020fa6:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8020faa:	b2c0      	uxtb	r0, r0
 8020fac:	2a00      	cmp	r2, #0
 8020fae:	f000 80e1 	beq.w	8021174 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x318>
 8020fb2:	f103 0e01 	add.w	lr, r3, #1
 8020fb6:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8020fba:	f01e 0f01 	tst.w	lr, #1
 8020fbe:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8020fc2:	bf0c      	ite	eq
 8020fc4:	f00c 0c0f 	andeq.w	ip, ip, #15
 8020fc8:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8020fcc:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8020fd0:	fa5f f48c 	uxtb.w	r4, ip
 8020fd4:	9410      	str	r4, [sp, #64]	; 0x40
 8020fd6:	b1f9      	cbz	r1, 8021018 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 8020fd8:	4453      	add	r3, sl
 8020fda:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8020fde:	07dc      	lsls	r4, r3, #31
 8020fe0:	f103 0301 	add.w	r3, r3, #1
 8020fe4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8020fe8:	bf54      	ite	pl
 8020fea:	f00c 0c0f 	andpl.w	ip, ip, #15
 8020fee:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8020ff2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8020ff6:	fa5f f48c 	uxtb.w	r4, ip
 8020ffa:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8020ffe:	940a      	str	r4, [sp, #40]	; 0x28
 8021000:	07dc      	lsls	r4, r3, #31
 8021002:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8021006:	bf54      	ite	pl
 8021008:	f00c 030f 	andpl.w	r3, ip, #15
 802100c:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8021010:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8021014:	b2db      	uxtb	r3, r3
 8021016:	9311      	str	r3, [sp, #68]	; 0x44
 8021018:	b292      	uxth	r2, r2
 802101a:	b289      	uxth	r1, r1
 802101c:	0113      	lsls	r3, r2, #4
 802101e:	fb02 fc01 	mul.w	ip, r2, r1
 8021022:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021024:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8021028:	ebcc 1101 	rsb	r1, ip, r1, lsl #4
 802102c:	eba3 030c 	sub.w	r3, r3, ip
 8021030:	b289      	uxth	r1, r1
 8021032:	b29b      	uxth	r3, r3
 8021034:	ebae 0e01 	sub.w	lr, lr, r1
 8021038:	4353      	muls	r3, r2
 802103a:	fa1f fe8e 	uxth.w	lr, lr
 802103e:	fb00 320e 	mla	r2, r0, lr, r3
 8021042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021044:	fb01 2203 	mla	r2, r1, r3, r2
 8021048:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802104a:	fb0c 2203 	mla	r2, ip, r3, r2
 802104e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8021052:	2a00      	cmp	r2, #0
 8021054:	d039      	beq.n	80210ca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8021056:	4bbd      	ldr	r3, [pc, #756]	; (802134c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 8021058:	6819      	ldr	r1, [r3, #0]
 802105a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802105c:	fa5f fc81 	uxtb.w	ip, r1
 8021060:	435a      	muls	r2, r3
 8021062:	1c53      	adds	r3, r2, #1
 8021064:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8021068:	1212      	asrs	r2, r2, #8
 802106a:	b290      	uxth	r0, r2
 802106c:	43d2      	mvns	r2, r2
 802106e:	fb1c fc00 	smulbb	ip, ip, r0
 8021072:	b2d3      	uxtb	r3, r2
 8021074:	f899 2000 	ldrb.w	r2, [r9]
 8021078:	fb02 c203 	mla	r2, r2, r3, ip
 802107c:	b292      	uxth	r2, r2
 802107e:	f102 0c01 	add.w	ip, r2, #1
 8021082:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8021086:	f899 c001 	ldrb.w	ip, [r9, #1]
 802108a:	fb1c fc03 	smulbb	ip, ip, r3
 802108e:	1212      	asrs	r2, r2, #8
 8021090:	f889 2000 	strb.w	r2, [r9]
 8021094:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8021098:	f3c1 4107 	ubfx	r1, r1, #16, #8
 802109c:	fb02 c200 	mla	r2, r2, r0, ip
 80210a0:	b292      	uxth	r2, r2
 80210a2:	f102 0c01 	add.w	ip, r2, #1
 80210a6:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80210aa:	1212      	asrs	r2, r2, #8
 80210ac:	f889 2001 	strb.w	r2, [r9, #1]
 80210b0:	f899 2002 	ldrb.w	r2, [r9, #2]
 80210b4:	fb12 f303 	smulbb	r3, r2, r3
 80210b8:	fb01 3300 	mla	r3, r1, r0, r3
 80210bc:	b29b      	uxth	r3, r3
 80210be:	1c5a      	adds	r2, r3, #1
 80210c0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80210c4:	121b      	asrs	r3, r3, #8
 80210c6:	f889 3002 	strb.w	r3, [r9, #2]
 80210ca:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80210cc:	f109 0903 	add.w	r9, r9, #3
 80210d0:	441d      	add	r5, r3
 80210d2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80210d4:	441e      	add	r6, r3
 80210d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80210d8:	3b01      	subs	r3, #1
 80210da:	930d      	str	r3, [sp, #52]	; 0x34
 80210dc:	e740      	b.n	8020f60 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 80210de:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80210e0:	f108 0803 	add.w	r8, r8, #3
 80210e4:	441d      	add	r5, r3
 80210e6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80210e8:	441e      	add	r6, r3
 80210ea:	9b08      	ldr	r3, [sp, #32]
 80210ec:	3b01      	subs	r3, #1
 80210ee:	9308      	str	r3, [sp, #32]
 80210f0:	e6ef      	b.n	8020ed2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 80210f2:	f47f aeff 	bne.w	8020ef4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 80210f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80210f8:	2b00      	cmp	r3, #0
 80210fa:	f340 8122 	ble.w	8021342 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 80210fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021102:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021104:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8021108:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802110c:	eef0 6a48 	vmov.f32	s13, s16
 8021110:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8021114:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8021118:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802111c:	ee16 5a90 	vmov	r5, s13
 8021120:	eef0 6a68 	vmov.f32	s13, s17
 8021124:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021128:	ee16 6a90 	vmov	r6, s13
 802112c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021130:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021134:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021138:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802113c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021140:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021144:	ee18 2a10 	vmov	r2, s16
 8021148:	eeb0 8a47 	vmov.f32	s16, s14
 802114c:	fb92 f3f3 	sdiv	r3, r2, r3
 8021150:	ee18 2a90 	vmov	r2, s17
 8021154:	932b      	str	r3, [sp, #172]	; 0xac
 8021156:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021158:	eef0 8a67 	vmov.f32	s17, s15
 802115c:	fb92 f3f3 	sdiv	r3, r2, r3
 8021160:	932c      	str	r3, [sp, #176]	; 0xb0
 8021162:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021164:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021166:	3b01      	subs	r3, #1
 8021168:	930c      	str	r3, [sp, #48]	; 0x30
 802116a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802116c:	bf08      	it	eq
 802116e:	4613      	moveq	r3, r2
 8021170:	9308      	str	r3, [sp, #32]
 8021172:	e6a7      	b.n	8020ec4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8021174:	2900      	cmp	r1, #0
 8021176:	f43f af4f 	beq.w	8021018 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 802117a:	4453      	add	r3, sl
 802117c:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8021180:	07db      	lsls	r3, r3, #31
 8021182:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8021186:	bf54      	ite	pl
 8021188:	f00c 030f 	andpl.w	r3, ip, #15
 802118c:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8021190:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8021194:	b2db      	uxtb	r3, r3
 8021196:	930a      	str	r3, [sp, #40]	; 0x28
 8021198:	e73e      	b.n	8021018 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 802119a:	1c44      	adds	r4, r0, #1
 802119c:	d195      	bne.n	80210ca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 802119e:	4583      	cmp	fp, r0
 80211a0:	dd93      	ble.n	80210ca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 80211a2:	1c5c      	adds	r4, r3, #1
 80211a4:	db91      	blt.n	80210ca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 80211a6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80211a8:	429c      	cmp	r4, r3
 80211aa:	dd8e      	ble.n	80210ca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 80211ac:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80211ae:	9002      	str	r0, [sp, #8]
 80211b0:	9815      	ldr	r0, [sp, #84]	; 0x54
 80211b2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80211b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80211b8:	463a      	mov	r2, r7
 80211ba:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80211be:	e9cd b300 	strd	fp, r3, [sp]
 80211c2:	4649      	mov	r1, r9
 80211c4:	4653      	mov	r3, sl
 80211c6:	f7ff fd61 	bl	8020c8c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 80211ca:	e77e      	b.n	80210ca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 80211cc:	142a      	asrs	r2, r5, #16
 80211ce:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80211d2:	1433      	asrs	r3, r6, #16
 80211d4:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80211d8:	fb0a 2303 	mla	r3, sl, r3, r2
 80211dc:	085a      	lsrs	r2, r3, #1
 80211de:	07dc      	lsls	r4, r3, #31
 80211e0:	5cba      	ldrb	r2, [r7, r2]
 80211e2:	bf54      	ite	pl
 80211e4:	f002 020f 	andpl.w	r2, r2, #15
 80211e8:	1112      	asrmi	r2, r2, #4
 80211ea:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80211ee:	b2d2      	uxtb	r2, r2
 80211f0:	2900      	cmp	r1, #0
 80211f2:	f000 8093 	beq.w	802131c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c0>
 80211f6:	1c5c      	adds	r4, r3, #1
 80211f8:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 80211fc:	07e4      	lsls	r4, r4, #31
 80211fe:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8021202:	bf54      	ite	pl
 8021204:	f00c 0c0f 	andpl.w	ip, ip, #15
 8021208:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802120c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8021210:	fa5f f48c 	uxtb.w	r4, ip
 8021214:	9412      	str	r4, [sp, #72]	; 0x48
 8021216:	b300      	cbz	r0, 802125a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 8021218:	4453      	add	r3, sl
 802121a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802121e:	07dc      	lsls	r4, r3, #31
 8021220:	f103 0301 	add.w	r3, r3, #1
 8021224:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8021228:	bf54      	ite	pl
 802122a:	f00c 0c0f 	andpl.w	ip, ip, #15
 802122e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8021232:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8021236:	fa5f f48c 	uxtb.w	r4, ip
 802123a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802123e:	940b      	str	r4, [sp, #44]	; 0x2c
 8021240:	07dc      	lsls	r4, r3, #31
 8021242:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8021246:	bf54      	ite	pl
 8021248:	f00c 0c0f 	andpl.w	ip, ip, #15
 802124c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8021250:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8021254:	fa5f f38c 	uxtb.w	r3, ip
 8021258:	9313      	str	r3, [sp, #76]	; 0x4c
 802125a:	b289      	uxth	r1, r1
 802125c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802125e:	b280      	uxth	r0, r0
 8021260:	fb01 f300 	mul.w	r3, r1, r0
 8021264:	0109      	lsls	r1, r1, #4
 8021266:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 802126a:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 802126e:	1ac9      	subs	r1, r1, r3
 8021270:	b280      	uxth	r0, r0
 8021272:	b289      	uxth	r1, r1
 8021274:	ebac 0c00 	sub.w	ip, ip, r0
 8021278:	4361      	muls	r1, r4
 802127a:	fa1f fc8c 	uxth.w	ip, ip
 802127e:	fb02 120c 	mla	r2, r2, ip, r1
 8021282:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8021284:	fb00 2001 	mla	r0, r0, r1, r2
 8021288:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802128a:	fb03 0302 	mla	r3, r3, r2, r0
 802128e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021292:	2b00      	cmp	r3, #0
 8021294:	d039      	beq.n	802130a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 8021296:	4a2d      	ldr	r2, [pc, #180]	; (802134c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 8021298:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 802129c:	6810      	ldr	r0, [r2, #0]
 802129e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80212a0:	fa5f fc80 	uxtb.w	ip, r0
 80212a4:	4353      	muls	r3, r2
 80212a6:	1c5a      	adds	r2, r3, #1
 80212a8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80212ac:	121b      	asrs	r3, r3, #8
 80212ae:	b29a      	uxth	r2, r3
 80212b0:	43db      	mvns	r3, r3
 80212b2:	fb1c fc02 	smulbb	ip, ip, r2
 80212b6:	b2db      	uxtb	r3, r3
 80212b8:	fb01 c103 	mla	r1, r1, r3, ip
 80212bc:	b289      	uxth	r1, r1
 80212be:	f101 0c01 	add.w	ip, r1, #1
 80212c2:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 80212c6:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 80212ca:	fb1c fc03 	smulbb	ip, ip, r3
 80212ce:	1209      	asrs	r1, r1, #8
 80212d0:	f80e 1c03 	strb.w	r1, [lr, #-3]
 80212d4:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80212d8:	f3c0 4007 	ubfx	r0, r0, #16, #8
 80212dc:	fb01 c102 	mla	r1, r1, r2, ip
 80212e0:	b289      	uxth	r1, r1
 80212e2:	f101 0c01 	add.w	ip, r1, #1
 80212e6:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 80212ea:	1209      	asrs	r1, r1, #8
 80212ec:	f80e 1c02 	strb.w	r1, [lr, #-2]
 80212f0:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 80212f4:	fb11 f303 	smulbb	r3, r1, r3
 80212f8:	fb00 3002 	mla	r0, r0, r2, r3
 80212fc:	b280      	uxth	r0, r0
 80212fe:	1c42      	adds	r2, r0, #1
 8021300:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8021304:	1200      	asrs	r0, r0, #8
 8021306:	f80e 0c01 	strb.w	r0, [lr, #-1]
 802130a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802130c:	f10e 0e03 	add.w	lr, lr, #3
 8021310:	f109 39ff 	add.w	r9, r9, #4294967295
 8021314:	441d      	add	r5, r3
 8021316:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021318:	441e      	add	r6, r3
 802131a:	e604      	b.n	8020f26 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 802131c:	2800      	cmp	r0, #0
 802131e:	d09c      	beq.n	802125a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 8021320:	4453      	add	r3, sl
 8021322:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8021326:	07db      	lsls	r3, r3, #31
 8021328:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802132c:	bf54      	ite	pl
 802132e:	f00c 0c0f 	andpl.w	ip, ip, #15
 8021332:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8021336:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802133a:	fa5f f38c 	uxtb.w	r3, ip
 802133e:	930b      	str	r3, [sp, #44]	; 0x2c
 8021340:	e78b      	b.n	802125a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 8021342:	b017      	add	sp, #92	; 0x5c
 8021344:	ecbd 8b08 	vpop	{d8-d11}
 8021348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802134c:	2000bb00 	.word	0x2000bb00

08021350 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8021350:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021354:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8021358:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 802135c:	2800      	cmp	r0, #0
 802135e:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8021362:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8021366:	fb0c 0e03 	mla	lr, ip, r3, r0
 802136a:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 802136e:	db6b      	blt.n	8021448 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8021370:	4580      	cmp	r8, r0
 8021372:	dd69      	ble.n	8021448 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8021374:	f1bc 0f00 	cmp.w	ip, #0
 8021378:	db66      	blt.n	8021448 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 802137a:	45e1      	cmp	r9, ip
 802137c:	dd64      	ble.n	8021448 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 802137e:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8021382:	f01e 0f01 	tst.w	lr, #1
 8021386:	5d16      	ldrb	r6, [r2, r4]
 8021388:	bf0c      	ite	eq
 802138a:	f006 060f 	andeq.w	r6, r6, #15
 802138e:	1136      	asrne	r6, r6, #4
 8021390:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8021394:	b2f6      	uxtb	r6, r6
 8021396:	f110 0a01 	adds.w	sl, r0, #1
 802139a:	d457      	bmi.n	802144c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 802139c:	45d0      	cmp	r8, sl
 802139e:	dd55      	ble.n	802144c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 80213a0:	f1bc 0f00 	cmp.w	ip, #0
 80213a4:	db52      	blt.n	802144c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 80213a6:	45e1      	cmp	r9, ip
 80213a8:	dd50      	ble.n	802144c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 80213aa:	2f00      	cmp	r7, #0
 80213ac:	f000 80a5 	beq.w	80214fa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 80213b0:	f10e 0b01 	add.w	fp, lr, #1
 80213b4:	ea4f 045b 	mov.w	r4, fp, lsr #1
 80213b8:	f01b 0f01 	tst.w	fp, #1
 80213bc:	5d14      	ldrb	r4, [r2, r4]
 80213be:	bf0c      	ite	eq
 80213c0:	f004 040f 	andeq.w	r4, r4, #15
 80213c4:	1124      	asrne	r4, r4, #4
 80213c6:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80213ca:	b2e4      	uxtb	r4, r4
 80213cc:	2d00      	cmp	r5, #0
 80213ce:	f000 808f 	beq.w	80214f0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 80213d2:	2800      	cmp	r0, #0
 80213d4:	f10c 0c01 	add.w	ip, ip, #1
 80213d8:	db3c      	blt.n	8021454 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 80213da:	4580      	cmp	r8, r0
 80213dc:	dd3a      	ble.n	8021454 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 80213de:	f1bc 0f00 	cmp.w	ip, #0
 80213e2:	db37      	blt.n	8021454 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 80213e4:	45e1      	cmp	r9, ip
 80213e6:	dd35      	ble.n	8021454 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 80213e8:	eb03 0b0e 	add.w	fp, r3, lr
 80213ec:	ea4f 005b 	mov.w	r0, fp, lsr #1
 80213f0:	f01b 0f01 	tst.w	fp, #1
 80213f4:	5c10      	ldrb	r0, [r2, r0]
 80213f6:	bf0c      	ite	eq
 80213f8:	f000 000f 	andeq.w	r0, r0, #15
 80213fc:	1100      	asrne	r0, r0, #4
 80213fe:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8021402:	b2c0      	uxtb	r0, r0
 8021404:	f1ba 0f00 	cmp.w	sl, #0
 8021408:	db26      	blt.n	8021458 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 802140a:	45d0      	cmp	r8, sl
 802140c:	dd24      	ble.n	8021458 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 802140e:	f1bc 0f00 	cmp.w	ip, #0
 8021412:	db21      	blt.n	8021458 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8021414:	45e1      	cmp	r9, ip
 8021416:	dd1f      	ble.n	8021458 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8021418:	b307      	cbz	r7, 802145c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 802141a:	3301      	adds	r3, #1
 802141c:	449e      	add	lr, r3
 802141e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8021422:	f01e 0f01 	tst.w	lr, #1
 8021426:	5cd3      	ldrb	r3, [r2, r3]
 8021428:	bf0c      	ite	eq
 802142a:	f003 030f 	andeq.w	r3, r3, #15
 802142e:	111b      	asrne	r3, r3, #4
 8021430:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8021434:	b2db      	uxtb	r3, r3
 8021436:	2f0f      	cmp	r7, #15
 8021438:	d911      	bls.n	802145e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 802143a:	4b32      	ldr	r3, [pc, #200]	; (8021504 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 802143c:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8021440:	4a31      	ldr	r2, [pc, #196]	; (8021508 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 8021442:	4832      	ldr	r0, [pc, #200]	; (802150c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 8021444:	f001 fff8 	bl	8023438 <__assert_func>
 8021448:	2600      	movs	r6, #0
 802144a:	e7a4      	b.n	8021396 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 802144c:	2400      	movs	r4, #0
 802144e:	e7bd      	b.n	80213cc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 8021450:	463c      	mov	r4, r7
 8021452:	e7be      	b.n	80213d2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 8021454:	2000      	movs	r0, #0
 8021456:	e7d5      	b.n	8021404 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 8021458:	2300      	movs	r3, #0
 802145a:	e7ec      	b.n	8021436 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 802145c:	463b      	mov	r3, r7
 802145e:	2d0f      	cmp	r5, #15
 8021460:	d8eb      	bhi.n	802143a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8021462:	b2bf      	uxth	r7, r7
 8021464:	b2ad      	uxth	r5, r5
 8021466:	fb07 f205 	mul.w	r2, r7, r5
 802146a:	013f      	lsls	r7, r7, #4
 802146c:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8021470:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8021474:	1abf      	subs	r7, r7, r2
 8021476:	b2ad      	uxth	r5, r5
 8021478:	b2bf      	uxth	r7, r7
 802147a:	ebac 0c05 	sub.w	ip, ip, r5
 802147e:	437c      	muls	r4, r7
 8021480:	fa1f fc8c 	uxth.w	ip, ip
 8021484:	fb06 440c 	mla	r4, r6, ip, r4
 8021488:	fb05 4400 	mla	r4, r5, r0, r4
 802148c:	fb02 4303 	mla	r3, r2, r3, r4
 8021490:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021494:	b353      	cbz	r3, 80214ec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 8021496:	4a1e      	ldr	r2, [pc, #120]	; (8021510 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 8021498:	7808      	ldrb	r0, [r1, #0]
 802149a:	6814      	ldr	r4, [r2, #0]
 802149c:	b29a      	uxth	r2, r3
 802149e:	43db      	mvns	r3, r3
 80214a0:	b2e5      	uxtb	r5, r4
 80214a2:	b2db      	uxtb	r3, r3
 80214a4:	fb15 f502 	smulbb	r5, r5, r2
 80214a8:	fb00 5003 	mla	r0, r0, r3, r5
 80214ac:	b280      	uxth	r0, r0
 80214ae:	1c45      	adds	r5, r0, #1
 80214b0:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80214b4:	784d      	ldrb	r5, [r1, #1]
 80214b6:	fb15 f503 	smulbb	r5, r5, r3
 80214ba:	1200      	asrs	r0, r0, #8
 80214bc:	7008      	strb	r0, [r1, #0]
 80214be:	f3c4 2007 	ubfx	r0, r4, #8, #8
 80214c2:	f3c4 4407 	ubfx	r4, r4, #16, #8
 80214c6:	fb00 5002 	mla	r0, r0, r2, r5
 80214ca:	b280      	uxth	r0, r0
 80214cc:	1c45      	adds	r5, r0, #1
 80214ce:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80214d2:	1200      	asrs	r0, r0, #8
 80214d4:	7048      	strb	r0, [r1, #1]
 80214d6:	7888      	ldrb	r0, [r1, #2]
 80214d8:	fb10 f303 	smulbb	r3, r0, r3
 80214dc:	fb04 3202 	mla	r2, r4, r2, r3
 80214e0:	b292      	uxth	r2, r2
 80214e2:	1c53      	adds	r3, r2, #1
 80214e4:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80214e8:	1212      	asrs	r2, r2, #8
 80214ea:	708a      	strb	r2, [r1, #2]
 80214ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80214f0:	2f0f      	cmp	r7, #15
 80214f2:	d8a2      	bhi.n	802143a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 80214f4:	462b      	mov	r3, r5
 80214f6:	4628      	mov	r0, r5
 80214f8:	e7b3      	b.n	8021462 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 80214fa:	2d00      	cmp	r5, #0
 80214fc:	d1a8      	bne.n	8021450 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 80214fe:	462c      	mov	r4, r5
 8021500:	e7f8      	b.n	80214f4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 8021502:	bf00      	nop
 8021504:	08027bdb 	.word	0x08027bdb
 8021508:	080280d2 	.word	0x080280d2
 802150c:	08027ca4 	.word	0x08027ca4
 8021510:	2000bb00 	.word	0x2000bb00

08021514 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8021514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021518:	ed2d 8b08 	vpush	{d8-d11}
 802151c:	b095      	sub	sp, #84	; 0x54
 802151e:	461c      	mov	r4, r3
 8021520:	eeb0 aa40 	vmov.f32	s20, s0
 8021524:	f9bd 30b8 	ldrsh.w	r3, [sp, #184]	; 0xb8
 8021528:	eef0 9a60 	vmov.f32	s19, s1
 802152c:	920e      	str	r2, [sp, #56]	; 0x38
 802152e:	eeb0 9a41 	vmov.f32	s18, s2
 8021532:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021534:	eeb0 8a62 	vmov.f32	s16, s5
 8021538:	9307      	str	r3, [sp, #28]
 802153a:	eef0 8a43 	vmov.f32	s17, s6
 802153e:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 8021542:	eef0 ba44 	vmov.f32	s23, s8
 8021546:	9013      	str	r0, [sp, #76]	; 0x4c
 8021548:	eeb0 ba64 	vmov.f32	s22, s9
 802154c:	9109      	str	r1, [sp, #36]	; 0x24
 802154e:	eef0 aa45 	vmov.f32	s21, s10
 8021552:	9308      	str	r3, [sp, #32]
 8021554:	6850      	ldr	r0, [r2, #4]
 8021556:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 802155a:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 802155e:	fb00 1803 	mla	r8, r0, r3, r1
 8021562:	6813      	ldr	r3, [r2, #0]
 8021564:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8021568:	4498      	add	r8, r3
 802156a:	9b07      	ldr	r3, [sp, #28]
 802156c:	3301      	adds	r3, #1
 802156e:	f023 0301 	bic.w	r3, r3, #1
 8021572:	930b      	str	r3, [sp, #44]	; 0x2c
 8021574:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021576:	681f      	ldr	r7, [r3, #0]
 8021578:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802157a:	2b00      	cmp	r3, #0
 802157c:	dc03      	bgt.n	8021586 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 802157e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021580:	2b00      	cmp	r3, #0
 8021582:	f340 8238 	ble.w	80219f6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 8021586:	2c00      	cmp	r4, #0
 8021588:	f340 8109 	ble.w	802179e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 802158c:	142a      	asrs	r2, r5, #16
 802158e:	ea4f 4326 	mov.w	r3, r6, asr #16
 8021592:	d42b      	bmi.n	80215ec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8021594:	1c51      	adds	r1, r2, #1
 8021596:	9807      	ldr	r0, [sp, #28]
 8021598:	4288      	cmp	r0, r1
 802159a:	dd2a      	ble.n	80215f2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 802159c:	2b00      	cmp	r3, #0
 802159e:	db28      	blt.n	80215f2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 80215a0:	1c59      	adds	r1, r3, #1
 80215a2:	9808      	ldr	r0, [sp, #32]
 80215a4:	4288      	cmp	r0, r1
 80215a6:	dd24      	ble.n	80215f2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 80215a8:	1e63      	subs	r3, r4, #1
 80215aa:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80215ac:	fb02 5203 	mla	r2, r2, r3, r5
 80215b0:	1412      	asrs	r2, r2, #16
 80215b2:	d429      	bmi.n	8021608 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 80215b4:	3201      	adds	r2, #1
 80215b6:	9907      	ldr	r1, [sp, #28]
 80215b8:	4291      	cmp	r1, r2
 80215ba:	dd25      	ble.n	8021608 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 80215bc:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80215be:	fb02 6303 	mla	r3, r2, r3, r6
 80215c2:	141b      	asrs	r3, r3, #16
 80215c4:	d420      	bmi.n	8021608 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 80215c6:	3301      	adds	r3, #1
 80215c8:	9a08      	ldr	r2, [sp, #32]
 80215ca:	429a      	cmp	r2, r3
 80215cc:	dd1c      	ble.n	8021608 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 80215ce:	f108 0e03 	add.w	lr, r8, #3
 80215d2:	46a1      	mov	r9, r4
 80215d4:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 80215d8:	f1b9 0f00 	cmp.w	r9, #0
 80215dc:	f300 8155 	bgt.w	802188a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x376>
 80215e0:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80215e4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80215e8:	44a0      	add	r8, r4
 80215ea:	e0da      	b.n	80217a2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 80215ec:	1c50      	adds	r0, r2, #1
 80215ee:	f040 80ce 	bne.w	802178e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 80215f2:	9907      	ldr	r1, [sp, #28]
 80215f4:	4291      	cmp	r1, r2
 80215f6:	f340 80ca 	ble.w	802178e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 80215fa:	1c59      	adds	r1, r3, #1
 80215fc:	f2c0 80c7 	blt.w	802178e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8021600:	9a08      	ldr	r2, [sp, #32]
 8021602:	4293      	cmp	r3, r2
 8021604:	f280 80c3 	bge.w	802178e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8021608:	46a3      	mov	fp, r4
 802160a:	46c1      	mov	r9, r8
 802160c:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 8021610:	f1bb 0f00 	cmp.w	fp, #0
 8021614:	dde4      	ble.n	80215e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 8021616:	f3c5 3203 	ubfx	r2, r5, #12, #4
 802161a:	1428      	asrs	r0, r5, #16
 802161c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8021620:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8021624:	920a      	str	r2, [sp, #40]	; 0x28
 8021626:	f100 8116 	bmi.w	8021856 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 802162a:	f100 0c01 	add.w	ip, r0, #1
 802162e:	9a07      	ldr	r2, [sp, #28]
 8021630:	4562      	cmp	r2, ip
 8021632:	f340 8112 	ble.w	802185a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8021636:	2b00      	cmp	r3, #0
 8021638:	f2c0 810f 	blt.w	802185a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 802163c:	f103 0c01 	add.w	ip, r3, #1
 8021640:	9a08      	ldr	r2, [sp, #32]
 8021642:	4562      	cmp	r2, ip
 8021644:	f340 8109 	ble.w	802185a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8021648:	fb03 030a 	mla	r3, r3, sl, r0
 802164c:	0858      	lsrs	r0, r3, #1
 802164e:	07da      	lsls	r2, r3, #31
 8021650:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021652:	5c38      	ldrb	r0, [r7, r0]
 8021654:	bf54      	ite	pl
 8021656:	f000 000f 	andpl.w	r0, r0, #15
 802165a:	1100      	asrmi	r0, r0, #4
 802165c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8021660:	b2c0      	uxtb	r0, r0
 8021662:	2a00      	cmp	r2, #0
 8021664:	f000 80dd 	beq.w	8021822 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30e>
 8021668:	f103 0e01 	add.w	lr, r3, #1
 802166c:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8021670:	f01e 0f01 	tst.w	lr, #1
 8021674:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8021678:	bf0c      	ite	eq
 802167a:	f00c 0c0f 	andeq.w	ip, ip, #15
 802167e:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8021682:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8021686:	fa5f fc8c 	uxtb.w	ip, ip
 802168a:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 802168e:	b301      	cbz	r1, 80216d2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8021690:	4453      	add	r3, sl
 8021692:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8021696:	07da      	lsls	r2, r3, #31
 8021698:	f103 0301 	add.w	r3, r3, #1
 802169c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80216a0:	bf54      	ite	pl
 80216a2:	f00c 0c0f 	andpl.w	ip, ip, #15
 80216a6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80216aa:	07da      	lsls	r2, r3, #31
 80216ac:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80216b0:	fa5f fc8c 	uxtb.w	ip, ip
 80216b4:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 80216b8:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80216bc:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80216c0:	bf54      	ite	pl
 80216c2:	f00c 030f 	andpl.w	r3, ip, #15
 80216c6:	ea4f 132c 	movmi.w	r3, ip, asr #4
 80216ca:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80216ce:	b2db      	uxtb	r3, r3
 80216d0:	9310      	str	r3, [sp, #64]	; 0x40
 80216d2:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80216d6:	b289      	uxth	r1, r1
 80216d8:	fb02 f301 	mul.w	r3, r2, r1
 80216dc:	0112      	lsls	r2, r2, #4
 80216de:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80216e2:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 80216e6:	1ad2      	subs	r2, r2, r3
 80216e8:	fa1f fe81 	uxth.w	lr, r1
 80216ec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80216ee:	b292      	uxth	r2, r2
 80216f0:	ebac 0c0e 	sub.w	ip, ip, lr
 80216f4:	434a      	muls	r2, r1
 80216f6:	fa1f fc8c 	uxth.w	ip, ip
 80216fa:	fb00 200c 	mla	r0, r0, ip, r2
 80216fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021700:	fb0e 0002 	mla	r0, lr, r2, r0
 8021704:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021706:	fb03 0002 	mla	r0, r3, r2, r0
 802170a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802170e:	b3a8      	cbz	r0, 802177c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8021710:	4bbb      	ldr	r3, [pc, #748]	; (8021a00 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 8021712:	28ff      	cmp	r0, #255	; 0xff
 8021714:	681b      	ldr	r3, [r3, #0]
 8021716:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 802171a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 802171e:	b2db      	uxtb	r3, r3
 8021720:	f000 8092 	beq.w	8021848 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x334>
 8021724:	b282      	uxth	r2, r0
 8021726:	43c0      	mvns	r0, r0
 8021728:	f899 e000 	ldrb.w	lr, [r9]
 802172c:	fb13 f302 	smulbb	r3, r3, r2
 8021730:	b2c0      	uxtb	r0, r0
 8021732:	fb11 f102 	smulbb	r1, r1, r2
 8021736:	fb0e 3300 	mla	r3, lr, r0, r3
 802173a:	fb1c f202 	smulbb	r2, ip, r2
 802173e:	b29b      	uxth	r3, r3
 8021740:	f103 0e01 	add.w	lr, r3, #1
 8021744:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8021748:	121b      	asrs	r3, r3, #8
 802174a:	f889 3000 	strb.w	r3, [r9]
 802174e:	f899 3001 	ldrb.w	r3, [r9, #1]
 8021752:	fb03 1100 	mla	r1, r3, r0, r1
 8021756:	b289      	uxth	r1, r1
 8021758:	1c4b      	adds	r3, r1, #1
 802175a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802175e:	f899 3002 	ldrb.w	r3, [r9, #2]
 8021762:	fb03 2000 	mla	r0, r3, r0, r2
 8021766:	1209      	asrs	r1, r1, #8
 8021768:	b280      	uxth	r0, r0
 802176a:	f889 1001 	strb.w	r1, [r9, #1]
 802176e:	f100 0c01 	add.w	ip, r0, #1
 8021772:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 8021776:	1200      	asrs	r0, r0, #8
 8021778:	f889 0002 	strb.w	r0, [r9, #2]
 802177c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802177e:	f109 0903 	add.w	r9, r9, #3
 8021782:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021786:	441d      	add	r5, r3
 8021788:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802178a:	441e      	add	r6, r3
 802178c:	e740      	b.n	8021610 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 802178e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021790:	3c01      	subs	r4, #1
 8021792:	f108 0803 	add.w	r8, r8, #3
 8021796:	441d      	add	r5, r3
 8021798:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802179a:	441e      	add	r6, r3
 802179c:	e6f3      	b.n	8021586 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 802179e:	f47f af03 	bne.w	80215a8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 80217a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80217a4:	2b00      	cmp	r3, #0
 80217a6:	f340 8126 	ble.w	80219f6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 80217aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80217ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80217b0:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80217b4:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80217b8:	eef0 6a48 	vmov.f32	s13, s16
 80217bc:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80217c0:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80217c4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80217c8:	ee16 5a90 	vmov	r5, s13
 80217cc:	eef0 6a68 	vmov.f32	s13, s17
 80217d0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80217d4:	ee16 6a90 	vmov	r6, s13
 80217d8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80217dc:	ee69 7a27 	vmul.f32	s15, s18, s15
 80217e0:	ee37 8a48 	vsub.f32	s16, s14, s16
 80217e4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80217e8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80217ec:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80217f0:	ee18 2a10 	vmov	r2, s16
 80217f4:	eeb0 8a47 	vmov.f32	s16, s14
 80217f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80217fc:	ee18 2a90 	vmov	r2, s17
 8021800:	9329      	str	r3, [sp, #164]	; 0xa4
 8021802:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8021804:	eef0 8a67 	vmov.f32	s17, s15
 8021808:	fb92 f3f3 	sdiv	r3, r2, r3
 802180c:	932a      	str	r3, [sp, #168]	; 0xa8
 802180e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021810:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021812:	3b01      	subs	r3, #1
 8021814:	9309      	str	r3, [sp, #36]	; 0x24
 8021816:	bf08      	it	eq
 8021818:	4614      	moveq	r4, r2
 802181a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802181c:	bf18      	it	ne
 802181e:	461c      	movne	r4, r3
 8021820:	e6aa      	b.n	8021578 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8021822:	2900      	cmp	r1, #0
 8021824:	f43f af55 	beq.w	80216d2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8021828:	4453      	add	r3, sl
 802182a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802182e:	07db      	lsls	r3, r3, #31
 8021830:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8021834:	bf54      	ite	pl
 8021836:	f00c 030f 	andpl.w	r3, ip, #15
 802183a:	ea4f 132c 	movmi.w	r3, ip, asr #4
 802183e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8021842:	b2db      	uxtb	r3, r3
 8021844:	930c      	str	r3, [sp, #48]	; 0x30
 8021846:	e744      	b.n	80216d2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8021848:	f889 3000 	strb.w	r3, [r9]
 802184c:	f889 1001 	strb.w	r1, [r9, #1]
 8021850:	f889 c002 	strb.w	ip, [r9, #2]
 8021854:	e792      	b.n	802177c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8021856:	1c42      	adds	r2, r0, #1
 8021858:	d190      	bne.n	802177c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 802185a:	9a07      	ldr	r2, [sp, #28]
 802185c:	4282      	cmp	r2, r0
 802185e:	dd8d      	ble.n	802177c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8021860:	1c5a      	adds	r2, r3, #1
 8021862:	db8b      	blt.n	802177c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8021864:	9a08      	ldr	r2, [sp, #32]
 8021866:	429a      	cmp	r2, r3
 8021868:	dd88      	ble.n	802177c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 802186a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802186c:	9105      	str	r1, [sp, #20]
 802186e:	4649      	mov	r1, r9
 8021870:	9002      	str	r0, [sp, #8]
 8021872:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8021874:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8021878:	9b08      	ldr	r3, [sp, #32]
 802187a:	463a      	mov	r2, r7
 802187c:	9301      	str	r3, [sp, #4]
 802187e:	9b07      	ldr	r3, [sp, #28]
 8021880:	9300      	str	r3, [sp, #0]
 8021882:	4653      	mov	r3, sl
 8021884:	f7ff fd64 	bl	8021350 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8021888:	e778      	b.n	802177c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 802188a:	142a      	asrs	r2, r5, #16
 802188c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8021890:	1433      	asrs	r3, r6, #16
 8021892:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8021896:	fb0a 2303 	mla	r3, sl, r3, r2
 802189a:	085a      	lsrs	r2, r3, #1
 802189c:	07d9      	lsls	r1, r3, #31
 802189e:	5cba      	ldrb	r2, [r7, r2]
 80218a0:	bf54      	ite	pl
 80218a2:	f002 020f 	andpl.w	r2, r2, #15
 80218a6:	1112      	asrmi	r2, r2, #4
 80218a8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80218ac:	b2d2      	uxtb	r2, r2
 80218ae:	2800      	cmp	r0, #0
 80218b0:	f000 808a 	beq.w	80219c8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b4>
 80218b4:	f103 0b01 	add.w	fp, r3, #1
 80218b8:	ea4f 015b 	mov.w	r1, fp, lsr #1
 80218bc:	f01b 0f01 	tst.w	fp, #1
 80218c0:	5c79      	ldrb	r1, [r7, r1]
 80218c2:	bf0c      	ite	eq
 80218c4:	f001 010f 	andeq.w	r1, r1, #15
 80218c8:	1109      	asrne	r1, r1, #4
 80218ca:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80218ce:	b2c9      	uxtb	r1, r1
 80218d0:	9111      	str	r1, [sp, #68]	; 0x44
 80218d2:	f1bc 0f00 	cmp.w	ip, #0
 80218d6:	d019      	beq.n	802190c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 80218d8:	4453      	add	r3, sl
 80218da:	0859      	lsrs	r1, r3, #1
 80218dc:	f013 0f01 	tst.w	r3, #1
 80218e0:	f103 0301 	add.w	r3, r3, #1
 80218e4:	5c79      	ldrb	r1, [r7, r1]
 80218e6:	bf0c      	ite	eq
 80218e8:	f001 010f 	andeq.w	r1, r1, #15
 80218ec:	1109      	asrne	r1, r1, #4
 80218ee:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80218f2:	b2c9      	uxtb	r1, r1
 80218f4:	910d      	str	r1, [sp, #52]	; 0x34
 80218f6:	0859      	lsrs	r1, r3, #1
 80218f8:	07db      	lsls	r3, r3, #31
 80218fa:	5c79      	ldrb	r1, [r7, r1]
 80218fc:	bf54      	ite	pl
 80218fe:	f001 010f 	andpl.w	r1, r1, #15
 8021902:	1109      	asrmi	r1, r1, #4
 8021904:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8021908:	b2c9      	uxtb	r1, r1
 802190a:	9112      	str	r1, [sp, #72]	; 0x48
 802190c:	b280      	uxth	r0, r0
 802190e:	fa1f fc8c 	uxth.w	ip, ip
 8021912:	fb00 f30c 	mul.w	r3, r0, ip
 8021916:	0100      	lsls	r0, r0, #4
 8021918:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 802191c:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8021920:	1ac0      	subs	r0, r0, r3
 8021922:	fa1f fc8c 	uxth.w	ip, ip
 8021926:	b280      	uxth	r0, r0
 8021928:	eba1 010c 	sub.w	r1, r1, ip
 802192c:	fa1f fb81 	uxth.w	fp, r1
 8021930:	9911      	ldr	r1, [sp, #68]	; 0x44
 8021932:	4348      	muls	r0, r1
 8021934:	990d      	ldr	r1, [sp, #52]	; 0x34
 8021936:	fb02 020b 	mla	r2, r2, fp, r0
 802193a:	fb0c 2c01 	mla	ip, ip, r1, r2
 802193e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021940:	fb03 c302 	mla	r3, r3, r2, ip
 8021944:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021948:	b3ab      	cbz	r3, 80219b6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 802194a:	4a2d      	ldr	r2, [pc, #180]	; (8021a00 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 802194c:	2bff      	cmp	r3, #255	; 0xff
 802194e:	6811      	ldr	r1, [r2, #0]
 8021950:	f3c1 4b07 	ubfx	fp, r1, #16, #8
 8021954:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 8021958:	b2c9      	uxtb	r1, r1
 802195a:	d045      	beq.n	80219e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 802195c:	b298      	uxth	r0, r3
 802195e:	43db      	mvns	r3, r3
 8021960:	f81e 2c03 	ldrb.w	r2, [lr, #-3]
 8021964:	fb11 f100 	smulbb	r1, r1, r0
 8021968:	b2db      	uxtb	r3, r3
 802196a:	fb1c fc00 	smulbb	ip, ip, r0
 802196e:	fb02 1103 	mla	r1, r2, r3, r1
 8021972:	fb1b f000 	smulbb	r0, fp, r0
 8021976:	b289      	uxth	r1, r1
 8021978:	1c4a      	adds	r2, r1, #1
 802197a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802197e:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8021982:	fb02 cc03 	mla	ip, r2, r3, ip
 8021986:	1209      	asrs	r1, r1, #8
 8021988:	fa1f fc8c 	uxth.w	ip, ip
 802198c:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8021990:	f10c 0201 	add.w	r2, ip, #1
 8021994:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8021998:	f81e 2c01 	ldrb.w	r2, [lr, #-1]
 802199c:	fb02 0303 	mla	r3, r2, r3, r0
 80219a0:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80219a4:	b29b      	uxth	r3, r3
 80219a6:	f80e cc02 	strb.w	ip, [lr, #-2]
 80219aa:	1c5a      	adds	r2, r3, #1
 80219ac:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80219b0:	121b      	asrs	r3, r3, #8
 80219b2:	f80e 3c01 	strb.w	r3, [lr, #-1]
 80219b6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80219b8:	f10e 0e03 	add.w	lr, lr, #3
 80219bc:	f109 39ff 	add.w	r9, r9, #4294967295
 80219c0:	441d      	add	r5, r3
 80219c2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80219c4:	441e      	add	r6, r3
 80219c6:	e607      	b.n	80215d8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc4>
 80219c8:	f1bc 0f00 	cmp.w	ip, #0
 80219cc:	d09e      	beq.n	802190c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 80219ce:	4453      	add	r3, sl
 80219d0:	0859      	lsrs	r1, r3, #1
 80219d2:	07db      	lsls	r3, r3, #31
 80219d4:	5c79      	ldrb	r1, [r7, r1]
 80219d6:	bf54      	ite	pl
 80219d8:	f001 010f 	andpl.w	r1, r1, #15
 80219dc:	1109      	asrmi	r1, r1, #4
 80219de:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80219e2:	b2c9      	uxtb	r1, r1
 80219e4:	910d      	str	r1, [sp, #52]	; 0x34
 80219e6:	e791      	b.n	802190c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 80219e8:	f80e 1c03 	strb.w	r1, [lr, #-3]
 80219ec:	f80e cc02 	strb.w	ip, [lr, #-2]
 80219f0:	f80e bc01 	strb.w	fp, [lr, #-1]
 80219f4:	e7df      	b.n	80219b6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 80219f6:	b015      	add	sp, #84	; 0x54
 80219f8:	ecbd 8b08 	vpop	{d8-d11}
 80219fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021a00:	2000bb00 	.word	0x2000bb00

08021a04 <CRC_Lock>:
 8021a04:	4a1d      	ldr	r2, [pc, #116]	; (8021a7c <CRC_Lock+0x78>)
 8021a06:	b530      	push	{r4, r5, lr}
 8021a08:	6813      	ldr	r3, [r2, #0]
 8021a0a:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8021a0e:	f24c 2540 	movw	r5, #49728	; 0xc240
 8021a12:	f023 0301 	bic.w	r3, r3, #1
 8021a16:	6013      	str	r3, [r2, #0]
 8021a18:	4b19      	ldr	r3, [pc, #100]	; (8021a80 <CRC_Lock+0x7c>)
 8021a1a:	681a      	ldr	r2, [r3, #0]
 8021a1c:	4022      	ands	r2, r4
 8021a1e:	42aa      	cmp	r2, r5
 8021a20:	d005      	beq.n	8021a2e <CRC_Lock+0x2a>
 8021a22:	681b      	ldr	r3, [r3, #0]
 8021a24:	f24c 2270 	movw	r2, #49776	; 0xc270
 8021a28:	4023      	ands	r3, r4
 8021a2a:	4293      	cmp	r3, r2
 8021a2c:	d11d      	bne.n	8021a6a <CRC_Lock+0x66>
 8021a2e:	4b15      	ldr	r3, [pc, #84]	; (8021a84 <CRC_Lock+0x80>)
 8021a30:	681b      	ldr	r3, [r3, #0]
 8021a32:	b9d3      	cbnz	r3, 8021a6a <CRC_Lock+0x66>
 8021a34:	4a14      	ldr	r2, [pc, #80]	; (8021a88 <CRC_Lock+0x84>)
 8021a36:	6813      	ldr	r3, [r2, #0]
 8021a38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8021a3c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8021a40:	d006      	beq.n	8021a50 <CRC_Lock+0x4c>
 8021a42:	6813      	ldr	r3, [r2, #0]
 8021a44:	f240 4283 	movw	r2, #1155	; 0x483
 8021a48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8021a4c:	4293      	cmp	r3, r2
 8021a4e:	d10c      	bne.n	8021a6a <CRC_Lock+0x66>
 8021a50:	4b0e      	ldr	r3, [pc, #56]	; (8021a8c <CRC_Lock+0x88>)
 8021a52:	2201      	movs	r2, #1
 8021a54:	601a      	str	r2, [r3, #0]
 8021a56:	681a      	ldr	r2, [r3, #0]
 8021a58:	2a00      	cmp	r2, #0
 8021a5a:	d1fc      	bne.n	8021a56 <CRC_Lock+0x52>
 8021a5c:	4b0c      	ldr	r3, [pc, #48]	; (8021a90 <CRC_Lock+0x8c>)
 8021a5e:	6018      	str	r0, [r3, #0]
 8021a60:	6818      	ldr	r0, [r3, #0]
 8021a62:	1a43      	subs	r3, r0, r1
 8021a64:	4258      	negs	r0, r3
 8021a66:	4158      	adcs	r0, r3
 8021a68:	bd30      	pop	{r4, r5, pc}
 8021a6a:	4b0a      	ldr	r3, [pc, #40]	; (8021a94 <CRC_Lock+0x90>)
 8021a6c:	2201      	movs	r2, #1
 8021a6e:	601a      	str	r2, [r3, #0]
 8021a70:	681a      	ldr	r2, [r3, #0]
 8021a72:	2a00      	cmp	r2, #0
 8021a74:	d1fc      	bne.n	8021a70 <CRC_Lock+0x6c>
 8021a76:	4b08      	ldr	r3, [pc, #32]	; (8021a98 <CRC_Lock+0x94>)
 8021a78:	e7f1      	b.n	8021a5e <CRC_Lock+0x5a>
 8021a7a:	bf00      	nop
 8021a7c:	e0002000 	.word	0xe0002000
 8021a80:	e000ed00 	.word	0xe000ed00
 8021a84:	e0042000 	.word	0xe0042000
 8021a88:	5c001000 	.word	0x5c001000
 8021a8c:	58024c08 	.word	0x58024c08
 8021a90:	58024c00 	.word	0x58024c00
 8021a94:	40023008 	.word	0x40023008
 8021a98:	40023000 	.word	0x40023000

08021a9c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8021a9c:	6101      	str	r1, [r0, #16]
 8021a9e:	4770      	bx	lr

08021aa0 <_ZN8touchgfx8Gestures4tickEv>:
 8021aa0:	7b83      	ldrb	r3, [r0, #14]
 8021aa2:	b14b      	cbz	r3, 8021ab8 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8021aa4:	8903      	ldrh	r3, [r0, #8]
 8021aa6:	3301      	adds	r3, #1
 8021aa8:	b29b      	uxth	r3, r3
 8021aaa:	2b07      	cmp	r3, #7
 8021aac:	8103      	strh	r3, [r0, #8]
 8021aae:	bf81      	itttt	hi
 8021ab0:	2300      	movhi	r3, #0
 8021ab2:	8143      	strhhi	r3, [r0, #10]
 8021ab4:	8183      	strhhi	r3, [r0, #12]
 8021ab6:	7383      	strbhi	r3, [r0, #14]
 8021ab8:	4770      	bx	lr
	...

08021abc <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8021abc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8021ac0:	4604      	mov	r4, r0
 8021ac2:	4698      	mov	r8, r3
 8021ac4:	8880      	ldrh	r0, [r0, #4]
 8021ac6:	4617      	mov	r7, r2
 8021ac8:	4b1d      	ldr	r3, [pc, #116]	; (8021b40 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 8021aca:	460e      	mov	r6, r1
 8021acc:	f8ad 0006 	strh.w	r0, [sp, #6]
 8021ad0:	eba8 0000 	sub.w	r0, r8, r0
 8021ad4:	9300      	str	r3, [sp, #0]
 8021ad6:	2300      	movs	r3, #0
 8021ad8:	b280      	uxth	r0, r0
 8021ada:	8aa2      	ldrh	r2, [r4, #20]
 8021adc:	f88d 3004 	strb.w	r3, [sp, #4]
 8021ae0:	b203      	sxth	r3, r0
 8021ae2:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8021ae6:	88e1      	ldrh	r1, [r4, #6]
 8021ae8:	2b00      	cmp	r3, #0
 8021aea:	f8ad 800a 	strh.w	r8, [sp, #10]
 8021aee:	f8ad 1008 	strh.w	r1, [sp, #8]
 8021af2:	bfb8      	it	lt
 8021af4:	4240      	neglt	r0, r0
 8021af6:	f8ad 500c 	strh.w	r5, [sp, #12]
 8021afa:	bfb8      	it	lt
 8021afc:	b203      	sxthlt	r3, r0
 8021afe:	4293      	cmp	r3, r2
 8021b00:	dc08      	bgt.n	8021b14 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 8021b02:	1a69      	subs	r1, r5, r1
 8021b04:	b289      	uxth	r1, r1
 8021b06:	b20b      	sxth	r3, r1
 8021b08:	2b00      	cmp	r3, #0
 8021b0a:	bfbc      	itt	lt
 8021b0c:	4249      	neglt	r1, r1
 8021b0e:	b20b      	sxthlt	r3, r1
 8021b10:	429a      	cmp	r2, r3
 8021b12:	da13      	bge.n	8021b3c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 8021b14:	6920      	ldr	r0, [r4, #16]
 8021b16:	4669      	mov	r1, sp
 8021b18:	eba8 0606 	sub.w	r6, r8, r6
 8021b1c:	1bef      	subs	r7, r5, r7
 8021b1e:	6803      	ldr	r3, [r0, #0]
 8021b20:	685b      	ldr	r3, [r3, #4]
 8021b22:	4798      	blx	r3
 8021b24:	2300      	movs	r3, #0
 8021b26:	2001      	movs	r0, #1
 8021b28:	8166      	strh	r6, [r4, #10]
 8021b2a:	8123      	strh	r3, [r4, #8]
 8021b2c:	81a7      	strh	r7, [r4, #12]
 8021b2e:	f8a4 8004 	strh.w	r8, [r4, #4]
 8021b32:	80e5      	strh	r5, [r4, #6]
 8021b34:	73a0      	strb	r0, [r4, #14]
 8021b36:	b004      	add	sp, #16
 8021b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021b3c:	2000      	movs	r0, #0
 8021b3e:	e7fa      	b.n	8021b36 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8021b40:	08026d3c 	.word	0x08026d3c

08021b44 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8021b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021b46:	461e      	mov	r6, r3
 8021b48:	1e4b      	subs	r3, r1, #1
 8021b4a:	b085      	sub	sp, #20
 8021b4c:	4604      	mov	r4, r0
 8021b4e:	2b01      	cmp	r3, #1
 8021b50:	460d      	mov	r5, r1
 8021b52:	4617      	mov	r7, r2
 8021b54:	d84b      	bhi.n	8021bee <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8021b56:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8021b5a:	1cd3      	adds	r3, r2, #3
 8021b5c:	b29b      	uxth	r3, r3
 8021b5e:	2b06      	cmp	r3, #6
 8021b60:	d916      	bls.n	8021b90 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8021b62:	f8df c098 	ldr.w	ip, [pc, #152]	; 8021bfc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8021b66:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8021b6a:	f8cd c004 	str.w	ip, [sp, #4]
 8021b6e:	f04f 0c00 	mov.w	ip, #0
 8021b72:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8021b76:	6900      	ldr	r0, [r0, #16]
 8021b78:	f8ad 100c 	strh.w	r1, [sp, #12]
 8021b7c:	a901      	add	r1, sp, #4
 8021b7e:	f88d c008 	strb.w	ip, [sp, #8]
 8021b82:	f8ad 200a 	strh.w	r2, [sp, #10]
 8021b86:	f8ad 300e 	strh.w	r3, [sp, #14]
 8021b8a:	6803      	ldr	r3, [r0, #0]
 8021b8c:	689b      	ldr	r3, [r3, #8]
 8021b8e:	4798      	blx	r3
 8021b90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021b94:	1cd3      	adds	r3, r2, #3
 8021b96:	b29b      	uxth	r3, r3
 8021b98:	2b06      	cmp	r3, #6
 8021b9a:	d916      	bls.n	8021bca <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8021b9c:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8021bfc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8021ba0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8021ba4:	f8cd c004 	str.w	ip, [sp, #4]
 8021ba8:	f04f 0c01 	mov.w	ip, #1
 8021bac:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8021bb0:	6920      	ldr	r0, [r4, #16]
 8021bb2:	f8ad 100c 	strh.w	r1, [sp, #12]
 8021bb6:	a901      	add	r1, sp, #4
 8021bb8:	f88d c008 	strb.w	ip, [sp, #8]
 8021bbc:	f8ad 200a 	strh.w	r2, [sp, #10]
 8021bc0:	f8ad 300e 	strh.w	r3, [sp, #14]
 8021bc4:	6803      	ldr	r3, [r0, #0]
 8021bc6:	689b      	ldr	r3, [r3, #8]
 8021bc8:	4798      	blx	r3
 8021bca:	4b0b      	ldr	r3, [pc, #44]	; (8021bf8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb4>)
 8021bcc:	a901      	add	r1, sp, #4
 8021bce:	6920      	ldr	r0, [r4, #16]
 8021bd0:	9301      	str	r3, [sp, #4]
 8021bd2:	2300      	movs	r3, #0
 8021bd4:	f88d 5008 	strb.w	r5, [sp, #8]
 8021bd8:	f8ad 700a 	strh.w	r7, [sp, #10]
 8021bdc:	f8ad 600c 	strh.w	r6, [sp, #12]
 8021be0:	f8ad 300e 	strh.w	r3, [sp, #14]
 8021be4:	6803      	ldr	r3, [r0, #0]
 8021be6:	681b      	ldr	r3, [r3, #0]
 8021be8:	4798      	blx	r3
 8021bea:	b005      	add	sp, #20
 8021bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021bee:	2900      	cmp	r1, #0
 8021bf0:	d1eb      	bne.n	8021bca <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8021bf2:	80a2      	strh	r2, [r4, #4]
 8021bf4:	80c6      	strh	r6, [r0, #6]
 8021bf6:	e7e8      	b.n	8021bca <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8021bf8:	08026d28 	.word	0x08026d28
 8021bfc:	08026d50 	.word	0x08026d50

08021c00 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>:
 8021c00:	10c9      	asrs	r1, r1, #3
 8021c02:	2900      	cmp	r1, #0
 8021c04:	bfb8      	it	lt
 8021c06:	4249      	neglt	r1, r1
 8021c08:	2801      	cmp	r0, #1
 8021c0a:	d108      	bne.n	8021c1e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 8021c0c:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8021c10:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8021c14:	4601      	mov	r1, r0
 8021c16:	dd02      	ble.n	8021c1e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 8021c18:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 8021c1c:	4770      	bx	lr
 8021c1e:	29ff      	cmp	r1, #255	; 0xff
 8021c20:	bfa8      	it	ge
 8021c22:	21ff      	movge	r1, #255	; 0xff
 8021c24:	4608      	mov	r0, r1
 8021c26:	4770      	bx	lr

08021c28 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 8021c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c2c:	688c      	ldr	r4, [r1, #8]
 8021c2e:	b087      	sub	sp, #28
 8021c30:	4607      	mov	r7, r0
 8021c32:	2c00      	cmp	r4, #0
 8021c34:	db2b      	blt.n	8021c8e <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8021c36:	6803      	ldr	r3, [r0, #0]
 8021c38:	68da      	ldr	r2, [r3, #12]
 8021c3a:	42a2      	cmp	r2, r4
 8021c3c:	dd27      	ble.n	8021c8e <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8021c3e:	681a      	ldr	r2, [r3, #0]
 8021c40:	691e      	ldr	r6, [r3, #16]
 8021c42:	68cd      	ldr	r5, [r1, #12]
 8021c44:	fb06 2604 	mla	r6, r6, r4, r2
 8021c48:	f8d1 901c 	ldr.w	r9, [r1, #28]
 8021c4c:	698a      	ldr	r2, [r1, #24]
 8021c4e:	f893 a004 	ldrb.w	sl, [r3, #4]
 8021c52:	f8d1 8020 	ldr.w	r8, [r1, #32]
 8021c56:	9205      	str	r2, [sp, #20]
 8021c58:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 8021c5c:	9b05      	ldr	r3, [sp, #20]
 8021c5e:	6839      	ldr	r1, [r7, #0]
 8021c60:	eb03 0c02 	add.w	ip, r3, r2
 8021c64:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 8021c68:	6889      	ldr	r1, [r1, #8]
 8021c6a:	1898      	adds	r0, r3, r2
 8021c6c:	4288      	cmp	r0, r1
 8021c6e:	db02      	blt.n	8021c76 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 8021c70:	1a8b      	subs	r3, r1, r2
 8021c72:	2b00      	cmp	r3, #0
 8021c74:	dd09      	ble.n	8021c8a <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 8021c76:	6878      	ldr	r0, [r7, #4]
 8021c78:	6801      	ldr	r1, [r0, #0]
 8021c7a:	9400      	str	r4, [sp, #0]
 8021c7c:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 8021c80:	4653      	mov	r3, sl
 8021c82:	f8d1 b008 	ldr.w	fp, [r1, #8]
 8021c86:	4631      	mov	r1, r6
 8021c88:	47d8      	blx	fp
 8021c8a:	3d01      	subs	r5, #1
 8021c8c:	d1e4      	bne.n	8021c58 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 8021c8e:	b007      	add	sp, #28
 8021c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021c94 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8021c94:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8021c98:	b90b      	cbnz	r3, 8021c9e <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 8021c9a:	f001 b974 	b.w	8022f86 <_ZN8touchgfx7Outline6lineToEii>
 8021c9e:	4770      	bx	lr

08021ca0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 8021ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021ca4:	4604      	mov	r4, r0
 8021ca6:	2600      	movs	r6, #0
 8021ca8:	4b8e      	ldr	r3, [pc, #568]	; (8021ee4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x244>)
 8021caa:	f100 0518 	add.w	r5, r0, #24
 8021cae:	f104 072c 	add.w	r7, r4, #44	; 0x2c
 8021cb2:	b086      	sub	sp, #24
 8021cb4:	4690      	mov	r8, r2
 8021cb6:	e9c0 3100 	strd	r3, r1, [r0]
 8021cba:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8021cbe:	e9c0 6604 	strd	r6, r6, [r0, #16]
 8021cc2:	4628      	mov	r0, r5
 8021cc4:	f001 fb75 	bl	80233b2 <_ZN8touchgfx15RenderingBufferC1Ev>
 8021cc8:	4638      	mov	r0, r7
 8021cca:	f000 fb45 	bl	8022358 <_ZN8touchgfx7OutlineC1Ev>
 8021cce:	f104 0074 	add.w	r0, r4, #116	; 0x74
 8021cd2:	f001 fb23 	bl	802331c <_ZN8touchgfx8ScanlineC1Ev>
 8021cd6:	2301      	movs	r3, #1
 8021cd8:	f884 6098 	strb.w	r6, [r4, #152]	; 0x98
 8021cdc:	f884 60a0 	strb.w	r6, [r4, #160]	; 0xa0
 8021ce0:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8021ce4:	f884 60a2 	strb.w	r6, [r4, #162]	; 0xa2
 8021ce8:	f8a4 60ac 	strh.w	r6, [r4, #172]	; 0xac
 8021cec:	e9c4 6629 	strd	r6, r6, [r4, #164]	; 0xa4
 8021cf0:	e9c4 662c 	strd	r6, r6, [r4, #176]	; 0xb0
 8021cf4:	f7f4 fbe6 	bl	80164c4 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 8021cf8:	b928      	cbnz	r0, 8021d06 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x66>
 8021cfa:	4b7b      	ldr	r3, [pc, #492]	; (8021ee8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 8021cfc:	2118      	movs	r1, #24
 8021cfe:	4a7b      	ldr	r2, [pc, #492]	; (8021eec <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8021d00:	487b      	ldr	r0, [pc, #492]	; (8021ef0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 8021d02:	f001 fb99 	bl	8023438 <__assert_func>
 8021d06:	f9b8 2000 	ldrsh.w	r2, [r8]
 8021d0a:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8021d0e:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8021d12:	4410      	add	r0, r2
 8021d14:	9602      	str	r6, [sp, #8]
 8021d16:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 8021d1a:	b280      	uxth	r0, r0
 8021d1c:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 8021d20:	fa0f fa80 	sxth.w	sl, r0
 8021d24:	f1ba 0f00 	cmp.w	sl, #0
 8021d28:	dd70      	ble.n	8021e0c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8021d2a:	4591      	cmp	r9, r2
 8021d2c:	dd6e      	ble.n	8021e0c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8021d2e:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 8021d32:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8021d36:	440b      	add	r3, r1
 8021d38:	b29b      	uxth	r3, r3
 8021d3a:	b21e      	sxth	r6, r3
 8021d3c:	2e00      	cmp	r6, #0
 8021d3e:	dd65      	ble.n	8021e0c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8021d40:	458e      	cmp	lr, r1
 8021d42:	dd63      	ble.n	8021e0c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8021d44:	45d1      	cmp	r9, sl
 8021d46:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8021d4a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8021d4e:	bfb8      	it	lt
 8021d50:	fa1f f089 	uxthlt.w	r0, r9
 8021d54:	45b6      	cmp	lr, r6
 8021d56:	f8ad 2008 	strh.w	r2, [sp, #8]
 8021d5a:	bfb8      	it	lt
 8021d5c:	fa1f f38e 	uxthlt.w	r3, lr
 8021d60:	1a80      	subs	r0, r0, r2
 8021d62:	f8ad 100a 	strh.w	r1, [sp, #10]
 8021d66:	1a5b      	subs	r3, r3, r1
 8021d68:	f8ad 000c 	strh.w	r0, [sp, #12]
 8021d6c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8021d70:	f10d 0808 	add.w	r8, sp, #8
 8021d74:	ae04      	add	r6, sp, #16
 8021d76:	e898 0003 	ldmia.w	r8, {r0, r1}
 8021d7a:	e886 0003 	stmia.w	r6, {r0, r1}
 8021d7e:	f8dc 3000 	ldr.w	r3, [ip]
 8021d82:	4660      	mov	r0, ip
 8021d84:	4631      	mov	r1, r6
 8021d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021d88:	4798      	blx	r3
 8021d8a:	6861      	ldr	r1, [r4, #4]
 8021d8c:	4640      	mov	r0, r8
 8021d8e:	3104      	adds	r1, #4
 8021d90:	f7f5 fa06 	bl	80171a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021d94:	4630      	mov	r0, r6
 8021d96:	f7f5 fa1b 	bl	80171d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021d9a:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 8021d9e:	f7f4 fb21 	bl	80163e4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 8021da2:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
 8021da6:	4638      	mov	r0, r7
 8021da8:	f000 fab2 	bl	8022310 <_ZN8touchgfx7Outline5resetEv>
 8021dac:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8021db0:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8021db4:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 8021db8:	015b      	lsls	r3, r3, #5
 8021dba:	f8a4 209c 	strh.w	r2, [r4, #156]	; 0x9c
 8021dbe:	0152      	lsls	r2, r2, #5
 8021dc0:	60e3      	str	r3, [r4, #12]
 8021dc2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8021dc6:	60a2      	str	r2, [r4, #8]
 8021dc8:	015b      	lsls	r3, r3, #5
 8021dca:	6123      	str	r3, [r4, #16]
 8021dcc:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8021dd0:	015b      	lsls	r3, r3, #5
 8021dd2:	6163      	str	r3, [r4, #20]
 8021dd4:	4b47      	ldr	r3, [pc, #284]	; (8021ef4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 8021dd6:	6818      	ldr	r0, [r3, #0]
 8021dd8:	6803      	ldr	r3, [r0, #0]
 8021dda:	6a1b      	ldr	r3, [r3, #32]
 8021ddc:	4798      	blx	r3
 8021dde:	4606      	mov	r6, r0
 8021de0:	f7ec ffe0 	bl	800eda4 <_ZN8touchgfx3HAL3lcdEv>
 8021de4:	6803      	ldr	r3, [r0, #0]
 8021de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021de8:	4798      	blx	r3
 8021dea:	4607      	mov	r7, r0
 8021dec:	f7ec ffda 	bl	800eda4 <_ZN8touchgfx3HAL3lcdEv>
 8021df0:	6803      	ldr	r3, [r0, #0]
 8021df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021df4:	4798      	blx	r3
 8021df6:	280c      	cmp	r0, #12
 8021df8:	d854      	bhi.n	8021ea4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x204>
 8021dfa:	e8df f000 	tbb	[pc, r0]
 8021dfe:	554b      	.short	0x554b
 8021e00:	2b6e0a66 	.word	0x2b6e0a66
 8021e04:	5f5f5f3b 	.word	0x5f5f5f3b
 8021e08:	5f5f      	.short	0x5f5f
 8021e0a:	6e          	.byte	0x6e
 8021e0b:	00          	.byte	0x00
 8021e0c:	2300      	movs	r3, #0
 8021e0e:	9303      	str	r3, [sp, #12]
 8021e10:	e7ae      	b.n	8021d70 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd0>
 8021e12:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8021e16:	2108      	movs	r1, #8
 8021e18:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021e1c:	fb92 f1f1 	sdiv	r1, r2, r1
 8021e20:	fb07 1303 	mla	r3, r7, r3, r1
 8021e24:	441e      	add	r6, r3
 8021e26:	4253      	negs	r3, r2
 8021e28:	f002 0207 	and.w	r2, r2, #7
 8021e2c:	f003 0307 	and.w	r3, r3, #7
 8021e30:	bf58      	it	pl
 8021e32:	425a      	negpl	r2, r3
 8021e34:	b2d2      	uxtb	r2, r2
 8021e36:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8021e3a:	4628      	mov	r0, r5
 8021e3c:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8021e40:	66e1      	str	r1, [r4, #108]	; 0x6c
 8021e42:	e9cd 1700 	strd	r1, r7, [sp]
 8021e46:	4631      	mov	r1, r6
 8021e48:	f001 fabb 	bl	80233c2 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 8021e4c:	4620      	mov	r0, r4
 8021e4e:	b006      	add	sp, #24
 8021e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021e54:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8021e58:	2104      	movs	r1, #4
 8021e5a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021e5e:	fb92 f1f1 	sdiv	r1, r2, r1
 8021e62:	fb07 1303 	mla	r3, r7, r3, r1
 8021e66:	441e      	add	r6, r3
 8021e68:	4253      	negs	r3, r2
 8021e6a:	f002 0203 	and.w	r2, r2, #3
 8021e6e:	f003 0303 	and.w	r3, r3, #3
 8021e72:	e7dd      	b.n	8021e30 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x190>
 8021e74:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8021e78:	2102      	movs	r1, #2
 8021e7a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021e7e:	2a00      	cmp	r2, #0
 8021e80:	fb92 f1f1 	sdiv	r1, r2, r1
 8021e84:	f002 0201 	and.w	r2, r2, #1
 8021e88:	fb07 1303 	mla	r3, r7, r3, r1
 8021e8c:	bfb8      	it	lt
 8021e8e:	4252      	neglt	r2, r2
 8021e90:	441e      	add	r6, r3
 8021e92:	e7cf      	b.n	8021e34 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 8021e94:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021e98:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8021e9c:	437b      	muls	r3, r7
 8021e9e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8021ea2:	441e      	add	r6, r3
 8021ea4:	2200      	movs	r2, #0
 8021ea6:	e7c6      	b.n	8021e36 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x196>
 8021ea8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021eac:	2103      	movs	r1, #3
 8021eae:	fb07 f203 	mul.w	r2, r7, r3
 8021eb2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8021eb6:	fb13 2301 	smlabb	r3, r3, r1, r2
 8021eba:	e7f2      	b.n	8021ea2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8021ebc:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021ec0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8021ec4:	fb07 2303 	mla	r3, r7, r3, r2
 8021ec8:	e7eb      	b.n	8021ea2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8021eca:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021ece:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8021ed2:	437b      	muls	r3, r7
 8021ed4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8021ed8:	e7e3      	b.n	8021ea2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8021eda:	4b07      	ldr	r3, [pc, #28]	; (8021ef8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 8021edc:	2156      	movs	r1, #86	; 0x56
 8021ede:	4a03      	ldr	r2, [pc, #12]	; (8021eec <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8021ee0:	e70e      	b.n	8021d00 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x60>
 8021ee2:	bf00      	nop
 8021ee4:	080283f8 	.word	0x080283f8
 8021ee8:	08028342 	.word	0x08028342
 8021eec:	08028400 	.word	0x08028400
 8021ef0:	0802839e 	.word	0x0802839e
 8021ef4:	2000bad8 	.word	0x2000bad8
 8021ef8:	080283d2 	.word	0x080283d2

08021efc <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 8021efc:	6812      	ldr	r2, [r2, #0]
 8021efe:	2a00      	cmp	r2, #0
 8021f00:	db0b      	blt.n	8021f1a <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 8021f02:	9800      	ldr	r0, [sp, #0]
 8021f04:	6800      	ldr	r0, [r0, #0]
 8021f06:	4290      	cmp	r0, r2
 8021f08:	bfd4      	ite	le
 8021f0a:	2002      	movle	r0, #2
 8021f0c:	2000      	movgt	r0, #0
 8021f0e:	680a      	ldr	r2, [r1, #0]
 8021f10:	2a00      	cmp	r2, #0
 8021f12:	da04      	bge.n	8021f1e <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 8021f14:	f040 0004 	orr.w	r0, r0, #4
 8021f18:	4770      	bx	lr
 8021f1a:	2001      	movs	r0, #1
 8021f1c:	e7f7      	b.n	8021f0e <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 8021f1e:	681b      	ldr	r3, [r3, #0]
 8021f20:	4293      	cmp	r3, r2
 8021f22:	bfd8      	it	le
 8021f24:	f040 0008 	orrle.w	r0, r0, #8
 8021f28:	4770      	bx	lr
	...

08021f2c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 8021f2c:	4b07      	ldr	r3, [pc, #28]	; (8021f4c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 8021f2e:	b510      	push	{r4, lr}
 8021f30:	781b      	ldrb	r3, [r3, #0]
 8021f32:	2b01      	cmp	r3, #1
 8021f34:	d108      	bne.n	8021f48 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 8021f36:	6843      	ldr	r3, [r0, #4]
 8021f38:	6814      	ldr	r4, [r2, #0]
 8021f3a:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8021f3e:	680b      	ldr	r3, [r1, #0]
 8021f40:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8021f44:	6013      	str	r3, [r2, #0]
 8021f46:	600c      	str	r4, [r1, #0]
 8021f48:	bd10      	pop	{r4, pc}
 8021f4a:	bf00      	nop
 8021f4c:	2000bad0 	.word	0x2000bad0

08021f50 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8021f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021f52:	b085      	sub	sp, #20
 8021f54:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8021f58:	4604      	mov	r4, r0
 8021f5a:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8021f5e:	b33b      	cbz	r3, 8021fb0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 8021f60:	aa02      	add	r2, sp, #8
 8021f62:	a903      	add	r1, sp, #12
 8021f64:	f7ff ffe2 	bl	8021f2c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8021f68:	68a3      	ldr	r3, [r4, #8]
 8021f6a:	9e03      	ldr	r6, [sp, #12]
 8021f6c:	aa02      	add	r2, sp, #8
 8021f6e:	9f02      	ldr	r7, [sp, #8]
 8021f70:	a903      	add	r1, sp, #12
 8021f72:	1af6      	subs	r6, r6, r3
 8021f74:	68e3      	ldr	r3, [r4, #12]
 8021f76:	4620      	mov	r0, r4
 8021f78:	1aff      	subs	r7, r7, r3
 8021f7a:	f104 0314 	add.w	r3, r4, #20
 8021f7e:	9603      	str	r6, [sp, #12]
 8021f80:	9300      	str	r3, [sp, #0]
 8021f82:	f104 0310 	add.w	r3, r4, #16
 8021f86:	9702      	str	r7, [sp, #8]
 8021f88:	f7ff ffb8 	bl	8021efc <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 8021f8c:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 8021f90:	4605      	mov	r5, r0
 8021f92:	b97b      	cbnz	r3, 8021fb4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 8021f94:	463a      	mov	r2, r7
 8021f96:	4631      	mov	r1, r6
 8021f98:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8021f9c:	f7ff fe7a 	bl	8021c94 <_ZN8touchgfx10Rasterizer6lineToEii>
 8021fa0:	9b03      	ldr	r3, [sp, #12]
 8021fa2:	f884 50ac 	strb.w	r5, [r4, #172]	; 0xac
 8021fa6:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 8021faa:	9b02      	ldr	r3, [sp, #8]
 8021fac:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8021fb0:	b005      	add	sp, #20
 8021fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021fb4:	b110      	cbz	r0, 8021fbc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 8021fb6:	ea13 0200 	ands.w	r2, r3, r0
 8021fba:	d11c      	bne.n	8021ff6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 8021fbc:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
 8021fc0:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 8021fc4:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
 8021fc8:	b188      	cbz	r0, 8021fee <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 8021fca:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
 8021fce:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 8021fd2:	b913      	cbnz	r3, 8021fda <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 8021fd4:	4630      	mov	r0, r6
 8021fd6:	f001 f806 	bl	8022fe6 <_ZN8touchgfx7Outline6moveToEii>
 8021fda:	2300      	movs	r3, #0
 8021fdc:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8021fe0:	2301      	movs	r3, #1
 8021fe2:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 8021fe6:	4630      	mov	r0, r6
 8021fe8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8021fec:	e7d6      	b.n	8021f9c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 8021fee:	4630      	mov	r0, r6
 8021ff0:	f7ff fe50 	bl	8021c94 <_ZN8touchgfx10Rasterizer6lineToEii>
 8021ff4:	e7f7      	b.n	8021fe6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 8021ff6:	4615      	mov	r5, r2
 8021ff8:	e7d2      	b.n	8021fa0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

08021ffa <_ZN8touchgfx6Canvas5closeEv>:
 8021ffa:	b538      	push	{r3, r4, r5, lr}
 8021ffc:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8022000:	4604      	mov	r4, r0
 8022002:	b993      	cbnz	r3, 802202a <_ZN8touchgfx6Canvas5closeEv+0x30>
 8022004:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 8022008:	f890 20ad 	ldrb.w	r2, [r0, #173]	; 0xad
 802200c:	4213      	tst	r3, r2
 802200e:	d10c      	bne.n	802202a <_ZN8touchgfx6Canvas5closeEv+0x30>
 8022010:	f100 052c 	add.w	r5, r0, #44	; 0x2c
 8022014:	b123      	cbz	r3, 8022020 <_ZN8touchgfx6Canvas5closeEv+0x26>
 8022016:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
 802201a:	4628      	mov	r0, r5
 802201c:	f7ff fe3a 	bl	8021c94 <_ZN8touchgfx10Rasterizer6lineToEii>
 8022020:	4628      	mov	r0, r5
 8022022:	e9d4 122c 	ldrd	r1, r2, [r4, #176]	; 0xb0
 8022026:	f7ff fe35 	bl	8021c94 <_ZN8touchgfx10Rasterizer6lineToEii>
 802202a:	2300      	movs	r3, #0
 802202c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8022030:	bd38      	pop	{r3, r4, r5, pc}

08022032 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8022032:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022034:	b085      	sub	sp, #20
 8022036:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 802203a:	4604      	mov	r4, r0
 802203c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8022040:	b353      	cbz	r3, 8022098 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 8022042:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8022046:	b90b      	cbnz	r3, 802204c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 8022048:	f7ff ffd7 	bl	8021ffa <_ZN8touchgfx6Canvas5closeEv>
 802204c:	aa02      	add	r2, sp, #8
 802204e:	a903      	add	r1, sp, #12
 8022050:	4620      	mov	r0, r4
 8022052:	f7ff ff6b 	bl	8021f2c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8022056:	68a3      	ldr	r3, [r4, #8]
 8022058:	9d03      	ldr	r5, [sp, #12]
 802205a:	aa02      	add	r2, sp, #8
 802205c:	9e02      	ldr	r6, [sp, #8]
 802205e:	a903      	add	r1, sp, #12
 8022060:	1aed      	subs	r5, r5, r3
 8022062:	68e3      	ldr	r3, [r4, #12]
 8022064:	4620      	mov	r0, r4
 8022066:	1af6      	subs	r6, r6, r3
 8022068:	f104 0314 	add.w	r3, r4, #20
 802206c:	9503      	str	r5, [sp, #12]
 802206e:	9300      	str	r3, [sp, #0]
 8022070:	f104 0310 	add.w	r3, r4, #16
 8022074:	9602      	str	r6, [sp, #8]
 8022076:	f7ff ff41 	bl	8021efc <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 802207a:	4607      	mov	r7, r0
 802207c:	b170      	cbz	r0, 802209c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 802207e:	2301      	movs	r3, #1
 8022080:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8022084:	9a03      	ldr	r2, [sp, #12]
 8022086:	9b02      	ldr	r3, [sp, #8]
 8022088:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
 802208c:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
 8022090:	f884 70ac 	strb.w	r7, [r4, #172]	; 0xac
 8022094:	e9c4 2329 	strd	r2, r3, [r4, #164]	; 0xa4
 8022098:	b005      	add	sp, #20
 802209a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802209c:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 80220a0:	f884 00ad 	strb.w	r0, [r4, #173]	; 0xad
 80220a4:	b92b      	cbnz	r3, 80220b2 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 80220a6:	4632      	mov	r2, r6
 80220a8:	4629      	mov	r1, r5
 80220aa:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80220ae:	f000 ff9a 	bl	8022fe6 <_ZN8touchgfx7Outline6moveToEii>
 80220b2:	2300      	movs	r3, #0
 80220b4:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 80220b8:	2301      	movs	r3, #1
 80220ba:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 80220be:	e7e1      	b.n	8022084 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

080220c0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 80220c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80220c4:	4604      	mov	r4, r0
 80220c6:	b087      	sub	sp, #28
 80220c8:	9105      	str	r1, [sp, #20]
 80220ca:	f001 f8d0 	bl	802326e <_ZN8touchgfx7Outline8getCellsEv>
 80220ce:	f8d4 9008 	ldr.w	r9, [r4, #8]
 80220d2:	4605      	mov	r5, r0
 80220d4:	f1b9 0f00 	cmp.w	r9, #0
 80220d8:	d103      	bne.n	80220e2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 80220da:	2001      	movs	r0, #1
 80220dc:	b007      	add	sp, #28
 80220de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80220e2:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 80220e6:	2e00      	cmp	r6, #0
 80220e8:	d139      	bne.n	802215e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 80220ea:	f104 0848 	add.w	r8, r4, #72	; 0x48
 80220ee:	f105 0708 	add.w	r7, r5, #8
 80220f2:	4640      	mov	r0, r8
 80220f4:	f001 f8fd 	bl	80232f2 <_ZN8touchgfx8Scanline5resetEv>
 80220f8:	f109 33ff 	add.w	r3, r9, #4294967295
 80220fc:	9303      	str	r3, [sp, #12]
 80220fe:	f9b5 b000 	ldrsh.w	fp, [r5]
 8022102:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 8022106:	46da      	mov	sl, fp
 8022108:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 802210c:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 8022110:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8022114:	9b03      	ldr	r3, [sp, #12]
 8022116:	4416      	add	r6, r2
 8022118:	9504      	str	r5, [sp, #16]
 802211a:	463d      	mov	r5, r7
 802211c:	3b01      	subs	r3, #1
 802211e:	9303      	str	r3, [sp, #12]
 8022120:	3301      	adds	r3, #1
 8022122:	d01e      	beq.n	8022162 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 8022124:	3708      	adds	r7, #8
 8022126:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 802212a:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 802212e:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 8022132:	4290      	cmp	r0, r2
 8022134:	d11e      	bne.n	8022174 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 8022136:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 802213a:	4411      	add	r1, r2
 802213c:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 8022140:	e7e8      	b.n	8022114 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 8022142:	1c91      	adds	r1, r2, #2
 8022144:	f04f 0301 	mov.w	r3, #1
 8022148:	65e1      	str	r1, [r4, #92]	; 0x5c
 802214a:	8053      	strh	r3, [r2, #2]
 802214c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 802214e:	1c91      	adds	r1, r2, #2
 8022150:	65a1      	str	r1, [r4, #88]	; 0x58
 8022152:	f8a2 b002 	strh.w	fp, [r2, #2]
 8022156:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8022158:	3201      	adds	r2, #1
 802215a:	6562      	str	r2, [r4, #84]	; 0x54
 802215c:	e03a      	b.n	80221d4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 802215e:	2000      	movs	r0, #0
 8022160:	e7bc      	b.n	80220dc <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 8022162:	b951      	cbnz	r1, 802217a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 8022164:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8022166:	2b00      	cmp	r3, #0
 8022168:	d0b7      	beq.n	80220da <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 802216a:	4641      	mov	r1, r8
 802216c:	9805      	ldr	r0, [sp, #20]
 802216e:	f7ff fd5b 	bl	8021c28 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8022172:	e7b2      	b.n	80220da <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 8022174:	2900      	cmp	r1, #0
 8022176:	d035      	beq.n	80221e4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 8022178:	9504      	str	r5, [sp, #16]
 802217a:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 802217e:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8022182:	f7ff fd3d 	bl	8021c00 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 8022186:	4605      	mov	r5, r0
 8022188:	b330      	cbz	r0, 80221d8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802218a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 802218c:	b182      	cbz	r2, 80221b0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 802218e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8022190:	454a      	cmp	r2, r9
 8022192:	d00d      	beq.n	80221b0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8022194:	4641      	mov	r1, r8
 8022196:	9805      	ldr	r0, [sp, #20]
 8022198:	f7ff fd46 	bl	8021c28 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 802219c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80221a0:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80221a2:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 80221a6:	65e2      	str	r2, [r4, #92]	; 0x5c
 80221a8:	2300      	movs	r3, #0
 80221aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80221ac:	6563      	str	r3, [r4, #84]	; 0x54
 80221ae:	65a2      	str	r2, [r4, #88]	; 0x58
 80221b0:	f1bb 0f00 	cmp.w	fp, #0
 80221b4:	db10      	blt.n	80221d8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 80221b6:	f7f4 f993 	bl	80164e0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 80221ba:	4583      	cmp	fp, r0
 80221bc:	d20c      	bcs.n	80221d8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 80221be:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80221c0:	f802 500b 	strb.w	r5, [r2, fp]
 80221c4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80221c6:	3201      	adds	r2, #1
 80221c8:	455a      	cmp	r2, fp
 80221ca:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80221cc:	d1b9      	bne.n	8022142 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 80221ce:	8811      	ldrh	r1, [r2, #0]
 80221d0:	3101      	adds	r1, #1
 80221d2:	8011      	strh	r1, [r2, #0]
 80221d4:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 80221d8:	9b03      	ldr	r3, [sp, #12]
 80221da:	3301      	adds	r3, #1
 80221dc:	d0c2      	beq.n	8022164 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 80221de:	f10b 0a01 	add.w	sl, fp, #1
 80221e2:	9d04      	ldr	r5, [sp, #16]
 80221e4:	f9b5 3000 	ldrsh.w	r3, [r5]
 80221e8:	4553      	cmp	r3, sl
 80221ea:	dd88      	ble.n	80220fe <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 80221ec:	01b1      	lsls	r1, r6, #6
 80221ee:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 80221f2:	f7ff fd05 	bl	8021c00 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 80221f6:	4683      	mov	fp, r0
 80221f8:	2800      	cmp	r0, #0
 80221fa:	d080      	beq.n	80220fe <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 80221fc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80221fe:	b183      	cbz	r3, 8022222 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 8022200:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8022202:	454b      	cmp	r3, r9
 8022204:	d00d      	beq.n	8022222 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 8022206:	4641      	mov	r1, r8
 8022208:	9805      	ldr	r0, [sp, #20]
 802220a:	f7ff fd0d 	bl	8021c28 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 802220e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8022212:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8022216:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8022218:	65e3      	str	r3, [r4, #92]	; 0x5c
 802221a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802221c:	65a3      	str	r3, [r4, #88]	; 0x58
 802221e:	2300      	movs	r3, #0
 8022220:	6563      	str	r3, [r4, #84]	; 0x54
 8022222:	f9b5 3000 	ldrsh.w	r3, [r5]
 8022226:	464a      	mov	r2, r9
 8022228:	f8cd b000 	str.w	fp, [sp]
 802222c:	4651      	mov	r1, sl
 802222e:	eba3 030a 	sub.w	r3, r3, sl
 8022232:	4640      	mov	r0, r8
 8022234:	f001 f884 	bl	8023340 <_ZN8touchgfx8Scanline7addSpanEiijj>
 8022238:	e761      	b.n	80220fe <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

0802223a <_ZN8touchgfx6Canvas6renderEv>:
 802223a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802223c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8022240:	4604      	mov	r4, r0
 8022242:	b913      	cbnz	r3, 802224a <_ZN8touchgfx6Canvas6renderEv+0x10>
 8022244:	2001      	movs	r0, #1
 8022246:	b003      	add	sp, #12
 8022248:	bd30      	pop	{r4, r5, pc}
 802224a:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 802224e:	2b00      	cmp	r3, #0
 8022250:	d131      	bne.n	80222b6 <_ZN8touchgfx6Canvas6renderEv+0x7c>
 8022252:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
 8022256:	2b00      	cmp	r3, #0
 8022258:	d0f4      	beq.n	8022244 <_ZN8touchgfx6Canvas6renderEv+0xa>
 802225a:	6840      	ldr	r0, [r0, #4]
 802225c:	6803      	ldr	r3, [r0, #0]
 802225e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8022260:	4798      	blx	r3
 8022262:	2800      	cmp	r0, #0
 8022264:	d0ee      	beq.n	8022244 <_ZN8touchgfx6Canvas6renderEv+0xa>
 8022266:	4620      	mov	r0, r4
 8022268:	f7ff fec7 	bl	8021ffa <_ZN8touchgfx6Canvas5closeEv>
 802226c:	6860      	ldr	r0, [r4, #4]
 802226e:	6803      	ldr	r3, [r0, #0]
 8022270:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8022272:	4798      	blx	r3
 8022274:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
 8022278:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
 802227c:	f7f3 fa11 	bl	80156a2 <_ZN8touchgfx15AbstractPainter9setOffsetEtt>
 8022280:	6860      	ldr	r0, [r4, #4]
 8022282:	6803      	ldr	r3, [r0, #0]
 8022284:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8022286:	4798      	blx	r3
 8022288:	4605      	mov	r5, r0
 802228a:	6860      	ldr	r0, [r4, #4]
 802228c:	6803      	ldr	r3, [r0, #0]
 802228e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8022290:	4798      	blx	r3
 8022292:	4601      	mov	r1, r0
 8022294:	4628      	mov	r0, r5
 8022296:	f7f3 fa07 	bl	80156a8 <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>
 802229a:	6860      	ldr	r0, [r4, #4]
 802229c:	6803      	ldr	r3, [r0, #0]
 802229e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80222a0:	4798      	blx	r3
 80222a2:	f104 0318 	add.w	r3, r4, #24
 80222a6:	4669      	mov	r1, sp
 80222a8:	e9cd 3000 	strd	r3, r0, [sp]
 80222ac:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80222b0:	f7ff ff06 	bl	80220c0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 80222b4:	e7c7      	b.n	8022246 <_ZN8touchgfx6Canvas6renderEv+0xc>
 80222b6:	2000      	movs	r0, #0
 80222b8:	e7c5      	b.n	8022246 <_ZN8touchgfx6Canvas6renderEv+0xc>
	...

080222bc <_ZN8touchgfx6CanvasD1Ev>:
 80222bc:	b538      	push	{r3, r4, r5, lr}
 80222be:	4605      	mov	r5, r0
 80222c0:	4b08      	ldr	r3, [pc, #32]	; (80222e4 <_ZN8touchgfx6CanvasD1Ev+0x28>)
 80222c2:	4604      	mov	r4, r0
 80222c4:	f845 3b2c 	str.w	r3, [r5], #44
 80222c8:	4b07      	ldr	r3, [pc, #28]	; (80222e8 <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 80222ca:	6818      	ldr	r0, [r3, #0]
 80222cc:	6803      	ldr	r3, [r0, #0]
 80222ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80222d0:	4798      	blx	r3
 80222d2:	4628      	mov	r0, r5
 80222d4:	f000 f814 	bl	8022300 <_ZN8touchgfx7OutlineD1Ev>
 80222d8:	f104 0018 	add.w	r0, r4, #24
 80222dc:	f001 f870 	bl	80233c0 <_ZN8touchgfx15RenderingBufferD1Ev>
 80222e0:	4620      	mov	r0, r4
 80222e2:	bd38      	pop	{r3, r4, r5, pc}
 80222e4:	080283f8 	.word	0x080283f8
 80222e8:	2000bad8 	.word	0x2000bad8

080222ec <_ZN8touchgfx6CanvasD0Ev>:
 80222ec:	b510      	push	{r4, lr}
 80222ee:	4604      	mov	r4, r0
 80222f0:	f7ff ffe4 	bl	80222bc <_ZN8touchgfx6CanvasD1Ev>
 80222f4:	21b8      	movs	r1, #184	; 0xb8
 80222f6:	4620      	mov	r0, r4
 80222f8:	f001 f873 	bl	80233e2 <_ZdlPvj>
 80222fc:	4620      	mov	r0, r4
 80222fe:	bd10      	pop	{r4, pc}

08022300 <_ZN8touchgfx7OutlineD1Ev>:
 8022300:	4770      	bx	lr

08022302 <_ZN8touchgfx7OutlineD0Ev>:
 8022302:	b510      	push	{r4, lr}
 8022304:	4604      	mov	r4, r0
 8022306:	2148      	movs	r1, #72	; 0x48
 8022308:	f001 f86b 	bl	80233e2 <_ZdlPvj>
 802230c:	4620      	mov	r0, r4
 802230e:	bd10      	pop	{r4, pc}

08022310 <_ZN8touchgfx7Outline5resetEv>:
 8022310:	b510      	push	{r4, lr}
 8022312:	4604      	mov	r4, r0
 8022314:	f7f4 f8fc 	bl	8016510 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8022318:	60e0      	str	r0, [r4, #12]
 802231a:	f7f4 f8ff 	bl	801651c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 802231e:	68e3      	ldr	r3, [r4, #12]
 8022320:	2200      	movs	r2, #0
 8022322:	08c0      	lsrs	r0, r0, #3
 8022324:	6123      	str	r3, [r4, #16]
 8022326:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802232a:	6060      	str	r0, [r4, #4]
 802232c:	82a3      	strh	r3, [r4, #20]
 802232e:	82e3      	strh	r3, [r4, #22]
 8022330:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8022332:	60a2      	str	r2, [r4, #8]
 8022334:	f023 0301 	bic.w	r3, r3, #1
 8022338:	8322      	strh	r2, [r4, #24]
 802233a:	8362      	strh	r2, [r4, #26]
 802233c:	f043 0302 	orr.w	r3, r3, #2
 8022340:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8022344:	63e3      	str	r3, [r4, #60]	; 0x3c
 8022346:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802234a:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 802234e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8022352:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8022356:	bd10      	pop	{r4, pc}

08022358 <_ZN8touchgfx7OutlineC1Ev>:
 8022358:	4b0f      	ldr	r3, [pc, #60]	; (8022398 <_ZN8touchgfx7OutlineC1Ev+0x40>)
 802235a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 802235e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8022362:	b510      	push	{r4, lr}
 8022364:	6003      	str	r3, [r0, #0]
 8022366:	2300      	movs	r3, #0
 8022368:	4604      	mov	r4, r0
 802236a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 802236e:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8022372:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8022376:	e9c0 3305 	strd	r3, r3, [r0, #20]
 802237a:	e9c0 3307 	strd	r3, r3, [r0, #28]
 802237e:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 8022382:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 8022386:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 802238a:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 802238e:	f7ff ffbf 	bl	8022310 <_ZN8touchgfx7Outline5resetEv>
 8022392:	4620      	mov	r0, r4
 8022394:	bd10      	pop	{r4, pc}
 8022396:	bf00      	nop
 8022398:	08028458 	.word	0x08028458

0802239c <_ZN8touchgfx7Outline10renderLineEiiii>:
 802239c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80223a0:	b093      	sub	sp, #76	; 0x4c
 80223a2:	4604      	mov	r4, r0
 80223a4:	1156      	asrs	r6, r2, #5
 80223a6:	f002 0e1f 	and.w	lr, r2, #31
 80223aa:	981c      	ldr	r0, [sp, #112]	; 0x70
 80223ac:	9305      	str	r3, [sp, #20]
 80223ae:	1143      	asrs	r3, r0, #5
 80223b0:	1145      	asrs	r5, r0, #5
 80223b2:	930c      	str	r3, [sp, #48]	; 0x30
 80223b4:	f000 031f 	and.w	r3, r0, #31
 80223b8:	9303      	str	r3, [sp, #12]
 80223ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80223bc:	42b3      	cmp	r3, r6
 80223be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80223c0:	bfc8      	it	gt
 80223c2:	6326      	strgt	r6, [r4, #48]	; 0x30
 80223c4:	42b3      	cmp	r3, r6
 80223c6:	bfdc      	itt	le
 80223c8:	1c73      	addle	r3, r6, #1
 80223ca:	63a3      	strle	r3, [r4, #56]	; 0x38
 80223cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80223ce:	42ab      	cmp	r3, r5
 80223d0:	bfc8      	it	gt
 80223d2:	462b      	movgt	r3, r5
 80223d4:	ea4f 1560 	mov.w	r5, r0, asr #5
 80223d8:	bfc8      	it	gt
 80223da:	6323      	strgt	r3, [r4, #48]	; 0x30
 80223dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80223de:	42ab      	cmp	r3, r5
 80223e0:	bfd8      	it	le
 80223e2:	462b      	movle	r3, r5
 80223e4:	ea4f 1561 	mov.w	r5, r1, asr #5
 80223e8:	bfdc      	itt	le
 80223ea:	3301      	addle	r3, #1
 80223ec:	63a3      	strle	r3, [r4, #56]	; 0x38
 80223ee:	9b05      	ldr	r3, [sp, #20]
 80223f0:	eba3 0a01 	sub.w	sl, r3, r1
 80223f4:	1143      	asrs	r3, r0, #5
 80223f6:	429e      	cmp	r6, r3
 80223f8:	f040 8119 	bne.w	802262e <_ZN8touchgfx7Outline10renderLineEiiii+0x292>
 80223fc:	9b05      	ldr	r3, [sp, #20]
 80223fe:	ea4f 1c63 	mov.w	ip, r3, asr #5
 8022402:	9b03      	ldr	r3, [sp, #12]
 8022404:	459e      	cmp	lr, r3
 8022406:	d12c      	bne.n	8022462 <_ZN8touchgfx7Outline10renderLineEiiii+0xc6>
 8022408:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802240c:	eb0c 4106 	add.w	r1, ip, r6, lsl #16
 8022410:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8022414:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 8022418:	4291      	cmp	r1, r2
 802241a:	d037      	beq.n	802248c <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 802241c:	8b61      	ldrh	r1, [r4, #26]
 802241e:	8b22      	ldrh	r2, [r4, #24]
 8022420:	430a      	orrs	r2, r1
 8022422:	d00b      	beq.n	802243c <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8022424:	2b00      	cmp	r3, #0
 8022426:	db09      	blt.n	802243c <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8022428:	6c22      	ldr	r2, [r4, #64]	; 0x40
 802242a:	429a      	cmp	r2, r3
 802242c:	dd06      	ble.n	802243c <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 802242e:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8022432:	429a      	cmp	r2, r3
 8022434:	d308      	bcc.n	8022448 <_ZN8touchgfx7Outline10renderLineEiiii+0xac>
 8022436:	2301      	movs	r3, #1
 8022438:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802243c:	f8a4 c014 	strh.w	ip, [r4, #20]
 8022440:	82e6      	strh	r6, [r4, #22]
 8022442:	2300      	movs	r3, #0
 8022444:	8323      	strh	r3, [r4, #24]
 8022446:	e0c6      	b.n	80225d6 <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 8022448:	f104 0314 	add.w	r3, r4, #20
 802244c:	6922      	ldr	r2, [r4, #16]
 802244e:	cb03      	ldmia	r3!, {r0, r1}
 8022450:	6010      	str	r0, [r2, #0]
 8022452:	6051      	str	r1, [r2, #4]
 8022454:	6923      	ldr	r3, [r4, #16]
 8022456:	3308      	adds	r3, #8
 8022458:	6123      	str	r3, [r4, #16]
 802245a:	68a3      	ldr	r3, [r4, #8]
 802245c:	3301      	adds	r3, #1
 802245e:	60a3      	str	r3, [r4, #8]
 8022460:	e7ec      	b.n	802243c <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8022462:	9b05      	ldr	r3, [sp, #20]
 8022464:	45ac      	cmp	ip, r5
 8022466:	f001 011f 	and.w	r1, r1, #31
 802246a:	8b20      	ldrh	r0, [r4, #24]
 802246c:	f003 031f 	and.w	r3, r3, #31
 8022470:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8022474:	9304      	str	r3, [sp, #16]
 8022476:	9b03      	ldr	r3, [sp, #12]
 8022478:	eba3 020e 	sub.w	r2, r3, lr
 802247c:	d109      	bne.n	8022492 <_ZN8touchgfx7Outline10renderLineEiiii+0xf6>
 802247e:	9b04      	ldr	r3, [sp, #16]
 8022480:	4410      	add	r0, r2
 8022482:	4419      	add	r1, r3
 8022484:	8320      	strh	r0, [r4, #24]
 8022486:	fb02 8201 	mla	r2, r2, r1, r8
 802248a:	8362      	strh	r2, [r4, #26]
 802248c:	b013      	add	sp, #76	; 0x4c
 802248e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022492:	f1ba 0f00 	cmp.w	sl, #0
 8022496:	f2c0 80a0 	blt.w	80225da <_ZN8touchgfx7Outline10renderLineEiiii+0x23e>
 802249a:	f1c1 0320 	rsb	r3, r1, #32
 802249e:	f04f 0b20 	mov.w	fp, #32
 80224a2:	435a      	muls	r2, r3
 80224a4:	2301      	movs	r3, #1
 80224a6:	9302      	str	r3, [sp, #8]
 80224a8:	4459      	add	r1, fp
 80224aa:	fb92 f7fa 	sdiv	r7, r2, sl
 80224ae:	fb0a 2217 	mls	r2, sl, r7, r2
 80224b2:	2a00      	cmp	r2, #0
 80224b4:	bfbc      	itt	lt
 80224b6:	f107 37ff 	addlt.w	r7, r7, #4294967295
 80224ba:	4452      	addlt	r2, sl
 80224bc:	fb07 8101 	mla	r1, r7, r1, r8
 80224c0:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 80224c4:	4438      	add	r0, r7
 80224c6:	b20b      	sxth	r3, r1
 80224c8:	9902      	ldr	r1, [sp, #8]
 80224ca:	b200      	sxth	r0, r0
 80224cc:	9301      	str	r3, [sp, #4]
 80224ce:	8363      	strh	r3, [r4, #26]
 80224d0:	186b      	adds	r3, r5, r1
 80224d2:	0435      	lsls	r5, r6, #16
 80224d4:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 80224d8:	8320      	strh	r0, [r4, #24]
 80224da:	eb03 0905 	add.w	r9, r3, r5
 80224de:	eb08 4801 	add.w	r8, r8, r1, lsl #16
 80224e2:	9300      	str	r3, [sp, #0]
 80224e4:	45c1      	cmp	r9, r8
 80224e6:	9505      	str	r5, [sp, #20]
 80224e8:	d014      	beq.n	8022514 <_ZN8touchgfx7Outline10renderLineEiiii+0x178>
 80224ea:	9b01      	ldr	r3, [sp, #4]
 80224ec:	4303      	orrs	r3, r0
 80224ee:	d00b      	beq.n	8022508 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 80224f0:	2900      	cmp	r1, #0
 80224f2:	db09      	blt.n	8022508 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 80224f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80224f6:	428b      	cmp	r3, r1
 80224f8:	dd06      	ble.n	8022508 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 80224fa:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80224fe:	4299      	cmp	r1, r3
 8022500:	d374      	bcc.n	80225ec <_ZN8touchgfx7Outline10renderLineEiiii+0x250>
 8022502:	2301      	movs	r3, #1
 8022504:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8022508:	9b00      	ldr	r3, [sp, #0]
 802250a:	82e6      	strh	r6, [r4, #22]
 802250c:	82a3      	strh	r3, [r4, #20]
 802250e:	2300      	movs	r3, #0
 8022510:	8323      	strh	r3, [r4, #24]
 8022512:	8363      	strh	r3, [r4, #26]
 8022514:	9900      	ldr	r1, [sp, #0]
 8022516:	eb0e 0307 	add.w	r3, lr, r7
 802251a:	458c      	cmp	ip, r1
 802251c:	d04e      	beq.n	80225bc <_ZN8touchgfx7Outline10renderLineEiiii+0x220>
 802251e:	9903      	ldr	r1, [sp, #12]
 8022520:	eba2 020a 	sub.w	r2, r2, sl
 8022524:	1ac9      	subs	r1, r1, r3
 8022526:	9201      	str	r2, [sp, #4]
 8022528:	440f      	add	r7, r1
 802252a:	017f      	lsls	r7, r7, #5
 802252c:	fb97 fefa 	sdiv	lr, r7, sl
 8022530:	fb0a 771e 	mls	r7, sl, lr, r7
 8022534:	2f00      	cmp	r7, #0
 8022536:	bfbc      	itt	lt
 8022538:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 802253c:	4457      	addlt	r7, sl
 802253e:	f10e 0101 	add.w	r1, lr, #1
 8022542:	9106      	str	r1, [sp, #24]
 8022544:	9a01      	ldr	r2, [sp, #4]
 8022546:	8b20      	ldrh	r0, [r4, #24]
 8022548:	19d2      	adds	r2, r2, r7
 802254a:	8b61      	ldrh	r1, [r4, #26]
 802254c:	9d02      	ldr	r5, [sp, #8]
 802254e:	9201      	str	r2, [sp, #4]
 8022550:	bf5b      	ittet	pl
 8022552:	eba2 020a 	subpl.w	r2, r2, sl
 8022556:	f8dd 8018 	ldrpl.w	r8, [sp, #24]
 802255a:	46f0      	movmi	r8, lr
 802255c:	9201      	strpl	r2, [sp, #4]
 802255e:	9a00      	ldr	r2, [sp, #0]
 8022560:	4440      	add	r0, r8
 8022562:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 8022566:	4443      	add	r3, r8
 8022568:	442a      	add	r2, r5
 802256a:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 802256e:	9d05      	ldr	r5, [sp, #20]
 8022570:	b200      	sxth	r0, r0
 8022572:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8022576:	b209      	sxth	r1, r1
 8022578:	4415      	add	r5, r2
 802257a:	8320      	strh	r0, [r4, #24]
 802257c:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8022580:	8361      	strh	r1, [r4, #26]
 8022582:	9200      	str	r2, [sp, #0]
 8022584:	454d      	cmp	r5, r9
 8022586:	d016      	beq.n	80225b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x21a>
 8022588:	4301      	orrs	r1, r0
 802258a:	d00d      	beq.n	80225a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 802258c:	f1b8 0f00 	cmp.w	r8, #0
 8022590:	db0a      	blt.n	80225a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8022592:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8022594:	4541      	cmp	r1, r8
 8022596:	dd07      	ble.n	80225a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8022598:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802259c:	4288      	cmp	r0, r1
 802259e:	d335      	bcc.n	802260c <_ZN8touchgfx7Outline10renderLineEiiii+0x270>
 80225a0:	f04f 0101 	mov.w	r1, #1
 80225a4:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 80225a8:	9900      	ldr	r1, [sp, #0]
 80225aa:	82e6      	strh	r6, [r4, #22]
 80225ac:	82a1      	strh	r1, [r4, #20]
 80225ae:	f04f 0100 	mov.w	r1, #0
 80225b2:	8321      	strh	r1, [r4, #24]
 80225b4:	8361      	strh	r1, [r4, #26]
 80225b6:	9a00      	ldr	r2, [sp, #0]
 80225b8:	4594      	cmp	ip, r2
 80225ba:	d1c3      	bne.n	8022544 <_ZN8touchgfx7Outline10renderLineEiiii+0x1a8>
 80225bc:	9a03      	ldr	r2, [sp, #12]
 80225be:	f8b4 c01a 	ldrh.w	ip, [r4, #26]
 80225c2:	1ad3      	subs	r3, r2, r3
 80225c4:	8b22      	ldrh	r2, [r4, #24]
 80225c6:	441a      	add	r2, r3
 80225c8:	8322      	strh	r2, [r4, #24]
 80225ca:	9a04      	ldr	r2, [sp, #16]
 80225cc:	3220      	adds	r2, #32
 80225ce:	eba2 020b 	sub.w	r2, r2, fp
 80225d2:	fb03 c302 	mla	r3, r3, r2, ip
 80225d6:	8363      	strh	r3, [r4, #26]
 80225d8:	e758      	b.n	802248c <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 80225da:	f04f 33ff 	mov.w	r3, #4294967295
 80225de:	434a      	muls	r2, r1
 80225e0:	f1ca 0a00 	rsb	sl, sl, #0
 80225e4:	f04f 0b00 	mov.w	fp, #0
 80225e8:	9302      	str	r3, [sp, #8]
 80225ea:	e75d      	b.n	80224a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x10c>
 80225ec:	f104 0314 	add.w	r3, r4, #20
 80225f0:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80225f4:	cb03      	ldmia	r3!, {r0, r1}
 80225f6:	f8c8 0000 	str.w	r0, [r8]
 80225fa:	f8c8 1004 	str.w	r1, [r8, #4]
 80225fe:	6923      	ldr	r3, [r4, #16]
 8022600:	3308      	adds	r3, #8
 8022602:	6123      	str	r3, [r4, #16]
 8022604:	68a3      	ldr	r3, [r4, #8]
 8022606:	3301      	adds	r3, #1
 8022608:	60a3      	str	r3, [r4, #8]
 802260a:	e77d      	b.n	8022508 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 802260c:	f104 0814 	add.w	r8, r4, #20
 8022610:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8022614:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8022618:	f8c9 0000 	str.w	r0, [r9]
 802261c:	f8c9 1004 	str.w	r1, [r9, #4]
 8022620:	6921      	ldr	r1, [r4, #16]
 8022622:	3108      	adds	r1, #8
 8022624:	6121      	str	r1, [r4, #16]
 8022626:	68a1      	ldr	r1, [r4, #8]
 8022628:	3101      	adds	r1, #1
 802262a:	60a1      	str	r1, [r4, #8]
 802262c:	e7bc      	b.n	80225a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 802262e:	1a83      	subs	r3, r0, r2
 8022630:	9301      	str	r3, [sp, #4]
 8022632:	f1ba 0f00 	cmp.w	sl, #0
 8022636:	f040 8094 	bne.w	8022762 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c6>
 802263a:	9a01      	ldr	r2, [sp, #4]
 802263c:	0049      	lsls	r1, r1, #1
 802263e:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 8022642:	2a00      	cmp	r2, #0
 8022644:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 8022648:	8b62      	ldrh	r2, [r4, #26]
 802264a:	bfaa      	itet	ge
 802264c:	f04f 0a20 	movge.w	sl, #32
 8022650:	f04f 38ff 	movlt.w	r8, #4294967295
 8022654:	f04f 0801 	movge.w	r8, #1
 8022658:	8b21      	ldrh	r1, [r4, #24]
 802265a:	ebaa 0e0e 	sub.w	lr, sl, lr
 802265e:	4471      	add	r1, lr
 8022660:	fb0e 2e03 	mla	lr, lr, r3, r2
 8022664:	eb08 0206 	add.w	r2, r8, r6
 8022668:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 802266c:	b209      	sxth	r1, r1
 802266e:	eb05 4702 	add.w	r7, r5, r2, lsl #16
 8022672:	eb06 4600 	add.w	r6, r6, r0, lsl #16
 8022676:	8321      	strh	r1, [r4, #24]
 8022678:	fa0f fe8e 	sxth.w	lr, lr
 802267c:	42b7      	cmp	r7, r6
 802267e:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8022682:	d013      	beq.n	80226ac <_ZN8touchgfx7Outline10renderLineEiiii+0x310>
 8022684:	ea51 010e 	orrs.w	r1, r1, lr
 8022688:	d00b      	beq.n	80226a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 802268a:	2800      	cmp	r0, #0
 802268c:	db09      	blt.n	80226a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 802268e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8022690:	4281      	cmp	r1, r0
 8022692:	dd06      	ble.n	80226a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8022694:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8022698:	4288      	cmp	r0, r1
 802269a:	d339      	bcc.n	8022710 <_ZN8touchgfx7Outline10renderLineEiiii+0x374>
 802269c:	2101      	movs	r1, #1
 802269e:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 80226a2:	2100      	movs	r1, #0
 80226a4:	82a5      	strh	r5, [r4, #20]
 80226a6:	82e2      	strh	r2, [r4, #22]
 80226a8:	8321      	strh	r1, [r4, #24]
 80226aa:	8361      	strh	r1, [r4, #26]
 80226ac:	f1aa 0610 	sub.w	r6, sl, #16
 80226b0:	f04f 0e00 	mov.w	lr, #0
 80226b4:	f04f 0b01 	mov.w	fp, #1
 80226b8:	0076      	lsls	r6, r6, #1
 80226ba:	fb06 f703 	mul.w	r7, r6, r3
 80226be:	b236      	sxth	r6, r6
 80226c0:	b23f      	sxth	r7, r7
 80226c2:	ea46 0107 	orr.w	r1, r6, r7
 80226c6:	9100      	str	r1, [sp, #0]
 80226c8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80226ca:	428a      	cmp	r2, r1
 80226cc:	d03e      	beq.n	802274c <_ZN8touchgfx7Outline10renderLineEiiii+0x3b0>
 80226ce:	4442      	add	r2, r8
 80226d0:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 80226d4:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 80226d8:	eb05 4c02 	add.w	ip, r5, r2, lsl #16
 80226dc:	8326      	strh	r6, [r4, #24]
 80226de:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 80226e2:	8367      	strh	r7, [r4, #26]
 80226e4:	4584      	cmp	ip, r0
 80226e6:	d0ef      	beq.n	80226c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 80226e8:	9800      	ldr	r0, [sp, #0]
 80226ea:	b150      	cbz	r0, 8022702 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 80226ec:	2900      	cmp	r1, #0
 80226ee:	db08      	blt.n	8022702 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 80226f0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80226f2:	4288      	cmp	r0, r1
 80226f4:	dd05      	ble.n	8022702 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 80226f6:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80226fa:	4288      	cmp	r0, r1
 80226fc:	d315      	bcc.n	802272a <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 80226fe:	f884 b044 	strb.w	fp, [r4, #68]	; 0x44
 8022702:	82a5      	strh	r5, [r4, #20]
 8022704:	82e2      	strh	r2, [r4, #22]
 8022706:	f8a4 e018 	strh.w	lr, [r4, #24]
 802270a:	f8a4 e01a 	strh.w	lr, [r4, #26]
 802270e:	e7db      	b.n	80226c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 8022710:	f104 0614 	add.w	r6, r4, #20
 8022714:	6927      	ldr	r7, [r4, #16]
 8022716:	ce03      	ldmia	r6!, {r0, r1}
 8022718:	6038      	str	r0, [r7, #0]
 802271a:	6079      	str	r1, [r7, #4]
 802271c:	6921      	ldr	r1, [r4, #16]
 802271e:	3108      	adds	r1, #8
 8022720:	6121      	str	r1, [r4, #16]
 8022722:	68a1      	ldr	r1, [r4, #8]
 8022724:	3101      	adds	r1, #1
 8022726:	60a1      	str	r1, [r4, #8]
 8022728:	e7bb      	b.n	80226a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 802272a:	f104 0c14 	add.w	ip, r4, #20
 802272e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8022732:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 8022736:	f8c9 0000 	str.w	r0, [r9]
 802273a:	f8c9 1004 	str.w	r1, [r9, #4]
 802273e:	6921      	ldr	r1, [r4, #16]
 8022740:	3108      	adds	r1, #8
 8022742:	6121      	str	r1, [r4, #16]
 8022744:	68a1      	ldr	r1, [r4, #8]
 8022746:	3101      	adds	r1, #1
 8022748:	60a1      	str	r1, [r4, #8]
 802274a:	e7da      	b.n	8022702 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 802274c:	9a03      	ldr	r2, [sp, #12]
 802274e:	8b61      	ldrh	r1, [r4, #26]
 8022750:	f1a2 0c20 	sub.w	ip, r2, #32
 8022754:	8b22      	ldrh	r2, [r4, #24]
 8022756:	44d4      	add	ip, sl
 8022758:	4462      	add	r2, ip
 802275a:	fb0c 1303 	mla	r3, ip, r3, r1
 802275e:	8322      	strh	r2, [r4, #24]
 8022760:	e739      	b.n	80225d6 <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 8022762:	9b01      	ldr	r3, [sp, #4]
 8022764:	2b00      	cmp	r3, #0
 8022766:	db3f      	blt.n	80227e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x44c>
 8022768:	2201      	movs	r2, #1
 802276a:	f1ce 0320 	rsb	r3, lr, #32
 802276e:	920b      	str	r2, [sp, #44]	; 0x2c
 8022770:	2220      	movs	r2, #32
 8022772:	fb0a f303 	mul.w	r3, sl, r3
 8022776:	9202      	str	r2, [sp, #8]
 8022778:	9a01      	ldr	r2, [sp, #4]
 802277a:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 802277e:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8022782:	fb93 f7f2 	sdiv	r7, r3, r2
 8022786:	fb02 3317 	mls	r3, r2, r7, r3
 802278a:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 802278e:	2b00      	cmp	r3, #0
 8022790:	9308      	str	r3, [sp, #32]
 8022792:	bfbc      	itt	lt
 8022794:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8022798:	189b      	addlt	r3, r3, r2
 802279a:	eb07 0b01 	add.w	fp, r7, r1
 802279e:	bfb8      	it	lt
 80227a0:	9308      	strlt	r3, [sp, #32]
 80227a2:	ea4f 136b 	mov.w	r3, fp, asr #5
 80227a6:	9304      	str	r3, [sp, #16]
 80227a8:	9b02      	ldr	r3, [sp, #8]
 80227aa:	4573      	cmp	r3, lr
 80227ac:	d133      	bne.n	8022816 <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 80227ae:	9b04      	ldr	r3, [sp, #16]
 80227b0:	eb03 4306 	add.w	r3, r3, r6, lsl #16
 80227b4:	454b      	cmp	r3, r9
 80227b6:	d045      	beq.n	8022844 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 80227b8:	8b62      	ldrh	r2, [r4, #26]
 80227ba:	8b23      	ldrh	r3, [r4, #24]
 80227bc:	4313      	orrs	r3, r2
 80227be:	d00c      	beq.n	80227da <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 80227c0:	f1b8 0f00 	cmp.w	r8, #0
 80227c4:	db09      	blt.n	80227da <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 80227c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80227c8:	4543      	cmp	r3, r8
 80227ca:	dd06      	ble.n	80227da <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 80227cc:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 80227d0:	429a      	cmp	r2, r3
 80227d2:	d313      	bcc.n	80227fc <_ZN8touchgfx7Outline10renderLineEiiii+0x460>
 80227d4:	2301      	movs	r3, #1
 80227d6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80227da:	9b04      	ldr	r3, [sp, #16]
 80227dc:	82e6      	strh	r6, [r4, #22]
 80227de:	82a3      	strh	r3, [r4, #20]
 80227e0:	2300      	movs	r3, #0
 80227e2:	8323      	strh	r3, [r4, #24]
 80227e4:	8363      	strh	r3, [r4, #26]
 80227e6:	e02d      	b.n	8022844 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 80227e8:	9a01      	ldr	r2, [sp, #4]
 80227ea:	fb0a f30e 	mul.w	r3, sl, lr
 80227ee:	4252      	negs	r2, r2
 80227f0:	9201      	str	r2, [sp, #4]
 80227f2:	f04f 32ff 	mov.w	r2, #4294967295
 80227f6:	920b      	str	r2, [sp, #44]	; 0x2c
 80227f8:	2200      	movs	r2, #0
 80227fa:	e7bc      	b.n	8022776 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 80227fc:	f104 0314 	add.w	r3, r4, #20
 8022800:	6922      	ldr	r2, [r4, #16]
 8022802:	cb03      	ldmia	r3!, {r0, r1}
 8022804:	6010      	str	r0, [r2, #0]
 8022806:	6051      	str	r1, [r2, #4]
 8022808:	6923      	ldr	r3, [r4, #16]
 802280a:	3308      	adds	r3, #8
 802280c:	6123      	str	r3, [r4, #16]
 802280e:	68a3      	ldr	r3, [r4, #8]
 8022810:	3301      	adds	r3, #1
 8022812:	60a3      	str	r3, [r4, #8]
 8022814:	e7e1      	b.n	80227da <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8022816:	f00b 031f 	and.w	r3, fp, #31
 802281a:	f001 011f 	and.w	r1, r1, #31
 802281e:	8b20      	ldrh	r0, [r4, #24]
 8022820:	9309      	str	r3, [sp, #36]	; 0x24
 8022822:	9b02      	ldr	r3, [sp, #8]
 8022824:	eba3 020e 	sub.w	r2, r3, lr
 8022828:	8b63      	ldrh	r3, [r4, #26]
 802282a:	9300      	str	r3, [sp, #0]
 802282c:	9b04      	ldr	r3, [sp, #16]
 802282e:	42ab      	cmp	r3, r5
 8022830:	f040 80ef 	bne.w	8022a12 <_ZN8touchgfx7Outline10renderLineEiiii+0x676>
 8022834:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022836:	4410      	add	r0, r2
 8022838:	4419      	add	r1, r3
 802283a:	9b00      	ldr	r3, [sp, #0]
 802283c:	8320      	strh	r0, [r4, #24]
 802283e:	fb02 3101 	mla	r1, r2, r1, r3
 8022842:	8361      	strh	r1, [r4, #26]
 8022844:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022846:	9904      	ldr	r1, [sp, #16]
 8022848:	4433      	add	r3, r6
 802284a:	9300      	str	r3, [sp, #0]
 802284c:	9a00      	ldr	r2, [sp, #0]
 802284e:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8022852:	eb01 4002 	add.w	r0, r1, r2, lsl #16
 8022856:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 802285a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802285e:	4288      	cmp	r0, r1
 8022860:	d018      	beq.n	8022894 <_ZN8touchgfx7Outline10renderLineEiiii+0x4f8>
 8022862:	8b60      	ldrh	r0, [r4, #26]
 8022864:	8b21      	ldrh	r1, [r4, #24]
 8022866:	ea50 0201 	orrs.w	r2, r0, r1
 802286a:	d00c      	beq.n	8022886 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 802286c:	2b00      	cmp	r3, #0
 802286e:	db0a      	blt.n	8022886 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8022870:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8022872:	4299      	cmp	r1, r3
 8022874:	dd07      	ble.n	8022886 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8022876:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802287a:	4299      	cmp	r1, r3
 802287c:	f0c0 818b 	bcc.w	8022b96 <_ZN8touchgfx7Outline10renderLineEiiii+0x7fa>
 8022880:	2301      	movs	r3, #1
 8022882:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8022886:	9b04      	ldr	r3, [sp, #16]
 8022888:	82a3      	strh	r3, [r4, #20]
 802288a:	9b00      	ldr	r3, [sp, #0]
 802288c:	82e3      	strh	r3, [r4, #22]
 802288e:	2300      	movs	r3, #0
 8022890:	8323      	strh	r3, [r4, #24]
 8022892:	8363      	strh	r3, [r4, #26]
 8022894:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022896:	9a00      	ldr	r2, [sp, #0]
 8022898:	4293      	cmp	r3, r2
 802289a:	f000 808d 	beq.w	80229b8 <_ZN8touchgfx7Outline10renderLineEiiii+0x61c>
 802289e:	ea4f 134a 	mov.w	r3, sl, lsl #5
 80228a2:	9901      	ldr	r1, [sp, #4]
 80228a4:	9801      	ldr	r0, [sp, #4]
 80228a6:	fb93 f1f1 	sdiv	r1, r3, r1
 80228aa:	fb00 3311 	mls	r3, r0, r1, r3
 80228ae:	9106      	str	r1, [sp, #24]
 80228b0:	2b00      	cmp	r3, #0
 80228b2:	9307      	str	r3, [sp, #28]
 80228b4:	da04      	bge.n	80228c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x524>
 80228b6:	1e4b      	subs	r3, r1, #1
 80228b8:	9306      	str	r3, [sp, #24]
 80228ba:	9b07      	ldr	r3, [sp, #28]
 80228bc:	4403      	add	r3, r0
 80228be:	9307      	str	r3, [sp, #28]
 80228c0:	9b08      	ldr	r3, [sp, #32]
 80228c2:	f04f 0c00 	mov.w	ip, #0
 80228c6:	9901      	ldr	r1, [sp, #4]
 80228c8:	1a5b      	subs	r3, r3, r1
 80228ca:	4659      	mov	r1, fp
 80228cc:	9308      	str	r3, [sp, #32]
 80228ce:	9b02      	ldr	r3, [sp, #8]
 80228d0:	f1c3 0320 	rsb	r3, r3, #32
 80228d4:	930a      	str	r3, [sp, #40]	; 0x28
 80228d6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80228d8:	9b02      	ldr	r3, [sp, #8]
 80228da:	1a1b      	subs	r3, r3, r0
 80228dc:	9309      	str	r3, [sp, #36]	; 0x24
 80228de:	f9b4 e016 	ldrsh.w	lr, [r4, #22]
 80228e2:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 80228e6:	e9dd 0307 	ldrd	r0, r3, [sp, #28]
 80228ea:	eb08 480e 	add.w	r8, r8, lr, lsl #16
 80228ee:	181b      	adds	r3, r3, r0
 80228f0:	bf58      	it	pl
 80228f2:	9801      	ldrpl	r0, [sp, #4]
 80228f4:	9308      	str	r3, [sp, #32]
 80228f6:	bf54      	ite	pl
 80228f8:	1a1b      	subpl	r3, r3, r0
 80228fa:	9d06      	ldrmi	r5, [sp, #24]
 80228fc:	9802      	ldr	r0, [sp, #8]
 80228fe:	bf5e      	ittt	pl
 8022900:	9308      	strpl	r3, [sp, #32]
 8022902:	9b06      	ldrpl	r3, [sp, #24]
 8022904:	1c5d      	addpl	r5, r3, #1
 8022906:	44ab      	add	fp, r5
 8022908:	ea4f 136b 	mov.w	r3, fp, asr #5
 802290c:	9304      	str	r3, [sp, #16]
 802290e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022910:	4283      	cmp	r3, r0
 8022912:	f040 815a 	bne.w	8022bca <_ZN8touchgfx7Outline10renderLineEiiii+0x82e>
 8022916:	9b04      	ldr	r3, [sp, #16]
 8022918:	9a00      	ldr	r2, [sp, #0]
 802291a:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 802291e:	4543      	cmp	r3, r8
 8022920:	d01a      	beq.n	8022958 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8022922:	8b61      	ldrh	r1, [r4, #26]
 8022924:	8b23      	ldrh	r3, [r4, #24]
 8022926:	430b      	orrs	r3, r1
 8022928:	d00e      	beq.n	8022948 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 802292a:	f1be 0f00 	cmp.w	lr, #0
 802292e:	db0b      	blt.n	8022948 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8022930:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8022932:	4573      	cmp	r3, lr
 8022934:	dd08      	ble.n	8022948 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8022936:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802293a:	4299      	cmp	r1, r3
 802293c:	f0c0 8138 	bcc.w	8022bb0 <_ZN8touchgfx7Outline10renderLineEiiii+0x814>
 8022940:	f04f 0301 	mov.w	r3, #1
 8022944:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8022948:	9b04      	ldr	r3, [sp, #16]
 802294a:	f8a4 c018 	strh.w	ip, [r4, #24]
 802294e:	82a3      	strh	r3, [r4, #20]
 8022950:	9b00      	ldr	r3, [sp, #0]
 8022952:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8022956:	82e3      	strh	r3, [r4, #22]
 8022958:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802295a:	9a00      	ldr	r2, [sp, #0]
 802295c:	441a      	add	r2, r3
 802295e:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8022962:	9200      	str	r2, [sp, #0]
 8022964:	9900      	ldr	r1, [sp, #0]
 8022966:	9a04      	ldr	r2, [sp, #16]
 8022968:	eb02 4001 	add.w	r0, r2, r1, lsl #16
 802296c:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8022970:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8022974:	4288      	cmp	r0, r1
 8022976:	d01a      	beq.n	80229ae <_ZN8touchgfx7Outline10renderLineEiiii+0x612>
 8022978:	8b60      	ldrh	r0, [r4, #26]
 802297a:	8b21      	ldrh	r1, [r4, #24]
 802297c:	ea50 0201 	orrs.w	r2, r0, r1
 8022980:	d00d      	beq.n	802299e <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8022982:	2b00      	cmp	r3, #0
 8022984:	db0b      	blt.n	802299e <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8022986:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8022988:	4299      	cmp	r1, r3
 802298a:	dd08      	ble.n	802299e <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 802298c:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8022990:	4299      	cmp	r1, r3
 8022992:	f0c0 81f9 	bcc.w	8022d88 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ec>
 8022996:	f04f 0301 	mov.w	r3, #1
 802299a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802299e:	9b04      	ldr	r3, [sp, #16]
 80229a0:	f8a4 c018 	strh.w	ip, [r4, #24]
 80229a4:	82a3      	strh	r3, [r4, #20]
 80229a6:	9b00      	ldr	r3, [sp, #0]
 80229a8:	f8a4 c01a 	strh.w	ip, [r4, #26]
 80229ac:	82e3      	strh	r3, [r4, #22]
 80229ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80229b0:	4659      	mov	r1, fp
 80229b2:	9a00      	ldr	r2, [sp, #0]
 80229b4:	4293      	cmp	r3, r2
 80229b6:	d192      	bne.n	80228de <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 80229b8:	9b02      	ldr	r3, [sp, #8]
 80229ba:	f1c3 0c20 	rsb	ip, r3, #32
 80229be:	9b05      	ldr	r3, [sp, #20]
 80229c0:	ea4f 1e63 	mov.w	lr, r3, asr #5
 80229c4:	9b03      	ldr	r3, [sp, #12]
 80229c6:	459c      	cmp	ip, r3
 80229c8:	f040 81f8 	bne.w	8022dbc <_ZN8touchgfx7Outline10renderLineEiiii+0xa20>
 80229cc:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80229d0:	9a00      	ldr	r2, [sp, #0]
 80229d2:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 80229d6:	eb0e 4002 	add.w	r0, lr, r2, lsl #16
 80229da:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80229de:	4288      	cmp	r0, r1
 80229e0:	f43f ad54 	beq.w	802248c <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 80229e4:	8b60      	ldrh	r0, [r4, #26]
 80229e6:	8b21      	ldrh	r1, [r4, #24]
 80229e8:	ea50 0201 	orrs.w	r2, r0, r1
 80229ec:	d00c      	beq.n	8022a08 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 80229ee:	2b00      	cmp	r3, #0
 80229f0:	db0a      	blt.n	8022a08 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 80229f2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80229f4:	4299      	cmp	r1, r3
 80229f6:	dd07      	ble.n	8022a08 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 80229f8:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80229fc:	4299      	cmp	r1, r3
 80229fe:	f0c0 81d0 	bcc.w	8022da2 <_ZN8touchgfx7Outline10renderLineEiiii+0xa06>
 8022a02:	2301      	movs	r3, #1
 8022a04:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8022a08:	9b00      	ldr	r3, [sp, #0]
 8022a0a:	f8a4 e014 	strh.w	lr, [r4, #20]
 8022a0e:	82e3      	strh	r3, [r4, #22]
 8022a10:	e517      	b.n	8022442 <_ZN8touchgfx7Outline10renderLineEiiii+0xa6>
 8022a12:	2f00      	cmp	r7, #0
 8022a14:	f2c0 8097 	blt.w	8022b46 <_ZN8touchgfx7Outline10renderLineEiiii+0x7aa>
 8022a18:	2301      	movs	r3, #1
 8022a1a:	f1c1 0c20 	rsb	ip, r1, #32
 8022a1e:	9307      	str	r3, [sp, #28]
 8022a20:	2320      	movs	r3, #32
 8022a22:	fb02 f20c 	mul.w	r2, r2, ip
 8022a26:	9306      	str	r3, [sp, #24]
 8022a28:	9b06      	ldr	r3, [sp, #24]
 8022a2a:	fb92 fcf7 	sdiv	ip, r2, r7
 8022a2e:	fb07 221c 	mls	r2, r7, ip, r2
 8022a32:	4419      	add	r1, r3
 8022a34:	9b00      	ldr	r3, [sp, #0]
 8022a36:	2a00      	cmp	r2, #0
 8022a38:	bfbc      	itt	lt
 8022a3a:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8022a3e:	19d2      	addlt	r2, r2, r7
 8022a40:	fb0c 3101 	mla	r1, ip, r1, r3
 8022a44:	9b07      	ldr	r3, [sp, #28]
 8022a46:	4460      	add	r0, ip
 8022a48:	441d      	add	r5, r3
 8022a4a:	0433      	lsls	r3, r6, #16
 8022a4c:	b200      	sxth	r0, r0
 8022a4e:	930a      	str	r3, [sp, #40]	; 0x28
 8022a50:	18eb      	adds	r3, r5, r3
 8022a52:	b209      	sxth	r1, r1
 8022a54:	8320      	strh	r0, [r4, #24]
 8022a56:	454b      	cmp	r3, r9
 8022a58:	8361      	strh	r1, [r4, #26]
 8022a5a:	d014      	beq.n	8022a86 <_ZN8touchgfx7Outline10renderLineEiiii+0x6ea>
 8022a5c:	ea50 0301 	orrs.w	r3, r0, r1
 8022a60:	d00c      	beq.n	8022a7c <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8022a62:	f1b8 0f00 	cmp.w	r8, #0
 8022a66:	db09      	blt.n	8022a7c <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8022a68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8022a6a:	4543      	cmp	r3, r8
 8022a6c:	dd06      	ble.n	8022a7c <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8022a6e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8022a72:	4299      	cmp	r1, r3
 8022a74:	d36e      	bcc.n	8022b54 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 8022a76:	2301      	movs	r3, #1
 8022a78:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8022a7c:	2300      	movs	r3, #0
 8022a7e:	82a5      	strh	r5, [r4, #20]
 8022a80:	82e6      	strh	r6, [r4, #22]
 8022a82:	8323      	strh	r3, [r4, #24]
 8022a84:	8363      	strh	r3, [r4, #26]
 8022a86:	9904      	ldr	r1, [sp, #16]
 8022a88:	eb0e 030c 	add.w	r3, lr, ip
 8022a8c:	42a9      	cmp	r1, r5
 8022a8e:	d04d      	beq.n	8022b2c <_ZN8touchgfx7Outline10renderLineEiiii+0x790>
 8022a90:	9902      	ldr	r1, [sp, #8]
 8022a92:	1bd2      	subs	r2, r2, r7
 8022a94:	1ac9      	subs	r1, r1, r3
 8022a96:	9200      	str	r2, [sp, #0]
 8022a98:	448c      	add	ip, r1
 8022a9a:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 8022a9e:	fb9c fef7 	sdiv	lr, ip, r7
 8022aa2:	fb07 cc1e 	mls	ip, r7, lr, ip
 8022aa6:	f1bc 0f00 	cmp.w	ip, #0
 8022aaa:	bfbc      	itt	lt
 8022aac:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8022ab0:	44bc      	addlt	ip, r7
 8022ab2:	f10e 0101 	add.w	r1, lr, #1
 8022ab6:	910d      	str	r1, [sp, #52]	; 0x34
 8022ab8:	9a00      	ldr	r2, [sp, #0]
 8022aba:	8b20      	ldrh	r0, [r4, #24]
 8022abc:	eb12 020c 	adds.w	r2, r2, ip
 8022ac0:	8b61      	ldrh	r1, [r4, #26]
 8022ac2:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8022ac6:	9200      	str	r2, [sp, #0]
 8022ac8:	bf5b      	ittet	pl
 8022aca:	1bd2      	subpl	r2, r2, r7
 8022acc:	f8dd 8034 	ldrpl.w	r8, [sp, #52]	; 0x34
 8022ad0:	46f0      	movmi	r8, lr
 8022ad2:	9200      	strpl	r2, [sp, #0]
 8022ad4:	9a07      	ldr	r2, [sp, #28]
 8022ad6:	4440      	add	r0, r8
 8022ad8:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 8022adc:	4443      	add	r3, r8
 8022ade:	4415      	add	r5, r2
 8022ae0:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8022ae4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022ae6:	b200      	sxth	r0, r0
 8022ae8:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8022aec:	442a      	add	r2, r5
 8022aee:	b209      	sxth	r1, r1
 8022af0:	8320      	strh	r0, [r4, #24]
 8022af2:	454a      	cmp	r2, r9
 8022af4:	8361      	strh	r1, [r4, #26]
 8022af6:	d016      	beq.n	8022b26 <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 8022af8:	ea50 0201 	orrs.w	r2, r0, r1
 8022afc:	d00d      	beq.n	8022b1a <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8022afe:	f1b8 0f00 	cmp.w	r8, #0
 8022b02:	db0a      	blt.n	8022b1a <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8022b04:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8022b06:	4541      	cmp	r1, r8
 8022b08:	dd07      	ble.n	8022b1a <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8022b0a:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8022b0e:	4288      	cmp	r0, r1
 8022b10:	d330      	bcc.n	8022b74 <_ZN8touchgfx7Outline10renderLineEiiii+0x7d8>
 8022b12:	f04f 0201 	mov.w	r2, #1
 8022b16:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8022b1a:	f04f 0200 	mov.w	r2, #0
 8022b1e:	82a5      	strh	r5, [r4, #20]
 8022b20:	82e6      	strh	r6, [r4, #22]
 8022b22:	8322      	strh	r2, [r4, #24]
 8022b24:	8362      	strh	r2, [r4, #26]
 8022b26:	9904      	ldr	r1, [sp, #16]
 8022b28:	42a9      	cmp	r1, r5
 8022b2a:	d1c5      	bne.n	8022ab8 <_ZN8touchgfx7Outline10renderLineEiiii+0x71c>
 8022b2c:	9a02      	ldr	r2, [sp, #8]
 8022b2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022b30:	1ad3      	subs	r3, r2, r3
 8022b32:	8b22      	ldrh	r2, [r4, #24]
 8022b34:	3120      	adds	r1, #32
 8022b36:	441a      	add	r2, r3
 8022b38:	8322      	strh	r2, [r4, #24]
 8022b3a:	9a06      	ldr	r2, [sp, #24]
 8022b3c:	1a89      	subs	r1, r1, r2
 8022b3e:	8b62      	ldrh	r2, [r4, #26]
 8022b40:	fb03 2301 	mla	r3, r3, r1, r2
 8022b44:	e64e      	b.n	80227e4 <_ZN8touchgfx7Outline10renderLineEiiii+0x448>
 8022b46:	f04f 33ff 	mov.w	r3, #4294967295
 8022b4a:	434a      	muls	r2, r1
 8022b4c:	427f      	negs	r7, r7
 8022b4e:	9307      	str	r3, [sp, #28]
 8022b50:	2300      	movs	r3, #0
 8022b52:	e768      	b.n	8022a26 <_ZN8touchgfx7Outline10renderLineEiiii+0x68a>
 8022b54:	f104 0314 	add.w	r3, r4, #20
 8022b58:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8022b5c:	cb03      	ldmia	r3!, {r0, r1}
 8022b5e:	f8c8 0000 	str.w	r0, [r8]
 8022b62:	f8c8 1004 	str.w	r1, [r8, #4]
 8022b66:	6923      	ldr	r3, [r4, #16]
 8022b68:	3308      	adds	r3, #8
 8022b6a:	6123      	str	r3, [r4, #16]
 8022b6c:	68a3      	ldr	r3, [r4, #8]
 8022b6e:	3301      	adds	r3, #1
 8022b70:	60a3      	str	r3, [r4, #8]
 8022b72:	e783      	b.n	8022a7c <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8022b74:	f104 0814 	add.w	r8, r4, #20
 8022b78:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8022b7c:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8022b80:	f8c9 0000 	str.w	r0, [r9]
 8022b84:	f8c9 1004 	str.w	r1, [r9, #4]
 8022b88:	6921      	ldr	r1, [r4, #16]
 8022b8a:	3108      	adds	r1, #8
 8022b8c:	6121      	str	r1, [r4, #16]
 8022b8e:	68a1      	ldr	r1, [r4, #8]
 8022b90:	3101      	adds	r1, #1
 8022b92:	60a1      	str	r1, [r4, #8]
 8022b94:	e7c1      	b.n	8022b1a <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8022b96:	f104 0314 	add.w	r3, r4, #20
 8022b9a:	6925      	ldr	r5, [r4, #16]
 8022b9c:	cb03      	ldmia	r3!, {r0, r1}
 8022b9e:	6028      	str	r0, [r5, #0]
 8022ba0:	6069      	str	r1, [r5, #4]
 8022ba2:	6923      	ldr	r3, [r4, #16]
 8022ba4:	3308      	adds	r3, #8
 8022ba6:	6123      	str	r3, [r4, #16]
 8022ba8:	68a3      	ldr	r3, [r4, #8]
 8022baa:	3301      	adds	r3, #1
 8022bac:	60a3      	str	r3, [r4, #8]
 8022bae:	e66a      	b.n	8022886 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8022bb0:	f104 0314 	add.w	r3, r4, #20
 8022bb4:	6925      	ldr	r5, [r4, #16]
 8022bb6:	cb03      	ldmia	r3!, {r0, r1}
 8022bb8:	6028      	str	r0, [r5, #0]
 8022bba:	6069      	str	r1, [r5, #4]
 8022bbc:	6923      	ldr	r3, [r4, #16]
 8022bbe:	3308      	adds	r3, #8
 8022bc0:	6123      	str	r3, [r4, #16]
 8022bc2:	68a3      	ldr	r3, [r4, #8]
 8022bc4:	3301      	adds	r3, #1
 8022bc6:	60a3      	str	r3, [r4, #8]
 8022bc8:	e6be      	b.n	8022948 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8022bca:	f00b 031f 	and.w	r3, fp, #31
 8022bce:	114f      	asrs	r7, r1, #5
 8022bd0:	8b20      	ldrh	r0, [r4, #24]
 8022bd2:	f001 011f 	and.w	r1, r1, #31
 8022bd6:	930f      	str	r3, [sp, #60]	; 0x3c
 8022bd8:	9b04      	ldr	r3, [sp, #16]
 8022bda:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 8022bde:	429f      	cmp	r7, r3
 8022be0:	d10a      	bne.n	8022bf8 <_ZN8touchgfx7Outline10renderLineEiiii+0x85c>
 8022be2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022be4:	4418      	add	r0, r3
 8022be6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022be8:	4419      	add	r1, r3
 8022bea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022bec:	8320      	strh	r0, [r4, #24]
 8022bee:	fb03 9901 	mla	r9, r3, r1, r9
 8022bf2:	f8a4 901a 	strh.w	r9, [r4, #26]
 8022bf6:	e6af      	b.n	8022958 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8022bf8:	2d00      	cmp	r5, #0
 8022bfa:	f2c0 809b 	blt.w	8022d34 <_ZN8touchgfx7Outline10renderLineEiiii+0x998>
 8022bfe:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8022c00:	f1c1 0320 	rsb	r3, r1, #32
 8022c04:	4373      	muls	r3, r6
 8022c06:	2601      	movs	r6, #1
 8022c08:	960e      	str	r6, [sp, #56]	; 0x38
 8022c0a:	2620      	movs	r6, #32
 8022c0c:	960d      	str	r6, [sp, #52]	; 0x34
 8022c0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022c10:	fb93 f6f5 	sdiv	r6, r3, r5
 8022c14:	4411      	add	r1, r2
 8022c16:	fb05 3316 	mls	r3, r5, r6, r3
 8022c1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022c1c:	2b00      	cmp	r3, #0
 8022c1e:	4417      	add	r7, r2
 8022c20:	9a00      	ldr	r2, [sp, #0]
 8022c22:	bfbc      	itt	lt
 8022c24:	f106 36ff 	addlt.w	r6, r6, #4294967295
 8022c28:	195b      	addlt	r3, r3, r5
 8022c2a:	0412      	lsls	r2, r2, #16
 8022c2c:	fb06 9101 	mla	r1, r6, r1, r9
 8022c30:	4430      	add	r0, r6
 8022c32:	eb07 0902 	add.w	r9, r7, r2
 8022c36:	9210      	str	r2, [sp, #64]	; 0x40
 8022c38:	b200      	sxth	r0, r0
 8022c3a:	b209      	sxth	r1, r1
 8022c3c:	45c1      	cmp	r9, r8
 8022c3e:	8320      	strh	r0, [r4, #24]
 8022c40:	8361      	strh	r1, [r4, #26]
 8022c42:	d017      	beq.n	8022c74 <_ZN8touchgfx7Outline10renderLineEiiii+0x8d8>
 8022c44:	ea50 0201 	orrs.w	r2, r0, r1
 8022c48:	d00d      	beq.n	8022c66 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8022c4a:	f1be 0f00 	cmp.w	lr, #0
 8022c4e:	db0a      	blt.n	8022c66 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8022c50:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8022c52:	4571      	cmp	r1, lr
 8022c54:	dd07      	ble.n	8022c66 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8022c56:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8022c5a:	4288      	cmp	r0, r1
 8022c5c:	d372      	bcc.n	8022d44 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a8>
 8022c5e:	f04f 0201 	mov.w	r2, #1
 8022c62:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8022c66:	9a00      	ldr	r2, [sp, #0]
 8022c68:	82a7      	strh	r7, [r4, #20]
 8022c6a:	82e2      	strh	r2, [r4, #22]
 8022c6c:	f8a4 c018 	strh.w	ip, [r4, #24]
 8022c70:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8022c74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022c76:	eb02 0e06 	add.w	lr, r2, r6
 8022c7a:	9a04      	ldr	r2, [sp, #16]
 8022c7c:	42ba      	cmp	r2, r7
 8022c7e:	d049      	beq.n	8022d14 <_ZN8touchgfx7Outline10renderLineEiiii+0x978>
 8022c80:	9a02      	ldr	r2, [sp, #8]
 8022c82:	1b5b      	subs	r3, r3, r5
 8022c84:	eba2 010e 	sub.w	r1, r2, lr
 8022c88:	440e      	add	r6, r1
 8022c8a:	0176      	lsls	r6, r6, #5
 8022c8c:	fb96 f8f5 	sdiv	r8, r6, r5
 8022c90:	fb05 6618 	mls	r6, r5, r8, r6
 8022c94:	2e00      	cmp	r6, #0
 8022c96:	bfbc      	itt	lt
 8022c98:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8022c9c:	1976      	addlt	r6, r6, r5
 8022c9e:	f108 0201 	add.w	r2, r8, #1
 8022ca2:	9211      	str	r2, [sp, #68]	; 0x44
 8022ca4:	199b      	adds	r3, r3, r6
 8022ca6:	8b20      	ldrh	r0, [r4, #24]
 8022ca8:	8b61      	ldrh	r1, [r4, #26]
 8022caa:	bf54      	ite	pl
 8022cac:	f8dd 9044 	ldrpl.w	r9, [sp, #68]	; 0x44
 8022cb0:	46c1      	movmi	r9, r8
 8022cb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022cb4:	bf58      	it	pl
 8022cb6:	1b5b      	subpl	r3, r3, r5
 8022cb8:	4448      	add	r0, r9
 8022cba:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 8022cbe:	4417      	add	r7, r2
 8022cc0:	44ce      	add	lr, r9
 8022cc2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022cc4:	b200      	sxth	r0, r0
 8022cc6:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 8022cca:	b209      	sxth	r1, r1
 8022ccc:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 8022cd0:	443a      	add	r2, r7
 8022cd2:	8320      	strh	r0, [r4, #24]
 8022cd4:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 8022cd8:	8361      	strh	r1, [r4, #26]
 8022cda:	4552      	cmp	r2, sl
 8022cdc:	d017      	beq.n	8022d0e <_ZN8touchgfx7Outline10renderLineEiiii+0x972>
 8022cde:	ea50 0201 	orrs.w	r2, r0, r1
 8022ce2:	d00d      	beq.n	8022d00 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8022ce4:	f1b9 0f00 	cmp.w	r9, #0
 8022ce8:	db0a      	blt.n	8022d00 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8022cea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8022cec:	4549      	cmp	r1, r9
 8022cee:	dd07      	ble.n	8022d00 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8022cf0:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8022cf4:	4288      	cmp	r0, r1
 8022cf6:	d336      	bcc.n	8022d66 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ca>
 8022cf8:	f04f 0201 	mov.w	r2, #1
 8022cfc:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8022d00:	9a00      	ldr	r2, [sp, #0]
 8022d02:	82a7      	strh	r7, [r4, #20]
 8022d04:	82e2      	strh	r2, [r4, #22]
 8022d06:	f8a4 c018 	strh.w	ip, [r4, #24]
 8022d0a:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8022d0e:	9a04      	ldr	r2, [sp, #16]
 8022d10:	42ba      	cmp	r2, r7
 8022d12:	d1c7      	bne.n	8022ca4 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 8022d14:	9b02      	ldr	r3, [sp, #8]
 8022d16:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8022d18:	eba3 0e0e 	sub.w	lr, r3, lr
 8022d1c:	8b23      	ldrh	r3, [r4, #24]
 8022d1e:	3120      	adds	r1, #32
 8022d20:	4473      	add	r3, lr
 8022d22:	8323      	strh	r3, [r4, #24]
 8022d24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022d26:	1ac9      	subs	r1, r1, r3
 8022d28:	8b63      	ldrh	r3, [r4, #26]
 8022d2a:	fb0e 3e01 	mla	lr, lr, r1, r3
 8022d2e:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8022d32:	e611      	b.n	8022958 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8022d34:	f04f 36ff 	mov.w	r6, #4294967295
 8022d38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022d3a:	426d      	negs	r5, r5
 8022d3c:	960e      	str	r6, [sp, #56]	; 0x38
 8022d3e:	2600      	movs	r6, #0
 8022d40:	434b      	muls	r3, r1
 8022d42:	e763      	b.n	8022c0c <_ZN8touchgfx7Outline10renderLineEiiii+0x870>
 8022d44:	f104 0e14 	add.w	lr, r4, #20
 8022d48:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8022d4c:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 8022d50:	f8c8 0000 	str.w	r0, [r8]
 8022d54:	f8c8 1004 	str.w	r1, [r8, #4]
 8022d58:	6921      	ldr	r1, [r4, #16]
 8022d5a:	3108      	adds	r1, #8
 8022d5c:	6121      	str	r1, [r4, #16]
 8022d5e:	68a1      	ldr	r1, [r4, #8]
 8022d60:	3101      	adds	r1, #1
 8022d62:	60a1      	str	r1, [r4, #8]
 8022d64:	e77f      	b.n	8022c66 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8022d66:	f104 0914 	add.w	r9, r4, #20
 8022d6a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8022d6e:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 8022d72:	f8ca 0000 	str.w	r0, [sl]
 8022d76:	f8ca 1004 	str.w	r1, [sl, #4]
 8022d7a:	6921      	ldr	r1, [r4, #16]
 8022d7c:	3108      	adds	r1, #8
 8022d7e:	6121      	str	r1, [r4, #16]
 8022d80:	68a1      	ldr	r1, [r4, #8]
 8022d82:	3101      	adds	r1, #1
 8022d84:	60a1      	str	r1, [r4, #8]
 8022d86:	e7bb      	b.n	8022d00 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8022d88:	f104 0314 	add.w	r3, r4, #20
 8022d8c:	6925      	ldr	r5, [r4, #16]
 8022d8e:	cb03      	ldmia	r3!, {r0, r1}
 8022d90:	6028      	str	r0, [r5, #0]
 8022d92:	6069      	str	r1, [r5, #4]
 8022d94:	6923      	ldr	r3, [r4, #16]
 8022d96:	3308      	adds	r3, #8
 8022d98:	6123      	str	r3, [r4, #16]
 8022d9a:	68a3      	ldr	r3, [r4, #8]
 8022d9c:	3301      	adds	r3, #1
 8022d9e:	60a3      	str	r3, [r4, #8]
 8022da0:	e5fd      	b.n	802299e <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8022da2:	f104 0314 	add.w	r3, r4, #20
 8022da6:	6925      	ldr	r5, [r4, #16]
 8022da8:	cb03      	ldmia	r3!, {r0, r1}
 8022daa:	6028      	str	r0, [r5, #0]
 8022dac:	6069      	str	r1, [r5, #4]
 8022dae:	6923      	ldr	r3, [r4, #16]
 8022db0:	3308      	adds	r3, #8
 8022db2:	6123      	str	r3, [r4, #16]
 8022db4:	68a3      	ldr	r3, [r4, #8]
 8022db6:	3301      	adds	r3, #1
 8022db8:	60a3      	str	r3, [r4, #8]
 8022dba:	e625      	b.n	8022a08 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8022dbc:	9b05      	ldr	r3, [sp, #20]
 8022dbe:	ea4f 176b 	mov.w	r7, fp, asr #5
 8022dc2:	f00b 081f 	and.w	r8, fp, #31
 8022dc6:	8b20      	ldrh	r0, [r4, #24]
 8022dc8:	f003 031f 	and.w	r3, r3, #31
 8022dcc:	4577      	cmp	r7, lr
 8022dce:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 8022dd2:	9302      	str	r3, [sp, #8]
 8022dd4:	9b03      	ldr	r3, [sp, #12]
 8022dd6:	eba3 050c 	sub.w	r5, r3, ip
 8022dda:	d108      	bne.n	8022dee <_ZN8touchgfx7Outline10renderLineEiiii+0xa52>
 8022ddc:	9b02      	ldr	r3, [sp, #8]
 8022dde:	4428      	add	r0, r5
 8022de0:	4498      	add	r8, r3
 8022de2:	8320      	strh	r0, [r4, #24]
 8022de4:	fb05 9508 	mla	r5, r5, r8, r9
 8022de8:	8365      	strh	r5, [r4, #26]
 8022dea:	f7ff bb4f 	b.w	802248c <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8022dee:	9b05      	ldr	r3, [sp, #20]
 8022df0:	ebb3 030b 	subs.w	r3, r3, fp
 8022df4:	f100 809c 	bmi.w	8022f30 <_ZN8touchgfx7Outline10renderLineEiiii+0xb94>
 8022df8:	f1c8 0120 	rsb	r1, r8, #32
 8022dfc:	2201      	movs	r2, #1
 8022dfe:	f04f 0b20 	mov.w	fp, #32
 8022e02:	434d      	muls	r5, r1
 8022e04:	9201      	str	r2, [sp, #4]
 8022e06:	9a01      	ldr	r2, [sp, #4]
 8022e08:	44d8      	add	r8, fp
 8022e0a:	fb95 f6f3 	sdiv	r6, r5, r3
 8022e0e:	fb03 5516 	mls	r5, r3, r6, r5
 8022e12:	4417      	add	r7, r2
 8022e14:	9a00      	ldr	r2, [sp, #0]
 8022e16:	2d00      	cmp	r5, #0
 8022e18:	ea4f 4202 	mov.w	r2, r2, lsl #16
 8022e1c:	bfbc      	itt	lt
 8022e1e:	f106 36ff 	addlt.w	r6, r6, #4294967295
 8022e22:	18ed      	addlt	r5, r5, r3
 8022e24:	eb07 0a02 	add.w	sl, r7, r2
 8022e28:	9204      	str	r2, [sp, #16]
 8022e2a:	fb06 9808 	mla	r8, r6, r8, r9
 8022e2e:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8022e32:	4430      	add	r0, r6
 8022e34:	fa0f f188 	sxth.w	r1, r8
 8022e38:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8022e3c:	b200      	sxth	r0, r0
 8022e3e:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8022e42:	8361      	strh	r1, [r4, #26]
 8022e44:	8320      	strh	r0, [r4, #24]
 8022e46:	45ca      	cmp	sl, r9
 8022e48:	d015      	beq.n	8022e76 <_ZN8touchgfx7Outline10renderLineEiiii+0xada>
 8022e4a:	ea50 0201 	orrs.w	r2, r0, r1
 8022e4e:	d00c      	beq.n	8022e6a <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8022e50:	f1b8 0f00 	cmp.w	r8, #0
 8022e54:	db09      	blt.n	8022e6a <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8022e56:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8022e58:	4541      	cmp	r1, r8
 8022e5a:	dd06      	ble.n	8022e6a <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8022e5c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8022e60:	4288      	cmp	r0, r1
 8022e62:	d36e      	bcc.n	8022f42 <_ZN8touchgfx7Outline10renderLineEiiii+0xba6>
 8022e64:	2101      	movs	r1, #1
 8022e66:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8022e6a:	2100      	movs	r1, #0
 8022e6c:	9a00      	ldr	r2, [sp, #0]
 8022e6e:	82a7      	strh	r7, [r4, #20]
 8022e70:	82e2      	strh	r2, [r4, #22]
 8022e72:	8321      	strh	r1, [r4, #24]
 8022e74:	8361      	strh	r1, [r4, #26]
 8022e76:	45be      	cmp	lr, r7
 8022e78:	44b4      	add	ip, r6
 8022e7a:	d048      	beq.n	8022f0e <_ZN8touchgfx7Outline10renderLineEiiii+0xb72>
 8022e7c:	9a03      	ldr	r2, [sp, #12]
 8022e7e:	1aed      	subs	r5, r5, r3
 8022e80:	eba2 010c 	sub.w	r1, r2, ip
 8022e84:	440e      	add	r6, r1
 8022e86:	0176      	lsls	r6, r6, #5
 8022e88:	fb96 f8f3 	sdiv	r8, r6, r3
 8022e8c:	fb03 6618 	mls	r6, r3, r8, r6
 8022e90:	2e00      	cmp	r6, #0
 8022e92:	bfbc      	itt	lt
 8022e94:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8022e98:	18f6      	addlt	r6, r6, r3
 8022e9a:	f108 0201 	add.w	r2, r8, #1
 8022e9e:	9205      	str	r2, [sp, #20]
 8022ea0:	19ad      	adds	r5, r5, r6
 8022ea2:	8b20      	ldrh	r0, [r4, #24]
 8022ea4:	8b61      	ldrh	r1, [r4, #26]
 8022ea6:	bf54      	ite	pl
 8022ea8:	f8dd 9014 	ldrpl.w	r9, [sp, #20]
 8022eac:	46c1      	movmi	r9, r8
 8022eae:	9a01      	ldr	r2, [sp, #4]
 8022eb0:	bf58      	it	pl
 8022eb2:	1aed      	subpl	r5, r5, r3
 8022eb4:	4448      	add	r0, r9
 8022eb6:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 8022eba:	4417      	add	r7, r2
 8022ebc:	44cc      	add	ip, r9
 8022ebe:	9a04      	ldr	r2, [sp, #16]
 8022ec0:	b200      	sxth	r0, r0
 8022ec2:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 8022ec6:	b209      	sxth	r1, r1
 8022ec8:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 8022ecc:	443a      	add	r2, r7
 8022ece:	8320      	strh	r0, [r4, #24]
 8022ed0:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 8022ed4:	8361      	strh	r1, [r4, #26]
 8022ed6:	4552      	cmp	r2, sl
 8022ed8:	d017      	beq.n	8022f0a <_ZN8touchgfx7Outline10renderLineEiiii+0xb6e>
 8022eda:	ea50 0201 	orrs.w	r2, r0, r1
 8022ede:	d00d      	beq.n	8022efc <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 8022ee0:	f1b9 0f00 	cmp.w	r9, #0
 8022ee4:	db0a      	blt.n	8022efc <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 8022ee6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8022ee8:	4549      	cmp	r1, r9
 8022eea:	dd07      	ble.n	8022efc <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 8022eec:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8022ef0:	4288      	cmp	r0, r1
 8022ef2:	d337      	bcc.n	8022f64 <_ZN8touchgfx7Outline10renderLineEiiii+0xbc8>
 8022ef4:	f04f 0201 	mov.w	r2, #1
 8022ef8:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8022efc:	9a00      	ldr	r2, [sp, #0]
 8022efe:	82a7      	strh	r7, [r4, #20]
 8022f00:	82e2      	strh	r2, [r4, #22]
 8022f02:	f04f 0200 	mov.w	r2, #0
 8022f06:	8322      	strh	r2, [r4, #24]
 8022f08:	8362      	strh	r2, [r4, #26]
 8022f0a:	45be      	cmp	lr, r7
 8022f0c:	d1c8      	bne.n	8022ea0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb04>
 8022f0e:	9b03      	ldr	r3, [sp, #12]
 8022f10:	8b62      	ldrh	r2, [r4, #26]
 8022f12:	eba3 0c0c 	sub.w	ip, r3, ip
 8022f16:	8b23      	ldrh	r3, [r4, #24]
 8022f18:	4463      	add	r3, ip
 8022f1a:	8323      	strh	r3, [r4, #24]
 8022f1c:	9b02      	ldr	r3, [sp, #8]
 8022f1e:	3320      	adds	r3, #32
 8022f20:	eba3 030b 	sub.w	r3, r3, fp
 8022f24:	fb0c 2c03 	mla	ip, ip, r3, r2
 8022f28:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8022f2c:	f7ff baae 	b.w	802248c <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8022f30:	f04f 32ff 	mov.w	r2, #4294967295
 8022f34:	fb05 f508 	mul.w	r5, r5, r8
 8022f38:	425b      	negs	r3, r3
 8022f3a:	f04f 0b00 	mov.w	fp, #0
 8022f3e:	9201      	str	r2, [sp, #4]
 8022f40:	e761      	b.n	8022e06 <_ZN8touchgfx7Outline10renderLineEiiii+0xa6a>
 8022f42:	f104 0814 	add.w	r8, r4, #20
 8022f46:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8022f4a:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8022f4e:	f8c9 0000 	str.w	r0, [r9]
 8022f52:	f8c9 1004 	str.w	r1, [r9, #4]
 8022f56:	6921      	ldr	r1, [r4, #16]
 8022f58:	3108      	adds	r1, #8
 8022f5a:	6121      	str	r1, [r4, #16]
 8022f5c:	68a1      	ldr	r1, [r4, #8]
 8022f5e:	3101      	adds	r1, #1
 8022f60:	60a1      	str	r1, [r4, #8]
 8022f62:	e782      	b.n	8022e6a <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8022f64:	f104 0914 	add.w	r9, r4, #20
 8022f68:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8022f6c:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 8022f70:	f8ca 0000 	str.w	r0, [sl]
 8022f74:	f8ca 1004 	str.w	r1, [sl, #4]
 8022f78:	6921      	ldr	r1, [r4, #16]
 8022f7a:	3108      	adds	r1, #8
 8022f7c:	6121      	str	r1, [r4, #16]
 8022f7e:	68a1      	ldr	r1, [r4, #8]
 8022f80:	3101      	adds	r1, #1
 8022f82:	60a1      	str	r1, [r4, #8]
 8022f84:	e7ba      	b.n	8022efc <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>

08022f86 <_ZN8touchgfx7Outline6lineToEii>:
 8022f86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8022f88:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8022f8a:	4604      	mov	r4, r0
 8022f8c:	460d      	mov	r5, r1
 8022f8e:	4616      	mov	r6, r2
 8022f90:	079b      	lsls	r3, r3, #30
 8022f92:	d526      	bpl.n	8022fe2 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8022f94:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8022f98:	ea85 0001 	eor.w	r0, r5, r1
 8022f9c:	ea86 0302 	eor.w	r3, r6, r2
 8022fa0:	4303      	orrs	r3, r0
 8022fa2:	d01e      	beq.n	8022fe2 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8022fa4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8022fa6:	114b      	asrs	r3, r1, #5
 8022fa8:	9600      	str	r6, [sp, #0]
 8022faa:	4283      	cmp	r3, r0
 8022fac:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8022fae:	bfb8      	it	lt
 8022fb0:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 8022fb2:	3301      	adds	r3, #1
 8022fb4:	4283      	cmp	r3, r0
 8022fb6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8022fb8:	bfc8      	it	gt
 8022fba:	6363      	strgt	r3, [r4, #52]	; 0x34
 8022fbc:	116b      	asrs	r3, r5, #5
 8022fbe:	4283      	cmp	r3, r0
 8022fc0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8022fc2:	bfb8      	it	lt
 8022fc4:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 8022fc6:	3301      	adds	r3, #1
 8022fc8:	4283      	cmp	r3, r0
 8022fca:	4620      	mov	r0, r4
 8022fcc:	bfc8      	it	gt
 8022fce:	6363      	strgt	r3, [r4, #52]	; 0x34
 8022fd0:	462b      	mov	r3, r5
 8022fd2:	f7ff f9e3 	bl	802239c <_ZN8touchgfx7Outline10renderLineEiiii>
 8022fd6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8022fd8:	f043 0301 	orr.w	r3, r3, #1
 8022fdc:	e9c4 5607 	strd	r5, r6, [r4, #28]
 8022fe0:	63e3      	str	r3, [r4, #60]	; 0x3c
 8022fe2:	b002      	add	sp, #8
 8022fe4:	bd70      	pop	{r4, r5, r6, pc}

08022fe6 <_ZN8touchgfx7Outline6moveToEii>:
 8022fe6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022fe8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8022fea:	4615      	mov	r5, r2
 8022fec:	4604      	mov	r4, r0
 8022fee:	460e      	mov	r6, r1
 8022ff0:	079a      	lsls	r2, r3, #30
 8022ff2:	d401      	bmi.n	8022ff8 <_ZN8touchgfx7Outline6moveToEii+0x12>
 8022ff4:	f7ff f98c 	bl	8022310 <_ZN8touchgfx7Outline5resetEv>
 8022ff8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8022ffa:	07db      	lsls	r3, r3, #31
 8022ffc:	d504      	bpl.n	8023008 <_ZN8touchgfx7Outline6moveToEii+0x22>
 8022ffe:	4620      	mov	r0, r4
 8023000:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 8023004:	f7ff ffbf 	bl	8022f86 <_ZN8touchgfx7Outline6lineToEii>
 8023008:	ea4f 1c66 	mov.w	ip, r6, asr #5
 802300c:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8023010:	116f      	asrs	r7, r5, #5
 8023012:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8023016:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 802301a:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 802301e:	4291      	cmp	r1, r2
 8023020:	d015      	beq.n	802304e <_ZN8touchgfx7Outline6moveToEii+0x68>
 8023022:	8b61      	ldrh	r1, [r4, #26]
 8023024:	8b22      	ldrh	r2, [r4, #24]
 8023026:	430a      	orrs	r2, r1
 8023028:	d00b      	beq.n	8023042 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 802302a:	2b00      	cmp	r3, #0
 802302c:	db09      	blt.n	8023042 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 802302e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8023030:	429a      	cmp	r2, r3
 8023032:	dd06      	ble.n	8023042 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 8023034:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8023038:	429a      	cmp	r2, r3
 802303a:	d30d      	bcc.n	8023058 <_ZN8touchgfx7Outline6moveToEii+0x72>
 802303c:	2301      	movs	r3, #1
 802303e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8023042:	2300      	movs	r3, #0
 8023044:	f8a4 c014 	strh.w	ip, [r4, #20]
 8023048:	82e7      	strh	r7, [r4, #22]
 802304a:	8323      	strh	r3, [r4, #24]
 802304c:	8363      	strh	r3, [r4, #26]
 802304e:	61e6      	str	r6, [r4, #28]
 8023050:	62a5      	str	r5, [r4, #40]	; 0x28
 8023052:	e9c4 5608 	strd	r5, r6, [r4, #32]
 8023056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023058:	f104 0314 	add.w	r3, r4, #20
 802305c:	6922      	ldr	r2, [r4, #16]
 802305e:	cb03      	ldmia	r3!, {r0, r1}
 8023060:	6010      	str	r0, [r2, #0]
 8023062:	6051      	str	r1, [r2, #4]
 8023064:	6923      	ldr	r3, [r4, #16]
 8023066:	3308      	adds	r3, #8
 8023068:	6123      	str	r3, [r4, #16]
 802306a:	68a3      	ldr	r3, [r4, #8]
 802306c:	3301      	adds	r3, #1
 802306e:	60a3      	str	r3, [r4, #8]
 8023070:	e7e7      	b.n	8023042 <_ZN8touchgfx7Outline6moveToEii+0x5c>

08023072 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8023072:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023076:	b0d1      	sub	sp, #324	; 0x144
 8023078:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 802307c:	466c      	mov	r4, sp
 802307e:	1a0d      	subs	r5, r1, r0
 8023080:	f100 0208 	add.w	r2, r0, #8
 8023084:	2d48      	cmp	r5, #72	; 0x48
 8023086:	f340 80ba 	ble.w	80231fe <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 802308a:	112d      	asrs	r5, r5, #4
 802308c:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 8023090:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 8023094:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 8023098:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 802309c:	f9b0 8000 	ldrsh.w	r8, [r0]
 80230a0:	681e      	ldr	r6, [r3, #0]
 80230a2:	6006      	str	r6, [r0, #0]
 80230a4:	685e      	ldr	r6, [r3, #4]
 80230a6:	6046      	str	r6, [r0, #4]
 80230a8:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 80230ac:	f8a3 c004 	strh.w	ip, [r3, #4]
 80230b0:	f8a3 e002 	strh.w	lr, [r3, #2]
 80230b4:	80df      	strh	r7, [r3, #6]
 80230b6:	f1a1 0308 	sub.w	r3, r1, #8
 80230ba:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 80230be:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 80230c2:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 80230c6:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 80230ca:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 80230ce:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 80230d2:	45ac      	cmp	ip, r5
 80230d4:	dd0f      	ble.n	80230f6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 80230d6:	681d      	ldr	r5, [r3, #0]
 80230d8:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 80230dc:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 80230e0:	6015      	str	r5, [r2, #0]
 80230e2:	685d      	ldr	r5, [r3, #4]
 80230e4:	6055      	str	r5, [r2, #4]
 80230e6:	f821 7c08 	strh.w	r7, [r1, #-8]
 80230ea:	f821 6c06 	strh.w	r6, [r1, #-6]
 80230ee:	f821 ec04 	strh.w	lr, [r1, #-4]
 80230f2:	f821 cc02 	strh.w	ip, [r1, #-2]
 80230f6:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 80230fa:	f9b0 7000 	ldrsh.w	r7, [r0]
 80230fe:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8023102:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8023106:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 802310a:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802310e:	4565      	cmp	r5, ip
 8023110:	dd0d      	ble.n	802312e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 8023112:	6815      	ldr	r5, [r2, #0]
 8023114:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8023118:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 802311c:	6005      	str	r5, [r0, #0]
 802311e:	6855      	ldr	r5, [r2, #4]
 8023120:	8107      	strh	r7, [r0, #8]
 8023122:	6045      	str	r5, [r0, #4]
 8023124:	8146      	strh	r6, [r0, #10]
 8023126:	f8a0 e00c 	strh.w	lr, [r0, #12]
 802312a:	f8a0 c00e 	strh.w	ip, [r0, #14]
 802312e:	f9b0 7000 	ldrsh.w	r7, [r0]
 8023132:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8023136:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 802313a:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 802313e:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8023142:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 8023146:	45ac      	cmp	ip, r5
 8023148:	dd0f      	ble.n	802316a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 802314a:	681d      	ldr	r5, [r3, #0]
 802314c:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8023150:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8023154:	6005      	str	r5, [r0, #0]
 8023156:	685d      	ldr	r5, [r3, #4]
 8023158:	6045      	str	r5, [r0, #4]
 802315a:	f821 7c08 	strh.w	r7, [r1, #-8]
 802315e:	f821 6c06 	strh.w	r6, [r1, #-6]
 8023162:	f821 ec04 	strh.w	lr, [r1, #-4]
 8023166:	f821 cc02 	strh.w	ip, [r1, #-2]
 802316a:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 802316e:	f102 0508 	add.w	r5, r2, #8
 8023172:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 8023176:	f9b0 e000 	ldrsh.w	lr, [r0]
 802317a:	462f      	mov	r7, r5
 802317c:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8023180:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 8023184:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 8023188:	45b2      	cmp	sl, r6
 802318a:	dc18      	bgt.n	80231be <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 802318c:	3b08      	subs	r3, #8
 802318e:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 8023192:	f9b3 6000 	ldrsh.w	r6, [r3]
 8023196:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 802319a:	45b2      	cmp	sl, r6
 802319c:	dbf6      	blt.n	802318c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 802319e:	42ab      	cmp	r3, r5
 80231a0:	681e      	ldr	r6, [r3, #0]
 80231a2:	d30e      	bcc.n	80231c2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 80231a4:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 80231a8:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 80231ac:	602e      	str	r6, [r5, #0]
 80231ae:	685e      	ldr	r6, [r3, #4]
 80231b0:	606e      	str	r6, [r5, #4]
 80231b2:	f8a3 9000 	strh.w	r9, [r3]
 80231b6:	f8a3 8002 	strh.w	r8, [r3, #2]
 80231ba:	809f      	strh	r7, [r3, #4]
 80231bc:	80da      	strh	r2, [r3, #6]
 80231be:	462a      	mov	r2, r5
 80231c0:	e7d3      	b.n	802316a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 80231c2:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80231c6:	6006      	str	r6, [r0, #0]
 80231c8:	685e      	ldr	r6, [r3, #4]
 80231ca:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 80231ce:	6046      	str	r6, [r0, #4]
 80231d0:	1a1e      	subs	r6, r3, r0
 80231d2:	80da      	strh	r2, [r3, #6]
 80231d4:	1b4a      	subs	r2, r1, r5
 80231d6:	f8a3 e000 	strh.w	lr, [r3]
 80231da:	10d2      	asrs	r2, r2, #3
 80231dc:	f8a3 c002 	strh.w	ip, [r3, #2]
 80231e0:	f8a3 8004 	strh.w	r8, [r3, #4]
 80231e4:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 80231e8:	bfb5      	itete	lt
 80231ea:	e9c4 0300 	strdlt	r0, r3, [r4]
 80231ee:	4607      	movge	r7, r0
 80231f0:	460b      	movlt	r3, r1
 80231f2:	e9c4 5100 	strdge	r5, r1, [r4]
 80231f6:	4638      	mov	r0, r7
 80231f8:	3408      	adds	r4, #8
 80231fa:	4619      	mov	r1, r3
 80231fc:	e73f      	b.n	802307e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 80231fe:	4291      	cmp	r1, r2
 8023200:	d925      	bls.n	802324e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 8023202:	f1a2 0310 	sub.w	r3, r2, #16
 8023206:	f9b3 600a 	ldrsh.w	r6, [r3, #10]
 802320a:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 802320e:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 8023212:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 8023216:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 802321a:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 802321e:	42b5      	cmp	r5, r6
 8023220:	dd13      	ble.n	802324a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1d8>
 8023222:	461d      	mov	r5, r3
 8023224:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 8023228:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 802322c:	3b08      	subs	r3, #8
 802322e:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8023232:	619e      	str	r6, [r3, #24]
 8023234:	42a8      	cmp	r0, r5
 8023236:	686e      	ldr	r6, [r5, #4]
 8023238:	f8a3 c010 	strh.w	ip, [r3, #16]
 802323c:	61de      	str	r6, [r3, #28]
 802323e:	825f      	strh	r7, [r3, #18]
 8023240:	f8a3 8014 	strh.w	r8, [r3, #20]
 8023244:	f8a3 e016 	strh.w	lr, [r3, #22]
 8023248:	d1dd      	bne.n	8023206 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x194>
 802324a:	3208      	adds	r2, #8
 802324c:	e7d7      	b.n	80231fe <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 802324e:	466b      	mov	r3, sp
 8023250:	429c      	cmp	r4, r3
 8023252:	d903      	bls.n	802325c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ea>
 8023254:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8023258:	3c08      	subs	r4, #8
 802325a:	e710      	b.n	802307e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 802325c:	b051      	add	sp, #324	; 0x144
 802325e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023262 <_ZN8touchgfx7Outline9sortCellsEv>:
 8023262:	6881      	ldr	r1, [r0, #8]
 8023264:	b111      	cbz	r1, 802326c <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 8023266:	68c0      	ldr	r0, [r0, #12]
 8023268:	f7ff bf03 	b.w	8023072 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 802326c:	4770      	bx	lr

0802326e <_ZN8touchgfx7Outline8getCellsEv>:
 802326e:	b510      	push	{r4, lr}
 8023270:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8023272:	4604      	mov	r4, r0
 8023274:	07da      	lsls	r2, r3, #31
 8023276:	d507      	bpl.n	8023288 <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 8023278:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 802327c:	f7ff fe83 	bl	8022f86 <_ZN8touchgfx7Outline6lineToEii>
 8023280:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8023282:	f023 0301 	bic.w	r3, r3, #1
 8023286:	63e3      	str	r3, [r4, #60]	; 0x3c
 8023288:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802328a:	079b      	lsls	r3, r3, #30
 802328c:	d51a      	bpl.n	80232c4 <_ZN8touchgfx7Outline8getCellsEv+0x56>
 802328e:	8b62      	ldrh	r2, [r4, #26]
 8023290:	8b23      	ldrh	r3, [r4, #24]
 8023292:	4313      	orrs	r3, r2
 8023294:	d00d      	beq.n	80232b2 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8023296:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802329a:	2b00      	cmp	r3, #0
 802329c:	db09      	blt.n	80232b2 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802329e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80232a0:	4293      	cmp	r3, r2
 80232a2:	da06      	bge.n	80232b2 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 80232a4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80232a8:	429a      	cmp	r2, r3
 80232aa:	d80d      	bhi.n	80232c8 <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 80232ac:	2301      	movs	r3, #1
 80232ae:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80232b2:	68a0      	ldr	r0, [r4, #8]
 80232b4:	b138      	cbz	r0, 80232c6 <_ZN8touchgfx7Outline8getCellsEv+0x58>
 80232b6:	4620      	mov	r0, r4
 80232b8:	f7ff ffd3 	bl	8023262 <_ZN8touchgfx7Outline9sortCellsEv>
 80232bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80232be:	f023 0302 	bic.w	r3, r3, #2
 80232c2:	63e3      	str	r3, [r4, #60]	; 0x3c
 80232c4:	68e0      	ldr	r0, [r4, #12]
 80232c6:	bd10      	pop	{r4, pc}
 80232c8:	f104 0314 	add.w	r3, r4, #20
 80232cc:	6922      	ldr	r2, [r4, #16]
 80232ce:	cb03      	ldmia	r3!, {r0, r1}
 80232d0:	6010      	str	r0, [r2, #0]
 80232d2:	6051      	str	r1, [r2, #4]
 80232d4:	6923      	ldr	r3, [r4, #16]
 80232d6:	3308      	adds	r3, #8
 80232d8:	6123      	str	r3, [r4, #16]
 80232da:	68a3      	ldr	r3, [r4, #8]
 80232dc:	3301      	adds	r3, #1
 80232de:	60a3      	str	r3, [r4, #8]
 80232e0:	e7e7      	b.n	80232b2 <_ZN8touchgfx7Outline8getCellsEv+0x44>

080232e2 <_ZN8touchgfx8ScanlineD1Ev>:
 80232e2:	4770      	bx	lr

080232e4 <_ZN8touchgfx8ScanlineD0Ev>:
 80232e4:	b510      	push	{r4, lr}
 80232e6:	4604      	mov	r4, r0
 80232e8:	2124      	movs	r1, #36	; 0x24
 80232ea:	f000 f87a 	bl	80233e2 <_ZdlPvj>
 80232ee:	4620      	mov	r0, r4
 80232f0:	bd10      	pop	{r4, pc}

080232f2 <_ZN8touchgfx8Scanline5resetEv>:
 80232f2:	b510      	push	{r4, lr}
 80232f4:	4604      	mov	r4, r0
 80232f6:	f7f3 f8f9 	bl	80164ec <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 80232fa:	61a0      	str	r0, [r4, #24]
 80232fc:	f7f3 f8fc 	bl	80164f8 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 8023300:	61e0      	str	r0, [r4, #28]
 8023302:	f7f3 f8ff 	bl	8016504 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 8023306:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802330a:	6220      	str	r0, [r4, #32]
 802330c:	6160      	str	r0, [r4, #20]
 802330e:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8023312:	69e3      	ldr	r3, [r4, #28]
 8023314:	6123      	str	r3, [r4, #16]
 8023316:	2300      	movs	r3, #0
 8023318:	60e3      	str	r3, [r4, #12]
 802331a:	bd10      	pop	{r4, pc}

0802331c <_ZN8touchgfx8ScanlineC1Ev>:
 802331c:	4b07      	ldr	r3, [pc, #28]	; (802333c <_ZN8touchgfx8ScanlineC1Ev+0x20>)
 802331e:	b510      	push	{r4, lr}
 8023320:	6003      	str	r3, [r0, #0]
 8023322:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8023326:	4604      	mov	r4, r0
 8023328:	e9c0 3301 	strd	r3, r3, [r0, #4]
 802332c:	2300      	movs	r3, #0
 802332e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8023332:	6143      	str	r3, [r0, #20]
 8023334:	f7ff ffdd 	bl	80232f2 <_ZN8touchgfx8Scanline5resetEv>
 8023338:	4620      	mov	r0, r4
 802333a:	bd10      	pop	{r4, pc}
 802333c:	08028468 	.word	0x08028468

08023340 <_ZN8touchgfx8Scanline7addSpanEiijj>:
 8023340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023344:	1e0c      	subs	r4, r1, #0
 8023346:	4605      	mov	r5, r0
 8023348:	4617      	mov	r7, r2
 802334a:	461e      	mov	r6, r3
 802334c:	da03      	bge.n	8023356 <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 802334e:	4426      	add	r6, r4
 8023350:	2e01      	cmp	r6, #1
 8023352:	d421      	bmi.n	8023398 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 8023354:	2400      	movs	r4, #0
 8023356:	f7f3 f8c3 	bl	80164e0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802335a:	42a0      	cmp	r0, r4
 802335c:	d91c      	bls.n	8023398 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 802335e:	eb04 0806 	add.w	r8, r4, r6
 8023362:	f7f3 f8bd 	bl	80164e0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8023366:	4580      	cmp	r8, r0
 8023368:	d902      	bls.n	8023370 <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 802336a:	f7f3 f8b9 	bl	80164e0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802336e:	1b06      	subs	r6, r0, r4
 8023370:	69a8      	ldr	r0, [r5, #24]
 8023372:	4632      	mov	r2, r6
 8023374:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8023378:	4420      	add	r0, r4
 802337a:	f7f4 fdb0 	bl	8017ede <_ZN8touchgfx6memsetEPvhm>
 802337e:	686b      	ldr	r3, [r5, #4]
 8023380:	b2b2      	uxth	r2, r6
 8023382:	3301      	adds	r3, #1
 8023384:	42a3      	cmp	r3, r4
 8023386:	696b      	ldr	r3, [r5, #20]
 8023388:	d108      	bne.n	802339c <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 802338a:	8819      	ldrh	r1, [r3, #0]
 802338c:	440a      	add	r2, r1
 802338e:	801a      	strh	r2, [r3, #0]
 8023390:	3c01      	subs	r4, #1
 8023392:	4434      	add	r4, r6
 8023394:	e9c5 4701 	strd	r4, r7, [r5, #4]
 8023398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802339c:	1c99      	adds	r1, r3, #2
 802339e:	6169      	str	r1, [r5, #20]
 80233a0:	805a      	strh	r2, [r3, #2]
 80233a2:	692b      	ldr	r3, [r5, #16]
 80233a4:	1c9a      	adds	r2, r3, #2
 80233a6:	612a      	str	r2, [r5, #16]
 80233a8:	805c      	strh	r4, [r3, #2]
 80233aa:	68eb      	ldr	r3, [r5, #12]
 80233ac:	3301      	adds	r3, #1
 80233ae:	60eb      	str	r3, [r5, #12]
 80233b0:	e7ee      	b.n	8023390 <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

080233b2 <_ZN8touchgfx15RenderingBufferC1Ev>:
 80233b2:	2200      	movs	r2, #0
 80233b4:	6002      	str	r2, [r0, #0]
 80233b6:	7102      	strb	r2, [r0, #4]
 80233b8:	6102      	str	r2, [r0, #16]
 80233ba:	e9c0 2202 	strd	r2, r2, [r0, #8]
 80233be:	4770      	bx	lr

080233c0 <_ZN8touchgfx15RenderingBufferD1Ev>:
 80233c0:	4770      	bx	lr

080233c2 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 80233c2:	6083      	str	r3, [r0, #8]
 80233c4:	9b00      	ldr	r3, [sp, #0]
 80233c6:	6001      	str	r1, [r0, #0]
 80233c8:	60c3      	str	r3, [r0, #12]
 80233ca:	9b01      	ldr	r3, [sp, #4]
 80233cc:	7102      	strb	r2, [r0, #4]
 80233ce:	6103      	str	r3, [r0, #16]
 80233d0:	4770      	bx	lr

080233d2 <__aeabi_atexit>:
 80233d2:	460b      	mov	r3, r1
 80233d4:	4601      	mov	r1, r0
 80233d6:	4618      	mov	r0, r3
 80233d8:	f000 b852 	b.w	8023480 <__cxa_atexit>

080233dc <__cxa_pure_virtual>:
 80233dc:	b508      	push	{r3, lr}
 80233de:	f000 f81f 	bl	8023420 <_ZSt9terminatev>

080233e2 <_ZdlPvj>:
 80233e2:	f000 b80f 	b.w	8023404 <_ZdlPv>

080233e6 <__cxa_guard_acquire>:
 80233e6:	6803      	ldr	r3, [r0, #0]
 80233e8:	07db      	lsls	r3, r3, #31
 80233ea:	d406      	bmi.n	80233fa <__cxa_guard_acquire+0x14>
 80233ec:	7843      	ldrb	r3, [r0, #1]
 80233ee:	b103      	cbz	r3, 80233f2 <__cxa_guard_acquire+0xc>
 80233f0:	deff      	udf	#255	; 0xff
 80233f2:	2301      	movs	r3, #1
 80233f4:	7043      	strb	r3, [r0, #1]
 80233f6:	4618      	mov	r0, r3
 80233f8:	4770      	bx	lr
 80233fa:	2000      	movs	r0, #0
 80233fc:	4770      	bx	lr

080233fe <__cxa_guard_release>:
 80233fe:	2301      	movs	r3, #1
 8023400:	6003      	str	r3, [r0, #0]
 8023402:	4770      	bx	lr

08023404 <_ZdlPv>:
 8023404:	f000 b88e 	b.w	8023524 <free>

08023408 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8023408:	b508      	push	{r3, lr}
 802340a:	4780      	blx	r0
 802340c:	f000 f80d 	bl	802342a <abort>

08023410 <_ZSt13get_terminatev>:
 8023410:	4b02      	ldr	r3, [pc, #8]	; (802341c <_ZSt13get_terminatev+0xc>)
 8023412:	6818      	ldr	r0, [r3, #0]
 8023414:	f3bf 8f5b 	dmb	ish
 8023418:	4770      	bx	lr
 802341a:	bf00      	nop
 802341c:	20000094 	.word	0x20000094

08023420 <_ZSt9terminatev>:
 8023420:	b508      	push	{r3, lr}
 8023422:	f7ff fff5 	bl	8023410 <_ZSt13get_terminatev>
 8023426:	f7ff ffef 	bl	8023408 <_ZN10__cxxabiv111__terminateEPFvvE>

0802342a <abort>:
 802342a:	b508      	push	{r3, lr}
 802342c:	2006      	movs	r0, #6
 802342e:	f000 fc3d 	bl	8023cac <raise>
 8023432:	2001      	movs	r0, #1
 8023434:	f7df fc86 	bl	8002d44 <_exit>

08023438 <__assert_func>:
 8023438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802343a:	461c      	mov	r4, r3
 802343c:	4b09      	ldr	r3, [pc, #36]	; (8023464 <__assert_func+0x2c>)
 802343e:	681b      	ldr	r3, [r3, #0]
 8023440:	4605      	mov	r5, r0
 8023442:	68d8      	ldr	r0, [r3, #12]
 8023444:	b152      	cbz	r2, 802345c <__assert_func+0x24>
 8023446:	4b08      	ldr	r3, [pc, #32]	; (8023468 <__assert_func+0x30>)
 8023448:	9100      	str	r1, [sp, #0]
 802344a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 802344e:	4907      	ldr	r1, [pc, #28]	; (802346c <__assert_func+0x34>)
 8023450:	462b      	mov	r3, r5
 8023452:	4622      	mov	r2, r4
 8023454:	f000 f828 	bl	80234a8 <fiprintf>
 8023458:	f7ff ffe7 	bl	802342a <abort>
 802345c:	4b04      	ldr	r3, [pc, #16]	; (8023470 <__assert_func+0x38>)
 802345e:	461a      	mov	r2, r3
 8023460:	e7f2      	b.n	8023448 <__assert_func+0x10>
 8023462:	bf00      	nop
 8023464:	20000098 	.word	0x20000098
 8023468:	08028470 	.word	0x08028470
 802346c:	0802847d 	.word	0x0802847d
 8023470:	080284ab 	.word	0x080284ab

08023474 <atexit>:
 8023474:	2300      	movs	r3, #0
 8023476:	4601      	mov	r1, r0
 8023478:	461a      	mov	r2, r3
 802347a:	4618      	mov	r0, r3
 802347c:	f000 bcf2 	b.w	8023e64 <__register_exitproc>

08023480 <__cxa_atexit>:
 8023480:	b510      	push	{r4, lr}
 8023482:	4c05      	ldr	r4, [pc, #20]	; (8023498 <__cxa_atexit+0x18>)
 8023484:	4613      	mov	r3, r2
 8023486:	b12c      	cbz	r4, 8023494 <__cxa_atexit+0x14>
 8023488:	460a      	mov	r2, r1
 802348a:	4601      	mov	r1, r0
 802348c:	2002      	movs	r0, #2
 802348e:	f000 fce9 	bl	8023e64 <__register_exitproc>
 8023492:	bd10      	pop	{r4, pc}
 8023494:	4620      	mov	r0, r4
 8023496:	e7fc      	b.n	8023492 <__cxa_atexit+0x12>
 8023498:	08023e65 	.word	0x08023e65

0802349c <__errno>:
 802349c:	4b01      	ldr	r3, [pc, #4]	; (80234a4 <__errno+0x8>)
 802349e:	6818      	ldr	r0, [r3, #0]
 80234a0:	4770      	bx	lr
 80234a2:	bf00      	nop
 80234a4:	20000098 	.word	0x20000098

080234a8 <fiprintf>:
 80234a8:	b40e      	push	{r1, r2, r3}
 80234aa:	b503      	push	{r0, r1, lr}
 80234ac:	4601      	mov	r1, r0
 80234ae:	ab03      	add	r3, sp, #12
 80234b0:	4805      	ldr	r0, [pc, #20]	; (80234c8 <fiprintf+0x20>)
 80234b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80234b6:	6800      	ldr	r0, [r0, #0]
 80234b8:	9301      	str	r3, [sp, #4]
 80234ba:	f000 f921 	bl	8023700 <_vfiprintf_r>
 80234be:	b002      	add	sp, #8
 80234c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80234c4:	b003      	add	sp, #12
 80234c6:	4770      	bx	lr
 80234c8:	20000098 	.word	0x20000098

080234cc <__libc_init_array>:
 80234cc:	b570      	push	{r4, r5, r6, lr}
 80234ce:	4e0d      	ldr	r6, [pc, #52]	; (8023504 <__libc_init_array+0x38>)
 80234d0:	4c0d      	ldr	r4, [pc, #52]	; (8023508 <__libc_init_array+0x3c>)
 80234d2:	1ba4      	subs	r4, r4, r6
 80234d4:	10a4      	asrs	r4, r4, #2
 80234d6:	2500      	movs	r5, #0
 80234d8:	42a5      	cmp	r5, r4
 80234da:	d109      	bne.n	80234f0 <__libc_init_array+0x24>
 80234dc:	4e0b      	ldr	r6, [pc, #44]	; (802350c <__libc_init_array+0x40>)
 80234de:	4c0c      	ldr	r4, [pc, #48]	; (8023510 <__libc_init_array+0x44>)
 80234e0:	f000 ffb0 	bl	8024444 <_init>
 80234e4:	1ba4      	subs	r4, r4, r6
 80234e6:	10a4      	asrs	r4, r4, #2
 80234e8:	2500      	movs	r5, #0
 80234ea:	42a5      	cmp	r5, r4
 80234ec:	d105      	bne.n	80234fa <__libc_init_array+0x2e>
 80234ee:	bd70      	pop	{r4, r5, r6, pc}
 80234f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80234f4:	4798      	blx	r3
 80234f6:	3501      	adds	r5, #1
 80234f8:	e7ee      	b.n	80234d8 <__libc_init_array+0xc>
 80234fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80234fe:	4798      	blx	r3
 8023500:	3501      	adds	r5, #1
 8023502:	e7f2      	b.n	80234ea <__libc_init_array+0x1e>
 8023504:	0802d018 	.word	0x0802d018
 8023508:	0802d018 	.word	0x0802d018
 802350c:	0802d018 	.word	0x0802d018
 8023510:	0802d02c 	.word	0x0802d02c

08023514 <malloc>:
 8023514:	4b02      	ldr	r3, [pc, #8]	; (8023520 <malloc+0xc>)
 8023516:	4601      	mov	r1, r0
 8023518:	6818      	ldr	r0, [r3, #0]
 802351a:	f000 b86d 	b.w	80235f8 <_malloc_r>
 802351e:	bf00      	nop
 8023520:	20000098 	.word	0x20000098

08023524 <free>:
 8023524:	4b02      	ldr	r3, [pc, #8]	; (8023530 <free+0xc>)
 8023526:	4601      	mov	r1, r0
 8023528:	6818      	ldr	r0, [r3, #0]
 802352a:	f000 b817 	b.w	802355c <_free_r>
 802352e:	bf00      	nop
 8023530:	20000098 	.word	0x20000098

08023534 <memcpy>:
 8023534:	b510      	push	{r4, lr}
 8023536:	1e43      	subs	r3, r0, #1
 8023538:	440a      	add	r2, r1
 802353a:	4291      	cmp	r1, r2
 802353c:	d100      	bne.n	8023540 <memcpy+0xc>
 802353e:	bd10      	pop	{r4, pc}
 8023540:	f811 4b01 	ldrb.w	r4, [r1], #1
 8023544:	f803 4f01 	strb.w	r4, [r3, #1]!
 8023548:	e7f7      	b.n	802353a <memcpy+0x6>

0802354a <memset>:
 802354a:	4402      	add	r2, r0
 802354c:	4603      	mov	r3, r0
 802354e:	4293      	cmp	r3, r2
 8023550:	d100      	bne.n	8023554 <memset+0xa>
 8023552:	4770      	bx	lr
 8023554:	f803 1b01 	strb.w	r1, [r3], #1
 8023558:	e7f9      	b.n	802354e <memset+0x4>
	...

0802355c <_free_r>:
 802355c:	b538      	push	{r3, r4, r5, lr}
 802355e:	4605      	mov	r5, r0
 8023560:	2900      	cmp	r1, #0
 8023562:	d045      	beq.n	80235f0 <_free_r+0x94>
 8023564:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023568:	1f0c      	subs	r4, r1, #4
 802356a:	2b00      	cmp	r3, #0
 802356c:	bfb8      	it	lt
 802356e:	18e4      	addlt	r4, r4, r3
 8023570:	f000 feba 	bl	80242e8 <__malloc_lock>
 8023574:	4a1f      	ldr	r2, [pc, #124]	; (80235f4 <_free_r+0x98>)
 8023576:	6813      	ldr	r3, [r2, #0]
 8023578:	4610      	mov	r0, r2
 802357a:	b933      	cbnz	r3, 802358a <_free_r+0x2e>
 802357c:	6063      	str	r3, [r4, #4]
 802357e:	6014      	str	r4, [r2, #0]
 8023580:	4628      	mov	r0, r5
 8023582:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023586:	f000 beb0 	b.w	80242ea <__malloc_unlock>
 802358a:	42a3      	cmp	r3, r4
 802358c:	d90c      	bls.n	80235a8 <_free_r+0x4c>
 802358e:	6821      	ldr	r1, [r4, #0]
 8023590:	1862      	adds	r2, r4, r1
 8023592:	4293      	cmp	r3, r2
 8023594:	bf04      	itt	eq
 8023596:	681a      	ldreq	r2, [r3, #0]
 8023598:	685b      	ldreq	r3, [r3, #4]
 802359a:	6063      	str	r3, [r4, #4]
 802359c:	bf04      	itt	eq
 802359e:	1852      	addeq	r2, r2, r1
 80235a0:	6022      	streq	r2, [r4, #0]
 80235a2:	6004      	str	r4, [r0, #0]
 80235a4:	e7ec      	b.n	8023580 <_free_r+0x24>
 80235a6:	4613      	mov	r3, r2
 80235a8:	685a      	ldr	r2, [r3, #4]
 80235aa:	b10a      	cbz	r2, 80235b0 <_free_r+0x54>
 80235ac:	42a2      	cmp	r2, r4
 80235ae:	d9fa      	bls.n	80235a6 <_free_r+0x4a>
 80235b0:	6819      	ldr	r1, [r3, #0]
 80235b2:	1858      	adds	r0, r3, r1
 80235b4:	42a0      	cmp	r0, r4
 80235b6:	d10b      	bne.n	80235d0 <_free_r+0x74>
 80235b8:	6820      	ldr	r0, [r4, #0]
 80235ba:	4401      	add	r1, r0
 80235bc:	1858      	adds	r0, r3, r1
 80235be:	4282      	cmp	r2, r0
 80235c0:	6019      	str	r1, [r3, #0]
 80235c2:	d1dd      	bne.n	8023580 <_free_r+0x24>
 80235c4:	6810      	ldr	r0, [r2, #0]
 80235c6:	6852      	ldr	r2, [r2, #4]
 80235c8:	605a      	str	r2, [r3, #4]
 80235ca:	4401      	add	r1, r0
 80235cc:	6019      	str	r1, [r3, #0]
 80235ce:	e7d7      	b.n	8023580 <_free_r+0x24>
 80235d0:	d902      	bls.n	80235d8 <_free_r+0x7c>
 80235d2:	230c      	movs	r3, #12
 80235d4:	602b      	str	r3, [r5, #0]
 80235d6:	e7d3      	b.n	8023580 <_free_r+0x24>
 80235d8:	6820      	ldr	r0, [r4, #0]
 80235da:	1821      	adds	r1, r4, r0
 80235dc:	428a      	cmp	r2, r1
 80235de:	bf04      	itt	eq
 80235e0:	6811      	ldreq	r1, [r2, #0]
 80235e2:	6852      	ldreq	r2, [r2, #4]
 80235e4:	6062      	str	r2, [r4, #4]
 80235e6:	bf04      	itt	eq
 80235e8:	1809      	addeq	r1, r1, r0
 80235ea:	6021      	streq	r1, [r4, #0]
 80235ec:	605c      	str	r4, [r3, #4]
 80235ee:	e7c7      	b.n	8023580 <_free_r+0x24>
 80235f0:	bd38      	pop	{r3, r4, r5, pc}
 80235f2:	bf00      	nop
 80235f4:	2000bbf4 	.word	0x2000bbf4

080235f8 <_malloc_r>:
 80235f8:	b570      	push	{r4, r5, r6, lr}
 80235fa:	1ccd      	adds	r5, r1, #3
 80235fc:	f025 0503 	bic.w	r5, r5, #3
 8023600:	3508      	adds	r5, #8
 8023602:	2d0c      	cmp	r5, #12
 8023604:	bf38      	it	cc
 8023606:	250c      	movcc	r5, #12
 8023608:	2d00      	cmp	r5, #0
 802360a:	4606      	mov	r6, r0
 802360c:	db01      	blt.n	8023612 <_malloc_r+0x1a>
 802360e:	42a9      	cmp	r1, r5
 8023610:	d903      	bls.n	802361a <_malloc_r+0x22>
 8023612:	230c      	movs	r3, #12
 8023614:	6033      	str	r3, [r6, #0]
 8023616:	2000      	movs	r0, #0
 8023618:	bd70      	pop	{r4, r5, r6, pc}
 802361a:	f000 fe65 	bl	80242e8 <__malloc_lock>
 802361e:	4a21      	ldr	r2, [pc, #132]	; (80236a4 <_malloc_r+0xac>)
 8023620:	6814      	ldr	r4, [r2, #0]
 8023622:	4621      	mov	r1, r4
 8023624:	b991      	cbnz	r1, 802364c <_malloc_r+0x54>
 8023626:	4c20      	ldr	r4, [pc, #128]	; (80236a8 <_malloc_r+0xb0>)
 8023628:	6823      	ldr	r3, [r4, #0]
 802362a:	b91b      	cbnz	r3, 8023634 <_malloc_r+0x3c>
 802362c:	4630      	mov	r0, r6
 802362e:	f000 fb05 	bl	8023c3c <_sbrk_r>
 8023632:	6020      	str	r0, [r4, #0]
 8023634:	4629      	mov	r1, r5
 8023636:	4630      	mov	r0, r6
 8023638:	f000 fb00 	bl	8023c3c <_sbrk_r>
 802363c:	1c43      	adds	r3, r0, #1
 802363e:	d124      	bne.n	802368a <_malloc_r+0x92>
 8023640:	230c      	movs	r3, #12
 8023642:	6033      	str	r3, [r6, #0]
 8023644:	4630      	mov	r0, r6
 8023646:	f000 fe50 	bl	80242ea <__malloc_unlock>
 802364a:	e7e4      	b.n	8023616 <_malloc_r+0x1e>
 802364c:	680b      	ldr	r3, [r1, #0]
 802364e:	1b5b      	subs	r3, r3, r5
 8023650:	d418      	bmi.n	8023684 <_malloc_r+0x8c>
 8023652:	2b0b      	cmp	r3, #11
 8023654:	d90f      	bls.n	8023676 <_malloc_r+0x7e>
 8023656:	600b      	str	r3, [r1, #0]
 8023658:	50cd      	str	r5, [r1, r3]
 802365a:	18cc      	adds	r4, r1, r3
 802365c:	4630      	mov	r0, r6
 802365e:	f000 fe44 	bl	80242ea <__malloc_unlock>
 8023662:	f104 000b 	add.w	r0, r4, #11
 8023666:	1d23      	adds	r3, r4, #4
 8023668:	f020 0007 	bic.w	r0, r0, #7
 802366c:	1ac3      	subs	r3, r0, r3
 802366e:	d0d3      	beq.n	8023618 <_malloc_r+0x20>
 8023670:	425a      	negs	r2, r3
 8023672:	50e2      	str	r2, [r4, r3]
 8023674:	e7d0      	b.n	8023618 <_malloc_r+0x20>
 8023676:	428c      	cmp	r4, r1
 8023678:	684b      	ldr	r3, [r1, #4]
 802367a:	bf16      	itet	ne
 802367c:	6063      	strne	r3, [r4, #4]
 802367e:	6013      	streq	r3, [r2, #0]
 8023680:	460c      	movne	r4, r1
 8023682:	e7eb      	b.n	802365c <_malloc_r+0x64>
 8023684:	460c      	mov	r4, r1
 8023686:	6849      	ldr	r1, [r1, #4]
 8023688:	e7cc      	b.n	8023624 <_malloc_r+0x2c>
 802368a:	1cc4      	adds	r4, r0, #3
 802368c:	f024 0403 	bic.w	r4, r4, #3
 8023690:	42a0      	cmp	r0, r4
 8023692:	d005      	beq.n	80236a0 <_malloc_r+0xa8>
 8023694:	1a21      	subs	r1, r4, r0
 8023696:	4630      	mov	r0, r6
 8023698:	f000 fad0 	bl	8023c3c <_sbrk_r>
 802369c:	3001      	adds	r0, #1
 802369e:	d0cf      	beq.n	8023640 <_malloc_r+0x48>
 80236a0:	6025      	str	r5, [r4, #0]
 80236a2:	e7db      	b.n	802365c <_malloc_r+0x64>
 80236a4:	2000bbf4 	.word	0x2000bbf4
 80236a8:	2000bbf8 	.word	0x2000bbf8

080236ac <__sfputc_r>:
 80236ac:	6893      	ldr	r3, [r2, #8]
 80236ae:	3b01      	subs	r3, #1
 80236b0:	2b00      	cmp	r3, #0
 80236b2:	b410      	push	{r4}
 80236b4:	6093      	str	r3, [r2, #8]
 80236b6:	da08      	bge.n	80236ca <__sfputc_r+0x1e>
 80236b8:	6994      	ldr	r4, [r2, #24]
 80236ba:	42a3      	cmp	r3, r4
 80236bc:	db01      	blt.n	80236c2 <__sfputc_r+0x16>
 80236be:	290a      	cmp	r1, #10
 80236c0:	d103      	bne.n	80236ca <__sfputc_r+0x1e>
 80236c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80236c6:	f000 bb0d 	b.w	8023ce4 <__swbuf_r>
 80236ca:	6813      	ldr	r3, [r2, #0]
 80236cc:	1c58      	adds	r0, r3, #1
 80236ce:	6010      	str	r0, [r2, #0]
 80236d0:	7019      	strb	r1, [r3, #0]
 80236d2:	4608      	mov	r0, r1
 80236d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80236d8:	4770      	bx	lr

080236da <__sfputs_r>:
 80236da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80236dc:	4606      	mov	r6, r0
 80236de:	460f      	mov	r7, r1
 80236e0:	4614      	mov	r4, r2
 80236e2:	18d5      	adds	r5, r2, r3
 80236e4:	42ac      	cmp	r4, r5
 80236e6:	d101      	bne.n	80236ec <__sfputs_r+0x12>
 80236e8:	2000      	movs	r0, #0
 80236ea:	e007      	b.n	80236fc <__sfputs_r+0x22>
 80236ec:	463a      	mov	r2, r7
 80236ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80236f2:	4630      	mov	r0, r6
 80236f4:	f7ff ffda 	bl	80236ac <__sfputc_r>
 80236f8:	1c43      	adds	r3, r0, #1
 80236fa:	d1f3      	bne.n	80236e4 <__sfputs_r+0xa>
 80236fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08023700 <_vfiprintf_r>:
 8023700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023704:	460c      	mov	r4, r1
 8023706:	b09d      	sub	sp, #116	; 0x74
 8023708:	4617      	mov	r7, r2
 802370a:	461d      	mov	r5, r3
 802370c:	4606      	mov	r6, r0
 802370e:	b118      	cbz	r0, 8023718 <_vfiprintf_r+0x18>
 8023710:	6983      	ldr	r3, [r0, #24]
 8023712:	b90b      	cbnz	r3, 8023718 <_vfiprintf_r+0x18>
 8023714:	f000 fcfa 	bl	802410c <__sinit>
 8023718:	4b7c      	ldr	r3, [pc, #496]	; (802390c <_vfiprintf_r+0x20c>)
 802371a:	429c      	cmp	r4, r3
 802371c:	d158      	bne.n	80237d0 <_vfiprintf_r+0xd0>
 802371e:	6874      	ldr	r4, [r6, #4]
 8023720:	89a3      	ldrh	r3, [r4, #12]
 8023722:	0718      	lsls	r0, r3, #28
 8023724:	d55e      	bpl.n	80237e4 <_vfiprintf_r+0xe4>
 8023726:	6923      	ldr	r3, [r4, #16]
 8023728:	2b00      	cmp	r3, #0
 802372a:	d05b      	beq.n	80237e4 <_vfiprintf_r+0xe4>
 802372c:	2300      	movs	r3, #0
 802372e:	9309      	str	r3, [sp, #36]	; 0x24
 8023730:	2320      	movs	r3, #32
 8023732:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8023736:	2330      	movs	r3, #48	; 0x30
 8023738:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802373c:	9503      	str	r5, [sp, #12]
 802373e:	f04f 0b01 	mov.w	fp, #1
 8023742:	46b8      	mov	r8, r7
 8023744:	4645      	mov	r5, r8
 8023746:	f815 3b01 	ldrb.w	r3, [r5], #1
 802374a:	b10b      	cbz	r3, 8023750 <_vfiprintf_r+0x50>
 802374c:	2b25      	cmp	r3, #37	; 0x25
 802374e:	d154      	bne.n	80237fa <_vfiprintf_r+0xfa>
 8023750:	ebb8 0a07 	subs.w	sl, r8, r7
 8023754:	d00b      	beq.n	802376e <_vfiprintf_r+0x6e>
 8023756:	4653      	mov	r3, sl
 8023758:	463a      	mov	r2, r7
 802375a:	4621      	mov	r1, r4
 802375c:	4630      	mov	r0, r6
 802375e:	f7ff ffbc 	bl	80236da <__sfputs_r>
 8023762:	3001      	adds	r0, #1
 8023764:	f000 80c2 	beq.w	80238ec <_vfiprintf_r+0x1ec>
 8023768:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802376a:	4453      	add	r3, sl
 802376c:	9309      	str	r3, [sp, #36]	; 0x24
 802376e:	f898 3000 	ldrb.w	r3, [r8]
 8023772:	2b00      	cmp	r3, #0
 8023774:	f000 80ba 	beq.w	80238ec <_vfiprintf_r+0x1ec>
 8023778:	2300      	movs	r3, #0
 802377a:	f04f 32ff 	mov.w	r2, #4294967295
 802377e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023782:	9304      	str	r3, [sp, #16]
 8023784:	9307      	str	r3, [sp, #28]
 8023786:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802378a:	931a      	str	r3, [sp, #104]	; 0x68
 802378c:	46a8      	mov	r8, r5
 802378e:	2205      	movs	r2, #5
 8023790:	f818 1b01 	ldrb.w	r1, [r8], #1
 8023794:	485e      	ldr	r0, [pc, #376]	; (8023910 <_vfiprintf_r+0x210>)
 8023796:	f7dc fd3b 	bl	8000210 <memchr>
 802379a:	9b04      	ldr	r3, [sp, #16]
 802379c:	bb78      	cbnz	r0, 80237fe <_vfiprintf_r+0xfe>
 802379e:	06d9      	lsls	r1, r3, #27
 80237a0:	bf44      	itt	mi
 80237a2:	2220      	movmi	r2, #32
 80237a4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80237a8:	071a      	lsls	r2, r3, #28
 80237aa:	bf44      	itt	mi
 80237ac:	222b      	movmi	r2, #43	; 0x2b
 80237ae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80237b2:	782a      	ldrb	r2, [r5, #0]
 80237b4:	2a2a      	cmp	r2, #42	; 0x2a
 80237b6:	d02a      	beq.n	802380e <_vfiprintf_r+0x10e>
 80237b8:	9a07      	ldr	r2, [sp, #28]
 80237ba:	46a8      	mov	r8, r5
 80237bc:	2000      	movs	r0, #0
 80237be:	250a      	movs	r5, #10
 80237c0:	4641      	mov	r1, r8
 80237c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80237c6:	3b30      	subs	r3, #48	; 0x30
 80237c8:	2b09      	cmp	r3, #9
 80237ca:	d969      	bls.n	80238a0 <_vfiprintf_r+0x1a0>
 80237cc:	b360      	cbz	r0, 8023828 <_vfiprintf_r+0x128>
 80237ce:	e024      	b.n	802381a <_vfiprintf_r+0x11a>
 80237d0:	4b50      	ldr	r3, [pc, #320]	; (8023914 <_vfiprintf_r+0x214>)
 80237d2:	429c      	cmp	r4, r3
 80237d4:	d101      	bne.n	80237da <_vfiprintf_r+0xda>
 80237d6:	68b4      	ldr	r4, [r6, #8]
 80237d8:	e7a2      	b.n	8023720 <_vfiprintf_r+0x20>
 80237da:	4b4f      	ldr	r3, [pc, #316]	; (8023918 <_vfiprintf_r+0x218>)
 80237dc:	429c      	cmp	r4, r3
 80237de:	bf08      	it	eq
 80237e0:	68f4      	ldreq	r4, [r6, #12]
 80237e2:	e79d      	b.n	8023720 <_vfiprintf_r+0x20>
 80237e4:	4621      	mov	r1, r4
 80237e6:	4630      	mov	r0, r6
 80237e8:	f000 face 	bl	8023d88 <__swsetup_r>
 80237ec:	2800      	cmp	r0, #0
 80237ee:	d09d      	beq.n	802372c <_vfiprintf_r+0x2c>
 80237f0:	f04f 30ff 	mov.w	r0, #4294967295
 80237f4:	b01d      	add	sp, #116	; 0x74
 80237f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80237fa:	46a8      	mov	r8, r5
 80237fc:	e7a2      	b.n	8023744 <_vfiprintf_r+0x44>
 80237fe:	4a44      	ldr	r2, [pc, #272]	; (8023910 <_vfiprintf_r+0x210>)
 8023800:	1a80      	subs	r0, r0, r2
 8023802:	fa0b f000 	lsl.w	r0, fp, r0
 8023806:	4318      	orrs	r0, r3
 8023808:	9004      	str	r0, [sp, #16]
 802380a:	4645      	mov	r5, r8
 802380c:	e7be      	b.n	802378c <_vfiprintf_r+0x8c>
 802380e:	9a03      	ldr	r2, [sp, #12]
 8023810:	1d11      	adds	r1, r2, #4
 8023812:	6812      	ldr	r2, [r2, #0]
 8023814:	9103      	str	r1, [sp, #12]
 8023816:	2a00      	cmp	r2, #0
 8023818:	db01      	blt.n	802381e <_vfiprintf_r+0x11e>
 802381a:	9207      	str	r2, [sp, #28]
 802381c:	e004      	b.n	8023828 <_vfiprintf_r+0x128>
 802381e:	4252      	negs	r2, r2
 8023820:	f043 0302 	orr.w	r3, r3, #2
 8023824:	9207      	str	r2, [sp, #28]
 8023826:	9304      	str	r3, [sp, #16]
 8023828:	f898 3000 	ldrb.w	r3, [r8]
 802382c:	2b2e      	cmp	r3, #46	; 0x2e
 802382e:	d10e      	bne.n	802384e <_vfiprintf_r+0x14e>
 8023830:	f898 3001 	ldrb.w	r3, [r8, #1]
 8023834:	2b2a      	cmp	r3, #42	; 0x2a
 8023836:	d138      	bne.n	80238aa <_vfiprintf_r+0x1aa>
 8023838:	9b03      	ldr	r3, [sp, #12]
 802383a:	1d1a      	adds	r2, r3, #4
 802383c:	681b      	ldr	r3, [r3, #0]
 802383e:	9203      	str	r2, [sp, #12]
 8023840:	2b00      	cmp	r3, #0
 8023842:	bfb8      	it	lt
 8023844:	f04f 33ff 	movlt.w	r3, #4294967295
 8023848:	f108 0802 	add.w	r8, r8, #2
 802384c:	9305      	str	r3, [sp, #20]
 802384e:	4d33      	ldr	r5, [pc, #204]	; (802391c <_vfiprintf_r+0x21c>)
 8023850:	f898 1000 	ldrb.w	r1, [r8]
 8023854:	2203      	movs	r2, #3
 8023856:	4628      	mov	r0, r5
 8023858:	f7dc fcda 	bl	8000210 <memchr>
 802385c:	b140      	cbz	r0, 8023870 <_vfiprintf_r+0x170>
 802385e:	2340      	movs	r3, #64	; 0x40
 8023860:	1b40      	subs	r0, r0, r5
 8023862:	fa03 f000 	lsl.w	r0, r3, r0
 8023866:	9b04      	ldr	r3, [sp, #16]
 8023868:	4303      	orrs	r3, r0
 802386a:	f108 0801 	add.w	r8, r8, #1
 802386e:	9304      	str	r3, [sp, #16]
 8023870:	f898 1000 	ldrb.w	r1, [r8]
 8023874:	482a      	ldr	r0, [pc, #168]	; (8023920 <_vfiprintf_r+0x220>)
 8023876:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802387a:	2206      	movs	r2, #6
 802387c:	f108 0701 	add.w	r7, r8, #1
 8023880:	f7dc fcc6 	bl	8000210 <memchr>
 8023884:	2800      	cmp	r0, #0
 8023886:	d037      	beq.n	80238f8 <_vfiprintf_r+0x1f8>
 8023888:	4b26      	ldr	r3, [pc, #152]	; (8023924 <_vfiprintf_r+0x224>)
 802388a:	bb1b      	cbnz	r3, 80238d4 <_vfiprintf_r+0x1d4>
 802388c:	9b03      	ldr	r3, [sp, #12]
 802388e:	3307      	adds	r3, #7
 8023890:	f023 0307 	bic.w	r3, r3, #7
 8023894:	3308      	adds	r3, #8
 8023896:	9303      	str	r3, [sp, #12]
 8023898:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802389a:	444b      	add	r3, r9
 802389c:	9309      	str	r3, [sp, #36]	; 0x24
 802389e:	e750      	b.n	8023742 <_vfiprintf_r+0x42>
 80238a0:	fb05 3202 	mla	r2, r5, r2, r3
 80238a4:	2001      	movs	r0, #1
 80238a6:	4688      	mov	r8, r1
 80238a8:	e78a      	b.n	80237c0 <_vfiprintf_r+0xc0>
 80238aa:	2300      	movs	r3, #0
 80238ac:	f108 0801 	add.w	r8, r8, #1
 80238b0:	9305      	str	r3, [sp, #20]
 80238b2:	4619      	mov	r1, r3
 80238b4:	250a      	movs	r5, #10
 80238b6:	4640      	mov	r0, r8
 80238b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80238bc:	3a30      	subs	r2, #48	; 0x30
 80238be:	2a09      	cmp	r2, #9
 80238c0:	d903      	bls.n	80238ca <_vfiprintf_r+0x1ca>
 80238c2:	2b00      	cmp	r3, #0
 80238c4:	d0c3      	beq.n	802384e <_vfiprintf_r+0x14e>
 80238c6:	9105      	str	r1, [sp, #20]
 80238c8:	e7c1      	b.n	802384e <_vfiprintf_r+0x14e>
 80238ca:	fb05 2101 	mla	r1, r5, r1, r2
 80238ce:	2301      	movs	r3, #1
 80238d0:	4680      	mov	r8, r0
 80238d2:	e7f0      	b.n	80238b6 <_vfiprintf_r+0x1b6>
 80238d4:	ab03      	add	r3, sp, #12
 80238d6:	9300      	str	r3, [sp, #0]
 80238d8:	4622      	mov	r2, r4
 80238da:	4b13      	ldr	r3, [pc, #76]	; (8023928 <_vfiprintf_r+0x228>)
 80238dc:	a904      	add	r1, sp, #16
 80238de:	4630      	mov	r0, r6
 80238e0:	f3af 8000 	nop.w
 80238e4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80238e8:	4681      	mov	r9, r0
 80238ea:	d1d5      	bne.n	8023898 <_vfiprintf_r+0x198>
 80238ec:	89a3      	ldrh	r3, [r4, #12]
 80238ee:	065b      	lsls	r3, r3, #25
 80238f0:	f53f af7e 	bmi.w	80237f0 <_vfiprintf_r+0xf0>
 80238f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80238f6:	e77d      	b.n	80237f4 <_vfiprintf_r+0xf4>
 80238f8:	ab03      	add	r3, sp, #12
 80238fa:	9300      	str	r3, [sp, #0]
 80238fc:	4622      	mov	r2, r4
 80238fe:	4b0a      	ldr	r3, [pc, #40]	; (8023928 <_vfiprintf_r+0x228>)
 8023900:	a904      	add	r1, sp, #16
 8023902:	4630      	mov	r0, r6
 8023904:	f000 f888 	bl	8023a18 <_printf_i>
 8023908:	e7ec      	b.n	80238e4 <_vfiprintf_r+0x1e4>
 802390a:	bf00      	nop
 802390c:	08028508 	.word	0x08028508
 8023910:	080284b0 	.word	0x080284b0
 8023914:	08028528 	.word	0x08028528
 8023918:	080284e8 	.word	0x080284e8
 802391c:	080284b6 	.word	0x080284b6
 8023920:	080284ba 	.word	0x080284ba
 8023924:	00000000 	.word	0x00000000
 8023928:	080236db 	.word	0x080236db

0802392c <_printf_common>:
 802392c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023930:	4691      	mov	r9, r2
 8023932:	461f      	mov	r7, r3
 8023934:	688a      	ldr	r2, [r1, #8]
 8023936:	690b      	ldr	r3, [r1, #16]
 8023938:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802393c:	4293      	cmp	r3, r2
 802393e:	bfb8      	it	lt
 8023940:	4613      	movlt	r3, r2
 8023942:	f8c9 3000 	str.w	r3, [r9]
 8023946:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802394a:	4606      	mov	r6, r0
 802394c:	460c      	mov	r4, r1
 802394e:	b112      	cbz	r2, 8023956 <_printf_common+0x2a>
 8023950:	3301      	adds	r3, #1
 8023952:	f8c9 3000 	str.w	r3, [r9]
 8023956:	6823      	ldr	r3, [r4, #0]
 8023958:	0699      	lsls	r1, r3, #26
 802395a:	bf42      	ittt	mi
 802395c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8023960:	3302      	addmi	r3, #2
 8023962:	f8c9 3000 	strmi.w	r3, [r9]
 8023966:	6825      	ldr	r5, [r4, #0]
 8023968:	f015 0506 	ands.w	r5, r5, #6
 802396c:	d107      	bne.n	802397e <_printf_common+0x52>
 802396e:	f104 0a19 	add.w	sl, r4, #25
 8023972:	68e3      	ldr	r3, [r4, #12]
 8023974:	f8d9 2000 	ldr.w	r2, [r9]
 8023978:	1a9b      	subs	r3, r3, r2
 802397a:	42ab      	cmp	r3, r5
 802397c:	dc28      	bgt.n	80239d0 <_printf_common+0xa4>
 802397e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8023982:	6822      	ldr	r2, [r4, #0]
 8023984:	3300      	adds	r3, #0
 8023986:	bf18      	it	ne
 8023988:	2301      	movne	r3, #1
 802398a:	0692      	lsls	r2, r2, #26
 802398c:	d42d      	bmi.n	80239ea <_printf_common+0xbe>
 802398e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8023992:	4639      	mov	r1, r7
 8023994:	4630      	mov	r0, r6
 8023996:	47c0      	blx	r8
 8023998:	3001      	adds	r0, #1
 802399a:	d020      	beq.n	80239de <_printf_common+0xb2>
 802399c:	6823      	ldr	r3, [r4, #0]
 802399e:	68e5      	ldr	r5, [r4, #12]
 80239a0:	f8d9 2000 	ldr.w	r2, [r9]
 80239a4:	f003 0306 	and.w	r3, r3, #6
 80239a8:	2b04      	cmp	r3, #4
 80239aa:	bf08      	it	eq
 80239ac:	1aad      	subeq	r5, r5, r2
 80239ae:	68a3      	ldr	r3, [r4, #8]
 80239b0:	6922      	ldr	r2, [r4, #16]
 80239b2:	bf0c      	ite	eq
 80239b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80239b8:	2500      	movne	r5, #0
 80239ba:	4293      	cmp	r3, r2
 80239bc:	bfc4      	itt	gt
 80239be:	1a9b      	subgt	r3, r3, r2
 80239c0:	18ed      	addgt	r5, r5, r3
 80239c2:	f04f 0900 	mov.w	r9, #0
 80239c6:	341a      	adds	r4, #26
 80239c8:	454d      	cmp	r5, r9
 80239ca:	d11a      	bne.n	8023a02 <_printf_common+0xd6>
 80239cc:	2000      	movs	r0, #0
 80239ce:	e008      	b.n	80239e2 <_printf_common+0xb6>
 80239d0:	2301      	movs	r3, #1
 80239d2:	4652      	mov	r2, sl
 80239d4:	4639      	mov	r1, r7
 80239d6:	4630      	mov	r0, r6
 80239d8:	47c0      	blx	r8
 80239da:	3001      	adds	r0, #1
 80239dc:	d103      	bne.n	80239e6 <_printf_common+0xba>
 80239de:	f04f 30ff 	mov.w	r0, #4294967295
 80239e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80239e6:	3501      	adds	r5, #1
 80239e8:	e7c3      	b.n	8023972 <_printf_common+0x46>
 80239ea:	18e1      	adds	r1, r4, r3
 80239ec:	1c5a      	adds	r2, r3, #1
 80239ee:	2030      	movs	r0, #48	; 0x30
 80239f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80239f4:	4422      	add	r2, r4
 80239f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80239fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80239fe:	3302      	adds	r3, #2
 8023a00:	e7c5      	b.n	802398e <_printf_common+0x62>
 8023a02:	2301      	movs	r3, #1
 8023a04:	4622      	mov	r2, r4
 8023a06:	4639      	mov	r1, r7
 8023a08:	4630      	mov	r0, r6
 8023a0a:	47c0      	blx	r8
 8023a0c:	3001      	adds	r0, #1
 8023a0e:	d0e6      	beq.n	80239de <_printf_common+0xb2>
 8023a10:	f109 0901 	add.w	r9, r9, #1
 8023a14:	e7d8      	b.n	80239c8 <_printf_common+0x9c>
	...

08023a18 <_printf_i>:
 8023a18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8023a1c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8023a20:	460c      	mov	r4, r1
 8023a22:	7e09      	ldrb	r1, [r1, #24]
 8023a24:	b085      	sub	sp, #20
 8023a26:	296e      	cmp	r1, #110	; 0x6e
 8023a28:	4617      	mov	r7, r2
 8023a2a:	4606      	mov	r6, r0
 8023a2c:	4698      	mov	r8, r3
 8023a2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023a30:	f000 80b3 	beq.w	8023b9a <_printf_i+0x182>
 8023a34:	d822      	bhi.n	8023a7c <_printf_i+0x64>
 8023a36:	2963      	cmp	r1, #99	; 0x63
 8023a38:	d036      	beq.n	8023aa8 <_printf_i+0x90>
 8023a3a:	d80a      	bhi.n	8023a52 <_printf_i+0x3a>
 8023a3c:	2900      	cmp	r1, #0
 8023a3e:	f000 80b9 	beq.w	8023bb4 <_printf_i+0x19c>
 8023a42:	2958      	cmp	r1, #88	; 0x58
 8023a44:	f000 8083 	beq.w	8023b4e <_printf_i+0x136>
 8023a48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8023a4c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8023a50:	e032      	b.n	8023ab8 <_printf_i+0xa0>
 8023a52:	2964      	cmp	r1, #100	; 0x64
 8023a54:	d001      	beq.n	8023a5a <_printf_i+0x42>
 8023a56:	2969      	cmp	r1, #105	; 0x69
 8023a58:	d1f6      	bne.n	8023a48 <_printf_i+0x30>
 8023a5a:	6820      	ldr	r0, [r4, #0]
 8023a5c:	6813      	ldr	r3, [r2, #0]
 8023a5e:	0605      	lsls	r5, r0, #24
 8023a60:	f103 0104 	add.w	r1, r3, #4
 8023a64:	d52a      	bpl.n	8023abc <_printf_i+0xa4>
 8023a66:	681b      	ldr	r3, [r3, #0]
 8023a68:	6011      	str	r1, [r2, #0]
 8023a6a:	2b00      	cmp	r3, #0
 8023a6c:	da03      	bge.n	8023a76 <_printf_i+0x5e>
 8023a6e:	222d      	movs	r2, #45	; 0x2d
 8023a70:	425b      	negs	r3, r3
 8023a72:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8023a76:	486f      	ldr	r0, [pc, #444]	; (8023c34 <_printf_i+0x21c>)
 8023a78:	220a      	movs	r2, #10
 8023a7a:	e039      	b.n	8023af0 <_printf_i+0xd8>
 8023a7c:	2973      	cmp	r1, #115	; 0x73
 8023a7e:	f000 809d 	beq.w	8023bbc <_printf_i+0x1a4>
 8023a82:	d808      	bhi.n	8023a96 <_printf_i+0x7e>
 8023a84:	296f      	cmp	r1, #111	; 0x6f
 8023a86:	d020      	beq.n	8023aca <_printf_i+0xb2>
 8023a88:	2970      	cmp	r1, #112	; 0x70
 8023a8a:	d1dd      	bne.n	8023a48 <_printf_i+0x30>
 8023a8c:	6823      	ldr	r3, [r4, #0]
 8023a8e:	f043 0320 	orr.w	r3, r3, #32
 8023a92:	6023      	str	r3, [r4, #0]
 8023a94:	e003      	b.n	8023a9e <_printf_i+0x86>
 8023a96:	2975      	cmp	r1, #117	; 0x75
 8023a98:	d017      	beq.n	8023aca <_printf_i+0xb2>
 8023a9a:	2978      	cmp	r1, #120	; 0x78
 8023a9c:	d1d4      	bne.n	8023a48 <_printf_i+0x30>
 8023a9e:	2378      	movs	r3, #120	; 0x78
 8023aa0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8023aa4:	4864      	ldr	r0, [pc, #400]	; (8023c38 <_printf_i+0x220>)
 8023aa6:	e055      	b.n	8023b54 <_printf_i+0x13c>
 8023aa8:	6813      	ldr	r3, [r2, #0]
 8023aaa:	1d19      	adds	r1, r3, #4
 8023aac:	681b      	ldr	r3, [r3, #0]
 8023aae:	6011      	str	r1, [r2, #0]
 8023ab0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8023ab4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8023ab8:	2301      	movs	r3, #1
 8023aba:	e08c      	b.n	8023bd6 <_printf_i+0x1be>
 8023abc:	681b      	ldr	r3, [r3, #0]
 8023abe:	6011      	str	r1, [r2, #0]
 8023ac0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8023ac4:	bf18      	it	ne
 8023ac6:	b21b      	sxthne	r3, r3
 8023ac8:	e7cf      	b.n	8023a6a <_printf_i+0x52>
 8023aca:	6813      	ldr	r3, [r2, #0]
 8023acc:	6825      	ldr	r5, [r4, #0]
 8023ace:	1d18      	adds	r0, r3, #4
 8023ad0:	6010      	str	r0, [r2, #0]
 8023ad2:	0628      	lsls	r0, r5, #24
 8023ad4:	d501      	bpl.n	8023ada <_printf_i+0xc2>
 8023ad6:	681b      	ldr	r3, [r3, #0]
 8023ad8:	e002      	b.n	8023ae0 <_printf_i+0xc8>
 8023ada:	0668      	lsls	r0, r5, #25
 8023adc:	d5fb      	bpl.n	8023ad6 <_printf_i+0xbe>
 8023ade:	881b      	ldrh	r3, [r3, #0]
 8023ae0:	4854      	ldr	r0, [pc, #336]	; (8023c34 <_printf_i+0x21c>)
 8023ae2:	296f      	cmp	r1, #111	; 0x6f
 8023ae4:	bf14      	ite	ne
 8023ae6:	220a      	movne	r2, #10
 8023ae8:	2208      	moveq	r2, #8
 8023aea:	2100      	movs	r1, #0
 8023aec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8023af0:	6865      	ldr	r5, [r4, #4]
 8023af2:	60a5      	str	r5, [r4, #8]
 8023af4:	2d00      	cmp	r5, #0
 8023af6:	f2c0 8095 	blt.w	8023c24 <_printf_i+0x20c>
 8023afa:	6821      	ldr	r1, [r4, #0]
 8023afc:	f021 0104 	bic.w	r1, r1, #4
 8023b00:	6021      	str	r1, [r4, #0]
 8023b02:	2b00      	cmp	r3, #0
 8023b04:	d13d      	bne.n	8023b82 <_printf_i+0x16a>
 8023b06:	2d00      	cmp	r5, #0
 8023b08:	f040 808e 	bne.w	8023c28 <_printf_i+0x210>
 8023b0c:	4665      	mov	r5, ip
 8023b0e:	2a08      	cmp	r2, #8
 8023b10:	d10b      	bne.n	8023b2a <_printf_i+0x112>
 8023b12:	6823      	ldr	r3, [r4, #0]
 8023b14:	07db      	lsls	r3, r3, #31
 8023b16:	d508      	bpl.n	8023b2a <_printf_i+0x112>
 8023b18:	6923      	ldr	r3, [r4, #16]
 8023b1a:	6862      	ldr	r2, [r4, #4]
 8023b1c:	429a      	cmp	r2, r3
 8023b1e:	bfde      	ittt	le
 8023b20:	2330      	movle	r3, #48	; 0x30
 8023b22:	f805 3c01 	strble.w	r3, [r5, #-1]
 8023b26:	f105 35ff 	addle.w	r5, r5, #4294967295
 8023b2a:	ebac 0305 	sub.w	r3, ip, r5
 8023b2e:	6123      	str	r3, [r4, #16]
 8023b30:	f8cd 8000 	str.w	r8, [sp]
 8023b34:	463b      	mov	r3, r7
 8023b36:	aa03      	add	r2, sp, #12
 8023b38:	4621      	mov	r1, r4
 8023b3a:	4630      	mov	r0, r6
 8023b3c:	f7ff fef6 	bl	802392c <_printf_common>
 8023b40:	3001      	adds	r0, #1
 8023b42:	d14d      	bne.n	8023be0 <_printf_i+0x1c8>
 8023b44:	f04f 30ff 	mov.w	r0, #4294967295
 8023b48:	b005      	add	sp, #20
 8023b4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8023b4e:	4839      	ldr	r0, [pc, #228]	; (8023c34 <_printf_i+0x21c>)
 8023b50:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8023b54:	6813      	ldr	r3, [r2, #0]
 8023b56:	6821      	ldr	r1, [r4, #0]
 8023b58:	1d1d      	adds	r5, r3, #4
 8023b5a:	681b      	ldr	r3, [r3, #0]
 8023b5c:	6015      	str	r5, [r2, #0]
 8023b5e:	060a      	lsls	r2, r1, #24
 8023b60:	d50b      	bpl.n	8023b7a <_printf_i+0x162>
 8023b62:	07ca      	lsls	r2, r1, #31
 8023b64:	bf44      	itt	mi
 8023b66:	f041 0120 	orrmi.w	r1, r1, #32
 8023b6a:	6021      	strmi	r1, [r4, #0]
 8023b6c:	b91b      	cbnz	r3, 8023b76 <_printf_i+0x15e>
 8023b6e:	6822      	ldr	r2, [r4, #0]
 8023b70:	f022 0220 	bic.w	r2, r2, #32
 8023b74:	6022      	str	r2, [r4, #0]
 8023b76:	2210      	movs	r2, #16
 8023b78:	e7b7      	b.n	8023aea <_printf_i+0xd2>
 8023b7a:	064d      	lsls	r5, r1, #25
 8023b7c:	bf48      	it	mi
 8023b7e:	b29b      	uxthmi	r3, r3
 8023b80:	e7ef      	b.n	8023b62 <_printf_i+0x14a>
 8023b82:	4665      	mov	r5, ip
 8023b84:	fbb3 f1f2 	udiv	r1, r3, r2
 8023b88:	fb02 3311 	mls	r3, r2, r1, r3
 8023b8c:	5cc3      	ldrb	r3, [r0, r3]
 8023b8e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8023b92:	460b      	mov	r3, r1
 8023b94:	2900      	cmp	r1, #0
 8023b96:	d1f5      	bne.n	8023b84 <_printf_i+0x16c>
 8023b98:	e7b9      	b.n	8023b0e <_printf_i+0xf6>
 8023b9a:	6813      	ldr	r3, [r2, #0]
 8023b9c:	6825      	ldr	r5, [r4, #0]
 8023b9e:	6961      	ldr	r1, [r4, #20]
 8023ba0:	1d18      	adds	r0, r3, #4
 8023ba2:	6010      	str	r0, [r2, #0]
 8023ba4:	0628      	lsls	r0, r5, #24
 8023ba6:	681b      	ldr	r3, [r3, #0]
 8023ba8:	d501      	bpl.n	8023bae <_printf_i+0x196>
 8023baa:	6019      	str	r1, [r3, #0]
 8023bac:	e002      	b.n	8023bb4 <_printf_i+0x19c>
 8023bae:	066a      	lsls	r2, r5, #25
 8023bb0:	d5fb      	bpl.n	8023baa <_printf_i+0x192>
 8023bb2:	8019      	strh	r1, [r3, #0]
 8023bb4:	2300      	movs	r3, #0
 8023bb6:	6123      	str	r3, [r4, #16]
 8023bb8:	4665      	mov	r5, ip
 8023bba:	e7b9      	b.n	8023b30 <_printf_i+0x118>
 8023bbc:	6813      	ldr	r3, [r2, #0]
 8023bbe:	1d19      	adds	r1, r3, #4
 8023bc0:	6011      	str	r1, [r2, #0]
 8023bc2:	681d      	ldr	r5, [r3, #0]
 8023bc4:	6862      	ldr	r2, [r4, #4]
 8023bc6:	2100      	movs	r1, #0
 8023bc8:	4628      	mov	r0, r5
 8023bca:	f7dc fb21 	bl	8000210 <memchr>
 8023bce:	b108      	cbz	r0, 8023bd4 <_printf_i+0x1bc>
 8023bd0:	1b40      	subs	r0, r0, r5
 8023bd2:	6060      	str	r0, [r4, #4]
 8023bd4:	6863      	ldr	r3, [r4, #4]
 8023bd6:	6123      	str	r3, [r4, #16]
 8023bd8:	2300      	movs	r3, #0
 8023bda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023bde:	e7a7      	b.n	8023b30 <_printf_i+0x118>
 8023be0:	6923      	ldr	r3, [r4, #16]
 8023be2:	462a      	mov	r2, r5
 8023be4:	4639      	mov	r1, r7
 8023be6:	4630      	mov	r0, r6
 8023be8:	47c0      	blx	r8
 8023bea:	3001      	adds	r0, #1
 8023bec:	d0aa      	beq.n	8023b44 <_printf_i+0x12c>
 8023bee:	6823      	ldr	r3, [r4, #0]
 8023bf0:	079b      	lsls	r3, r3, #30
 8023bf2:	d413      	bmi.n	8023c1c <_printf_i+0x204>
 8023bf4:	68e0      	ldr	r0, [r4, #12]
 8023bf6:	9b03      	ldr	r3, [sp, #12]
 8023bf8:	4298      	cmp	r0, r3
 8023bfa:	bfb8      	it	lt
 8023bfc:	4618      	movlt	r0, r3
 8023bfe:	e7a3      	b.n	8023b48 <_printf_i+0x130>
 8023c00:	2301      	movs	r3, #1
 8023c02:	464a      	mov	r2, r9
 8023c04:	4639      	mov	r1, r7
 8023c06:	4630      	mov	r0, r6
 8023c08:	47c0      	blx	r8
 8023c0a:	3001      	adds	r0, #1
 8023c0c:	d09a      	beq.n	8023b44 <_printf_i+0x12c>
 8023c0e:	3501      	adds	r5, #1
 8023c10:	68e3      	ldr	r3, [r4, #12]
 8023c12:	9a03      	ldr	r2, [sp, #12]
 8023c14:	1a9b      	subs	r3, r3, r2
 8023c16:	42ab      	cmp	r3, r5
 8023c18:	dcf2      	bgt.n	8023c00 <_printf_i+0x1e8>
 8023c1a:	e7eb      	b.n	8023bf4 <_printf_i+0x1dc>
 8023c1c:	2500      	movs	r5, #0
 8023c1e:	f104 0919 	add.w	r9, r4, #25
 8023c22:	e7f5      	b.n	8023c10 <_printf_i+0x1f8>
 8023c24:	2b00      	cmp	r3, #0
 8023c26:	d1ac      	bne.n	8023b82 <_printf_i+0x16a>
 8023c28:	7803      	ldrb	r3, [r0, #0]
 8023c2a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8023c2e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8023c32:	e76c      	b.n	8023b0e <_printf_i+0xf6>
 8023c34:	080284c1 	.word	0x080284c1
 8023c38:	080284d2 	.word	0x080284d2

08023c3c <_sbrk_r>:
 8023c3c:	b538      	push	{r3, r4, r5, lr}
 8023c3e:	4c06      	ldr	r4, [pc, #24]	; (8023c58 <_sbrk_r+0x1c>)
 8023c40:	2300      	movs	r3, #0
 8023c42:	4605      	mov	r5, r0
 8023c44:	4608      	mov	r0, r1
 8023c46:	6023      	str	r3, [r4, #0]
 8023c48:	f7df f8f4 	bl	8002e34 <_sbrk>
 8023c4c:	1c43      	adds	r3, r0, #1
 8023c4e:	d102      	bne.n	8023c56 <_sbrk_r+0x1a>
 8023c50:	6823      	ldr	r3, [r4, #0]
 8023c52:	b103      	cbz	r3, 8023c56 <_sbrk_r+0x1a>
 8023c54:	602b      	str	r3, [r5, #0]
 8023c56:	bd38      	pop	{r3, r4, r5, pc}
 8023c58:	2000c998 	.word	0x2000c998

08023c5c <_raise_r>:
 8023c5c:	291f      	cmp	r1, #31
 8023c5e:	b538      	push	{r3, r4, r5, lr}
 8023c60:	4604      	mov	r4, r0
 8023c62:	460d      	mov	r5, r1
 8023c64:	d904      	bls.n	8023c70 <_raise_r+0x14>
 8023c66:	2316      	movs	r3, #22
 8023c68:	6003      	str	r3, [r0, #0]
 8023c6a:	f04f 30ff 	mov.w	r0, #4294967295
 8023c6e:	bd38      	pop	{r3, r4, r5, pc}
 8023c70:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8023c72:	b112      	cbz	r2, 8023c7a <_raise_r+0x1e>
 8023c74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023c78:	b94b      	cbnz	r3, 8023c8e <_raise_r+0x32>
 8023c7a:	4620      	mov	r0, r4
 8023c7c:	f000 f830 	bl	8023ce0 <_getpid_r>
 8023c80:	462a      	mov	r2, r5
 8023c82:	4601      	mov	r1, r0
 8023c84:	4620      	mov	r0, r4
 8023c86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023c8a:	f000 b817 	b.w	8023cbc <_kill_r>
 8023c8e:	2b01      	cmp	r3, #1
 8023c90:	d00a      	beq.n	8023ca8 <_raise_r+0x4c>
 8023c92:	1c59      	adds	r1, r3, #1
 8023c94:	d103      	bne.n	8023c9e <_raise_r+0x42>
 8023c96:	2316      	movs	r3, #22
 8023c98:	6003      	str	r3, [r0, #0]
 8023c9a:	2001      	movs	r0, #1
 8023c9c:	e7e7      	b.n	8023c6e <_raise_r+0x12>
 8023c9e:	2400      	movs	r4, #0
 8023ca0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8023ca4:	4628      	mov	r0, r5
 8023ca6:	4798      	blx	r3
 8023ca8:	2000      	movs	r0, #0
 8023caa:	e7e0      	b.n	8023c6e <_raise_r+0x12>

08023cac <raise>:
 8023cac:	4b02      	ldr	r3, [pc, #8]	; (8023cb8 <raise+0xc>)
 8023cae:	4601      	mov	r1, r0
 8023cb0:	6818      	ldr	r0, [r3, #0]
 8023cb2:	f7ff bfd3 	b.w	8023c5c <_raise_r>
 8023cb6:	bf00      	nop
 8023cb8:	20000098 	.word	0x20000098

08023cbc <_kill_r>:
 8023cbc:	b538      	push	{r3, r4, r5, lr}
 8023cbe:	4c07      	ldr	r4, [pc, #28]	; (8023cdc <_kill_r+0x20>)
 8023cc0:	2300      	movs	r3, #0
 8023cc2:	4605      	mov	r5, r0
 8023cc4:	4608      	mov	r0, r1
 8023cc6:	4611      	mov	r1, r2
 8023cc8:	6023      	str	r3, [r4, #0]
 8023cca:	f7df f82b 	bl	8002d24 <_kill>
 8023cce:	1c43      	adds	r3, r0, #1
 8023cd0:	d102      	bne.n	8023cd8 <_kill_r+0x1c>
 8023cd2:	6823      	ldr	r3, [r4, #0]
 8023cd4:	b103      	cbz	r3, 8023cd8 <_kill_r+0x1c>
 8023cd6:	602b      	str	r3, [r5, #0]
 8023cd8:	bd38      	pop	{r3, r4, r5, pc}
 8023cda:	bf00      	nop
 8023cdc:	2000c998 	.word	0x2000c998

08023ce0 <_getpid_r>:
 8023ce0:	f7df b818 	b.w	8002d14 <_getpid>

08023ce4 <__swbuf_r>:
 8023ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023ce6:	460e      	mov	r6, r1
 8023ce8:	4614      	mov	r4, r2
 8023cea:	4605      	mov	r5, r0
 8023cec:	b118      	cbz	r0, 8023cf6 <__swbuf_r+0x12>
 8023cee:	6983      	ldr	r3, [r0, #24]
 8023cf0:	b90b      	cbnz	r3, 8023cf6 <__swbuf_r+0x12>
 8023cf2:	f000 fa0b 	bl	802410c <__sinit>
 8023cf6:	4b21      	ldr	r3, [pc, #132]	; (8023d7c <__swbuf_r+0x98>)
 8023cf8:	429c      	cmp	r4, r3
 8023cfa:	d12a      	bne.n	8023d52 <__swbuf_r+0x6e>
 8023cfc:	686c      	ldr	r4, [r5, #4]
 8023cfe:	69a3      	ldr	r3, [r4, #24]
 8023d00:	60a3      	str	r3, [r4, #8]
 8023d02:	89a3      	ldrh	r3, [r4, #12]
 8023d04:	071a      	lsls	r2, r3, #28
 8023d06:	d52e      	bpl.n	8023d66 <__swbuf_r+0x82>
 8023d08:	6923      	ldr	r3, [r4, #16]
 8023d0a:	b363      	cbz	r3, 8023d66 <__swbuf_r+0x82>
 8023d0c:	6923      	ldr	r3, [r4, #16]
 8023d0e:	6820      	ldr	r0, [r4, #0]
 8023d10:	1ac0      	subs	r0, r0, r3
 8023d12:	6963      	ldr	r3, [r4, #20]
 8023d14:	b2f6      	uxtb	r6, r6
 8023d16:	4283      	cmp	r3, r0
 8023d18:	4637      	mov	r7, r6
 8023d1a:	dc04      	bgt.n	8023d26 <__swbuf_r+0x42>
 8023d1c:	4621      	mov	r1, r4
 8023d1e:	4628      	mov	r0, r5
 8023d20:	f000 f98a 	bl	8024038 <_fflush_r>
 8023d24:	bb28      	cbnz	r0, 8023d72 <__swbuf_r+0x8e>
 8023d26:	68a3      	ldr	r3, [r4, #8]
 8023d28:	3b01      	subs	r3, #1
 8023d2a:	60a3      	str	r3, [r4, #8]
 8023d2c:	6823      	ldr	r3, [r4, #0]
 8023d2e:	1c5a      	adds	r2, r3, #1
 8023d30:	6022      	str	r2, [r4, #0]
 8023d32:	701e      	strb	r6, [r3, #0]
 8023d34:	6963      	ldr	r3, [r4, #20]
 8023d36:	3001      	adds	r0, #1
 8023d38:	4283      	cmp	r3, r0
 8023d3a:	d004      	beq.n	8023d46 <__swbuf_r+0x62>
 8023d3c:	89a3      	ldrh	r3, [r4, #12]
 8023d3e:	07db      	lsls	r3, r3, #31
 8023d40:	d519      	bpl.n	8023d76 <__swbuf_r+0x92>
 8023d42:	2e0a      	cmp	r6, #10
 8023d44:	d117      	bne.n	8023d76 <__swbuf_r+0x92>
 8023d46:	4621      	mov	r1, r4
 8023d48:	4628      	mov	r0, r5
 8023d4a:	f000 f975 	bl	8024038 <_fflush_r>
 8023d4e:	b190      	cbz	r0, 8023d76 <__swbuf_r+0x92>
 8023d50:	e00f      	b.n	8023d72 <__swbuf_r+0x8e>
 8023d52:	4b0b      	ldr	r3, [pc, #44]	; (8023d80 <__swbuf_r+0x9c>)
 8023d54:	429c      	cmp	r4, r3
 8023d56:	d101      	bne.n	8023d5c <__swbuf_r+0x78>
 8023d58:	68ac      	ldr	r4, [r5, #8]
 8023d5a:	e7d0      	b.n	8023cfe <__swbuf_r+0x1a>
 8023d5c:	4b09      	ldr	r3, [pc, #36]	; (8023d84 <__swbuf_r+0xa0>)
 8023d5e:	429c      	cmp	r4, r3
 8023d60:	bf08      	it	eq
 8023d62:	68ec      	ldreq	r4, [r5, #12]
 8023d64:	e7cb      	b.n	8023cfe <__swbuf_r+0x1a>
 8023d66:	4621      	mov	r1, r4
 8023d68:	4628      	mov	r0, r5
 8023d6a:	f000 f80d 	bl	8023d88 <__swsetup_r>
 8023d6e:	2800      	cmp	r0, #0
 8023d70:	d0cc      	beq.n	8023d0c <__swbuf_r+0x28>
 8023d72:	f04f 37ff 	mov.w	r7, #4294967295
 8023d76:	4638      	mov	r0, r7
 8023d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023d7a:	bf00      	nop
 8023d7c:	08028508 	.word	0x08028508
 8023d80:	08028528 	.word	0x08028528
 8023d84:	080284e8 	.word	0x080284e8

08023d88 <__swsetup_r>:
 8023d88:	4b32      	ldr	r3, [pc, #200]	; (8023e54 <__swsetup_r+0xcc>)
 8023d8a:	b570      	push	{r4, r5, r6, lr}
 8023d8c:	681d      	ldr	r5, [r3, #0]
 8023d8e:	4606      	mov	r6, r0
 8023d90:	460c      	mov	r4, r1
 8023d92:	b125      	cbz	r5, 8023d9e <__swsetup_r+0x16>
 8023d94:	69ab      	ldr	r3, [r5, #24]
 8023d96:	b913      	cbnz	r3, 8023d9e <__swsetup_r+0x16>
 8023d98:	4628      	mov	r0, r5
 8023d9a:	f000 f9b7 	bl	802410c <__sinit>
 8023d9e:	4b2e      	ldr	r3, [pc, #184]	; (8023e58 <__swsetup_r+0xd0>)
 8023da0:	429c      	cmp	r4, r3
 8023da2:	d10f      	bne.n	8023dc4 <__swsetup_r+0x3c>
 8023da4:	686c      	ldr	r4, [r5, #4]
 8023da6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023daa:	b29a      	uxth	r2, r3
 8023dac:	0715      	lsls	r5, r2, #28
 8023dae:	d42c      	bmi.n	8023e0a <__swsetup_r+0x82>
 8023db0:	06d0      	lsls	r0, r2, #27
 8023db2:	d411      	bmi.n	8023dd8 <__swsetup_r+0x50>
 8023db4:	2209      	movs	r2, #9
 8023db6:	6032      	str	r2, [r6, #0]
 8023db8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023dbc:	81a3      	strh	r3, [r4, #12]
 8023dbe:	f04f 30ff 	mov.w	r0, #4294967295
 8023dc2:	e03e      	b.n	8023e42 <__swsetup_r+0xba>
 8023dc4:	4b25      	ldr	r3, [pc, #148]	; (8023e5c <__swsetup_r+0xd4>)
 8023dc6:	429c      	cmp	r4, r3
 8023dc8:	d101      	bne.n	8023dce <__swsetup_r+0x46>
 8023dca:	68ac      	ldr	r4, [r5, #8]
 8023dcc:	e7eb      	b.n	8023da6 <__swsetup_r+0x1e>
 8023dce:	4b24      	ldr	r3, [pc, #144]	; (8023e60 <__swsetup_r+0xd8>)
 8023dd0:	429c      	cmp	r4, r3
 8023dd2:	bf08      	it	eq
 8023dd4:	68ec      	ldreq	r4, [r5, #12]
 8023dd6:	e7e6      	b.n	8023da6 <__swsetup_r+0x1e>
 8023dd8:	0751      	lsls	r1, r2, #29
 8023dda:	d512      	bpl.n	8023e02 <__swsetup_r+0x7a>
 8023ddc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023dde:	b141      	cbz	r1, 8023df2 <__swsetup_r+0x6a>
 8023de0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023de4:	4299      	cmp	r1, r3
 8023de6:	d002      	beq.n	8023dee <__swsetup_r+0x66>
 8023de8:	4630      	mov	r0, r6
 8023dea:	f7ff fbb7 	bl	802355c <_free_r>
 8023dee:	2300      	movs	r3, #0
 8023df0:	6363      	str	r3, [r4, #52]	; 0x34
 8023df2:	89a3      	ldrh	r3, [r4, #12]
 8023df4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8023df8:	81a3      	strh	r3, [r4, #12]
 8023dfa:	2300      	movs	r3, #0
 8023dfc:	6063      	str	r3, [r4, #4]
 8023dfe:	6923      	ldr	r3, [r4, #16]
 8023e00:	6023      	str	r3, [r4, #0]
 8023e02:	89a3      	ldrh	r3, [r4, #12]
 8023e04:	f043 0308 	orr.w	r3, r3, #8
 8023e08:	81a3      	strh	r3, [r4, #12]
 8023e0a:	6923      	ldr	r3, [r4, #16]
 8023e0c:	b94b      	cbnz	r3, 8023e22 <__swsetup_r+0x9a>
 8023e0e:	89a3      	ldrh	r3, [r4, #12]
 8023e10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8023e14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8023e18:	d003      	beq.n	8023e22 <__swsetup_r+0x9a>
 8023e1a:	4621      	mov	r1, r4
 8023e1c:	4630      	mov	r0, r6
 8023e1e:	f000 fa23 	bl	8024268 <__smakebuf_r>
 8023e22:	89a2      	ldrh	r2, [r4, #12]
 8023e24:	f012 0301 	ands.w	r3, r2, #1
 8023e28:	d00c      	beq.n	8023e44 <__swsetup_r+0xbc>
 8023e2a:	2300      	movs	r3, #0
 8023e2c:	60a3      	str	r3, [r4, #8]
 8023e2e:	6963      	ldr	r3, [r4, #20]
 8023e30:	425b      	negs	r3, r3
 8023e32:	61a3      	str	r3, [r4, #24]
 8023e34:	6923      	ldr	r3, [r4, #16]
 8023e36:	b953      	cbnz	r3, 8023e4e <__swsetup_r+0xc6>
 8023e38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023e3c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8023e40:	d1ba      	bne.n	8023db8 <__swsetup_r+0x30>
 8023e42:	bd70      	pop	{r4, r5, r6, pc}
 8023e44:	0792      	lsls	r2, r2, #30
 8023e46:	bf58      	it	pl
 8023e48:	6963      	ldrpl	r3, [r4, #20]
 8023e4a:	60a3      	str	r3, [r4, #8]
 8023e4c:	e7f2      	b.n	8023e34 <__swsetup_r+0xac>
 8023e4e:	2000      	movs	r0, #0
 8023e50:	e7f7      	b.n	8023e42 <__swsetup_r+0xba>
 8023e52:	bf00      	nop
 8023e54:	20000098 	.word	0x20000098
 8023e58:	08028508 	.word	0x08028508
 8023e5c:	08028528 	.word	0x08028528
 8023e60:	080284e8 	.word	0x080284e8

08023e64 <__register_exitproc>:
 8023e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023e68:	4d2c      	ldr	r5, [pc, #176]	; (8023f1c <__register_exitproc+0xb8>)
 8023e6a:	682c      	ldr	r4, [r5, #0]
 8023e6c:	4607      	mov	r7, r0
 8023e6e:	460e      	mov	r6, r1
 8023e70:	4691      	mov	r9, r2
 8023e72:	4698      	mov	r8, r3
 8023e74:	b934      	cbnz	r4, 8023e84 <__register_exitproc+0x20>
 8023e76:	4b2a      	ldr	r3, [pc, #168]	; (8023f20 <__register_exitproc+0xbc>)
 8023e78:	4c2a      	ldr	r4, [pc, #168]	; (8023f24 <__register_exitproc+0xc0>)
 8023e7a:	602c      	str	r4, [r5, #0]
 8023e7c:	b113      	cbz	r3, 8023e84 <__register_exitproc+0x20>
 8023e7e:	681b      	ldr	r3, [r3, #0]
 8023e80:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8023e84:	6863      	ldr	r3, [r4, #4]
 8023e86:	2b1f      	cmp	r3, #31
 8023e88:	dd3d      	ble.n	8023f06 <__register_exitproc+0xa2>
 8023e8a:	4b27      	ldr	r3, [pc, #156]	; (8023f28 <__register_exitproc+0xc4>)
 8023e8c:	b91b      	cbnz	r3, 8023e96 <__register_exitproc+0x32>
 8023e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8023e92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023e96:	208c      	movs	r0, #140	; 0x8c
 8023e98:	f7ff fb3c 	bl	8023514 <malloc>
 8023e9c:	4604      	mov	r4, r0
 8023e9e:	2800      	cmp	r0, #0
 8023ea0:	d0f5      	beq.n	8023e8e <__register_exitproc+0x2a>
 8023ea2:	2300      	movs	r3, #0
 8023ea4:	682a      	ldr	r2, [r5, #0]
 8023ea6:	6002      	str	r2, [r0, #0]
 8023ea8:	6043      	str	r3, [r0, #4]
 8023eaa:	6028      	str	r0, [r5, #0]
 8023eac:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 8023eb0:	b30f      	cbz	r7, 8023ef6 <__register_exitproc+0x92>
 8023eb2:	f44f 7084 	mov.w	r0, #264	; 0x108
 8023eb6:	f7ff fb2d 	bl	8023514 <malloc>
 8023eba:	2800      	cmp	r0, #0
 8023ebc:	d0e7      	beq.n	8023e8e <__register_exitproc+0x2a>
 8023ebe:	2300      	movs	r3, #0
 8023ec0:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8023ec4:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 8023ec8:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8023ecc:	6862      	ldr	r2, [r4, #4]
 8023ece:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 8023ed2:	2301      	movs	r3, #1
 8023ed4:	4093      	lsls	r3, r2
 8023ed6:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8023eda:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 8023ede:	431a      	orrs	r2, r3
 8023ee0:	2f02      	cmp	r7, #2
 8023ee2:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 8023ee6:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 8023eea:	bf02      	ittt	eq
 8023eec:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 8023ef0:	4313      	orreq	r3, r2
 8023ef2:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8023ef6:	6863      	ldr	r3, [r4, #4]
 8023ef8:	1c5a      	adds	r2, r3, #1
 8023efa:	3302      	adds	r3, #2
 8023efc:	6062      	str	r2, [r4, #4]
 8023efe:	2000      	movs	r0, #0
 8023f00:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8023f04:	e7c5      	b.n	8023e92 <__register_exitproc+0x2e>
 8023f06:	2f00      	cmp	r7, #0
 8023f08:	d0f5      	beq.n	8023ef6 <__register_exitproc+0x92>
 8023f0a:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8023f0e:	2800      	cmp	r0, #0
 8023f10:	d1dc      	bne.n	8023ecc <__register_exitproc+0x68>
 8023f12:	4b05      	ldr	r3, [pc, #20]	; (8023f28 <__register_exitproc+0xc4>)
 8023f14:	2b00      	cmp	r3, #0
 8023f16:	d0ba      	beq.n	8023e8e <__register_exitproc+0x2a>
 8023f18:	e7cb      	b.n	8023eb2 <__register_exitproc+0x4e>
 8023f1a:	bf00      	nop
 8023f1c:	2000bd90 	.word	0x2000bd90
 8023f20:	080284e4 	.word	0x080284e4
 8023f24:	2000bd04 	.word	0x2000bd04
 8023f28:	08023515 	.word	0x08023515

08023f2c <__sflush_r>:
 8023f2c:	898a      	ldrh	r2, [r1, #12]
 8023f2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023f32:	4605      	mov	r5, r0
 8023f34:	0710      	lsls	r0, r2, #28
 8023f36:	460c      	mov	r4, r1
 8023f38:	d458      	bmi.n	8023fec <__sflush_r+0xc0>
 8023f3a:	684b      	ldr	r3, [r1, #4]
 8023f3c:	2b00      	cmp	r3, #0
 8023f3e:	dc05      	bgt.n	8023f4c <__sflush_r+0x20>
 8023f40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8023f42:	2b00      	cmp	r3, #0
 8023f44:	dc02      	bgt.n	8023f4c <__sflush_r+0x20>
 8023f46:	2000      	movs	r0, #0
 8023f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023f4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8023f4e:	2e00      	cmp	r6, #0
 8023f50:	d0f9      	beq.n	8023f46 <__sflush_r+0x1a>
 8023f52:	2300      	movs	r3, #0
 8023f54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8023f58:	682f      	ldr	r7, [r5, #0]
 8023f5a:	6a21      	ldr	r1, [r4, #32]
 8023f5c:	602b      	str	r3, [r5, #0]
 8023f5e:	d032      	beq.n	8023fc6 <__sflush_r+0x9a>
 8023f60:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8023f62:	89a3      	ldrh	r3, [r4, #12]
 8023f64:	075a      	lsls	r2, r3, #29
 8023f66:	d505      	bpl.n	8023f74 <__sflush_r+0x48>
 8023f68:	6863      	ldr	r3, [r4, #4]
 8023f6a:	1ac0      	subs	r0, r0, r3
 8023f6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8023f6e:	b10b      	cbz	r3, 8023f74 <__sflush_r+0x48>
 8023f70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8023f72:	1ac0      	subs	r0, r0, r3
 8023f74:	2300      	movs	r3, #0
 8023f76:	4602      	mov	r2, r0
 8023f78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8023f7a:	6a21      	ldr	r1, [r4, #32]
 8023f7c:	4628      	mov	r0, r5
 8023f7e:	47b0      	blx	r6
 8023f80:	1c43      	adds	r3, r0, #1
 8023f82:	89a3      	ldrh	r3, [r4, #12]
 8023f84:	d106      	bne.n	8023f94 <__sflush_r+0x68>
 8023f86:	6829      	ldr	r1, [r5, #0]
 8023f88:	291d      	cmp	r1, #29
 8023f8a:	d848      	bhi.n	802401e <__sflush_r+0xf2>
 8023f8c:	4a29      	ldr	r2, [pc, #164]	; (8024034 <__sflush_r+0x108>)
 8023f8e:	40ca      	lsrs	r2, r1
 8023f90:	07d6      	lsls	r6, r2, #31
 8023f92:	d544      	bpl.n	802401e <__sflush_r+0xf2>
 8023f94:	2200      	movs	r2, #0
 8023f96:	6062      	str	r2, [r4, #4]
 8023f98:	04d9      	lsls	r1, r3, #19
 8023f9a:	6922      	ldr	r2, [r4, #16]
 8023f9c:	6022      	str	r2, [r4, #0]
 8023f9e:	d504      	bpl.n	8023faa <__sflush_r+0x7e>
 8023fa0:	1c42      	adds	r2, r0, #1
 8023fa2:	d101      	bne.n	8023fa8 <__sflush_r+0x7c>
 8023fa4:	682b      	ldr	r3, [r5, #0]
 8023fa6:	b903      	cbnz	r3, 8023faa <__sflush_r+0x7e>
 8023fa8:	6560      	str	r0, [r4, #84]	; 0x54
 8023faa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023fac:	602f      	str	r7, [r5, #0]
 8023fae:	2900      	cmp	r1, #0
 8023fb0:	d0c9      	beq.n	8023f46 <__sflush_r+0x1a>
 8023fb2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023fb6:	4299      	cmp	r1, r3
 8023fb8:	d002      	beq.n	8023fc0 <__sflush_r+0x94>
 8023fba:	4628      	mov	r0, r5
 8023fbc:	f7ff face 	bl	802355c <_free_r>
 8023fc0:	2000      	movs	r0, #0
 8023fc2:	6360      	str	r0, [r4, #52]	; 0x34
 8023fc4:	e7c0      	b.n	8023f48 <__sflush_r+0x1c>
 8023fc6:	2301      	movs	r3, #1
 8023fc8:	4628      	mov	r0, r5
 8023fca:	47b0      	blx	r6
 8023fcc:	1c41      	adds	r1, r0, #1
 8023fce:	d1c8      	bne.n	8023f62 <__sflush_r+0x36>
 8023fd0:	682b      	ldr	r3, [r5, #0]
 8023fd2:	2b00      	cmp	r3, #0
 8023fd4:	d0c5      	beq.n	8023f62 <__sflush_r+0x36>
 8023fd6:	2b1d      	cmp	r3, #29
 8023fd8:	d001      	beq.n	8023fde <__sflush_r+0xb2>
 8023fda:	2b16      	cmp	r3, #22
 8023fdc:	d101      	bne.n	8023fe2 <__sflush_r+0xb6>
 8023fde:	602f      	str	r7, [r5, #0]
 8023fe0:	e7b1      	b.n	8023f46 <__sflush_r+0x1a>
 8023fe2:	89a3      	ldrh	r3, [r4, #12]
 8023fe4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023fe8:	81a3      	strh	r3, [r4, #12]
 8023fea:	e7ad      	b.n	8023f48 <__sflush_r+0x1c>
 8023fec:	690f      	ldr	r7, [r1, #16]
 8023fee:	2f00      	cmp	r7, #0
 8023ff0:	d0a9      	beq.n	8023f46 <__sflush_r+0x1a>
 8023ff2:	0793      	lsls	r3, r2, #30
 8023ff4:	680e      	ldr	r6, [r1, #0]
 8023ff6:	bf08      	it	eq
 8023ff8:	694b      	ldreq	r3, [r1, #20]
 8023ffa:	600f      	str	r7, [r1, #0]
 8023ffc:	bf18      	it	ne
 8023ffe:	2300      	movne	r3, #0
 8024000:	eba6 0807 	sub.w	r8, r6, r7
 8024004:	608b      	str	r3, [r1, #8]
 8024006:	f1b8 0f00 	cmp.w	r8, #0
 802400a:	dd9c      	ble.n	8023f46 <__sflush_r+0x1a>
 802400c:	4643      	mov	r3, r8
 802400e:	463a      	mov	r2, r7
 8024010:	6a21      	ldr	r1, [r4, #32]
 8024012:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8024014:	4628      	mov	r0, r5
 8024016:	47b0      	blx	r6
 8024018:	2800      	cmp	r0, #0
 802401a:	dc06      	bgt.n	802402a <__sflush_r+0xfe>
 802401c:	89a3      	ldrh	r3, [r4, #12]
 802401e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024022:	81a3      	strh	r3, [r4, #12]
 8024024:	f04f 30ff 	mov.w	r0, #4294967295
 8024028:	e78e      	b.n	8023f48 <__sflush_r+0x1c>
 802402a:	4407      	add	r7, r0
 802402c:	eba8 0800 	sub.w	r8, r8, r0
 8024030:	e7e9      	b.n	8024006 <__sflush_r+0xda>
 8024032:	bf00      	nop
 8024034:	20400001 	.word	0x20400001

08024038 <_fflush_r>:
 8024038:	b538      	push	{r3, r4, r5, lr}
 802403a:	690b      	ldr	r3, [r1, #16]
 802403c:	4605      	mov	r5, r0
 802403e:	460c      	mov	r4, r1
 8024040:	b1db      	cbz	r3, 802407a <_fflush_r+0x42>
 8024042:	b118      	cbz	r0, 802404c <_fflush_r+0x14>
 8024044:	6983      	ldr	r3, [r0, #24]
 8024046:	b90b      	cbnz	r3, 802404c <_fflush_r+0x14>
 8024048:	f000 f860 	bl	802410c <__sinit>
 802404c:	4b0c      	ldr	r3, [pc, #48]	; (8024080 <_fflush_r+0x48>)
 802404e:	429c      	cmp	r4, r3
 8024050:	d109      	bne.n	8024066 <_fflush_r+0x2e>
 8024052:	686c      	ldr	r4, [r5, #4]
 8024054:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024058:	b17b      	cbz	r3, 802407a <_fflush_r+0x42>
 802405a:	4621      	mov	r1, r4
 802405c:	4628      	mov	r0, r5
 802405e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024062:	f7ff bf63 	b.w	8023f2c <__sflush_r>
 8024066:	4b07      	ldr	r3, [pc, #28]	; (8024084 <_fflush_r+0x4c>)
 8024068:	429c      	cmp	r4, r3
 802406a:	d101      	bne.n	8024070 <_fflush_r+0x38>
 802406c:	68ac      	ldr	r4, [r5, #8]
 802406e:	e7f1      	b.n	8024054 <_fflush_r+0x1c>
 8024070:	4b05      	ldr	r3, [pc, #20]	; (8024088 <_fflush_r+0x50>)
 8024072:	429c      	cmp	r4, r3
 8024074:	bf08      	it	eq
 8024076:	68ec      	ldreq	r4, [r5, #12]
 8024078:	e7ec      	b.n	8024054 <_fflush_r+0x1c>
 802407a:	2000      	movs	r0, #0
 802407c:	bd38      	pop	{r3, r4, r5, pc}
 802407e:	bf00      	nop
 8024080:	08028508 	.word	0x08028508
 8024084:	08028528 	.word	0x08028528
 8024088:	080284e8 	.word	0x080284e8

0802408c <std>:
 802408c:	2300      	movs	r3, #0
 802408e:	b510      	push	{r4, lr}
 8024090:	4604      	mov	r4, r0
 8024092:	e9c0 3300 	strd	r3, r3, [r0]
 8024096:	6083      	str	r3, [r0, #8]
 8024098:	8181      	strh	r1, [r0, #12]
 802409a:	6643      	str	r3, [r0, #100]	; 0x64
 802409c:	81c2      	strh	r2, [r0, #14]
 802409e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80240a2:	6183      	str	r3, [r0, #24]
 80240a4:	4619      	mov	r1, r3
 80240a6:	2208      	movs	r2, #8
 80240a8:	305c      	adds	r0, #92	; 0x5c
 80240aa:	f7ff fa4e 	bl	802354a <memset>
 80240ae:	4b05      	ldr	r3, [pc, #20]	; (80240c4 <std+0x38>)
 80240b0:	6263      	str	r3, [r4, #36]	; 0x24
 80240b2:	4b05      	ldr	r3, [pc, #20]	; (80240c8 <std+0x3c>)
 80240b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80240b6:	4b05      	ldr	r3, [pc, #20]	; (80240cc <std+0x40>)
 80240b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80240ba:	4b05      	ldr	r3, [pc, #20]	; (80240d0 <std+0x44>)
 80240bc:	6224      	str	r4, [r4, #32]
 80240be:	6323      	str	r3, [r4, #48]	; 0x30
 80240c0:	bd10      	pop	{r4, pc}
 80240c2:	bf00      	nop
 80240c4:	080242ed 	.word	0x080242ed
 80240c8:	0802430f 	.word	0x0802430f
 80240cc:	08024347 	.word	0x08024347
 80240d0:	0802436b 	.word	0x0802436b

080240d4 <_cleanup_r>:
 80240d4:	4901      	ldr	r1, [pc, #4]	; (80240dc <_cleanup_r+0x8>)
 80240d6:	f000 b885 	b.w	80241e4 <_fwalk_reent>
 80240da:	bf00      	nop
 80240dc:	08024039 	.word	0x08024039

080240e0 <__sfmoreglue>:
 80240e0:	b570      	push	{r4, r5, r6, lr}
 80240e2:	1e4a      	subs	r2, r1, #1
 80240e4:	2568      	movs	r5, #104	; 0x68
 80240e6:	4355      	muls	r5, r2
 80240e8:	460e      	mov	r6, r1
 80240ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80240ee:	f7ff fa83 	bl	80235f8 <_malloc_r>
 80240f2:	4604      	mov	r4, r0
 80240f4:	b140      	cbz	r0, 8024108 <__sfmoreglue+0x28>
 80240f6:	2100      	movs	r1, #0
 80240f8:	e9c0 1600 	strd	r1, r6, [r0]
 80240fc:	300c      	adds	r0, #12
 80240fe:	60a0      	str	r0, [r4, #8]
 8024100:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8024104:	f7ff fa21 	bl	802354a <memset>
 8024108:	4620      	mov	r0, r4
 802410a:	bd70      	pop	{r4, r5, r6, pc}

0802410c <__sinit>:
 802410c:	6983      	ldr	r3, [r0, #24]
 802410e:	b510      	push	{r4, lr}
 8024110:	4604      	mov	r4, r0
 8024112:	bb33      	cbnz	r3, 8024162 <__sinit+0x56>
 8024114:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8024118:	6503      	str	r3, [r0, #80]	; 0x50
 802411a:	4b12      	ldr	r3, [pc, #72]	; (8024164 <__sinit+0x58>)
 802411c:	4a12      	ldr	r2, [pc, #72]	; (8024168 <__sinit+0x5c>)
 802411e:	681b      	ldr	r3, [r3, #0]
 8024120:	6282      	str	r2, [r0, #40]	; 0x28
 8024122:	4298      	cmp	r0, r3
 8024124:	bf04      	itt	eq
 8024126:	2301      	moveq	r3, #1
 8024128:	6183      	streq	r3, [r0, #24]
 802412a:	f000 f81f 	bl	802416c <__sfp>
 802412e:	6060      	str	r0, [r4, #4]
 8024130:	4620      	mov	r0, r4
 8024132:	f000 f81b 	bl	802416c <__sfp>
 8024136:	60a0      	str	r0, [r4, #8]
 8024138:	4620      	mov	r0, r4
 802413a:	f000 f817 	bl	802416c <__sfp>
 802413e:	2200      	movs	r2, #0
 8024140:	60e0      	str	r0, [r4, #12]
 8024142:	2104      	movs	r1, #4
 8024144:	6860      	ldr	r0, [r4, #4]
 8024146:	f7ff ffa1 	bl	802408c <std>
 802414a:	2201      	movs	r2, #1
 802414c:	2109      	movs	r1, #9
 802414e:	68a0      	ldr	r0, [r4, #8]
 8024150:	f7ff ff9c 	bl	802408c <std>
 8024154:	2202      	movs	r2, #2
 8024156:	2112      	movs	r1, #18
 8024158:	68e0      	ldr	r0, [r4, #12]
 802415a:	f7ff ff97 	bl	802408c <std>
 802415e:	2301      	movs	r3, #1
 8024160:	61a3      	str	r3, [r4, #24]
 8024162:	bd10      	pop	{r4, pc}
 8024164:	080284ac 	.word	0x080284ac
 8024168:	080240d5 	.word	0x080240d5

0802416c <__sfp>:
 802416c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802416e:	4b1b      	ldr	r3, [pc, #108]	; (80241dc <__sfp+0x70>)
 8024170:	681e      	ldr	r6, [r3, #0]
 8024172:	69b3      	ldr	r3, [r6, #24]
 8024174:	4607      	mov	r7, r0
 8024176:	b913      	cbnz	r3, 802417e <__sfp+0x12>
 8024178:	4630      	mov	r0, r6
 802417a:	f7ff ffc7 	bl	802410c <__sinit>
 802417e:	3648      	adds	r6, #72	; 0x48
 8024180:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8024184:	3b01      	subs	r3, #1
 8024186:	d503      	bpl.n	8024190 <__sfp+0x24>
 8024188:	6833      	ldr	r3, [r6, #0]
 802418a:	b133      	cbz	r3, 802419a <__sfp+0x2e>
 802418c:	6836      	ldr	r6, [r6, #0]
 802418e:	e7f7      	b.n	8024180 <__sfp+0x14>
 8024190:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8024194:	b16d      	cbz	r5, 80241b2 <__sfp+0x46>
 8024196:	3468      	adds	r4, #104	; 0x68
 8024198:	e7f4      	b.n	8024184 <__sfp+0x18>
 802419a:	2104      	movs	r1, #4
 802419c:	4638      	mov	r0, r7
 802419e:	f7ff ff9f 	bl	80240e0 <__sfmoreglue>
 80241a2:	6030      	str	r0, [r6, #0]
 80241a4:	2800      	cmp	r0, #0
 80241a6:	d1f1      	bne.n	802418c <__sfp+0x20>
 80241a8:	230c      	movs	r3, #12
 80241aa:	603b      	str	r3, [r7, #0]
 80241ac:	4604      	mov	r4, r0
 80241ae:	4620      	mov	r0, r4
 80241b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80241b2:	4b0b      	ldr	r3, [pc, #44]	; (80241e0 <__sfp+0x74>)
 80241b4:	6665      	str	r5, [r4, #100]	; 0x64
 80241b6:	e9c4 5500 	strd	r5, r5, [r4]
 80241ba:	60a5      	str	r5, [r4, #8]
 80241bc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80241c0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80241c4:	2208      	movs	r2, #8
 80241c6:	4629      	mov	r1, r5
 80241c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80241cc:	f7ff f9bd 	bl	802354a <memset>
 80241d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80241d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80241d8:	e7e9      	b.n	80241ae <__sfp+0x42>
 80241da:	bf00      	nop
 80241dc:	080284ac 	.word	0x080284ac
 80241e0:	ffff0001 	.word	0xffff0001

080241e4 <_fwalk_reent>:
 80241e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80241e8:	4680      	mov	r8, r0
 80241ea:	4689      	mov	r9, r1
 80241ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80241f0:	2600      	movs	r6, #0
 80241f2:	b914      	cbnz	r4, 80241fa <_fwalk_reent+0x16>
 80241f4:	4630      	mov	r0, r6
 80241f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80241fa:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80241fe:	3f01      	subs	r7, #1
 8024200:	d501      	bpl.n	8024206 <_fwalk_reent+0x22>
 8024202:	6824      	ldr	r4, [r4, #0]
 8024204:	e7f5      	b.n	80241f2 <_fwalk_reent+0xe>
 8024206:	89ab      	ldrh	r3, [r5, #12]
 8024208:	2b01      	cmp	r3, #1
 802420a:	d907      	bls.n	802421c <_fwalk_reent+0x38>
 802420c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8024210:	3301      	adds	r3, #1
 8024212:	d003      	beq.n	802421c <_fwalk_reent+0x38>
 8024214:	4629      	mov	r1, r5
 8024216:	4640      	mov	r0, r8
 8024218:	47c8      	blx	r9
 802421a:	4306      	orrs	r6, r0
 802421c:	3568      	adds	r5, #104	; 0x68
 802421e:	e7ee      	b.n	80241fe <_fwalk_reent+0x1a>

08024220 <__swhatbuf_r>:
 8024220:	b570      	push	{r4, r5, r6, lr}
 8024222:	460e      	mov	r6, r1
 8024224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024228:	2900      	cmp	r1, #0
 802422a:	b096      	sub	sp, #88	; 0x58
 802422c:	4614      	mov	r4, r2
 802422e:	461d      	mov	r5, r3
 8024230:	da07      	bge.n	8024242 <__swhatbuf_r+0x22>
 8024232:	2300      	movs	r3, #0
 8024234:	602b      	str	r3, [r5, #0]
 8024236:	89b3      	ldrh	r3, [r6, #12]
 8024238:	061a      	lsls	r2, r3, #24
 802423a:	d410      	bmi.n	802425e <__swhatbuf_r+0x3e>
 802423c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8024240:	e00e      	b.n	8024260 <__swhatbuf_r+0x40>
 8024242:	466a      	mov	r2, sp
 8024244:	f000 f8b8 	bl	80243b8 <_fstat_r>
 8024248:	2800      	cmp	r0, #0
 802424a:	dbf2      	blt.n	8024232 <__swhatbuf_r+0x12>
 802424c:	9a01      	ldr	r2, [sp, #4]
 802424e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8024252:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8024256:	425a      	negs	r2, r3
 8024258:	415a      	adcs	r2, r3
 802425a:	602a      	str	r2, [r5, #0]
 802425c:	e7ee      	b.n	802423c <__swhatbuf_r+0x1c>
 802425e:	2340      	movs	r3, #64	; 0x40
 8024260:	2000      	movs	r0, #0
 8024262:	6023      	str	r3, [r4, #0]
 8024264:	b016      	add	sp, #88	; 0x58
 8024266:	bd70      	pop	{r4, r5, r6, pc}

08024268 <__smakebuf_r>:
 8024268:	898b      	ldrh	r3, [r1, #12]
 802426a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802426c:	079d      	lsls	r5, r3, #30
 802426e:	4606      	mov	r6, r0
 8024270:	460c      	mov	r4, r1
 8024272:	d507      	bpl.n	8024284 <__smakebuf_r+0x1c>
 8024274:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8024278:	6023      	str	r3, [r4, #0]
 802427a:	6123      	str	r3, [r4, #16]
 802427c:	2301      	movs	r3, #1
 802427e:	6163      	str	r3, [r4, #20]
 8024280:	b002      	add	sp, #8
 8024282:	bd70      	pop	{r4, r5, r6, pc}
 8024284:	ab01      	add	r3, sp, #4
 8024286:	466a      	mov	r2, sp
 8024288:	f7ff ffca 	bl	8024220 <__swhatbuf_r>
 802428c:	9900      	ldr	r1, [sp, #0]
 802428e:	4605      	mov	r5, r0
 8024290:	4630      	mov	r0, r6
 8024292:	f7ff f9b1 	bl	80235f8 <_malloc_r>
 8024296:	b948      	cbnz	r0, 80242ac <__smakebuf_r+0x44>
 8024298:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802429c:	059a      	lsls	r2, r3, #22
 802429e:	d4ef      	bmi.n	8024280 <__smakebuf_r+0x18>
 80242a0:	f023 0303 	bic.w	r3, r3, #3
 80242a4:	f043 0302 	orr.w	r3, r3, #2
 80242a8:	81a3      	strh	r3, [r4, #12]
 80242aa:	e7e3      	b.n	8024274 <__smakebuf_r+0xc>
 80242ac:	4b0d      	ldr	r3, [pc, #52]	; (80242e4 <__smakebuf_r+0x7c>)
 80242ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80242b0:	89a3      	ldrh	r3, [r4, #12]
 80242b2:	6020      	str	r0, [r4, #0]
 80242b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80242b8:	81a3      	strh	r3, [r4, #12]
 80242ba:	9b00      	ldr	r3, [sp, #0]
 80242bc:	6163      	str	r3, [r4, #20]
 80242be:	9b01      	ldr	r3, [sp, #4]
 80242c0:	6120      	str	r0, [r4, #16]
 80242c2:	b15b      	cbz	r3, 80242dc <__smakebuf_r+0x74>
 80242c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80242c8:	4630      	mov	r0, r6
 80242ca:	f000 f887 	bl	80243dc <_isatty_r>
 80242ce:	b128      	cbz	r0, 80242dc <__smakebuf_r+0x74>
 80242d0:	89a3      	ldrh	r3, [r4, #12]
 80242d2:	f023 0303 	bic.w	r3, r3, #3
 80242d6:	f043 0301 	orr.w	r3, r3, #1
 80242da:	81a3      	strh	r3, [r4, #12]
 80242dc:	89a3      	ldrh	r3, [r4, #12]
 80242de:	431d      	orrs	r5, r3
 80242e0:	81a5      	strh	r5, [r4, #12]
 80242e2:	e7cd      	b.n	8024280 <__smakebuf_r+0x18>
 80242e4:	080240d5 	.word	0x080240d5

080242e8 <__malloc_lock>:
 80242e8:	4770      	bx	lr

080242ea <__malloc_unlock>:
 80242ea:	4770      	bx	lr

080242ec <__sread>:
 80242ec:	b510      	push	{r4, lr}
 80242ee:	460c      	mov	r4, r1
 80242f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80242f4:	f000 f894 	bl	8024420 <_read_r>
 80242f8:	2800      	cmp	r0, #0
 80242fa:	bfab      	itete	ge
 80242fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80242fe:	89a3      	ldrhlt	r3, [r4, #12]
 8024300:	181b      	addge	r3, r3, r0
 8024302:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8024306:	bfac      	ite	ge
 8024308:	6563      	strge	r3, [r4, #84]	; 0x54
 802430a:	81a3      	strhlt	r3, [r4, #12]
 802430c:	bd10      	pop	{r4, pc}

0802430e <__swrite>:
 802430e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024312:	461f      	mov	r7, r3
 8024314:	898b      	ldrh	r3, [r1, #12]
 8024316:	05db      	lsls	r3, r3, #23
 8024318:	4605      	mov	r5, r0
 802431a:	460c      	mov	r4, r1
 802431c:	4616      	mov	r6, r2
 802431e:	d505      	bpl.n	802432c <__swrite+0x1e>
 8024320:	2302      	movs	r3, #2
 8024322:	2200      	movs	r2, #0
 8024324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024328:	f000 f868 	bl	80243fc <_lseek_r>
 802432c:	89a3      	ldrh	r3, [r4, #12]
 802432e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8024332:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8024336:	81a3      	strh	r3, [r4, #12]
 8024338:	4632      	mov	r2, r6
 802433a:	463b      	mov	r3, r7
 802433c:	4628      	mov	r0, r5
 802433e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024342:	f000 b817 	b.w	8024374 <_write_r>

08024346 <__sseek>:
 8024346:	b510      	push	{r4, lr}
 8024348:	460c      	mov	r4, r1
 802434a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802434e:	f000 f855 	bl	80243fc <_lseek_r>
 8024352:	1c43      	adds	r3, r0, #1
 8024354:	89a3      	ldrh	r3, [r4, #12]
 8024356:	bf15      	itete	ne
 8024358:	6560      	strne	r0, [r4, #84]	; 0x54
 802435a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802435e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8024362:	81a3      	strheq	r3, [r4, #12]
 8024364:	bf18      	it	ne
 8024366:	81a3      	strhne	r3, [r4, #12]
 8024368:	bd10      	pop	{r4, pc}

0802436a <__sclose>:
 802436a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802436e:	f000 b813 	b.w	8024398 <_close_r>
	...

08024374 <_write_r>:
 8024374:	b538      	push	{r3, r4, r5, lr}
 8024376:	4c07      	ldr	r4, [pc, #28]	; (8024394 <_write_r+0x20>)
 8024378:	4605      	mov	r5, r0
 802437a:	4608      	mov	r0, r1
 802437c:	4611      	mov	r1, r2
 802437e:	2200      	movs	r2, #0
 8024380:	6022      	str	r2, [r4, #0]
 8024382:	461a      	mov	r2, r3
 8024384:	f7de fd05 	bl	8002d92 <_write>
 8024388:	1c43      	adds	r3, r0, #1
 802438a:	d102      	bne.n	8024392 <_write_r+0x1e>
 802438c:	6823      	ldr	r3, [r4, #0]
 802438e:	b103      	cbz	r3, 8024392 <_write_r+0x1e>
 8024390:	602b      	str	r3, [r5, #0]
 8024392:	bd38      	pop	{r3, r4, r5, pc}
 8024394:	2000c998 	.word	0x2000c998

08024398 <_close_r>:
 8024398:	b538      	push	{r3, r4, r5, lr}
 802439a:	4c06      	ldr	r4, [pc, #24]	; (80243b4 <_close_r+0x1c>)
 802439c:	2300      	movs	r3, #0
 802439e:	4605      	mov	r5, r0
 80243a0:	4608      	mov	r0, r1
 80243a2:	6023      	str	r3, [r4, #0]
 80243a4:	f7de fd11 	bl	8002dca <_close>
 80243a8:	1c43      	adds	r3, r0, #1
 80243aa:	d102      	bne.n	80243b2 <_close_r+0x1a>
 80243ac:	6823      	ldr	r3, [r4, #0]
 80243ae:	b103      	cbz	r3, 80243b2 <_close_r+0x1a>
 80243b0:	602b      	str	r3, [r5, #0]
 80243b2:	bd38      	pop	{r3, r4, r5, pc}
 80243b4:	2000c998 	.word	0x2000c998

080243b8 <_fstat_r>:
 80243b8:	b538      	push	{r3, r4, r5, lr}
 80243ba:	4c07      	ldr	r4, [pc, #28]	; (80243d8 <_fstat_r+0x20>)
 80243bc:	2300      	movs	r3, #0
 80243be:	4605      	mov	r5, r0
 80243c0:	4608      	mov	r0, r1
 80243c2:	4611      	mov	r1, r2
 80243c4:	6023      	str	r3, [r4, #0]
 80243c6:	f7de fd0c 	bl	8002de2 <_fstat>
 80243ca:	1c43      	adds	r3, r0, #1
 80243cc:	d102      	bne.n	80243d4 <_fstat_r+0x1c>
 80243ce:	6823      	ldr	r3, [r4, #0]
 80243d0:	b103      	cbz	r3, 80243d4 <_fstat_r+0x1c>
 80243d2:	602b      	str	r3, [r5, #0]
 80243d4:	bd38      	pop	{r3, r4, r5, pc}
 80243d6:	bf00      	nop
 80243d8:	2000c998 	.word	0x2000c998

080243dc <_isatty_r>:
 80243dc:	b538      	push	{r3, r4, r5, lr}
 80243de:	4c06      	ldr	r4, [pc, #24]	; (80243f8 <_isatty_r+0x1c>)
 80243e0:	2300      	movs	r3, #0
 80243e2:	4605      	mov	r5, r0
 80243e4:	4608      	mov	r0, r1
 80243e6:	6023      	str	r3, [r4, #0]
 80243e8:	f7de fd0b 	bl	8002e02 <_isatty>
 80243ec:	1c43      	adds	r3, r0, #1
 80243ee:	d102      	bne.n	80243f6 <_isatty_r+0x1a>
 80243f0:	6823      	ldr	r3, [r4, #0]
 80243f2:	b103      	cbz	r3, 80243f6 <_isatty_r+0x1a>
 80243f4:	602b      	str	r3, [r5, #0]
 80243f6:	bd38      	pop	{r3, r4, r5, pc}
 80243f8:	2000c998 	.word	0x2000c998

080243fc <_lseek_r>:
 80243fc:	b538      	push	{r3, r4, r5, lr}
 80243fe:	4c07      	ldr	r4, [pc, #28]	; (802441c <_lseek_r+0x20>)
 8024400:	4605      	mov	r5, r0
 8024402:	4608      	mov	r0, r1
 8024404:	4611      	mov	r1, r2
 8024406:	2200      	movs	r2, #0
 8024408:	6022      	str	r2, [r4, #0]
 802440a:	461a      	mov	r2, r3
 802440c:	f7de fd04 	bl	8002e18 <_lseek>
 8024410:	1c43      	adds	r3, r0, #1
 8024412:	d102      	bne.n	802441a <_lseek_r+0x1e>
 8024414:	6823      	ldr	r3, [r4, #0]
 8024416:	b103      	cbz	r3, 802441a <_lseek_r+0x1e>
 8024418:	602b      	str	r3, [r5, #0]
 802441a:	bd38      	pop	{r3, r4, r5, pc}
 802441c:	2000c998 	.word	0x2000c998

08024420 <_read_r>:
 8024420:	b538      	push	{r3, r4, r5, lr}
 8024422:	4c07      	ldr	r4, [pc, #28]	; (8024440 <_read_r+0x20>)
 8024424:	4605      	mov	r5, r0
 8024426:	4608      	mov	r0, r1
 8024428:	4611      	mov	r1, r2
 802442a:	2200      	movs	r2, #0
 802442c:	6022      	str	r2, [r4, #0]
 802442e:	461a      	mov	r2, r3
 8024430:	f7de fc92 	bl	8002d58 <_read>
 8024434:	1c43      	adds	r3, r0, #1
 8024436:	d102      	bne.n	802443e <_read_r+0x1e>
 8024438:	6823      	ldr	r3, [r4, #0]
 802443a:	b103      	cbz	r3, 802443e <_read_r+0x1e>
 802443c:	602b      	str	r3, [r5, #0]
 802443e:	bd38      	pop	{r3, r4, r5, pc}
 8024440:	2000c998 	.word	0x2000c998

08024444 <_init>:
 8024444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024446:	bf00      	nop
 8024448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802444a:	bc08      	pop	{r3}
 802444c:	469e      	mov	lr, r3
 802444e:	4770      	bx	lr

08024450 <_fini>:
 8024450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024452:	bf00      	nop
 8024454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024456:	bc08      	pop	{r3}
 8024458:	469e      	mov	lr, r3
 802445a:	4770      	bx	lr
