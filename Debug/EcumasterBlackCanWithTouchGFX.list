
EcumasterBlackCanWithTouchGFX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00025a7c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004338  08025c4c  08025c4c  00035c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00003cac  08029f84  08029f84  00039f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 ExtFlashSection 000334f8  0802dc30  0802dc30  0003dc30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 00000220  08061128  08061128  00071128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  08061348  08061348  00080100  2**0
                  CONTENTS
  7 .ARM          00000008  08061348  08061348  00071348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  08061350  08061350  00080100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000014  08061350  08061350  00071350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  08061364  08061364  00071364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         00000100  20000000  0806136c  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0000ca40  20000100  0806146c  00080100  2**2
                  ALLOC
 13 ._user_heap_stack 00000600  2000cb40  0806146c  0008cb40  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  00080100  2**0
                  CONTENTS, READONLY
 15 .debug_info   0005b40b  00000000  00000000  00080130  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 0000efae  00000000  00000000  000db53b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 000041b0  00000000  00000000  000ea4f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00003b90  00000000  00000000  000ee6a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  0003af09  00000000  00000000  000f2230  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   00041862  00000000  00000000  0012d139  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    0012f2fc  00000000  00000000  0016e99b  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      000000fa  00000000  00000000  0029dc97  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00011a48  00000000  00000000  0029dd94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000100 	.word	0x20000100
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08025c34 	.word	0x08025c34

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000104 	.word	0x20000104
 800020c:	08025c34 	.word	0x08025c34

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__gedf2>:
 8000628:	f04f 3cff 	mov.w	ip, #4294967295
 800062c:	e006      	b.n	800063c <__cmpdf2+0x4>
 800062e:	bf00      	nop

08000630 <__ledf2>:
 8000630:	f04f 0c01 	mov.w	ip, #1
 8000634:	e002      	b.n	800063c <__cmpdf2+0x4>
 8000636:	bf00      	nop

08000638 <__cmpdf2>:
 8000638:	f04f 0c01 	mov.w	ip, #1
 800063c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000640:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000644:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000648:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800064c:	bf18      	it	ne
 800064e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000652:	d01b      	beq.n	800068c <__cmpdf2+0x54>
 8000654:	b001      	add	sp, #4
 8000656:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800065a:	bf0c      	ite	eq
 800065c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000660:	ea91 0f03 	teqne	r1, r3
 8000664:	bf02      	ittt	eq
 8000666:	ea90 0f02 	teqeq	r0, r2
 800066a:	2000      	moveq	r0, #0
 800066c:	4770      	bxeq	lr
 800066e:	f110 0f00 	cmn.w	r0, #0
 8000672:	ea91 0f03 	teq	r1, r3
 8000676:	bf58      	it	pl
 8000678:	4299      	cmppl	r1, r3
 800067a:	bf08      	it	eq
 800067c:	4290      	cmpeq	r0, r2
 800067e:	bf2c      	ite	cs
 8000680:	17d8      	asrcs	r0, r3, #31
 8000682:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000686:	f040 0001 	orr.w	r0, r0, #1
 800068a:	4770      	bx	lr
 800068c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000690:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000694:	d102      	bne.n	800069c <__cmpdf2+0x64>
 8000696:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800069a:	d107      	bne.n	80006ac <__cmpdf2+0x74>
 800069c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006a4:	d1d6      	bne.n	8000654 <__cmpdf2+0x1c>
 80006a6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006aa:	d0d3      	beq.n	8000654 <__cmpdf2+0x1c>
 80006ac:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <__aeabi_cdrcmple>:
 80006b4:	4684      	mov	ip, r0
 80006b6:	4610      	mov	r0, r2
 80006b8:	4662      	mov	r2, ip
 80006ba:	468c      	mov	ip, r1
 80006bc:	4619      	mov	r1, r3
 80006be:	4663      	mov	r3, ip
 80006c0:	e000      	b.n	80006c4 <__aeabi_cdcmpeq>
 80006c2:	bf00      	nop

080006c4 <__aeabi_cdcmpeq>:
 80006c4:	b501      	push	{r0, lr}
 80006c6:	f7ff ffb7 	bl	8000638 <__cmpdf2>
 80006ca:	2800      	cmp	r0, #0
 80006cc:	bf48      	it	mi
 80006ce:	f110 0f00 	cmnmi.w	r0, #0
 80006d2:	bd01      	pop	{r0, pc}

080006d4 <__aeabi_dcmpeq>:
 80006d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d8:	f7ff fff4 	bl	80006c4 <__aeabi_cdcmpeq>
 80006dc:	bf0c      	ite	eq
 80006de:	2001      	moveq	r0, #1
 80006e0:	2000      	movne	r0, #0
 80006e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e6:	bf00      	nop

080006e8 <__aeabi_dcmplt>:
 80006e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ec:	f7ff ffea 	bl	80006c4 <__aeabi_cdcmpeq>
 80006f0:	bf34      	ite	cc
 80006f2:	2001      	movcc	r0, #1
 80006f4:	2000      	movcs	r0, #0
 80006f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006fa:	bf00      	nop

080006fc <__aeabi_dcmple>:
 80006fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000700:	f7ff ffe0 	bl	80006c4 <__aeabi_cdcmpeq>
 8000704:	bf94      	ite	ls
 8000706:	2001      	movls	r0, #1
 8000708:	2000      	movhi	r0, #0
 800070a:	f85d fb08 	ldr.w	pc, [sp], #8
 800070e:	bf00      	nop

08000710 <__aeabi_dcmpge>:
 8000710:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000714:	f7ff ffce 	bl	80006b4 <__aeabi_cdrcmple>
 8000718:	bf94      	ite	ls
 800071a:	2001      	movls	r0, #1
 800071c:	2000      	movhi	r0, #0
 800071e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000722:	bf00      	nop

08000724 <__aeabi_dcmpgt>:
 8000724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000728:	f7ff ffc4 	bl	80006b4 <__aeabi_cdrcmple>
 800072c:	bf34      	ite	cc
 800072e:	2001      	movcc	r0, #1
 8000730:	2000      	movcs	r0, #0
 8000732:	f85d fb08 	ldr.w	pc, [sp], #8
 8000736:	bf00      	nop

08000738 <__aeabi_d2f>:
 8000738:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800073c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000740:	bf24      	itt	cs
 8000742:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000746:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800074a:	d90d      	bls.n	8000768 <__aeabi_d2f+0x30>
 800074c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000750:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000754:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000758:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800075c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000760:	bf08      	it	eq
 8000762:	f020 0001 	biceq.w	r0, r0, #1
 8000766:	4770      	bx	lr
 8000768:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800076c:	d121      	bne.n	80007b2 <__aeabi_d2f+0x7a>
 800076e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000772:	bfbc      	itt	lt
 8000774:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000778:	4770      	bxlt	lr
 800077a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800077e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000782:	f1c2 0218 	rsb	r2, r2, #24
 8000786:	f1c2 0c20 	rsb	ip, r2, #32
 800078a:	fa10 f30c 	lsls.w	r3, r0, ip
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	bf18      	it	ne
 8000794:	f040 0001 	orrne.w	r0, r0, #1
 8000798:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800079c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007a0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80007a4:	ea40 000c 	orr.w	r0, r0, ip
 80007a8:	fa23 f302 	lsr.w	r3, r3, r2
 80007ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80007b0:	e7cc      	b.n	800074c <__aeabi_d2f+0x14>
 80007b2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80007b6:	d107      	bne.n	80007c8 <__aeabi_d2f+0x90>
 80007b8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007bc:	bf1e      	ittt	ne
 80007be:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007c2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007c6:	4770      	bxne	lr
 80007c8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop

080007d8 <__aeabi_uldivmod>:
 80007d8:	b953      	cbnz	r3, 80007f0 <__aeabi_uldivmod+0x18>
 80007da:	b94a      	cbnz	r2, 80007f0 <__aeabi_uldivmod+0x18>
 80007dc:	2900      	cmp	r1, #0
 80007de:	bf08      	it	eq
 80007e0:	2800      	cmpeq	r0, #0
 80007e2:	bf1c      	itt	ne
 80007e4:	f04f 31ff 	movne.w	r1, #4294967295
 80007e8:	f04f 30ff 	movne.w	r0, #4294967295
 80007ec:	f000 b972 	b.w	8000ad4 <__aeabi_idiv0>
 80007f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80007f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007f8:	f000 f806 	bl	8000808 <__udivmoddi4>
 80007fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000800:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000804:	b004      	add	sp, #16
 8000806:	4770      	bx	lr

08000808 <__udivmoddi4>:
 8000808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800080c:	9e08      	ldr	r6, [sp, #32]
 800080e:	4604      	mov	r4, r0
 8000810:	4688      	mov	r8, r1
 8000812:	2b00      	cmp	r3, #0
 8000814:	d14b      	bne.n	80008ae <__udivmoddi4+0xa6>
 8000816:	428a      	cmp	r2, r1
 8000818:	4615      	mov	r5, r2
 800081a:	d967      	bls.n	80008ec <__udivmoddi4+0xe4>
 800081c:	fab2 f282 	clz	r2, r2
 8000820:	b14a      	cbz	r2, 8000836 <__udivmoddi4+0x2e>
 8000822:	f1c2 0720 	rsb	r7, r2, #32
 8000826:	fa01 f302 	lsl.w	r3, r1, r2
 800082a:	fa20 f707 	lsr.w	r7, r0, r7
 800082e:	4095      	lsls	r5, r2
 8000830:	ea47 0803 	orr.w	r8, r7, r3
 8000834:	4094      	lsls	r4, r2
 8000836:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800083a:	0c23      	lsrs	r3, r4, #16
 800083c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000840:	fa1f fc85 	uxth.w	ip, r5
 8000844:	fb0e 8817 	mls	r8, lr, r7, r8
 8000848:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800084c:	fb07 f10c 	mul.w	r1, r7, ip
 8000850:	4299      	cmp	r1, r3
 8000852:	d909      	bls.n	8000868 <__udivmoddi4+0x60>
 8000854:	18eb      	adds	r3, r5, r3
 8000856:	f107 30ff 	add.w	r0, r7, #4294967295
 800085a:	f080 811b 	bcs.w	8000a94 <__udivmoddi4+0x28c>
 800085e:	4299      	cmp	r1, r3
 8000860:	f240 8118 	bls.w	8000a94 <__udivmoddi4+0x28c>
 8000864:	3f02      	subs	r7, #2
 8000866:	442b      	add	r3, r5
 8000868:	1a5b      	subs	r3, r3, r1
 800086a:	b2a4      	uxth	r4, r4
 800086c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000870:	fb0e 3310 	mls	r3, lr, r0, r3
 8000874:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000878:	fb00 fc0c 	mul.w	ip, r0, ip
 800087c:	45a4      	cmp	ip, r4
 800087e:	d909      	bls.n	8000894 <__udivmoddi4+0x8c>
 8000880:	192c      	adds	r4, r5, r4
 8000882:	f100 33ff 	add.w	r3, r0, #4294967295
 8000886:	f080 8107 	bcs.w	8000a98 <__udivmoddi4+0x290>
 800088a:	45a4      	cmp	ip, r4
 800088c:	f240 8104 	bls.w	8000a98 <__udivmoddi4+0x290>
 8000890:	3802      	subs	r0, #2
 8000892:	442c      	add	r4, r5
 8000894:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000898:	eba4 040c 	sub.w	r4, r4, ip
 800089c:	2700      	movs	r7, #0
 800089e:	b11e      	cbz	r6, 80008a8 <__udivmoddi4+0xa0>
 80008a0:	40d4      	lsrs	r4, r2
 80008a2:	2300      	movs	r3, #0
 80008a4:	e9c6 4300 	strd	r4, r3, [r6]
 80008a8:	4639      	mov	r1, r7
 80008aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ae:	428b      	cmp	r3, r1
 80008b0:	d909      	bls.n	80008c6 <__udivmoddi4+0xbe>
 80008b2:	2e00      	cmp	r6, #0
 80008b4:	f000 80eb 	beq.w	8000a8e <__udivmoddi4+0x286>
 80008b8:	2700      	movs	r7, #0
 80008ba:	e9c6 0100 	strd	r0, r1, [r6]
 80008be:	4638      	mov	r0, r7
 80008c0:	4639      	mov	r1, r7
 80008c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008c6:	fab3 f783 	clz	r7, r3
 80008ca:	2f00      	cmp	r7, #0
 80008cc:	d147      	bne.n	800095e <__udivmoddi4+0x156>
 80008ce:	428b      	cmp	r3, r1
 80008d0:	d302      	bcc.n	80008d8 <__udivmoddi4+0xd0>
 80008d2:	4282      	cmp	r2, r0
 80008d4:	f200 80fa 	bhi.w	8000acc <__udivmoddi4+0x2c4>
 80008d8:	1a84      	subs	r4, r0, r2
 80008da:	eb61 0303 	sbc.w	r3, r1, r3
 80008de:	2001      	movs	r0, #1
 80008e0:	4698      	mov	r8, r3
 80008e2:	2e00      	cmp	r6, #0
 80008e4:	d0e0      	beq.n	80008a8 <__udivmoddi4+0xa0>
 80008e6:	e9c6 4800 	strd	r4, r8, [r6]
 80008ea:	e7dd      	b.n	80008a8 <__udivmoddi4+0xa0>
 80008ec:	b902      	cbnz	r2, 80008f0 <__udivmoddi4+0xe8>
 80008ee:	deff      	udf	#255	; 0xff
 80008f0:	fab2 f282 	clz	r2, r2
 80008f4:	2a00      	cmp	r2, #0
 80008f6:	f040 808f 	bne.w	8000a18 <__udivmoddi4+0x210>
 80008fa:	1b49      	subs	r1, r1, r5
 80008fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000900:	fa1f f885 	uxth.w	r8, r5
 8000904:	2701      	movs	r7, #1
 8000906:	fbb1 fcfe 	udiv	ip, r1, lr
 800090a:	0c23      	lsrs	r3, r4, #16
 800090c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000910:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000914:	fb08 f10c 	mul.w	r1, r8, ip
 8000918:	4299      	cmp	r1, r3
 800091a:	d907      	bls.n	800092c <__udivmoddi4+0x124>
 800091c:	18eb      	adds	r3, r5, r3
 800091e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000922:	d202      	bcs.n	800092a <__udivmoddi4+0x122>
 8000924:	4299      	cmp	r1, r3
 8000926:	f200 80cd 	bhi.w	8000ac4 <__udivmoddi4+0x2bc>
 800092a:	4684      	mov	ip, r0
 800092c:	1a59      	subs	r1, r3, r1
 800092e:	b2a3      	uxth	r3, r4
 8000930:	fbb1 f0fe 	udiv	r0, r1, lr
 8000934:	fb0e 1410 	mls	r4, lr, r0, r1
 8000938:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800093c:	fb08 f800 	mul.w	r8, r8, r0
 8000940:	45a0      	cmp	r8, r4
 8000942:	d907      	bls.n	8000954 <__udivmoddi4+0x14c>
 8000944:	192c      	adds	r4, r5, r4
 8000946:	f100 33ff 	add.w	r3, r0, #4294967295
 800094a:	d202      	bcs.n	8000952 <__udivmoddi4+0x14a>
 800094c:	45a0      	cmp	r8, r4
 800094e:	f200 80b6 	bhi.w	8000abe <__udivmoddi4+0x2b6>
 8000952:	4618      	mov	r0, r3
 8000954:	eba4 0408 	sub.w	r4, r4, r8
 8000958:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800095c:	e79f      	b.n	800089e <__udivmoddi4+0x96>
 800095e:	f1c7 0c20 	rsb	ip, r7, #32
 8000962:	40bb      	lsls	r3, r7
 8000964:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000968:	ea4e 0e03 	orr.w	lr, lr, r3
 800096c:	fa01 f407 	lsl.w	r4, r1, r7
 8000970:	fa20 f50c 	lsr.w	r5, r0, ip
 8000974:	fa21 f30c 	lsr.w	r3, r1, ip
 8000978:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800097c:	4325      	orrs	r5, r4
 800097e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000982:	0c2c      	lsrs	r4, r5, #16
 8000984:	fb08 3319 	mls	r3, r8, r9, r3
 8000988:	fa1f fa8e 	uxth.w	sl, lr
 800098c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000990:	fb09 f40a 	mul.w	r4, r9, sl
 8000994:	429c      	cmp	r4, r3
 8000996:	fa02 f207 	lsl.w	r2, r2, r7
 800099a:	fa00 f107 	lsl.w	r1, r0, r7
 800099e:	d90b      	bls.n	80009b8 <__udivmoddi4+0x1b0>
 80009a0:	eb1e 0303 	adds.w	r3, lr, r3
 80009a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80009a8:	f080 8087 	bcs.w	8000aba <__udivmoddi4+0x2b2>
 80009ac:	429c      	cmp	r4, r3
 80009ae:	f240 8084 	bls.w	8000aba <__udivmoddi4+0x2b2>
 80009b2:	f1a9 0902 	sub.w	r9, r9, #2
 80009b6:	4473      	add	r3, lr
 80009b8:	1b1b      	subs	r3, r3, r4
 80009ba:	b2ad      	uxth	r5, r5
 80009bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009c0:	fb08 3310 	mls	r3, r8, r0, r3
 80009c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80009c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80009cc:	45a2      	cmp	sl, r4
 80009ce:	d908      	bls.n	80009e2 <__udivmoddi4+0x1da>
 80009d0:	eb1e 0404 	adds.w	r4, lr, r4
 80009d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80009d8:	d26b      	bcs.n	8000ab2 <__udivmoddi4+0x2aa>
 80009da:	45a2      	cmp	sl, r4
 80009dc:	d969      	bls.n	8000ab2 <__udivmoddi4+0x2aa>
 80009de:	3802      	subs	r0, #2
 80009e0:	4474      	add	r4, lr
 80009e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80009e6:	fba0 8902 	umull	r8, r9, r0, r2
 80009ea:	eba4 040a 	sub.w	r4, r4, sl
 80009ee:	454c      	cmp	r4, r9
 80009f0:	46c2      	mov	sl, r8
 80009f2:	464b      	mov	r3, r9
 80009f4:	d354      	bcc.n	8000aa0 <__udivmoddi4+0x298>
 80009f6:	d051      	beq.n	8000a9c <__udivmoddi4+0x294>
 80009f8:	2e00      	cmp	r6, #0
 80009fa:	d069      	beq.n	8000ad0 <__udivmoddi4+0x2c8>
 80009fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000a00:	eb64 0403 	sbc.w	r4, r4, r3
 8000a04:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000a08:	40fd      	lsrs	r5, r7
 8000a0a:	40fc      	lsrs	r4, r7
 8000a0c:	ea4c 0505 	orr.w	r5, ip, r5
 8000a10:	e9c6 5400 	strd	r5, r4, [r6]
 8000a14:	2700      	movs	r7, #0
 8000a16:	e747      	b.n	80008a8 <__udivmoddi4+0xa0>
 8000a18:	f1c2 0320 	rsb	r3, r2, #32
 8000a1c:	fa20 f703 	lsr.w	r7, r0, r3
 8000a20:	4095      	lsls	r5, r2
 8000a22:	fa01 f002 	lsl.w	r0, r1, r2
 8000a26:	fa21 f303 	lsr.w	r3, r1, r3
 8000a2a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a2e:	4338      	orrs	r0, r7
 8000a30:	0c01      	lsrs	r1, r0, #16
 8000a32:	fbb3 f7fe 	udiv	r7, r3, lr
 8000a36:	fa1f f885 	uxth.w	r8, r5
 8000a3a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000a3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a42:	fb07 f308 	mul.w	r3, r7, r8
 8000a46:	428b      	cmp	r3, r1
 8000a48:	fa04 f402 	lsl.w	r4, r4, r2
 8000a4c:	d907      	bls.n	8000a5e <__udivmoddi4+0x256>
 8000a4e:	1869      	adds	r1, r5, r1
 8000a50:	f107 3cff 	add.w	ip, r7, #4294967295
 8000a54:	d22f      	bcs.n	8000ab6 <__udivmoddi4+0x2ae>
 8000a56:	428b      	cmp	r3, r1
 8000a58:	d92d      	bls.n	8000ab6 <__udivmoddi4+0x2ae>
 8000a5a:	3f02      	subs	r7, #2
 8000a5c:	4429      	add	r1, r5
 8000a5e:	1acb      	subs	r3, r1, r3
 8000a60:	b281      	uxth	r1, r0
 8000a62:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a66:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a6e:	fb00 f308 	mul.w	r3, r0, r8
 8000a72:	428b      	cmp	r3, r1
 8000a74:	d907      	bls.n	8000a86 <__udivmoddi4+0x27e>
 8000a76:	1869      	adds	r1, r5, r1
 8000a78:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a7c:	d217      	bcs.n	8000aae <__udivmoddi4+0x2a6>
 8000a7e:	428b      	cmp	r3, r1
 8000a80:	d915      	bls.n	8000aae <__udivmoddi4+0x2a6>
 8000a82:	3802      	subs	r0, #2
 8000a84:	4429      	add	r1, r5
 8000a86:	1ac9      	subs	r1, r1, r3
 8000a88:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000a8c:	e73b      	b.n	8000906 <__udivmoddi4+0xfe>
 8000a8e:	4637      	mov	r7, r6
 8000a90:	4630      	mov	r0, r6
 8000a92:	e709      	b.n	80008a8 <__udivmoddi4+0xa0>
 8000a94:	4607      	mov	r7, r0
 8000a96:	e6e7      	b.n	8000868 <__udivmoddi4+0x60>
 8000a98:	4618      	mov	r0, r3
 8000a9a:	e6fb      	b.n	8000894 <__udivmoddi4+0x8c>
 8000a9c:	4541      	cmp	r1, r8
 8000a9e:	d2ab      	bcs.n	80009f8 <__udivmoddi4+0x1f0>
 8000aa0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000aa4:	eb69 020e 	sbc.w	r2, r9, lr
 8000aa8:	3801      	subs	r0, #1
 8000aaa:	4613      	mov	r3, r2
 8000aac:	e7a4      	b.n	80009f8 <__udivmoddi4+0x1f0>
 8000aae:	4660      	mov	r0, ip
 8000ab0:	e7e9      	b.n	8000a86 <__udivmoddi4+0x27e>
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	e795      	b.n	80009e2 <__udivmoddi4+0x1da>
 8000ab6:	4667      	mov	r7, ip
 8000ab8:	e7d1      	b.n	8000a5e <__udivmoddi4+0x256>
 8000aba:	4681      	mov	r9, r0
 8000abc:	e77c      	b.n	80009b8 <__udivmoddi4+0x1b0>
 8000abe:	3802      	subs	r0, #2
 8000ac0:	442c      	add	r4, r5
 8000ac2:	e747      	b.n	8000954 <__udivmoddi4+0x14c>
 8000ac4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ac8:	442b      	add	r3, r5
 8000aca:	e72f      	b.n	800092c <__udivmoddi4+0x124>
 8000acc:	4638      	mov	r0, r7
 8000ace:	e708      	b.n	80008e2 <__udivmoddi4+0xda>
 8000ad0:	4637      	mov	r7, r6
 8000ad2:	e6e9      	b.n	80008a8 <__udivmoddi4+0xa0>

08000ad4 <__aeabi_idiv0>:
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	b083      	sub	sp, #12
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
 8000aee:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
	...

08000b0c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	4a07      	ldr	r2, [pc, #28]	; (8000b38 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b1c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	4a06      	ldr	r2, [pc, #24]	; (8000b3c <vApplicationGetIdleTaskMemory+0x30>)
 8000b22:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2280      	movs	r2, #128	; 0x80
 8000b28:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000b2a:	bf00      	nop
 8000b2c:	3714      	adds	r7, #20
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	2000011c 	.word	0x2000011c
 8000b3c:	20000174 	.word	0x20000174

08000b40 <updateDemoValues>:

extern xQueueHandle messageQ;
extern xQueueHandle settingsMessageQ;

void updateDemoValues(void)
{
 8000b40:	b598      	push	{r3, r4, r7, lr}
 8000b42:	af00      	add	r7, sp, #0
	rpm = (rpm >= 8000) ? 0: rpm + 100;
 8000b44:	4b8a      	ldr	r3, [pc, #552]	; (8000d70 <updateDemoValues+0x230>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8000b4c:	da03      	bge.n	8000b56 <updateDemoValues+0x16>
 8000b4e:	4b88      	ldr	r3, [pc, #544]	; (8000d70 <updateDemoValues+0x230>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	3364      	adds	r3, #100	; 0x64
 8000b54:	e000      	b.n	8000b58 <updateDemoValues+0x18>
 8000b56:	2300      	movs	r3, #0
 8000b58:	4a85      	ldr	r2, [pc, #532]	; (8000d70 <updateDemoValues+0x230>)
 8000b5a:	6013      	str	r3, [r2, #0]
	clt = (clt >= 250) ? -40: clt + 3;
 8000b5c:	4b85      	ldr	r3, [pc, #532]	; (8000d74 <updateDemoValues+0x234>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2bf9      	cmp	r3, #249	; 0xf9
 8000b62:	dc03      	bgt.n	8000b6c <updateDemoValues+0x2c>
 8000b64:	4b83      	ldr	r3, [pc, #524]	; (8000d74 <updateDemoValues+0x234>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	3303      	adds	r3, #3
 8000b6a:	e001      	b.n	8000b70 <updateDemoValues+0x30>
 8000b6c:	f06f 0327 	mvn.w	r3, #39	; 0x27
 8000b70:	4a80      	ldr	r2, [pc, #512]	; (8000d74 <updateDemoValues+0x234>)
 8000b72:	6013      	str	r3, [r2, #0]
	map = (map >= 450) ? 1: map + 6;
 8000b74:	4b80      	ldr	r3, [pc, #512]	; (8000d78 <updateDemoValues+0x238>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8000b7c:	da03      	bge.n	8000b86 <updateDemoValues+0x46>
 8000b7e:	4b7e      	ldr	r3, [pc, #504]	; (8000d78 <updateDemoValues+0x238>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	3306      	adds	r3, #6
 8000b84:	e000      	b.n	8000b88 <updateDemoValues+0x48>
 8000b86:	2301      	movs	r3, #1
 8000b88:	4a7b      	ldr	r2, [pc, #492]	; (8000d78 <updateDemoValues+0x238>)
 8000b8a:	6013      	str	r3, [r2, #0]
	lambda = (lambda >= 1.4) ? 0.6: lambda + 0.05;
 8000b8c:	4b7b      	ldr	r3, [pc, #492]	; (8000d7c <updateDemoValues+0x23c>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff fcf1 	bl	8000578 <__aeabi_f2d>
 8000b96:	a36c      	add	r3, pc, #432	; (adr r3, 8000d48 <updateDemoValues+0x208>)
 8000b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b9c:	f7ff fdb8 	bl	8000710 <__aeabi_dcmpge>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <updateDemoValues+0x6a>
 8000ba6:	4b76      	ldr	r3, [pc, #472]	; (8000d80 <updateDemoValues+0x240>)
 8000ba8:	e010      	b.n	8000bcc <updateDemoValues+0x8c>
 8000baa:	4b74      	ldr	r3, [pc, #464]	; (8000d7c <updateDemoValues+0x23c>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff fce2 	bl	8000578 <__aeabi_f2d>
 8000bb4:	a366      	add	r3, pc, #408	; (adr r3, 8000d50 <updateDemoValues+0x210>)
 8000bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bba:	f7ff fb7f 	bl	80002bc <__adddf3>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	460c      	mov	r4, r1
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	4621      	mov	r1, r4
 8000bc6:	f7ff fdb7 	bl	8000738 <__aeabi_d2f>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	4a6b      	ldr	r2, [pc, #428]	; (8000d7c <updateDemoValues+0x23c>)
 8000bce:	6013      	str	r3, [r2, #0]
	lambdaTarget = (lambdaTarget >= 1.4) ? 0.65: lambdaTarget + 0.06;
 8000bd0:	4b6c      	ldr	r3, [pc, #432]	; (8000d84 <updateDemoValues+0x244>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff fccf 	bl	8000578 <__aeabi_f2d>
 8000bda:	a35b      	add	r3, pc, #364	; (adr r3, 8000d48 <updateDemoValues+0x208>)
 8000bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000be0:	f7ff fd96 	bl	8000710 <__aeabi_dcmpge>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <updateDemoValues+0xae>
 8000bea:	4b67      	ldr	r3, [pc, #412]	; (8000d88 <updateDemoValues+0x248>)
 8000bec:	e010      	b.n	8000c10 <updateDemoValues+0xd0>
 8000bee:	4b65      	ldr	r3, [pc, #404]	; (8000d84 <updateDemoValues+0x244>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff fcc0 	bl	8000578 <__aeabi_f2d>
 8000bf8:	a357      	add	r3, pc, #348	; (adr r3, 8000d58 <updateDemoValues+0x218>)
 8000bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bfe:	f7ff fb5d 	bl	80002bc <__adddf3>
 8000c02:	4603      	mov	r3, r0
 8000c04:	460c      	mov	r4, r1
 8000c06:	4618      	mov	r0, r3
 8000c08:	4621      	mov	r1, r4
 8000c0a:	f7ff fd95 	bl	8000738 <__aeabi_d2f>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	4a5c      	ldr	r2, [pc, #368]	; (8000d84 <updateDemoValues+0x244>)
 8000c12:	6013      	str	r3, [r2, #0]
	vehicleSpeed = (vehicleSpeed >= 400) ? 0: vehicleSpeed + 6;
 8000c14:	4b5d      	ldr	r3, [pc, #372]	; (8000d8c <updateDemoValues+0x24c>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000c1c:	da03      	bge.n	8000c26 <updateDemoValues+0xe6>
 8000c1e:	4b5b      	ldr	r3, [pc, #364]	; (8000d8c <updateDemoValues+0x24c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	3306      	adds	r3, #6
 8000c24:	e000      	b.n	8000c28 <updateDemoValues+0xe8>
 8000c26:	2300      	movs	r3, #0
 8000c28:	4a58      	ldr	r2, [pc, #352]	; (8000d8c <updateDemoValues+0x24c>)
 8000c2a:	6013      	str	r3, [r2, #0]
	oilTemp = (oilTemp >= 160) ? 1: oilTemp + 2;
 8000c2c:	4b58      	ldr	r3, [pc, #352]	; (8000d90 <updateDemoValues+0x250>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2b9f      	cmp	r3, #159	; 0x9f
 8000c32:	dc03      	bgt.n	8000c3c <updateDemoValues+0xfc>
 8000c34:	4b56      	ldr	r3, [pc, #344]	; (8000d90 <updateDemoValues+0x250>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	3302      	adds	r3, #2
 8000c3a:	e000      	b.n	8000c3e <updateDemoValues+0xfe>
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	4a54      	ldr	r2, [pc, #336]	; (8000d90 <updateDemoValues+0x250>)
 8000c40:	6013      	str	r3, [r2, #0]
	oilPress = (oilPress >= 12.0) ? 0.1: oilPress + 0.1;
 8000c42:	4b54      	ldr	r3, [pc, #336]	; (8000d94 <updateDemoValues+0x254>)
 8000c44:	edd3 7a00 	vldr	s15, [r3]
 8000c48:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8000c4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c54:	db01      	blt.n	8000c5a <updateDemoValues+0x11a>
 8000c56:	4b50      	ldr	r3, [pc, #320]	; (8000d98 <updateDemoValues+0x258>)
 8000c58:	e010      	b.n	8000c7c <updateDemoValues+0x13c>
 8000c5a:	4b4e      	ldr	r3, [pc, #312]	; (8000d94 <updateDemoValues+0x254>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff fc8a 	bl	8000578 <__aeabi_f2d>
 8000c64:	a33e      	add	r3, pc, #248	; (adr r3, 8000d60 <updateDemoValues+0x220>)
 8000c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c6a:	f7ff fb27 	bl	80002bc <__adddf3>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	460c      	mov	r4, r1
 8000c72:	4618      	mov	r0, r3
 8000c74:	4621      	mov	r1, r4
 8000c76:	f7ff fd5f 	bl	8000738 <__aeabi_d2f>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	4a45      	ldr	r2, [pc, #276]	; (8000d94 <updateDemoValues+0x254>)
 8000c7e:	6013      	str	r3, [r2, #0]
	fuelPress = (fuelPress >= 7.0) ? 0.1: fuelPress + 0.1;
 8000c80:	4b46      	ldr	r3, [pc, #280]	; (8000d9c <updateDemoValues+0x25c>)
 8000c82:	edd3 7a00 	vldr	s15, [r3]
 8000c86:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8000c8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c92:	db01      	blt.n	8000c98 <updateDemoValues+0x158>
 8000c94:	4b40      	ldr	r3, [pc, #256]	; (8000d98 <updateDemoValues+0x258>)
 8000c96:	e010      	b.n	8000cba <updateDemoValues+0x17a>
 8000c98:	4b40      	ldr	r3, [pc, #256]	; (8000d9c <updateDemoValues+0x25c>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff fc6b 	bl	8000578 <__aeabi_f2d>
 8000ca2:	a32f      	add	r3, pc, #188	; (adr r3, 8000d60 <updateDemoValues+0x220>)
 8000ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ca8:	f7ff fb08 	bl	80002bc <__adddf3>
 8000cac:	4603      	mov	r3, r0
 8000cae:	460c      	mov	r4, r1
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	4621      	mov	r1, r4
 8000cb4:	f7ff fd40 	bl	8000738 <__aeabi_d2f>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	4a38      	ldr	r2, [pc, #224]	; (8000d9c <updateDemoValues+0x25c>)
 8000cbc:	6013      	str	r3, [r2, #0]
	iat = (iat >= 100) ? 1: iat + 2;
 8000cbe:	4b38      	ldr	r3, [pc, #224]	; (8000da0 <updateDemoValues+0x260>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2b63      	cmp	r3, #99	; 0x63
 8000cc4:	dc03      	bgt.n	8000cce <updateDemoValues+0x18e>
 8000cc6:	4b36      	ldr	r3, [pc, #216]	; (8000da0 <updateDemoValues+0x260>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	3302      	adds	r3, #2
 8000ccc:	e000      	b.n	8000cd0 <updateDemoValues+0x190>
 8000cce:	2301      	movs	r3, #1
 8000cd0:	4a33      	ldr	r2, [pc, #204]	; (8000da0 <updateDemoValues+0x260>)
 8000cd2:	6013      	str	r3, [r2, #0]
	egt = (egt >= 760) ? 500: egt +12;
 8000cd4:	4b33      	ldr	r3, [pc, #204]	; (8000da4 <updateDemoValues+0x264>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f5b3 7f3e 	cmp.w	r3, #760	; 0x2f8
 8000cdc:	da03      	bge.n	8000ce6 <updateDemoValues+0x1a6>
 8000cde:	4b31      	ldr	r3, [pc, #196]	; (8000da4 <updateDemoValues+0x264>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	330c      	adds	r3, #12
 8000ce4:	e001      	b.n	8000cea <updateDemoValues+0x1aa>
 8000ce6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000cea:	4a2e      	ldr	r2, [pc, #184]	; (8000da4 <updateDemoValues+0x264>)
 8000cec:	6013      	str	r3, [r2, #0]
	tps = (tps >= 100) ? 0: tps + 4;
 8000cee:	4b2e      	ldr	r3, [pc, #184]	; (8000da8 <updateDemoValues+0x268>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2b63      	cmp	r3, #99	; 0x63
 8000cf4:	dc03      	bgt.n	8000cfe <updateDemoValues+0x1be>
 8000cf6:	4b2c      	ldr	r3, [pc, #176]	; (8000da8 <updateDemoValues+0x268>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	3304      	adds	r3, #4
 8000cfc:	e000      	b.n	8000d00 <updateDemoValues+0x1c0>
 8000cfe:	2300      	movs	r3, #0
 8000d00:	4a29      	ldr	r2, [pc, #164]	; (8000da8 <updateDemoValues+0x268>)
 8000d02:	6013      	str	r3, [r2, #0]
	battVoltage = (battVoltage >= 20.0) ? 10.0: battVoltage + 0.6;
 8000d04:	4b29      	ldr	r3, [pc, #164]	; (8000dac <updateDemoValues+0x26c>)
 8000d06:	edd3 7a00 	vldr	s15, [r3]
 8000d0a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000d0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d16:	db01      	blt.n	8000d1c <updateDemoValues+0x1dc>
 8000d18:	4b25      	ldr	r3, [pc, #148]	; (8000db0 <updateDemoValues+0x270>)
 8000d1a:	e010      	b.n	8000d3e <updateDemoValues+0x1fe>
 8000d1c:	4b23      	ldr	r3, [pc, #140]	; (8000dac <updateDemoValues+0x26c>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fc29 	bl	8000578 <__aeabi_f2d>
 8000d26:	a310      	add	r3, pc, #64	; (adr r3, 8000d68 <updateDemoValues+0x228>)
 8000d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d2c:	f7ff fac6 	bl	80002bc <__adddf3>
 8000d30:	4603      	mov	r3, r0
 8000d32:	460c      	mov	r4, r1
 8000d34:	4618      	mov	r0, r3
 8000d36:	4621      	mov	r1, r4
 8000d38:	f7ff fcfe 	bl	8000738 <__aeabi_d2f>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	4a1b      	ldr	r2, [pc, #108]	; (8000dac <updateDemoValues+0x26c>)
 8000d40:	6013      	str	r3, [r2, #0]
}
 8000d42:	bf00      	nop
 8000d44:	bd98      	pop	{r3, r4, r7, pc}
 8000d46:	bf00      	nop
 8000d48:	66666666 	.word	0x66666666
 8000d4c:	3ff66666 	.word	0x3ff66666
 8000d50:	9999999a 	.word	0x9999999a
 8000d54:	3fa99999 	.word	0x3fa99999
 8000d58:	eb851eb8 	.word	0xeb851eb8
 8000d5c:	3faeb851 	.word	0x3faeb851
 8000d60:	9999999a 	.word	0x9999999a
 8000d64:	3fb99999 	.word	0x3fb99999
 8000d68:	33333333 	.word	0x33333333
 8000d6c:	3fe33333 	.word	0x3fe33333
 8000d70:	20000004 	.word	0x20000004
 8000d74:	2000000c 	.word	0x2000000c
 8000d78:	20000008 	.word	0x20000008
 8000d7c:	20000010 	.word	0x20000010
 8000d80:	3f19999a 	.word	0x3f19999a
 8000d84:	20000014 	.word	0x20000014
 8000d88:	3f266666 	.word	0x3f266666
 8000d8c:	2000038c 	.word	0x2000038c
 8000d90:	20000390 	.word	0x20000390
 8000d94:	20000394 	.word	0x20000394
 8000d98:	3dcccccd 	.word	0x3dcccccd
 8000d9c:	20000398 	.word	0x20000398
 8000da0:	20000384 	.word	0x20000384
 8000da4:	200003a0 	.word	0x200003a0
 8000da8:	20000388 	.word	0x20000388
 8000dac:	2000039c 	.word	0x2000039c
 8000db0:	41200000 	.word	0x41200000

08000db4 <SecondTask>:


void SecondTask(void const* argument)
{
 8000db4:	b5b0      	push	{r4, r5, r7, lr}
 8000db6:	b098      	sub	sp, #96	; 0x60
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]

	settings_message settings_val = {7000, 1, 2, 3, 4, 5, 6, 7, 8, 0};
 8000dbc:	4b2b      	ldr	r3, [pc, #172]	; (8000e6c <SecondTask+0xb8>)
 8000dbe:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000dc2:	461d      	mov	r5, r3
 8000dc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dcc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000dd0:	e884 0003 	stmia.w	r4, {r0, r1}
	xQueueSend(settingsMessageQ, &settings_val,0);
 8000dd4:	4b26      	ldr	r3, [pc, #152]	; (8000e70 <SecondTask+0xbc>)
 8000dd6:	6818      	ldr	r0, [r3, #0]
 8000dd8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000ddc:	2300      	movs	r3, #0
 8000dde:	2200      	movs	r2, #0
 8000de0:	f00b feb8 	bl	800cb54 <xQueueGenericSend>
	osDelay(150);
 8000de4:	2096      	movs	r0, #150	; 0x96
 8000de6:	f00b fbc7 	bl	800c578 <osDelay>

	static const int demo_mode = 0;
	for(;;)
	{
		if(demo_mode)
 8000dea:	4b22      	ldr	r3, [pc, #136]	; (8000e74 <SecondTask+0xc0>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <SecondTask+0x42>
		{
			updateDemoValues();
 8000df2:	f7ff fea5 	bl	8000b40 <updateDemoValues>
		}

		display_values dispVals = {rpm, clt, map, lambda, lambdaTarget, vehicleSpeed, oilTemp, oilPress, fuelPress, iat, egt, tps, battVoltage};
 8000df6:	4b20      	ldr	r3, [pc, #128]	; (8000e78 <SecondTask+0xc4>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	4b1f      	ldr	r3, [pc, #124]	; (8000e7c <SecondTask+0xc8>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	4b1f      	ldr	r3, [pc, #124]	; (8000e80 <SecondTask+0xcc>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	4b1e      	ldr	r3, [pc, #120]	; (8000e84 <SecondTask+0xd0>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	617b      	str	r3, [r7, #20]
 8000e0e:	4b1e      	ldr	r3, [pc, #120]	; (8000e88 <SecondTask+0xd4>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	61bb      	str	r3, [r7, #24]
 8000e14:	4b1d      	ldr	r3, [pc, #116]	; (8000e8c <SecondTask+0xd8>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	61fb      	str	r3, [r7, #28]
 8000e1a:	4b1d      	ldr	r3, [pc, #116]	; (8000e90 <SecondTask+0xdc>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	623b      	str	r3, [r7, #32]
 8000e20:	4b1c      	ldr	r3, [pc, #112]	; (8000e94 <SecondTask+0xe0>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24
 8000e26:	4b1c      	ldr	r3, [pc, #112]	; (8000e98 <SecondTask+0xe4>)
 8000e28:	edd3 7a00 	vldr	s15, [r3]
 8000e2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e30:	ee17 3a90 	vmov	r3, s15
 8000e34:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e36:	4b19      	ldr	r3, [pc, #100]	; (8000e9c <SecondTask+0xe8>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e3c:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <SecondTask+0xec>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	633b      	str	r3, [r7, #48]	; 0x30
 8000e42:	4b18      	ldr	r3, [pc, #96]	; (8000ea4 <SecondTask+0xf0>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	ee07 3a90 	vmov	s15, r3
 8000e4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e4e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	    xQueueSend(messageQ, &dispVals,0);
 8000e52:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <SecondTask+0xf4>)
 8000e54:	6818      	ldr	r0, [r3, #0]
 8000e56:	f107 0108 	add.w	r1, r7, #8
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f00b fe79 	bl	800cb54 <xQueueGenericSend>
		osDelay(50);
 8000e62:	2032      	movs	r0, #50	; 0x32
 8000e64:	f00b fb88 	bl	800c578 <osDelay>
	{
 8000e68:	e7bf      	b.n	8000dea <SecondTask+0x36>
 8000e6a:	bf00      	nop
 8000e6c:	08025c4c 	.word	0x08025c4c
 8000e70:	200086c4 	.word	0x200086c4
 8000e74:	080263bc 	.word	0x080263bc
 8000e78:	20000004 	.word	0x20000004
 8000e7c:	2000000c 	.word	0x2000000c
 8000e80:	20000008 	.word	0x20000008
 8000e84:	20000010 	.word	0x20000010
 8000e88:	20000014 	.word	0x20000014
 8000e8c:	2000038c 	.word	0x2000038c
 8000e90:	20000390 	.word	0x20000390
 8000e94:	20000394 	.word	0x20000394
 8000e98:	20000398 	.word	0x20000398
 8000e9c:	20000384 	.word	0x20000384
 8000ea0:	200003a0 	.word	0x200003a0
 8000ea4:	20000388 	.word	0x20000388
 8000ea8:	200086c0 	.word	0x200086c0

08000eac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eac:	b5b0      	push	{r4, r5, r7, lr}
 8000eae:	b08e      	sub	sp, #56	; 0x38
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb2:	f002 fdfc 	bl	8003aae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb6:	f000 f85f 	bl	8000f78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eba:	f001 facf 	bl	800245c <MX_GPIO_Init>
  MX_ADC3_Init();
 8000ebe:	f000 f917 	bl	80010f0 <MX_ADC3_Init>
  MX_CRC_Init();
 8000ec2:	f000 fc07 	bl	80016d4 <MX_CRC_Init>
  MX_DCMI_Init();
 8000ec6:	f000 fc27 	bl	8001718 <MX_DCMI_Init>
  MX_DMA2D_Init();
 8000eca:	f000 fc59 	bl	8001780 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000ece:	f001 fa19 	bl	8002304 <MX_FMC_Init>
  MX_LTDC_Init();
 8000ed2:	f000 fc87 	bl	80017e4 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000ed6:	f000 fd07 	bl	80018e8 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8000eda:	f000 fd31 	bl	8001940 <MX_RTC_Init>
  MX_SAI2_Init();
 8000ede:	f000 fdd7 	bl	8001a90 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8000ee2:	f000 fe7d 	bl	8001be0 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8000ee6:	f000 fe9b 	bl	8001c20 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8000eea:	f000 fec9 	bl	8001c80 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000eee:	f000 ff05 	bl	8001cfc <MX_TIM1_Init>
  MX_TIM2_Init();
 8000ef2:	f000 ffaf 	bl	8001e54 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000ef6:	f001 f823 	bl	8001f40 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000efa:	f001 f897 	bl	800202c <MX_TIM5_Init>
  MX_TIM8_Init();
 8000efe:	f001 f90b 	bl	8002118 <MX_TIM8_Init>
  MX_TIM12_Init();
 8000f02:	f001 f95b 	bl	80021bc <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8000f06:	f001 f99d 	bl	8002244 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000f0a:	f001 f9cb 	bl	80022a4 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8000f0e:	f00a ffef 	bl	800bef0 <MX_FATFS_Init>
  MX_CAN1_Init();
 8000f12:	f000 f93f 	bl	8001194 <MX_CAN1_Init>
  MX_TouchGFX_Init();
 8000f16:	f00e f85d 	bl	800efd4 <MX_TouchGFX_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000f1a:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <main+0xbc>)
 8000f1c:	f107 041c 	add.w	r4, r7, #28
 8000f20:	461d      	mov	r5, r3
 8000f22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f26:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000f2e:	f107 031c 	add.w	r3, r7, #28
 8000f32:	2100      	movs	r1, #0
 8000f34:	4618      	mov	r0, r3
 8000f36:	f00b fad3 	bl	800c4e0 <osThreadCreate>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <main+0xc0>)
 8000f3e:	601a      	str	r2, [r3, #0]

  osThreadDef(second, SecondTask, osPriorityNormal, 0, 512);
 8000f40:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <main+0xc4>)
 8000f42:	463c      	mov	r4, r7
 8000f44:	461d      	mov	r5, r3
 8000f46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f4a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  secondTaskHandle = osThreadCreate(osThread(second), NULL);
 8000f52:	463b      	mov	r3, r7
 8000f54:	2100      	movs	r1, #0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f00b fac2 	bl	800c4e0 <osThreadCreate>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <main+0xc8>)
 8000f60:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000f62:	f00b fa9a 	bl	800c49a <osKernelStart>


  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f66:	e7fe      	b.n	8000f66 <main+0xba>
 8000f68:	08025c80 	.word	0x08025c80
 8000f6c:	2000bfc0 	.word	0x2000bfc0
 8000f70:	08025ca4 	.word	0x08025ca4
 8000f74:	2000bfbc 	.word	0x2000bfbc

08000f78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b0b4      	sub	sp, #208	; 0xd0
 8000f7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f7e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000f82:	2230      	movs	r2, #48	; 0x30
 8000f84:	2100      	movs	r1, #0
 8000f86:	4618      	mov	r0, r3
 8000f88:	f023 fed7 	bl	8024d3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f8c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f9c:	f107 0308 	add.w	r3, r7, #8
 8000fa0:	2284      	movs	r2, #132	; 0x84
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f023 fec8 	bl	8024d3a <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000faa:	f005 fa55 	bl	8006458 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fae:	4b4d      	ldr	r3, [pc, #308]	; (80010e4 <SystemClock_Config+0x16c>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	4a4c      	ldr	r2, [pc, #304]	; (80010e4 <SystemClock_Config+0x16c>)
 8000fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fba:	4b4a      	ldr	r3, [pc, #296]	; (80010e4 <SystemClock_Config+0x16c>)
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fc6:	4b48      	ldr	r3, [pc, #288]	; (80010e8 <SystemClock_Config+0x170>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a47      	ldr	r2, [pc, #284]	; (80010e8 <SystemClock_Config+0x170>)
 8000fcc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fd0:	6013      	str	r3, [r2, #0]
 8000fd2:	4b45      	ldr	r3, [pc, #276]	; (80010e8 <SystemClock_Config+0x170>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fda:	603b      	str	r3, [r7, #0]
 8000fdc:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000fde:	2309      	movs	r3, #9
 8000fe0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fe4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fe8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000fec:	2301      	movs	r3, #1
 8000fee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ff8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ffc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001000:	2319      	movs	r3, #25
 8001002:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001006:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800100a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800100e:	2302      	movs	r3, #2
 8001010:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001014:	2309      	movs	r3, #9
 8001016:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800101a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800101e:	4618      	mov	r0, r3
 8001020:	f005 fb3c 	bl	800669c <HAL_RCC_OscConfig>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800102a:	f001 fc4b 	bl	80028c4 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800102e:	f005 fa23 	bl	8006478 <HAL_PWREx_EnableOverDrive>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001038:	f001 fc44 	bl	80028c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800103c:	230f      	movs	r3, #15
 800103e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001042:	2302      	movs	r3, #2
 8001044:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001048:	2300      	movs	r3, #0
 800104a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800104e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001052:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001056:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800105a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800105e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001062:	2106      	movs	r1, #6
 8001064:	4618      	mov	r0, r3
 8001066:	f005 fdbd 	bl	8006be4 <HAL_RCC_ClockConfig>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8001070:	f001 fc28 	bl	80028c4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8001074:	4b1d      	ldr	r3, [pc, #116]	; (80010ec <SystemClock_Config+0x174>)
 8001076:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8001078:	2364      	movs	r3, #100	; 0x64
 800107a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 800107c:	2302      	movs	r3, #2
 800107e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001080:	2302      	movs	r3, #2
 8001082:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001084:	2302      	movs	r3, #2
 8001086:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001088:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800108c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800108e:	2305      	movs	r3, #5
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001092:	2302      	movs	r3, #2
 8001094:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001096:	2303      	movs	r3, #3
 8001098:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 800109a:	2301      	movs	r3, #1
 800109c:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800109e:	2301      	movs	r3, #1
 80010a0:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80010a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010a6:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80010a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010ac:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80010ae:	2300      	movs	r3, #0
 80010b0:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80010b2:	2300      	movs	r3, #0
 80010b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80010b6:	2300      	movs	r3, #0
 80010b8:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80010ba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80010be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80010c2:	2300      	movs	r3, #0
 80010c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010c8:	f107 0308 	add.w	r3, r7, #8
 80010cc:	4618      	mov	r0, r3
 80010ce:	f005 ff8d 	bl	8006fec <HAL_RCCEx_PeriphCLKConfig>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <SystemClock_Config+0x164>
  {
    Error_Handler();
 80010d8:	f001 fbf4 	bl	80028c4 <Error_Handler>
  }
}
 80010dc:	bf00      	nop
 80010de:	37d0      	adds	r7, #208	; 0xd0
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40007000 	.word	0x40007000
 80010ec:	01b00868 	.word	0x01b00868

080010f0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010f6:	463b      	mov	r3, r7
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 8001102:	4b21      	ldr	r3, [pc, #132]	; (8001188 <MX_ADC3_Init+0x98>)
 8001104:	4a21      	ldr	r2, [pc, #132]	; (800118c <MX_ADC3_Init+0x9c>)
 8001106:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001108:	4b1f      	ldr	r3, [pc, #124]	; (8001188 <MX_ADC3_Init+0x98>)
 800110a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800110e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001110:	4b1d      	ldr	r3, [pc, #116]	; (8001188 <MX_ADC3_Init+0x98>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001116:	4b1c      	ldr	r3, [pc, #112]	; (8001188 <MX_ADC3_Init+0x98>)
 8001118:	2200      	movs	r2, #0
 800111a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800111c:	4b1a      	ldr	r3, [pc, #104]	; (8001188 <MX_ADC3_Init+0x98>)
 800111e:	2200      	movs	r2, #0
 8001120:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001122:	4b19      	ldr	r3, [pc, #100]	; (8001188 <MX_ADC3_Init+0x98>)
 8001124:	2200      	movs	r2, #0
 8001126:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800112a:	4b17      	ldr	r3, [pc, #92]	; (8001188 <MX_ADC3_Init+0x98>)
 800112c:	2200      	movs	r2, #0
 800112e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001130:	4b15      	ldr	r3, [pc, #84]	; (8001188 <MX_ADC3_Init+0x98>)
 8001132:	4a17      	ldr	r2, [pc, #92]	; (8001190 <MX_ADC3_Init+0xa0>)
 8001134:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001136:	4b14      	ldr	r3, [pc, #80]	; (8001188 <MX_ADC3_Init+0x98>)
 8001138:	2200      	movs	r2, #0
 800113a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800113c:	4b12      	ldr	r3, [pc, #72]	; (8001188 <MX_ADC3_Init+0x98>)
 800113e:	2201      	movs	r2, #1
 8001140:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001142:	4b11      	ldr	r3, [pc, #68]	; (8001188 <MX_ADC3_Init+0x98>)
 8001144:	2200      	movs	r2, #0
 8001146:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800114a:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <MX_ADC3_Init+0x98>)
 800114c:	2201      	movs	r2, #1
 800114e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001150:	480d      	ldr	r0, [pc, #52]	; (8001188 <MX_ADC3_Init+0x98>)
 8001152:	f002 fcfb 	bl	8003b4c <HAL_ADC_Init>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800115c:	f001 fbb2 	bl	80028c4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001160:	2304      	movs	r3, #4
 8001162:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001164:	2301      	movs	r3, #1
 8001166:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001168:	2300      	movs	r3, #0
 800116a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800116c:	463b      	mov	r3, r7
 800116e:	4619      	mov	r1, r3
 8001170:	4805      	ldr	r0, [pc, #20]	; (8001188 <MX_ADC3_Init+0x98>)
 8001172:	f002 fd2f 	bl	8003bd4 <HAL_ADC_ConfigChannel>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800117c:	f001 fba2 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001180:	bf00      	nop
 8001182:	3710      	adds	r7, #16
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	2000c308 	.word	0x2000c308
 800118c:	40012200 	.word	0x40012200
 8001190:	0f000001 	.word	0x0f000001

08001194 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08a      	sub	sp, #40	; 0x28
 8001198:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800119a:	4b30      	ldr	r3, [pc, #192]	; (800125c <MX_CAN1_Init+0xc8>)
 800119c:	4a30      	ldr	r2, [pc, #192]	; (8001260 <MX_CAN1_Init+0xcc>)
 800119e:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 20;
 80011a0:	4b2e      	ldr	r3, [pc, #184]	; (800125c <MX_CAN1_Init+0xc8>)
 80011a2:	2214      	movs	r2, #20
 80011a4:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80011a6:	4b2d      	ldr	r3, [pc, #180]	; (800125c <MX_CAN1_Init+0xc8>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80011ac:	4b2b      	ldr	r3, [pc, #172]	; (800125c <MX_CAN1_Init+0xc8>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 80011b2:	4b2a      	ldr	r3, [pc, #168]	; (800125c <MX_CAN1_Init+0xc8>)
 80011b4:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80011b8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80011ba:	4b28      	ldr	r3, [pc, #160]	; (800125c <MX_CAN1_Init+0xc8>)
 80011bc:	2200      	movs	r2, #0
 80011be:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80011c0:	4b26      	ldr	r3, [pc, #152]	; (800125c <MX_CAN1_Init+0xc8>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80011c6:	4b25      	ldr	r3, [pc, #148]	; (800125c <MX_CAN1_Init+0xc8>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80011cc:	4b23      	ldr	r3, [pc, #140]	; (800125c <MX_CAN1_Init+0xc8>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80011d2:	4b22      	ldr	r3, [pc, #136]	; (800125c <MX_CAN1_Init+0xc8>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80011d8:	4b20      	ldr	r3, [pc, #128]	; (800125c <MX_CAN1_Init+0xc8>)
 80011da:	2200      	movs	r2, #0
 80011dc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80011de:	4b1f      	ldr	r3, [pc, #124]	; (800125c <MX_CAN1_Init+0xc8>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80011e4:	481d      	ldr	r0, [pc, #116]	; (800125c <MX_CAN1_Init+0xc8>)
 80011e6:	f002 ff39 	bl	800405c <HAL_CAN_Init>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80011f0:	f001 fb68 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  sFilterConfig.FilterBank = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80011f8:	2300      	movs	r3, #0
 80011fa:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80011fc:	2301      	movs	r3, #1
 80011fe:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8001200:	2300      	movs	r3, #0
 8001202:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8001204:	2300      	movs	r3, #0
 8001206:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8001208:	2300      	movs	r3, #0
 800120a:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 800120c:	2300      	movs	r3, #0
 800120e:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001210:	2300      	movs	r3, #0
 8001212:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8001214:	2301      	movs	r3, #1
 8001216:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 8001218:	230e      	movs	r3, #14
 800121a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 800121c:	463b      	mov	r3, r7
 800121e:	4619      	mov	r1, r3
 8001220:	480e      	ldr	r0, [pc, #56]	; (800125c <MX_CAN1_Init+0xc8>)
 8001222:	f003 f817 	bl	8004254 <HAL_CAN_ConfigFilter>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_CAN1_Init+0x9c>
  {
    /* Filter configuration Error */
    Error_Handler();
 800122c:	f001 fb4a 	bl	80028c4 <Error_Handler>
  }

  /*##-3- Start the CAN peripheral ###########################################*/
  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8001230:	480a      	ldr	r0, [pc, #40]	; (800125c <MX_CAN1_Init+0xc8>)
 8001232:	f003 f8ef 	bl	8004414 <HAL_CAN_Start>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_CAN1_Init+0xac>
  {
   /* Start Error */
   Error_Handler();
 800123c:	f001 fb42 	bl	80028c4 <Error_Handler>
  }

  /*##-4- Activate CAN RX notification #######################################*/
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8001240:	2102      	movs	r1, #2
 8001242:	4806      	ldr	r0, [pc, #24]	; (800125c <MX_CAN1_Init+0xc8>)
 8001244:	f003 fa3c 	bl	80046c0 <HAL_CAN_ActivateNotification>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_CAN1_Init+0xbe>
  {
    /* Notification Error */
    Error_Handler();
 800124e:	f001 fb39 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */

}
 8001252:	bf00      	nop
 8001254:	3728      	adds	r7, #40	; 0x28
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	2000c588 	.word	0x2000c588
 8001260:	40006400 	.word	0x40006400

08001264 <getLittleEndianIntegerFromByteArray>:

int getLittleEndianIntegerFromByteArray(uint8_t* data, int startIndex)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
    return (data[startIndex + 3] << 24)	\
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	3303      	adds	r3, #3
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	4413      	add	r3, r2
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	061a      	lsls	r2, r3, #24
         | (data[startIndex + 2] << 16)	\
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	3302      	adds	r3, #2
 800127e:	6879      	ldr	r1, [r7, #4]
 8001280:	440b      	add	r3, r1
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	041b      	lsls	r3, r3, #16
 8001286:	431a      	orrs	r2, r3
         | (data[startIndex + 1] << 8)	\
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	3301      	adds	r3, #1
 800128c:	6879      	ldr	r1, [r7, #4]
 800128e:	440b      	add	r3, r1
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	021b      	lsls	r3, r3, #8
 8001294:	4313      	orrs	r3, r2
         | data[startIndex];
 8001296:	683a      	ldr	r2, [r7, #0]
 8001298:	6879      	ldr	r1, [r7, #4]
 800129a:	440a      	add	r2, r1
 800129c:	7812      	ldrb	r2, [r2, #0]
 800129e:	4313      	orrs	r3, r2
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <getRpmFromCanData>:

int getRpmFromCanData(uint8_t* data, int startIndex)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
	int rpm = (int)(data[startIndex] << 0) | (data[startIndex+1] << 8);
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	4413      	add	r3, r2
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	4619      	mov	r1, r3
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	3301      	adds	r3, #1
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	4413      	add	r3, r2
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	021b      	lsls	r3, r3, #8
 80012cc:	430b      	orrs	r3, r1
 80012ce:	60fb      	str	r3, [r7, #12]
	return rpm;
 80012d0:	68fb      	ldr	r3, [r7, #12]
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3714      	adds	r7, #20
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <getTpsFromCanData>:

int getTpsFromCanData(uint8_t* data, int startIndex)
{
 80012de:	b480      	push	{r7}
 80012e0:	b085      	sub	sp, #20
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
 80012e6:	6039      	str	r1, [r7, #0]
	float tmpTps = (float)data[startIndex];
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	4413      	add	r3, r2
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	ee07 3a90 	vmov	s15, r3
 80012f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012f8:	edc7 7a03 	vstr	s15, [r7, #12]
	tmpTps = tmpTps*0.5f;
 80012fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001300:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001304:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001308:	edc7 7a03 	vstr	s15, [r7, #12]

	return (int)tmpTps;
 800130c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001310:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001314:	ee17 3a90 	vmov	r3, s15
}
 8001318:	4618      	mov	r0, r3
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <getOilTempFromCanData>:
	int vehicleSpd = (data[startIndex] << 0) | (data[startIndex+1] << 8);
	return vehicleSpd;
}

int getOilTempFromCanData(uint8_t* data, int startIndex)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
	return data[startIndex];
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	4413      	add	r3, r2
 8001334:	781b      	ldrb	r3, [r3, #0]
}
 8001336:	4618      	mov	r0, r3
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
	...

08001344 <getOilPressFromCanData>:

float getOilPressFromCanData(uint8_t* data, int startIndex)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
	float tmpOilPress = data[startIndex];
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	4413      	add	r3, r2
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	ee07 3a90 	vmov	s15, r3
 800135a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800135e:	edc7 7a03 	vstr	s15, [r7, #12]
	tmpOilPress = tmpOilPress * 0.0625f;
 8001362:	edd7 7a03 	vldr	s15, [r7, #12]
 8001366:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001388 <getOilPressFromCanData+0x44>
 800136a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800136e:	edc7 7a03 	vstr	s15, [r7, #12]
	return tmpOilPress;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	ee07 3a90 	vmov	s15, r3
}
 8001378:	eeb0 0a67 	vmov.f32	s0, s15
 800137c:	3714      	adds	r7, #20
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	3d800000 	.word	0x3d800000

0800138c <getFuelPressFromCanData>:

float getFuelPressFromCanData(uint8_t* data, int startIndex)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
	float tmpFuelPress = data[startIndex];
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	4413      	add	r3, r2
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	ee07 3a90 	vmov	s15, r3
 80013a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013a6:	edc7 7a03 	vstr	s15, [r7, #12]
	tmpFuelPress = tmpFuelPress * 0.03125f;
 80013aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80013ae:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80013d0 <getFuelPressFromCanData+0x44>
 80013b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013b6:	edc7 7a03 	vstr	s15, [r7, #12]
	return tmpFuelPress;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	ee07 3a90 	vmov	s15, r3
}
 80013c0:	eeb0 0a67 	vmov.f32	s0, s15
 80013c4:	3714      	adds	r7, #20
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	3d000000 	.word	0x3d000000

080013d4 <getCltFromCanData>:

int getCltFromCanData(uint8_t* data, int startIndex)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
	int tmpClt = (data[6] << 0) | (data[7] << 8);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	3306      	adds	r3, #6
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	461a      	mov	r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	3307      	adds	r3, #7
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	021b      	lsls	r3, r3, #8
 80013ee:	4313      	orrs	r3, r2
 80013f0:	60fb      	str	r3, [r7, #12]
	return tmpClt;
 80013f2:	68fb      	ldr	r3, [r7, #12]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3714      	adds	r7, #20
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <getBattVoltageFromCanData>:

float getBattVoltageFromCanData(uint8_t* data, int startIndex)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
	 float tmpBattVoltage = (data[startIndex] << 0) | (data[startIndex+1] << 8);
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	4413      	add	r3, r2
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	4619      	mov	r1, r3
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	3301      	adds	r3, #1
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	4413      	add	r3, r2
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	021b      	lsls	r3, r3, #8
 8001420:	430b      	orrs	r3, r1
 8001422:	ee07 3a90 	vmov	s15, r3
 8001426:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800142a:	edc7 7a03 	vstr	s15, [r7, #12]
	 tmpBattVoltage = tmpBattVoltage*0.027f;
 800142e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001432:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001454 <getBattVoltageFromCanData+0x54>
 8001436:	ee67 7a87 	vmul.f32	s15, s15, s14
 800143a:	edc7 7a03 	vstr	s15, [r7, #12]
	 return tmpBattVoltage;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	ee07 3a90 	vmov	s15, r3
}
 8001444:	eeb0 0a67 	vmov.f32	s0, s15
 8001448:	3714      	adds	r7, #20
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	3cdd2f1b 	.word	0x3cdd2f1b

08001458 <getLambdaFromCanData>:

float getLambdaFromCanData(uint8_t* data, int startIndex)
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
	 float tmpLambda = data[startIndex];
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	4413      	add	r3, r2
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	ee07 3a90 	vmov	s15, r3
 800146e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001472:	edc7 7a03 	vstr	s15, [r7, #12]
	 tmpLambda = tmpLambda*0.0078125f;
 8001476:	edd7 7a03 	vldr	s15, [r7, #12]
 800147a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800149c <getLambdaFromCanData+0x44>
 800147e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001482:	edc7 7a03 	vstr	s15, [r7, #12]
	 return tmpLambda;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	ee07 3a90 	vmov	s15, r3
}
 800148c:	eeb0 0a67 	vmov.f32	s0, s15
 8001490:	3714      	adds	r7, #20
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	3c000000 	.word	0x3c000000

080014a0 <getEgtFromCanData>:

float getEgtFromCanData(uint8_t* data, int startIndex)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
	 float tmpEgt = (data[startIndex] << 0) | (data[startIndex + 1] << 8);
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	4413      	add	r3, r2
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	4619      	mov	r1, r3
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	3301      	adds	r3, #1
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	4413      	add	r3, r2
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	021b      	lsls	r3, r3, #8
 80014c0:	430b      	orrs	r3, r1
 80014c2:	ee07 3a90 	vmov	s15, r3
 80014c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ca:	edc7 7a03 	vstr	s15, [r7, #12]
	 return tmpEgt;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	ee07 3a90 	vmov	s15, r3
}
 80014d4:	eeb0 0a67 	vmov.f32	s0, s15
 80014d8:	3714      	adds	r7, #20
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
	...

080014e4 <getLambdaTargetFromCanData>:

float getLambdaTargetFromCanData(uint8_t* data, int startIndex)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
	float tmpLambdaTarget = data[startIndex];
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	4413      	add	r3, r2
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	ee07 3a90 	vmov	s15, r3
 80014fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014fe:	edc7 7a03 	vstr	s15, [r7, #12]
	tmpLambdaTarget = tmpLambdaTarget / 100.0f;
 8001502:	ed97 7a03 	vldr	s14, [r7, #12]
 8001506:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001528 <getLambdaTargetFromCanData+0x44>
 800150a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800150e:	edc7 7a03 	vstr	s15, [r7, #12]
	return tmpLambdaTarget;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	ee07 3a90 	vmov	s15, r3
}
 8001518:	eeb0 0a67 	vmov.f32	s0, s15
 800151c:	3714      	adds	r7, #20
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	42c80000 	.word	0x42c80000

0800152c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* Get RX message */
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8001534:	4b59      	ldr	r3, [pc, #356]	; (800169c <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 8001536:	4a5a      	ldr	r2, [pc, #360]	; (80016a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8001538:	2100      	movs	r1, #0
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f002 ffae 	bl	800449c <HAL_CAN_GetRxMessage>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    /* Reception Error */
    Error_Handler();
 8001546:	f001 f9bd 	bl	80028c4 <Error_Handler>
  }

  /* Package one */
  if ((RxHeader.StdId == 0x600) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 800154a:	4b55      	ldr	r3, [pc, #340]	; (80016a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001552:	d121      	bne.n	8001598 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
 8001554:	4b52      	ldr	r3, [pc, #328]	; (80016a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d11d      	bne.n	8001598 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
 800155c:	4b50      	ldr	r3, [pc, #320]	; (80016a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 800155e:	691b      	ldr	r3, [r3, #16]
 8001560:	2b08      	cmp	r3, #8
 8001562:	d119      	bne.n	8001598 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
  {
	 rpm = getRpmFromCanData(RxData,0);
 8001564:	2100      	movs	r1, #0
 8001566:	484d      	ldr	r0, [pc, #308]	; (800169c <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 8001568:	f7ff fea0 	bl	80012ac <getRpmFromCanData>
 800156c:	4602      	mov	r2, r0
 800156e:	4b4d      	ldr	r3, [pc, #308]	; (80016a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x178>)
 8001570:	601a      	str	r2, [r3, #0]
	 tps = getTpsFromCanData(RxData,2);
 8001572:	2102      	movs	r1, #2
 8001574:	4849      	ldr	r0, [pc, #292]	; (800169c <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 8001576:	f7ff feb2 	bl	80012de <getTpsFromCanData>
 800157a:	4602      	mov	r2, r0
 800157c:	4b4a      	ldr	r3, [pc, #296]	; (80016a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 800157e:	601a      	str	r2, [r3, #0]
	 iat = (int)RxData[3];
 8001580:	4b46      	ldr	r3, [pc, #280]	; (800169c <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 8001582:	78db      	ldrb	r3, [r3, #3]
 8001584:	461a      	mov	r2, r3
 8001586:	4b49      	ldr	r3, [pc, #292]	; (80016ac <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 8001588:	601a      	str	r2, [r3, #0]
	 map = getLittleEndianIntegerFromByteArray(RxData,4);
 800158a:	2104      	movs	r1, #4
 800158c:	4843      	ldr	r0, [pc, #268]	; (800169c <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 800158e:	f7ff fe69 	bl	8001264 <getLittleEndianIntegerFromByteArray>
 8001592:	4602      	mov	r2, r0
 8001594:	4b46      	ldr	r3, [pc, #280]	; (80016b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 8001596:	601a      	str	r2, [r3, #0]
  }

  if ((RxHeader.StdId == 0x602) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 8001598:	4b41      	ldr	r3, [pc, #260]	; (80016a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f240 6202 	movw	r2, #1538	; 0x602
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d127      	bne.n	80015f4 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
 80015a4:	4b3e      	ldr	r3, [pc, #248]	; (80016a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d123      	bne.n	80015f4 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
 80015ac:	4b3c      	ldr	r3, [pc, #240]	; (80016a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 80015ae:	691b      	ldr	r3, [r3, #16]
 80015b0:	2b08      	cmp	r3, #8
 80015b2:	d11f      	bne.n	80015f4 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
  {
	 oilTemp = getOilTempFromCanData(RxData,3);
 80015b4:	2103      	movs	r1, #3
 80015b6:	4839      	ldr	r0, [pc, #228]	; (800169c <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 80015b8:	f7ff feb4 	bl	8001324 <getOilTempFromCanData>
 80015bc:	4602      	mov	r2, r0
 80015be:	4b3d      	ldr	r3, [pc, #244]	; (80016b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 80015c0:	601a      	str	r2, [r3, #0]
	 oilPress = getOilPressFromCanData(RxData,4);
 80015c2:	2104      	movs	r1, #4
 80015c4:	4835      	ldr	r0, [pc, #212]	; (800169c <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 80015c6:	f7ff febd 	bl	8001344 <getOilPressFromCanData>
 80015ca:	eef0 7a40 	vmov.f32	s15, s0
 80015ce:	4b3a      	ldr	r3, [pc, #232]	; (80016b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 80015d0:	edc3 7a00 	vstr	s15, [r3]
	 fuelPress = getFuelPressFromCanData(RxData,5);
 80015d4:	2105      	movs	r1, #5
 80015d6:	4831      	ldr	r0, [pc, #196]	; (800169c <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 80015d8:	f7ff fed8 	bl	800138c <getFuelPressFromCanData>
 80015dc:	eef0 7a40 	vmov.f32	s15, s0
 80015e0:	4b36      	ldr	r3, [pc, #216]	; (80016bc <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 80015e2:	edc3 7a00 	vstr	s15, [r3]
	 clt = getCltFromCanData(RxData,6);
 80015e6:	2106      	movs	r1, #6
 80015e8:	482c      	ldr	r0, [pc, #176]	; (800169c <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 80015ea:	f7ff fef3 	bl	80013d4 <getCltFromCanData>
 80015ee:	4602      	mov	r2, r0
 80015f0:	4b33      	ldr	r3, [pc, #204]	; (80016c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 80015f2:	601a      	str	r2, [r3, #0]
  }

  if ((RxHeader.StdId == 0x603) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 80015f4:	4b2a      	ldr	r3, [pc, #168]	; (80016a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f240 6203 	movw	r2, #1539	; 0x603
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d11c      	bne.n	800163a <HAL_CAN_RxFifo0MsgPendingCallback+0x10e>
 8001600:	4b27      	ldr	r3, [pc, #156]	; (80016a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d118      	bne.n	800163a <HAL_CAN_RxFifo0MsgPendingCallback+0x10e>
 8001608:	4b25      	ldr	r3, [pc, #148]	; (80016a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 800160a:	691b      	ldr	r3, [r3, #16]
 800160c:	2b08      	cmp	r3, #8
 800160e:	d114      	bne.n	800163a <HAL_CAN_RxFifo0MsgPendingCallback+0x10e>
  {
	 lambda = getLambdaFromCanData(RxData,2);
 8001610:	2102      	movs	r1, #2
 8001612:	4822      	ldr	r0, [pc, #136]	; (800169c <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 8001614:	f7ff ff20 	bl	8001458 <getLambdaFromCanData>
 8001618:	eef0 7a40 	vmov.f32	s15, s0
 800161c:	4b29      	ldr	r3, [pc, #164]	; (80016c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 800161e:	edc3 7a00 	vstr	s15, [r3]
	 egt = getEgtFromCanData(RxData, 4);
 8001622:	2104      	movs	r1, #4
 8001624:	481d      	ldr	r0, [pc, #116]	; (800169c <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 8001626:	f7ff ff3b 	bl	80014a0 <getEgtFromCanData>
 800162a:	eef0 7a40 	vmov.f32	s15, s0
 800162e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001632:	ee17 2a90 	vmov	r2, s15
 8001636:	4b24      	ldr	r3, [pc, #144]	; (80016c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 8001638:	601a      	str	r2, [r3, #0]
  }

  if ((RxHeader.StdId == 0x604) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 800163a:	4b19      	ldr	r3, [pc, #100]	; (80016a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f240 6204 	movw	r2, #1540	; 0x604
 8001642:	4293      	cmp	r3, r2
 8001644:	d110      	bne.n	8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x13c>
 8001646:	4b16      	ldr	r3, [pc, #88]	; (80016a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d10c      	bne.n	8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x13c>
 800164e:	4b14      	ldr	r3, [pc, #80]	; (80016a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8001650:	691b      	ldr	r3, [r3, #16]
 8001652:	2b08      	cmp	r3, #8
 8001654:	d108      	bne.n	8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x13c>
  {
	 battVoltage = getBattVoltageFromCanData(RxData, 2);
 8001656:	2102      	movs	r1, #2
 8001658:	4810      	ldr	r0, [pc, #64]	; (800169c <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 800165a:	f7ff fed1 	bl	8001400 <getBattVoltageFromCanData>
 800165e:	eef0 7a40 	vmov.f32	s15, s0
 8001662:	4b1a      	ldr	r3, [pc, #104]	; (80016cc <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8001664:	edc3 7a00 	vstr	s15, [r3]
  }

  if ((RxHeader.StdId == 0x500) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 8001668:	4b0d      	ldr	r3, [pc, #52]	; (80016a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001670:	d110      	bne.n	8001694 <HAL_CAN_RxFifo0MsgPendingCallback+0x168>
 8001672:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d10c      	bne.n	8001694 <HAL_CAN_RxFifo0MsgPendingCallback+0x168>
 800167a:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	2b08      	cmp	r3, #8
 8001680:	d108      	bne.n	8001694 <HAL_CAN_RxFifo0MsgPendingCallback+0x168>
  {
	 lambdaTarget = getLambdaTargetFromCanData(RxData,7);
 8001682:	2107      	movs	r1, #7
 8001684:	4805      	ldr	r0, [pc, #20]	; (800169c <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 8001686:	f7ff ff2d 	bl	80014e4 <getLambdaTargetFromCanData>
 800168a:	eef0 7a40 	vmov.f32	s15, s0
 800168e:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 8001690:	edc3 7a00 	vstr	s15, [r3]
  }
}
 8001694:	bf00      	nop
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	2000c540 	.word	0x2000c540
 80016a0:	2000c624 	.word	0x2000c624
 80016a4:	20000004 	.word	0x20000004
 80016a8:	20000388 	.word	0x20000388
 80016ac:	20000384 	.word	0x20000384
 80016b0:	20000008 	.word	0x20000008
 80016b4:	20000390 	.word	0x20000390
 80016b8:	20000394 	.word	0x20000394
 80016bc:	20000398 	.word	0x20000398
 80016c0:	2000000c 	.word	0x2000000c
 80016c4:	20000010 	.word	0x20000010
 80016c8:	200003a0 	.word	0x200003a0
 80016cc:	2000039c 	.word	0x2000039c
 80016d0:	20000014 	.word	0x20000014

080016d4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80016d8:	4b0d      	ldr	r3, [pc, #52]	; (8001710 <MX_CRC_Init+0x3c>)
 80016da:	4a0e      	ldr	r2, [pc, #56]	; (8001714 <MX_CRC_Init+0x40>)
 80016dc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80016de:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <MX_CRC_Init+0x3c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80016e4:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <MX_CRC_Init+0x3c>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80016ea:	4b09      	ldr	r3, [pc, #36]	; (8001710 <MX_CRC_Init+0x3c>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80016f0:	4b07      	ldr	r3, [pc, #28]	; (8001710 <MX_CRC_Init+0x3c>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80016f6:	4b06      	ldr	r3, [pc, #24]	; (8001710 <MX_CRC_Init+0x3c>)
 80016f8:	2201      	movs	r2, #1
 80016fa:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80016fc:	4804      	ldr	r0, [pc, #16]	; (8001710 <MX_CRC_Init+0x3c>)
 80016fe:	f003 fb41 	bl	8004d84 <HAL_CRC_Init>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001708:	f001 f8dc 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800170c:	bf00      	nop
 800170e:	bd80      	pop	{r7, pc}
 8001710:	2000c138 	.word	0x2000c138
 8001714:	40023000 	.word	0x40023000

08001718 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 800171c:	4b16      	ldr	r3, [pc, #88]	; (8001778 <MX_DCMI_Init+0x60>)
 800171e:	4a17      	ldr	r2, [pc, #92]	; (800177c <MX_DCMI_Init+0x64>)
 8001720:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001722:	4b15      	ldr	r3, [pc, #84]	; (8001778 <MX_DCMI_Init+0x60>)
 8001724:	2200      	movs	r2, #0
 8001726:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8001728:	4b13      	ldr	r3, [pc, #76]	; (8001778 <MX_DCMI_Init+0x60>)
 800172a:	2200      	movs	r2, #0
 800172c:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 800172e:	4b12      	ldr	r3, [pc, #72]	; (8001778 <MX_DCMI_Init+0x60>)
 8001730:	2200      	movs	r2, #0
 8001732:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001734:	4b10      	ldr	r3, [pc, #64]	; (8001778 <MX_DCMI_Init+0x60>)
 8001736:	2200      	movs	r2, #0
 8001738:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800173a:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <MX_DCMI_Init+0x60>)
 800173c:	2200      	movs	r2, #0
 800173e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001740:	4b0d      	ldr	r3, [pc, #52]	; (8001778 <MX_DCMI_Init+0x60>)
 8001742:	2200      	movs	r2, #0
 8001744:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8001746:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <MX_DCMI_Init+0x60>)
 8001748:	2200      	movs	r2, #0
 800174a:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 800174c:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <MX_DCMI_Init+0x60>)
 800174e:	2200      	movs	r2, #0
 8001750:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8001752:	4b09      	ldr	r3, [pc, #36]	; (8001778 <MX_DCMI_Init+0x60>)
 8001754:	2200      	movs	r2, #0
 8001756:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8001758:	4b07      	ldr	r3, [pc, #28]	; (8001778 <MX_DCMI_Init+0x60>)
 800175a:	2200      	movs	r2, #0
 800175c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800175e:	4b06      	ldr	r3, [pc, #24]	; (8001778 <MX_DCMI_Init+0x60>)
 8001760:	2200      	movs	r2, #0
 8001762:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001764:	4804      	ldr	r0, [pc, #16]	; (8001778 <MX_DCMI_Init+0x60>)
 8001766:	f003 fbf7 	bl	8004f58 <HAL_DCMI_Init>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8001770:	f001 f8a8 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8001774:	bf00      	nop
 8001776:	bd80      	pop	{r7, pc}
 8001778:	2000c350 	.word	0x2000c350
 800177c:	50050000 	.word	0x50050000

08001780 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001784:	4b15      	ldr	r3, [pc, #84]	; (80017dc <MX_DMA2D_Init+0x5c>)
 8001786:	4a16      	ldr	r2, [pc, #88]	; (80017e0 <MX_DMA2D_Init+0x60>)
 8001788:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800178a:	4b14      	ldr	r3, [pc, #80]	; (80017dc <MX_DMA2D_Init+0x5c>)
 800178c:	2200      	movs	r2, #0
 800178e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001790:	4b12      	ldr	r3, [pc, #72]	; (80017dc <MX_DMA2D_Init+0x5c>)
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001796:	4b11      	ldr	r3, [pc, #68]	; (80017dc <MX_DMA2D_Init+0x5c>)
 8001798:	2200      	movs	r2, #0
 800179a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800179c:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <MX_DMA2D_Init+0x5c>)
 800179e:	2200      	movs	r2, #0
 80017a0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80017a2:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <MX_DMA2D_Init+0x5c>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80017a8:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <MX_DMA2D_Init+0x5c>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80017ae:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <MX_DMA2D_Init+0x5c>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80017b4:	4809      	ldr	r0, [pc, #36]	; (80017dc <MX_DMA2D_Init+0x5c>)
 80017b6:	f003 fce3 	bl	8005180 <HAL_DMA2D_Init>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80017c0:	f001 f880 	bl	80028c4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80017c4:	2101      	movs	r1, #1
 80017c6:	4805      	ldr	r0, [pc, #20]	; (80017dc <MX_DMA2D_Init+0x5c>)
 80017c8:	f003 ffa4 	bl	8005714 <HAL_DMA2D_ConfigLayer>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80017d2:	f001 f877 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	2000c500 	.word	0x2000c500
 80017e0:	4002b000 	.word	0x4002b000

080017e4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08e      	sub	sp, #56	; 0x38
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80017ea:	1d3b      	adds	r3, r7, #4
 80017ec:	2234      	movs	r2, #52	; 0x34
 80017ee:	2100      	movs	r1, #0
 80017f0:	4618      	mov	r0, r3
 80017f2:	f023 faa2 	bl	8024d3a <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80017f6:	4b3a      	ldr	r3, [pc, #232]	; (80018e0 <MX_LTDC_Init+0xfc>)
 80017f8:	4a3a      	ldr	r2, [pc, #232]	; (80018e4 <MX_LTDC_Init+0x100>)
 80017fa:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80017fc:	4b38      	ldr	r3, [pc, #224]	; (80018e0 <MX_LTDC_Init+0xfc>)
 80017fe:	2200      	movs	r2, #0
 8001800:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001802:	4b37      	ldr	r3, [pc, #220]	; (80018e0 <MX_LTDC_Init+0xfc>)
 8001804:	2200      	movs	r2, #0
 8001806:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001808:	4b35      	ldr	r3, [pc, #212]	; (80018e0 <MX_LTDC_Init+0xfc>)
 800180a:	2200      	movs	r2, #0
 800180c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800180e:	4b34      	ldr	r3, [pc, #208]	; (80018e0 <MX_LTDC_Init+0xfc>)
 8001810:	2200      	movs	r2, #0
 8001812:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001814:	4b32      	ldr	r3, [pc, #200]	; (80018e0 <MX_LTDC_Init+0xfc>)
 8001816:	2228      	movs	r2, #40	; 0x28
 8001818:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800181a:	4b31      	ldr	r3, [pc, #196]	; (80018e0 <MX_LTDC_Init+0xfc>)
 800181c:	2209      	movs	r2, #9
 800181e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001820:	4b2f      	ldr	r3, [pc, #188]	; (80018e0 <MX_LTDC_Init+0xfc>)
 8001822:	2235      	movs	r2, #53	; 0x35
 8001824:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001826:	4b2e      	ldr	r3, [pc, #184]	; (80018e0 <MX_LTDC_Init+0xfc>)
 8001828:	220b      	movs	r2, #11
 800182a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 800182c:	4b2c      	ldr	r3, [pc, #176]	; (80018e0 <MX_LTDC_Init+0xfc>)
 800182e:	f240 2215 	movw	r2, #533	; 0x215
 8001832:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001834:	4b2a      	ldr	r3, [pc, #168]	; (80018e0 <MX_LTDC_Init+0xfc>)
 8001836:	f240 121b 	movw	r2, #283	; 0x11b
 800183a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 800183c:	4b28      	ldr	r3, [pc, #160]	; (80018e0 <MX_LTDC_Init+0xfc>)
 800183e:	f240 2235 	movw	r2, #565	; 0x235
 8001842:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001844:	4b26      	ldr	r3, [pc, #152]	; (80018e0 <MX_LTDC_Init+0xfc>)
 8001846:	f240 121d 	movw	r2, #285	; 0x11d
 800184a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800184c:	4b24      	ldr	r3, [pc, #144]	; (80018e0 <MX_LTDC_Init+0xfc>)
 800184e:	2200      	movs	r2, #0
 8001850:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001854:	4b22      	ldr	r3, [pc, #136]	; (80018e0 <MX_LTDC_Init+0xfc>)
 8001856:	2200      	movs	r2, #0
 8001858:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800185c:	4b20      	ldr	r3, [pc, #128]	; (80018e0 <MX_LTDC_Init+0xfc>)
 800185e:	2200      	movs	r2, #0
 8001860:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001864:	481e      	ldr	r0, [pc, #120]	; (80018e0 <MX_LTDC_Init+0xfc>)
 8001866:	f004 fa5f 	bl	8005d28 <HAL_LTDC_Init>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001870:	f001 f828 	bl	80028c4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001878:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800187c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800187e:	2300      	movs	r3, #0
 8001880:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8001882:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001886:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8001888:	2301      	movs	r3, #1
 800188a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800188c:	23ff      	movs	r3, #255	; 0xff
 800188e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001890:	2300      	movs	r3, #0
 8001892:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001894:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001898:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800189a:	2305      	movs	r3, #5
 800189c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 800189e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80018a2:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 80018a4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80018a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 80018aa:	f44f 7388 	mov.w	r3, #272	; 0x110
 80018ae:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80018b6:	2300      	movs	r3, #0
 80018b8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80018bc:	2300      	movs	r3, #0
 80018be:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80018c2:	1d3b      	adds	r3, r7, #4
 80018c4:	2200      	movs	r2, #0
 80018c6:	4619      	mov	r1, r3
 80018c8:	4805      	ldr	r0, [pc, #20]	; (80018e0 <MX_LTDC_Init+0xfc>)
 80018ca:	f004 fbb5 	bl	8006038 <HAL_LTDC_ConfigLayer>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 80018d4:	f000 fff6 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80018d8:	bf00      	nop
 80018da:	3738      	adds	r7, #56	; 0x38
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	2000c260 	.word	0x2000c260
 80018e4:	40016800 	.word	0x40016800

080018e8 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80018ec:	4b12      	ldr	r3, [pc, #72]	; (8001938 <MX_QUADSPI_Init+0x50>)
 80018ee:	4a13      	ldr	r2, [pc, #76]	; (800193c <MX_QUADSPI_Init+0x54>)
 80018f0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80018f2:	4b11      	ldr	r3, [pc, #68]	; (8001938 <MX_QUADSPI_Init+0x50>)
 80018f4:	22ff      	movs	r2, #255	; 0xff
 80018f6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80018f8:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <MX_QUADSPI_Init+0x50>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80018fe:	4b0e      	ldr	r3, [pc, #56]	; (8001938 <MX_QUADSPI_Init+0x50>)
 8001900:	2200      	movs	r2, #0
 8001902:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001904:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <MX_QUADSPI_Init+0x50>)
 8001906:	2201      	movs	r2, #1
 8001908:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800190a:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <MX_QUADSPI_Init+0x50>)
 800190c:	2200      	movs	r2, #0
 800190e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001910:	4b09      	ldr	r3, [pc, #36]	; (8001938 <MX_QUADSPI_Init+0x50>)
 8001912:	2200      	movs	r2, #0
 8001914:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001916:	4b08      	ldr	r3, [pc, #32]	; (8001938 <MX_QUADSPI_Init+0x50>)
 8001918:	2200      	movs	r2, #0
 800191a:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <MX_QUADSPI_Init+0x50>)
 800191e:	2200      	movs	r2, #0
 8001920:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001922:	4805      	ldr	r0, [pc, #20]	; (8001938 <MX_QUADSPI_Init+0x50>)
 8001924:	f004 fdf8 	bl	8006518 <HAL_QSPI_Init>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 800192e:	f000 ffc9 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	2000c640 	.word	0x2000c640
 800193c:	a0001000 	.word	0xa0001000

08001940 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b092      	sub	sp, #72	; 0x48
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001946:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	605a      	str	r2, [r3, #4]
 8001950:	609a      	str	r2, [r3, #8]
 8001952:	60da      	str	r2, [r3, #12]
 8001954:	611a      	str	r2, [r3, #16]
 8001956:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001958:	2300      	movs	r3, #0
 800195a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 800195c:	463b      	mov	r3, r7
 800195e:	222c      	movs	r2, #44	; 0x2c
 8001960:	2100      	movs	r1, #0
 8001962:	4618      	mov	r0, r3
 8001964:	f023 f9e9 	bl	8024d3a <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8001968:	4b47      	ldr	r3, [pc, #284]	; (8001a88 <MX_RTC_Init+0x148>)
 800196a:	4a48      	ldr	r2, [pc, #288]	; (8001a8c <MX_RTC_Init+0x14c>)
 800196c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800196e:	4b46      	ldr	r3, [pc, #280]	; (8001a88 <MX_RTC_Init+0x148>)
 8001970:	2200      	movs	r2, #0
 8001972:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001974:	4b44      	ldr	r3, [pc, #272]	; (8001a88 <MX_RTC_Init+0x148>)
 8001976:	227f      	movs	r2, #127	; 0x7f
 8001978:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800197a:	4b43      	ldr	r3, [pc, #268]	; (8001a88 <MX_RTC_Init+0x148>)
 800197c:	22ff      	movs	r2, #255	; 0xff
 800197e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001980:	4b41      	ldr	r3, [pc, #260]	; (8001a88 <MX_RTC_Init+0x148>)
 8001982:	2200      	movs	r2, #0
 8001984:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001986:	4b40      	ldr	r3, [pc, #256]	; (8001a88 <MX_RTC_Init+0x148>)
 8001988:	2200      	movs	r2, #0
 800198a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800198c:	4b3e      	ldr	r3, [pc, #248]	; (8001a88 <MX_RTC_Init+0x148>)
 800198e:	2200      	movs	r2, #0
 8001990:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001992:	483d      	ldr	r0, [pc, #244]	; (8001a88 <MX_RTC_Init+0x148>)
 8001994:	f006 f84c 	bl	8007a30 <HAL_RTC_Init>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 800199e:	f000 ff91 	bl	80028c4 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 80019a2:	2300      	movs	r3, #0
 80019a4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 80019a8:	2300      	movs	r3, #0
 80019aa:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80019b4:	2300      	movs	r3, #0
 80019b6:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80019b8:	2300      	movs	r3, #0
 80019ba:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80019bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019c0:	2201      	movs	r2, #1
 80019c2:	4619      	mov	r1, r3
 80019c4:	4830      	ldr	r0, [pc, #192]	; (8001a88 <MX_RTC_Init+0x148>)
 80019c6:	f006 f8af 	bl	8007b28 <HAL_RTC_SetTime>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80019d0:	f000 ff78 	bl	80028c4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80019d4:	2301      	movs	r3, #1
 80019d6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 80019da:	2301      	movs	r3, #1
 80019dc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 80019e0:	2301      	movs	r3, #1
 80019e2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80019ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019f0:	2201      	movs	r2, #1
 80019f2:	4619      	mov	r1, r3
 80019f4:	4824      	ldr	r0, [pc, #144]	; (8001a88 <MX_RTC_Init+0x148>)
 80019f6:	f006 f955 	bl	8007ca4 <HAL_RTC_SetDate>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001a00:	f000 ff60 	bl	80028c4 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001a14:	2300      	movs	r3, #0
 8001a16:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001a24:	2300      	movs	r3, #0
 8001a26:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8001a2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a32:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001a34:	463b      	mov	r3, r7
 8001a36:	2201      	movs	r2, #1
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4813      	ldr	r0, [pc, #76]	; (8001a88 <MX_RTC_Init+0x148>)
 8001a3c:	f006 f9da 	bl	8007df4 <HAL_RTC_SetAlarm>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8001a46:	f000 ff3d 	bl	80028c4 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 0x1;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 8001a50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a54:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001a56:	463b      	mov	r3, r7
 8001a58:	2201      	movs	r2, #1
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	480a      	ldr	r0, [pc, #40]	; (8001a88 <MX_RTC_Init+0x148>)
 8001a5e:	f006 f9c9 	bl	8007df4 <HAL_RTC_SetAlarm>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_RTC_Init+0x12c>
  {
    Error_Handler();
 8001a68:	f000 ff2c 	bl	80028c4 <Error_Handler>
  }
  /** Enable the TimeStamp 
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001a6c:	2202      	movs	r2, #2
 8001a6e:	2100      	movs	r1, #0
 8001a70:	4805      	ldr	r0, [pc, #20]	; (8001a88 <MX_RTC_Init+0x148>)
 8001a72:	f006 fb49 	bl	8008108 <HAL_RTCEx_SetTimeStamp>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_RTC_Init+0x140>
  {
    Error_Handler();
 8001a7c:	f000 ff22 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001a80:	bf00      	nop
 8001a82:	3748      	adds	r7, #72	; 0x48
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	2000c420 	.word	0x2000c420
 8001a8c:	40002800 	.word	0x40002800

08001a90 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001a94:	4b4d      	ldr	r3, [pc, #308]	; (8001bcc <MX_SAI2_Init+0x13c>)
 8001a96:	4a4e      	ldr	r2, [pc, #312]	; (8001bd0 <MX_SAI2_Init+0x140>)
 8001a98:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001a9a:	4b4c      	ldr	r3, [pc, #304]	; (8001bcc <MX_SAI2_Init+0x13c>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001aa0:	4b4a      	ldr	r3, [pc, #296]	; (8001bcc <MX_SAI2_Init+0x13c>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001aa6:	4b49      	ldr	r3, [pc, #292]	; (8001bcc <MX_SAI2_Init+0x13c>)
 8001aa8:	2240      	movs	r2, #64	; 0x40
 8001aaa:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001aac:	4b47      	ldr	r3, [pc, #284]	; (8001bcc <MX_SAI2_Init+0x13c>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001ab2:	4b46      	ldr	r3, [pc, #280]	; (8001bcc <MX_SAI2_Init+0x13c>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001ab8:	4b44      	ldr	r3, [pc, #272]	; (8001bcc <MX_SAI2_Init+0x13c>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001abe:	4b43      	ldr	r3, [pc, #268]	; (8001bcc <MX_SAI2_Init+0x13c>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001ac4:	4b41      	ldr	r3, [pc, #260]	; (8001bcc <MX_SAI2_Init+0x13c>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001aca:	4b40      	ldr	r3, [pc, #256]	; (8001bcc <MX_SAI2_Init+0x13c>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001ad0:	4b3e      	ldr	r3, [pc, #248]	; (8001bcc <MX_SAI2_Init+0x13c>)
 8001ad2:	4a40      	ldr	r2, [pc, #256]	; (8001bd4 <MX_SAI2_Init+0x144>)
 8001ad4:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001ad6:	4b3d      	ldr	r3, [pc, #244]	; (8001bcc <MX_SAI2_Init+0x13c>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001adc:	4b3b      	ldr	r3, [pc, #236]	; (8001bcc <MX_SAI2_Init+0x13c>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001ae2:	4b3a      	ldr	r3, [pc, #232]	; (8001bcc <MX_SAI2_Init+0x13c>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001ae8:	4b38      	ldr	r3, [pc, #224]	; (8001bcc <MX_SAI2_Init+0x13c>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001aee:	4b37      	ldr	r3, [pc, #220]	; (8001bcc <MX_SAI2_Init+0x13c>)
 8001af0:	2208      	movs	r2, #8
 8001af2:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001af4:	4b35      	ldr	r3, [pc, #212]	; (8001bcc <MX_SAI2_Init+0x13c>)
 8001af6:	2201      	movs	r2, #1
 8001af8:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001afa:	4b34      	ldr	r3, [pc, #208]	; (8001bcc <MX_SAI2_Init+0x13c>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001b00:	4b32      	ldr	r3, [pc, #200]	; (8001bcc <MX_SAI2_Init+0x13c>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001b06:	4b31      	ldr	r3, [pc, #196]	; (8001bcc <MX_SAI2_Init+0x13c>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001b0c:	4b2f      	ldr	r3, [pc, #188]	; (8001bcc <MX_SAI2_Init+0x13c>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001b12:	4b2e      	ldr	r3, [pc, #184]	; (8001bcc <MX_SAI2_Init+0x13c>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001b18:	4b2c      	ldr	r3, [pc, #176]	; (8001bcc <MX_SAI2_Init+0x13c>)
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001b1e:	4b2b      	ldr	r3, [pc, #172]	; (8001bcc <MX_SAI2_Init+0x13c>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001b24:	4829      	ldr	r0, [pc, #164]	; (8001bcc <MX_SAI2_Init+0x13c>)
 8001b26:	f006 fb45 	bl	80081b4 <HAL_SAI_Init>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8001b30:	f000 fec8 	bl	80028c4 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001b34:	4b28      	ldr	r3, [pc, #160]	; (8001bd8 <MX_SAI2_Init+0x148>)
 8001b36:	4a29      	ldr	r2, [pc, #164]	; (8001bdc <MX_SAI2_Init+0x14c>)
 8001b38:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001b3a:	4b27      	ldr	r3, [pc, #156]	; (8001bd8 <MX_SAI2_Init+0x148>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001b40:	4b25      	ldr	r3, [pc, #148]	; (8001bd8 <MX_SAI2_Init+0x148>)
 8001b42:	2203      	movs	r2, #3
 8001b44:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001b46:	4b24      	ldr	r3, [pc, #144]	; (8001bd8 <MX_SAI2_Init+0x148>)
 8001b48:	2240      	movs	r2, #64	; 0x40
 8001b4a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001b4c:	4b22      	ldr	r3, [pc, #136]	; (8001bd8 <MX_SAI2_Init+0x148>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001b52:	4b21      	ldr	r3, [pc, #132]	; (8001bd8 <MX_SAI2_Init+0x148>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001b58:	4b1f      	ldr	r3, [pc, #124]	; (8001bd8 <MX_SAI2_Init+0x148>)
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001b5e:	4b1e      	ldr	r3, [pc, #120]	; (8001bd8 <MX_SAI2_Init+0x148>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001b64:	4b1c      	ldr	r3, [pc, #112]	; (8001bd8 <MX_SAI2_Init+0x148>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001b6a:	4b1b      	ldr	r3, [pc, #108]	; (8001bd8 <MX_SAI2_Init+0x148>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001b70:	4b19      	ldr	r3, [pc, #100]	; (8001bd8 <MX_SAI2_Init+0x148>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001b76:	4b18      	ldr	r3, [pc, #96]	; (8001bd8 <MX_SAI2_Init+0x148>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001b7c:	4b16      	ldr	r3, [pc, #88]	; (8001bd8 <MX_SAI2_Init+0x148>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8001b82:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <MX_SAI2_Init+0x148>)
 8001b84:	2208      	movs	r2, #8
 8001b86:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001b88:	4b13      	ldr	r3, [pc, #76]	; (8001bd8 <MX_SAI2_Init+0x148>)
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001b8e:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <MX_SAI2_Init+0x148>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001b94:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <MX_SAI2_Init+0x148>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001b9a:	4b0f      	ldr	r3, [pc, #60]	; (8001bd8 <MX_SAI2_Init+0x148>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001ba0:	4b0d      	ldr	r3, [pc, #52]	; (8001bd8 <MX_SAI2_Init+0x148>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001ba6:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <MX_SAI2_Init+0x148>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001bac:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <MX_SAI2_Init+0x148>)
 8001bae:	2201      	movs	r2, #1
 8001bb0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001bb2:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <MX_SAI2_Init+0x148>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001bb8:	4807      	ldr	r0, [pc, #28]	; (8001bd8 <MX_SAI2_Init+0x148>)
 8001bba:	f006 fafb 	bl	80081b4 <HAL_SAI_Init>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8001bc4:	f000 fe7e 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001bc8:	bf00      	nop
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	2000c0b4 	.word	0x2000c0b4
 8001bd0:	40015c04 	.word	0x40015c04
 8001bd4:	0002ee00 	.word	0x0002ee00
 8001bd8:	2000bf38 	.word	0x2000bf38
 8001bdc:	40015c24 	.word	0x40015c24

08001be0 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001be4:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <MX_SDMMC1_SD_Init+0x38>)
 8001be6:	4a0d      	ldr	r2, [pc, #52]	; (8001c1c <MX_SDMMC1_SD_Init+0x3c>)
 8001be8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001bea:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <MX_SDMMC1_SD_Init+0x38>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001bf0:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <MX_SDMMC1_SD_Init+0x38>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001bf6:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <MX_SDMMC1_SD_Init+0x38>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001bfc:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <MX_SDMMC1_SD_Init+0x38>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001c02:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <MX_SDMMC1_SD_Init+0x38>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001c08:	4b03      	ldr	r3, [pc, #12]	; (8001c18 <MX_SDMMC1_SD_Init+0x38>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001c0e:	bf00      	nop
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	2000c15c 	.word	0x2000c15c
 8001c1c:	40012c00 	.word	0x40012c00

08001c20 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001c24:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <MX_SPDIFRX_Init+0x5c>)
 8001c26:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001c2a:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001c2c:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <MX_SPDIFRX_Init+0x5c>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001c32:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <MX_SPDIFRX_Init+0x5c>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001c38:	4b10      	ldr	r3, [pc, #64]	; (8001c7c <MX_SPDIFRX_Init+0x5c>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001c3e:	4b0f      	ldr	r3, [pc, #60]	; (8001c7c <MX_SPDIFRX_Init+0x5c>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001c44:	4b0d      	ldr	r3, [pc, #52]	; (8001c7c <MX_SPDIFRX_Init+0x5c>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001c4a:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <MX_SPDIFRX_Init+0x5c>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001c50:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <MX_SPDIFRX_Init+0x5c>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001c56:	4b09      	ldr	r3, [pc, #36]	; (8001c7c <MX_SPDIFRX_Init+0x5c>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001c5c:	4b07      	ldr	r3, [pc, #28]	; (8001c7c <MX_SPDIFRX_Init+0x5c>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001c62:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <MX_SPDIFRX_Init+0x5c>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001c68:	4804      	ldr	r0, [pc, #16]	; (8001c7c <MX_SPDIFRX_Init+0x5c>)
 8001c6a:	f007 fd37 	bl	80096dc <HAL_SPDIFRX_Init>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8001c74:	f000 fe26 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8001c78:	bf00      	nop
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	2000c068 	.word	0x2000c068

08001c80 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001c84:	4b1b      	ldr	r3, [pc, #108]	; (8001cf4 <MX_SPI2_Init+0x74>)
 8001c86:	4a1c      	ldr	r2, [pc, #112]	; (8001cf8 <MX_SPI2_Init+0x78>)
 8001c88:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001c8a:	4b1a      	ldr	r3, [pc, #104]	; (8001cf4 <MX_SPI2_Init+0x74>)
 8001c8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c90:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001c92:	4b18      	ldr	r3, [pc, #96]	; (8001cf4 <MX_SPI2_Init+0x74>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001c98:	4b16      	ldr	r3, [pc, #88]	; (8001cf4 <MX_SPI2_Init+0x74>)
 8001c9a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001c9e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ca0:	4b14      	ldr	r3, [pc, #80]	; (8001cf4 <MX_SPI2_Init+0x74>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ca6:	4b13      	ldr	r3, [pc, #76]	; (8001cf4 <MX_SPI2_Init+0x74>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001cac:	4b11      	ldr	r3, [pc, #68]	; (8001cf4 <MX_SPI2_Init+0x74>)
 8001cae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cb2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cb4:	4b0f      	ldr	r3, [pc, #60]	; (8001cf4 <MX_SPI2_Init+0x74>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cba:	4b0e      	ldr	r3, [pc, #56]	; (8001cf4 <MX_SPI2_Init+0x74>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cc0:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <MX_SPI2_Init+0x74>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cc6:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <MX_SPI2_Init+0x74>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001ccc:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <MX_SPI2_Init+0x74>)
 8001cce:	2207      	movs	r2, #7
 8001cd0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001cd2:	4b08      	ldr	r3, [pc, #32]	; (8001cf4 <MX_SPI2_Init+0x74>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001cd8:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <MX_SPI2_Init+0x74>)
 8001cda:	2208      	movs	r2, #8
 8001cdc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001cde:	4805      	ldr	r0, [pc, #20]	; (8001cf4 <MX_SPI2_Init+0x74>)
 8001ce0:	f007 fd58 	bl	8009794 <HAL_SPI_Init>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001cea:	f000 fdeb 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	2000bfc4 	.word	0x2000bfc4
 8001cf8:	40003800 	.word	0x40003800

08001cfc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b09a      	sub	sp, #104	; 0x68
 8001d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d02:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	605a      	str	r2, [r3, #4]
 8001d0c:	609a      	str	r2, [r3, #8]
 8001d0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d10:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d1c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	605a      	str	r2, [r3, #4]
 8001d26:	609a      	str	r2, [r3, #8]
 8001d28:	60da      	str	r2, [r3, #12]
 8001d2a:	611a      	str	r2, [r3, #16]
 8001d2c:	615a      	str	r2, [r3, #20]
 8001d2e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d30:	1d3b      	adds	r3, r7, #4
 8001d32:	222c      	movs	r2, #44	; 0x2c
 8001d34:	2100      	movs	r1, #0
 8001d36:	4618      	mov	r0, r3
 8001d38:	f022 ffff 	bl	8024d3a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d3c:	4b43      	ldr	r3, [pc, #268]	; (8001e4c <MX_TIM1_Init+0x150>)
 8001d3e:	4a44      	ldr	r2, [pc, #272]	; (8001e50 <MX_TIM1_Init+0x154>)
 8001d40:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001d42:	4b42      	ldr	r3, [pc, #264]	; (8001e4c <MX_TIM1_Init+0x150>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d48:	4b40      	ldr	r3, [pc, #256]	; (8001e4c <MX_TIM1_Init+0x150>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8001d4e:	4b3f      	ldr	r3, [pc, #252]	; (8001e4c <MX_TIM1_Init+0x150>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d54:	4b3d      	ldr	r3, [pc, #244]	; (8001e4c <MX_TIM1_Init+0x150>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d5a:	4b3c      	ldr	r3, [pc, #240]	; (8001e4c <MX_TIM1_Init+0x150>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d60:	4b3a      	ldr	r3, [pc, #232]	; (8001e4c <MX_TIM1_Init+0x150>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d66:	4839      	ldr	r0, [pc, #228]	; (8001e4c <MX_TIM1_Init+0x150>)
 8001d68:	f007 fda6 	bl	80098b8 <HAL_TIM_Base_Init>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001d72:	f000 fda7 	bl	80028c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d7a:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d7c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d80:	4619      	mov	r1, r3
 8001d82:	4832      	ldr	r0, [pc, #200]	; (8001e4c <MX_TIM1_Init+0x150>)
 8001d84:	f008 f850 	bl	8009e28 <HAL_TIM_ConfigClockSource>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001d8e:	f000 fd99 	bl	80028c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d92:	482e      	ldr	r0, [pc, #184]	; (8001e4c <MX_TIM1_Init+0x150>)
 8001d94:	f007 fde6 	bl	8009964 <HAL_TIM_PWM_Init>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001d9e:	f000 fd91 	bl	80028c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001da2:	2300      	movs	r3, #0
 8001da4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001da6:	2300      	movs	r3, #0
 8001da8:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001daa:	2300      	movs	r3, #0
 8001dac:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001dae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001db2:	4619      	mov	r1, r3
 8001db4:	4825      	ldr	r0, [pc, #148]	; (8001e4c <MX_TIM1_Init+0x150>)
 8001db6:	f008 fcb1 	bl	800a71c <HAL_TIMEx_MasterConfigSynchronization>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001dc0:	f000 fd80 	bl	80028c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dc4:	2360      	movs	r3, #96	; 0x60
 8001dc6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001de0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001de4:	2200      	movs	r2, #0
 8001de6:	4619      	mov	r1, r3
 8001de8:	4818      	ldr	r0, [pc, #96]	; (8001e4c <MX_TIM1_Init+0x150>)
 8001dea:	f007 ff05 	bl	8009bf8 <HAL_TIM_PWM_ConfigChannel>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001df4:	f000 fd66 	bl	80028c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e00:	2300      	movs	r3, #0
 8001e02:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e04:	2300      	movs	r3, #0
 8001e06:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e10:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e12:	2300      	movs	r3, #0
 8001e14:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001e16:	2300      	movs	r3, #0
 8001e18:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e1e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001e20:	2300      	movs	r3, #0
 8001e22:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e24:	2300      	movs	r3, #0
 8001e26:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e28:	1d3b      	adds	r3, r7, #4
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4807      	ldr	r0, [pc, #28]	; (8001e4c <MX_TIM1_Init+0x150>)
 8001e2e:	f008 fd03 	bl	800a838 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001e38:	f000 fd44 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001e3c:	4803      	ldr	r0, [pc, #12]	; (8001e4c <MX_TIM1_Init+0x150>)
 8001e3e:	f001 fa3b 	bl	80032b8 <HAL_TIM_MspPostInit>

}
 8001e42:	bf00      	nop
 8001e44:	3768      	adds	r7, #104	; 0x68
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	2000c440 	.word	0x2000c440
 8001e50:	40010000 	.word	0x40010000

08001e54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b08e      	sub	sp, #56	; 0x38
 8001e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	605a      	str	r2, [r3, #4]
 8001e64:	609a      	str	r2, [r3, #8]
 8001e66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e68:	f107 031c 	add.w	r3, r7, #28
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	605a      	str	r2, [r3, #4]
 8001e72:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e74:	463b      	mov	r3, r7
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	605a      	str	r2, [r3, #4]
 8001e7c:	609a      	str	r2, [r3, #8]
 8001e7e:	60da      	str	r2, [r3, #12]
 8001e80:	611a      	str	r2, [r3, #16]
 8001e82:	615a      	str	r2, [r3, #20]
 8001e84:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e86:	4b2d      	ldr	r3, [pc, #180]	; (8001f3c <MX_TIM2_Init+0xe8>)
 8001e88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e8c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001e8e:	4b2b      	ldr	r3, [pc, #172]	; (8001f3c <MX_TIM2_Init+0xe8>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e94:	4b29      	ldr	r3, [pc, #164]	; (8001f3c <MX_TIM2_Init+0xe8>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8001e9a:	4b28      	ldr	r3, [pc, #160]	; (8001f3c <MX_TIM2_Init+0xe8>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ea0:	4b26      	ldr	r3, [pc, #152]	; (8001f3c <MX_TIM2_Init+0xe8>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ea6:	4b25      	ldr	r3, [pc, #148]	; (8001f3c <MX_TIM2_Init+0xe8>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001eac:	4823      	ldr	r0, [pc, #140]	; (8001f3c <MX_TIM2_Init+0xe8>)
 8001eae:	f007 fd03 	bl	80098b8 <HAL_TIM_Base_Init>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001eb8:	f000 fd04 	bl	80028c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ebc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ec0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ec2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	481c      	ldr	r0, [pc, #112]	; (8001f3c <MX_TIM2_Init+0xe8>)
 8001eca:	f007 ffad 	bl	8009e28 <HAL_TIM_ConfigClockSource>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001ed4:	f000 fcf6 	bl	80028c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ed8:	4818      	ldr	r0, [pc, #96]	; (8001f3c <MX_TIM2_Init+0xe8>)
 8001eda:	f007 fd43 	bl	8009964 <HAL_TIM_PWM_Init>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001ee4:	f000 fcee 	bl	80028c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eec:	2300      	movs	r3, #0
 8001eee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ef0:	f107 031c 	add.w	r3, r7, #28
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4811      	ldr	r0, [pc, #68]	; (8001f3c <MX_TIM2_Init+0xe8>)
 8001ef8:	f008 fc10 	bl	800a71c <HAL_TIMEx_MasterConfigSynchronization>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001f02:	f000 fcdf 	bl	80028c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f06:	2360      	movs	r3, #96	; 0x60
 8001f08:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f12:	2300      	movs	r3, #0
 8001f14:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f16:	463b      	mov	r3, r7
 8001f18:	2200      	movs	r2, #0
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4807      	ldr	r0, [pc, #28]	; (8001f3c <MX_TIM2_Init+0xe8>)
 8001f1e:	f007 fe6b 	bl	8009bf8 <HAL_TIM_PWM_ConfigChannel>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001f28:	f000 fccc 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f2c:	4803      	ldr	r0, [pc, #12]	; (8001f3c <MX_TIM2_Init+0xe8>)
 8001f2e:	f001 f9c3 	bl	80032b8 <HAL_TIM_MspPostInit>

}
 8001f32:	bf00      	nop
 8001f34:	3738      	adds	r7, #56	; 0x38
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	2000c548 	.word	0x2000c548

08001f40 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b08e      	sub	sp, #56	; 0x38
 8001f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	605a      	str	r2, [r3, #4]
 8001f50:	609a      	str	r2, [r3, #8]
 8001f52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f54:	f107 031c 	add.w	r3, r7, #28
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	605a      	str	r2, [r3, #4]
 8001f5e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f60:	463b      	mov	r3, r7
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	605a      	str	r2, [r3, #4]
 8001f68:	609a      	str	r2, [r3, #8]
 8001f6a:	60da      	str	r2, [r3, #12]
 8001f6c:	611a      	str	r2, [r3, #16]
 8001f6e:	615a      	str	r2, [r3, #20]
 8001f70:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f72:	4b2c      	ldr	r3, [pc, #176]	; (8002024 <MX_TIM3_Init+0xe4>)
 8001f74:	4a2c      	ldr	r2, [pc, #176]	; (8002028 <MX_TIM3_Init+0xe8>)
 8001f76:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001f78:	4b2a      	ldr	r3, [pc, #168]	; (8002024 <MX_TIM3_Init+0xe4>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f7e:	4b29      	ldr	r3, [pc, #164]	; (8002024 <MX_TIM3_Init+0xe4>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8001f84:	4b27      	ldr	r3, [pc, #156]	; (8002024 <MX_TIM3_Init+0xe4>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f8a:	4b26      	ldr	r3, [pc, #152]	; (8002024 <MX_TIM3_Init+0xe4>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f90:	4b24      	ldr	r3, [pc, #144]	; (8002024 <MX_TIM3_Init+0xe4>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f96:	4823      	ldr	r0, [pc, #140]	; (8002024 <MX_TIM3_Init+0xe4>)
 8001f98:	f007 fc8e 	bl	80098b8 <HAL_TIM_Base_Init>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001fa2:	f000 fc8f 	bl	80028c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001faa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001fac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	481c      	ldr	r0, [pc, #112]	; (8002024 <MX_TIM3_Init+0xe4>)
 8001fb4:	f007 ff38 	bl	8009e28 <HAL_TIM_ConfigClockSource>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001fbe:	f000 fc81 	bl	80028c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001fc2:	4818      	ldr	r0, [pc, #96]	; (8002024 <MX_TIM3_Init+0xe4>)
 8001fc4:	f007 fcce 	bl	8009964 <HAL_TIM_PWM_Init>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001fce:	f000 fc79 	bl	80028c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001fda:	f107 031c 	add.w	r3, r7, #28
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4810      	ldr	r0, [pc, #64]	; (8002024 <MX_TIM3_Init+0xe4>)
 8001fe2:	f008 fb9b 	bl	800a71c <HAL_TIMEx_MasterConfigSynchronization>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001fec:	f000 fc6a 	bl	80028c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ff0:	2360      	movs	r3, #96	; 0x60
 8001ff2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002000:	463b      	mov	r3, r7
 8002002:	2200      	movs	r2, #0
 8002004:	4619      	mov	r1, r3
 8002006:	4807      	ldr	r0, [pc, #28]	; (8002024 <MX_TIM3_Init+0xe4>)
 8002008:	f007 fdf6 	bl	8009bf8 <HAL_TIM_PWM_ConfigChannel>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002012:	f000 fc57 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002016:	4803      	ldr	r0, [pc, #12]	; (8002024 <MX_TIM3_Init+0xe4>)
 8002018:	f001 f94e 	bl	80032b8 <HAL_TIM_MspPostInit>

}
 800201c:	bf00      	nop
 800201e:	3738      	adds	r7, #56	; 0x38
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	2000c220 	.word	0x2000c220
 8002028:	40000400 	.word	0x40000400

0800202c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b08e      	sub	sp, #56	; 0x38
 8002030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002032:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	605a      	str	r2, [r3, #4]
 800203c:	609a      	str	r2, [r3, #8]
 800203e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002040:	f107 031c 	add.w	r3, r7, #28
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800204c:	463b      	mov	r3, r7
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	605a      	str	r2, [r3, #4]
 8002054:	609a      	str	r2, [r3, #8]
 8002056:	60da      	str	r2, [r3, #12]
 8002058:	611a      	str	r2, [r3, #16]
 800205a:	615a      	str	r2, [r3, #20]
 800205c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800205e:	4b2c      	ldr	r3, [pc, #176]	; (8002110 <MX_TIM5_Init+0xe4>)
 8002060:	4a2c      	ldr	r2, [pc, #176]	; (8002114 <MX_TIM5_Init+0xe8>)
 8002062:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002064:	4b2a      	ldr	r3, [pc, #168]	; (8002110 <MX_TIM5_Init+0xe4>)
 8002066:	2200      	movs	r2, #0
 8002068:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800206a:	4b29      	ldr	r3, [pc, #164]	; (8002110 <MX_TIM5_Init+0xe4>)
 800206c:	2200      	movs	r2, #0
 800206e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8002070:	4b27      	ldr	r3, [pc, #156]	; (8002110 <MX_TIM5_Init+0xe4>)
 8002072:	2200      	movs	r2, #0
 8002074:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002076:	4b26      	ldr	r3, [pc, #152]	; (8002110 <MX_TIM5_Init+0xe4>)
 8002078:	2200      	movs	r2, #0
 800207a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800207c:	4b24      	ldr	r3, [pc, #144]	; (8002110 <MX_TIM5_Init+0xe4>)
 800207e:	2200      	movs	r2, #0
 8002080:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002082:	4823      	ldr	r0, [pc, #140]	; (8002110 <MX_TIM5_Init+0xe4>)
 8002084:	f007 fc18 	bl	80098b8 <HAL_TIM_Base_Init>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800208e:	f000 fc19 	bl	80028c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002092:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002096:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002098:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800209c:	4619      	mov	r1, r3
 800209e:	481c      	ldr	r0, [pc, #112]	; (8002110 <MX_TIM5_Init+0xe4>)
 80020a0:	f007 fec2 	bl	8009e28 <HAL_TIM_ConfigClockSource>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 80020aa:	f000 fc0b 	bl	80028c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80020ae:	4818      	ldr	r0, [pc, #96]	; (8002110 <MX_TIM5_Init+0xe4>)
 80020b0:	f007 fc58 	bl	8009964 <HAL_TIM_PWM_Init>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 80020ba:	f000 fc03 	bl	80028c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020be:	2300      	movs	r3, #0
 80020c0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020c2:	2300      	movs	r3, #0
 80020c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80020c6:	f107 031c 	add.w	r3, r7, #28
 80020ca:	4619      	mov	r1, r3
 80020cc:	4810      	ldr	r0, [pc, #64]	; (8002110 <MX_TIM5_Init+0xe4>)
 80020ce:	f008 fb25 	bl	800a71c <HAL_TIMEx_MasterConfigSynchronization>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 80020d8:	f000 fbf4 	bl	80028c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020dc:	2360      	movs	r3, #96	; 0x60
 80020de:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80020e0:	2300      	movs	r3, #0
 80020e2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020e4:	2300      	movs	r3, #0
 80020e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020e8:	2300      	movs	r3, #0
 80020ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80020ec:	463b      	mov	r3, r7
 80020ee:	220c      	movs	r2, #12
 80020f0:	4619      	mov	r1, r3
 80020f2:	4807      	ldr	r0, [pc, #28]	; (8002110 <MX_TIM5_Init+0xe4>)
 80020f4:	f007 fd80 	bl	8009bf8 <HAL_TIM_PWM_ConfigChannel>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 80020fe:	f000 fbe1 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002102:	4803      	ldr	r0, [pc, #12]	; (8002110 <MX_TIM5_Init+0xe4>)
 8002104:	f001 f8d8 	bl	80032b8 <HAL_TIM_MspPostInit>

}
 8002108:	bf00      	nop
 800210a:	3738      	adds	r7, #56	; 0x38
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	2000c1e0 	.word	0x2000c1e0
 8002114:	40000c00 	.word	0x40000c00

08002118 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b088      	sub	sp, #32
 800211c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800211e:	f107 0310 	add.w	r3, r7, #16
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	605a      	str	r2, [r3, #4]
 8002128:	609a      	str	r2, [r3, #8]
 800212a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800212c:	1d3b      	adds	r3, r7, #4
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	605a      	str	r2, [r3, #4]
 8002134:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002136:	4b1f      	ldr	r3, [pc, #124]	; (80021b4 <MX_TIM8_Init+0x9c>)
 8002138:	4a1f      	ldr	r2, [pc, #124]	; (80021b8 <MX_TIM8_Init+0xa0>)
 800213a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800213c:	4b1d      	ldr	r3, [pc, #116]	; (80021b4 <MX_TIM8_Init+0x9c>)
 800213e:	2200      	movs	r2, #0
 8002140:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002142:	4b1c      	ldr	r3, [pc, #112]	; (80021b4 <MX_TIM8_Init+0x9c>)
 8002144:	2200      	movs	r2, #0
 8002146:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 8002148:	4b1a      	ldr	r3, [pc, #104]	; (80021b4 <MX_TIM8_Init+0x9c>)
 800214a:	2200      	movs	r2, #0
 800214c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800214e:	4b19      	ldr	r3, [pc, #100]	; (80021b4 <MX_TIM8_Init+0x9c>)
 8002150:	2200      	movs	r2, #0
 8002152:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002154:	4b17      	ldr	r3, [pc, #92]	; (80021b4 <MX_TIM8_Init+0x9c>)
 8002156:	2200      	movs	r2, #0
 8002158:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800215a:	4b16      	ldr	r3, [pc, #88]	; (80021b4 <MX_TIM8_Init+0x9c>)
 800215c:	2200      	movs	r2, #0
 800215e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002160:	4814      	ldr	r0, [pc, #80]	; (80021b4 <MX_TIM8_Init+0x9c>)
 8002162:	f007 fba9 	bl	80098b8 <HAL_TIM_Base_Init>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 800216c:	f000 fbaa 	bl	80028c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002170:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002174:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002176:	f107 0310 	add.w	r3, r7, #16
 800217a:	4619      	mov	r1, r3
 800217c:	480d      	ldr	r0, [pc, #52]	; (80021b4 <MX_TIM8_Init+0x9c>)
 800217e:	f007 fe53 	bl	8009e28 <HAL_TIM_ConfigClockSource>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8002188:	f000 fb9c 	bl	80028c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800218c:	2300      	movs	r3, #0
 800218e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002190:	2300      	movs	r3, #0
 8002192:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002194:	2300      	movs	r3, #0
 8002196:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002198:	1d3b      	adds	r3, r7, #4
 800219a:	4619      	mov	r1, r3
 800219c:	4805      	ldr	r0, [pc, #20]	; (80021b4 <MX_TIM8_Init+0x9c>)
 800219e:	f008 fabd 	bl	800a71c <HAL_TIMEx_MasterConfigSynchronization>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 80021a8:	f000 fb8c 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80021ac:	bf00      	nop
 80021ae:	3720      	adds	r7, #32
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	2000c028 	.word	0x2000c028
 80021b8:	40010400 	.word	0x40010400

080021bc <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b088      	sub	sp, #32
 80021c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80021c2:	1d3b      	adds	r3, r7, #4
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	60da      	str	r2, [r3, #12]
 80021ce:	611a      	str	r2, [r3, #16]
 80021d0:	615a      	str	r2, [r3, #20]
 80021d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80021d4:	4b19      	ldr	r3, [pc, #100]	; (800223c <MX_TIM12_Init+0x80>)
 80021d6:	4a1a      	ldr	r2, [pc, #104]	; (8002240 <MX_TIM12_Init+0x84>)
 80021d8:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80021da:	4b18      	ldr	r3, [pc, #96]	; (800223c <MX_TIM12_Init+0x80>)
 80021dc:	2200      	movs	r2, #0
 80021de:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021e0:	4b16      	ldr	r3, [pc, #88]	; (800223c <MX_TIM12_Init+0x80>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 80021e6:	4b15      	ldr	r3, [pc, #84]	; (800223c <MX_TIM12_Init+0x80>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021ec:	4b13      	ldr	r3, [pc, #76]	; (800223c <MX_TIM12_Init+0x80>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021f2:	4b12      	ldr	r3, [pc, #72]	; (800223c <MX_TIM12_Init+0x80>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80021f8:	4810      	ldr	r0, [pc, #64]	; (800223c <MX_TIM12_Init+0x80>)
 80021fa:	f007 fbb3 	bl	8009964 <HAL_TIM_PWM_Init>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 8002204:	f000 fb5e 	bl	80028c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002208:	2360      	movs	r3, #96	; 0x60
 800220a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800220c:	2300      	movs	r3, #0
 800220e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002210:	2300      	movs	r3, #0
 8002212:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002214:	2300      	movs	r3, #0
 8002216:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002218:	1d3b      	adds	r3, r7, #4
 800221a:	2200      	movs	r2, #0
 800221c:	4619      	mov	r1, r3
 800221e:	4807      	ldr	r0, [pc, #28]	; (800223c <MX_TIM12_Init+0x80>)
 8002220:	f007 fcea 	bl	8009bf8 <HAL_TIM_PWM_ConfigChannel>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 800222a:	f000 fb4b 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800222e:	4803      	ldr	r0, [pc, #12]	; (800223c <MX_TIM12_Init+0x80>)
 8002230:	f001 f842 	bl	80032b8 <HAL_TIM_MspPostInit>

}
 8002234:	bf00      	nop
 8002236:	3720      	adds	r7, #32
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	2000c5b0 	.word	0x2000c5b0
 8002240:	40001800 	.word	0x40001800

08002244 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002248:	4b14      	ldr	r3, [pc, #80]	; (800229c <MX_USART1_UART_Init+0x58>)
 800224a:	4a15      	ldr	r2, [pc, #84]	; (80022a0 <MX_USART1_UART_Init+0x5c>)
 800224c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800224e:	4b13      	ldr	r3, [pc, #76]	; (800229c <MX_USART1_UART_Init+0x58>)
 8002250:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002254:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002256:	4b11      	ldr	r3, [pc, #68]	; (800229c <MX_USART1_UART_Init+0x58>)
 8002258:	2200      	movs	r2, #0
 800225a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800225c:	4b0f      	ldr	r3, [pc, #60]	; (800229c <MX_USART1_UART_Init+0x58>)
 800225e:	2200      	movs	r2, #0
 8002260:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002262:	4b0e      	ldr	r3, [pc, #56]	; (800229c <MX_USART1_UART_Init+0x58>)
 8002264:	2200      	movs	r2, #0
 8002266:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002268:	4b0c      	ldr	r3, [pc, #48]	; (800229c <MX_USART1_UART_Init+0x58>)
 800226a:	220c      	movs	r2, #12
 800226c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800226e:	4b0b      	ldr	r3, [pc, #44]	; (800229c <MX_USART1_UART_Init+0x58>)
 8002270:	2200      	movs	r2, #0
 8002272:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002274:	4b09      	ldr	r3, [pc, #36]	; (800229c <MX_USART1_UART_Init+0x58>)
 8002276:	2200      	movs	r2, #0
 8002278:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800227a:	4b08      	ldr	r3, [pc, #32]	; (800229c <MX_USART1_UART_Init+0x58>)
 800227c:	2200      	movs	r2, #0
 800227e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002280:	4b06      	ldr	r3, [pc, #24]	; (800229c <MX_USART1_UART_Init+0x58>)
 8002282:	2200      	movs	r2, #0
 8002284:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002286:	4805      	ldr	r0, [pc, #20]	; (800229c <MX_USART1_UART_Init+0x58>)
 8002288:	f008 fb72 	bl	800a970 <HAL_UART_Init>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002292:	f000 fb17 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002296:	bf00      	nop
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	2000c3a0 	.word	0x2000c3a0
 80022a0:	40011000 	.word	0x40011000

080022a4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80022a8:	4b14      	ldr	r3, [pc, #80]	; (80022fc <MX_USART6_UART_Init+0x58>)
 80022aa:	4a15      	ldr	r2, [pc, #84]	; (8002300 <MX_USART6_UART_Init+0x5c>)
 80022ac:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80022ae:	4b13      	ldr	r3, [pc, #76]	; (80022fc <MX_USART6_UART_Init+0x58>)
 80022b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022b4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80022b6:	4b11      	ldr	r3, [pc, #68]	; (80022fc <MX_USART6_UART_Init+0x58>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80022bc:	4b0f      	ldr	r3, [pc, #60]	; (80022fc <MX_USART6_UART_Init+0x58>)
 80022be:	2200      	movs	r2, #0
 80022c0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80022c2:	4b0e      	ldr	r3, [pc, #56]	; (80022fc <MX_USART6_UART_Init+0x58>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80022c8:	4b0c      	ldr	r3, [pc, #48]	; (80022fc <MX_USART6_UART_Init+0x58>)
 80022ca:	220c      	movs	r2, #12
 80022cc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022ce:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <MX_USART6_UART_Init+0x58>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80022d4:	4b09      	ldr	r3, [pc, #36]	; (80022fc <MX_USART6_UART_Init+0x58>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022da:	4b08      	ldr	r3, [pc, #32]	; (80022fc <MX_USART6_UART_Init+0x58>)
 80022dc:	2200      	movs	r2, #0
 80022de:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022e0:	4b06      	ldr	r3, [pc, #24]	; (80022fc <MX_USART6_UART_Init+0x58>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80022e6:	4805      	ldr	r0, [pc, #20]	; (80022fc <MX_USART6_UART_Init+0x58>)
 80022e8:	f008 fb42 	bl	800a970 <HAL_UART_Init>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80022f2:	f000 fae7 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	2000c480 	.word	0x2000c480
 8002300:	40011400 	.word	0x40011400

08002304 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b088      	sub	sp, #32
 8002308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800230a:	1d3b      	adds	r3, r7, #4
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	605a      	str	r2, [r3, #4]
 8002312:	609a      	str	r2, [r3, #8]
 8002314:	60da      	str	r2, [r3, #12]
 8002316:	611a      	str	r2, [r3, #16]
 8002318:	615a      	str	r2, [r3, #20]
 800231a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800231c:	4b4c      	ldr	r3, [pc, #304]	; (8002450 <MX_FMC_Init+0x14c>)
 800231e:	4a4d      	ldr	r2, [pc, #308]	; (8002454 <MX_FMC_Init+0x150>)
 8002320:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8002322:	4b4b      	ldr	r3, [pc, #300]	; (8002450 <MX_FMC_Init+0x14c>)
 8002324:	2200      	movs	r2, #0
 8002326:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002328:	4b49      	ldr	r3, [pc, #292]	; (8002450 <MX_FMC_Init+0x14c>)
 800232a:	2200      	movs	r2, #0
 800232c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800232e:	4b48      	ldr	r3, [pc, #288]	; (8002450 <MX_FMC_Init+0x14c>)
 8002330:	2204      	movs	r2, #4
 8002332:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002334:	4b46      	ldr	r3, [pc, #280]	; (8002450 <MX_FMC_Init+0x14c>)
 8002336:	2210      	movs	r2, #16
 8002338:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800233a:	4b45      	ldr	r3, [pc, #276]	; (8002450 <MX_FMC_Init+0x14c>)
 800233c:	2240      	movs	r2, #64	; 0x40
 800233e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8002340:	4b43      	ldr	r3, [pc, #268]	; (8002450 <MX_FMC_Init+0x14c>)
 8002342:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002346:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002348:	4b41      	ldr	r3, [pc, #260]	; (8002450 <MX_FMC_Init+0x14c>)
 800234a:	2200      	movs	r2, #0
 800234c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800234e:	4b40      	ldr	r3, [pc, #256]	; (8002450 <MX_FMC_Init+0x14c>)
 8002350:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002354:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8002356:	4b3e      	ldr	r3, [pc, #248]	; (8002450 <MX_FMC_Init+0x14c>)
 8002358:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800235c:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800235e:	4b3c      	ldr	r3, [pc, #240]	; (8002450 <MX_FMC_Init+0x14c>)
 8002360:	2200      	movs	r2, #0
 8002362:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8002364:	2302      	movs	r3, #2
 8002366:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8002368:	2307      	movs	r3, #7
 800236a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800236c:	2304      	movs	r3, #4
 800236e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8002370:	2307      	movs	r3, #7
 8002372:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8002374:	2303      	movs	r3, #3
 8002376:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8002378:	2302      	movs	r3, #2
 800237a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800237c:	2302      	movs	r3, #2
 800237e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002380:	1d3b      	adds	r3, r7, #4
 8002382:	4619      	mov	r1, r3
 8002384:	4832      	ldr	r0, [pc, #200]	; (8002450 <MX_FMC_Init+0x14c>)
 8002386:	f007 f929 	bl	80095dc <HAL_SDRAM_Init>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8002390:	f000 fa98 	bl	80028c4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  __IO uint32_t tmpmrd = 0;
 8002394:	2300      	movs	r3, #0
 8002396:	603b      	str	r3, [r7, #0]

    /* Step 1: Configure a clock configuration enable command */
    Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8002398:	4b2f      	ldr	r3, [pc, #188]	; (8002458 <MX_FMC_Init+0x154>)
 800239a:	2201      	movs	r2, #1
 800239c:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 800239e:	4b2e      	ldr	r3, [pc, #184]	; (8002458 <MX_FMC_Init+0x154>)
 80023a0:	2210      	movs	r2, #16
 80023a2:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 80023a4:	4b2c      	ldr	r3, [pc, #176]	; (8002458 <MX_FMC_Init+0x154>)
 80023a6:	2201      	movs	r2, #1
 80023a8:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 80023aa:	4b2b      	ldr	r3, [pc, #172]	; (8002458 <MX_FMC_Init+0x154>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80023b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023b4:	4928      	ldr	r1, [pc, #160]	; (8002458 <MX_FMC_Init+0x154>)
 80023b6:	4826      	ldr	r0, [pc, #152]	; (8002450 <MX_FMC_Init+0x14c>)
 80023b8:	f007 f944 	bl	8009644 <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 80023bc:	2001      	movs	r0, #1
 80023be:	f001 fba3 	bl	8003b08 <HAL_Delay>

    /* Step 3: Configure a PALL (precharge all) command */
    Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80023c2:	4b25      	ldr	r3, [pc, #148]	; (8002458 <MX_FMC_Init+0x154>)
 80023c4:	2202      	movs	r2, #2
 80023c6:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80023c8:	4b23      	ldr	r3, [pc, #140]	; (8002458 <MX_FMC_Init+0x154>)
 80023ca:	2210      	movs	r2, #16
 80023cc:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 80023ce:	4b22      	ldr	r3, [pc, #136]	; (8002458 <MX_FMC_Init+0x154>)
 80023d0:	2201      	movs	r2, #1
 80023d2:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 80023d4:	4b20      	ldr	r3, [pc, #128]	; (8002458 <MX_FMC_Init+0x154>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80023da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023de:	491e      	ldr	r1, [pc, #120]	; (8002458 <MX_FMC_Init+0x154>)
 80023e0:	481b      	ldr	r0, [pc, #108]	; (8002450 <MX_FMC_Init+0x14c>)
 80023e2:	f007 f92f 	bl	8009644 <HAL_SDRAM_SendCommand>

    /* Step 4: Configure an Auto Refresh command */
    Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80023e6:	4b1c      	ldr	r3, [pc, #112]	; (8002458 <MX_FMC_Init+0x154>)
 80023e8:	2203      	movs	r2, #3
 80023ea:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80023ec:	4b1a      	ldr	r3, [pc, #104]	; (8002458 <MX_FMC_Init+0x154>)
 80023ee:	2210      	movs	r2, #16
 80023f0:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 8;
 80023f2:	4b19      	ldr	r3, [pc, #100]	; (8002458 <MX_FMC_Init+0x154>)
 80023f4:	2208      	movs	r2, #8
 80023f6:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 80023f8:	4b17      	ldr	r3, [pc, #92]	; (8002458 <MX_FMC_Init+0x154>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80023fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002402:	4915      	ldr	r1, [pc, #84]	; (8002458 <MX_FMC_Init+0x154>)
 8002404:	4812      	ldr	r0, [pc, #72]	; (8002450 <MX_FMC_Init+0x14c>)
 8002406:	f007 f91d 	bl	8009644 <HAL_SDRAM_SendCommand>

    /* Step 5: Program the external memory mode register */
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 800240a:	f44f 730c 	mov.w	r3, #560	; 0x230
 800240e:	603b      	str	r3, [r7, #0]
             SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL    | \
             SDRAM_MODEREG_CAS_LATENCY_3            | \
             SDRAM_MODEREG_OPERATING_MODE_STANDARD  | \
             SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

    Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8002410:	4b11      	ldr	r3, [pc, #68]	; (8002458 <MX_FMC_Init+0x154>)
 8002412:	2204      	movs	r2, #4
 8002414:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002416:	4b10      	ldr	r3, [pc, #64]	; (8002458 <MX_FMC_Init+0x154>)
 8002418:	2210      	movs	r2, #16
 800241a:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 800241c:	4b0e      	ldr	r3, [pc, #56]	; (8002458 <MX_FMC_Init+0x154>)
 800241e:	2201      	movs	r2, #1
 8002420:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = tmpmrd;
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	4a0c      	ldr	r2, [pc, #48]	; (8002458 <MX_FMC_Init+0x154>)
 8002426:	60d3      	str	r3, [r2, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002428:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800242c:	490a      	ldr	r1, [pc, #40]	; (8002458 <MX_FMC_Init+0x154>)
 800242e:	4808      	ldr	r0, [pc, #32]	; (8002450 <MX_FMC_Init+0x14c>)
 8002430:	f007 f908 	bl	8009644 <HAL_SDRAM_SendCommand>

    /* Step 6: Set the refresh rate counter */
    /* Set the device refresh rate */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 8002434:	f240 712b 	movw	r1, #1835	; 0x72b
 8002438:	4805      	ldr	r0, [pc, #20]	; (8002450 <MX_FMC_Init+0x14c>)
 800243a:	f007 f92e 	bl	800969a <HAL_SDRAM_ProgramRefreshRate>

    //Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
    FMC_Bank1->BTCR[0] = 0x000030D2;
 800243e:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8002442:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002446:	601a      	str	r2, [r3, #0]
  /* USER CODE END FMC_Init 2 */
}
 8002448:	bf00      	nop
 800244a:	3720      	adds	r7, #32
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	2000c5f0 	.word	0x2000c5f0
 8002454:	a0000140 	.word	0xa0000140
 8002458:	20000374 	.word	0x20000374

0800245c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b090      	sub	sp, #64	; 0x40
 8002460:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002462:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002466:	2200      	movs	r2, #0
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	605a      	str	r2, [r3, #4]
 800246c:	609a      	str	r2, [r3, #8]
 800246e:	60da      	str	r2, [r3, #12]
 8002470:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002472:	4baf      	ldr	r3, [pc, #700]	; (8002730 <MX_GPIO_Init+0x2d4>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002476:	4aae      	ldr	r2, [pc, #696]	; (8002730 <MX_GPIO_Init+0x2d4>)
 8002478:	f043 0310 	orr.w	r3, r3, #16
 800247c:	6313      	str	r3, [r2, #48]	; 0x30
 800247e:	4bac      	ldr	r3, [pc, #688]	; (8002730 <MX_GPIO_Init+0x2d4>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002482:	f003 0310 	and.w	r3, r3, #16
 8002486:	62bb      	str	r3, [r7, #40]	; 0x28
 8002488:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800248a:	4ba9      	ldr	r3, [pc, #676]	; (8002730 <MX_GPIO_Init+0x2d4>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	4aa8      	ldr	r2, [pc, #672]	; (8002730 <MX_GPIO_Init+0x2d4>)
 8002490:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002494:	6313      	str	r3, [r2, #48]	; 0x30
 8002496:	4ba6      	ldr	r3, [pc, #664]	; (8002730 <MX_GPIO_Init+0x2d4>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800249e:	627b      	str	r3, [r7, #36]	; 0x24
 80024a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024a2:	4ba3      	ldr	r3, [pc, #652]	; (8002730 <MX_GPIO_Init+0x2d4>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	4aa2      	ldr	r2, [pc, #648]	; (8002730 <MX_GPIO_Init+0x2d4>)
 80024a8:	f043 0302 	orr.w	r3, r3, #2
 80024ac:	6313      	str	r3, [r2, #48]	; 0x30
 80024ae:	4ba0      	ldr	r3, [pc, #640]	; (8002730 <MX_GPIO_Init+0x2d4>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	623b      	str	r3, [r7, #32]
 80024b8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024ba:	4b9d      	ldr	r3, [pc, #628]	; (8002730 <MX_GPIO_Init+0x2d4>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	4a9c      	ldr	r2, [pc, #624]	; (8002730 <MX_GPIO_Init+0x2d4>)
 80024c0:	f043 0308 	orr.w	r3, r3, #8
 80024c4:	6313      	str	r3, [r2, #48]	; 0x30
 80024c6:	4b9a      	ldr	r3, [pc, #616]	; (8002730 <MX_GPIO_Init+0x2d4>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	f003 0308 	and.w	r3, r3, #8
 80024ce:	61fb      	str	r3, [r7, #28]
 80024d0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024d2:	4b97      	ldr	r3, [pc, #604]	; (8002730 <MX_GPIO_Init+0x2d4>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	4a96      	ldr	r2, [pc, #600]	; (8002730 <MX_GPIO_Init+0x2d4>)
 80024d8:	f043 0304 	orr.w	r3, r3, #4
 80024dc:	6313      	str	r3, [r2, #48]	; 0x30
 80024de:	4b94      	ldr	r3, [pc, #592]	; (8002730 <MX_GPIO_Init+0x2d4>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	f003 0304 	and.w	r3, r3, #4
 80024e6:	61bb      	str	r3, [r7, #24]
 80024e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ea:	4b91      	ldr	r3, [pc, #580]	; (8002730 <MX_GPIO_Init+0x2d4>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	4a90      	ldr	r2, [pc, #576]	; (8002730 <MX_GPIO_Init+0x2d4>)
 80024f0:	f043 0301 	orr.w	r3, r3, #1
 80024f4:	6313      	str	r3, [r2, #48]	; 0x30
 80024f6:	4b8e      	ldr	r3, [pc, #568]	; (8002730 <MX_GPIO_Init+0x2d4>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	617b      	str	r3, [r7, #20]
 8002500:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002502:	4b8b      	ldr	r3, [pc, #556]	; (8002730 <MX_GPIO_Init+0x2d4>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002506:	4a8a      	ldr	r2, [pc, #552]	; (8002730 <MX_GPIO_Init+0x2d4>)
 8002508:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800250c:	6313      	str	r3, [r2, #48]	; 0x30
 800250e:	4b88      	ldr	r3, [pc, #544]	; (8002730 <MX_GPIO_Init+0x2d4>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002512:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002516:	613b      	str	r3, [r7, #16]
 8002518:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800251a:	4b85      	ldr	r3, [pc, #532]	; (8002730 <MX_GPIO_Init+0x2d4>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	4a84      	ldr	r2, [pc, #528]	; (8002730 <MX_GPIO_Init+0x2d4>)
 8002520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002524:	6313      	str	r3, [r2, #48]	; 0x30
 8002526:	4b82      	ldr	r3, [pc, #520]	; (8002730 <MX_GPIO_Init+0x2d4>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252e:	60fb      	str	r3, [r7, #12]
 8002530:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002532:	4b7f      	ldr	r3, [pc, #508]	; (8002730 <MX_GPIO_Init+0x2d4>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002536:	4a7e      	ldr	r2, [pc, #504]	; (8002730 <MX_GPIO_Init+0x2d4>)
 8002538:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800253c:	6313      	str	r3, [r2, #48]	; 0x30
 800253e:	4b7c      	ldr	r3, [pc, #496]	; (8002730 <MX_GPIO_Init+0x2d4>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002546:	60bb      	str	r3, [r7, #8]
 8002548:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800254a:	4b79      	ldr	r3, [pc, #484]	; (8002730 <MX_GPIO_Init+0x2d4>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254e:	4a78      	ldr	r2, [pc, #480]	; (8002730 <MX_GPIO_Init+0x2d4>)
 8002550:	f043 0320 	orr.w	r3, r3, #32
 8002554:	6313      	str	r3, [r2, #48]	; 0x30
 8002556:	4b76      	ldr	r3, [pc, #472]	; (8002730 <MX_GPIO_Init+0x2d4>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	f003 0320 	and.w	r3, r3, #32
 800255e:	607b      	str	r3, [r7, #4]
 8002560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002562:	4b73      	ldr	r3, [pc, #460]	; (8002730 <MX_GPIO_Init+0x2d4>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	4a72      	ldr	r2, [pc, #456]	; (8002730 <MX_GPIO_Init+0x2d4>)
 8002568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800256c:	6313      	str	r3, [r2, #48]	; 0x30
 800256e:	4b70      	ldr	r3, [pc, #448]	; (8002730 <MX_GPIO_Init+0x2d4>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002576:	603b      	str	r3, [r7, #0]
 8002578:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800257a:	2201      	movs	r2, #1
 800257c:	2120      	movs	r1, #32
 800257e:	486d      	ldr	r0, [pc, #436]	; (8002734 <MX_GPIO_Init+0x2d8>)
 8002580:	f003 fbb8 	bl	8005cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8002584:	2200      	movs	r2, #0
 8002586:	210c      	movs	r1, #12
 8002588:	486b      	ldr	r0, [pc, #428]	; (8002738 <MX_GPIO_Init+0x2dc>)
 800258a:	f003 fbb3 	bl	8005cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800258e:	2201      	movs	r2, #1
 8002590:	2108      	movs	r1, #8
 8002592:	486a      	ldr	r0, [pc, #424]	; (800273c <MX_GPIO_Init+0x2e0>)
 8002594:	f003 fbae 	bl	8005cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8002598:	2201      	movs	r2, #1
 800259a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800259e:	4866      	ldr	r0, [pc, #408]	; (8002738 <MX_GPIO_Init+0x2dc>)
 80025a0:	f003 fba8 	bl	8005cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80025a4:	2200      	movs	r2, #0
 80025a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025aa:	4865      	ldr	r0, [pc, #404]	; (8002740 <MX_GPIO_Init+0x2e4>)
 80025ac:	f003 fba2 	bl	8005cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80025b0:	2200      	movs	r2, #0
 80025b2:	21c8      	movs	r1, #200	; 0xc8
 80025b4:	4863      	ldr	r0, [pc, #396]	; (8002744 <MX_GPIO_Init+0x2e8>)
 80025b6:	f003 fb9d 	bl	8005cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80025ba:	2308      	movs	r3, #8
 80025bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025be:	2300      	movs	r3, #0
 80025c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c2:	2300      	movs	r3, #0
 80025c4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80025c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025ca:	4619      	mov	r1, r3
 80025cc:	485e      	ldr	r0, [pc, #376]	; (8002748 <MX_GPIO_Init+0x2ec>)
 80025ce:	f003 f9cf 	bl	8005970 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80025d2:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80025d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d8:	2302      	movs	r3, #2
 80025da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025dc:	2300      	movs	r3, #0
 80025de:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025e0:	2303      	movs	r3, #3
 80025e2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80025e4:	230b      	movs	r3, #11
 80025e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025ec:	4619      	mov	r1, r3
 80025ee:	4855      	ldr	r0, [pc, #340]	; (8002744 <MX_GPIO_Init+0x2e8>)
 80025f0:	f003 f9be 	bl	8005970 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 80025f4:	f643 4323 	movw	r3, #15395	; 0x3c23
 80025f8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025fa:	2302      	movs	r3, #2
 80025fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fe:	2300      	movs	r3, #0
 8002600:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002602:	2303      	movs	r3, #3
 8002604:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002606:	230a      	movs	r3, #10
 8002608:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800260a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800260e:	4619      	mov	r1, r3
 8002610:	484e      	ldr	r0, [pc, #312]	; (800274c <MX_GPIO_Init+0x2f0>)
 8002612:	f003 f9ad 	bl	8005970 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002616:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800261a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800261c:	2300      	movs	r3, #0
 800261e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002620:	2300      	movs	r3, #0
 8002622:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002624:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002628:	4619      	mov	r1, r3
 800262a:	4849      	ldr	r0, [pc, #292]	; (8002750 <MX_GPIO_Init+0x2f4>)
 800262c:	f003 f9a0 	bl	8005970 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002630:	2340      	movs	r3, #64	; 0x40
 8002632:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002634:	4b47      	ldr	r3, [pc, #284]	; (8002754 <MX_GPIO_Init+0x2f8>)
 8002636:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002638:	2300      	movs	r3, #0
 800263a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800263c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002640:	4619      	mov	r1, r3
 8002642:	483c      	ldr	r0, [pc, #240]	; (8002734 <MX_GPIO_Init+0x2d8>)
 8002644:	f003 f994 	bl	8005970 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8002648:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800264c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264e:	2302      	movs	r3, #2
 8002650:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002652:	2300      	movs	r3, #0
 8002654:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002656:	2303      	movs	r3, #3
 8002658:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800265a:	230a      	movs	r3, #10
 800265c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800265e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002662:	4619      	mov	r1, r3
 8002664:	483c      	ldr	r0, [pc, #240]	; (8002758 <MX_GPIO_Init+0x2fc>)
 8002666:	f003 f983 	bl	8005970 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800266a:	2320      	movs	r3, #32
 800266c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800266e:	2301      	movs	r3, #1
 8002670:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002672:	2300      	movs	r3, #0
 8002674:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002676:	2300      	movs	r3, #0
 8002678:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800267a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800267e:	4619      	mov	r1, r3
 8002680:	482c      	ldr	r0, [pc, #176]	; (8002734 <MX_GPIO_Init+0x2d8>)
 8002682:	f003 f975 	bl	8005970 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8002686:	f241 030c 	movw	r3, #4108	; 0x100c
 800268a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800268c:	2301      	movs	r3, #1
 800268e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002690:	2300      	movs	r3, #0
 8002692:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002694:	2300      	movs	r3, #0
 8002696:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002698:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800269c:	4619      	mov	r1, r3
 800269e:	4826      	ldr	r0, [pc, #152]	; (8002738 <MX_GPIO_Init+0x2dc>)
 80026a0:	f003 f966 	bl	8005970 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80026a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026aa:	2300      	movs	r3, #0
 80026ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ae:	2300      	movs	r3, #0
 80026b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80026b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026b6:	4619      	mov	r1, r3
 80026b8:	4828      	ldr	r0, [pc, #160]	; (800275c <MX_GPIO_Init+0x300>)
 80026ba:	f003 f959 	bl	8005970 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80026be:	2308      	movs	r3, #8
 80026c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026c2:	2301      	movs	r3, #1
 80026c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c6:	2300      	movs	r3, #0
 80026c8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ca:	2300      	movs	r3, #0
 80026cc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80026ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026d2:	4619      	mov	r1, r3
 80026d4:	4819      	ldr	r0, [pc, #100]	; (800273c <MX_GPIO_Init+0x2e0>)
 80026d6:	f003 f94b 	bl	8005970 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80026da:	2310      	movs	r3, #16
 80026dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026de:	2300      	movs	r3, #0
 80026e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e2:	2300      	movs	r3, #0
 80026e4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80026e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026ea:	4619      	mov	r1, r3
 80026ec:	4811      	ldr	r0, [pc, #68]	; (8002734 <MX_GPIO_Init+0x2d8>)
 80026ee:	f003 f93f 	bl	8005970 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80026f2:	f248 0304 	movw	r3, #32772	; 0x8004
 80026f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026f8:	2300      	movs	r3, #0
 80026fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fc:	2300      	movs	r3, #0
 80026fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002700:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002704:	4619      	mov	r1, r3
 8002706:	480e      	ldr	r0, [pc, #56]	; (8002740 <MX_GPIO_Init+0x2e4>)
 8002708:	f003 f932 	bl	8005970 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800270c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002710:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002712:	2301      	movs	r3, #1
 8002714:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002716:	2300      	movs	r3, #0
 8002718:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800271a:	2300      	movs	r3, #0
 800271c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800271e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002722:	4619      	mov	r1, r3
 8002724:	4806      	ldr	r0, [pc, #24]	; (8002740 <MX_GPIO_Init+0x2e4>)
 8002726:	f003 f923 	bl	8005970 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800272a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800272e:	e017      	b.n	8002760 <MX_GPIO_Init+0x304>
 8002730:	40023800 	.word	0x40023800
 8002734:	40020c00 	.word	0x40020c00
 8002738:	40022000 	.word	0x40022000
 800273c:	40022800 	.word	0x40022800
 8002740:	40021c00 	.word	0x40021c00
 8002744:	40021800 	.word	0x40021800
 8002748:	40021000 	.word	0x40021000
 800274c:	40020400 	.word	0x40020400
 8002750:	40022400 	.word	0x40022400
 8002754:	10120000 	.word	0x10120000
 8002758:	40020000 	.word	0x40020000
 800275c:	40020800 	.word	0x40020800
 8002760:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002762:	4b44      	ldr	r3, [pc, #272]	; (8002874 <MX_GPIO_Init+0x418>)
 8002764:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002766:	2300      	movs	r3, #0
 8002768:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800276a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800276e:	4619      	mov	r1, r3
 8002770:	4841      	ldr	r0, [pc, #260]	; (8002878 <MX_GPIO_Init+0x41c>)
 8002772:	f003 f8fd 	bl	8005970 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002776:	2310      	movs	r3, #16
 8002778:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277a:	2302      	movs	r3, #2
 800277c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277e:	2300      	movs	r3, #0
 8002780:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002782:	2303      	movs	r3, #3
 8002784:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002786:	230a      	movs	r3, #10
 8002788:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800278a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800278e:	4619      	mov	r1, r3
 8002790:	483a      	ldr	r0, [pc, #232]	; (800287c <MX_GPIO_Init+0x420>)
 8002792:	f003 f8ed 	bl	8005970 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8002796:	23c8      	movs	r3, #200	; 0xc8
 8002798:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800279a:	2301      	movs	r3, #1
 800279c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279e:	2300      	movs	r3, #0
 80027a0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a2:	2300      	movs	r3, #0
 80027a4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80027a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027aa:	4619      	mov	r1, r3
 80027ac:	4834      	ldr	r0, [pc, #208]	; (8002880 <MX_GPIO_Init+0x424>)
 80027ae:	f003 f8df 	bl	8005970 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80027b2:	2305      	movs	r3, #5
 80027b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b6:	2302      	movs	r3, #2
 80027b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ba:	2300      	movs	r3, #0
 80027bc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027be:	2303      	movs	r3, #3
 80027c0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80027c2:	230a      	movs	r3, #10
 80027c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027ca:	4619      	mov	r1, r3
 80027cc:	482d      	ldr	r0, [pc, #180]	; (8002884 <MX_GPIO_Init+0x428>)
 80027ce:	f003 f8cf 	bl	8005970 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80027d2:	2332      	movs	r3, #50	; 0x32
 80027d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d6:	2302      	movs	r3, #2
 80027d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027da:	2300      	movs	r3, #0
 80027dc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027de:	2303      	movs	r3, #3
 80027e0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80027e2:	230b      	movs	r3, #11
 80027e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027ea:	4619      	mov	r1, r3
 80027ec:	4825      	ldr	r0, [pc, #148]	; (8002884 <MX_GPIO_Init+0x428>)
 80027ee:	f003 f8bf 	bl	8005970 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80027f2:	2304      	movs	r3, #4
 80027f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027f6:	2300      	movs	r3, #0
 80027f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fa:	2300      	movs	r3, #0
 80027fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80027fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002802:	4619      	mov	r1, r3
 8002804:	481e      	ldr	r0, [pc, #120]	; (8002880 <MX_GPIO_Init+0x424>)
 8002806:	f003 f8b3 	bl	8005970 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800280a:	2386      	movs	r3, #134	; 0x86
 800280c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280e:	2302      	movs	r3, #2
 8002810:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002812:	2300      	movs	r3, #0
 8002814:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002816:	2303      	movs	r3, #3
 8002818:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800281a:	230b      	movs	r3, #11
 800281c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800281e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002822:	4619      	mov	r1, r3
 8002824:	4818      	ldr	r0, [pc, #96]	; (8002888 <MX_GPIO_Init+0x42c>)
 8002826:	f003 f8a3 	bl	8005970 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800282a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800282e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002830:	2312      	movs	r3, #18
 8002832:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002834:	2301      	movs	r3, #1
 8002836:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002838:	2303      	movs	r3, #3
 800283a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800283c:	2304      	movs	r3, #4
 800283e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002840:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002844:	4619      	mov	r1, r3
 8002846:	480d      	ldr	r0, [pc, #52]	; (800287c <MX_GPIO_Init+0x420>)
 8002848:	f003 f892 	bl	8005970 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800284c:	2328      	movs	r3, #40	; 0x28
 800284e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002850:	2302      	movs	r3, #2
 8002852:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002854:	2300      	movs	r3, #0
 8002856:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002858:	2303      	movs	r3, #3
 800285a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800285c:	230a      	movs	r3, #10
 800285e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002860:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002864:	4619      	mov	r1, r3
 8002866:	4808      	ldr	r0, [pc, #32]	; (8002888 <MX_GPIO_Init+0x42c>)
 8002868:	f003 f882 	bl	8005970 <HAL_GPIO_Init>

}
 800286c:	bf00      	nop
 800286e:	3740      	adds	r7, #64	; 0x40
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	10120000 	.word	0x10120000
 8002878:	40022000 	.word	0x40022000
 800287c:	40021c00 	.word	0x40021c00
 8002880:	40021800 	.word	0x40021800
 8002884:	40020800 	.word	0x40020800
 8002888:	40020000 	.word	0x40020000

0800288c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  MX_TouchGFX_Process();
 8002894:	f00c fba4 	bl	800efe0 <MX_TouchGFX_Process>
  /* Infinite loop */

  for(;;)
  {
    osDelay(1);
 8002898:	2001      	movs	r0, #1
 800289a:	f009 fe6d 	bl	800c578 <osDelay>
 800289e:	e7fb      	b.n	8002898 <StartDefaultTask+0xc>

080028a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a04      	ldr	r2, [pc, #16]	; (80028c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d101      	bne.n	80028b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80028b2:	f001 f909 	bl	8003ac8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80028b6:	bf00      	nop
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40001000 	.word	0x40001000

080028c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80028c8:	bf00      	nop
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
	...

080028d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80028da:	4b11      	ldr	r3, [pc, #68]	; (8002920 <HAL_MspInit+0x4c>)
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	4a10      	ldr	r2, [pc, #64]	; (8002920 <HAL_MspInit+0x4c>)
 80028e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028e4:	6413      	str	r3, [r2, #64]	; 0x40
 80028e6:	4b0e      	ldr	r3, [pc, #56]	; (8002920 <HAL_MspInit+0x4c>)
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ee:	607b      	str	r3, [r7, #4]
 80028f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028f2:	4b0b      	ldr	r3, [pc, #44]	; (8002920 <HAL_MspInit+0x4c>)
 80028f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f6:	4a0a      	ldr	r2, [pc, #40]	; (8002920 <HAL_MspInit+0x4c>)
 80028f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028fc:	6453      	str	r3, [r2, #68]	; 0x44
 80028fe:	4b08      	ldr	r3, [pc, #32]	; (8002920 <HAL_MspInit+0x4c>)
 8002900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002902:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002906:	603b      	str	r3, [r7, #0]
 8002908:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800290a:	2200      	movs	r2, #0
 800290c:	210f      	movs	r1, #15
 800290e:	f06f 0001 	mvn.w	r0, #1
 8002912:	f002 f9ff 	bl	8004d14 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002916:	bf00      	nop
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	40023800 	.word	0x40023800

08002924 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b08a      	sub	sp, #40	; 0x28
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800292c:	f107 0314 	add.w	r3, r7, #20
 8002930:	2200      	movs	r2, #0
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	605a      	str	r2, [r3, #4]
 8002936:	609a      	str	r2, [r3, #8]
 8002938:	60da      	str	r2, [r3, #12]
 800293a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a21      	ldr	r2, [pc, #132]	; (80029c8 <HAL_ADC_MspInit+0xa4>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d13c      	bne.n	80029c0 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002946:	4b21      	ldr	r3, [pc, #132]	; (80029cc <HAL_ADC_MspInit+0xa8>)
 8002948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294a:	4a20      	ldr	r2, [pc, #128]	; (80029cc <HAL_ADC_MspInit+0xa8>)
 800294c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002950:	6453      	str	r3, [r2, #68]	; 0x44
 8002952:	4b1e      	ldr	r3, [pc, #120]	; (80029cc <HAL_ADC_MspInit+0xa8>)
 8002954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002956:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800295a:	613b      	str	r3, [r7, #16]
 800295c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800295e:	4b1b      	ldr	r3, [pc, #108]	; (80029cc <HAL_ADC_MspInit+0xa8>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	4a1a      	ldr	r2, [pc, #104]	; (80029cc <HAL_ADC_MspInit+0xa8>)
 8002964:	f043 0320 	orr.w	r3, r3, #32
 8002968:	6313      	str	r3, [r2, #48]	; 0x30
 800296a:	4b18      	ldr	r3, [pc, #96]	; (80029cc <HAL_ADC_MspInit+0xa8>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	f003 0320 	and.w	r3, r3, #32
 8002972:	60fb      	str	r3, [r7, #12]
 8002974:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002976:	4b15      	ldr	r3, [pc, #84]	; (80029cc <HAL_ADC_MspInit+0xa8>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297a:	4a14      	ldr	r2, [pc, #80]	; (80029cc <HAL_ADC_MspInit+0xa8>)
 800297c:	f043 0301 	orr.w	r3, r3, #1
 8002980:	6313      	str	r3, [r2, #48]	; 0x30
 8002982:	4b12      	ldr	r3, [pc, #72]	; (80029cc <HAL_ADC_MspInit+0xa8>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	60bb      	str	r3, [r7, #8]
 800298c:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 800298e:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8002992:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002994:	2303      	movs	r3, #3
 8002996:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002998:	2300      	movs	r3, #0
 800299a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800299c:	f107 0314 	add.w	r3, r7, #20
 80029a0:	4619      	mov	r1, r3
 80029a2:	480b      	ldr	r0, [pc, #44]	; (80029d0 <HAL_ADC_MspInit+0xac>)
 80029a4:	f002 ffe4 	bl	8005970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80029a8:	2301      	movs	r3, #1
 80029aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029ac:	2303      	movs	r3, #3
 80029ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b0:	2300      	movs	r3, #0
 80029b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80029b4:	f107 0314 	add.w	r3, r7, #20
 80029b8:	4619      	mov	r1, r3
 80029ba:	4806      	ldr	r0, [pc, #24]	; (80029d4 <HAL_ADC_MspInit+0xb0>)
 80029bc:	f002 ffd8 	bl	8005970 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80029c0:	bf00      	nop
 80029c2:	3728      	adds	r7, #40	; 0x28
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	40012200 	.word	0x40012200
 80029cc:	40023800 	.word	0x40023800
 80029d0:	40021400 	.word	0x40021400
 80029d4:	40020000 	.word	0x40020000

080029d8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b08a      	sub	sp, #40	; 0x28
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e0:	f107 0314 	add.w	r3, r7, #20
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	605a      	str	r2, [r3, #4]
 80029ea:	609a      	str	r2, [r3, #8]
 80029ec:	60da      	str	r2, [r3, #12]
 80029ee:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a1b      	ldr	r2, [pc, #108]	; (8002a64 <HAL_CAN_MspInit+0x8c>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d130      	bne.n	8002a5c <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80029fa:	4b1b      	ldr	r3, [pc, #108]	; (8002a68 <HAL_CAN_MspInit+0x90>)
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	4a1a      	ldr	r2, [pc, #104]	; (8002a68 <HAL_CAN_MspInit+0x90>)
 8002a00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a04:	6413      	str	r3, [r2, #64]	; 0x40
 8002a06:	4b18      	ldr	r3, [pc, #96]	; (8002a68 <HAL_CAN_MspInit+0x90>)
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a0e:	613b      	str	r3, [r7, #16]
 8002a10:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a12:	4b15      	ldr	r3, [pc, #84]	; (8002a68 <HAL_CAN_MspInit+0x90>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	4a14      	ldr	r2, [pc, #80]	; (8002a68 <HAL_CAN_MspInit+0x90>)
 8002a18:	f043 0302 	orr.w	r3, r3, #2
 8002a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a1e:	4b12      	ldr	r3, [pc, #72]	; (8002a68 <HAL_CAN_MspInit+0x90>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	60fb      	str	r3, [r7, #12]
 8002a28:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a2a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a30:	2302      	movs	r3, #2
 8002a32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a34:	2300      	movs	r3, #0
 8002a36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002a3c:	2309      	movs	r3, #9
 8002a3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a40:	f107 0314 	add.w	r3, r7, #20
 8002a44:	4619      	mov	r1, r3
 8002a46:	4809      	ldr	r0, [pc, #36]	; (8002a6c <HAL_CAN_MspInit+0x94>)
 8002a48:	f002 ff92 	bl	8005970 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	2105      	movs	r1, #5
 8002a50:	2014      	movs	r0, #20
 8002a52:	f002 f95f 	bl	8004d14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002a56:	2014      	movs	r0, #20
 8002a58:	f002 f978 	bl	8004d4c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002a5c:	bf00      	nop
 8002a5e:	3728      	adds	r7, #40	; 0x28
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	40006400 	.word	0x40006400
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	40020400 	.word	0x40020400

08002a70 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a0a      	ldr	r2, [pc, #40]	; (8002aa8 <HAL_CRC_MspInit+0x38>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d10b      	bne.n	8002a9a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002a82:	4b0a      	ldr	r3, [pc, #40]	; (8002aac <HAL_CRC_MspInit+0x3c>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a86:	4a09      	ldr	r2, [pc, #36]	; (8002aac <HAL_CRC_MspInit+0x3c>)
 8002a88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a8e:	4b07      	ldr	r3, [pc, #28]	; (8002aac <HAL_CRC_MspInit+0x3c>)
 8002a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002a9a:	bf00      	nop
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	40023000 	.word	0x40023000
 8002aac:	40023800 	.word	0x40023800

08002ab0 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b08e      	sub	sp, #56	; 0x38
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	605a      	str	r2, [r3, #4]
 8002ac2:	609a      	str	r2, [r3, #8]
 8002ac4:	60da      	str	r2, [r3, #12]
 8002ac6:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a50      	ldr	r2, [pc, #320]	; (8002c10 <HAL_DCMI_MspInit+0x160>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	f040 809a 	bne.w	8002c08 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002ad4:	4b4f      	ldr	r3, [pc, #316]	; (8002c14 <HAL_DCMI_MspInit+0x164>)
 8002ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad8:	4a4e      	ldr	r2, [pc, #312]	; (8002c14 <HAL_DCMI_MspInit+0x164>)
 8002ada:	f043 0301 	orr.w	r3, r3, #1
 8002ade:	6353      	str	r3, [r2, #52]	; 0x34
 8002ae0:	4b4c      	ldr	r3, [pc, #304]	; (8002c14 <HAL_DCMI_MspInit+0x164>)
 8002ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ae4:	f003 0301 	and.w	r3, r3, #1
 8002ae8:	623b      	str	r3, [r7, #32]
 8002aea:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002aec:	4b49      	ldr	r3, [pc, #292]	; (8002c14 <HAL_DCMI_MspInit+0x164>)
 8002aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af0:	4a48      	ldr	r2, [pc, #288]	; (8002c14 <HAL_DCMI_MspInit+0x164>)
 8002af2:	f043 0310 	orr.w	r3, r3, #16
 8002af6:	6313      	str	r3, [r2, #48]	; 0x30
 8002af8:	4b46      	ldr	r3, [pc, #280]	; (8002c14 <HAL_DCMI_MspInit+0x164>)
 8002afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afc:	f003 0310 	and.w	r3, r3, #16
 8002b00:	61fb      	str	r3, [r7, #28]
 8002b02:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b04:	4b43      	ldr	r3, [pc, #268]	; (8002c14 <HAL_DCMI_MspInit+0x164>)
 8002b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b08:	4a42      	ldr	r2, [pc, #264]	; (8002c14 <HAL_DCMI_MspInit+0x164>)
 8002b0a:	f043 0308 	orr.w	r3, r3, #8
 8002b0e:	6313      	str	r3, [r2, #48]	; 0x30
 8002b10:	4b40      	ldr	r3, [pc, #256]	; (8002c14 <HAL_DCMI_MspInit+0x164>)
 8002b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b14:	f003 0308 	and.w	r3, r3, #8
 8002b18:	61bb      	str	r3, [r7, #24]
 8002b1a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b1c:	4b3d      	ldr	r3, [pc, #244]	; (8002c14 <HAL_DCMI_MspInit+0x164>)
 8002b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b20:	4a3c      	ldr	r2, [pc, #240]	; (8002c14 <HAL_DCMI_MspInit+0x164>)
 8002b22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b26:	6313      	str	r3, [r2, #48]	; 0x30
 8002b28:	4b3a      	ldr	r3, [pc, #232]	; (8002c14 <HAL_DCMI_MspInit+0x164>)
 8002b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b30:	617b      	str	r3, [r7, #20]
 8002b32:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b34:	4b37      	ldr	r3, [pc, #220]	; (8002c14 <HAL_DCMI_MspInit+0x164>)
 8002b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b38:	4a36      	ldr	r2, [pc, #216]	; (8002c14 <HAL_DCMI_MspInit+0x164>)
 8002b3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b3e:	6313      	str	r3, [r2, #48]	; 0x30
 8002b40:	4b34      	ldr	r3, [pc, #208]	; (8002c14 <HAL_DCMI_MspInit+0x164>)
 8002b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b48:	613b      	str	r3, [r7, #16]
 8002b4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b4c:	4b31      	ldr	r3, [pc, #196]	; (8002c14 <HAL_DCMI_MspInit+0x164>)
 8002b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b50:	4a30      	ldr	r2, [pc, #192]	; (8002c14 <HAL_DCMI_MspInit+0x164>)
 8002b52:	f043 0301 	orr.w	r3, r3, #1
 8002b56:	6313      	str	r3, [r2, #48]	; 0x30
 8002b58:	4b2e      	ldr	r3, [pc, #184]	; (8002c14 <HAL_DCMI_MspInit+0x164>)
 8002b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	60fb      	str	r3, [r7, #12]
 8002b62:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1 
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8002b64:	2360      	movs	r3, #96	; 0x60
 8002b66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b68:	2302      	movs	r3, #2
 8002b6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b70:	2300      	movs	r3, #0
 8002b72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002b74:	230d      	movs	r3, #13
 8002b76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	4826      	ldr	r0, [pc, #152]	; (8002c18 <HAL_DCMI_MspInit+0x168>)
 8002b80:	f002 fef6 	bl	8005970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8002b84:	2308      	movs	r3, #8
 8002b86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b88:	2302      	movs	r3, #2
 8002b8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b90:	2300      	movs	r3, #0
 8002b92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002b94:	230d      	movs	r3, #13
 8002b96:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8002b98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	481f      	ldr	r0, [pc, #124]	; (8002c1c <HAL_DCMI_MspInit+0x16c>)
 8002ba0:	f002 fee6 	bl	8005970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8002ba4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ba8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002baa:	2302      	movs	r3, #2
 8002bac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002bb6:	230d      	movs	r3, #13
 8002bb8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8002bba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	4817      	ldr	r0, [pc, #92]	; (8002c20 <HAL_DCMI_MspInit+0x170>)
 8002bc2:	f002 fed5 	bl	8005970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 8002bc6:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8002bca:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bcc:	2302      	movs	r3, #2
 8002bce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002bd8:	230d      	movs	r3, #13
 8002bda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002bdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002be0:	4619      	mov	r1, r3
 8002be2:	4810      	ldr	r0, [pc, #64]	; (8002c24 <HAL_DCMI_MspInit+0x174>)
 8002be4:	f002 fec4 	bl	8005970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002be8:	2350      	movs	r3, #80	; 0x50
 8002bea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bec:	2302      	movs	r3, #2
 8002bee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002bf8:	230d      	movs	r3, #13
 8002bfa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c00:	4619      	mov	r1, r3
 8002c02:	4809      	ldr	r0, [pc, #36]	; (8002c28 <HAL_DCMI_MspInit+0x178>)
 8002c04:	f002 feb4 	bl	8005970 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8002c08:	bf00      	nop
 8002c0a:	3738      	adds	r7, #56	; 0x38
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	50050000 	.word	0x50050000
 8002c14:	40023800 	.word	0x40023800
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	40020c00 	.word	0x40020c00
 8002c20:	40021800 	.word	0x40021800
 8002c24:	40021c00 	.word	0x40021c00
 8002c28:	40020000 	.word	0x40020000

08002c2c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a0d      	ldr	r2, [pc, #52]	; (8002c70 <HAL_DMA2D_MspInit+0x44>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d113      	bne.n	8002c66 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002c3e:	4b0d      	ldr	r3, [pc, #52]	; (8002c74 <HAL_DMA2D_MspInit+0x48>)
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c42:	4a0c      	ldr	r2, [pc, #48]	; (8002c74 <HAL_DMA2D_MspInit+0x48>)
 8002c44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c48:	6313      	str	r3, [r2, #48]	; 0x30
 8002c4a:	4b0a      	ldr	r3, [pc, #40]	; (8002c74 <HAL_DMA2D_MspInit+0x48>)
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002c56:	2200      	movs	r2, #0
 8002c58:	2105      	movs	r1, #5
 8002c5a:	205a      	movs	r0, #90	; 0x5a
 8002c5c:	f002 f85a 	bl	8004d14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002c60:	205a      	movs	r0, #90	; 0x5a
 8002c62:	f002 f873 	bl	8004d4c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002c66:	bf00      	nop
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	4002b000 	.word	0x4002b000
 8002c74:	40023800 	.word	0x40023800

08002c78 <HAL_DMA2D_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a07      	ldr	r2, [pc, #28]	; (8002ca4 <HAL_DMA2D_MspDeInit+0x2c>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d108      	bne.n	8002c9c <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 8002c8a:	4b07      	ldr	r3, [pc, #28]	; (8002ca8 <HAL_DMA2D_MspDeInit+0x30>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	4a06      	ldr	r2, [pc, #24]	; (8002ca8 <HAL_DMA2D_MspDeInit+0x30>)
 8002c90:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002c94:	6313      	str	r3, [r2, #48]	; 0x30

    /* DMA2D interrupt DeInit */
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 8002c96:	205a      	movs	r0, #90	; 0x5a
 8002c98:	f002 f866 	bl	8004d68 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }

}
 8002c9c:	bf00      	nop
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	4002b000 	.word	0x4002b000
 8002ca8:	40023800 	.word	0x40023800

08002cac <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b08e      	sub	sp, #56	; 0x38
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cb8:	2200      	movs	r2, #0
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	605a      	str	r2, [r3, #4]
 8002cbe:	609a      	str	r2, [r3, #8]
 8002cc0:	60da      	str	r2, [r3, #12]
 8002cc2:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a55      	ldr	r2, [pc, #340]	; (8002e20 <HAL_LTDC_MspInit+0x174>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	f040 80a3 	bne.w	8002e16 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002cd0:	4b54      	ldr	r3, [pc, #336]	; (8002e24 <HAL_LTDC_MspInit+0x178>)
 8002cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd4:	4a53      	ldr	r2, [pc, #332]	; (8002e24 <HAL_LTDC_MspInit+0x178>)
 8002cd6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002cda:	6453      	str	r3, [r2, #68]	; 0x44
 8002cdc:	4b51      	ldr	r3, [pc, #324]	; (8002e24 <HAL_LTDC_MspInit+0x178>)
 8002cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ce4:	623b      	str	r3, [r7, #32]
 8002ce6:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ce8:	4b4e      	ldr	r3, [pc, #312]	; (8002e24 <HAL_LTDC_MspInit+0x178>)
 8002cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cec:	4a4d      	ldr	r2, [pc, #308]	; (8002e24 <HAL_LTDC_MspInit+0x178>)
 8002cee:	f043 0310 	orr.w	r3, r3, #16
 8002cf2:	6313      	str	r3, [r2, #48]	; 0x30
 8002cf4:	4b4b      	ldr	r3, [pc, #300]	; (8002e24 <HAL_LTDC_MspInit+0x178>)
 8002cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf8:	f003 0310 	and.w	r3, r3, #16
 8002cfc:	61fb      	str	r3, [r7, #28]
 8002cfe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002d00:	4b48      	ldr	r3, [pc, #288]	; (8002e24 <HAL_LTDC_MspInit+0x178>)
 8002d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d04:	4a47      	ldr	r2, [pc, #284]	; (8002e24 <HAL_LTDC_MspInit+0x178>)
 8002d06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d0a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d0c:	4b45      	ldr	r3, [pc, #276]	; (8002e24 <HAL_LTDC_MspInit+0x178>)
 8002d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d14:	61bb      	str	r3, [r7, #24]
 8002d16:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002d18:	4b42      	ldr	r3, [pc, #264]	; (8002e24 <HAL_LTDC_MspInit+0x178>)
 8002d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1c:	4a41      	ldr	r2, [pc, #260]	; (8002e24 <HAL_LTDC_MspInit+0x178>)
 8002d1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d22:	6313      	str	r3, [r2, #48]	; 0x30
 8002d24:	4b3f      	ldr	r3, [pc, #252]	; (8002e24 <HAL_LTDC_MspInit+0x178>)
 8002d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d2c:	617b      	str	r3, [r7, #20]
 8002d2e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d30:	4b3c      	ldr	r3, [pc, #240]	; (8002e24 <HAL_LTDC_MspInit+0x178>)
 8002d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d34:	4a3b      	ldr	r2, [pc, #236]	; (8002e24 <HAL_LTDC_MspInit+0x178>)
 8002d36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d3a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d3c:	4b39      	ldr	r3, [pc, #228]	; (8002e24 <HAL_LTDC_MspInit+0x178>)
 8002d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d44:	613b      	str	r3, [r7, #16]
 8002d46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002d48:	4b36      	ldr	r3, [pc, #216]	; (8002e24 <HAL_LTDC_MspInit+0x178>)
 8002d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4c:	4a35      	ldr	r2, [pc, #212]	; (8002e24 <HAL_LTDC_MspInit+0x178>)
 8002d4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d52:	6313      	str	r3, [r2, #48]	; 0x30
 8002d54:	4b33      	ldr	r3, [pc, #204]	; (8002e24 <HAL_LTDC_MspInit+0x178>)
 8002d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d5c:	60fb      	str	r3, [r7, #12]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002d60:	2310      	movs	r3, #16
 8002d62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d64:	2302      	movs	r3, #2
 8002d66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002d70:	230e      	movs	r3, #14
 8002d72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002d74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d78:	4619      	mov	r1, r3
 8002d7a:	482b      	ldr	r0, [pc, #172]	; (8002e28 <HAL_LTDC_MspInit+0x17c>)
 8002d7c:	f002 fdf8 	bl	8005970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8002d80:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002d84:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d86:	2302      	movs	r3, #2
 8002d88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002d92:	230e      	movs	r3, #14
 8002d94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002d96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	4823      	ldr	r0, [pc, #140]	; (8002e2c <HAL_LTDC_MspInit+0x180>)
 8002d9e:	f002 fde7 	bl	8005970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8002da2:	23f7      	movs	r3, #247	; 0xf7
 8002da4:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da6:	2302      	movs	r3, #2
 8002da8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002daa:	2300      	movs	r3, #0
 8002dac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dae:	2300      	movs	r3, #0
 8002db0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002db2:	230e      	movs	r3, #14
 8002db4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002db6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dba:	4619      	mov	r1, r3
 8002dbc:	481c      	ldr	r0, [pc, #112]	; (8002e30 <HAL_LTDC_MspInit+0x184>)
 8002dbe:	f002 fdd7 	bl	8005970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002dc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc8:	2302      	movs	r3, #2
 8002dca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002dd4:	2309      	movs	r3, #9
 8002dd6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002dd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4815      	ldr	r0, [pc, #84]	; (8002e34 <HAL_LTDC_MspInit+0x188>)
 8002de0:	f002 fdc6 	bl	8005970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002de4:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002de8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dea:	2302      	movs	r3, #2
 8002dec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dee:	2300      	movs	r3, #0
 8002df0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df2:	2300      	movs	r3, #0
 8002df4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002df6:	230e      	movs	r3, #14
 8002df8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002dfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dfe:	4619      	mov	r1, r3
 8002e00:	480d      	ldr	r0, [pc, #52]	; (8002e38 <HAL_LTDC_MspInit+0x18c>)
 8002e02:	f002 fdb5 	bl	8005970 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002e06:	2200      	movs	r2, #0
 8002e08:	2105      	movs	r1, #5
 8002e0a:	2058      	movs	r0, #88	; 0x58
 8002e0c:	f001 ff82 	bl	8004d14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002e10:	2058      	movs	r0, #88	; 0x58
 8002e12:	f001 ff9b 	bl	8004d4c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002e16:	bf00      	nop
 8002e18:	3738      	adds	r7, #56	; 0x38
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	40016800 	.word	0x40016800
 8002e24:	40023800 	.word	0x40023800
 8002e28:	40021000 	.word	0x40021000
 8002e2c:	40022400 	.word	0x40022400
 8002e30:	40022800 	.word	0x40022800
 8002e34:	40021800 	.word	0x40021800
 8002e38:	40022000 	.word	0x40022000

08002e3c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b08c      	sub	sp, #48	; 0x30
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e44:	f107 031c 	add.w	r3, r7, #28
 8002e48:	2200      	movs	r2, #0
 8002e4a:	601a      	str	r2, [r3, #0]
 8002e4c:	605a      	str	r2, [r3, #4]
 8002e4e:	609a      	str	r2, [r3, #8]
 8002e50:	60da      	str	r2, [r3, #12]
 8002e52:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a3b      	ldr	r2, [pc, #236]	; (8002f48 <HAL_QSPI_MspInit+0x10c>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d170      	bne.n	8002f40 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002e5e:	4b3b      	ldr	r3, [pc, #236]	; (8002f4c <HAL_QSPI_MspInit+0x110>)
 8002e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e62:	4a3a      	ldr	r2, [pc, #232]	; (8002f4c <HAL_QSPI_MspInit+0x110>)
 8002e64:	f043 0302 	orr.w	r3, r3, #2
 8002e68:	6393      	str	r3, [r2, #56]	; 0x38
 8002e6a:	4b38      	ldr	r3, [pc, #224]	; (8002f4c <HAL_QSPI_MspInit+0x110>)
 8002e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	61bb      	str	r3, [r7, #24]
 8002e74:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e76:	4b35      	ldr	r3, [pc, #212]	; (8002f4c <HAL_QSPI_MspInit+0x110>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	4a34      	ldr	r2, [pc, #208]	; (8002f4c <HAL_QSPI_MspInit+0x110>)
 8002e7c:	f043 0310 	orr.w	r3, r3, #16
 8002e80:	6313      	str	r3, [r2, #48]	; 0x30
 8002e82:	4b32      	ldr	r3, [pc, #200]	; (8002f4c <HAL_QSPI_MspInit+0x110>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e86:	f003 0310 	and.w	r3, r3, #16
 8002e8a:	617b      	str	r3, [r7, #20]
 8002e8c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e8e:	4b2f      	ldr	r3, [pc, #188]	; (8002f4c <HAL_QSPI_MspInit+0x110>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e92:	4a2e      	ldr	r2, [pc, #184]	; (8002f4c <HAL_QSPI_MspInit+0x110>)
 8002e94:	f043 0302 	orr.w	r3, r3, #2
 8002e98:	6313      	str	r3, [r2, #48]	; 0x30
 8002e9a:	4b2c      	ldr	r3, [pc, #176]	; (8002f4c <HAL_QSPI_MspInit+0x110>)
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	613b      	str	r3, [r7, #16]
 8002ea4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ea6:	4b29      	ldr	r3, [pc, #164]	; (8002f4c <HAL_QSPI_MspInit+0x110>)
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eaa:	4a28      	ldr	r2, [pc, #160]	; (8002f4c <HAL_QSPI_MspInit+0x110>)
 8002eac:	f043 0308 	orr.w	r3, r3, #8
 8002eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002eb2:	4b26      	ldr	r3, [pc, #152]	; (8002f4c <HAL_QSPI_MspInit+0x110>)
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb6:	f003 0308 	and.w	r3, r3, #8
 8002eba:	60fb      	str	r3, [r7, #12]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002ebe:	2304      	movs	r3, #4
 8002ec0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002ece:	2309      	movs	r3, #9
 8002ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002ed2:	f107 031c 	add.w	r3, r7, #28
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	481d      	ldr	r0, [pc, #116]	; (8002f50 <HAL_QSPI_MspInit+0x114>)
 8002eda:	f002 fd49 	bl	8005970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002ede:	2340      	movs	r3, #64	; 0x40
 8002ee0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eea:	2303      	movs	r3, #3
 8002eec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002eee:	230a      	movs	r3, #10
 8002ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002ef2:	f107 031c 	add.w	r3, r7, #28
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	4816      	ldr	r0, [pc, #88]	; (8002f54 <HAL_QSPI_MspInit+0x118>)
 8002efa:	f002 fd39 	bl	8005970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002efe:	2304      	movs	r3, #4
 8002f00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f02:	2302      	movs	r3, #2
 8002f04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f06:	2300      	movs	r3, #0
 8002f08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002f0e:	2309      	movs	r3, #9
 8002f10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f12:	f107 031c 	add.w	r3, r7, #28
 8002f16:	4619      	mov	r1, r3
 8002f18:	480e      	ldr	r0, [pc, #56]	; (8002f54 <HAL_QSPI_MspInit+0x118>)
 8002f1a:	f002 fd29 	bl	8005970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002f1e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002f22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f24:	2302      	movs	r3, #2
 8002f26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002f30:	2309      	movs	r3, #9
 8002f32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f34:	f107 031c 	add.w	r3, r7, #28
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4807      	ldr	r0, [pc, #28]	; (8002f58 <HAL_QSPI_MspInit+0x11c>)
 8002f3c:	f002 fd18 	bl	8005970 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002f40:	bf00      	nop
 8002f42:	3730      	adds	r7, #48	; 0x30
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	a0001000 	.word	0xa0001000
 8002f4c:	40023800 	.word	0x40023800
 8002f50:	40021000 	.word	0x40021000
 8002f54:	40020400 	.word	0x40020400
 8002f58:	40020c00 	.word	0x40020c00

08002f5c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a07      	ldr	r2, [pc, #28]	; (8002f88 <HAL_RTC_MspInit+0x2c>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d105      	bne.n	8002f7a <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002f6e:	4b07      	ldr	r3, [pc, #28]	; (8002f8c <HAL_RTC_MspInit+0x30>)
 8002f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f72:	4a06      	ldr	r2, [pc, #24]	; (8002f8c <HAL_RTC_MspInit+0x30>)
 8002f74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f78:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002f7a:	bf00      	nop
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	40002800 	.word	0x40002800
 8002f8c:	40023800 	.word	0x40023800

08002f90 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b08a      	sub	sp, #40	; 0x28
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f98:	f107 0314 	add.w	r3, r7, #20
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	605a      	str	r2, [r3, #4]
 8002fa2:	609a      	str	r2, [r3, #8]
 8002fa4:	60da      	str	r2, [r3, #12]
 8002fa6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a25      	ldr	r2, [pc, #148]	; (8003044 <HAL_SD_MspInit+0xb4>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d144      	bne.n	800303c <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002fb2:	4b25      	ldr	r3, [pc, #148]	; (8003048 <HAL_SD_MspInit+0xb8>)
 8002fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb6:	4a24      	ldr	r2, [pc, #144]	; (8003048 <HAL_SD_MspInit+0xb8>)
 8002fb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002fbc:	6453      	str	r3, [r2, #68]	; 0x44
 8002fbe:	4b22      	ldr	r3, [pc, #136]	; (8003048 <HAL_SD_MspInit+0xb8>)
 8002fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fc6:	613b      	str	r3, [r7, #16]
 8002fc8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fca:	4b1f      	ldr	r3, [pc, #124]	; (8003048 <HAL_SD_MspInit+0xb8>)
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fce:	4a1e      	ldr	r2, [pc, #120]	; (8003048 <HAL_SD_MspInit+0xb8>)
 8002fd0:	f043 0304 	orr.w	r3, r3, #4
 8002fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fd6:	4b1c      	ldr	r3, [pc, #112]	; (8003048 <HAL_SD_MspInit+0xb8>)
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fda:	f003 0304 	and.w	r3, r3, #4
 8002fde:	60fb      	str	r3, [r7, #12]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fe2:	4b19      	ldr	r3, [pc, #100]	; (8003048 <HAL_SD_MspInit+0xb8>)
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe6:	4a18      	ldr	r2, [pc, #96]	; (8003048 <HAL_SD_MspInit+0xb8>)
 8002fe8:	f043 0308 	orr.w	r3, r3, #8
 8002fec:	6313      	str	r3, [r2, #48]	; 0x30
 8002fee:	4b16      	ldr	r3, [pc, #88]	; (8003048 <HAL_SD_MspInit+0xb8>)
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff2:	f003 0308 	and.w	r3, r3, #8
 8002ff6:	60bb      	str	r3, [r7, #8]
 8002ff8:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 8002ffa:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002ffe:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003000:	2302      	movs	r3, #2
 8003002:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003004:	2300      	movs	r3, #0
 8003006:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003008:	2303      	movs	r3, #3
 800300a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800300c:	230c      	movs	r3, #12
 800300e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003010:	f107 0314 	add.w	r3, r7, #20
 8003014:	4619      	mov	r1, r3
 8003016:	480d      	ldr	r0, [pc, #52]	; (800304c <HAL_SD_MspInit+0xbc>)
 8003018:	f002 fcaa 	bl	8005970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 800301c:	2304      	movs	r3, #4
 800301e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003020:	2302      	movs	r3, #2
 8003022:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003024:	2300      	movs	r3, #0
 8003026:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003028:	2303      	movs	r3, #3
 800302a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800302c:	230c      	movs	r3, #12
 800302e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8003030:	f107 0314 	add.w	r3, r7, #20
 8003034:	4619      	mov	r1, r3
 8003036:	4806      	ldr	r0, [pc, #24]	; (8003050 <HAL_SD_MspInit+0xc0>)
 8003038:	f002 fc9a 	bl	8005970 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800303c:	bf00      	nop
 800303e:	3728      	adds	r7, #40	; 0x28
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	40012c00 	.word	0x40012c00
 8003048:	40023800 	.word	0x40023800
 800304c:	40020800 	.word	0x40020800
 8003050:	40020c00 	.word	0x40020c00

08003054 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b08a      	sub	sp, #40	; 0x28
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800305c:	f107 0314 	add.w	r3, r7, #20
 8003060:	2200      	movs	r2, #0
 8003062:	601a      	str	r2, [r3, #0]
 8003064:	605a      	str	r2, [r3, #4]
 8003066:	609a      	str	r2, [r3, #8]
 8003068:	60da      	str	r2, [r3, #12]
 800306a:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8003074:	d127      	bne.n	80030c6 <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8003076:	4b16      	ldr	r3, [pc, #88]	; (80030d0 <HAL_SPDIFRX_MspInit+0x7c>)
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	4a15      	ldr	r2, [pc, #84]	; (80030d0 <HAL_SPDIFRX_MspInit+0x7c>)
 800307c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003080:	6413      	str	r3, [r2, #64]	; 0x40
 8003082:	4b13      	ldr	r3, [pc, #76]	; (80030d0 <HAL_SPDIFRX_MspInit+0x7c>)
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800308a:	613b      	str	r3, [r7, #16]
 800308c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800308e:	4b10      	ldr	r3, [pc, #64]	; (80030d0 <HAL_SPDIFRX_MspInit+0x7c>)
 8003090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003092:	4a0f      	ldr	r2, [pc, #60]	; (80030d0 <HAL_SPDIFRX_MspInit+0x7c>)
 8003094:	f043 0308 	orr.w	r3, r3, #8
 8003098:	6313      	str	r3, [r2, #48]	; 0x30
 800309a:	4b0d      	ldr	r3, [pc, #52]	; (80030d0 <HAL_SPDIFRX_MspInit+0x7c>)
 800309c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309e:	f003 0308 	and.w	r3, r3, #8
 80030a2:	60fb      	str	r3, [r7, #12]
 80030a4:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration    
    PD7     ------> SPDIFRX_IN0 
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80030a6:	2380      	movs	r3, #128	; 0x80
 80030a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030aa:	2302      	movs	r3, #2
 80030ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ae:	2300      	movs	r3, #0
 80030b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b2:	2300      	movs	r3, #0
 80030b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80030b6:	2308      	movs	r3, #8
 80030b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80030ba:	f107 0314 	add.w	r3, r7, #20
 80030be:	4619      	mov	r1, r3
 80030c0:	4804      	ldr	r0, [pc, #16]	; (80030d4 <HAL_SPDIFRX_MspInit+0x80>)
 80030c2:	f002 fc55 	bl	8005970 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 80030c6:	bf00      	nop
 80030c8:	3728      	adds	r7, #40	; 0x28
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	40023800 	.word	0x40023800
 80030d4:	40020c00 	.word	0x40020c00

080030d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b08a      	sub	sp, #40	; 0x28
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030e0:	f107 0314 	add.w	r3, r7, #20
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]
 80030e8:	605a      	str	r2, [r3, #4]
 80030ea:	609a      	str	r2, [r3, #8]
 80030ec:	60da      	str	r2, [r3, #12]
 80030ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a25      	ldr	r2, [pc, #148]	; (800318c <HAL_SPI_MspInit+0xb4>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d144      	bne.n	8003184 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80030fa:	4b25      	ldr	r3, [pc, #148]	; (8003190 <HAL_SPI_MspInit+0xb8>)
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	4a24      	ldr	r2, [pc, #144]	; (8003190 <HAL_SPI_MspInit+0xb8>)
 8003100:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003104:	6413      	str	r3, [r2, #64]	; 0x40
 8003106:	4b22      	ldr	r3, [pc, #136]	; (8003190 <HAL_SPI_MspInit+0xb8>)
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800310e:	613b      	str	r3, [r7, #16]
 8003110:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003112:	4b1f      	ldr	r3, [pc, #124]	; (8003190 <HAL_SPI_MspInit+0xb8>)
 8003114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003116:	4a1e      	ldr	r2, [pc, #120]	; (8003190 <HAL_SPI_MspInit+0xb8>)
 8003118:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800311c:	6313      	str	r3, [r2, #48]	; 0x30
 800311e:	4b1c      	ldr	r3, [pc, #112]	; (8003190 <HAL_SPI_MspInit+0xb8>)
 8003120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003126:	60fb      	str	r3, [r7, #12]
 8003128:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800312a:	4b19      	ldr	r3, [pc, #100]	; (8003190 <HAL_SPI_MspInit+0xb8>)
 800312c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312e:	4a18      	ldr	r2, [pc, #96]	; (8003190 <HAL_SPI_MspInit+0xb8>)
 8003130:	f043 0302 	orr.w	r3, r3, #2
 8003134:	6313      	str	r3, [r2, #48]	; 0x30
 8003136:	4b16      	ldr	r3, [pc, #88]	; (8003190 <HAL_SPI_MspInit+0xb8>)
 8003138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	60bb      	str	r3, [r7, #8]
 8003140:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8003142:	2302      	movs	r3, #2
 8003144:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003146:	2302      	movs	r3, #2
 8003148:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314a:	2300      	movs	r3, #0
 800314c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800314e:	2300      	movs	r3, #0
 8003150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003152:	2305      	movs	r3, #5
 8003154:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8003156:	f107 0314 	add.w	r3, r7, #20
 800315a:	4619      	mov	r1, r3
 800315c:	480d      	ldr	r0, [pc, #52]	; (8003194 <HAL_SPI_MspInit+0xbc>)
 800315e:	f002 fc07 	bl	8005970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8003162:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003166:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003168:	2302      	movs	r3, #2
 800316a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800316c:	2300      	movs	r3, #0
 800316e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003170:	2300      	movs	r3, #0
 8003172:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003174:	2305      	movs	r3, #5
 8003176:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003178:	f107 0314 	add.w	r3, r7, #20
 800317c:	4619      	mov	r1, r3
 800317e:	4806      	ldr	r0, [pc, #24]	; (8003198 <HAL_SPI_MspInit+0xc0>)
 8003180:	f002 fbf6 	bl	8005970 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003184:	bf00      	nop
 8003186:	3728      	adds	r7, #40	; 0x28
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	40003800 	.word	0x40003800
 8003190:	40023800 	.word	0x40023800
 8003194:	40022000 	.word	0x40022000
 8003198:	40020400 	.word	0x40020400

0800319c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800319c:	b480      	push	{r7}
 800319e:	b089      	sub	sp, #36	; 0x24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a2e      	ldr	r2, [pc, #184]	; (8003264 <HAL_TIM_Base_MspInit+0xc8>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d10c      	bne.n	80031c8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80031ae:	4b2e      	ldr	r3, [pc, #184]	; (8003268 <HAL_TIM_Base_MspInit+0xcc>)
 80031b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b2:	4a2d      	ldr	r2, [pc, #180]	; (8003268 <HAL_TIM_Base_MspInit+0xcc>)
 80031b4:	f043 0301 	orr.w	r3, r3, #1
 80031b8:	6453      	str	r3, [r2, #68]	; 0x44
 80031ba:	4b2b      	ldr	r3, [pc, #172]	; (8003268 <HAL_TIM_Base_MspInit+0xcc>)
 80031bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	61fb      	str	r3, [r7, #28]
 80031c4:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80031c6:	e046      	b.n	8003256 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031d0:	d10c      	bne.n	80031ec <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80031d2:	4b25      	ldr	r3, [pc, #148]	; (8003268 <HAL_TIM_Base_MspInit+0xcc>)
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	4a24      	ldr	r2, [pc, #144]	; (8003268 <HAL_TIM_Base_MspInit+0xcc>)
 80031d8:	f043 0301 	orr.w	r3, r3, #1
 80031dc:	6413      	str	r3, [r2, #64]	; 0x40
 80031de:	4b22      	ldr	r3, [pc, #136]	; (8003268 <HAL_TIM_Base_MspInit+0xcc>)
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	61bb      	str	r3, [r7, #24]
 80031e8:	69bb      	ldr	r3, [r7, #24]
}
 80031ea:	e034      	b.n	8003256 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a1e      	ldr	r2, [pc, #120]	; (800326c <HAL_TIM_Base_MspInit+0xd0>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d10c      	bne.n	8003210 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80031f6:	4b1c      	ldr	r3, [pc, #112]	; (8003268 <HAL_TIM_Base_MspInit+0xcc>)
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	4a1b      	ldr	r2, [pc, #108]	; (8003268 <HAL_TIM_Base_MspInit+0xcc>)
 80031fc:	f043 0302 	orr.w	r3, r3, #2
 8003200:	6413      	str	r3, [r2, #64]	; 0x40
 8003202:	4b19      	ldr	r3, [pc, #100]	; (8003268 <HAL_TIM_Base_MspInit+0xcc>)
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	617b      	str	r3, [r7, #20]
 800320c:	697b      	ldr	r3, [r7, #20]
}
 800320e:	e022      	b.n	8003256 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a16      	ldr	r2, [pc, #88]	; (8003270 <HAL_TIM_Base_MspInit+0xd4>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d10c      	bne.n	8003234 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800321a:	4b13      	ldr	r3, [pc, #76]	; (8003268 <HAL_TIM_Base_MspInit+0xcc>)
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	4a12      	ldr	r2, [pc, #72]	; (8003268 <HAL_TIM_Base_MspInit+0xcc>)
 8003220:	f043 0308 	orr.w	r3, r3, #8
 8003224:	6413      	str	r3, [r2, #64]	; 0x40
 8003226:	4b10      	ldr	r3, [pc, #64]	; (8003268 <HAL_TIM_Base_MspInit+0xcc>)
 8003228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322a:	f003 0308 	and.w	r3, r3, #8
 800322e:	613b      	str	r3, [r7, #16]
 8003230:	693b      	ldr	r3, [r7, #16]
}
 8003232:	e010      	b.n	8003256 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a0e      	ldr	r2, [pc, #56]	; (8003274 <HAL_TIM_Base_MspInit+0xd8>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d10b      	bne.n	8003256 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800323e:	4b0a      	ldr	r3, [pc, #40]	; (8003268 <HAL_TIM_Base_MspInit+0xcc>)
 8003240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003242:	4a09      	ldr	r2, [pc, #36]	; (8003268 <HAL_TIM_Base_MspInit+0xcc>)
 8003244:	f043 0302 	orr.w	r3, r3, #2
 8003248:	6453      	str	r3, [r2, #68]	; 0x44
 800324a:	4b07      	ldr	r3, [pc, #28]	; (8003268 <HAL_TIM_Base_MspInit+0xcc>)
 800324c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	60fb      	str	r3, [r7, #12]
 8003254:	68fb      	ldr	r3, [r7, #12]
}
 8003256:	bf00      	nop
 8003258:	3724      	adds	r7, #36	; 0x24
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	40010000 	.word	0x40010000
 8003268:	40023800 	.word	0x40023800
 800326c:	40000400 	.word	0x40000400
 8003270:	40000c00 	.word	0x40000c00
 8003274:	40010400 	.word	0x40010400

08003278 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003278:	b480      	push	{r7}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a0a      	ldr	r2, [pc, #40]	; (80032b0 <HAL_TIM_PWM_MspInit+0x38>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d10b      	bne.n	80032a2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800328a:	4b0a      	ldr	r3, [pc, #40]	; (80032b4 <HAL_TIM_PWM_MspInit+0x3c>)
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	4a09      	ldr	r2, [pc, #36]	; (80032b4 <HAL_TIM_PWM_MspInit+0x3c>)
 8003290:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003294:	6413      	str	r3, [r2, #64]	; 0x40
 8003296:	4b07      	ldr	r3, [pc, #28]	; (80032b4 <HAL_TIM_PWM_MspInit+0x3c>)
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800329e:	60fb      	str	r3, [r7, #12]
 80032a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80032a2:	bf00      	nop
 80032a4:	3714      	adds	r7, #20
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	40001800 	.word	0x40001800
 80032b4:	40023800 	.word	0x40023800

080032b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b08c      	sub	sp, #48	; 0x30
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c0:	f107 031c 	add.w	r3, r7, #28
 80032c4:	2200      	movs	r2, #0
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	605a      	str	r2, [r3, #4]
 80032ca:	609a      	str	r2, [r3, #8]
 80032cc:	60da      	str	r2, [r3, #12]
 80032ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a56      	ldr	r2, [pc, #344]	; (8003430 <HAL_TIM_MspPostInit+0x178>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d11d      	bne.n	8003316 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032da:	4b56      	ldr	r3, [pc, #344]	; (8003434 <HAL_TIM_MspPostInit+0x17c>)
 80032dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032de:	4a55      	ldr	r2, [pc, #340]	; (8003434 <HAL_TIM_MspPostInit+0x17c>)
 80032e0:	f043 0301 	orr.w	r3, r3, #1
 80032e4:	6313      	str	r3, [r2, #48]	; 0x30
 80032e6:	4b53      	ldr	r3, [pc, #332]	; (8003434 <HAL_TIM_MspPostInit+0x17c>)
 80032e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	61bb      	str	r3, [r7, #24]
 80032f0:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80032f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f8:	2302      	movs	r3, #2
 80032fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032fc:	2300      	movs	r3, #0
 80032fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003300:	2300      	movs	r3, #0
 8003302:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003304:	2301      	movs	r3, #1
 8003306:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8003308:	f107 031c 	add.w	r3, r7, #28
 800330c:	4619      	mov	r1, r3
 800330e:	484a      	ldr	r0, [pc, #296]	; (8003438 <HAL_TIM_MspPostInit+0x180>)
 8003310:	f002 fb2e 	bl	8005970 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8003314:	e087      	b.n	8003426 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800331e:	d11d      	bne.n	800335c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003320:	4b44      	ldr	r3, [pc, #272]	; (8003434 <HAL_TIM_MspPostInit+0x17c>)
 8003322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003324:	4a43      	ldr	r2, [pc, #268]	; (8003434 <HAL_TIM_MspPostInit+0x17c>)
 8003326:	f043 0301 	orr.w	r3, r3, #1
 800332a:	6313      	str	r3, [r2, #48]	; 0x30
 800332c:	4b41      	ldr	r3, [pc, #260]	; (8003434 <HAL_TIM_MspPostInit+0x17c>)
 800332e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003330:	f003 0301 	and.w	r3, r3, #1
 8003334:	617b      	str	r3, [r7, #20]
 8003336:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8003338:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800333c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800333e:	2302      	movs	r3, #2
 8003340:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003342:	2300      	movs	r3, #0
 8003344:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003346:	2300      	movs	r3, #0
 8003348:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800334a:	2301      	movs	r3, #1
 800334c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800334e:	f107 031c 	add.w	r3, r7, #28
 8003352:	4619      	mov	r1, r3
 8003354:	4838      	ldr	r0, [pc, #224]	; (8003438 <HAL_TIM_MspPostInit+0x180>)
 8003356:	f002 fb0b 	bl	8005970 <HAL_GPIO_Init>
}
 800335a:	e064      	b.n	8003426 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a36      	ldr	r2, [pc, #216]	; (800343c <HAL_TIM_MspPostInit+0x184>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d11c      	bne.n	80033a0 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003366:	4b33      	ldr	r3, [pc, #204]	; (8003434 <HAL_TIM_MspPostInit+0x17c>)
 8003368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336a:	4a32      	ldr	r2, [pc, #200]	; (8003434 <HAL_TIM_MspPostInit+0x17c>)
 800336c:	f043 0302 	orr.w	r3, r3, #2
 8003370:	6313      	str	r3, [r2, #48]	; 0x30
 8003372:	4b30      	ldr	r3, [pc, #192]	; (8003434 <HAL_TIM_MspPostInit+0x17c>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	613b      	str	r3, [r7, #16]
 800337c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800337e:	2310      	movs	r3, #16
 8003380:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003382:	2302      	movs	r3, #2
 8003384:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003386:	2300      	movs	r3, #0
 8003388:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800338a:	2300      	movs	r3, #0
 800338c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800338e:	2302      	movs	r3, #2
 8003390:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8003392:	f107 031c 	add.w	r3, r7, #28
 8003396:	4619      	mov	r1, r3
 8003398:	4829      	ldr	r0, [pc, #164]	; (8003440 <HAL_TIM_MspPostInit+0x188>)
 800339a:	f002 fae9 	bl	8005970 <HAL_GPIO_Init>
}
 800339e:	e042      	b.n	8003426 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a27      	ldr	r2, [pc, #156]	; (8003444 <HAL_TIM_MspPostInit+0x18c>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d11c      	bne.n	80033e4 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80033aa:	4b22      	ldr	r3, [pc, #136]	; (8003434 <HAL_TIM_MspPostInit+0x17c>)
 80033ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ae:	4a21      	ldr	r2, [pc, #132]	; (8003434 <HAL_TIM_MspPostInit+0x17c>)
 80033b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033b4:	6313      	str	r3, [r2, #48]	; 0x30
 80033b6:	4b1f      	ldr	r3, [pc, #124]	; (8003434 <HAL_TIM_MspPostInit+0x17c>)
 80033b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033be:	60fb      	str	r3, [r7, #12]
 80033c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80033c2:	2301      	movs	r3, #1
 80033c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c6:	2302      	movs	r3, #2
 80033c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ca:	2300      	movs	r3, #0
 80033cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ce:	2300      	movs	r3, #0
 80033d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80033d2:	2302      	movs	r3, #2
 80033d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80033d6:	f107 031c 	add.w	r3, r7, #28
 80033da:	4619      	mov	r1, r3
 80033dc:	481a      	ldr	r0, [pc, #104]	; (8003448 <HAL_TIM_MspPostInit+0x190>)
 80033de:	f002 fac7 	bl	8005970 <HAL_GPIO_Init>
}
 80033e2:	e020      	b.n	8003426 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a18      	ldr	r2, [pc, #96]	; (800344c <HAL_TIM_MspPostInit+0x194>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d11b      	bne.n	8003426 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80033ee:	4b11      	ldr	r3, [pc, #68]	; (8003434 <HAL_TIM_MspPostInit+0x17c>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	4a10      	ldr	r2, [pc, #64]	; (8003434 <HAL_TIM_MspPostInit+0x17c>)
 80033f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033f8:	6313      	str	r3, [r2, #48]	; 0x30
 80033fa:	4b0e      	ldr	r3, [pc, #56]	; (8003434 <HAL_TIM_MspPostInit+0x17c>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003402:	60bb      	str	r3, [r7, #8]
 8003404:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8003406:	2340      	movs	r3, #64	; 0x40
 8003408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800340a:	2302      	movs	r3, #2
 800340c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340e:	2300      	movs	r3, #0
 8003410:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003412:	2300      	movs	r3, #0
 8003414:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003416:	2309      	movs	r3, #9
 8003418:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800341a:	f107 031c 	add.w	r3, r7, #28
 800341e:	4619      	mov	r1, r3
 8003420:	480b      	ldr	r0, [pc, #44]	; (8003450 <HAL_TIM_MspPostInit+0x198>)
 8003422:	f002 faa5 	bl	8005970 <HAL_GPIO_Init>
}
 8003426:	bf00      	nop
 8003428:	3730      	adds	r7, #48	; 0x30
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	40010000 	.word	0x40010000
 8003434:	40023800 	.word	0x40023800
 8003438:	40020000 	.word	0x40020000
 800343c:	40000400 	.word	0x40000400
 8003440:	40020400 	.word	0x40020400
 8003444:	40000c00 	.word	0x40000c00
 8003448:	40022000 	.word	0x40022000
 800344c:	40001800 	.word	0x40001800
 8003450:	40021c00 	.word	0x40021c00

08003454 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b08c      	sub	sp, #48	; 0x30
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800345c:	f107 031c 	add.w	r3, r7, #28
 8003460:	2200      	movs	r2, #0
 8003462:	601a      	str	r2, [r3, #0]
 8003464:	605a      	str	r2, [r3, #4]
 8003466:	609a      	str	r2, [r3, #8]
 8003468:	60da      	str	r2, [r3, #12]
 800346a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a3c      	ldr	r2, [pc, #240]	; (8003564 <HAL_UART_MspInit+0x110>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d145      	bne.n	8003502 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003476:	4b3c      	ldr	r3, [pc, #240]	; (8003568 <HAL_UART_MspInit+0x114>)
 8003478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347a:	4a3b      	ldr	r2, [pc, #236]	; (8003568 <HAL_UART_MspInit+0x114>)
 800347c:	f043 0310 	orr.w	r3, r3, #16
 8003480:	6453      	str	r3, [r2, #68]	; 0x44
 8003482:	4b39      	ldr	r3, [pc, #228]	; (8003568 <HAL_UART_MspInit+0x114>)
 8003484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003486:	f003 0310 	and.w	r3, r3, #16
 800348a:	61bb      	str	r3, [r7, #24]
 800348c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800348e:	4b36      	ldr	r3, [pc, #216]	; (8003568 <HAL_UART_MspInit+0x114>)
 8003490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003492:	4a35      	ldr	r2, [pc, #212]	; (8003568 <HAL_UART_MspInit+0x114>)
 8003494:	f043 0302 	orr.w	r3, r3, #2
 8003498:	6313      	str	r3, [r2, #48]	; 0x30
 800349a:	4b33      	ldr	r3, [pc, #204]	; (8003568 <HAL_UART_MspInit+0x114>)
 800349c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	617b      	str	r3, [r7, #20]
 80034a4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034a6:	4b30      	ldr	r3, [pc, #192]	; (8003568 <HAL_UART_MspInit+0x114>)
 80034a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034aa:	4a2f      	ldr	r2, [pc, #188]	; (8003568 <HAL_UART_MspInit+0x114>)
 80034ac:	f043 0301 	orr.w	r3, r3, #1
 80034b0:	6313      	str	r3, [r2, #48]	; 0x30
 80034b2:	4b2d      	ldr	r3, [pc, #180]	; (8003568 <HAL_UART_MspInit+0x114>)
 80034b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	613b      	str	r3, [r7, #16]
 80034bc:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80034be:	2380      	movs	r3, #128	; 0x80
 80034c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c2:	2302      	movs	r3, #2
 80034c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c6:	2300      	movs	r3, #0
 80034c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ca:	2300      	movs	r3, #0
 80034cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80034ce:	2307      	movs	r3, #7
 80034d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80034d2:	f107 031c 	add.w	r3, r7, #28
 80034d6:	4619      	mov	r1, r3
 80034d8:	4824      	ldr	r0, [pc, #144]	; (800356c <HAL_UART_MspInit+0x118>)
 80034da:	f002 fa49 	bl	8005970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80034de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e4:	2302      	movs	r3, #2
 80034e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e8:	2300      	movs	r3, #0
 80034ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ec:	2300      	movs	r3, #0
 80034ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80034f0:	2307      	movs	r3, #7
 80034f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80034f4:	f107 031c 	add.w	r3, r7, #28
 80034f8:	4619      	mov	r1, r3
 80034fa:	481d      	ldr	r0, [pc, #116]	; (8003570 <HAL_UART_MspInit+0x11c>)
 80034fc:	f002 fa38 	bl	8005970 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003500:	e02c      	b.n	800355c <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a1b      	ldr	r2, [pc, #108]	; (8003574 <HAL_UART_MspInit+0x120>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d127      	bne.n	800355c <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 800350c:	4b16      	ldr	r3, [pc, #88]	; (8003568 <HAL_UART_MspInit+0x114>)
 800350e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003510:	4a15      	ldr	r2, [pc, #84]	; (8003568 <HAL_UART_MspInit+0x114>)
 8003512:	f043 0320 	orr.w	r3, r3, #32
 8003516:	6453      	str	r3, [r2, #68]	; 0x44
 8003518:	4b13      	ldr	r3, [pc, #76]	; (8003568 <HAL_UART_MspInit+0x114>)
 800351a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351c:	f003 0320 	and.w	r3, r3, #32
 8003520:	60fb      	str	r3, [r7, #12]
 8003522:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003524:	4b10      	ldr	r3, [pc, #64]	; (8003568 <HAL_UART_MspInit+0x114>)
 8003526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003528:	4a0f      	ldr	r2, [pc, #60]	; (8003568 <HAL_UART_MspInit+0x114>)
 800352a:	f043 0304 	orr.w	r3, r3, #4
 800352e:	6313      	str	r3, [r2, #48]	; 0x30
 8003530:	4b0d      	ldr	r3, [pc, #52]	; (8003568 <HAL_UART_MspInit+0x114>)
 8003532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003534:	f003 0304 	and.w	r3, r3, #4
 8003538:	60bb      	str	r3, [r7, #8]
 800353a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 800353c:	23c0      	movs	r3, #192	; 0xc0
 800353e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003540:	2302      	movs	r3, #2
 8003542:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003544:	2300      	movs	r3, #0
 8003546:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003548:	2303      	movs	r3, #3
 800354a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800354c:	2308      	movs	r3, #8
 800354e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003550:	f107 031c 	add.w	r3, r7, #28
 8003554:	4619      	mov	r1, r3
 8003556:	4808      	ldr	r0, [pc, #32]	; (8003578 <HAL_UART_MspInit+0x124>)
 8003558:	f002 fa0a 	bl	8005970 <HAL_GPIO_Init>
}
 800355c:	bf00      	nop
 800355e:	3730      	adds	r7, #48	; 0x30
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	40011000 	.word	0x40011000
 8003568:	40023800 	.word	0x40023800
 800356c:	40020400 	.word	0x40020400
 8003570:	40020000 	.word	0x40020000
 8003574:	40011400 	.word	0x40011400
 8003578:	40020800 	.word	0x40020800

0800357c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003582:	1d3b      	adds	r3, r7, #4
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]
 8003588:	605a      	str	r2, [r3, #4]
 800358a:	609a      	str	r2, [r3, #8]
 800358c:	60da      	str	r2, [r3, #12]
 800358e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003590:	4b3a      	ldr	r3, [pc, #232]	; (800367c <HAL_FMC_MspInit+0x100>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d16d      	bne.n	8003674 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8003598:	4b38      	ldr	r3, [pc, #224]	; (800367c <HAL_FMC_MspInit+0x100>)
 800359a:	2201      	movs	r2, #1
 800359c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800359e:	4b38      	ldr	r3, [pc, #224]	; (8003680 <HAL_FMC_MspInit+0x104>)
 80035a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a2:	4a37      	ldr	r2, [pc, #220]	; (8003680 <HAL_FMC_MspInit+0x104>)
 80035a4:	f043 0301 	orr.w	r3, r3, #1
 80035a8:	6393      	str	r3, [r2, #56]	; 0x38
 80035aa:	4b35      	ldr	r3, [pc, #212]	; (8003680 <HAL_FMC_MspInit+0x104>)
 80035ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	603b      	str	r3, [r7, #0]
 80035b4:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 80035b6:	f64f 7383 	movw	r3, #65411	; 0xff83
 80035ba:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035bc:	2302      	movs	r3, #2
 80035be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c0:	2300      	movs	r3, #0
 80035c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035c4:	2303      	movs	r3, #3
 80035c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80035c8:	230c      	movs	r3, #12
 80035ca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80035cc:	1d3b      	adds	r3, r7, #4
 80035ce:	4619      	mov	r1, r3
 80035d0:	482c      	ldr	r0, [pc, #176]	; (8003684 <HAL_FMC_MspInit+0x108>)
 80035d2:	f002 f9cd 	bl	8005970 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 80035d6:	f248 1333 	movw	r3, #33075	; 0x8133
 80035da:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035dc:	2302      	movs	r3, #2
 80035de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e0:	2300      	movs	r3, #0
 80035e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035e4:	2303      	movs	r3, #3
 80035e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80035e8:	230c      	movs	r3, #12
 80035ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80035ec:	1d3b      	adds	r3, r7, #4
 80035ee:	4619      	mov	r1, r3
 80035f0:	4825      	ldr	r0, [pc, #148]	; (8003688 <HAL_FMC_MspInit+0x10c>)
 80035f2:	f002 f9bd 	bl	8005970 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 80035f6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80035fa:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035fc:	2302      	movs	r3, #2
 80035fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003600:	2300      	movs	r3, #0
 8003602:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003604:	2303      	movs	r3, #3
 8003606:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003608:	230c      	movs	r3, #12
 800360a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800360c:	1d3b      	adds	r3, r7, #4
 800360e:	4619      	mov	r1, r3
 8003610:	481e      	ldr	r0, [pc, #120]	; (800368c <HAL_FMC_MspInit+0x110>)
 8003612:	f002 f9ad 	bl	8005970 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 8003616:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800361a:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800361c:	2302      	movs	r3, #2
 800361e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003620:	2300      	movs	r3, #0
 8003622:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003624:	2303      	movs	r3, #3
 8003626:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003628:	230c      	movs	r3, #12
 800362a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800362c:	1d3b      	adds	r3, r7, #4
 800362e:	4619      	mov	r1, r3
 8003630:	4817      	ldr	r0, [pc, #92]	; (8003690 <HAL_FMC_MspInit+0x114>)
 8003632:	f002 f99d 	bl	8005970 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8003636:	2328      	movs	r3, #40	; 0x28
 8003638:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800363a:	2302      	movs	r3, #2
 800363c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800363e:	2300      	movs	r3, #0
 8003640:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003642:	2303      	movs	r3, #3
 8003644:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003646:	230c      	movs	r3, #12
 8003648:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800364a:	1d3b      	adds	r3, r7, #4
 800364c:	4619      	mov	r1, r3
 800364e:	4811      	ldr	r0, [pc, #68]	; (8003694 <HAL_FMC_MspInit+0x118>)
 8003650:	f002 f98e 	bl	8005970 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8003654:	2308      	movs	r3, #8
 8003656:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003658:	2302      	movs	r3, #2
 800365a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800365c:	2300      	movs	r3, #0
 800365e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003660:	2303      	movs	r3, #3
 8003662:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003664:	230c      	movs	r3, #12
 8003666:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8003668:	1d3b      	adds	r3, r7, #4
 800366a:	4619      	mov	r1, r3
 800366c:	480a      	ldr	r0, [pc, #40]	; (8003698 <HAL_FMC_MspInit+0x11c>)
 800366e:	f002 f97f 	bl	8005970 <HAL_GPIO_Init>
 8003672:	e000      	b.n	8003676 <HAL_FMC_MspInit+0xfa>
    return;
 8003674:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8003676:	3718      	adds	r7, #24
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	200003a4 	.word	0x200003a4
 8003680:	40023800 	.word	0x40023800
 8003684:	40021000 	.word	0x40021000
 8003688:	40021800 	.word	0x40021800
 800368c:	40020c00 	.word	0x40020c00
 8003690:	40021400 	.word	0x40021400
 8003694:	40021c00 	.word	0x40021c00
 8003698:	40020800 	.word	0x40020800

0800369c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80036a4:	f7ff ff6a 	bl	800357c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80036a8:	bf00      	nop
 80036aa:	3708      	adds	r7, #8
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b08a      	sub	sp, #40	; 0x28
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a2b      	ldr	r2, [pc, #172]	; (800376c <HAL_SAI_MspInit+0xbc>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d124      	bne.n	800370c <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80036c2:	4b2b      	ldr	r3, [pc, #172]	; (8003770 <HAL_SAI_MspInit+0xc0>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10b      	bne.n	80036e2 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80036ca:	4b2a      	ldr	r3, [pc, #168]	; (8003774 <HAL_SAI_MspInit+0xc4>)
 80036cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ce:	4a29      	ldr	r2, [pc, #164]	; (8003774 <HAL_SAI_MspInit+0xc4>)
 80036d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80036d4:	6453      	str	r3, [r2, #68]	; 0x44
 80036d6:	4b27      	ldr	r3, [pc, #156]	; (8003774 <HAL_SAI_MspInit+0xc4>)
 80036d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036de:	613b      	str	r3, [r7, #16]
 80036e0:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 80036e2:	4b23      	ldr	r3, [pc, #140]	; (8003770 <HAL_SAI_MspInit+0xc0>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	3301      	adds	r3, #1
 80036e8:	4a21      	ldr	r2, [pc, #132]	; (8003770 <HAL_SAI_MspInit+0xc0>)
 80036ea:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A 
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80036ec:	23f0      	movs	r3, #240	; 0xf0
 80036ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036f0:	2302      	movs	r3, #2
 80036f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f4:	2300      	movs	r3, #0
 80036f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036f8:	2300      	movs	r3, #0
 80036fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80036fc:	230a      	movs	r3, #10
 80036fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003700:	f107 0314 	add.w	r3, r7, #20
 8003704:	4619      	mov	r1, r3
 8003706:	481c      	ldr	r0, [pc, #112]	; (8003778 <HAL_SAI_MspInit+0xc8>)
 8003708:	f002 f932 	bl	8005970 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a1a      	ldr	r2, [pc, #104]	; (800377c <HAL_SAI_MspInit+0xcc>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d125      	bne.n	8003762 <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8003716:	4b16      	ldr	r3, [pc, #88]	; (8003770 <HAL_SAI_MspInit+0xc0>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d10b      	bne.n	8003736 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800371e:	4b15      	ldr	r3, [pc, #84]	; (8003774 <HAL_SAI_MspInit+0xc4>)
 8003720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003722:	4a14      	ldr	r2, [pc, #80]	; (8003774 <HAL_SAI_MspInit+0xc4>)
 8003724:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003728:	6453      	str	r3, [r2, #68]	; 0x44
 800372a:	4b12      	ldr	r3, [pc, #72]	; (8003774 <HAL_SAI_MspInit+0xc4>)
 800372c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003732:	60fb      	str	r3, [r7, #12]
 8003734:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8003736:	4b0e      	ldr	r3, [pc, #56]	; (8003770 <HAL_SAI_MspInit+0xc0>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	3301      	adds	r3, #1
 800373c:	4a0c      	ldr	r2, [pc, #48]	; (8003770 <HAL_SAI_MspInit+0xc0>)
 800373e:	6013      	str	r3, [r2, #0]
    
    /**SAI2_B_Block_B GPIO Configuration    
    PG10     ------> SAI2_SD_B 
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8003740:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003744:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003746:	2302      	movs	r3, #2
 8003748:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800374a:	2300      	movs	r3, #0
 800374c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800374e:	2300      	movs	r3, #0
 8003750:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003752:	230a      	movs	r3, #10
 8003754:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8003756:	f107 0314 	add.w	r3, r7, #20
 800375a:	4619      	mov	r1, r3
 800375c:	4808      	ldr	r0, [pc, #32]	; (8003780 <HAL_SAI_MspInit+0xd0>)
 800375e:	f002 f907 	bl	8005970 <HAL_GPIO_Init>

    }
}
 8003762:	bf00      	nop
 8003764:	3728      	adds	r7, #40	; 0x28
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	40015c04 	.word	0x40015c04
 8003770:	200003a8 	.word	0x200003a8
 8003774:	40023800 	.word	0x40023800
 8003778:	40022000 	.word	0x40022000
 800377c:	40015c24 	.word	0x40015c24
 8003780:	40021800 	.word	0x40021800

08003784 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b08c      	sub	sp, #48	; 0x30
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800378c:	2300      	movs	r3, #0
 800378e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003790:	2300      	movs	r3, #0
 8003792:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8003794:	2200      	movs	r2, #0
 8003796:	6879      	ldr	r1, [r7, #4]
 8003798:	2036      	movs	r0, #54	; 0x36
 800379a:	f001 fabb 	bl	8004d14 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800379e:	2036      	movs	r0, #54	; 0x36
 80037a0:	f001 fad4 	bl	8004d4c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80037a4:	4b1f      	ldr	r3, [pc, #124]	; (8003824 <HAL_InitTick+0xa0>)
 80037a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a8:	4a1e      	ldr	r2, [pc, #120]	; (8003824 <HAL_InitTick+0xa0>)
 80037aa:	f043 0310 	orr.w	r3, r3, #16
 80037ae:	6413      	str	r3, [r2, #64]	; 0x40
 80037b0:	4b1c      	ldr	r3, [pc, #112]	; (8003824 <HAL_InitTick+0xa0>)
 80037b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b4:	f003 0310 	and.w	r3, r3, #16
 80037b8:	60fb      	str	r3, [r7, #12]
 80037ba:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80037bc:	f107 0210 	add.w	r2, r7, #16
 80037c0:	f107 0314 	add.w	r3, r7, #20
 80037c4:	4611      	mov	r1, r2
 80037c6:	4618      	mov	r0, r3
 80037c8:	f003 fbde 	bl	8006f88 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80037cc:	f003 fbb4 	bl	8006f38 <HAL_RCC_GetPCLK1Freq>
 80037d0:	4603      	mov	r3, r0
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80037d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d8:	4a13      	ldr	r2, [pc, #76]	; (8003828 <HAL_InitTick+0xa4>)
 80037da:	fba2 2303 	umull	r2, r3, r2, r3
 80037de:	0c9b      	lsrs	r3, r3, #18
 80037e0:	3b01      	subs	r3, #1
 80037e2:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80037e4:	4b11      	ldr	r3, [pc, #68]	; (800382c <HAL_InitTick+0xa8>)
 80037e6:	4a12      	ldr	r2, [pc, #72]	; (8003830 <HAL_InitTick+0xac>)
 80037e8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80037ea:	4b10      	ldr	r3, [pc, #64]	; (800382c <HAL_InitTick+0xa8>)
 80037ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80037f0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80037f2:	4a0e      	ldr	r2, [pc, #56]	; (800382c <HAL_InitTick+0xa8>)
 80037f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80037f8:	4b0c      	ldr	r3, [pc, #48]	; (800382c <HAL_InitTick+0xa8>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037fe:	4b0b      	ldr	r3, [pc, #44]	; (800382c <HAL_InitTick+0xa8>)
 8003800:	2200      	movs	r2, #0
 8003802:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003804:	4809      	ldr	r0, [pc, #36]	; (800382c <HAL_InitTick+0xa8>)
 8003806:	f006 f857 	bl	80098b8 <HAL_TIM_Base_Init>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d104      	bne.n	800381a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003810:	4806      	ldr	r0, [pc, #24]	; (800382c <HAL_InitTick+0xa8>)
 8003812:	f006 f87d 	bl	8009910 <HAL_TIM_Base_Start_IT>
 8003816:	4603      	mov	r3, r0
 8003818:	e000      	b.n	800381c <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
}
 800381c:	4618      	mov	r0, r3
 800381e:	3730      	adds	r7, #48	; 0x30
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	40023800 	.word	0x40023800
 8003828:	431bde83 	.word	0x431bde83
 800382c:	2000c68c 	.word	0x2000c68c
 8003830:	40001000 	.word	0x40001000

08003834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003838:	bf00      	nop
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr

08003842 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003842:	b480      	push	{r7}
 8003844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003846:	e7fe      	b.n	8003846 <HardFault_Handler+0x4>

08003848 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003848:	b480      	push	{r7}
 800384a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800384c:	e7fe      	b.n	800384c <MemManage_Handler+0x4>

0800384e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800384e:	b480      	push	{r7}
 8003850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003852:	e7fe      	b.n	8003852 <BusFault_Handler+0x4>

08003854 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003858:	e7fe      	b.n	8003858 <UsageFault_Handler+0x4>

0800385a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800385a:	b480      	push	{r7}
 800385c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800385e:	bf00      	nop
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800386c:	4802      	ldr	r0, [pc, #8]	; (8003878 <CAN1_RX0_IRQHandler+0x10>)
 800386e:	f000 ff4d 	bl	800470c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003872:	bf00      	nop
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	2000c588 	.word	0x2000c588

0800387c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003880:	4802      	ldr	r0, [pc, #8]	; (800388c <TIM6_DAC_IRQHandler+0x10>)
 8003882:	f006 f89a 	bl	80099ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003886:	bf00      	nop
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	2000c68c 	.word	0x2000c68c

08003890 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003894:	4802      	ldr	r0, [pc, #8]	; (80038a0 <LTDC_IRQHandler+0x10>)
 8003896:	f002 fb17 	bl	8005ec8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800389a:	bf00      	nop
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	2000c260 	.word	0x2000c260

080038a4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80038a8:	4802      	ldr	r0, [pc, #8]	; (80038b4 <DMA2D_IRQHandler+0x10>)
 80038aa:	f001 fe22 	bl	80054f2 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80038ae:	bf00      	nop
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	2000c500 	.word	0x2000c500

080038b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
	return 1;
 80038bc:	2301      	movs	r3, #1
}
 80038be:	4618      	mov	r0, r3
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <_kill>:

int _kill(int pid, int sig)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80038d2:	f021 f9db 	bl	8024c8c <__errno>
 80038d6:	4602      	mov	r2, r0
 80038d8:	2316      	movs	r3, #22
 80038da:	6013      	str	r3, [r2, #0]
	return -1;
 80038dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3708      	adds	r7, #8
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <_exit>:

void _exit (int status)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80038f0:	f04f 31ff 	mov.w	r1, #4294967295
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f7ff ffe7 	bl	80038c8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80038fa:	e7fe      	b.n	80038fa <_exit+0x12>

080038fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003908:	2300      	movs	r3, #0
 800390a:	617b      	str	r3, [r7, #20]
 800390c:	e00a      	b.n	8003924 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800390e:	f3af 8000 	nop.w
 8003912:	4601      	mov	r1, r0
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	1c5a      	adds	r2, r3, #1
 8003918:	60ba      	str	r2, [r7, #8]
 800391a:	b2ca      	uxtb	r2, r1
 800391c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	3301      	adds	r3, #1
 8003922:	617b      	str	r3, [r7, #20]
 8003924:	697a      	ldr	r2, [r7, #20]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	429a      	cmp	r2, r3
 800392a:	dbf0      	blt.n	800390e <_read+0x12>
	}

return len;
 800392c:	687b      	ldr	r3, [r7, #4]
}
 800392e:	4618      	mov	r0, r3
 8003930:	3718      	adds	r7, #24
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003936:	b580      	push	{r7, lr}
 8003938:	b086      	sub	sp, #24
 800393a:	af00      	add	r7, sp, #0
 800393c:	60f8      	str	r0, [r7, #12]
 800393e:	60b9      	str	r1, [r7, #8]
 8003940:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003942:	2300      	movs	r3, #0
 8003944:	617b      	str	r3, [r7, #20]
 8003946:	e009      	b.n	800395c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	1c5a      	adds	r2, r3, #1
 800394c:	60ba      	str	r2, [r7, #8]
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	4618      	mov	r0, r3
 8003952:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	3301      	adds	r3, #1
 800395a:	617b      	str	r3, [r7, #20]
 800395c:	697a      	ldr	r2, [r7, #20]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	429a      	cmp	r2, r3
 8003962:	dbf1      	blt.n	8003948 <_write+0x12>
	}
	return len;
 8003964:	687b      	ldr	r3, [r7, #4]
}
 8003966:	4618      	mov	r0, r3
 8003968:	3718      	adds	r7, #24
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <_close>:

int _close(int file)
{
 800396e:	b480      	push	{r7}
 8003970:	b083      	sub	sp, #12
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
	return -1;
 8003976:	f04f 33ff 	mov.w	r3, #4294967295
}
 800397a:	4618      	mov	r0, r3
 800397c:	370c      	adds	r7, #12
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr

08003986 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003986:	b480      	push	{r7}
 8003988:	b083      	sub	sp, #12
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
 800398e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003996:	605a      	str	r2, [r3, #4]
	return 0;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	370c      	adds	r7, #12
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr

080039a6 <_isatty>:

int _isatty(int file)
{
 80039a6:	b480      	push	{r7}
 80039a8:	b083      	sub	sp, #12
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
	return 1;
 80039ae:	2301      	movs	r3, #1
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80039bc:	b480      	push	{r7}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
	return 0;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3714      	adds	r7, #20
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
	...

080039d8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80039e0:	4b11      	ldr	r3, [pc, #68]	; (8003a28 <_sbrk+0x50>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d102      	bne.n	80039ee <_sbrk+0x16>
		heap_end = &end;
 80039e8:	4b0f      	ldr	r3, [pc, #60]	; (8003a28 <_sbrk+0x50>)
 80039ea:	4a10      	ldr	r2, [pc, #64]	; (8003a2c <_sbrk+0x54>)
 80039ec:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80039ee:	4b0e      	ldr	r3, [pc, #56]	; (8003a28 <_sbrk+0x50>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80039f4:	4b0c      	ldr	r3, [pc, #48]	; (8003a28 <_sbrk+0x50>)
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4413      	add	r3, r2
 80039fc:	466a      	mov	r2, sp
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d907      	bls.n	8003a12 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003a02:	f021 f943 	bl	8024c8c <__errno>
 8003a06:	4602      	mov	r2, r0
 8003a08:	230c      	movs	r3, #12
 8003a0a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a10:	e006      	b.n	8003a20 <_sbrk+0x48>
	}

	heap_end += incr;
 8003a12:	4b05      	ldr	r3, [pc, #20]	; (8003a28 <_sbrk+0x50>)
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4413      	add	r3, r2
 8003a1a:	4a03      	ldr	r2, [pc, #12]	; (8003a28 <_sbrk+0x50>)
 8003a1c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3710      	adds	r7, #16
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	200003ac 	.word	0x200003ac
 8003a2c:	2000cb40 	.word	0x2000cb40

08003a30 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a30:	b480      	push	{r7}
 8003a32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a34:	4b08      	ldr	r3, [pc, #32]	; (8003a58 <SystemInit+0x28>)
 8003a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a3a:	4a07      	ldr	r2, [pc, #28]	; (8003a58 <SystemInit+0x28>)
 8003a3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003a44:	4b04      	ldr	r3, [pc, #16]	; (8003a58 <SystemInit+0x28>)
 8003a46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a4a:	609a      	str	r2, [r3, #8]
#endif
}
 8003a4c:	bf00      	nop
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	e000ed00 	.word	0xe000ed00

08003a5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003a5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a94 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003a60:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003a62:	e003      	b.n	8003a6c <LoopCopyDataInit>

08003a64 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003a64:	4b0c      	ldr	r3, [pc, #48]	; (8003a98 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003a66:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003a68:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003a6a:	3104      	adds	r1, #4

08003a6c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003a6c:	480b      	ldr	r0, [pc, #44]	; (8003a9c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003a6e:	4b0c      	ldr	r3, [pc, #48]	; (8003aa0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003a70:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003a72:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003a74:	d3f6      	bcc.n	8003a64 <CopyDataInit>
  ldr  r2, =_sbss
 8003a76:	4a0b      	ldr	r2, [pc, #44]	; (8003aa4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003a78:	e002      	b.n	8003a80 <LoopFillZerobss>

08003a7a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003a7a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003a7c:	f842 3b04 	str.w	r3, [r2], #4

08003a80 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003a80:	4b09      	ldr	r3, [pc, #36]	; (8003aa8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003a82:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003a84:	d3f9      	bcc.n	8003a7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003a86:	f7ff ffd3 	bl	8003a30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a8a:	f021 f917 	bl	8024cbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a8e:	f7fd fa0d 	bl	8000eac <main>
  bx  lr    
 8003a92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003a94:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8003a98:	0806136c 	.word	0x0806136c
  ldr  r0, =_sdata
 8003a9c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003aa0:	20000100 	.word	0x20000100
  ldr  r2, =_sbss
 8003aa4:	20000100 	.word	0x20000100
  ldr  r3, = _ebss
 8003aa8:	2000cb40 	.word	0x2000cb40

08003aac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003aac:	e7fe      	b.n	8003aac <ADC_IRQHandler>

08003aae <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ab2:	2003      	movs	r0, #3
 8003ab4:	f001 f923 	bl	8004cfe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ab8:	2000      	movs	r0, #0
 8003aba:	f7ff fe63 	bl	8003784 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003abe:	f7fe ff09 	bl	80028d4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003acc:	4b06      	ldr	r3, [pc, #24]	; (8003ae8 <HAL_IncTick+0x20>)
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	4b06      	ldr	r3, [pc, #24]	; (8003aec <HAL_IncTick+0x24>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	4a04      	ldr	r2, [pc, #16]	; (8003aec <HAL_IncTick+0x24>)
 8003ada:	6013      	str	r3, [r2, #0]
}
 8003adc:	bf00      	nop
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	20000020 	.word	0x20000020
 8003aec:	2000c6cc 	.word	0x2000c6cc

08003af0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003af0:	b480      	push	{r7}
 8003af2:	af00      	add	r7, sp, #0
  return uwTick;
 8003af4:	4b03      	ldr	r3, [pc, #12]	; (8003b04 <HAL_GetTick+0x14>)
 8003af6:	681b      	ldr	r3, [r3, #0]
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	2000c6cc 	.word	0x2000c6cc

08003b08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b10:	f7ff ffee 	bl	8003af0 <HAL_GetTick>
 8003b14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b20:	d005      	beq.n	8003b2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b22:	4b09      	ldr	r3, [pc, #36]	; (8003b48 <HAL_Delay+0x40>)
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	461a      	mov	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b2e:	bf00      	nop
 8003b30:	f7ff ffde 	bl	8003af0 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d8f7      	bhi.n	8003b30 <HAL_Delay+0x28>
  {
  }
}
 8003b40:	bf00      	nop
 8003b42:	3710      	adds	r7, #16
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	20000020 	.word	0x20000020

08003b4c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b54:	2300      	movs	r3, #0
 8003b56:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e031      	b.n	8003bc6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d109      	bne.n	8003b7e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f7fe feda 	bl	8002924 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b82:	f003 0310 	and.w	r3, r3, #16
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d116      	bne.n	8003bb8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b8e:	4b10      	ldr	r3, [pc, #64]	; (8003bd0 <HAL_ADC_Init+0x84>)
 8003b90:	4013      	ands	r3, r2
 8003b92:	f043 0202 	orr.w	r2, r3, #2
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 f964 	bl	8003e68 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	f023 0303 	bic.w	r3, r3, #3
 8003bae:	f043 0201 	orr.w	r2, r3, #1
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	641a      	str	r2, [r3, #64]	; 0x40
 8003bb6:	e001      	b.n	8003bbc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	ffffeefd 	.word	0xffffeefd

08003bd4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003bde:	2300      	movs	r3, #0
 8003be0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d101      	bne.n	8003bf0 <HAL_ADC_ConfigChannel+0x1c>
 8003bec:	2302      	movs	r3, #2
 8003bee:	e12a      	b.n	8003e46 <HAL_ADC_ConfigChannel+0x272>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2b09      	cmp	r3, #9
 8003bfe:	d93a      	bls.n	8003c76 <HAL_ADC_ConfigChannel+0xa2>
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c08:	d035      	beq.n	8003c76 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68d9      	ldr	r1, [r3, #12]
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	461a      	mov	r2, r3
 8003c18:	4613      	mov	r3, r2
 8003c1a:	005b      	lsls	r3, r3, #1
 8003c1c:	4413      	add	r3, r2
 8003c1e:	3b1e      	subs	r3, #30
 8003c20:	2207      	movs	r2, #7
 8003c22:	fa02 f303 	lsl.w	r3, r2, r3
 8003c26:	43da      	mvns	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	400a      	ands	r2, r1
 8003c2e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a87      	ldr	r2, [pc, #540]	; (8003e54 <HAL_ADC_ConfigChannel+0x280>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d10a      	bne.n	8003c50 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68d9      	ldr	r1, [r3, #12]
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	061a      	lsls	r2, r3, #24
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c4e:	e035      	b.n	8003cbc <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68d9      	ldr	r1, [r3, #12]
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	689a      	ldr	r2, [r3, #8]
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	4618      	mov	r0, r3
 8003c62:	4603      	mov	r3, r0
 8003c64:	005b      	lsls	r3, r3, #1
 8003c66:	4403      	add	r3, r0
 8003c68:	3b1e      	subs	r3, #30
 8003c6a:	409a      	lsls	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	430a      	orrs	r2, r1
 8003c72:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c74:	e022      	b.n	8003cbc <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	6919      	ldr	r1, [r3, #16]
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	461a      	mov	r2, r3
 8003c84:	4613      	mov	r3, r2
 8003c86:	005b      	lsls	r3, r3, #1
 8003c88:	4413      	add	r3, r2
 8003c8a:	2207      	movs	r2, #7
 8003c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c90:	43da      	mvns	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	400a      	ands	r2, r1
 8003c98:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	6919      	ldr	r1, [r3, #16]
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	689a      	ldr	r2, [r3, #8]
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	4618      	mov	r0, r3
 8003cac:	4603      	mov	r3, r0
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	4403      	add	r3, r0
 8003cb2:	409a      	lsls	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	2b06      	cmp	r3, #6
 8003cc2:	d824      	bhi.n	8003d0e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	685a      	ldr	r2, [r3, #4]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	4413      	add	r3, r2
 8003cd4:	3b05      	subs	r3, #5
 8003cd6:	221f      	movs	r2, #31
 8003cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cdc:	43da      	mvns	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	400a      	ands	r2, r1
 8003ce4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685a      	ldr	r2, [r3, #4]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	4413      	add	r3, r2
 8003cfe:	3b05      	subs	r3, #5
 8003d00:	fa00 f203 	lsl.w	r2, r0, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	635a      	str	r2, [r3, #52]	; 0x34
 8003d0c:	e04c      	b.n	8003da8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	2b0c      	cmp	r3, #12
 8003d14:	d824      	bhi.n	8003d60 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	685a      	ldr	r2, [r3, #4]
 8003d20:	4613      	mov	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4413      	add	r3, r2
 8003d26:	3b23      	subs	r3, #35	; 0x23
 8003d28:	221f      	movs	r2, #31
 8003d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2e:	43da      	mvns	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	400a      	ands	r2, r1
 8003d36:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	4618      	mov	r0, r3
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	685a      	ldr	r2, [r3, #4]
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	4413      	add	r3, r2
 8003d50:	3b23      	subs	r3, #35	; 0x23
 8003d52:	fa00 f203 	lsl.w	r2, r0, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	631a      	str	r2, [r3, #48]	; 0x30
 8003d5e:	e023      	b.n	8003da8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	685a      	ldr	r2, [r3, #4]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	4413      	add	r3, r2
 8003d70:	3b41      	subs	r3, #65	; 0x41
 8003d72:	221f      	movs	r2, #31
 8003d74:	fa02 f303 	lsl.w	r3, r2, r3
 8003d78:	43da      	mvns	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	400a      	ands	r2, r1
 8003d80:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	4618      	mov	r0, r3
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685a      	ldr	r2, [r3, #4]
 8003d94:	4613      	mov	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	3b41      	subs	r3, #65	; 0x41
 8003d9c:	fa00 f203 	lsl.w	r2, r0, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a2a      	ldr	r2, [pc, #168]	; (8003e58 <HAL_ADC_ConfigChannel+0x284>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d10a      	bne.n	8003dc8 <HAL_ADC_ConfigChannel+0x1f4>
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003dba:	d105      	bne.n	8003dc8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003dbc:	4b27      	ldr	r3, [pc, #156]	; (8003e5c <HAL_ADC_ConfigChannel+0x288>)
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	4a26      	ldr	r2, [pc, #152]	; (8003e5c <HAL_ADC_ConfigChannel+0x288>)
 8003dc2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003dc6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a22      	ldr	r2, [pc, #136]	; (8003e58 <HAL_ADC_ConfigChannel+0x284>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d109      	bne.n	8003de6 <HAL_ADC_ConfigChannel+0x212>
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2b12      	cmp	r3, #18
 8003dd8:	d105      	bne.n	8003de6 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003dda:	4b20      	ldr	r3, [pc, #128]	; (8003e5c <HAL_ADC_ConfigChannel+0x288>)
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	4a1f      	ldr	r2, [pc, #124]	; (8003e5c <HAL_ADC_ConfigChannel+0x288>)
 8003de0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003de4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a1b      	ldr	r2, [pc, #108]	; (8003e58 <HAL_ADC_ConfigChannel+0x284>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d125      	bne.n	8003e3c <HAL_ADC_ConfigChannel+0x268>
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a17      	ldr	r2, [pc, #92]	; (8003e54 <HAL_ADC_ConfigChannel+0x280>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d003      	beq.n	8003e02 <HAL_ADC_ConfigChannel+0x22e>
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2b11      	cmp	r3, #17
 8003e00:	d11c      	bne.n	8003e3c <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003e02:	4b16      	ldr	r3, [pc, #88]	; (8003e5c <HAL_ADC_ConfigChannel+0x288>)
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	4a15      	ldr	r2, [pc, #84]	; (8003e5c <HAL_ADC_ConfigChannel+0x288>)
 8003e08:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e0c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a10      	ldr	r2, [pc, #64]	; (8003e54 <HAL_ADC_ConfigChannel+0x280>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d111      	bne.n	8003e3c <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003e18:	4b11      	ldr	r3, [pc, #68]	; (8003e60 <HAL_ADC_ConfigChannel+0x28c>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a11      	ldr	r2, [pc, #68]	; (8003e64 <HAL_ADC_ConfigChannel+0x290>)
 8003e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e22:	0c9a      	lsrs	r2, r3, #18
 8003e24:	4613      	mov	r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	4413      	add	r3, r2
 8003e2a:	005b      	lsls	r3, r3, #1
 8003e2c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003e2e:	e002      	b.n	8003e36 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	3b01      	subs	r3, #1
 8003e34:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d1f9      	bne.n	8003e30 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3714      	adds	r7, #20
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	10000012 	.word	0x10000012
 8003e58:	40012000 	.word	0x40012000
 8003e5c:	40012300 	.word	0x40012300
 8003e60:	20000018 	.word	0x20000018
 8003e64:	431bde83 	.word	0x431bde83

08003e68 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003e70:	4b78      	ldr	r3, [pc, #480]	; (8004054 <ADC_Init+0x1ec>)
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	4a77      	ldr	r2, [pc, #476]	; (8004054 <ADC_Init+0x1ec>)
 8003e76:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003e7a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003e7c:	4b75      	ldr	r3, [pc, #468]	; (8004054 <ADC_Init+0x1ec>)
 8003e7e:	685a      	ldr	r2, [r3, #4]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	4973      	ldr	r1, [pc, #460]	; (8004054 <ADC_Init+0x1ec>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	6859      	ldr	r1, [r3, #4]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	021a      	lsls	r2, r3, #8
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	685a      	ldr	r2, [r3, #4]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003ebc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	6859      	ldr	r1, [r3, #4]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689a      	ldr	r2, [r3, #8]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	689a      	ldr	r2, [r3, #8]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ede:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	6899      	ldr	r1, [r3, #8]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68da      	ldr	r2, [r3, #12]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef6:	4a58      	ldr	r2, [pc, #352]	; (8004058 <ADC_Init+0x1f0>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d022      	beq.n	8003f42 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	689a      	ldr	r2, [r3, #8]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f0a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	6899      	ldr	r1, [r3, #8]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	689a      	ldr	r2, [r3, #8]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003f2c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	6899      	ldr	r1, [r3, #8]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	609a      	str	r2, [r3, #8]
 8003f40:	e00f      	b.n	8003f62 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	689a      	ldr	r2, [r3, #8]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	689a      	ldr	r2, [r3, #8]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003f60:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	689a      	ldr	r2, [r3, #8]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 0202 	bic.w	r2, r2, #2
 8003f70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	6899      	ldr	r1, [r3, #8]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	005a      	lsls	r2, r3, #1
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	430a      	orrs	r2, r1
 8003f84:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d01b      	beq.n	8003fc8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	685a      	ldr	r2, [r3, #4]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f9e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685a      	ldr	r2, [r3, #4]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003fae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	6859      	ldr	r1, [r3, #4]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	035a      	lsls	r2, r3, #13
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	605a      	str	r2, [r3, #4]
 8003fc6:	e007      	b.n	8003fd8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	685a      	ldr	r2, [r3, #4]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fd6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003fe6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	69db      	ldr	r3, [r3, #28]
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	051a      	lsls	r2, r3, #20
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	689a      	ldr	r2, [r3, #8]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800400c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	6899      	ldr	r1, [r3, #8]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800401a:	025a      	lsls	r2, r3, #9
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	430a      	orrs	r2, r1
 8004022:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689a      	ldr	r2, [r3, #8]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004032:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	6899      	ldr	r1, [r3, #8]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	029a      	lsls	r2, r3, #10
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	430a      	orrs	r2, r1
 8004046:	609a      	str	r2, [r3, #8]
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr
 8004054:	40012300 	.word	0x40012300
 8004058:	0f000001 	.word	0x0f000001

0800405c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d101      	bne.n	800406e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e0ed      	b.n	800424a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d102      	bne.n	8004080 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f7fe fcac 	bl	80029d8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f022 0202 	bic.w	r2, r2, #2
 800408e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004090:	f7ff fd2e 	bl	8003af0 <HAL_GetTick>
 8004094:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004096:	e012      	b.n	80040be <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004098:	f7ff fd2a 	bl	8003af0 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b0a      	cmp	r3, #10
 80040a4:	d90b      	bls.n	80040be <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2205      	movs	r2, #5
 80040b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e0c5      	b.n	800424a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1e5      	bne.n	8004098 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f042 0201 	orr.w	r2, r2, #1
 80040da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040dc:	f7ff fd08 	bl	8003af0 <HAL_GetTick>
 80040e0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80040e2:	e012      	b.n	800410a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80040e4:	f7ff fd04 	bl	8003af0 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b0a      	cmp	r3, #10
 80040f0:	d90b      	bls.n	800410a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2205      	movs	r2, #5
 8004102:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e09f      	b.n	800424a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f003 0301 	and.w	r3, r3, #1
 8004114:	2b00      	cmp	r3, #0
 8004116:	d0e5      	beq.n	80040e4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	7e1b      	ldrb	r3, [r3, #24]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d108      	bne.n	8004132 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800412e:	601a      	str	r2, [r3, #0]
 8004130:	e007      	b.n	8004142 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004140:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	7e5b      	ldrb	r3, [r3, #25]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d108      	bne.n	800415c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004158:	601a      	str	r2, [r3, #0]
 800415a:	e007      	b.n	800416c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800416a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	7e9b      	ldrb	r3, [r3, #26]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d108      	bne.n	8004186 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f042 0220 	orr.w	r2, r2, #32
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	e007      	b.n	8004196 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f022 0220 	bic.w	r2, r2, #32
 8004194:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	7edb      	ldrb	r3, [r3, #27]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d108      	bne.n	80041b0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f022 0210 	bic.w	r2, r2, #16
 80041ac:	601a      	str	r2, [r3, #0]
 80041ae:	e007      	b.n	80041c0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f042 0210 	orr.w	r2, r2, #16
 80041be:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	7f1b      	ldrb	r3, [r3, #28]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d108      	bne.n	80041da <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f042 0208 	orr.w	r2, r2, #8
 80041d6:	601a      	str	r2, [r3, #0]
 80041d8:	e007      	b.n	80041ea <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f022 0208 	bic.w	r2, r2, #8
 80041e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	7f5b      	ldrb	r3, [r3, #29]
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d108      	bne.n	8004204 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f042 0204 	orr.w	r2, r2, #4
 8004200:	601a      	str	r2, [r3, #0]
 8004202:	e007      	b.n	8004214 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f022 0204 	bic.w	r2, r2, #4
 8004212:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689a      	ldr	r2, [r3, #8]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	431a      	orrs	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	431a      	orrs	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	ea42 0103 	orr.w	r1, r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	1e5a      	subs	r2, r3, #1
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	430a      	orrs	r2, r1
 8004238:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
	...

08004254 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004254:	b480      	push	{r7}
 8004256:	b087      	sub	sp, #28
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f893 3020 	ldrb.w	r3, [r3, #32]
 800426a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800426c:	7cfb      	ldrb	r3, [r7, #19]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d003      	beq.n	800427a <HAL_CAN_ConfigFilter+0x26>
 8004272:	7cfb      	ldrb	r3, [r7, #19]
 8004274:	2b02      	cmp	r3, #2
 8004276:	f040 80be 	bne.w	80043f6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800427a:	4b65      	ldr	r3, [pc, #404]	; (8004410 <HAL_CAN_ConfigFilter+0x1bc>)
 800427c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004284:	f043 0201 	orr.w	r2, r3, #1
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004294:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a8:	021b      	lsls	r3, r3, #8
 80042aa:	431a      	orrs	r2, r3
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	f003 031f 	and.w	r3, r3, #31
 80042ba:	2201      	movs	r2, #1
 80042bc:	fa02 f303 	lsl.w	r3, r2, r3
 80042c0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	43db      	mvns	r3, r3
 80042cc:	401a      	ands	r2, r3
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	69db      	ldr	r3, [r3, #28]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d123      	bne.n	8004324 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	43db      	mvns	r3, r3
 80042e6:	401a      	ands	r2, r3
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80042fa:	683a      	ldr	r2, [r7, #0]
 80042fc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80042fe:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	3248      	adds	r2, #72	; 0x48
 8004304:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004318:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800431a:	6979      	ldr	r1, [r7, #20]
 800431c:	3348      	adds	r3, #72	; 0x48
 800431e:	00db      	lsls	r3, r3, #3
 8004320:	440b      	add	r3, r1
 8004322:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	69db      	ldr	r3, [r3, #28]
 8004328:	2b01      	cmp	r3, #1
 800432a:	d122      	bne.n	8004372 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	431a      	orrs	r2, r3
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004348:	683a      	ldr	r2, [r7, #0]
 800434a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800434c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	3248      	adds	r2, #72	; 0x48
 8004352:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004366:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004368:	6979      	ldr	r1, [r7, #20]
 800436a:	3348      	adds	r3, #72	; 0x48
 800436c:	00db      	lsls	r3, r3, #3
 800436e:	440b      	add	r3, r1
 8004370:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d109      	bne.n	800438e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	43db      	mvns	r3, r3
 8004384:	401a      	ands	r2, r3
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800438c:	e007      	b.n	800439e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	431a      	orrs	r2, r3
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d109      	bne.n	80043ba <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	43db      	mvns	r3, r3
 80043b0:	401a      	ands	r2, r3
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80043b8:	e007      	b.n	80043ca <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	431a      	orrs	r2, r3
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d107      	bne.n	80043e2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	431a      	orrs	r2, r3
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80043e8:	f023 0201 	bic.w	r2, r3, #1
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80043f2:	2300      	movs	r3, #0
 80043f4:	e006      	b.n	8004404 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
  }
}
 8004404:	4618      	mov	r0, r3
 8004406:	371c      	adds	r7, #28
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr
 8004410:	40006400 	.word	0x40006400

08004414 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2b01      	cmp	r3, #1
 8004426:	d12e      	bne.n	8004486 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2202      	movs	r2, #2
 800442c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f022 0201 	bic.w	r2, r2, #1
 800443e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004440:	f7ff fb56 	bl	8003af0 <HAL_GetTick>
 8004444:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004446:	e012      	b.n	800446e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004448:	f7ff fb52 	bl	8003af0 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b0a      	cmp	r3, #10
 8004454:	d90b      	bls.n	800446e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2205      	movs	r2, #5
 8004466:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e012      	b.n	8004494 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f003 0301 	and.w	r3, r3, #1
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1e5      	bne.n	8004448 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004482:	2300      	movs	r3, #0
 8004484:	e006      	b.n	8004494 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
  }
}
 8004494:	4618      	mov	r0, r3
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800449c:	b480      	push	{r7}
 800449e:	b087      	sub	sp, #28
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
 80044a8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044b0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80044b2:	7dfb      	ldrb	r3, [r7, #23]
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d003      	beq.n	80044c0 <HAL_CAN_GetRxMessage+0x24>
 80044b8:	7dfb      	ldrb	r3, [r7, #23]
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	f040 80f3 	bne.w	80046a6 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10e      	bne.n	80044e4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	f003 0303 	and.w	r3, r3, #3
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d116      	bne.n	8004502 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e0e7      	b.n	80046b4 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	f003 0303 	and.w	r3, r3, #3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d107      	bne.n	8004502 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e0d8      	b.n	80046b4 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	331b      	adds	r3, #27
 800450a:	011b      	lsls	r3, r3, #4
 800450c:	4413      	add	r3, r2
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0204 	and.w	r2, r3, #4
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d10c      	bne.n	800453a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	331b      	adds	r3, #27
 8004528:	011b      	lsls	r3, r3, #4
 800452a:	4413      	add	r3, r2
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	0d5b      	lsrs	r3, r3, #21
 8004530:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	601a      	str	r2, [r3, #0]
 8004538:	e00b      	b.n	8004552 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	331b      	adds	r3, #27
 8004542:	011b      	lsls	r3, r3, #4
 8004544:	4413      	add	r3, r2
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	08db      	lsrs	r3, r3, #3
 800454a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	331b      	adds	r3, #27
 800455a:	011b      	lsls	r3, r3, #4
 800455c:	4413      	add	r3, r2
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0202 	and.w	r2, r3, #2
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	331b      	adds	r3, #27
 8004570:	011b      	lsls	r3, r3, #4
 8004572:	4413      	add	r3, r2
 8004574:	3304      	adds	r3, #4
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 020f 	and.w	r2, r3, #15
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	331b      	adds	r3, #27
 8004588:	011b      	lsls	r3, r3, #4
 800458a:	4413      	add	r3, r2
 800458c:	3304      	adds	r3, #4
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	0a1b      	lsrs	r3, r3, #8
 8004592:	b2da      	uxtb	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	331b      	adds	r3, #27
 80045a0:	011b      	lsls	r3, r3, #4
 80045a2:	4413      	add	r3, r2
 80045a4:	3304      	adds	r3, #4
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	0c1b      	lsrs	r3, r3, #16
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	011b      	lsls	r3, r3, #4
 80045b8:	4413      	add	r3, r2
 80045ba:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	b2da      	uxtb	r2, r3
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	011b      	lsls	r3, r3, #4
 80045ce:	4413      	add	r3, r2
 80045d0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	0a1a      	lsrs	r2, r3, #8
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	3301      	adds	r3, #1
 80045dc:	b2d2      	uxtb	r2, r2
 80045de:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	011b      	lsls	r3, r3, #4
 80045e8:	4413      	add	r3, r2
 80045ea:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	0c1a      	lsrs	r2, r3, #16
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	3302      	adds	r3, #2
 80045f6:	b2d2      	uxtb	r2, r2
 80045f8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	011b      	lsls	r3, r3, #4
 8004602:	4413      	add	r3, r2
 8004604:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	0e1a      	lsrs	r2, r3, #24
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	3303      	adds	r3, #3
 8004610:	b2d2      	uxtb	r2, r2
 8004612:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	011b      	lsls	r3, r3, #4
 800461c:	4413      	add	r3, r2
 800461e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	3304      	adds	r3, #4
 8004628:	b2d2      	uxtb	r2, r2
 800462a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	011b      	lsls	r3, r3, #4
 8004634:	4413      	add	r3, r2
 8004636:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	0a1a      	lsrs	r2, r3, #8
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	3305      	adds	r3, #5
 8004642:	b2d2      	uxtb	r2, r2
 8004644:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	011b      	lsls	r3, r3, #4
 800464e:	4413      	add	r3, r2
 8004650:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	0c1a      	lsrs	r2, r3, #16
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	3306      	adds	r3, #6
 800465c:	b2d2      	uxtb	r2, r2
 800465e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	011b      	lsls	r3, r3, #4
 8004668:	4413      	add	r3, r2
 800466a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	0e1a      	lsrs	r2, r3, #24
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	3307      	adds	r3, #7
 8004676:	b2d2      	uxtb	r2, r2
 8004678:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d108      	bne.n	8004692 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68da      	ldr	r2, [r3, #12]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f042 0220 	orr.w	r2, r2, #32
 800468e:	60da      	str	r2, [r3, #12]
 8004690:	e007      	b.n	80046a2 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	691a      	ldr	r2, [r3, #16]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f042 0220 	orr.w	r2, r2, #32
 80046a0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80046a2:	2300      	movs	r3, #0
 80046a4:	e006      	b.n	80046b4 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046aa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
  }
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	371c      	adds	r7, #28
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046d0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80046d2:	7bfb      	ldrb	r3, [r7, #15]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d002      	beq.n	80046de <HAL_CAN_ActivateNotification+0x1e>
 80046d8:	7bfb      	ldrb	r3, [r7, #15]
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d109      	bne.n	80046f2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	6959      	ldr	r1, [r3, #20]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	683a      	ldr	r2, [r7, #0]
 80046ea:	430a      	orrs	r2, r1
 80046ec:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80046ee:	2300      	movs	r3, #0
 80046f0:	e006      	b.n	8004700 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
  }
}
 8004700:	4618      	mov	r0, r3
 8004702:	3714      	adds	r7, #20
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b08a      	sub	sp, #40	; 0x28
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004714:	2300      	movs	r3, #0
 8004716:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004748:	6a3b      	ldr	r3, [r7, #32]
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	d07c      	beq.n	800484c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	f003 0301 	and.w	r3, r3, #1
 8004758:	2b00      	cmp	r3, #0
 800475a:	d023      	beq.n	80047a4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2201      	movs	r2, #1
 8004762:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d003      	beq.n	8004776 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f97d 	bl	8004a6e <HAL_CAN_TxMailbox0CompleteCallback>
 8004774:	e016      	b.n	80047a4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	f003 0304 	and.w	r3, r3, #4
 800477c:	2b00      	cmp	r3, #0
 800477e:	d004      	beq.n	800478a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004782:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004786:	627b      	str	r3, [r7, #36]	; 0x24
 8004788:	e00c      	b.n	80047a4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	f003 0308 	and.w	r3, r3, #8
 8004790:	2b00      	cmp	r3, #0
 8004792:	d004      	beq.n	800479e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004796:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800479a:	627b      	str	r3, [r7, #36]	; 0x24
 800479c:	e002      	b.n	80047a4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 f983 	bl	8004aaa <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d024      	beq.n	80047f8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047b6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d003      	beq.n	80047ca <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f95d 	bl	8004a82 <HAL_CAN_TxMailbox1CompleteCallback>
 80047c8:	e016      	b.n	80047f8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d004      	beq.n	80047de <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80047d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80047da:	627b      	str	r3, [r7, #36]	; 0x24
 80047dc:	e00c      	b.n	80047f8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d004      	beq.n	80047f2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80047e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047ee:	627b      	str	r3, [r7, #36]	; 0x24
 80047f0:	e002      	b.n	80047f8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 f963 	bl	8004abe <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d024      	beq.n	800484c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800480a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d003      	beq.n	800481e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 f93d 	bl	8004a96 <HAL_CAN_TxMailbox2CompleteCallback>
 800481c:	e016      	b.n	800484c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d004      	beq.n	8004832 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800482e:	627b      	str	r3, [r7, #36]	; 0x24
 8004830:	e00c      	b.n	800484c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d004      	beq.n	8004846 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800483c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004842:	627b      	str	r3, [r7, #36]	; 0x24
 8004844:	e002      	b.n	800484c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f943 	bl	8004ad2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800484c:	6a3b      	ldr	r3, [r7, #32]
 800484e:	f003 0308 	and.w	r3, r3, #8
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00c      	beq.n	8004870 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	f003 0310 	and.w	r3, r3, #16
 800485c:	2b00      	cmp	r3, #0
 800485e:	d007      	beq.n	8004870 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004862:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004866:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2210      	movs	r2, #16
 800486e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004870:	6a3b      	ldr	r3, [r7, #32]
 8004872:	f003 0304 	and.w	r3, r3, #4
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00b      	beq.n	8004892 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	f003 0308 	and.w	r3, r3, #8
 8004880:	2b00      	cmp	r3, #0
 8004882:	d006      	beq.n	8004892 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2208      	movs	r2, #8
 800488a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f000 f92a 	bl	8004ae6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004892:	6a3b      	ldr	r3, [r7, #32]
 8004894:	f003 0302 	and.w	r3, r3, #2
 8004898:	2b00      	cmp	r3, #0
 800489a:	d009      	beq.n	80048b0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	f003 0303 	and.w	r3, r3, #3
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d002      	beq.n	80048b0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f7fc fe3e 	bl	800152c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80048b0:	6a3b      	ldr	r3, [r7, #32]
 80048b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00c      	beq.n	80048d4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	f003 0310 	and.w	r3, r3, #16
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d007      	beq.n	80048d4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80048c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048ca:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2210      	movs	r2, #16
 80048d2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80048d4:	6a3b      	ldr	r3, [r7, #32]
 80048d6:	f003 0320 	and.w	r3, r3, #32
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00b      	beq.n	80048f6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	f003 0308 	and.w	r3, r3, #8
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d006      	beq.n	80048f6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2208      	movs	r2, #8
 80048ee:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 f90c 	bl	8004b0e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80048f6:	6a3b      	ldr	r3, [r7, #32]
 80048f8:	f003 0310 	and.w	r3, r3, #16
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d009      	beq.n	8004914 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	f003 0303 	and.w	r3, r3, #3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d002      	beq.n	8004914 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 f8f3 	bl	8004afa <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004914:	6a3b      	ldr	r3, [r7, #32]
 8004916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00b      	beq.n	8004936 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	f003 0310 	and.w	r3, r3, #16
 8004924:	2b00      	cmp	r3, #0
 8004926:	d006      	beq.n	8004936 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2210      	movs	r2, #16
 800492e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 f8f6 	bl	8004b22 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004936:	6a3b      	ldr	r3, [r7, #32]
 8004938:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00b      	beq.n	8004958 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	f003 0308 	and.w	r3, r3, #8
 8004946:	2b00      	cmp	r3, #0
 8004948:	d006      	beq.n	8004958 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2208      	movs	r2, #8
 8004950:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 f8ef 	bl	8004b36 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004958:	6a3b      	ldr	r3, [r7, #32]
 800495a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d075      	beq.n	8004a4e <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	f003 0304 	and.w	r3, r3, #4
 8004968:	2b00      	cmp	r3, #0
 800496a:	d06c      	beq.n	8004a46 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800496c:	6a3b      	ldr	r3, [r7, #32]
 800496e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004972:	2b00      	cmp	r3, #0
 8004974:	d008      	beq.n	8004988 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800497c:	2b00      	cmp	r3, #0
 800497e:	d003      	beq.n	8004988 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004982:	f043 0301 	orr.w	r3, r3, #1
 8004986:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004988:	6a3b      	ldr	r3, [r7, #32]
 800498a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800498e:	2b00      	cmp	r3, #0
 8004990:	d008      	beq.n	80049a4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004998:	2b00      	cmp	r3, #0
 800499a:	d003      	beq.n	80049a4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800499c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499e:	f043 0302 	orr.w	r3, r3, #2
 80049a2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80049a4:	6a3b      	ldr	r3, [r7, #32]
 80049a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d008      	beq.n	80049c0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d003      	beq.n	80049c0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80049b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ba:	f043 0304 	orr.w	r3, r3, #4
 80049be:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80049c0:	6a3b      	ldr	r3, [r7, #32]
 80049c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d03d      	beq.n	8004a46 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d038      	beq.n	8004a46 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80049da:	2b30      	cmp	r3, #48	; 0x30
 80049dc:	d017      	beq.n	8004a0e <HAL_CAN_IRQHandler+0x302>
 80049de:	2b30      	cmp	r3, #48	; 0x30
 80049e0:	d804      	bhi.n	80049ec <HAL_CAN_IRQHandler+0x2e0>
 80049e2:	2b10      	cmp	r3, #16
 80049e4:	d009      	beq.n	80049fa <HAL_CAN_IRQHandler+0x2ee>
 80049e6:	2b20      	cmp	r3, #32
 80049e8:	d00c      	beq.n	8004a04 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80049ea:	e024      	b.n	8004a36 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 80049ec:	2b50      	cmp	r3, #80	; 0x50
 80049ee:	d018      	beq.n	8004a22 <HAL_CAN_IRQHandler+0x316>
 80049f0:	2b60      	cmp	r3, #96	; 0x60
 80049f2:	d01b      	beq.n	8004a2c <HAL_CAN_IRQHandler+0x320>
 80049f4:	2b40      	cmp	r3, #64	; 0x40
 80049f6:	d00f      	beq.n	8004a18 <HAL_CAN_IRQHandler+0x30c>
            break;
 80049f8:	e01d      	b.n	8004a36 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 80049fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fc:	f043 0308 	orr.w	r3, r3, #8
 8004a00:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004a02:	e018      	b.n	8004a36 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a06:	f043 0310 	orr.w	r3, r3, #16
 8004a0a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004a0c:	e013      	b.n	8004a36 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a10:	f043 0320 	orr.w	r3, r3, #32
 8004a14:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004a16:	e00e      	b.n	8004a36 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8004a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a1e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004a20:	e009      	b.n	8004a36 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8004a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a28:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004a2a:	e004      	b.n	8004a36 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a32:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004a34:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	699a      	ldr	r2, [r3, #24]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004a44:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2204      	movs	r2, #4
 8004a4c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d008      	beq.n	8004a66 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5a:	431a      	orrs	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 f872 	bl	8004b4a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004a66:	bf00      	nop
 8004a68:	3728      	adds	r7, #40	; 0x28
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b083      	sub	sp, #12
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004a76:	bf00      	nop
 8004a78:	370c      	adds	r7, #12
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr

08004a82 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004a82:	b480      	push	{r7}
 8004a84:	b083      	sub	sp, #12
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004a8a:	bf00      	nop
 8004a8c:	370c      	adds	r7, #12
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr

08004a96 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b083      	sub	sp, #12
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004a9e:	bf00      	nop
 8004aa0:	370c      	adds	r7, #12
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr

08004aaa <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004aaa:	b480      	push	{r7}
 8004aac:	b083      	sub	sp, #12
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004ab2:	bf00      	nop
 8004ab4:	370c      	adds	r7, #12
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr

08004abe <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004abe:	b480      	push	{r7}
 8004ac0:	b083      	sub	sp, #12
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004ac6:	bf00      	nop
 8004ac8:	370c      	adds	r7, #12
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b083      	sub	sp, #12
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004ada:	bf00      	nop
 8004adc:	370c      	adds	r7, #12
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr

08004ae6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	b083      	sub	sp, #12
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004aee:	bf00      	nop
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr

08004afa <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004afa:	b480      	push	{r7}
 8004afc:	b083      	sub	sp, #12
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004b02:	bf00      	nop
 8004b04:	370c      	adds	r7, #12
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr

08004b0e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004b0e:	b480      	push	{r7}
 8004b10:	b083      	sub	sp, #12
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004b16:	bf00      	nop
 8004b18:	370c      	adds	r7, #12
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr

08004b22 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004b22:	b480      	push	{r7}
 8004b24:	b083      	sub	sp, #12
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004b2a:	bf00      	nop
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004b36:	b480      	push	{r7}
 8004b38:	b083      	sub	sp, #12
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004b3e:	bf00      	nop
 8004b40:	370c      	adds	r7, #12
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr

08004b4a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004b4a:	b480      	push	{r7}
 8004b4c:	b083      	sub	sp, #12
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004b52:	bf00      	nop
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
	...

08004b60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b085      	sub	sp, #20
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f003 0307 	and.w	r3, r3, #7
 8004b6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b70:	4b0b      	ldr	r3, [pc, #44]	; (8004ba0 <__NVIC_SetPriorityGrouping+0x40>)
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b76:	68ba      	ldr	r2, [r7, #8]
 8004b78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004b88:	4b06      	ldr	r3, [pc, #24]	; (8004ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b8e:	4a04      	ldr	r2, [pc, #16]	; (8004ba0 <__NVIC_SetPriorityGrouping+0x40>)
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	60d3      	str	r3, [r2, #12]
}
 8004b94:	bf00      	nop
 8004b96:	3714      	adds	r7, #20
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr
 8004ba0:	e000ed00 	.word	0xe000ed00
 8004ba4:	05fa0000 	.word	0x05fa0000

08004ba8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bac:	4b04      	ldr	r3, [pc, #16]	; (8004bc0 <__NVIC_GetPriorityGrouping+0x18>)
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	0a1b      	lsrs	r3, r3, #8
 8004bb2:	f003 0307 	and.w	r3, r3, #7
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr
 8004bc0:	e000ed00 	.word	0xe000ed00

08004bc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	4603      	mov	r3, r0
 8004bcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	db0b      	blt.n	8004bee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bd6:	79fb      	ldrb	r3, [r7, #7]
 8004bd8:	f003 021f 	and.w	r2, r3, #31
 8004bdc:	4907      	ldr	r1, [pc, #28]	; (8004bfc <__NVIC_EnableIRQ+0x38>)
 8004bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004be2:	095b      	lsrs	r3, r3, #5
 8004be4:	2001      	movs	r0, #1
 8004be6:	fa00 f202 	lsl.w	r2, r0, r2
 8004bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004bee:	bf00      	nop
 8004bf0:	370c      	adds	r7, #12
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	e000e100 	.word	0xe000e100

08004c00 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	4603      	mov	r3, r0
 8004c08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	db10      	blt.n	8004c34 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c12:	79fb      	ldrb	r3, [r7, #7]
 8004c14:	f003 021f 	and.w	r2, r3, #31
 8004c18:	4909      	ldr	r1, [pc, #36]	; (8004c40 <__NVIC_DisableIRQ+0x40>)
 8004c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c1e:	095b      	lsrs	r3, r3, #5
 8004c20:	2001      	movs	r0, #1
 8004c22:	fa00 f202 	lsl.w	r2, r0, r2
 8004c26:	3320      	adds	r3, #32
 8004c28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004c2c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004c30:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8004c34:	bf00      	nop
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr
 8004c40:	e000e100 	.word	0xe000e100

08004c44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	6039      	str	r1, [r7, #0]
 8004c4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	db0a      	blt.n	8004c6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	b2da      	uxtb	r2, r3
 8004c5c:	490c      	ldr	r1, [pc, #48]	; (8004c90 <__NVIC_SetPriority+0x4c>)
 8004c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c62:	0112      	lsls	r2, r2, #4
 8004c64:	b2d2      	uxtb	r2, r2
 8004c66:	440b      	add	r3, r1
 8004c68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c6c:	e00a      	b.n	8004c84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	b2da      	uxtb	r2, r3
 8004c72:	4908      	ldr	r1, [pc, #32]	; (8004c94 <__NVIC_SetPriority+0x50>)
 8004c74:	79fb      	ldrb	r3, [r7, #7]
 8004c76:	f003 030f 	and.w	r3, r3, #15
 8004c7a:	3b04      	subs	r3, #4
 8004c7c:	0112      	lsls	r2, r2, #4
 8004c7e:	b2d2      	uxtb	r2, r2
 8004c80:	440b      	add	r3, r1
 8004c82:	761a      	strb	r2, [r3, #24]
}
 8004c84:	bf00      	nop
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr
 8004c90:	e000e100 	.word	0xe000e100
 8004c94:	e000ed00 	.word	0xe000ed00

08004c98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b089      	sub	sp, #36	; 0x24
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f003 0307 	and.w	r3, r3, #7
 8004caa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	f1c3 0307 	rsb	r3, r3, #7
 8004cb2:	2b04      	cmp	r3, #4
 8004cb4:	bf28      	it	cs
 8004cb6:	2304      	movcs	r3, #4
 8004cb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	3304      	adds	r3, #4
 8004cbe:	2b06      	cmp	r3, #6
 8004cc0:	d902      	bls.n	8004cc8 <NVIC_EncodePriority+0x30>
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	3b03      	subs	r3, #3
 8004cc6:	e000      	b.n	8004cca <NVIC_EncodePriority+0x32>
 8004cc8:	2300      	movs	r3, #0
 8004cca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd6:	43da      	mvns	r2, r3
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	401a      	ands	r2, r3
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ce0:	f04f 31ff 	mov.w	r1, #4294967295
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8004cea:	43d9      	mvns	r1, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cf0:	4313      	orrs	r3, r2
         );
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3724      	adds	r7, #36	; 0x24
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr

08004cfe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cfe:	b580      	push	{r7, lr}
 8004d00:	b082      	sub	sp, #8
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f7ff ff2a 	bl	8004b60 <__NVIC_SetPriorityGrouping>
}
 8004d0c:	bf00      	nop
 8004d0e:	3708      	adds	r7, #8
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b086      	sub	sp, #24
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	607a      	str	r2, [r7, #4]
 8004d20:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004d22:	2300      	movs	r3, #0
 8004d24:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d26:	f7ff ff3f 	bl	8004ba8 <__NVIC_GetPriorityGrouping>
 8004d2a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	68b9      	ldr	r1, [r7, #8]
 8004d30:	6978      	ldr	r0, [r7, #20]
 8004d32:	f7ff ffb1 	bl	8004c98 <NVIC_EncodePriority>
 8004d36:	4602      	mov	r2, r0
 8004d38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d3c:	4611      	mov	r1, r2
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7ff ff80 	bl	8004c44 <__NVIC_SetPriority>
}
 8004d44:	bf00      	nop
 8004d46:	3718      	adds	r7, #24
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	4603      	mov	r3, r0
 8004d54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7ff ff32 	bl	8004bc4 <__NVIC_EnableIRQ>
}
 8004d60:	bf00      	nop
 8004d62:	3708      	adds	r7, #8
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	4603      	mov	r3, r0
 8004d70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7ff ff42 	bl	8004c00 <__NVIC_DisableIRQ>
}
 8004d7c:	bf00      	nop
 8004d7e:	3708      	adds	r7, #8
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e054      	b.n	8004e40 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	7f5b      	ldrb	r3, [r3, #29]
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d105      	bne.n	8004dac <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f7fd fe62 	bl	8002a70 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2202      	movs	r2, #2
 8004db0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	791b      	ldrb	r3, [r3, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d10c      	bne.n	8004dd4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a22      	ldr	r2, [pc, #136]	; (8004e48 <HAL_CRC_Init+0xc4>)
 8004dc0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	689a      	ldr	r2, [r3, #8]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f022 0218 	bic.w	r2, r2, #24
 8004dd0:	609a      	str	r2, [r3, #8]
 8004dd2:	e00c      	b.n	8004dee <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6899      	ldr	r1, [r3, #8]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	461a      	mov	r2, r3
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 f834 	bl	8004e4c <HAL_CRCEx_Polynomial_Set>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d001      	beq.n	8004dee <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e028      	b.n	8004e40 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	795b      	ldrb	r3, [r3, #5]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d105      	bne.n	8004e02 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f04f 32ff 	mov.w	r2, #4294967295
 8004dfe:	611a      	str	r2, [r3, #16]
 8004e00:	e004      	b.n	8004e0c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	6912      	ldr	r2, [r2, #16]
 8004e0a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	695a      	ldr	r2, [r3, #20]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	430a      	orrs	r2, r1
 8004e20:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	699a      	ldr	r2, [r3, #24]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	430a      	orrs	r2, r1
 8004e36:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3708      	adds	r7, #8
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	04c11db7 	.word	0x04c11db7

08004e4c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b087      	sub	sp, #28
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004e5c:	231f      	movs	r3, #31
 8004e5e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004e60:	bf00      	nop
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	1e5a      	subs	r2, r3, #1
 8004e66:	613a      	str	r2, [r7, #16]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d009      	beq.n	8004e80 <HAL_CRCEx_Polynomial_Set+0x34>
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	f003 031f 	and.w	r3, r3, #31
 8004e72:	68ba      	ldr	r2, [r7, #8]
 8004e74:	fa22 f303 	lsr.w	r3, r2, r3
 8004e78:	f003 0301 	and.w	r3, r3, #1
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d0f0      	beq.n	8004e62 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2b18      	cmp	r3, #24
 8004e84:	d846      	bhi.n	8004f14 <HAL_CRCEx_Polynomial_Set+0xc8>
 8004e86:	a201      	add	r2, pc, #4	; (adr r2, 8004e8c <HAL_CRCEx_Polynomial_Set+0x40>)
 8004e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8c:	08004f1b 	.word	0x08004f1b
 8004e90:	08004f15 	.word	0x08004f15
 8004e94:	08004f15 	.word	0x08004f15
 8004e98:	08004f15 	.word	0x08004f15
 8004e9c:	08004f15 	.word	0x08004f15
 8004ea0:	08004f15 	.word	0x08004f15
 8004ea4:	08004f15 	.word	0x08004f15
 8004ea8:	08004f15 	.word	0x08004f15
 8004eac:	08004f09 	.word	0x08004f09
 8004eb0:	08004f15 	.word	0x08004f15
 8004eb4:	08004f15 	.word	0x08004f15
 8004eb8:	08004f15 	.word	0x08004f15
 8004ebc:	08004f15 	.word	0x08004f15
 8004ec0:	08004f15 	.word	0x08004f15
 8004ec4:	08004f15 	.word	0x08004f15
 8004ec8:	08004f15 	.word	0x08004f15
 8004ecc:	08004efd 	.word	0x08004efd
 8004ed0:	08004f15 	.word	0x08004f15
 8004ed4:	08004f15 	.word	0x08004f15
 8004ed8:	08004f15 	.word	0x08004f15
 8004edc:	08004f15 	.word	0x08004f15
 8004ee0:	08004f15 	.word	0x08004f15
 8004ee4:	08004f15 	.word	0x08004f15
 8004ee8:	08004f15 	.word	0x08004f15
 8004eec:	08004ef1 	.word	0x08004ef1
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	2b06      	cmp	r3, #6
 8004ef4:	d913      	bls.n	8004f1e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004efa:	e010      	b.n	8004f1e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	2b07      	cmp	r3, #7
 8004f00:	d90f      	bls.n	8004f22 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004f06:	e00c      	b.n	8004f22 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	2b0f      	cmp	r3, #15
 8004f0c:	d90b      	bls.n	8004f26 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004f12:	e008      	b.n	8004f26 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	75fb      	strb	r3, [r7, #23]
      break;
 8004f18:	e006      	b.n	8004f28 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004f1a:	bf00      	nop
 8004f1c:	e004      	b.n	8004f28 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004f1e:	bf00      	nop
 8004f20:	e002      	b.n	8004f28 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004f22:	bf00      	nop
 8004f24:	e000      	b.n	8004f28 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004f26:	bf00      	nop
  }
  if (status == HAL_OK)
 8004f28:	7dfb      	ldrb	r3, [r7, #23]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d10d      	bne.n	8004f4a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	f023 0118 	bic.w	r1, r3, #24
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	430a      	orrs	r2, r1
 8004f48:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004f4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	371c      	adds	r7, #28
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d101      	bne.n	8004f6a <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e069      	b.n	800503e <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d102      	bne.n	8004f7c <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f7fd fd9a 	bl	8002ab0 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2202      	movs	r2, #2
 8004f80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d002      	beq.n	8004f92 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	6819      	ldr	r1, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	4b2a      	ldr	r3, [pc, #168]	; (8005048 <HAL_DCMI_Init+0xf0>)
 8004f9e:	400b      	ands	r3, r1
 8004fa0:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	6819      	ldr	r1, [r3, #0]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685a      	ldr	r2, [r3, #4]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	695b      	ldr	r3, [r3, #20]
 8004fb0:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004fb6:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004fc2:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004fce:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd4:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004fda:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe0:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004fe6:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	430a      	orrs	r2, r1
 8004fee:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	2b10      	cmp	r3, #16
 8004ff6:	d112      	bne.n	800501e <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	7f1b      	ldrb	r3, [r3, #28]
 8004ffc:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	7f5b      	ldrb	r3, [r3, #29]
 8005002:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005004:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	7f9b      	ldrb	r3, [r3, #30]
 800500a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800500c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	7fdb      	ldrb	r3, [r3, #31]
 8005014:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800501a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800501c:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	68da      	ldr	r2, [r3, #12]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f042 021e 	orr.w	r2, r2, #30
 800502c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3708      	adds	r7, #8
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	ffe0f007 	.word	0xffe0f007

0800504c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b086      	sub	sp, #24
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	607a      	str	r2, [r7, #4]
 8005058:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800505a:	2300      	movs	r3, #0
 800505c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005062:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800506a:	2b01      	cmp	r3, #1
 800506c:	d101      	bne.n	8005072 <HAL_DMA_Start_IT+0x26>
 800506e:	2302      	movs	r3, #2
 8005070:	e048      	b.n	8005104 <HAL_DMA_Start_IT+0xb8>
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b01      	cmp	r3, #1
 8005084:	d137      	bne.n	80050f6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2202      	movs	r2, #2
 800508a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	68b9      	ldr	r1, [r7, #8]
 800509a:	68f8      	ldr	r0, [r7, #12]
 800509c:	f000 f842 	bl	8005124 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050a4:	223f      	movs	r2, #63	; 0x3f
 80050a6:	409a      	lsls	r2, r3
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f042 0216 	orr.w	r2, r2, #22
 80050ba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	695a      	ldr	r2, [r3, #20]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80050ca:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d007      	beq.n	80050e4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f042 0208 	orr.w	r2, r2, #8
 80050e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f042 0201 	orr.w	r2, r2, #1
 80050f2:	601a      	str	r2, [r3, #0]
 80050f4:	e005      	b.n	8005102 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80050fe:	2302      	movs	r3, #2
 8005100:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005102:	7dfb      	ldrb	r3, [r7, #23]
}
 8005104:	4618      	mov	r0, r3
 8005106:	3718      	adds	r7, #24
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005118:	4618      	mov	r0, r3
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	607a      	str	r2, [r7, #4]
 8005130:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005140:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	683a      	ldr	r2, [r7, #0]
 8005148:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	2b40      	cmp	r3, #64	; 0x40
 8005150:	d108      	bne.n	8005164 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005162:	e007      	b.n	8005174 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68ba      	ldr	r2, [r7, #8]
 800516a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	60da      	str	r2, [r3, #12]
}
 8005174:	bf00      	nop
 8005176:	3714      	adds	r7, #20
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d101      	bne.n	8005192 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e039      	b.n	8005206 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d106      	bne.n	80051ac <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f7fd fd40 	bl	8002c2c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2202      	movs	r2, #2
 80051b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685a      	ldr	r2, [r3, #4]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	430a      	orrs	r2, r1
 80051c8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051d0:	f023 0107 	bic.w	r1, r3, #7
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	689a      	ldr	r2, [r3, #8]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	430a      	orrs	r2, r1
 80051de:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051e6:	4b0a      	ldr	r3, [pc, #40]	; (8005210 <HAL_DMA2D_Init+0x90>)
 80051e8:	4013      	ands	r3, r2
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	68d1      	ldr	r1, [r2, #12]
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	6812      	ldr	r2, [r2, #0]
 80051f2:	430b      	orrs	r3, r1
 80051f4:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3708      	adds	r7, #8
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	ffffc000 	.word	0xffffc000

08005214 <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b082      	sub	sp, #8
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d101      	bne.n	8005226 <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e05f      	b.n	80052e6 <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 8005226:	4b32      	ldr	r3, [pc, #200]	; (80052f0 <HAL_DMA2D_DeInit+0xdc>)
 8005228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800522a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d02e      	beq.n	8005290 <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0301 	and.w	r3, r3, #1
 800523c:	2b01      	cmp	r3, #1
 800523e:	d107      	bne.n	8005250 <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 f8c1 	bl	80053c8 <HAL_DMA2D_Abort>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d021      	beq.n	8005290 <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e04a      	b.n	80052e6 <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005256:	f003 0320 	and.w	r3, r3, #32
 800525a:	2b20      	cmp	r3, #32
 800525c:	d108      	bne.n	8005270 <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 800525e:	2100      	movs	r1, #0
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 f8f7 	bl	8005454 <HAL_DMA2D_CLUTLoading_Abort>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d011      	beq.n	8005290 <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e03a      	b.n	80052e6 <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	69db      	ldr	r3, [r3, #28]
 8005276:	f003 0320 	and.w	r3, r3, #32
 800527a:	2b20      	cmp	r3, #32
 800527c:	d108      	bne.n	8005290 <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 800527e:	2101      	movs	r1, #1
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 f8e7 	bl	8005454 <HAL_DMA2D_CLUTLoading_Abort>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d001      	beq.n	8005290 <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e02a      	b.n	80052e6 <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2200      	movs	r2, #0
 8005296:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	223f      	movs	r2, #63	; 0x3f
 800529e:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2200      	movs	r2, #0
 80052a6:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2200      	movs	r2, #0
 80052ae:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2200      	movs	r2, #0
 80052b6:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2200      	movs	r2, #0
 80052be:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2200      	movs	r2, #0
 80052c6:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f7fd fcd5 	bl	8002c78 <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3708      	adds	r7, #8
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	40023800 	.word	0x40023800

080052f4 <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b086      	sub	sp, #24
 80052f8:	af02      	add	r7, sp, #8
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	607a      	str	r2, [r7, #4]
 8005300:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005308:	2b01      	cmp	r3, #1
 800530a:	d101      	bne.n	8005310 <HAL_DMA2D_Start_IT+0x1c>
 800530c:	2302      	movs	r3, #2
 800530e:	e020      	b.n	8005352 <HAL_DMA2D_Start_IT+0x5e>
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2202      	movs	r2, #2
 800531c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	9300      	str	r3, [sp, #0]
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	68b9      	ldr	r1, [r7, #8]
 800532a:	68f8      	ldr	r0, [r7, #12]
 800532c:	f000 fa84 	bl	8005838 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 800533e:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f042 0201 	orr.w	r2, r2, #1
 800534e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3710      	adds	r7, #16
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}

0800535a <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800535a:	b580      	push	{r7, lr}
 800535c:	b086      	sub	sp, #24
 800535e:	af02      	add	r7, sp, #8
 8005360:	60f8      	str	r0, [r7, #12]
 8005362:	60b9      	str	r1, [r7, #8]
 8005364:	607a      	str	r2, [r7, #4]
 8005366:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800536e:	2b01      	cmp	r3, #1
 8005370:	d101      	bne.n	8005376 <HAL_DMA2D_BlendingStart_IT+0x1c>
 8005372:	2302      	movs	r3, #2
 8005374:	e024      	b.n	80053c0 <HAL_DMA2D_BlendingStart_IT+0x66>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2201      	movs	r2, #1
 800537a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2202      	movs	r2, #2
 8005382:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	9300      	str	r3, [sp, #0]
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	683a      	ldr	r2, [r7, #0]
 8005396:	68b9      	ldr	r1, [r7, #8]
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f000 fa4d 	bl	8005838 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 80053ac:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f042 0201 	orr.w	r2, r2, #1
 80053bc:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3710      	adds	r7, #16
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f023 0205 	bic.w	r2, r3, #5
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f042 0204 	orr.w	r2, r2, #4
 80053e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80053e4:	f7fe fb84 	bl	8003af0 <HAL_GetTick>
 80053e8:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80053ea:	e017      	b.n	800541c <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 80053ec:	f7fe fb80 	bl	8003af0 <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053fa:	d90f      	bls.n	800541c <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005400:	f043 0220 	orr.w	r2, r3, #32
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2203      	movs	r2, #3
 800540c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e017      	b.n	800544c <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 0301 	and.w	r3, r3, #1
 8005426:	2b00      	cmp	r3, #0
 8005428:	d1e0      	bne.n	80053ec <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 8005438:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2201      	movs	r2, #1
 800543e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800544a:	2300      	movs	r3, #0
}
 800544c:	4618      	mov	r0, r3
 800544e:	3710      	adds	r7, #16
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	3324      	adds	r3, #36	; 0x24
 8005464:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f042 0204 	orr.w	r2, r2, #4
 8005474:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	2b01      	cmp	r3, #1
 800547a:	d103      	bne.n	8005484 <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	331c      	adds	r3, #28
 8005482:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 8005484:	f7fe fb34 	bl	8003af0 <HAL_GetTick>
 8005488:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 800548a:	e017      	b.n	80054bc <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 800548c:	f7fe fb30 	bl	8003af0 <HAL_GetTick>
 8005490:	4602      	mov	r2, r0
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800549a:	d90f      	bls.n	80054bc <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054a0:	f043 0220 	orr.w	r2, r3, #32
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2203      	movs	r2, #3
 80054ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	e016      	b.n	80054ea <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0320 	and.w	r3, r3, #32
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1e1      	bne.n	800548c <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 80054d6:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3710      	adds	r7, #16
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80054f2:	b580      	push	{r7, lr}
 80054f4:	b084      	sub	sp, #16
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f003 0301 	and.w	r3, r3, #1
 8005510:	2b00      	cmp	r3, #0
 8005512:	d026      	beq.n	8005562 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800551a:	2b00      	cmp	r3, #0
 800551c:	d021      	beq.n	8005562 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800552c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005532:	f043 0201 	orr.w	r2, r3, #1
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2201      	movs	r2, #1
 8005540:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2204      	movs	r2, #4
 8005546:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	695b      	ldr	r3, [r3, #20]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d003      	beq.n	8005562 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f003 0320 	and.w	r3, r3, #32
 8005568:	2b00      	cmp	r3, #0
 800556a:	d026      	beq.n	80055ba <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005572:	2b00      	cmp	r3, #0
 8005574:	d021      	beq.n	80055ba <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005584:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2220      	movs	r2, #32
 800558c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005592:	f043 0202 	orr.w	r2, r3, #2
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2204      	movs	r2, #4
 800559e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	695b      	ldr	r3, [r3, #20]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d003      	beq.n	80055ba <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	695b      	ldr	r3, [r3, #20]
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f003 0308 	and.w	r3, r3, #8
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d026      	beq.n	8005612 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d021      	beq.n	8005612 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055dc:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2208      	movs	r2, #8
 80055e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ea:	f043 0204 	orr.w	r2, r3, #4
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2204      	movs	r2, #4
 80055f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	695b      	ldr	r3, [r3, #20]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d003      	beq.n	8005612 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f003 0304 	and.w	r3, r3, #4
 8005618:	2b00      	cmp	r3, #0
 800561a:	d013      	beq.n	8005644 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00e      	beq.n	8005644 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005634:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2204      	movs	r2, #4
 800563c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f853 	bl	80056ea <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f003 0302 	and.w	r3, r3, #2
 800564a:	2b00      	cmp	r3, #0
 800564c:	d024      	beq.n	8005698 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005654:	2b00      	cmp	r3, #0
 8005656:	d01f      	beq.n	8005698 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005666:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2202      	movs	r2, #2
 800566e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d003      	beq.n	8005698 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f003 0310 	and.w	r3, r3, #16
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d01f      	beq.n	80056e2 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d01a      	beq.n	80056e2 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80056ba:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2210      	movs	r2, #16
 80056c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 f80e 	bl	80056fe <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80056e2:	bf00      	nop
 80056e4:	3710      	adds	r7, #16
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}

080056ea <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80056ea:	b480      	push	{r7}
 80056ec:	b083      	sub	sp, #12
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80056f2:	bf00      	nop
 80056f4:	370c      	adds	r7, #12
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr

080056fe <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80056fe:	b480      	push	{r7}
 8005700:	b083      	sub	sp, #12
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8005706:	bf00      	nop
 8005708:	370c      	adds	r7, #12
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
	...

08005714 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005714:	b480      	push	{r7}
 8005716:	b087      	sub	sp, #28
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800572c:	2b01      	cmp	r3, #1
 800572e:	d101      	bne.n	8005734 <HAL_DMA2D_ConfigLayer+0x20>
 8005730:	2302      	movs	r3, #2
 8005732:	e079      	b.n	8005828 <HAL_DMA2D_ConfigLayer+0x114>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2202      	movs	r2, #2
 8005740:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	011b      	lsls	r3, r3, #4
 8005748:	3318      	adds	r3, #24
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	4413      	add	r3, r2
 800574e:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	685a      	ldr	r2, [r3, #4]
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	041b      	lsls	r3, r3, #16
 800575a:	4313      	orrs	r3, r2
 800575c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800575e:	4b35      	ldr	r3, [pc, #212]	; (8005834 <HAL_DMA2D_ConfigLayer+0x120>)
 8005760:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	2b0a      	cmp	r3, #10
 8005768:	d003      	beq.n	8005772 <HAL_DMA2D_ConfigLayer+0x5e>
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	2b09      	cmp	r3, #9
 8005770:	d107      	bne.n	8005782 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	4313      	orrs	r3, r2
 800577e:	617b      	str	r3, [r7, #20]
 8005780:	e005      	b.n	800578e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	061b      	lsls	r3, r3, #24
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	4313      	orrs	r3, r2
 800578c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d120      	bne.n	80057d6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	43db      	mvns	r3, r3
 800579e:	ea02 0103 	and.w	r1, r2, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	697a      	ldr	r2, [r7, #20]
 80057a8:	430a      	orrs	r2, r1
 80057aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	693a      	ldr	r2, [r7, #16]
 80057b2:	6812      	ldr	r2, [r2, #0]
 80057b4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	2b0a      	cmp	r3, #10
 80057bc:	d003      	beq.n	80057c6 <HAL_DMA2D_ConfigLayer+0xb2>
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	2b09      	cmp	r3, #9
 80057c4:	d127      	bne.n	8005816 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	68da      	ldr	r2, [r3, #12]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80057d2:	629a      	str	r2, [r3, #40]	; 0x28
 80057d4:	e01f      	b.n	8005816 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	69da      	ldr	r2, [r3, #28]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	43db      	mvns	r3, r3
 80057e0:	ea02 0103 	and.w	r1, r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	697a      	ldr	r2, [r7, #20]
 80057ea:	430a      	orrs	r2, r1
 80057ec:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	693a      	ldr	r2, [r7, #16]
 80057f4:	6812      	ldr	r2, [r2, #0]
 80057f6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	2b0a      	cmp	r3, #10
 80057fe:	d003      	beq.n	8005808 <HAL_DMA2D_ConfigLayer+0xf4>
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	2b09      	cmp	r3, #9
 8005806:	d106      	bne.n	8005816 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	68da      	ldr	r2, [r3, #12]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005814:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2201      	movs	r2, #1
 800581a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	371c      	adds	r7, #28
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr
 8005834:	ff03000f 	.word	0xff03000f

08005838 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8005838:	b480      	push	{r7}
 800583a:	b08b      	sub	sp, #44	; 0x2c
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	607a      	str	r2, [r7, #4]
 8005844:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800584c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	041a      	lsls	r2, r3, #16
 8005854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005856:	431a      	orrs	r2, r3
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	430a      	orrs	r2, r1
 800585e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005870:	d174      	bne.n	800595c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005878:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005880:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005888:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	b2db      	uxtb	r3, r3
 800588e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d108      	bne.n	80058aa <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8005898:	69ba      	ldr	r2, [r7, #24]
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	431a      	orrs	r2, r3
 800589e:	6a3b      	ldr	r3, [r7, #32]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	697a      	ldr	r2, [r7, #20]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	627b      	str	r3, [r7, #36]	; 0x24
 80058a8:	e053      	b.n	8005952 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d106      	bne.n	80058c0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80058b2:	69ba      	ldr	r2, [r7, #24]
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	697a      	ldr	r2, [r7, #20]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	627b      	str	r3, [r7, #36]	; 0x24
 80058be:	e048      	b.n	8005952 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d111      	bne.n	80058ec <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	0cdb      	lsrs	r3, r3, #19
 80058cc:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	0a9b      	lsrs	r3, r3, #10
 80058d2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	08db      	lsrs	r3, r3, #3
 80058d8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	015a      	lsls	r2, r3, #5
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	02db      	lsls	r3, r3, #11
 80058e2:	4313      	orrs	r3, r2
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	627b      	str	r3, [r7, #36]	; 0x24
 80058ea:	e032      	b.n	8005952 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	2b03      	cmp	r3, #3
 80058f2:	d117      	bne.n	8005924 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80058f4:	6a3b      	ldr	r3, [r7, #32]
 80058f6:	0fdb      	lsrs	r3, r3, #31
 80058f8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	0cdb      	lsrs	r3, r3, #19
 80058fe:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	0adb      	lsrs	r3, r3, #11
 8005904:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	08db      	lsrs	r3, r3, #3
 800590a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	015a      	lsls	r2, r3, #5
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	029b      	lsls	r3, r3, #10
 8005914:	431a      	orrs	r2, r3
 8005916:	6a3b      	ldr	r3, [r7, #32]
 8005918:	03db      	lsls	r3, r3, #15
 800591a:	4313      	orrs	r3, r2
 800591c:	697a      	ldr	r2, [r7, #20]
 800591e:	4313      	orrs	r3, r2
 8005920:	627b      	str	r3, [r7, #36]	; 0x24
 8005922:	e016      	b.n	8005952 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005924:	6a3b      	ldr	r3, [r7, #32]
 8005926:	0f1b      	lsrs	r3, r3, #28
 8005928:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	0d1b      	lsrs	r3, r3, #20
 800592e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	0b1b      	lsrs	r3, r3, #12
 8005934:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	091b      	lsrs	r3, r3, #4
 800593a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	011a      	lsls	r2, r3, #4
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	021b      	lsls	r3, r3, #8
 8005944:	431a      	orrs	r2, r3
 8005946:	6a3b      	ldr	r3, [r7, #32]
 8005948:	031b      	lsls	r3, r3, #12
 800594a:	4313      	orrs	r3, r2
 800594c:	697a      	ldr	r2, [r7, #20]
 800594e:	4313      	orrs	r3, r2
 8005950:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005958:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800595a:	e003      	b.n	8005964 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68ba      	ldr	r2, [r7, #8]
 8005962:	60da      	str	r2, [r3, #12]
}
 8005964:	bf00      	nop
 8005966:	372c      	adds	r7, #44	; 0x2c
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005970:	b480      	push	{r7}
 8005972:	b089      	sub	sp, #36	; 0x24
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800597a:	2300      	movs	r3, #0
 800597c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800597e:	2300      	movs	r3, #0
 8005980:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005982:	2300      	movs	r3, #0
 8005984:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005986:	2300      	movs	r3, #0
 8005988:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800598a:	2300      	movs	r3, #0
 800598c:	61fb      	str	r3, [r7, #28]
 800598e:	e175      	b.n	8005c7c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005990:	2201      	movs	r2, #1
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	fa02 f303 	lsl.w	r3, r2, r3
 8005998:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	4013      	ands	r3, r2
 80059a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80059a4:	693a      	ldr	r2, [r7, #16]
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	f040 8164 	bne.w	8005c76 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d00b      	beq.n	80059ce <HAL_GPIO_Init+0x5e>
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	2b02      	cmp	r3, #2
 80059bc:	d007      	beq.n	80059ce <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80059c2:	2b11      	cmp	r3, #17
 80059c4:	d003      	beq.n	80059ce <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	2b12      	cmp	r3, #18
 80059cc:	d130      	bne.n	8005a30 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	005b      	lsls	r3, r3, #1
 80059d8:	2203      	movs	r2, #3
 80059da:	fa02 f303 	lsl.w	r3, r2, r3
 80059de:	43db      	mvns	r3, r3
 80059e0:	69ba      	ldr	r2, [r7, #24]
 80059e2:	4013      	ands	r3, r2
 80059e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	68da      	ldr	r2, [r3, #12]
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	005b      	lsls	r3, r3, #1
 80059ee:	fa02 f303 	lsl.w	r3, r2, r3
 80059f2:	69ba      	ldr	r2, [r7, #24]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	69ba      	ldr	r2, [r7, #24]
 80059fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005a04:	2201      	movs	r2, #1
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0c:	43db      	mvns	r3, r3
 8005a0e:	69ba      	ldr	r2, [r7, #24]
 8005a10:	4013      	ands	r3, r2
 8005a12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	091b      	lsrs	r3, r3, #4
 8005a1a:	f003 0201 	and.w	r2, r3, #1
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	fa02 f303 	lsl.w	r3, r2, r3
 8005a24:	69ba      	ldr	r2, [r7, #24]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	69ba      	ldr	r2, [r7, #24]
 8005a2e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	005b      	lsls	r3, r3, #1
 8005a3a:	2203      	movs	r2, #3
 8005a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a40:	43db      	mvns	r3, r3
 8005a42:	69ba      	ldr	r2, [r7, #24]
 8005a44:	4013      	ands	r3, r2
 8005a46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	689a      	ldr	r2, [r3, #8]
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	005b      	lsls	r3, r3, #1
 8005a50:	fa02 f303 	lsl.w	r3, r2, r3
 8005a54:	69ba      	ldr	r2, [r7, #24]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	69ba      	ldr	r2, [r7, #24]
 8005a5e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	2b02      	cmp	r3, #2
 8005a66:	d003      	beq.n	8005a70 <HAL_GPIO_Init+0x100>
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	2b12      	cmp	r3, #18
 8005a6e:	d123      	bne.n	8005ab8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	08da      	lsrs	r2, r3, #3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	3208      	adds	r2, #8
 8005a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	f003 0307 	and.w	r3, r3, #7
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	220f      	movs	r2, #15
 8005a88:	fa02 f303 	lsl.w	r3, r2, r3
 8005a8c:	43db      	mvns	r3, r3
 8005a8e:	69ba      	ldr	r2, [r7, #24]
 8005a90:	4013      	ands	r3, r2
 8005a92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	691a      	ldr	r2, [r3, #16]
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	f003 0307 	and.w	r3, r3, #7
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa4:	69ba      	ldr	r2, [r7, #24]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	08da      	lsrs	r2, r3, #3
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	3208      	adds	r2, #8
 8005ab2:	69b9      	ldr	r1, [r7, #24]
 8005ab4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	005b      	lsls	r3, r3, #1
 8005ac2:	2203      	movs	r2, #3
 8005ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac8:	43db      	mvns	r3, r3
 8005aca:	69ba      	ldr	r2, [r7, #24]
 8005acc:	4013      	ands	r3, r2
 8005ace:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	f003 0203 	and.w	r2, r3, #3
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	005b      	lsls	r3, r3, #1
 8005adc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae0:	69ba      	ldr	r2, [r7, #24]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	69ba      	ldr	r2, [r7, #24]
 8005aea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	f000 80be 	beq.w	8005c76 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005afa:	4b65      	ldr	r3, [pc, #404]	; (8005c90 <HAL_GPIO_Init+0x320>)
 8005afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005afe:	4a64      	ldr	r2, [pc, #400]	; (8005c90 <HAL_GPIO_Init+0x320>)
 8005b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b04:	6453      	str	r3, [r2, #68]	; 0x44
 8005b06:	4b62      	ldr	r3, [pc, #392]	; (8005c90 <HAL_GPIO_Init+0x320>)
 8005b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b0e:	60fb      	str	r3, [r7, #12]
 8005b10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005b12:	4a60      	ldr	r2, [pc, #384]	; (8005c94 <HAL_GPIO_Init+0x324>)
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	089b      	lsrs	r3, r3, #2
 8005b18:	3302      	adds	r3, #2
 8005b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	f003 0303 	and.w	r3, r3, #3
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	220f      	movs	r2, #15
 8005b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b2e:	43db      	mvns	r3, r3
 8005b30:	69ba      	ldr	r2, [r7, #24]
 8005b32:	4013      	ands	r3, r2
 8005b34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a57      	ldr	r2, [pc, #348]	; (8005c98 <HAL_GPIO_Init+0x328>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d037      	beq.n	8005bae <HAL_GPIO_Init+0x23e>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a56      	ldr	r2, [pc, #344]	; (8005c9c <HAL_GPIO_Init+0x32c>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d031      	beq.n	8005baa <HAL_GPIO_Init+0x23a>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a55      	ldr	r2, [pc, #340]	; (8005ca0 <HAL_GPIO_Init+0x330>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d02b      	beq.n	8005ba6 <HAL_GPIO_Init+0x236>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a54      	ldr	r2, [pc, #336]	; (8005ca4 <HAL_GPIO_Init+0x334>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d025      	beq.n	8005ba2 <HAL_GPIO_Init+0x232>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a53      	ldr	r2, [pc, #332]	; (8005ca8 <HAL_GPIO_Init+0x338>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d01f      	beq.n	8005b9e <HAL_GPIO_Init+0x22e>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a52      	ldr	r2, [pc, #328]	; (8005cac <HAL_GPIO_Init+0x33c>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d019      	beq.n	8005b9a <HAL_GPIO_Init+0x22a>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a51      	ldr	r2, [pc, #324]	; (8005cb0 <HAL_GPIO_Init+0x340>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d013      	beq.n	8005b96 <HAL_GPIO_Init+0x226>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a50      	ldr	r2, [pc, #320]	; (8005cb4 <HAL_GPIO_Init+0x344>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d00d      	beq.n	8005b92 <HAL_GPIO_Init+0x222>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a4f      	ldr	r2, [pc, #316]	; (8005cb8 <HAL_GPIO_Init+0x348>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d007      	beq.n	8005b8e <HAL_GPIO_Init+0x21e>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a4e      	ldr	r2, [pc, #312]	; (8005cbc <HAL_GPIO_Init+0x34c>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d101      	bne.n	8005b8a <HAL_GPIO_Init+0x21a>
 8005b86:	2309      	movs	r3, #9
 8005b88:	e012      	b.n	8005bb0 <HAL_GPIO_Init+0x240>
 8005b8a:	230a      	movs	r3, #10
 8005b8c:	e010      	b.n	8005bb0 <HAL_GPIO_Init+0x240>
 8005b8e:	2308      	movs	r3, #8
 8005b90:	e00e      	b.n	8005bb0 <HAL_GPIO_Init+0x240>
 8005b92:	2307      	movs	r3, #7
 8005b94:	e00c      	b.n	8005bb0 <HAL_GPIO_Init+0x240>
 8005b96:	2306      	movs	r3, #6
 8005b98:	e00a      	b.n	8005bb0 <HAL_GPIO_Init+0x240>
 8005b9a:	2305      	movs	r3, #5
 8005b9c:	e008      	b.n	8005bb0 <HAL_GPIO_Init+0x240>
 8005b9e:	2304      	movs	r3, #4
 8005ba0:	e006      	b.n	8005bb0 <HAL_GPIO_Init+0x240>
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e004      	b.n	8005bb0 <HAL_GPIO_Init+0x240>
 8005ba6:	2302      	movs	r3, #2
 8005ba8:	e002      	b.n	8005bb0 <HAL_GPIO_Init+0x240>
 8005baa:	2301      	movs	r3, #1
 8005bac:	e000      	b.n	8005bb0 <HAL_GPIO_Init+0x240>
 8005bae:	2300      	movs	r3, #0
 8005bb0:	69fa      	ldr	r2, [r7, #28]
 8005bb2:	f002 0203 	and.w	r2, r2, #3
 8005bb6:	0092      	lsls	r2, r2, #2
 8005bb8:	4093      	lsls	r3, r2
 8005bba:	69ba      	ldr	r2, [r7, #24]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005bc0:	4934      	ldr	r1, [pc, #208]	; (8005c94 <HAL_GPIO_Init+0x324>)
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	089b      	lsrs	r3, r3, #2
 8005bc6:	3302      	adds	r3, #2
 8005bc8:	69ba      	ldr	r2, [r7, #24]
 8005bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005bce:	4b3c      	ldr	r3, [pc, #240]	; (8005cc0 <HAL_GPIO_Init+0x350>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	43db      	mvns	r3, r3
 8005bd8:	69ba      	ldr	r2, [r7, #24]
 8005bda:	4013      	ands	r3, r2
 8005bdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d003      	beq.n	8005bf2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005bea:	69ba      	ldr	r2, [r7, #24]
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005bf2:	4a33      	ldr	r2, [pc, #204]	; (8005cc0 <HAL_GPIO_Init+0x350>)
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005bf8:	4b31      	ldr	r3, [pc, #196]	; (8005cc0 <HAL_GPIO_Init+0x350>)
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	43db      	mvns	r3, r3
 8005c02:	69ba      	ldr	r2, [r7, #24]
 8005c04:	4013      	ands	r3, r2
 8005c06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d003      	beq.n	8005c1c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005c14:	69ba      	ldr	r2, [r7, #24]
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005c1c:	4a28      	ldr	r2, [pc, #160]	; (8005cc0 <HAL_GPIO_Init+0x350>)
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005c22:	4b27      	ldr	r3, [pc, #156]	; (8005cc0 <HAL_GPIO_Init+0x350>)
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	43db      	mvns	r3, r3
 8005c2c:	69ba      	ldr	r2, [r7, #24]
 8005c2e:	4013      	ands	r3, r2
 8005c30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d003      	beq.n	8005c46 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005c3e:	69ba      	ldr	r2, [r7, #24]
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005c46:	4a1e      	ldr	r2, [pc, #120]	; (8005cc0 <HAL_GPIO_Init+0x350>)
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005c4c:	4b1c      	ldr	r3, [pc, #112]	; (8005cc0 <HAL_GPIO_Init+0x350>)
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	43db      	mvns	r3, r3
 8005c56:	69ba      	ldr	r2, [r7, #24]
 8005c58:	4013      	ands	r3, r2
 8005c5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d003      	beq.n	8005c70 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005c68:	69ba      	ldr	r2, [r7, #24]
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005c70:	4a13      	ldr	r2, [pc, #76]	; (8005cc0 <HAL_GPIO_Init+0x350>)
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	3301      	adds	r3, #1
 8005c7a:	61fb      	str	r3, [r7, #28]
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	2b0f      	cmp	r3, #15
 8005c80:	f67f ae86 	bls.w	8005990 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005c84:	bf00      	nop
 8005c86:	3724      	adds	r7, #36	; 0x24
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr
 8005c90:	40023800 	.word	0x40023800
 8005c94:	40013800 	.word	0x40013800
 8005c98:	40020000 	.word	0x40020000
 8005c9c:	40020400 	.word	0x40020400
 8005ca0:	40020800 	.word	0x40020800
 8005ca4:	40020c00 	.word	0x40020c00
 8005ca8:	40021000 	.word	0x40021000
 8005cac:	40021400 	.word	0x40021400
 8005cb0:	40021800 	.word	0x40021800
 8005cb4:	40021c00 	.word	0x40021c00
 8005cb8:	40022000 	.word	0x40022000
 8005cbc:	40022400 	.word	0x40022400
 8005cc0:	40013c00 	.word	0x40013c00

08005cc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b085      	sub	sp, #20
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	460b      	mov	r3, r1
 8005cce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	691a      	ldr	r2, [r3, #16]
 8005cd4:	887b      	ldrh	r3, [r7, #2]
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d002      	beq.n	8005ce2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	73fb      	strb	r3, [r7, #15]
 8005ce0:	e001      	b.n	8005ce6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3714      	adds	r7, #20
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	807b      	strh	r3, [r7, #2]
 8005d00:	4613      	mov	r3, r2
 8005d02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005d04:	787b      	ldrb	r3, [r7, #1]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d003      	beq.n	8005d12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d0a:	887a      	ldrh	r2, [r7, #2]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005d10:	e003      	b.n	8005d1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005d12:	887b      	ldrh	r3, [r7, #2]
 8005d14:	041a      	lsls	r2, r3, #16
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	619a      	str	r2, [r3, #24]
}
 8005d1a:	bf00      	nop
 8005d1c:	370c      	adds	r7, #12
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
	...

08005d28 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d101      	bne.n	8005d3a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e0bf      	b.n	8005eba <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d106      	bne.n	8005d54 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f7fc ffac 	bl	8002cac <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2202      	movs	r2, #2
 8005d58:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	699a      	ldr	r2, [r3, #24]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005d6a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	6999      	ldr	r1, [r3, #24]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	685a      	ldr	r2, [r3, #4]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005d80:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	430a      	orrs	r2, r1
 8005d8e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	6899      	ldr	r1, [r3, #8]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	4b4a      	ldr	r3, [pc, #296]	; (8005ec4 <HAL_LTDC_Init+0x19c>)
 8005d9c:	400b      	ands	r3, r1
 8005d9e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	695b      	ldr	r3, [r3, #20]
 8005da4:	041b      	lsls	r3, r3, #16
 8005da6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	6899      	ldr	r1, [r3, #8]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	699a      	ldr	r2, [r3, #24]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	431a      	orrs	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	430a      	orrs	r2, r1
 8005dbc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68d9      	ldr	r1, [r3, #12]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	4b3e      	ldr	r3, [pc, #248]	; (8005ec4 <HAL_LTDC_Init+0x19c>)
 8005dca:	400b      	ands	r3, r1
 8005dcc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	69db      	ldr	r3, [r3, #28]
 8005dd2:	041b      	lsls	r3, r3, #16
 8005dd4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68d9      	ldr	r1, [r3, #12]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6a1a      	ldr	r2, [r3, #32]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	431a      	orrs	r2, r3
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	430a      	orrs	r2, r1
 8005dea:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	6919      	ldr	r1, [r3, #16]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	4b33      	ldr	r3, [pc, #204]	; (8005ec4 <HAL_LTDC_Init+0x19c>)
 8005df8:	400b      	ands	r3, r1
 8005dfa:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e00:	041b      	lsls	r3, r3, #16
 8005e02:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	6919      	ldr	r1, [r3, #16]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	431a      	orrs	r2, r3
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	430a      	orrs	r2, r1
 8005e18:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	6959      	ldr	r1, [r3, #20]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	4b27      	ldr	r3, [pc, #156]	; (8005ec4 <HAL_LTDC_Init+0x19c>)
 8005e26:	400b      	ands	r3, r1
 8005e28:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e2e:	041b      	lsls	r3, r3, #16
 8005e30:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	6959      	ldr	r1, [r3, #20]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	431a      	orrs	r2, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	430a      	orrs	r2, r1
 8005e46:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e4e:	021b      	lsls	r3, r3, #8
 8005e50:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005e58:	041b      	lsls	r3, r3, #16
 8005e5a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005e6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005e72:	68ba      	ldr	r2, [r7, #8]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005e7e:	431a      	orrs	r2, r3
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	430a      	orrs	r2, r1
 8005e86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f042 0206 	orr.w	r2, r2, #6
 8005e96:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	699a      	ldr	r2, [r3, #24]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f042 0201 	orr.w	r2, r2, #1
 8005ea6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3710      	adds	r7, #16
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	f000f800 	.word	0xf000f800

08005ec8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ede:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f003 0304 	and.w	r3, r3, #4
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d023      	beq.n	8005f32 <HAL_LTDC_IRQHandler+0x6a>
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	f003 0304 	and.w	r3, r3, #4
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d01e      	beq.n	8005f32 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f022 0204 	bic.w	r2, r2, #4
 8005f02:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2204      	movs	r2, #4
 8005f0a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005f12:	f043 0201 	orr.w	r2, r3, #1
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2204      	movs	r2, #4
 8005f20:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f000 f86f 	bl	8006010 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f003 0302 	and.w	r3, r3, #2
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d023      	beq.n	8005f84 <HAL_LTDC_IRQHandler+0xbc>
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	f003 0302 	and.w	r3, r3, #2
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d01e      	beq.n	8005f84 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f022 0202 	bic.w	r2, r2, #2
 8005f54:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2202      	movs	r2, #2
 8005f5c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005f64:	f043 0202 	orr.w	r2, r3, #2
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2204      	movs	r2, #4
 8005f72:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 f846 	bl	8006010 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f003 0301 	and.w	r3, r3, #1
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d01b      	beq.n	8005fc6 <HAL_LTDC_IRQHandler+0xfe>
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	f003 0301 	and.w	r3, r3, #1
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d016      	beq.n	8005fc6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f022 0201 	bic.w	r2, r2, #1
 8005fa6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2201      	movs	r2, #1
 8005fae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f00e ffcb 	bl	8014f5c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f003 0308 	and.w	r3, r3, #8
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d01b      	beq.n	8006008 <HAL_LTDC_IRQHandler+0x140>
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	f003 0308 	and.w	r3, r3, #8
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d016      	beq.n	8006008 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f022 0208 	bic.w	r2, r2, #8
 8005fe8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2208      	movs	r2, #8
 8005ff0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 f80e 	bl	8006024 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006008:	bf00      	nop
 800600a:	3710      	adds	r7, #16
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006018:	bf00      	nop
 800601a:	370c      	adds	r7, #12
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800602c:	bf00      	nop
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006038:	b5b0      	push	{r4, r5, r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800604a:	2b01      	cmp	r3, #1
 800604c:	d101      	bne.n	8006052 <HAL_LTDC_ConfigLayer+0x1a>
 800604e:	2302      	movs	r3, #2
 8006050:	e02c      	b.n	80060ac <HAL_LTDC_ConfigLayer+0x74>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2201      	movs	r2, #1
 8006056:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2202      	movs	r2, #2
 800605e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2134      	movs	r1, #52	; 0x34
 8006068:	fb01 f303 	mul.w	r3, r1, r3
 800606c:	4413      	add	r3, r2
 800606e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	4614      	mov	r4, r2
 8006076:	461d      	mov	r5, r3
 8006078:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800607a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800607c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800607e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006080:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006082:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006084:	682b      	ldr	r3, [r5, #0]
 8006086:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	68b9      	ldr	r1, [r7, #8]
 800608c:	68f8      	ldr	r0, [r7, #12]
 800608e:	f000 f849 	bl	8006124 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2201      	movs	r2, #1
 8006098:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2201      	movs	r2, #1
 800609e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80060aa:	2300      	movs	r3, #0
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3710      	adds	r7, #16
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bdb0      	pop	{r4, r5, r7, pc}

080060b4 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d101      	bne.n	80060cc <HAL_LTDC_ProgramLineEvent+0x18>
 80060c8:	2302      	movs	r3, #2
 80060ca:	e023      	b.n	8006114 <HAL_LTDC_ProgramLineEvent+0x60>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2202      	movs	r2, #2
 80060d8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f022 0201 	bic.w	r2, r2, #1
 80060ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 80060ec:	4a0c      	ldr	r2, [pc, #48]	; (8006120 <HAL_LTDC_ProgramLineEvent+0x6c>)
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f042 0201 	orr.w	r2, r2, #1
 8006100:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2201      	movs	r2, #1
 8006106:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr
 8006120:	40016800 	.word	0x40016800

08006124 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006124:	b480      	push	{r7}
 8006126:	b089      	sub	sp, #36	; 0x24
 8006128:	af00      	add	r7, sp, #0
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	685a      	ldr	r2, [r3, #4]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	0c1b      	lsrs	r3, r3, #16
 800613c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006140:	4413      	add	r3, r2
 8006142:	041b      	lsls	r3, r3, #16
 8006144:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	461a      	mov	r2, r3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	01db      	lsls	r3, r3, #7
 8006150:	4413      	add	r3, r2
 8006152:	3384      	adds	r3, #132	; 0x84
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	68fa      	ldr	r2, [r7, #12]
 8006158:	6812      	ldr	r2, [r2, #0]
 800615a:	4611      	mov	r1, r2
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	01d2      	lsls	r2, r2, #7
 8006160:	440a      	add	r2, r1
 8006162:	3284      	adds	r2, #132	; 0x84
 8006164:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006168:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	0c1b      	lsrs	r3, r3, #16
 8006176:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800617a:	4413      	add	r3, r2
 800617c:	1c5a      	adds	r2, r3, #1
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4619      	mov	r1, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	01db      	lsls	r3, r3, #7
 8006188:	440b      	add	r3, r1
 800618a:	3384      	adds	r3, #132	; 0x84
 800618c:	4619      	mov	r1, r3
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	4313      	orrs	r3, r2
 8006192:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	68da      	ldr	r2, [r3, #12]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061a2:	4413      	add	r3, r2
 80061a4:	041b      	lsls	r3, r3, #16
 80061a6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	461a      	mov	r2, r3
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	01db      	lsls	r3, r3, #7
 80061b2:	4413      	add	r3, r2
 80061b4:	3384      	adds	r3, #132	; 0x84
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	6812      	ldr	r2, [r2, #0]
 80061bc:	4611      	mov	r1, r2
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	01d2      	lsls	r2, r2, #7
 80061c2:	440a      	add	r2, r1
 80061c4:	3284      	adds	r2, #132	; 0x84
 80061c6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80061ca:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	689a      	ldr	r2, [r3, #8]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061da:	4413      	add	r3, r2
 80061dc:	1c5a      	adds	r2, r3, #1
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4619      	mov	r1, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	01db      	lsls	r3, r3, #7
 80061e8:	440b      	add	r3, r1
 80061ea:	3384      	adds	r3, #132	; 0x84
 80061ec:	4619      	mov	r1, r3
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	461a      	mov	r2, r3
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	01db      	lsls	r3, r3, #7
 80061fe:	4413      	add	r3, r2
 8006200:	3384      	adds	r3, #132	; 0x84
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	6812      	ldr	r2, [r2, #0]
 8006208:	4611      	mov	r1, r2
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	01d2      	lsls	r2, r2, #7
 800620e:	440a      	add	r2, r1
 8006210:	3284      	adds	r2, #132	; 0x84
 8006212:	f023 0307 	bic.w	r3, r3, #7
 8006216:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	461a      	mov	r2, r3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	01db      	lsls	r3, r3, #7
 8006222:	4413      	add	r3, r2
 8006224:	3384      	adds	r3, #132	; 0x84
 8006226:	461a      	mov	r2, r3
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	691b      	ldr	r3, [r3, #16]
 800622c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006234:	021b      	lsls	r3, r3, #8
 8006236:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800623e:	041b      	lsls	r3, r3, #16
 8006240:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	699b      	ldr	r3, [r3, #24]
 8006246:	061b      	lsls	r3, r3, #24
 8006248:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	461a      	mov	r2, r3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	01db      	lsls	r3, r3, #7
 8006254:	4413      	add	r3, r2
 8006256:	3384      	adds	r3, #132	; 0x84
 8006258:	699b      	ldr	r3, [r3, #24]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	461a      	mov	r2, r3
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	01db      	lsls	r3, r3, #7
 8006264:	4413      	add	r3, r2
 8006266:	3384      	adds	r3, #132	; 0x84
 8006268:	461a      	mov	r2, r3
 800626a:	2300      	movs	r3, #0
 800626c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006274:	461a      	mov	r2, r3
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	431a      	orrs	r2, r3
 800627a:	69bb      	ldr	r3, [r7, #24]
 800627c:	431a      	orrs	r2, r3
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4619      	mov	r1, r3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	01db      	lsls	r3, r3, #7
 8006288:	440b      	add	r3, r1
 800628a:	3384      	adds	r3, #132	; 0x84
 800628c:	4619      	mov	r1, r3
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	4313      	orrs	r3, r2
 8006292:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	461a      	mov	r2, r3
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	01db      	lsls	r3, r3, #7
 800629e:	4413      	add	r3, r2
 80062a0:	3384      	adds	r3, #132	; 0x84
 80062a2:	695b      	ldr	r3, [r3, #20]
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	6812      	ldr	r2, [r2, #0]
 80062a8:	4611      	mov	r1, r2
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	01d2      	lsls	r2, r2, #7
 80062ae:	440a      	add	r2, r1
 80062b0:	3284      	adds	r2, #132	; 0x84
 80062b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80062b6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	461a      	mov	r2, r3
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	01db      	lsls	r3, r3, #7
 80062c2:	4413      	add	r3, r2
 80062c4:	3384      	adds	r3, #132	; 0x84
 80062c6:	461a      	mov	r2, r3
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	695b      	ldr	r3, [r3, #20]
 80062cc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	461a      	mov	r2, r3
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	01db      	lsls	r3, r3, #7
 80062d8:	4413      	add	r3, r2
 80062da:	3384      	adds	r3, #132	; 0x84
 80062dc:	69da      	ldr	r2, [r3, #28]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4619      	mov	r1, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	01db      	lsls	r3, r3, #7
 80062e8:	440b      	add	r3, r1
 80062ea:	3384      	adds	r3, #132	; 0x84
 80062ec:	4619      	mov	r1, r3
 80062ee:	4b58      	ldr	r3, [pc, #352]	; (8006450 <LTDC_SetConfig+0x32c>)
 80062f0:	4013      	ands	r3, r2
 80062f2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	69da      	ldr	r2, [r3, #28]
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	6a1b      	ldr	r3, [r3, #32]
 80062fc:	68f9      	ldr	r1, [r7, #12]
 80062fe:	6809      	ldr	r1, [r1, #0]
 8006300:	4608      	mov	r0, r1
 8006302:	6879      	ldr	r1, [r7, #4]
 8006304:	01c9      	lsls	r1, r1, #7
 8006306:	4401      	add	r1, r0
 8006308:	3184      	adds	r1, #132	; 0x84
 800630a:	4313      	orrs	r3, r2
 800630c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	461a      	mov	r2, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	01db      	lsls	r3, r3, #7
 8006318:	4413      	add	r3, r2
 800631a:	3384      	adds	r3, #132	; 0x84
 800631c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	461a      	mov	r2, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	01db      	lsls	r3, r3, #7
 8006328:	4413      	add	r3, r2
 800632a:	3384      	adds	r3, #132	; 0x84
 800632c:	461a      	mov	r2, r3
 800632e:	2300      	movs	r3, #0
 8006330:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	461a      	mov	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	01db      	lsls	r3, r3, #7
 800633c:	4413      	add	r3, r2
 800633e:	3384      	adds	r3, #132	; 0x84
 8006340:	461a      	mov	r2, r3
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006346:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	691b      	ldr	r3, [r3, #16]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d102      	bne.n	8006356 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006350:	2304      	movs	r3, #4
 8006352:	61fb      	str	r3, [r7, #28]
 8006354:	e01b      	b.n	800638e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	2b01      	cmp	r3, #1
 800635c:	d102      	bne.n	8006364 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800635e:	2303      	movs	r3, #3
 8006360:	61fb      	str	r3, [r7, #28]
 8006362:	e014      	b.n	800638e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	2b04      	cmp	r3, #4
 800636a:	d00b      	beq.n	8006384 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006370:	2b02      	cmp	r3, #2
 8006372:	d007      	beq.n	8006384 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006378:	2b03      	cmp	r3, #3
 800637a:	d003      	beq.n	8006384 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006380:	2b07      	cmp	r3, #7
 8006382:	d102      	bne.n	800638a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006384:	2302      	movs	r3, #2
 8006386:	61fb      	str	r3, [r7, #28]
 8006388:	e001      	b.n	800638e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800638a:	2301      	movs	r3, #1
 800638c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	461a      	mov	r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	01db      	lsls	r3, r3, #7
 8006398:	4413      	add	r3, r2
 800639a:	3384      	adds	r3, #132	; 0x84
 800639c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	6812      	ldr	r2, [r2, #0]
 80063a2:	4611      	mov	r1, r2
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	01d2      	lsls	r2, r2, #7
 80063a8:	440a      	add	r2, r1
 80063aa:	3284      	adds	r2, #132	; 0x84
 80063ac:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80063b0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b6:	69fa      	ldr	r2, [r7, #28]
 80063b8:	fb02 f303 	mul.w	r3, r2, r3
 80063bc:	041a      	lsls	r2, r3, #16
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	6859      	ldr	r1, [r3, #4]
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	1acb      	subs	r3, r1, r3
 80063c8:	69f9      	ldr	r1, [r7, #28]
 80063ca:	fb01 f303 	mul.w	r3, r1, r3
 80063ce:	3303      	adds	r3, #3
 80063d0:	68f9      	ldr	r1, [r7, #12]
 80063d2:	6809      	ldr	r1, [r1, #0]
 80063d4:	4608      	mov	r0, r1
 80063d6:	6879      	ldr	r1, [r7, #4]
 80063d8:	01c9      	lsls	r1, r1, #7
 80063da:	4401      	add	r1, r0
 80063dc:	3184      	adds	r1, #132	; 0x84
 80063de:	4313      	orrs	r3, r2
 80063e0:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	461a      	mov	r2, r3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	01db      	lsls	r3, r3, #7
 80063ec:	4413      	add	r3, r2
 80063ee:	3384      	adds	r3, #132	; 0x84
 80063f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4619      	mov	r1, r3
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	01db      	lsls	r3, r3, #7
 80063fc:	440b      	add	r3, r1
 80063fe:	3384      	adds	r3, #132	; 0x84
 8006400:	4619      	mov	r1, r3
 8006402:	4b14      	ldr	r3, [pc, #80]	; (8006454 <LTDC_SetConfig+0x330>)
 8006404:	4013      	ands	r3, r2
 8006406:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	461a      	mov	r2, r3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	01db      	lsls	r3, r3, #7
 8006412:	4413      	add	r3, r2
 8006414:	3384      	adds	r3, #132	; 0x84
 8006416:	461a      	mov	r2, r3
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800641c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	461a      	mov	r2, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	01db      	lsls	r3, r3, #7
 8006428:	4413      	add	r3, r2
 800642a:	3384      	adds	r3, #132	; 0x84
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	6812      	ldr	r2, [r2, #0]
 8006432:	4611      	mov	r1, r2
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	01d2      	lsls	r2, r2, #7
 8006438:	440a      	add	r2, r1
 800643a:	3284      	adds	r2, #132	; 0x84
 800643c:	f043 0301 	orr.w	r3, r3, #1
 8006440:	6013      	str	r3, [r2, #0]
}
 8006442:	bf00      	nop
 8006444:	3724      	adds	r7, #36	; 0x24
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop
 8006450:	fffff8f8 	.word	0xfffff8f8
 8006454:	fffff800 	.word	0xfffff800

08006458 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006458:	b480      	push	{r7}
 800645a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800645c:	4b05      	ldr	r3, [pc, #20]	; (8006474 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a04      	ldr	r2, [pc, #16]	; (8006474 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006462:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006466:	6013      	str	r3, [r2, #0]
}
 8006468:	bf00      	nop
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	40007000 	.word	0x40007000

08006478 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b082      	sub	sp, #8
 800647c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800647e:	2300      	movs	r3, #0
 8006480:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006482:	4b23      	ldr	r3, [pc, #140]	; (8006510 <HAL_PWREx_EnableOverDrive+0x98>)
 8006484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006486:	4a22      	ldr	r2, [pc, #136]	; (8006510 <HAL_PWREx_EnableOverDrive+0x98>)
 8006488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800648c:	6413      	str	r3, [r2, #64]	; 0x40
 800648e:	4b20      	ldr	r3, [pc, #128]	; (8006510 <HAL_PWREx_EnableOverDrive+0x98>)
 8006490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006496:	603b      	str	r3, [r7, #0]
 8006498:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800649a:	4b1e      	ldr	r3, [pc, #120]	; (8006514 <HAL_PWREx_EnableOverDrive+0x9c>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a1d      	ldr	r2, [pc, #116]	; (8006514 <HAL_PWREx_EnableOverDrive+0x9c>)
 80064a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064a4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80064a6:	f7fd fb23 	bl	8003af0 <HAL_GetTick>
 80064aa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80064ac:	e009      	b.n	80064c2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80064ae:	f7fd fb1f 	bl	8003af0 <HAL_GetTick>
 80064b2:	4602      	mov	r2, r0
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	1ad3      	subs	r3, r2, r3
 80064b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064bc:	d901      	bls.n	80064c2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80064be:	2303      	movs	r3, #3
 80064c0:	e022      	b.n	8006508 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80064c2:	4b14      	ldr	r3, [pc, #80]	; (8006514 <HAL_PWREx_EnableOverDrive+0x9c>)
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064ce:	d1ee      	bne.n	80064ae <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80064d0:	4b10      	ldr	r3, [pc, #64]	; (8006514 <HAL_PWREx_EnableOverDrive+0x9c>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a0f      	ldr	r2, [pc, #60]	; (8006514 <HAL_PWREx_EnableOverDrive+0x9c>)
 80064d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064da:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80064dc:	f7fd fb08 	bl	8003af0 <HAL_GetTick>
 80064e0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80064e2:	e009      	b.n	80064f8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80064e4:	f7fd fb04 	bl	8003af0 <HAL_GetTick>
 80064e8:	4602      	mov	r2, r0
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	1ad3      	subs	r3, r2, r3
 80064ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064f2:	d901      	bls.n	80064f8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	e007      	b.n	8006508 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80064f8:	4b06      	ldr	r3, [pc, #24]	; (8006514 <HAL_PWREx_EnableOverDrive+0x9c>)
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006500:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006504:	d1ee      	bne.n	80064e4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006506:	2300      	movs	r3, #0
}
 8006508:	4618      	mov	r0, r3
 800650a:	3708      	adds	r7, #8
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	40023800 	.word	0x40023800
 8006514:	40007000 	.word	0x40007000

08006518 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b086      	sub	sp, #24
 800651c:	af02      	add	r7, sp, #8
 800651e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006520:	f7fd fae6 	bl	8003af0 <HAL_GetTick>
 8006524:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d101      	bne.n	8006530 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	e067      	b.n	8006600 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006536:	b2db      	uxtb	r3, r3
 8006538:	2b00      	cmp	r3, #0
 800653a:	d10b      	bne.n	8006554 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f7fc fc79 	bl	8002e3c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800654a:	f241 3188 	movw	r1, #5000	; 0x1388
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 f85e 	bl	8006610 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	3b01      	subs	r3, #1
 8006564:	021a      	lsls	r2, r3, #8
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	430a      	orrs	r2, r1
 800656c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006572:	9300      	str	r3, [sp, #0]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2200      	movs	r2, #0
 8006578:	2120      	movs	r1, #32
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 f856 	bl	800662c <QSPI_WaitFlagStateUntilTimeout>
 8006580:	4603      	mov	r3, r0
 8006582:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006584:	7afb      	ldrb	r3, [r7, #11]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d135      	bne.n	80065f6 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	4b1d      	ldr	r3, [pc, #116]	; (8006608 <HAL_QSPI_Init+0xf0>)
 8006592:	4013      	ands	r3, r2
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	6852      	ldr	r2, [r2, #4]
 8006598:	0611      	lsls	r1, r2, #24
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	68d2      	ldr	r2, [r2, #12]
 800659e:	4311      	orrs	r1, r2
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	69d2      	ldr	r2, [r2, #28]
 80065a4:	4311      	orrs	r1, r2
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	6a12      	ldr	r2, [r2, #32]
 80065aa:	4311      	orrs	r1, r2
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	6812      	ldr	r2, [r2, #0]
 80065b0:	430b      	orrs	r3, r1
 80065b2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	685a      	ldr	r2, [r3, #4]
 80065ba:	4b14      	ldr	r3, [pc, #80]	; (800660c <HAL_QSPI_Init+0xf4>)
 80065bc:	4013      	ands	r3, r2
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	6912      	ldr	r2, [r2, #16]
 80065c2:	0411      	lsls	r1, r2, #16
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	6952      	ldr	r2, [r2, #20]
 80065c8:	4311      	orrs	r1, r2
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	6992      	ldr	r2, [r2, #24]
 80065ce:	4311      	orrs	r1, r2
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	6812      	ldr	r2, [r2, #0]
 80065d4:	430b      	orrs	r3, r1
 80065d6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f042 0201 	orr.w	r2, r2, #1
 80065e6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2201      	movs	r2, #1
 80065f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80065fe:	7afb      	ldrb	r3, [r7, #11]
}
 8006600:	4618      	mov	r0, r3
 8006602:	3710      	adds	r7, #16
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}
 8006608:	00ffff2f 	.word	0x00ffff2f
 800660c:	ffe0f8fe 	.word	0xffe0f8fe

08006610 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	683a      	ldr	r2, [r7, #0]
 800661e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006620:	bf00      	nop
 8006622:	370c      	adds	r7, #12
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	603b      	str	r3, [r7, #0]
 8006638:	4613      	mov	r3, r2
 800663a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800663c:	e01a      	b.n	8006674 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006644:	d016      	beq.n	8006674 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006646:	f7fd fa53 	bl	8003af0 <HAL_GetTick>
 800664a:	4602      	mov	r2, r0
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	1ad3      	subs	r3, r2, r3
 8006650:	69ba      	ldr	r2, [r7, #24]
 8006652:	429a      	cmp	r2, r3
 8006654:	d302      	bcc.n	800665c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006656:	69bb      	ldr	r3, [r7, #24]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d10b      	bne.n	8006674 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2204      	movs	r2, #4
 8006660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006668:	f043 0201 	orr.w	r2, r3, #1
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	e00e      	b.n	8006692 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	689a      	ldr	r2, [r3, #8]
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	4013      	ands	r3, r2
 800667e:	2b00      	cmp	r3, #0
 8006680:	bf14      	ite	ne
 8006682:	2301      	movne	r3, #1
 8006684:	2300      	moveq	r3, #0
 8006686:	b2db      	uxtb	r3, r3
 8006688:	461a      	mov	r2, r3
 800668a:	79fb      	ldrb	r3, [r7, #7]
 800668c:	429a      	cmp	r2, r3
 800668e:	d1d6      	bne.n	800663e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3710      	adds	r7, #16
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
	...

0800669c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b086      	sub	sp, #24
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80066a4:	2300      	movs	r3, #0
 80066a6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d101      	bne.n	80066b2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e291      	b.n	8006bd6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 0301 	and.w	r3, r3, #1
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	f000 8087 	beq.w	80067ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80066c0:	4b96      	ldr	r3, [pc, #600]	; (800691c <HAL_RCC_OscConfig+0x280>)
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	f003 030c 	and.w	r3, r3, #12
 80066c8:	2b04      	cmp	r3, #4
 80066ca:	d00c      	beq.n	80066e6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066cc:	4b93      	ldr	r3, [pc, #588]	; (800691c <HAL_RCC_OscConfig+0x280>)
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	f003 030c 	and.w	r3, r3, #12
 80066d4:	2b08      	cmp	r3, #8
 80066d6:	d112      	bne.n	80066fe <HAL_RCC_OscConfig+0x62>
 80066d8:	4b90      	ldr	r3, [pc, #576]	; (800691c <HAL_RCC_OscConfig+0x280>)
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066e4:	d10b      	bne.n	80066fe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066e6:	4b8d      	ldr	r3, [pc, #564]	; (800691c <HAL_RCC_OscConfig+0x280>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d06c      	beq.n	80067cc <HAL_RCC_OscConfig+0x130>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d168      	bne.n	80067cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	e26b      	b.n	8006bd6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006706:	d106      	bne.n	8006716 <HAL_RCC_OscConfig+0x7a>
 8006708:	4b84      	ldr	r3, [pc, #528]	; (800691c <HAL_RCC_OscConfig+0x280>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a83      	ldr	r2, [pc, #524]	; (800691c <HAL_RCC_OscConfig+0x280>)
 800670e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006712:	6013      	str	r3, [r2, #0]
 8006714:	e02e      	b.n	8006774 <HAL_RCC_OscConfig+0xd8>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d10c      	bne.n	8006738 <HAL_RCC_OscConfig+0x9c>
 800671e:	4b7f      	ldr	r3, [pc, #508]	; (800691c <HAL_RCC_OscConfig+0x280>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a7e      	ldr	r2, [pc, #504]	; (800691c <HAL_RCC_OscConfig+0x280>)
 8006724:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006728:	6013      	str	r3, [r2, #0]
 800672a:	4b7c      	ldr	r3, [pc, #496]	; (800691c <HAL_RCC_OscConfig+0x280>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a7b      	ldr	r2, [pc, #492]	; (800691c <HAL_RCC_OscConfig+0x280>)
 8006730:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006734:	6013      	str	r3, [r2, #0]
 8006736:	e01d      	b.n	8006774 <HAL_RCC_OscConfig+0xd8>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006740:	d10c      	bne.n	800675c <HAL_RCC_OscConfig+0xc0>
 8006742:	4b76      	ldr	r3, [pc, #472]	; (800691c <HAL_RCC_OscConfig+0x280>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a75      	ldr	r2, [pc, #468]	; (800691c <HAL_RCC_OscConfig+0x280>)
 8006748:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800674c:	6013      	str	r3, [r2, #0]
 800674e:	4b73      	ldr	r3, [pc, #460]	; (800691c <HAL_RCC_OscConfig+0x280>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a72      	ldr	r2, [pc, #456]	; (800691c <HAL_RCC_OscConfig+0x280>)
 8006754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006758:	6013      	str	r3, [r2, #0]
 800675a:	e00b      	b.n	8006774 <HAL_RCC_OscConfig+0xd8>
 800675c:	4b6f      	ldr	r3, [pc, #444]	; (800691c <HAL_RCC_OscConfig+0x280>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a6e      	ldr	r2, [pc, #440]	; (800691c <HAL_RCC_OscConfig+0x280>)
 8006762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006766:	6013      	str	r3, [r2, #0]
 8006768:	4b6c      	ldr	r3, [pc, #432]	; (800691c <HAL_RCC_OscConfig+0x280>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a6b      	ldr	r2, [pc, #428]	; (800691c <HAL_RCC_OscConfig+0x280>)
 800676e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006772:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d013      	beq.n	80067a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800677c:	f7fd f9b8 	bl	8003af0 <HAL_GetTick>
 8006780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006782:	e008      	b.n	8006796 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006784:	f7fd f9b4 	bl	8003af0 <HAL_GetTick>
 8006788:	4602      	mov	r2, r0
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	1ad3      	subs	r3, r2, r3
 800678e:	2b64      	cmp	r3, #100	; 0x64
 8006790:	d901      	bls.n	8006796 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006792:	2303      	movs	r3, #3
 8006794:	e21f      	b.n	8006bd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006796:	4b61      	ldr	r3, [pc, #388]	; (800691c <HAL_RCC_OscConfig+0x280>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d0f0      	beq.n	8006784 <HAL_RCC_OscConfig+0xe8>
 80067a2:	e014      	b.n	80067ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067a4:	f7fd f9a4 	bl	8003af0 <HAL_GetTick>
 80067a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067aa:	e008      	b.n	80067be <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067ac:	f7fd f9a0 	bl	8003af0 <HAL_GetTick>
 80067b0:	4602      	mov	r2, r0
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	1ad3      	subs	r3, r2, r3
 80067b6:	2b64      	cmp	r3, #100	; 0x64
 80067b8:	d901      	bls.n	80067be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80067ba:	2303      	movs	r3, #3
 80067bc:	e20b      	b.n	8006bd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067be:	4b57      	ldr	r3, [pc, #348]	; (800691c <HAL_RCC_OscConfig+0x280>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d1f0      	bne.n	80067ac <HAL_RCC_OscConfig+0x110>
 80067ca:	e000      	b.n	80067ce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 0302 	and.w	r3, r3, #2
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d069      	beq.n	80068ae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80067da:	4b50      	ldr	r3, [pc, #320]	; (800691c <HAL_RCC_OscConfig+0x280>)
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	f003 030c 	and.w	r3, r3, #12
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00b      	beq.n	80067fe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067e6:	4b4d      	ldr	r3, [pc, #308]	; (800691c <HAL_RCC_OscConfig+0x280>)
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	f003 030c 	and.w	r3, r3, #12
 80067ee:	2b08      	cmp	r3, #8
 80067f0:	d11c      	bne.n	800682c <HAL_RCC_OscConfig+0x190>
 80067f2:	4b4a      	ldr	r3, [pc, #296]	; (800691c <HAL_RCC_OscConfig+0x280>)
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d116      	bne.n	800682c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067fe:	4b47      	ldr	r3, [pc, #284]	; (800691c <HAL_RCC_OscConfig+0x280>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 0302 	and.w	r3, r3, #2
 8006806:	2b00      	cmp	r3, #0
 8006808:	d005      	beq.n	8006816 <HAL_RCC_OscConfig+0x17a>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	2b01      	cmp	r3, #1
 8006810:	d001      	beq.n	8006816 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e1df      	b.n	8006bd6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006816:	4b41      	ldr	r3, [pc, #260]	; (800691c <HAL_RCC_OscConfig+0x280>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	00db      	lsls	r3, r3, #3
 8006824:	493d      	ldr	r1, [pc, #244]	; (800691c <HAL_RCC_OscConfig+0x280>)
 8006826:	4313      	orrs	r3, r2
 8006828:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800682a:	e040      	b.n	80068ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d023      	beq.n	800687c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006834:	4b39      	ldr	r3, [pc, #228]	; (800691c <HAL_RCC_OscConfig+0x280>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a38      	ldr	r2, [pc, #224]	; (800691c <HAL_RCC_OscConfig+0x280>)
 800683a:	f043 0301 	orr.w	r3, r3, #1
 800683e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006840:	f7fd f956 	bl	8003af0 <HAL_GetTick>
 8006844:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006846:	e008      	b.n	800685a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006848:	f7fd f952 	bl	8003af0 <HAL_GetTick>
 800684c:	4602      	mov	r2, r0
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	1ad3      	subs	r3, r2, r3
 8006852:	2b02      	cmp	r3, #2
 8006854:	d901      	bls.n	800685a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	e1bd      	b.n	8006bd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800685a:	4b30      	ldr	r3, [pc, #192]	; (800691c <HAL_RCC_OscConfig+0x280>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 0302 	and.w	r3, r3, #2
 8006862:	2b00      	cmp	r3, #0
 8006864:	d0f0      	beq.n	8006848 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006866:	4b2d      	ldr	r3, [pc, #180]	; (800691c <HAL_RCC_OscConfig+0x280>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	00db      	lsls	r3, r3, #3
 8006874:	4929      	ldr	r1, [pc, #164]	; (800691c <HAL_RCC_OscConfig+0x280>)
 8006876:	4313      	orrs	r3, r2
 8006878:	600b      	str	r3, [r1, #0]
 800687a:	e018      	b.n	80068ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800687c:	4b27      	ldr	r3, [pc, #156]	; (800691c <HAL_RCC_OscConfig+0x280>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a26      	ldr	r2, [pc, #152]	; (800691c <HAL_RCC_OscConfig+0x280>)
 8006882:	f023 0301 	bic.w	r3, r3, #1
 8006886:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006888:	f7fd f932 	bl	8003af0 <HAL_GetTick>
 800688c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800688e:	e008      	b.n	80068a2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006890:	f7fd f92e 	bl	8003af0 <HAL_GetTick>
 8006894:	4602      	mov	r2, r0
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	1ad3      	subs	r3, r2, r3
 800689a:	2b02      	cmp	r3, #2
 800689c:	d901      	bls.n	80068a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800689e:	2303      	movs	r3, #3
 80068a0:	e199      	b.n	8006bd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068a2:	4b1e      	ldr	r3, [pc, #120]	; (800691c <HAL_RCC_OscConfig+0x280>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 0302 	and.w	r3, r3, #2
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d1f0      	bne.n	8006890 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f003 0308 	and.w	r3, r3, #8
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d038      	beq.n	800692c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	695b      	ldr	r3, [r3, #20]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d019      	beq.n	80068f6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80068c2:	4b16      	ldr	r3, [pc, #88]	; (800691c <HAL_RCC_OscConfig+0x280>)
 80068c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068c6:	4a15      	ldr	r2, [pc, #84]	; (800691c <HAL_RCC_OscConfig+0x280>)
 80068c8:	f043 0301 	orr.w	r3, r3, #1
 80068cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068ce:	f7fd f90f 	bl	8003af0 <HAL_GetTick>
 80068d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068d4:	e008      	b.n	80068e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068d6:	f7fd f90b 	bl	8003af0 <HAL_GetTick>
 80068da:	4602      	mov	r2, r0
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	1ad3      	subs	r3, r2, r3
 80068e0:	2b02      	cmp	r3, #2
 80068e2:	d901      	bls.n	80068e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80068e4:	2303      	movs	r3, #3
 80068e6:	e176      	b.n	8006bd6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068e8:	4b0c      	ldr	r3, [pc, #48]	; (800691c <HAL_RCC_OscConfig+0x280>)
 80068ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068ec:	f003 0302 	and.w	r3, r3, #2
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d0f0      	beq.n	80068d6 <HAL_RCC_OscConfig+0x23a>
 80068f4:	e01a      	b.n	800692c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068f6:	4b09      	ldr	r3, [pc, #36]	; (800691c <HAL_RCC_OscConfig+0x280>)
 80068f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068fa:	4a08      	ldr	r2, [pc, #32]	; (800691c <HAL_RCC_OscConfig+0x280>)
 80068fc:	f023 0301 	bic.w	r3, r3, #1
 8006900:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006902:	f7fd f8f5 	bl	8003af0 <HAL_GetTick>
 8006906:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006908:	e00a      	b.n	8006920 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800690a:	f7fd f8f1 	bl	8003af0 <HAL_GetTick>
 800690e:	4602      	mov	r2, r0
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	2b02      	cmp	r3, #2
 8006916:	d903      	bls.n	8006920 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006918:	2303      	movs	r3, #3
 800691a:	e15c      	b.n	8006bd6 <HAL_RCC_OscConfig+0x53a>
 800691c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006920:	4b91      	ldr	r3, [pc, #580]	; (8006b68 <HAL_RCC_OscConfig+0x4cc>)
 8006922:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006924:	f003 0302 	and.w	r3, r3, #2
 8006928:	2b00      	cmp	r3, #0
 800692a:	d1ee      	bne.n	800690a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 0304 	and.w	r3, r3, #4
 8006934:	2b00      	cmp	r3, #0
 8006936:	f000 80a4 	beq.w	8006a82 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800693a:	4b8b      	ldr	r3, [pc, #556]	; (8006b68 <HAL_RCC_OscConfig+0x4cc>)
 800693c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800693e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006942:	2b00      	cmp	r3, #0
 8006944:	d10d      	bne.n	8006962 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006946:	4b88      	ldr	r3, [pc, #544]	; (8006b68 <HAL_RCC_OscConfig+0x4cc>)
 8006948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694a:	4a87      	ldr	r2, [pc, #540]	; (8006b68 <HAL_RCC_OscConfig+0x4cc>)
 800694c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006950:	6413      	str	r3, [r2, #64]	; 0x40
 8006952:	4b85      	ldr	r3, [pc, #532]	; (8006b68 <HAL_RCC_OscConfig+0x4cc>)
 8006954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800695a:	60bb      	str	r3, [r7, #8]
 800695c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800695e:	2301      	movs	r3, #1
 8006960:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006962:	4b82      	ldr	r3, [pc, #520]	; (8006b6c <HAL_RCC_OscConfig+0x4d0>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800696a:	2b00      	cmp	r3, #0
 800696c:	d118      	bne.n	80069a0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800696e:	4b7f      	ldr	r3, [pc, #508]	; (8006b6c <HAL_RCC_OscConfig+0x4d0>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a7e      	ldr	r2, [pc, #504]	; (8006b6c <HAL_RCC_OscConfig+0x4d0>)
 8006974:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006978:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800697a:	f7fd f8b9 	bl	8003af0 <HAL_GetTick>
 800697e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006980:	e008      	b.n	8006994 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006982:	f7fd f8b5 	bl	8003af0 <HAL_GetTick>
 8006986:	4602      	mov	r2, r0
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	1ad3      	subs	r3, r2, r3
 800698c:	2b64      	cmp	r3, #100	; 0x64
 800698e:	d901      	bls.n	8006994 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006990:	2303      	movs	r3, #3
 8006992:	e120      	b.n	8006bd6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006994:	4b75      	ldr	r3, [pc, #468]	; (8006b6c <HAL_RCC_OscConfig+0x4d0>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800699c:	2b00      	cmp	r3, #0
 800699e:	d0f0      	beq.n	8006982 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d106      	bne.n	80069b6 <HAL_RCC_OscConfig+0x31a>
 80069a8:	4b6f      	ldr	r3, [pc, #444]	; (8006b68 <HAL_RCC_OscConfig+0x4cc>)
 80069aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ac:	4a6e      	ldr	r2, [pc, #440]	; (8006b68 <HAL_RCC_OscConfig+0x4cc>)
 80069ae:	f043 0301 	orr.w	r3, r3, #1
 80069b2:	6713      	str	r3, [r2, #112]	; 0x70
 80069b4:	e02d      	b.n	8006a12 <HAL_RCC_OscConfig+0x376>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d10c      	bne.n	80069d8 <HAL_RCC_OscConfig+0x33c>
 80069be:	4b6a      	ldr	r3, [pc, #424]	; (8006b68 <HAL_RCC_OscConfig+0x4cc>)
 80069c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069c2:	4a69      	ldr	r2, [pc, #420]	; (8006b68 <HAL_RCC_OscConfig+0x4cc>)
 80069c4:	f023 0301 	bic.w	r3, r3, #1
 80069c8:	6713      	str	r3, [r2, #112]	; 0x70
 80069ca:	4b67      	ldr	r3, [pc, #412]	; (8006b68 <HAL_RCC_OscConfig+0x4cc>)
 80069cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ce:	4a66      	ldr	r2, [pc, #408]	; (8006b68 <HAL_RCC_OscConfig+0x4cc>)
 80069d0:	f023 0304 	bic.w	r3, r3, #4
 80069d4:	6713      	str	r3, [r2, #112]	; 0x70
 80069d6:	e01c      	b.n	8006a12 <HAL_RCC_OscConfig+0x376>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	2b05      	cmp	r3, #5
 80069de:	d10c      	bne.n	80069fa <HAL_RCC_OscConfig+0x35e>
 80069e0:	4b61      	ldr	r3, [pc, #388]	; (8006b68 <HAL_RCC_OscConfig+0x4cc>)
 80069e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069e4:	4a60      	ldr	r2, [pc, #384]	; (8006b68 <HAL_RCC_OscConfig+0x4cc>)
 80069e6:	f043 0304 	orr.w	r3, r3, #4
 80069ea:	6713      	str	r3, [r2, #112]	; 0x70
 80069ec:	4b5e      	ldr	r3, [pc, #376]	; (8006b68 <HAL_RCC_OscConfig+0x4cc>)
 80069ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069f0:	4a5d      	ldr	r2, [pc, #372]	; (8006b68 <HAL_RCC_OscConfig+0x4cc>)
 80069f2:	f043 0301 	orr.w	r3, r3, #1
 80069f6:	6713      	str	r3, [r2, #112]	; 0x70
 80069f8:	e00b      	b.n	8006a12 <HAL_RCC_OscConfig+0x376>
 80069fa:	4b5b      	ldr	r3, [pc, #364]	; (8006b68 <HAL_RCC_OscConfig+0x4cc>)
 80069fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069fe:	4a5a      	ldr	r2, [pc, #360]	; (8006b68 <HAL_RCC_OscConfig+0x4cc>)
 8006a00:	f023 0301 	bic.w	r3, r3, #1
 8006a04:	6713      	str	r3, [r2, #112]	; 0x70
 8006a06:	4b58      	ldr	r3, [pc, #352]	; (8006b68 <HAL_RCC_OscConfig+0x4cc>)
 8006a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a0a:	4a57      	ldr	r2, [pc, #348]	; (8006b68 <HAL_RCC_OscConfig+0x4cc>)
 8006a0c:	f023 0304 	bic.w	r3, r3, #4
 8006a10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d015      	beq.n	8006a46 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a1a:	f7fd f869 	bl	8003af0 <HAL_GetTick>
 8006a1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a20:	e00a      	b.n	8006a38 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a22:	f7fd f865 	bl	8003af0 <HAL_GetTick>
 8006a26:	4602      	mov	r2, r0
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	1ad3      	subs	r3, r2, r3
 8006a2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d901      	bls.n	8006a38 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006a34:	2303      	movs	r3, #3
 8006a36:	e0ce      	b.n	8006bd6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a38:	4b4b      	ldr	r3, [pc, #300]	; (8006b68 <HAL_RCC_OscConfig+0x4cc>)
 8006a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a3c:	f003 0302 	and.w	r3, r3, #2
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d0ee      	beq.n	8006a22 <HAL_RCC_OscConfig+0x386>
 8006a44:	e014      	b.n	8006a70 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a46:	f7fd f853 	bl	8003af0 <HAL_GetTick>
 8006a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a4c:	e00a      	b.n	8006a64 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a4e:	f7fd f84f 	bl	8003af0 <HAL_GetTick>
 8006a52:	4602      	mov	r2, r0
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	1ad3      	subs	r3, r2, r3
 8006a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d901      	bls.n	8006a64 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006a60:	2303      	movs	r3, #3
 8006a62:	e0b8      	b.n	8006bd6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a64:	4b40      	ldr	r3, [pc, #256]	; (8006b68 <HAL_RCC_OscConfig+0x4cc>)
 8006a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a68:	f003 0302 	and.w	r3, r3, #2
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d1ee      	bne.n	8006a4e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006a70:	7dfb      	ldrb	r3, [r7, #23]
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d105      	bne.n	8006a82 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a76:	4b3c      	ldr	r3, [pc, #240]	; (8006b68 <HAL_RCC_OscConfig+0x4cc>)
 8006a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7a:	4a3b      	ldr	r2, [pc, #236]	; (8006b68 <HAL_RCC_OscConfig+0x4cc>)
 8006a7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a80:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	699b      	ldr	r3, [r3, #24]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	f000 80a4 	beq.w	8006bd4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006a8c:	4b36      	ldr	r3, [pc, #216]	; (8006b68 <HAL_RCC_OscConfig+0x4cc>)
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	f003 030c 	and.w	r3, r3, #12
 8006a94:	2b08      	cmp	r3, #8
 8006a96:	d06b      	beq.n	8006b70 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	699b      	ldr	r3, [r3, #24]
 8006a9c:	2b02      	cmp	r3, #2
 8006a9e:	d149      	bne.n	8006b34 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006aa0:	4b31      	ldr	r3, [pc, #196]	; (8006b68 <HAL_RCC_OscConfig+0x4cc>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a30      	ldr	r2, [pc, #192]	; (8006b68 <HAL_RCC_OscConfig+0x4cc>)
 8006aa6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006aaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aac:	f7fd f820 	bl	8003af0 <HAL_GetTick>
 8006ab0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ab2:	e008      	b.n	8006ac6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ab4:	f7fd f81c 	bl	8003af0 <HAL_GetTick>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	1ad3      	subs	r3, r2, r3
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	d901      	bls.n	8006ac6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006ac2:	2303      	movs	r3, #3
 8006ac4:	e087      	b.n	8006bd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ac6:	4b28      	ldr	r3, [pc, #160]	; (8006b68 <HAL_RCC_OscConfig+0x4cc>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d1f0      	bne.n	8006ab4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	69da      	ldr	r2, [r3, #28]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6a1b      	ldr	r3, [r3, #32]
 8006ada:	431a      	orrs	r2, r3
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae0:	019b      	lsls	r3, r3, #6
 8006ae2:	431a      	orrs	r2, r3
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae8:	085b      	lsrs	r3, r3, #1
 8006aea:	3b01      	subs	r3, #1
 8006aec:	041b      	lsls	r3, r3, #16
 8006aee:	431a      	orrs	r2, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af4:	061b      	lsls	r3, r3, #24
 8006af6:	4313      	orrs	r3, r2
 8006af8:	4a1b      	ldr	r2, [pc, #108]	; (8006b68 <HAL_RCC_OscConfig+0x4cc>)
 8006afa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006afe:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b00:	4b19      	ldr	r3, [pc, #100]	; (8006b68 <HAL_RCC_OscConfig+0x4cc>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a18      	ldr	r2, [pc, #96]	; (8006b68 <HAL_RCC_OscConfig+0x4cc>)
 8006b06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b0c:	f7fc fff0 	bl	8003af0 <HAL_GetTick>
 8006b10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b12:	e008      	b.n	8006b26 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b14:	f7fc ffec 	bl	8003af0 <HAL_GetTick>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	d901      	bls.n	8006b26 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006b22:	2303      	movs	r3, #3
 8006b24:	e057      	b.n	8006bd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b26:	4b10      	ldr	r3, [pc, #64]	; (8006b68 <HAL_RCC_OscConfig+0x4cc>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d0f0      	beq.n	8006b14 <HAL_RCC_OscConfig+0x478>
 8006b32:	e04f      	b.n	8006bd4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b34:	4b0c      	ldr	r3, [pc, #48]	; (8006b68 <HAL_RCC_OscConfig+0x4cc>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a0b      	ldr	r2, [pc, #44]	; (8006b68 <HAL_RCC_OscConfig+0x4cc>)
 8006b3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b40:	f7fc ffd6 	bl	8003af0 <HAL_GetTick>
 8006b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b46:	e008      	b.n	8006b5a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b48:	f7fc ffd2 	bl	8003af0 <HAL_GetTick>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	1ad3      	subs	r3, r2, r3
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d901      	bls.n	8006b5a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006b56:	2303      	movs	r3, #3
 8006b58:	e03d      	b.n	8006bd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b5a:	4b03      	ldr	r3, [pc, #12]	; (8006b68 <HAL_RCC_OscConfig+0x4cc>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1f0      	bne.n	8006b48 <HAL_RCC_OscConfig+0x4ac>
 8006b66:	e035      	b.n	8006bd4 <HAL_RCC_OscConfig+0x538>
 8006b68:	40023800 	.word	0x40023800
 8006b6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006b70:	4b1b      	ldr	r3, [pc, #108]	; (8006be0 <HAL_RCC_OscConfig+0x544>)
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	699b      	ldr	r3, [r3, #24]
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d028      	beq.n	8006bd0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d121      	bne.n	8006bd0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d11a      	bne.n	8006bd0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006ba0:	4013      	ands	r3, r2
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006ba6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d111      	bne.n	8006bd0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb6:	085b      	lsrs	r3, r3, #1
 8006bb8:	3b01      	subs	r3, #1
 8006bba:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d107      	bne.n	8006bd0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bca:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d001      	beq.n	8006bd4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	e000      	b.n	8006bd6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006bd4:	2300      	movs	r3, #0
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3718      	adds	r7, #24
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	bf00      	nop
 8006be0:	40023800 	.word	0x40023800

08006be4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d101      	bne.n	8006bfc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e0d0      	b.n	8006d9e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006bfc:	4b6a      	ldr	r3, [pc, #424]	; (8006da8 <HAL_RCC_ClockConfig+0x1c4>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f003 030f 	and.w	r3, r3, #15
 8006c04:	683a      	ldr	r2, [r7, #0]
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d910      	bls.n	8006c2c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c0a:	4b67      	ldr	r3, [pc, #412]	; (8006da8 <HAL_RCC_ClockConfig+0x1c4>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f023 020f 	bic.w	r2, r3, #15
 8006c12:	4965      	ldr	r1, [pc, #404]	; (8006da8 <HAL_RCC_ClockConfig+0x1c4>)
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c1a:	4b63      	ldr	r3, [pc, #396]	; (8006da8 <HAL_RCC_ClockConfig+0x1c4>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 030f 	and.w	r3, r3, #15
 8006c22:	683a      	ldr	r2, [r7, #0]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d001      	beq.n	8006c2c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	e0b8      	b.n	8006d9e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 0302 	and.w	r3, r3, #2
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d020      	beq.n	8006c7a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 0304 	and.w	r3, r3, #4
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d005      	beq.n	8006c50 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c44:	4b59      	ldr	r3, [pc, #356]	; (8006dac <HAL_RCC_ClockConfig+0x1c8>)
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	4a58      	ldr	r2, [pc, #352]	; (8006dac <HAL_RCC_ClockConfig+0x1c8>)
 8006c4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006c4e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 0308 	and.w	r3, r3, #8
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d005      	beq.n	8006c68 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c5c:	4b53      	ldr	r3, [pc, #332]	; (8006dac <HAL_RCC_ClockConfig+0x1c8>)
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	4a52      	ldr	r2, [pc, #328]	; (8006dac <HAL_RCC_ClockConfig+0x1c8>)
 8006c62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006c66:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c68:	4b50      	ldr	r3, [pc, #320]	; (8006dac <HAL_RCC_ClockConfig+0x1c8>)
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	494d      	ldr	r1, [pc, #308]	; (8006dac <HAL_RCC_ClockConfig+0x1c8>)
 8006c76:	4313      	orrs	r3, r2
 8006c78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f003 0301 	and.w	r3, r3, #1
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d040      	beq.n	8006d08 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d107      	bne.n	8006c9e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c8e:	4b47      	ldr	r3, [pc, #284]	; (8006dac <HAL_RCC_ClockConfig+0x1c8>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d115      	bne.n	8006cc6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e07f      	b.n	8006d9e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	2b02      	cmp	r3, #2
 8006ca4:	d107      	bne.n	8006cb6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ca6:	4b41      	ldr	r3, [pc, #260]	; (8006dac <HAL_RCC_ClockConfig+0x1c8>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d109      	bne.n	8006cc6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e073      	b.n	8006d9e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cb6:	4b3d      	ldr	r3, [pc, #244]	; (8006dac <HAL_RCC_ClockConfig+0x1c8>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f003 0302 	and.w	r3, r3, #2
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d101      	bne.n	8006cc6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e06b      	b.n	8006d9e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006cc6:	4b39      	ldr	r3, [pc, #228]	; (8006dac <HAL_RCC_ClockConfig+0x1c8>)
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	f023 0203 	bic.w	r2, r3, #3
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	4936      	ldr	r1, [pc, #216]	; (8006dac <HAL_RCC_ClockConfig+0x1c8>)
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cd8:	f7fc ff0a 	bl	8003af0 <HAL_GetTick>
 8006cdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cde:	e00a      	b.n	8006cf6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ce0:	f7fc ff06 	bl	8003af0 <HAL_GetTick>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	1ad3      	subs	r3, r2, r3
 8006cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d901      	bls.n	8006cf6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006cf2:	2303      	movs	r3, #3
 8006cf4:	e053      	b.n	8006d9e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cf6:	4b2d      	ldr	r3, [pc, #180]	; (8006dac <HAL_RCC_ClockConfig+0x1c8>)
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	f003 020c 	and.w	r2, r3, #12
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d1eb      	bne.n	8006ce0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006d08:	4b27      	ldr	r3, [pc, #156]	; (8006da8 <HAL_RCC_ClockConfig+0x1c4>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f003 030f 	and.w	r3, r3, #15
 8006d10:	683a      	ldr	r2, [r7, #0]
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d210      	bcs.n	8006d38 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d16:	4b24      	ldr	r3, [pc, #144]	; (8006da8 <HAL_RCC_ClockConfig+0x1c4>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f023 020f 	bic.w	r2, r3, #15
 8006d1e:	4922      	ldr	r1, [pc, #136]	; (8006da8 <HAL_RCC_ClockConfig+0x1c4>)
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d26:	4b20      	ldr	r3, [pc, #128]	; (8006da8 <HAL_RCC_ClockConfig+0x1c4>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 030f 	and.w	r3, r3, #15
 8006d2e:	683a      	ldr	r2, [r7, #0]
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d001      	beq.n	8006d38 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	e032      	b.n	8006d9e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 0304 	and.w	r3, r3, #4
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d008      	beq.n	8006d56 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d44:	4b19      	ldr	r3, [pc, #100]	; (8006dac <HAL_RCC_ClockConfig+0x1c8>)
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	4916      	ldr	r1, [pc, #88]	; (8006dac <HAL_RCC_ClockConfig+0x1c8>)
 8006d52:	4313      	orrs	r3, r2
 8006d54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 0308 	and.w	r3, r3, #8
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d009      	beq.n	8006d76 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006d62:	4b12      	ldr	r3, [pc, #72]	; (8006dac <HAL_RCC_ClockConfig+0x1c8>)
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	00db      	lsls	r3, r3, #3
 8006d70:	490e      	ldr	r1, [pc, #56]	; (8006dac <HAL_RCC_ClockConfig+0x1c8>)
 8006d72:	4313      	orrs	r3, r2
 8006d74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006d76:	f000 f821 	bl	8006dbc <HAL_RCC_GetSysClockFreq>
 8006d7a:	4601      	mov	r1, r0
 8006d7c:	4b0b      	ldr	r3, [pc, #44]	; (8006dac <HAL_RCC_ClockConfig+0x1c8>)
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	091b      	lsrs	r3, r3, #4
 8006d82:	f003 030f 	and.w	r3, r3, #15
 8006d86:	4a0a      	ldr	r2, [pc, #40]	; (8006db0 <HAL_RCC_ClockConfig+0x1cc>)
 8006d88:	5cd3      	ldrb	r3, [r2, r3]
 8006d8a:	fa21 f303 	lsr.w	r3, r1, r3
 8006d8e:	4a09      	ldr	r2, [pc, #36]	; (8006db4 <HAL_RCC_ClockConfig+0x1d0>)
 8006d90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006d92:	4b09      	ldr	r3, [pc, #36]	; (8006db8 <HAL_RCC_ClockConfig+0x1d4>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4618      	mov	r0, r3
 8006d98:	f7fc fcf4 	bl	8003784 <HAL_InitTick>

  return HAL_OK;
 8006d9c:	2300      	movs	r3, #0
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3710      	adds	r7, #16
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	40023c00 	.word	0x40023c00
 8006dac:	40023800 	.word	0x40023800
 8006db0:	080263c0 	.word	0x080263c0
 8006db4:	20000018 	.word	0x20000018
 8006db8:	2000001c 	.word	0x2000001c

08006dbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dbe:	b085      	sub	sp, #20
 8006dc0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	607b      	str	r3, [r7, #4]
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	60fb      	str	r3, [r7, #12]
 8006dca:	2300      	movs	r3, #0
 8006dcc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006dd2:	4b50      	ldr	r3, [pc, #320]	; (8006f14 <HAL_RCC_GetSysClockFreq+0x158>)
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	f003 030c 	and.w	r3, r3, #12
 8006dda:	2b04      	cmp	r3, #4
 8006ddc:	d007      	beq.n	8006dee <HAL_RCC_GetSysClockFreq+0x32>
 8006dde:	2b08      	cmp	r3, #8
 8006de0:	d008      	beq.n	8006df4 <HAL_RCC_GetSysClockFreq+0x38>
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	f040 808d 	bne.w	8006f02 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006de8:	4b4b      	ldr	r3, [pc, #300]	; (8006f18 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006dea:	60bb      	str	r3, [r7, #8]
      break;
 8006dec:	e08c      	b.n	8006f08 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006dee:	4b4b      	ldr	r3, [pc, #300]	; (8006f1c <HAL_RCC_GetSysClockFreq+0x160>)
 8006df0:	60bb      	str	r3, [r7, #8]
      break;
 8006df2:	e089      	b.n	8006f08 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006df4:	4b47      	ldr	r3, [pc, #284]	; (8006f14 <HAL_RCC_GetSysClockFreq+0x158>)
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006dfc:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006dfe:	4b45      	ldr	r3, [pc, #276]	; (8006f14 <HAL_RCC_GetSysClockFreq+0x158>)
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d023      	beq.n	8006e52 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e0a:	4b42      	ldr	r3, [pc, #264]	; (8006f14 <HAL_RCC_GetSysClockFreq+0x158>)
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	099b      	lsrs	r3, r3, #6
 8006e10:	f04f 0400 	mov.w	r4, #0
 8006e14:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006e18:	f04f 0200 	mov.w	r2, #0
 8006e1c:	ea03 0501 	and.w	r5, r3, r1
 8006e20:	ea04 0602 	and.w	r6, r4, r2
 8006e24:	4a3d      	ldr	r2, [pc, #244]	; (8006f1c <HAL_RCC_GetSysClockFreq+0x160>)
 8006e26:	fb02 f106 	mul.w	r1, r2, r6
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	fb02 f205 	mul.w	r2, r2, r5
 8006e30:	440a      	add	r2, r1
 8006e32:	493a      	ldr	r1, [pc, #232]	; (8006f1c <HAL_RCC_GetSysClockFreq+0x160>)
 8006e34:	fba5 0101 	umull	r0, r1, r5, r1
 8006e38:	1853      	adds	r3, r2, r1
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f04f 0400 	mov.w	r4, #0
 8006e42:	461a      	mov	r2, r3
 8006e44:	4623      	mov	r3, r4
 8006e46:	f7f9 fcc7 	bl	80007d8 <__aeabi_uldivmod>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	460c      	mov	r4, r1
 8006e4e:	60fb      	str	r3, [r7, #12]
 8006e50:	e049      	b.n	8006ee6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e52:	4b30      	ldr	r3, [pc, #192]	; (8006f14 <HAL_RCC_GetSysClockFreq+0x158>)
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	099b      	lsrs	r3, r3, #6
 8006e58:	f04f 0400 	mov.w	r4, #0
 8006e5c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006e60:	f04f 0200 	mov.w	r2, #0
 8006e64:	ea03 0501 	and.w	r5, r3, r1
 8006e68:	ea04 0602 	and.w	r6, r4, r2
 8006e6c:	4629      	mov	r1, r5
 8006e6e:	4632      	mov	r2, r6
 8006e70:	f04f 0300 	mov.w	r3, #0
 8006e74:	f04f 0400 	mov.w	r4, #0
 8006e78:	0154      	lsls	r4, r2, #5
 8006e7a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006e7e:	014b      	lsls	r3, r1, #5
 8006e80:	4619      	mov	r1, r3
 8006e82:	4622      	mov	r2, r4
 8006e84:	1b49      	subs	r1, r1, r5
 8006e86:	eb62 0206 	sbc.w	r2, r2, r6
 8006e8a:	f04f 0300 	mov.w	r3, #0
 8006e8e:	f04f 0400 	mov.w	r4, #0
 8006e92:	0194      	lsls	r4, r2, #6
 8006e94:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006e98:	018b      	lsls	r3, r1, #6
 8006e9a:	1a5b      	subs	r3, r3, r1
 8006e9c:	eb64 0402 	sbc.w	r4, r4, r2
 8006ea0:	f04f 0100 	mov.w	r1, #0
 8006ea4:	f04f 0200 	mov.w	r2, #0
 8006ea8:	00e2      	lsls	r2, r4, #3
 8006eaa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006eae:	00d9      	lsls	r1, r3, #3
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	4614      	mov	r4, r2
 8006eb4:	195b      	adds	r3, r3, r5
 8006eb6:	eb44 0406 	adc.w	r4, r4, r6
 8006eba:	f04f 0100 	mov.w	r1, #0
 8006ebe:	f04f 0200 	mov.w	r2, #0
 8006ec2:	02a2      	lsls	r2, r4, #10
 8006ec4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006ec8:	0299      	lsls	r1, r3, #10
 8006eca:	460b      	mov	r3, r1
 8006ecc:	4614      	mov	r4, r2
 8006ece:	4618      	mov	r0, r3
 8006ed0:	4621      	mov	r1, r4
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f04f 0400 	mov.w	r4, #0
 8006ed8:	461a      	mov	r2, r3
 8006eda:	4623      	mov	r3, r4
 8006edc:	f7f9 fc7c 	bl	80007d8 <__aeabi_uldivmod>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	460c      	mov	r4, r1
 8006ee4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006ee6:	4b0b      	ldr	r3, [pc, #44]	; (8006f14 <HAL_RCC_GetSysClockFreq+0x158>)
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	0c1b      	lsrs	r3, r3, #16
 8006eec:	f003 0303 	and.w	r3, r3, #3
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	005b      	lsls	r3, r3, #1
 8006ef4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8006ef6:	68fa      	ldr	r2, [r7, #12]
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006efe:	60bb      	str	r3, [r7, #8]
      break;
 8006f00:	e002      	b.n	8006f08 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006f02:	4b05      	ldr	r3, [pc, #20]	; (8006f18 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006f04:	60bb      	str	r3, [r7, #8]
      break;
 8006f06:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f08:	68bb      	ldr	r3, [r7, #8]
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3714      	adds	r7, #20
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f12:	bf00      	nop
 8006f14:	40023800 	.word	0x40023800
 8006f18:	00f42400 	.word	0x00f42400
 8006f1c:	017d7840 	.word	0x017d7840

08006f20 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f20:	b480      	push	{r7}
 8006f22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f24:	4b03      	ldr	r3, [pc, #12]	; (8006f34 <HAL_RCC_GetHCLKFreq+0x14>)
 8006f26:	681b      	ldr	r3, [r3, #0]
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr
 8006f32:	bf00      	nop
 8006f34:	20000018 	.word	0x20000018

08006f38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006f3c:	f7ff fff0 	bl	8006f20 <HAL_RCC_GetHCLKFreq>
 8006f40:	4601      	mov	r1, r0
 8006f42:	4b05      	ldr	r3, [pc, #20]	; (8006f58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	0a9b      	lsrs	r3, r3, #10
 8006f48:	f003 0307 	and.w	r3, r3, #7
 8006f4c:	4a03      	ldr	r2, [pc, #12]	; (8006f5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f4e:	5cd3      	ldrb	r3, [r2, r3]
 8006f50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	bd80      	pop	{r7, pc}
 8006f58:	40023800 	.word	0x40023800
 8006f5c:	080263d0 	.word	0x080263d0

08006f60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006f64:	f7ff ffdc 	bl	8006f20 <HAL_RCC_GetHCLKFreq>
 8006f68:	4601      	mov	r1, r0
 8006f6a:	4b05      	ldr	r3, [pc, #20]	; (8006f80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	0b5b      	lsrs	r3, r3, #13
 8006f70:	f003 0307 	and.w	r3, r3, #7
 8006f74:	4a03      	ldr	r2, [pc, #12]	; (8006f84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f76:	5cd3      	ldrb	r3, [r2, r3]
 8006f78:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	40023800 	.word	0x40023800
 8006f84:	080263d0 	.word	0x080263d0

08006f88 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	220f      	movs	r2, #15
 8006f96:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006f98:	4b12      	ldr	r3, [pc, #72]	; (8006fe4 <HAL_RCC_GetClockConfig+0x5c>)
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	f003 0203 	and.w	r2, r3, #3
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006fa4:	4b0f      	ldr	r3, [pc, #60]	; (8006fe4 <HAL_RCC_GetClockConfig+0x5c>)
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006fb0:	4b0c      	ldr	r3, [pc, #48]	; (8006fe4 <HAL_RCC_GetClockConfig+0x5c>)
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006fbc:	4b09      	ldr	r3, [pc, #36]	; (8006fe4 <HAL_RCC_GetClockConfig+0x5c>)
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	08db      	lsrs	r3, r3, #3
 8006fc2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006fca:	4b07      	ldr	r3, [pc, #28]	; (8006fe8 <HAL_RCC_GetClockConfig+0x60>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f003 020f 	and.w	r2, r3, #15
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	601a      	str	r2, [r3, #0]
}
 8006fd6:	bf00      	nop
 8006fd8:	370c      	adds	r7, #12
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	40023800 	.word	0x40023800
 8006fe8:	40023c00 	.word	0x40023c00

08006fec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b088      	sub	sp, #32
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007000:	2300      	movs	r3, #0
 8007002:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007004:	2300      	movs	r3, #0
 8007006:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 0301 	and.w	r3, r3, #1
 8007010:	2b00      	cmp	r3, #0
 8007012:	d012      	beq.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007014:	4b69      	ldr	r3, [pc, #420]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	4a68      	ldr	r2, [pc, #416]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800701a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800701e:	6093      	str	r3, [r2, #8]
 8007020:	4b66      	ldr	r3, [pc, #408]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007022:	689a      	ldr	r2, [r3, #8]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007028:	4964      	ldr	r1, [pc, #400]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800702a:	4313      	orrs	r3, r2
 800702c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007032:	2b00      	cmp	r3, #0
 8007034:	d101      	bne.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007036:	2301      	movs	r3, #1
 8007038:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007042:	2b00      	cmp	r3, #0
 8007044:	d017      	beq.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007046:	4b5d      	ldr	r3, [pc, #372]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007048:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800704c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007054:	4959      	ldr	r1, [pc, #356]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007056:	4313      	orrs	r3, r2
 8007058:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007060:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007064:	d101      	bne.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007066:	2301      	movs	r3, #1
 8007068:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800706e:	2b00      	cmp	r3, #0
 8007070:	d101      	bne.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007072:	2301      	movs	r3, #1
 8007074:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800707e:	2b00      	cmp	r3, #0
 8007080:	d017      	beq.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007082:	4b4e      	ldr	r3, [pc, #312]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007084:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007088:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007090:	494a      	ldr	r1, [pc, #296]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007092:	4313      	orrs	r3, r2
 8007094:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800709c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070a0:	d101      	bne.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80070a2:	2301      	movs	r3, #1
 80070a4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d101      	bne.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80070ae:	2301      	movs	r3, #1
 80070b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d001      	beq.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80070be:	2301      	movs	r3, #1
 80070c0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f003 0320 	and.w	r3, r3, #32
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	f000 808b 	beq.w	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80070d0:	4b3a      	ldr	r3, [pc, #232]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d4:	4a39      	ldr	r2, [pc, #228]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070da:	6413      	str	r3, [r2, #64]	; 0x40
 80070dc:	4b37      	ldr	r3, [pc, #220]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070e4:	60bb      	str	r3, [r7, #8]
 80070e6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80070e8:	4b35      	ldr	r3, [pc, #212]	; (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a34      	ldr	r2, [pc, #208]	; (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80070ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070f4:	f7fc fcfc 	bl	8003af0 <HAL_GetTick>
 80070f8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80070fa:	e008      	b.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070fc:	f7fc fcf8 	bl	8003af0 <HAL_GetTick>
 8007100:	4602      	mov	r2, r0
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	1ad3      	subs	r3, r2, r3
 8007106:	2b64      	cmp	r3, #100	; 0x64
 8007108:	d901      	bls.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800710a:	2303      	movs	r3, #3
 800710c:	e355      	b.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800710e:	4b2c      	ldr	r3, [pc, #176]	; (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007116:	2b00      	cmp	r3, #0
 8007118:	d0f0      	beq.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800711a:	4b28      	ldr	r3, [pc, #160]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800711c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800711e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007122:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d035      	beq.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800712e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007132:	693a      	ldr	r2, [r7, #16]
 8007134:	429a      	cmp	r2, r3
 8007136:	d02e      	beq.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007138:	4b20      	ldr	r3, [pc, #128]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800713a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800713c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007140:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007142:	4b1e      	ldr	r3, [pc, #120]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007146:	4a1d      	ldr	r2, [pc, #116]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800714c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800714e:	4b1b      	ldr	r3, [pc, #108]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007152:	4a1a      	ldr	r2, [pc, #104]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007154:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007158:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800715a:	4a18      	ldr	r2, [pc, #96]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007160:	4b16      	ldr	r3, [pc, #88]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007164:	f003 0301 	and.w	r3, r3, #1
 8007168:	2b01      	cmp	r3, #1
 800716a:	d114      	bne.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800716c:	f7fc fcc0 	bl	8003af0 <HAL_GetTick>
 8007170:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007172:	e00a      	b.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007174:	f7fc fcbc 	bl	8003af0 <HAL_GetTick>
 8007178:	4602      	mov	r2, r0
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	1ad3      	subs	r3, r2, r3
 800717e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007182:	4293      	cmp	r3, r2
 8007184:	d901      	bls.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007186:	2303      	movs	r3, #3
 8007188:	e317      	b.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800718a:	4b0c      	ldr	r3, [pc, #48]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800718c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800718e:	f003 0302 	and.w	r3, r3, #2
 8007192:	2b00      	cmp	r3, #0
 8007194:	d0ee      	beq.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800719a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800719e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071a2:	d111      	bne.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80071a4:	4b05      	ldr	r3, [pc, #20]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80071b0:	4b04      	ldr	r3, [pc, #16]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80071b2:	400b      	ands	r3, r1
 80071b4:	4901      	ldr	r1, [pc, #4]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071b6:	4313      	orrs	r3, r2
 80071b8:	608b      	str	r3, [r1, #8]
 80071ba:	e00b      	b.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80071bc:	40023800 	.word	0x40023800
 80071c0:	40007000 	.word	0x40007000
 80071c4:	0ffffcff 	.word	0x0ffffcff
 80071c8:	4bb0      	ldr	r3, [pc, #704]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	4aaf      	ldr	r2, [pc, #700]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80071ce:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80071d2:	6093      	str	r3, [r2, #8]
 80071d4:	4bad      	ldr	r3, [pc, #692]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80071d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071e0:	49aa      	ldr	r1, [pc, #680]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80071e2:	4313      	orrs	r3, r2
 80071e4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f003 0310 	and.w	r3, r3, #16
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d010      	beq.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80071f2:	4ba6      	ldr	r3, [pc, #664]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80071f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071f8:	4aa4      	ldr	r2, [pc, #656]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80071fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80071fe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007202:	4ba2      	ldr	r3, [pc, #648]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007204:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800720c:	499f      	ldr	r1, [pc, #636]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800720e:	4313      	orrs	r3, r2
 8007210:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800721c:	2b00      	cmp	r3, #0
 800721e:	d00a      	beq.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007220:	4b9a      	ldr	r3, [pc, #616]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007226:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800722e:	4997      	ldr	r1, [pc, #604]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007230:	4313      	orrs	r3, r2
 8007232:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800723e:	2b00      	cmp	r3, #0
 8007240:	d00a      	beq.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007242:	4b92      	ldr	r3, [pc, #584]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007248:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007250:	498e      	ldr	r1, [pc, #568]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007252:	4313      	orrs	r3, r2
 8007254:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007260:	2b00      	cmp	r3, #0
 8007262:	d00a      	beq.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007264:	4b89      	ldr	r3, [pc, #548]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800726a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007272:	4986      	ldr	r1, [pc, #536]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007274:	4313      	orrs	r3, r2
 8007276:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007282:	2b00      	cmp	r3, #0
 8007284:	d00a      	beq.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007286:	4b81      	ldr	r3, [pc, #516]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800728c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007294:	497d      	ldr	r1, [pc, #500]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007296:	4313      	orrs	r3, r2
 8007298:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d00a      	beq.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80072a8:	4b78      	ldr	r3, [pc, #480]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80072aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072ae:	f023 0203 	bic.w	r2, r3, #3
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072b6:	4975      	ldr	r1, [pc, #468]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80072b8:	4313      	orrs	r3, r2
 80072ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d00a      	beq.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80072ca:	4b70      	ldr	r3, [pc, #448]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80072cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072d0:	f023 020c 	bic.w	r2, r3, #12
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072d8:	496c      	ldr	r1, [pc, #432]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80072da:	4313      	orrs	r3, r2
 80072dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d00a      	beq.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80072ec:	4b67      	ldr	r3, [pc, #412]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80072ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072f2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072fa:	4964      	ldr	r1, [pc, #400]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80072fc:	4313      	orrs	r3, r2
 80072fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00a      	beq.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800730e:	4b5f      	ldr	r3, [pc, #380]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007314:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800731c:	495b      	ldr	r1, [pc, #364]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800731e:	4313      	orrs	r3, r2
 8007320:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800732c:	2b00      	cmp	r3, #0
 800732e:	d00a      	beq.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007330:	4b56      	ldr	r3, [pc, #344]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007336:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800733e:	4953      	ldr	r1, [pc, #332]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007340:	4313      	orrs	r3, r2
 8007342:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800734e:	2b00      	cmp	r3, #0
 8007350:	d00a      	beq.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007352:	4b4e      	ldr	r3, [pc, #312]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007358:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007360:	494a      	ldr	r1, [pc, #296]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007362:	4313      	orrs	r3, r2
 8007364:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007370:	2b00      	cmp	r3, #0
 8007372:	d00a      	beq.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007374:	4b45      	ldr	r3, [pc, #276]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800737a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007382:	4942      	ldr	r1, [pc, #264]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007384:	4313      	orrs	r3, r2
 8007386:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007392:	2b00      	cmp	r3, #0
 8007394:	d00a      	beq.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007396:	4b3d      	ldr	r3, [pc, #244]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800739c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073a4:	4939      	ldr	r1, [pc, #228]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80073a6:	4313      	orrs	r3, r2
 80073a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d00a      	beq.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80073b8:	4b34      	ldr	r3, [pc, #208]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80073ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073be:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073c6:	4931      	ldr	r1, [pc, #196]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80073c8:	4313      	orrs	r3, r2
 80073ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d011      	beq.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80073da:	4b2c      	ldr	r3, [pc, #176]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80073dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073e0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073e8:	4928      	ldr	r1, [pc, #160]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80073ea:	4313      	orrs	r3, r2
 80073ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073f8:	d101      	bne.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80073fa:	2301      	movs	r3, #1
 80073fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f003 0308 	and.w	r3, r3, #8
 8007406:	2b00      	cmp	r3, #0
 8007408:	d001      	beq.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800740a:	2301      	movs	r3, #1
 800740c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007416:	2b00      	cmp	r3, #0
 8007418:	d00a      	beq.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800741a:	4b1c      	ldr	r3, [pc, #112]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800741c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007420:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007428:	4918      	ldr	r1, [pc, #96]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800742a:	4313      	orrs	r3, r2
 800742c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007438:	2b00      	cmp	r3, #0
 800743a:	d00b      	beq.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800743c:	4b13      	ldr	r3, [pc, #76]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800743e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007442:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800744c:	490f      	ldr	r1, [pc, #60]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800744e:	4313      	orrs	r3, r2
 8007450:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	2b01      	cmp	r3, #1
 8007458:	d005      	beq.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007462:	f040 80d8 	bne.w	8007616 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007466:	4b09      	ldr	r3, [pc, #36]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a08      	ldr	r2, [pc, #32]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800746c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007470:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007472:	f7fc fb3d 	bl	8003af0 <HAL_GetTick>
 8007476:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007478:	e00a      	b.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800747a:	f7fc fb39 	bl	8003af0 <HAL_GetTick>
 800747e:	4602      	mov	r2, r0
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	1ad3      	subs	r3, r2, r3
 8007484:	2b64      	cmp	r3, #100	; 0x64
 8007486:	d903      	bls.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007488:	2303      	movs	r3, #3
 800748a:	e196      	b.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800748c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007490:	4b6c      	ldr	r3, [pc, #432]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007498:	2b00      	cmp	r3, #0
 800749a:	d1ee      	bne.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f003 0301 	and.w	r3, r3, #1
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d021      	beq.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x500>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d11d      	bne.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80074b0:	4b64      	ldr	r3, [pc, #400]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80074b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074b6:	0c1b      	lsrs	r3, r3, #16
 80074b8:	f003 0303 	and.w	r3, r3, #3
 80074bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80074be:	4b61      	ldr	r3, [pc, #388]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80074c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074c4:	0e1b      	lsrs	r3, r3, #24
 80074c6:	f003 030f 	and.w	r3, r3, #15
 80074ca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	019a      	lsls	r2, r3, #6
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	041b      	lsls	r3, r3, #16
 80074d6:	431a      	orrs	r2, r3
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	061b      	lsls	r3, r3, #24
 80074dc:	431a      	orrs	r2, r3
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	071b      	lsls	r3, r3, #28
 80074e4:	4957      	ldr	r1, [pc, #348]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80074e6:	4313      	orrs	r3, r2
 80074e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d004      	beq.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x516>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007500:	d00a      	beq.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800750a:	2b00      	cmp	r3, #0
 800750c:	d02e      	beq.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007512:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007516:	d129      	bne.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007518:	4b4a      	ldr	r3, [pc, #296]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800751a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800751e:	0c1b      	lsrs	r3, r3, #16
 8007520:	f003 0303 	and.w	r3, r3, #3
 8007524:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007526:	4b47      	ldr	r3, [pc, #284]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007528:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800752c:	0f1b      	lsrs	r3, r3, #28
 800752e:	f003 0307 	and.w	r3, r3, #7
 8007532:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	019a      	lsls	r2, r3, #6
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	041b      	lsls	r3, r3, #16
 800753e:	431a      	orrs	r2, r3
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	061b      	lsls	r3, r3, #24
 8007546:	431a      	orrs	r2, r3
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	071b      	lsls	r3, r3, #28
 800754c:	493d      	ldr	r1, [pc, #244]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800754e:	4313      	orrs	r3, r2
 8007550:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007554:	4b3b      	ldr	r3, [pc, #236]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007556:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800755a:	f023 021f 	bic.w	r2, r3, #31
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007562:	3b01      	subs	r3, #1
 8007564:	4937      	ldr	r1, [pc, #220]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007566:	4313      	orrs	r3, r2
 8007568:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007574:	2b00      	cmp	r3, #0
 8007576:	d01d      	beq.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007578:	4b32      	ldr	r3, [pc, #200]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800757a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800757e:	0e1b      	lsrs	r3, r3, #24
 8007580:	f003 030f 	and.w	r3, r3, #15
 8007584:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007586:	4b2f      	ldr	r3, [pc, #188]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007588:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800758c:	0f1b      	lsrs	r3, r3, #28
 800758e:	f003 0307 	and.w	r3, r3, #7
 8007592:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	019a      	lsls	r2, r3, #6
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	691b      	ldr	r3, [r3, #16]
 800759e:	041b      	lsls	r3, r3, #16
 80075a0:	431a      	orrs	r2, r3
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	061b      	lsls	r3, r3, #24
 80075a6:	431a      	orrs	r2, r3
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	071b      	lsls	r3, r3, #28
 80075ac:	4925      	ldr	r1, [pc, #148]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80075ae:	4313      	orrs	r3, r2
 80075b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d011      	beq.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	019a      	lsls	r2, r3, #6
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	691b      	ldr	r3, [r3, #16]
 80075ca:	041b      	lsls	r3, r3, #16
 80075cc:	431a      	orrs	r2, r3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	68db      	ldr	r3, [r3, #12]
 80075d2:	061b      	lsls	r3, r3, #24
 80075d4:	431a      	orrs	r2, r3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	071b      	lsls	r3, r3, #28
 80075dc:	4919      	ldr	r1, [pc, #100]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80075de:	4313      	orrs	r3, r2
 80075e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80075e4:	4b17      	ldr	r3, [pc, #92]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a16      	ldr	r2, [pc, #88]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80075ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80075ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075f0:	f7fc fa7e 	bl	8003af0 <HAL_GetTick>
 80075f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80075f6:	e008      	b.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80075f8:	f7fc fa7a 	bl	8003af0 <HAL_GetTick>
 80075fc:	4602      	mov	r2, r0
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	1ad3      	subs	r3, r2, r3
 8007602:	2b64      	cmp	r3, #100	; 0x64
 8007604:	d901      	bls.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007606:	2303      	movs	r3, #3
 8007608:	e0d7      	b.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800760a:	4b0e      	ldr	r3, [pc, #56]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007612:	2b00      	cmp	r3, #0
 8007614:	d0f0      	beq.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007616:	69bb      	ldr	r3, [r7, #24]
 8007618:	2b01      	cmp	r3, #1
 800761a:	f040 80cd 	bne.w	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800761e:	4b09      	ldr	r3, [pc, #36]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a08      	ldr	r2, [pc, #32]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007624:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007628:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800762a:	f7fc fa61 	bl	8003af0 <HAL_GetTick>
 800762e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007630:	e00a      	b.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007632:	f7fc fa5d 	bl	8003af0 <HAL_GetTick>
 8007636:	4602      	mov	r2, r0
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	1ad3      	subs	r3, r2, r3
 800763c:	2b64      	cmp	r3, #100	; 0x64
 800763e:	d903      	bls.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007640:	2303      	movs	r3, #3
 8007642:	e0ba      	b.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8007644:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007648:	4b5e      	ldr	r3, [pc, #376]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007650:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007654:	d0ed      	beq.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800765e:	2b00      	cmp	r3, #0
 8007660:	d003      	beq.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007666:	2b00      	cmp	r3, #0
 8007668:	d009      	beq.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007672:	2b00      	cmp	r3, #0
 8007674:	d02e      	beq.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800767a:	2b00      	cmp	r3, #0
 800767c:	d12a      	bne.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800767e:	4b51      	ldr	r3, [pc, #324]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007684:	0c1b      	lsrs	r3, r3, #16
 8007686:	f003 0303 	and.w	r3, r3, #3
 800768a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800768c:	4b4d      	ldr	r3, [pc, #308]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800768e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007692:	0f1b      	lsrs	r3, r3, #28
 8007694:	f003 0307 	and.w	r3, r3, #7
 8007698:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	695b      	ldr	r3, [r3, #20]
 800769e:	019a      	lsls	r2, r3, #6
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	041b      	lsls	r3, r3, #16
 80076a4:	431a      	orrs	r2, r3
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	699b      	ldr	r3, [r3, #24]
 80076aa:	061b      	lsls	r3, r3, #24
 80076ac:	431a      	orrs	r2, r3
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	071b      	lsls	r3, r3, #28
 80076b2:	4944      	ldr	r1, [pc, #272]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80076b4:	4313      	orrs	r3, r2
 80076b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80076ba:	4b42      	ldr	r3, [pc, #264]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80076bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076c0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076c8:	3b01      	subs	r3, #1
 80076ca:	021b      	lsls	r3, r3, #8
 80076cc:	493d      	ldr	r1, [pc, #244]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80076ce:	4313      	orrs	r3, r2
 80076d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d022      	beq.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076e8:	d11d      	bne.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80076ea:	4b36      	ldr	r3, [pc, #216]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80076ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076f0:	0e1b      	lsrs	r3, r3, #24
 80076f2:	f003 030f 	and.w	r3, r3, #15
 80076f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80076f8:	4b32      	ldr	r3, [pc, #200]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80076fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076fe:	0f1b      	lsrs	r3, r3, #28
 8007700:	f003 0307 	and.w	r3, r3, #7
 8007704:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	695b      	ldr	r3, [r3, #20]
 800770a:	019a      	lsls	r2, r3, #6
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6a1b      	ldr	r3, [r3, #32]
 8007710:	041b      	lsls	r3, r3, #16
 8007712:	431a      	orrs	r2, r3
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	061b      	lsls	r3, r3, #24
 8007718:	431a      	orrs	r2, r3
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	071b      	lsls	r3, r3, #28
 800771e:	4929      	ldr	r1, [pc, #164]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007720:	4313      	orrs	r3, r2
 8007722:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f003 0308 	and.w	r3, r3, #8
 800772e:	2b00      	cmp	r3, #0
 8007730:	d028      	beq.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007732:	4b24      	ldr	r3, [pc, #144]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007738:	0e1b      	lsrs	r3, r3, #24
 800773a:	f003 030f 	and.w	r3, r3, #15
 800773e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007740:	4b20      	ldr	r3, [pc, #128]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007746:	0c1b      	lsrs	r3, r3, #16
 8007748:	f003 0303 	and.w	r3, r3, #3
 800774c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	695b      	ldr	r3, [r3, #20]
 8007752:	019a      	lsls	r2, r3, #6
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	041b      	lsls	r3, r3, #16
 8007758:	431a      	orrs	r2, r3
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	061b      	lsls	r3, r3, #24
 800775e:	431a      	orrs	r2, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	69db      	ldr	r3, [r3, #28]
 8007764:	071b      	lsls	r3, r3, #28
 8007766:	4917      	ldr	r1, [pc, #92]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007768:	4313      	orrs	r3, r2
 800776a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800776e:	4b15      	ldr	r3, [pc, #84]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007770:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007774:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800777c:	4911      	ldr	r1, [pc, #68]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800777e:	4313      	orrs	r3, r2
 8007780:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007784:	4b0f      	ldr	r3, [pc, #60]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a0e      	ldr	r2, [pc, #56]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800778a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800778e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007790:	f7fc f9ae 	bl	8003af0 <HAL_GetTick>
 8007794:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007796:	e008      	b.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007798:	f7fc f9aa 	bl	8003af0 <HAL_GetTick>
 800779c:	4602      	mov	r2, r0
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	1ad3      	subs	r3, r2, r3
 80077a2:	2b64      	cmp	r3, #100	; 0x64
 80077a4:	d901      	bls.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80077a6:	2303      	movs	r3, #3
 80077a8:	e007      	b.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80077aa:	4b06      	ldr	r3, [pc, #24]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80077b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077b6:	d1ef      	bne.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3720      	adds	r7, #32
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	40023800 	.word	0x40023800

080077c8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b087      	sub	sp, #28
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80077d0:	2300      	movs	r3, #0
 80077d2:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80077d4:	2300      	movs	r3, #0
 80077d6:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80077d8:	2300      	movs	r3, #0
 80077da:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80077dc:	2300      	movs	r3, #0
 80077de:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80077e6:	f040 8086 	bne.w	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 80077ea:	4b8d      	ldr	r3, [pc, #564]	; (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80077ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077f0:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80077f8:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007800:	d03e      	beq.n	8007880 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8007802:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007806:	d073      	beq.n	80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 8007808:	2b00      	cmp	r3, #0
 800780a:	d000      	beq.n	800780e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800780c:	e074      	b.n	80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800780e:	4b84      	ldr	r3, [pc, #528]	; (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007816:	2b00      	cmp	r3, #0
 8007818:	d108      	bne.n	800782c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800781a:	4b81      	ldr	r3, [pc, #516]	; (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007822:	4a80      	ldr	r2, [pc, #512]	; (8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8007824:	fbb2 f3f3 	udiv	r3, r2, r3
 8007828:	613b      	str	r3, [r7, #16]
 800782a:	e007      	b.n	800783c <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800782c:	4b7c      	ldr	r3, [pc, #496]	; (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007834:	4a7c      	ldr	r2, [pc, #496]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8007836:	fbb2 f3f3 	udiv	r3, r2, r3
 800783a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800783c:	4b78      	ldr	r3, [pc, #480]	; (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800783e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007842:	0e1b      	lsrs	r3, r3, #24
 8007844:	f003 030f 	and.w	r3, r3, #15
 8007848:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800784a:	4b75      	ldr	r3, [pc, #468]	; (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800784c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007850:	099b      	lsrs	r3, r3, #6
 8007852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007856:	693a      	ldr	r2, [r7, #16]
 8007858:	fb02 f203 	mul.w	r2, r2, r3
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007862:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007864:	4b6e      	ldr	r3, [pc, #440]	; (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007866:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800786a:	0a1b      	lsrs	r3, r3, #8
 800786c:	f003 031f 	and.w	r3, r3, #31
 8007870:	3301      	adds	r3, #1
 8007872:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007874:	697a      	ldr	r2, [r7, #20]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	fbb2 f3f3 	udiv	r3, r2, r3
 800787c:	617b      	str	r3, [r7, #20]
        break;
 800787e:	e03b      	b.n	80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007880:	4b67      	ldr	r3, [pc, #412]	; (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007888:	2b00      	cmp	r3, #0
 800788a:	d108      	bne.n	800789e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800788c:	4b64      	ldr	r3, [pc, #400]	; (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007894:	4a63      	ldr	r2, [pc, #396]	; (8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8007896:	fbb2 f3f3 	udiv	r3, r2, r3
 800789a:	613b      	str	r3, [r7, #16]
 800789c:	e007      	b.n	80078ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800789e:	4b60      	ldr	r3, [pc, #384]	; (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078a6:	4a60      	ldr	r2, [pc, #384]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80078a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80078ac:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80078ae:	4b5c      	ldr	r3, [pc, #368]	; (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80078b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078b4:	0e1b      	lsrs	r3, r3, #24
 80078b6:	f003 030f 	and.w	r3, r3, #15
 80078ba:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80078bc:	4b58      	ldr	r3, [pc, #352]	; (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80078be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078c2:	099b      	lsrs	r3, r3, #6
 80078c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078c8:	693a      	ldr	r2, [r7, #16]
 80078ca:	fb02 f203 	mul.w	r2, r2, r3
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80078d4:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80078d6:	4b52      	ldr	r3, [pc, #328]	; (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80078d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078dc:	f003 031f 	and.w	r3, r3, #31
 80078e0:	3301      	adds	r3, #1
 80078e2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80078e4:	697a      	ldr	r2, [r7, #20]
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80078ec:	617b      	str	r3, [r7, #20]
        break;
 80078ee:	e003      	b.n	80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 80078f0:	4b4e      	ldr	r3, [pc, #312]	; (8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80078f2:	617b      	str	r3, [r7, #20]
        break;
 80078f4:	e000      	b.n	80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 80078f6:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078fe:	f040 8086 	bne.w	8007a0e <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007902:	4b47      	ldr	r3, [pc, #284]	; (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007904:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007908:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007910:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007918:	d03e      	beq.n	8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800791a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800791e:	d073      	beq.n	8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8007920:	2b00      	cmp	r3, #0
 8007922:	d000      	beq.n	8007926 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007924:	e074      	b.n	8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007926:	4b3e      	ldr	r3, [pc, #248]	; (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800792e:	2b00      	cmp	r3, #0
 8007930:	d108      	bne.n	8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007932:	4b3b      	ldr	r3, [pc, #236]	; (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800793a:	4a3a      	ldr	r2, [pc, #232]	; (8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800793c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007940:	613b      	str	r3, [r7, #16]
 8007942:	e007      	b.n	8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007944:	4b36      	ldr	r3, [pc, #216]	; (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800794c:	4a36      	ldr	r2, [pc, #216]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800794e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007952:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007954:	4b32      	ldr	r3, [pc, #200]	; (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800795a:	0e1b      	lsrs	r3, r3, #24
 800795c:	f003 030f 	and.w	r3, r3, #15
 8007960:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8007962:	4b2f      	ldr	r3, [pc, #188]	; (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007968:	099b      	lsrs	r3, r3, #6
 800796a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800796e:	693a      	ldr	r2, [r7, #16]
 8007970:	fb02 f203 	mul.w	r2, r2, r3
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	fbb2 f3f3 	udiv	r3, r2, r3
 800797a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800797c:	4b28      	ldr	r3, [pc, #160]	; (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800797e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007982:	0a1b      	lsrs	r3, r3, #8
 8007984:	f003 031f 	and.w	r3, r3, #31
 8007988:	3301      	adds	r3, #1
 800798a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800798c:	697a      	ldr	r2, [r7, #20]
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	fbb2 f3f3 	udiv	r3, r2, r3
 8007994:	617b      	str	r3, [r7, #20]
        break;
 8007996:	e03b      	b.n	8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007998:	4b21      	ldr	r3, [pc, #132]	; (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d108      	bne.n	80079b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80079a4:	4b1e      	ldr	r3, [pc, #120]	; (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079ac:	4a1d      	ldr	r2, [pc, #116]	; (8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80079ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80079b2:	613b      	str	r3, [r7, #16]
 80079b4:	e007      	b.n	80079c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80079b6:	4b1a      	ldr	r3, [pc, #104]	; (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079be:	4a1a      	ldr	r2, [pc, #104]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80079c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80079c4:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80079c6:	4b16      	ldr	r3, [pc, #88]	; (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80079c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079cc:	0e1b      	lsrs	r3, r3, #24
 80079ce:	f003 030f 	and.w	r3, r3, #15
 80079d2:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80079d4:	4b12      	ldr	r3, [pc, #72]	; (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80079d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079da:	099b      	lsrs	r3, r3, #6
 80079dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079e0:	693a      	ldr	r2, [r7, #16]
 80079e2:	fb02 f203 	mul.w	r2, r2, r3
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80079ec:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80079ee:	4b0c      	ldr	r3, [pc, #48]	; (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80079f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079f4:	f003 031f 	and.w	r3, r3, #31
 80079f8:	3301      	adds	r3, #1
 80079fa:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80079fc:	697a      	ldr	r2, [r7, #20]
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a04:	617b      	str	r3, [r7, #20]
        break;
 8007a06:	e003      	b.n	8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007a08:	4b08      	ldr	r3, [pc, #32]	; (8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8007a0a:	617b      	str	r3, [r7, #20]
        break;
 8007a0c:	e000      	b.n	8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 8007a0e:	bf00      	nop

  return frequency;
 8007a10:	697b      	ldr	r3, [r7, #20]
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	371c      	adds	r7, #28
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr
 8007a1e:	bf00      	nop
 8007a20:	40023800 	.word	0x40023800
 8007a24:	00f42400 	.word	0x00f42400
 8007a28:	017d7840 	.word	0x017d7840
 8007a2c:	00bb8000 	.word	0x00bb8000

08007a30 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b082      	sub	sp, #8
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d101      	bne.n	8007a42 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	e06b      	b.n	8007b1a <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	7f5b      	ldrb	r3, [r3, #29]
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d105      	bne.n	8007a58 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f7fb fa82 	bl	8002f5c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2202      	movs	r2, #2
 8007a5c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	22ca      	movs	r2, #202	; 0xca
 8007a64:	625a      	str	r2, [r3, #36]	; 0x24
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	2253      	movs	r2, #83	; 0x53
 8007a6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 fb00 	bl	8008074 <RTC_EnterInitMode>
 8007a74:	4603      	mov	r3, r0
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d008      	beq.n	8007a8c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	22ff      	movs	r2, #255	; 0xff
 8007a80:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2204      	movs	r2, #4
 8007a86:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	e046      	b.n	8007b1a <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	6899      	ldr	r1, [r3, #8]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	4b23      	ldr	r3, [pc, #140]	; (8007b24 <HAL_RTC_Init+0xf4>)
 8007a98:	400b      	ands	r3, r1
 8007a9a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	6899      	ldr	r1, [r3, #8]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	685a      	ldr	r2, [r3, #4]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	691b      	ldr	r3, [r3, #16]
 8007aaa:	431a      	orrs	r2, r3
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	695b      	ldr	r3, [r3, #20]
 8007ab0:	431a      	orrs	r2, r3
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	430a      	orrs	r2, r1
 8007ab8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	68d2      	ldr	r2, [r2, #12]
 8007ac2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	6919      	ldr	r1, [r3, #16]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	041a      	lsls	r2, r3, #16
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	430a      	orrs	r2, r1
 8007ad6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	68da      	ldr	r2, [r3, #12]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ae6:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f022 0208 	bic.w	r2, r2, #8
 8007af6:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	699a      	ldr	r2, [r3, #24]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	430a      	orrs	r2, r1
 8007b08:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	22ff      	movs	r2, #255	; 0xff
 8007b10:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2201      	movs	r2, #1
 8007b16:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007b18:	2300      	movs	r3, #0
  }
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3708      	adds	r7, #8
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop
 8007b24:	ff8fffbf 	.word	0xff8fffbf

08007b28 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007b28:	b590      	push	{r4, r7, lr}
 8007b2a:	b087      	sub	sp, #28
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	60f8      	str	r0, [r7, #12]
 8007b30:	60b9      	str	r1, [r7, #8]
 8007b32:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007b34:	2300      	movs	r3, #0
 8007b36:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	7f1b      	ldrb	r3, [r3, #28]
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d101      	bne.n	8007b44 <HAL_RTC_SetTime+0x1c>
 8007b40:	2302      	movs	r3, #2
 8007b42:	e0a8      	b.n	8007c96 <HAL_RTC_SetTime+0x16e>
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2201      	movs	r2, #1
 8007b48:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2202      	movs	r2, #2
 8007b4e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d126      	bne.n	8007ba4 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d102      	bne.n	8007b6a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	2200      	movs	r2, #0
 8007b68:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f000 faac 	bl	80080cc <RTC_ByteToBcd2>
 8007b74:	4603      	mov	r3, r0
 8007b76:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	785b      	ldrb	r3, [r3, #1]
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f000 faa5 	bl	80080cc <RTC_ByteToBcd2>
 8007b82:	4603      	mov	r3, r0
 8007b84:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007b86:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	789b      	ldrb	r3, [r3, #2]
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f000 fa9d 	bl	80080cc <RTC_ByteToBcd2>
 8007b92:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8007b94:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	7b1b      	ldrb	r3, [r3, #12]
 8007b9c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	617b      	str	r3, [r7, #20]
 8007ba2:	e018      	b.n	8007bd6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d102      	bne.n	8007bb8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	785b      	ldrb	r3, [r3, #1]
 8007bc2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007bc4:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8007bc6:	68ba      	ldr	r2, [r7, #8]
 8007bc8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8007bca:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	7b1b      	ldrb	r3, [r3, #12]
 8007bd0:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	22ca      	movs	r2, #202	; 0xca
 8007bdc:	625a      	str	r2, [r3, #36]	; 0x24
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	2253      	movs	r2, #83	; 0x53
 8007be4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007be6:	68f8      	ldr	r0, [r7, #12]
 8007be8:	f000 fa44 	bl	8008074 <RTC_EnterInitMode>
 8007bec:	4603      	mov	r3, r0
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d00b      	beq.n	8007c0a <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	22ff      	movs	r2, #255	; 0xff
 8007bf8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2204      	movs	r2, #4
 8007bfe:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2200      	movs	r2, #0
 8007c04:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	e045      	b.n	8007c96 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	6979      	ldr	r1, [r7, #20]
 8007c10:	4b23      	ldr	r3, [pc, #140]	; (8007ca0 <HAL_RTC_SetTime+0x178>)
 8007c12:	400b      	ands	r3, r1
 8007c14:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	689a      	ldr	r2, [r3, #8]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007c24:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	6899      	ldr	r1, [r3, #8]
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	691a      	ldr	r2, [r3, #16]
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	695b      	ldr	r3, [r3, #20]
 8007c34:	431a      	orrs	r2, r3
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	430a      	orrs	r2, r1
 8007c3c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	68da      	ldr	r2, [r3, #12]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c4c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	f003 0320 	and.w	r3, r3, #32
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d111      	bne.n	8007c80 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007c5c:	68f8      	ldr	r0, [r7, #12]
 8007c5e:	f000 f9e1 	bl	8008024 <HAL_RTC_WaitForSynchro>
 8007c62:	4603      	mov	r3, r0
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d00b      	beq.n	8007c80 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	22ff      	movs	r2, #255	; 0xff
 8007c6e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2204      	movs	r2, #4
 8007c74:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	e00a      	b.n	8007c96 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	22ff      	movs	r2, #255	; 0xff
 8007c86:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2200      	movs	r2, #0
 8007c92:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8007c94:	2300      	movs	r3, #0
  }
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	371c      	adds	r7, #28
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd90      	pop	{r4, r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	007f7f7f 	.word	0x007f7f7f

08007ca4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007ca4:	b590      	push	{r4, r7, lr}
 8007ca6:	b087      	sub	sp, #28
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	7f1b      	ldrb	r3, [r3, #28]
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d101      	bne.n	8007cc0 <HAL_RTC_SetDate+0x1c>
 8007cbc:	2302      	movs	r3, #2
 8007cbe:	e092      	b.n	8007de6 <HAL_RTC_SetDate+0x142>
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2202      	movs	r2, #2
 8007cca:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d10e      	bne.n	8007cf0 <HAL_RTC_SetDate+0x4c>
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	785b      	ldrb	r3, [r3, #1]
 8007cd6:	f003 0310 	and.w	r3, r3, #16
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d008      	beq.n	8007cf0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	785b      	ldrb	r3, [r3, #1]
 8007ce2:	f023 0310 	bic.w	r3, r3, #16
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	330a      	adds	r3, #10
 8007cea:	b2da      	uxtb	r2, r3
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d11c      	bne.n	8007d30 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	78db      	ldrb	r3, [r3, #3]
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f000 f9e6 	bl	80080cc <RTC_ByteToBcd2>
 8007d00:	4603      	mov	r3, r0
 8007d02:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	785b      	ldrb	r3, [r3, #1]
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f000 f9df 	bl	80080cc <RTC_ByteToBcd2>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007d12:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	789b      	ldrb	r3, [r3, #2]
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f000 f9d7 	bl	80080cc <RTC_ByteToBcd2>
 8007d1e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007d20:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	617b      	str	r3, [r7, #20]
 8007d2e:	e00e      	b.n	8007d4e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	78db      	ldrb	r3, [r3, #3]
 8007d34:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	785b      	ldrb	r3, [r3, #1]
 8007d3a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007d3c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8007d3e:	68ba      	ldr	r2, [r7, #8]
 8007d40:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8007d42:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	22ca      	movs	r2, #202	; 0xca
 8007d54:	625a      	str	r2, [r3, #36]	; 0x24
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	2253      	movs	r2, #83	; 0x53
 8007d5c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007d5e:	68f8      	ldr	r0, [r7, #12]
 8007d60:	f000 f988 	bl	8008074 <RTC_EnterInitMode>
 8007d64:	4603      	mov	r3, r0
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d00b      	beq.n	8007d82 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	22ff      	movs	r2, #255	; 0xff
 8007d70:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2204      	movs	r2, #4
 8007d76:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	e031      	b.n	8007de6 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	6979      	ldr	r1, [r7, #20]
 8007d88:	4b19      	ldr	r3, [pc, #100]	; (8007df0 <HAL_RTC_SetDate+0x14c>)
 8007d8a:	400b      	ands	r3, r1
 8007d8c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	68da      	ldr	r2, [r3, #12]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d9c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	f003 0320 	and.w	r3, r3, #32
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d111      	bne.n	8007dd0 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007dac:	68f8      	ldr	r0, [r7, #12]
 8007dae:	f000 f939 	bl	8008024 <HAL_RTC_WaitForSynchro>
 8007db2:	4603      	mov	r3, r0
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d00b      	beq.n	8007dd0 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	22ff      	movs	r2, #255	; 0xff
 8007dbe:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2204      	movs	r2, #4
 8007dc4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	e00a      	b.n	8007de6 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	22ff      	movs	r2, #255	; 0xff
 8007dd6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2200      	movs	r2, #0
 8007de2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007de4:	2300      	movs	r3, #0
  }
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	371c      	adds	r7, #28
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd90      	pop	{r4, r7, pc}
 8007dee:	bf00      	nop
 8007df0:	00ffff3f 	.word	0x00ffff3f

08007df4 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007df4:	b590      	push	{r4, r7, lr}
 8007df6:	b089      	sub	sp, #36	; 0x24
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	60b9      	str	r1, [r7, #8]
 8007dfe:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8007e00:	2300      	movs	r3, #0
 8007e02:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8007e04:	2300      	movs	r3, #0
 8007e06:	61fb      	str	r3, [r7, #28]
 8007e08:	2300      	movs	r3, #0
 8007e0a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	7f1b      	ldrb	r3, [r3, #28]
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d101      	bne.n	8007e18 <HAL_RTC_SetAlarm+0x24>
 8007e14:	2302      	movs	r3, #2
 8007e16:	e101      	b.n	800801c <HAL_RTC_SetAlarm+0x228>
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2202      	movs	r2, #2
 8007e22:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d137      	bne.n	8007e9a <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d102      	bne.n	8007e3e <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	4618      	mov	r0, r3
 8007e44:	f000 f942 	bl	80080cc <RTC_ByteToBcd2>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	785b      	ldrb	r3, [r3, #1]
 8007e50:	4618      	mov	r0, r3
 8007e52:	f000 f93b 	bl	80080cc <RTC_ByteToBcd2>
 8007e56:	4603      	mov	r3, r0
 8007e58:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007e5a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	789b      	ldrb	r3, [r3, #2]
 8007e60:	4618      	mov	r0, r3
 8007e62:	f000 f933 	bl	80080cc <RTC_ByteToBcd2>
 8007e66:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8007e68:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	7b1b      	ldrb	r3, [r3, #12]
 8007e70:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007e72:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f000 f925 	bl	80080cc <RTC_ByteToBcd2>
 8007e82:	4603      	mov	r3, r0
 8007e84:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007e86:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8007e8e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007e94:	4313      	orrs	r3, r2
 8007e96:	61fb      	str	r3, [r7, #28]
 8007e98:	e023      	b.n	8007ee2 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d102      	bne.n	8007eae <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	785b      	ldrb	r3, [r3, #1]
 8007eb8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007eba:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007ebc:	68ba      	ldr	r2, [r7, #8]
 8007ebe:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8007ec0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	7b1b      	ldrb	r3, [r3, #12]
 8007ec6:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007ec8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007ed0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007ed2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8007ed8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	685a      	ldr	r2, [r3, #4]
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	69db      	ldr	r3, [r3, #28]
 8007eea:	4313      	orrs	r3, r2
 8007eec:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	22ca      	movs	r2, #202	; 0xca
 8007ef4:	625a      	str	r2, [r3, #36]	; 0x24
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	2253      	movs	r2, #83	; 0x53
 8007efc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f06:	d13f      	bne.n	8007f88 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	689a      	ldr	r2, [r3, #8]
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007f16:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	689a      	ldr	r2, [r3, #8]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007f26:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007f28:	f7fb fde2 	bl	8003af0 <HAL_GetTick>
 8007f2c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007f2e:	e013      	b.n	8007f58 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007f30:	f7fb fdde 	bl	8003af0 <HAL_GetTick>
 8007f34:	4602      	mov	r2, r0
 8007f36:	69bb      	ldr	r3, [r7, #24]
 8007f38:	1ad3      	subs	r3, r2, r3
 8007f3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f3e:	d90b      	bls.n	8007f58 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	22ff      	movs	r2, #255	; 0xff
 8007f46:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2203      	movs	r2, #3
 8007f4c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2200      	movs	r2, #0
 8007f52:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007f54:	2303      	movs	r3, #3
 8007f56:	e061      	b.n	800801c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	68db      	ldr	r3, [r3, #12]
 8007f5e:	f003 0301 	and.w	r3, r3, #1
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d0e4      	beq.n	8007f30 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	69fa      	ldr	r2, [r7, #28]
 8007f6c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	697a      	ldr	r2, [r7, #20]
 8007f74:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	689a      	ldr	r2, [r3, #8]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f84:	609a      	str	r2, [r3, #8]
 8007f86:	e03e      	b.n	8008006 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	689a      	ldr	r2, [r3, #8]
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007f96:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	689a      	ldr	r2, [r3, #8]
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007fa6:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007fa8:	f7fb fda2 	bl	8003af0 <HAL_GetTick>
 8007fac:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007fae:	e013      	b.n	8007fd8 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007fb0:	f7fb fd9e 	bl	8003af0 <HAL_GetTick>
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	69bb      	ldr	r3, [r7, #24]
 8007fb8:	1ad3      	subs	r3, r2, r3
 8007fba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007fbe:	d90b      	bls.n	8007fd8 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	22ff      	movs	r2, #255	; 0xff
 8007fc6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2203      	movs	r2, #3
 8007fcc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007fd4:	2303      	movs	r3, #3
 8007fd6:	e021      	b.n	800801c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	68db      	ldr	r3, [r3, #12]
 8007fde:	f003 0302 	and.w	r3, r3, #2
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d0e4      	beq.n	8007fb0 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	69fa      	ldr	r2, [r7, #28]
 8007fec:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	697a      	ldr	r2, [r7, #20]
 8007ff4:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	689a      	ldr	r2, [r3, #8]
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008004:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	22ff      	movs	r2, #255	; 0xff
 800800c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2201      	movs	r2, #1
 8008012:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2200      	movs	r2, #0
 8008018:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800801a:	2300      	movs	r3, #0
}
 800801c:	4618      	mov	r0, r3
 800801e:	3724      	adds	r7, #36	; 0x24
 8008020:	46bd      	mov	sp, r7
 8008022:	bd90      	pop	{r4, r7, pc}

08008024 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800802c:	2300      	movs	r3, #0
 800802e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	68da      	ldr	r2, [r3, #12]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800803e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008040:	f7fb fd56 	bl	8003af0 <HAL_GetTick>
 8008044:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008046:	e009      	b.n	800805c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008048:	f7fb fd52 	bl	8003af0 <HAL_GetTick>
 800804c:	4602      	mov	r2, r0
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	1ad3      	subs	r3, r2, r3
 8008052:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008056:	d901      	bls.n	800805c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008058:	2303      	movs	r3, #3
 800805a:	e007      	b.n	800806c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	68db      	ldr	r3, [r3, #12]
 8008062:	f003 0320 	and.w	r3, r3, #32
 8008066:	2b00      	cmp	r3, #0
 8008068:	d0ee      	beq.n	8008048 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800806a:	2300      	movs	r3, #0
}
 800806c:	4618      	mov	r0, r3
 800806e:	3710      	adds	r7, #16
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b084      	sub	sp, #16
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800807c:	2300      	movs	r3, #0
 800807e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	68db      	ldr	r3, [r3, #12]
 8008086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800808a:	2b00      	cmp	r3, #0
 800808c:	d119      	bne.n	80080c2 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f04f 32ff 	mov.w	r2, #4294967295
 8008096:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008098:	f7fb fd2a 	bl	8003af0 <HAL_GetTick>
 800809c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800809e:	e009      	b.n	80080b4 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80080a0:	f7fb fd26 	bl	8003af0 <HAL_GetTick>
 80080a4:	4602      	mov	r2, r0
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	1ad3      	subs	r3, r2, r3
 80080aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80080ae:	d901      	bls.n	80080b4 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80080b0:	2303      	movs	r3, #3
 80080b2:	e007      	b.n	80080c4 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	68db      	ldr	r3, [r3, #12]
 80080ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d0ee      	beq.n	80080a0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80080c2:	2300      	movs	r3, #0
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3710      	adds	r7, #16
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b085      	sub	sp, #20
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	4603      	mov	r3, r0
 80080d4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 80080d6:	2300      	movs	r3, #0
 80080d8:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 80080da:	e005      	b.n	80080e8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	3301      	adds	r3, #1
 80080e0:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 80080e2:	79fb      	ldrb	r3, [r7, #7]
 80080e4:	3b0a      	subs	r3, #10
 80080e6:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 80080e8:	79fb      	ldrb	r3, [r7, #7]
 80080ea:	2b09      	cmp	r3, #9
 80080ec:	d8f6      	bhi.n	80080dc <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	011b      	lsls	r3, r3, #4
 80080f4:	b2da      	uxtb	r2, r3
 80080f6:	79fb      	ldrb	r3, [r7, #7]
 80080f8:	4313      	orrs	r3, r2
 80080fa:	b2db      	uxtb	r3, r3
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3714      	adds	r7, #20
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr

08008108 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8008108:	b480      	push	{r7}
 800810a:	b087      	sub	sp, #28
 800810c:	af00      	add	r7, sp, #0
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	60b9      	str	r1, [r7, #8]
 8008112:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008114:	2300      	movs	r3, #0
 8008116:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	7f1b      	ldrb	r3, [r3, #28]
 800811c:	2b01      	cmp	r3, #1
 800811e:	d101      	bne.n	8008124 <HAL_RTCEx_SetTimeStamp+0x1c>
 8008120:	2302      	movs	r3, #2
 8008122:	e03e      	b.n	80081a2 <HAL_RTCEx_SetTimeStamp+0x9a>
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2201      	movs	r2, #1
 8008128:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2202      	movs	r2, #2
 800812e:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	689a      	ldr	r2, [r3, #8]
 8008136:	4b1e      	ldr	r3, [pc, #120]	; (80081b0 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8008138:	4013      	ands	r3, r2
 800813a:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800813c:	697a      	ldr	r2, [r7, #20]
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	4313      	orrs	r3, r2
 8008142:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	22ca      	movs	r2, #202	; 0xca
 800814a:	625a      	str	r2, [r3, #36]	; 0x24
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	2253      	movs	r2, #83	; 0x53
 8008152:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f022 0206 	bic.w	r2, r2, #6
 8008162:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	687a      	ldr	r2, [r7, #4]
 8008170:	430a      	orrs	r2, r1
 8008172:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	697a      	ldr	r2, [r7, #20]
 800817a:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	689a      	ldr	r2, [r3, #8]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800818a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	22ff      	movs	r2, #255	; 0xff
 8008192:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2201      	movs	r2, #1
 8008198:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2200      	movs	r2, #0
 800819e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80081a0:	2300      	movs	r3, #0
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	371c      	adds	r7, #28
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr
 80081ae:	bf00      	nop
 80081b0:	fffff7f7 	.word	0xfffff7f7

080081b4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b088      	sub	sp, #32
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 80081bc:	2300      	movs	r3, #0
 80081be:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 80081c0:	2300      	movs	r3, #0
 80081c2:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 80081c4:	2300      	movs	r3, #0
 80081c6:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d101      	bne.n	80081d2 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 80081ce:	2301      	movs	r3, #1
 80081d0:	e149      	b.n	8008466 <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d106      	bne.n	80081ec <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f7fb fa62 	bl	80036b0 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2202      	movs	r2, #2
 80081f0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f000 f94f 	bl	8008498 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	68db      	ldr	r3, [r3, #12]
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d007      	beq.n	8008212 <HAL_SAI_Init+0x5e>
 8008202:	2b01      	cmp	r3, #1
 8008204:	d302      	bcc.n	800820c <HAL_SAI_Init+0x58>
 8008206:	2b02      	cmp	r3, #2
 8008208:	d006      	beq.n	8008218 <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 800820a:	e008      	b.n	800821e <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 800820c:	2300      	movs	r3, #0
 800820e:	61fb      	str	r3, [r7, #28]
      break;
 8008210:	e005      	b.n	800821e <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8008212:	2310      	movs	r3, #16
 8008214:	61fb      	str	r3, [r7, #28]
      break;
 8008216:	e002      	b.n	800821e <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8008218:	2320      	movs	r3, #32
 800821a:	61fb      	str	r3, [r7, #28]
      break;
 800821c:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	689b      	ldr	r3, [r3, #8]
 8008222:	2b03      	cmp	r3, #3
 8008224:	d81d      	bhi.n	8008262 <HAL_SAI_Init+0xae>
 8008226:	a201      	add	r2, pc, #4	; (adr r2, 800822c <HAL_SAI_Init+0x78>)
 8008228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800822c:	0800823d 	.word	0x0800823d
 8008230:	08008243 	.word	0x08008243
 8008234:	0800824b 	.word	0x0800824b
 8008238:	08008253 	.word	0x08008253
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 800823c:	2300      	movs	r3, #0
 800823e:	617b      	str	r3, [r7, #20]
      }
      break;
 8008240:	e010      	b.n	8008264 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 8008242:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008246:	617b      	str	r3, [r7, #20]
      }
      break;
 8008248:	e00c      	b.n	8008264 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800824a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800824e:	617b      	str	r3, [r7, #20]
      }
      break;
 8008250:	e008      	b.n	8008264 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8008252:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008256:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8008258:	69fb      	ldr	r3, [r7, #28]
 800825a:	f043 0301 	orr.w	r3, r3, #1
 800825e:	61fb      	str	r3, [r7, #28]
      }
      break;
 8008260:	e000      	b.n	8008264 <HAL_SAI_Init+0xb0>
  default:
    break;
 8008262:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a81      	ldr	r2, [pc, #516]	; (8008470 <HAL_SAI_Init+0x2bc>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d004      	beq.n	8008278 <HAL_SAI_Init+0xc4>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a80      	ldr	r2, [pc, #512]	; (8008474 <HAL_SAI_Init+0x2c0>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d103      	bne.n	8008280 <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 8008278:	4a7f      	ldr	r2, [pc, #508]	; (8008478 <HAL_SAI_Init+0x2c4>)
 800827a:	69fb      	ldr	r3, [r7, #28]
 800827c:	6013      	str	r3, [r2, #0]
 800827e:	e002      	b.n	8008286 <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8008280:	4a7e      	ldr	r2, [pc, #504]	; (800847c <HAL_SAI_Init+0x2c8>)
 8008282:	69fb      	ldr	r3, [r7, #28]
 8008284:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	69db      	ldr	r3, [r3, #28]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d043      	beq.n	8008316 <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 800828e:	2300      	movs	r3, #0
 8008290:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a76      	ldr	r2, [pc, #472]	; (8008470 <HAL_SAI_Init+0x2bc>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d004      	beq.n	80082a6 <HAL_SAI_Init+0xf2>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a74      	ldr	r2, [pc, #464]	; (8008474 <HAL_SAI_Init+0x2c0>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d104      	bne.n	80082b0 <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80082a6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80082aa:	f7ff fa8d 	bl	80077c8 <HAL_RCCEx_GetPeriphCLKFreq>
 80082ae:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a72      	ldr	r2, [pc, #456]	; (8008480 <HAL_SAI_Init+0x2cc>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d004      	beq.n	80082c4 <HAL_SAI_Init+0x110>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a71      	ldr	r2, [pc, #452]	; (8008484 <HAL_SAI_Init+0x2d0>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d104      	bne.n	80082ce <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80082c4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80082c8:	f7ff fa7e 	bl	80077c8 <HAL_RCCEx_GetPeriphCLKFreq>
 80082cc:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80082ce:	693a      	ldr	r2, [r7, #16]
 80082d0:	4613      	mov	r3, r2
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	4413      	add	r3, r2
 80082d6:	005b      	lsls	r3, r3, #1
 80082d8:	461a      	mov	r2, r3
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	69db      	ldr	r3, [r3, #28]
 80082de:	025b      	lsls	r3, r3, #9
 80082e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80082e4:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	4a67      	ldr	r2, [pc, #412]	; (8008488 <HAL_SAI_Init+0x2d4>)
 80082ea:	fba2 2303 	umull	r2, r3, r2, r3
 80082ee:	08da      	lsrs	r2, r3, #3
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 80082f4:	68f9      	ldr	r1, [r7, #12]
 80082f6:	4b64      	ldr	r3, [pc, #400]	; (8008488 <HAL_SAI_Init+0x2d4>)
 80082f8:	fba3 2301 	umull	r2, r3, r3, r1
 80082fc:	08da      	lsrs	r2, r3, #3
 80082fe:	4613      	mov	r3, r2
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	4413      	add	r3, r2
 8008304:	005b      	lsls	r3, r3, #1
 8008306:	1aca      	subs	r2, r1, r3
 8008308:	2a08      	cmp	r2, #8
 800830a:	d904      	bls.n	8008316 <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6a1b      	ldr	r3, [r3, #32]
 8008310:	1c5a      	adds	r2, r3, #1
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d003      	beq.n	8008326 <HAL_SAI_Init+0x172>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	2b02      	cmp	r3, #2
 8008324:	d109      	bne.n	800833a <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800832a:	2b01      	cmp	r3, #1
 800832c:	d101      	bne.n	8008332 <HAL_SAI_Init+0x17e>
 800832e:	2300      	movs	r3, #0
 8008330:	e001      	b.n	8008336 <HAL_SAI_Init+0x182>
 8008332:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008336:	61bb      	str	r3, [r7, #24]
 8008338:	e008      	b.n	800834c <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800833e:	2b01      	cmp	r3, #1
 8008340:	d102      	bne.n	8008348 <HAL_SAI_Init+0x194>
 8008342:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008346:	e000      	b.n	800834a <HAL_SAI_Init+0x196>
 8008348:	2300      	movs	r3, #0
 800834a:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	6819      	ldr	r1, [r3, #0]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	4b4d      	ldr	r3, [pc, #308]	; (800848c <HAL_SAI_Init+0x2d8>)
 8008358:	400b      	ands	r3, r1
 800835a:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	6819      	ldr	r1, [r3, #0]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	685a      	ldr	r2, [r3, #4]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800836a:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008370:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008376:	431a      	orrs	r2, r3
 8008378:	69bb      	ldr	r3, [r7, #24]
 800837a:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8008384:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	691b      	ldr	r3, [r3, #16]
 800838a:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008390:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6a1b      	ldr	r3, [r3, #32]
 8008396:	051b      	lsls	r3, r3, #20
 8008398:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	430a      	orrs	r2, r1
 80083a0:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	6859      	ldr	r1, [r3, #4]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681a      	ldr	r2, [r3, #0]
 80083ac:	4b38      	ldr	r3, [pc, #224]	; (8008490 <HAL_SAI_Init+0x2dc>)
 80083ae:	400b      	ands	r3, r1
 80083b0:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	6859      	ldr	r1, [r3, #4]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	699a      	ldr	r2, [r3, #24]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083c0:	431a      	orrs	r2, r3
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c6:	431a      	orrs	r2, r3
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	430a      	orrs	r2, r1
 80083ce:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	6899      	ldr	r1, [r3, #8]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681a      	ldr	r2, [r3, #0]
 80083da:	4b2e      	ldr	r3, [pc, #184]	; (8008494 <HAL_SAI_Init+0x2e0>)
 80083dc:	400b      	ands	r3, r1
 80083de:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	6899      	ldr	r1, [r3, #8]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ea:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80083f0:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 80083f6:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 80083fc:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008402:	3b01      	subs	r3, #1
 8008404:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 8008406:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	430a      	orrs	r2, r1
 800840e:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	68d9      	ldr	r1, [r3, #12]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681a      	ldr	r2, [r3, #0]
 800841a:	f24f 0320 	movw	r3, #61472	; 0xf020
 800841e:	400b      	ands	r3, r1
 8008420:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	68d9      	ldr	r1, [r3, #12]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008430:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008436:	041b      	lsls	r3, r3, #16
 8008438:	431a      	orrs	r2, r3
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800843e:	3b01      	subs	r3, #1
 8008440:	021b      	lsls	r3, r3, #8
 8008442:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	430a      	orrs	r2, r1
 800844a:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2201      	movs	r2, #1
 8008458:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2200      	movs	r2, #0
 8008460:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008464:	2300      	movs	r3, #0
}
 8008466:	4618      	mov	r0, r3
 8008468:	3720      	adds	r7, #32
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
 800846e:	bf00      	nop
 8008470:	40015804 	.word	0x40015804
 8008474:	40015824 	.word	0x40015824
 8008478:	40015800 	.word	0x40015800
 800847c:	40015c00 	.word	0x40015c00
 8008480:	40015c04 	.word	0x40015c04
 8008484:	40015c24 	.word	0x40015c24
 8008488:	cccccccd 	.word	0xcccccccd
 800848c:	ff05c010 	.word	0xff05c010
 8008490:	ffff1ff0 	.word	0xffff1ff0
 8008494:	fff88000 	.word	0xfff88000

08008498 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008498:	b490      	push	{r4, r7}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 80084a0:	4b16      	ldr	r3, [pc, #88]	; (80084fc <SAI_Disable+0x64>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a16      	ldr	r2, [pc, #88]	; (8008500 <SAI_Disable+0x68>)
 80084a6:	fba2 2303 	umull	r2, r3, r2, r3
 80084aa:	0b1b      	lsrs	r3, r3, #12
 80084ac:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 80084ae:	2300      	movs	r3, #0
 80084b0:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	681a      	ldr	r2, [r3, #0]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80084c0:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80084c2:	4623      	mov	r3, r4
 80084c4:	1e5c      	subs	r4, r3, #1
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d10a      	bne.n	80084e0 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 80084da:	2303      	movs	r3, #3
 80084dc:	73fb      	strb	r3, [r7, #15]
      break;
 80084de:	e006      	b.n	80084ee <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d1e9      	bne.n	80084c2 <SAI_Disable+0x2a>

  return status;
 80084ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3710      	adds	r7, #16
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bc90      	pop	{r4, r7}
 80084f8:	4770      	bx	lr
 80084fa:	bf00      	nop
 80084fc:	20000018 	.word	0x20000018
 8008500:	95cbec1b 	.word	0x95cbec1b

08008504 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b082      	sub	sp, #8
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d101      	bne.n	8008516 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008512:	2301      	movs	r3, #1
 8008514:	e022      	b.n	800855c <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800851c:	b2db      	uxtb	r3, r3
 800851e:	2b00      	cmp	r3, #0
 8008520:	d105      	bne.n	800852e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f7fa fd31 	bl	8002f90 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2203      	movs	r2, #3
 8008532:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 f814 	bl	8008564 <HAL_SD_InitCard>
 800853c:	4603      	mov	r3, r0
 800853e:	2b00      	cmp	r3, #0
 8008540:	d001      	beq.n	8008546 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008542:	2301      	movs	r3, #1
 8008544:	e00a      	b.n	800855c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2200      	movs	r2, #0
 800854a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2200      	movs	r2, #0
 8008550:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2201      	movs	r2, #1
 8008556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800855a:	2300      	movs	r3, #0
}
 800855c:	4618      	mov	r0, r3
 800855e:	3708      	adds	r7, #8
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008564:	b5b0      	push	{r4, r5, r7, lr}
 8008566:	b08e      	sub	sp, #56	; 0x38
 8008568:	af04      	add	r7, sp, #16
 800856a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800856c:	2300      	movs	r3, #0
 800856e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8008570:	2300      	movs	r3, #0
 8008572:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008574:	2300      	movs	r3, #0
 8008576:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008578:	2300      	movs	r3, #0
 800857a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800857c:	2300      	movs	r3, #0
 800857e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8008580:	2376      	movs	r3, #118	; 0x76
 8008582:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681d      	ldr	r5, [r3, #0]
 8008588:	466c      	mov	r4, sp
 800858a:	f107 0314 	add.w	r3, r7, #20
 800858e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008592:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008596:	f107 0308 	add.w	r3, r7, #8
 800859a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800859c:	4628      	mov	r0, r5
 800859e:	f002 ff51 	bl	800b444 <SDMMC_Init>
 80085a2:	4603      	mov	r3, r0
 80085a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80085a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d001      	beq.n	80085b4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80085b0:	2301      	movs	r3, #1
 80085b2:	e03b      	b.n	800862c <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	685a      	ldr	r2, [r3, #4]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80085c2:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4618      	mov	r0, r3
 80085ca:	f002 ff74 	bl	800b4b6 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	685a      	ldr	r2, [r3, #4]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80085dc:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 fde6 	bl	80091b0 <SD_PowerON>
 80085e4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80085e6:	6a3b      	ldr	r3, [r7, #32]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d00b      	beq.n	8008604 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2201      	movs	r2, #1
 80085f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085f8:	6a3b      	ldr	r3, [r7, #32]
 80085fa:	431a      	orrs	r2, r3
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008600:	2301      	movs	r3, #1
 8008602:	e013      	b.n	800862c <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 fd05 	bl	8009014 <SD_InitCard>
 800860a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800860c:	6a3b      	ldr	r3, [r7, #32]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d00b      	beq.n	800862a <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2201      	movs	r2, #1
 8008616:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800861e:	6a3b      	ldr	r3, [r7, #32]
 8008620:	431a      	orrs	r2, r3
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008626:	2301      	movs	r3, #1
 8008628:	e000      	b.n	800862c <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 800862a:	2300      	movs	r3, #0
}
 800862c:	4618      	mov	r0, r3
 800862e:	3728      	adds	r7, #40	; 0x28
 8008630:	46bd      	mov	sp, r7
 8008632:	bdb0      	pop	{r4, r5, r7, pc}

08008634 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b08c      	sub	sp, #48	; 0x30
 8008638:	af00      	add	r7, sp, #0
 800863a:	60f8      	str	r0, [r7, #12]
 800863c:	60b9      	str	r1, [r7, #8]
 800863e:	607a      	str	r2, [r7, #4]
 8008640:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d107      	bne.n	800865c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008650:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008658:	2301      	movs	r3, #1
 800865a:	e0cc      	b.n	80087f6 <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008662:	b2db      	uxtb	r3, r3
 8008664:	2b01      	cmp	r3, #1
 8008666:	f040 80c5 	bne.w	80087f4 <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2200      	movs	r2, #0
 800866e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008670:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	441a      	add	r2, r3
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800867a:	429a      	cmp	r2, r3
 800867c:	d907      	bls.n	800868e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008682:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800868a:	2301      	movs	r3, #1
 800868c:	e0b3      	b.n	80087f6 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2203      	movs	r2, #3
 8008692:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	2200      	movs	r2, #0
 800869c:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80086ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b2:	4a53      	ldr	r2, [pc, #332]	; (8008800 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 80086b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ba:	4a52      	ldr	r2, [pc, #328]	; (8008804 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 80086bc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c2:	2200      	movs	r2, #0
 80086c4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	3380      	adds	r3, #128	; 0x80
 80086d0:	4619      	mov	r1, r3
 80086d2:	68ba      	ldr	r2, [r7, #8]
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	025b      	lsls	r3, r3, #9
 80086d8:	089b      	lsrs	r3, r3, #2
 80086da:	f7fc fcb7 	bl	800504c <HAL_DMA_Start_IT>
 80086de:	4603      	mov	r3, r0
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d017      	beq.n	8008714 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80086f2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a43      	ldr	r2, [pc, #268]	; (8008808 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 80086fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008700:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2201      	movs	r2, #1
 800870c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008710:	2301      	movs	r3, #1
 8008712:	e070      	b.n	80087f6 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f042 0208 	orr.w	r2, r2, #8
 8008722:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008728:	2b01      	cmp	r3, #1
 800872a:	d002      	beq.n	8008732 <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 800872c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800872e:	025b      	lsls	r3, r3, #9
 8008730:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f44f 7100 	mov.w	r1, #512	; 0x200
 800873a:	4618      	mov	r0, r3
 800873c:	f002 ff4e 	bl	800b5dc <SDMMC_CmdBlockLength>
 8008740:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8008742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008744:	2b00      	cmp	r3, #0
 8008746:	d00f      	beq.n	8008768 <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a2e      	ldr	r2, [pc, #184]	; (8008808 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 800874e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008756:	431a      	orrs	r2, r3
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2201      	movs	r2, #1
 8008760:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8008764:	2301      	movs	r3, #1
 8008766:	e046      	b.n	80087f6 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008768:	f04f 33ff 	mov.w	r3, #4294967295
 800876c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	025b      	lsls	r3, r3, #9
 8008772:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008774:	2390      	movs	r3, #144	; 0x90
 8008776:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008778:	2302      	movs	r3, #2
 800877a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800877c:	2300      	movs	r3, #0
 800877e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008780:	2301      	movs	r3, #1
 8008782:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f107 0210 	add.w	r2, r7, #16
 800878c:	4611      	mov	r1, r2
 800878e:	4618      	mov	r0, r3
 8008790:	f002 fef8 	bl	800b584 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	2b01      	cmp	r3, #1
 8008798:	d90a      	bls.n	80087b0 <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2282      	movs	r2, #130	; 0x82
 800879e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087a6:	4618      	mov	r0, r3
 80087a8:	f002 ff5c 	bl	800b664 <SDMMC_CmdReadMultiBlock>
 80087ac:	62f8      	str	r0, [r7, #44]	; 0x2c
 80087ae:	e009      	b.n	80087c4 <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2281      	movs	r2, #129	; 0x81
 80087b4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087bc:	4618      	mov	r0, r3
 80087be:	f002 ff2f 	bl	800b620 <SDMMC_CmdReadSingleBlock>
 80087c2:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80087c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d012      	beq.n	80087f0 <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a0e      	ldr	r2, [pc, #56]	; (8008808 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 80087d0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087d8:	431a      	orrs	r2, r3
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2201      	movs	r2, #1
 80087e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2200      	movs	r2, #0
 80087ea:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80087ec:	2301      	movs	r3, #1
 80087ee:	e002      	b.n	80087f6 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 80087f0:	2300      	movs	r3, #0
 80087f2:	e000      	b.n	80087f6 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
  }
  else
  {
    return HAL_BUSY;
 80087f4:	2302      	movs	r3, #2
  }
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3730      	adds	r7, #48	; 0x30
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
 80087fe:	bf00      	nop
 8008800:	08008eff 	.word	0x08008eff
 8008804:	08008f71 	.word	0x08008f71
 8008808:	004005ff 	.word	0x004005ff

0800880c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b08c      	sub	sp, #48	; 0x30
 8008810:	af00      	add	r7, sp, #0
 8008812:	60f8      	str	r0, [r7, #12]
 8008814:	60b9      	str	r1, [r7, #8]
 8008816:	607a      	str	r2, [r7, #4]
 8008818:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d107      	bne.n	8008834 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008828:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008830:	2301      	movs	r3, #1
 8008832:	e0cf      	b.n	80089d4 <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800883a:	b2db      	uxtb	r3, r3
 800883c:	2b01      	cmp	r3, #1
 800883e:	f040 80c8 	bne.w	80089d2 <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2200      	movs	r2, #0
 8008846:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008848:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	441a      	add	r2, r3
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008852:	429a      	cmp	r2, r3
 8008854:	d907      	bls.n	8008866 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800885a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008862:	2301      	movs	r3, #1
 8008864:	e0b6      	b.n	80089d4 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2203      	movs	r2, #3
 800886a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	2200      	movs	r2, #0
 8008874:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f042 021a 	orr.w	r2, r2, #26
 8008884:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800888a:	4a54      	ldr	r2, [pc, #336]	; (80089dc <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800888c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008892:	4a53      	ldr	r2, [pc, #332]	; (80089e0 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8008894:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800889a:	2200      	movs	r2, #0
 800889c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088a2:	2b01      	cmp	r3, #1
 80088a4:	d002      	beq.n	80088ac <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80088a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a8:	025b      	lsls	r3, r3, #9
 80088aa:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80088b4:	4618      	mov	r0, r3
 80088b6:	f002 fe91 	bl	800b5dc <SDMMC_CmdBlockLength>
 80088ba:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 80088bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d00f      	beq.n	80088e2 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a47      	ldr	r2, [pc, #284]	; (80089e4 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80088c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088d0:	431a      	orrs	r2, r3
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2201      	movs	r2, #1
 80088da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80088de:	2301      	movs	r3, #1
 80088e0:	e078      	b.n	80089d4 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d90a      	bls.n	80088fe <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	22a0      	movs	r2, #160	; 0xa0
 80088ec:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80088f4:	4618      	mov	r0, r3
 80088f6:	f002 fef9 	bl	800b6ec <SDMMC_CmdWriteMultiBlock>
 80088fa:	62f8      	str	r0, [r7, #44]	; 0x2c
 80088fc:	e009      	b.n	8008912 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2290      	movs	r2, #144	; 0x90
 8008902:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800890a:	4618      	mov	r0, r3
 800890c:	f002 fecc 	bl	800b6a8 <SDMMC_CmdWriteSingleBlock>
 8008910:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008914:	2b00      	cmp	r3, #0
 8008916:	d012      	beq.n	800893e <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a31      	ldr	r2, [pc, #196]	; (80089e4 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800891e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008926:	431a      	orrs	r2, r3
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2201      	movs	r2, #1
 8008930:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2200      	movs	r2, #0
 8008938:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800893a:	2301      	movs	r3, #1
 800893c:	e04a      	b.n	80089d4 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f042 0208 	orr.w	r2, r2, #8
 800894c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008952:	68b9      	ldr	r1, [r7, #8]
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	3380      	adds	r3, #128	; 0x80
 800895a:	461a      	mov	r2, r3
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	025b      	lsls	r3, r3, #9
 8008960:	089b      	lsrs	r3, r3, #2
 8008962:	f7fc fb73 	bl	800504c <HAL_DMA_Start_IT>
 8008966:	4603      	mov	r3, r0
 8008968:	2b00      	cmp	r3, #0
 800896a:	d01a      	beq.n	80089a2 <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f022 021a 	bic.w	r2, r2, #26
 800897a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a18      	ldr	r2, [pc, #96]	; (80089e4 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8008982:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008988:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	2201      	movs	r2, #1
 8008994:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2200      	movs	r2, #0
 800899c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800899e:	2301      	movs	r3, #1
 80089a0:	e018      	b.n	80089d4 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80089a2:	f04f 33ff 	mov.w	r3, #4294967295
 80089a6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	025b      	lsls	r3, r3, #9
 80089ac:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80089ae:	2390      	movs	r3, #144	; 0x90
 80089b0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80089b2:	2300      	movs	r3, #0
 80089b4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80089b6:	2300      	movs	r3, #0
 80089b8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80089ba:	2301      	movs	r3, #1
 80089bc:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f107 0210 	add.w	r2, r7, #16
 80089c6:	4611      	mov	r1, r2
 80089c8:	4618      	mov	r0, r3
 80089ca:	f002 fddb 	bl	800b584 <SDMMC_ConfigData>

      return HAL_OK;
 80089ce:	2300      	movs	r3, #0
 80089d0:	e000      	b.n	80089d4 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
  }
  else
  {
    return HAL_BUSY;
 80089d2:	2302      	movs	r3, #2
  }
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3730      	adds	r7, #48	; 0x30
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}
 80089dc:	08008ed5 	.word	0x08008ed5
 80089e0:	08008f71 	.word	0x08008f71
 80089e4:	004005ff 	.word	0x004005ff

080089e8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b083      	sub	sp, #12
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80089f0:	bf00      	nop
 80089f2:	370c      	adds	r7, #12
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr

080089fc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b083      	sub	sp, #12
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a0a:	0f9b      	lsrs	r3, r3, #30
 8008a0c:	b2da      	uxtb	r2, r3
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a16:	0e9b      	lsrs	r3, r3, #26
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	f003 030f 	and.w	r3, r3, #15
 8008a1e:	b2da      	uxtb	r2, r3
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a28:	0e1b      	lsrs	r3, r3, #24
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	f003 0303 	and.w	r3, r3, #3
 8008a30:	b2da      	uxtb	r2, r3
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a3a:	0c1b      	lsrs	r3, r3, #16
 8008a3c:	b2da      	uxtb	r2, r3
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a46:	0a1b      	lsrs	r3, r3, #8
 8008a48:	b2da      	uxtb	r2, r3
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a52:	b2da      	uxtb	r2, r3
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a5c:	0d1b      	lsrs	r3, r3, #20
 8008a5e:	b29a      	uxth	r2, r3
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a68:	0c1b      	lsrs	r3, r3, #16
 8008a6a:	b2db      	uxtb	r3, r3
 8008a6c:	f003 030f 	and.w	r3, r3, #15
 8008a70:	b2da      	uxtb	r2, r3
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a7a:	0bdb      	lsrs	r3, r3, #15
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	f003 0301 	and.w	r3, r3, #1
 8008a82:	b2da      	uxtb	r2, r3
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a8c:	0b9b      	lsrs	r3, r3, #14
 8008a8e:	b2db      	uxtb	r3, r3
 8008a90:	f003 0301 	and.w	r3, r3, #1
 8008a94:	b2da      	uxtb	r2, r3
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a9e:	0b5b      	lsrs	r3, r3, #13
 8008aa0:	b2db      	uxtb	r3, r3
 8008aa2:	f003 0301 	and.w	r3, r3, #1
 8008aa6:	b2da      	uxtb	r2, r3
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ab0:	0b1b      	lsrs	r3, r3, #12
 8008ab2:	b2db      	uxtb	r3, r3
 8008ab4:	f003 0301 	and.w	r3, r3, #1
 8008ab8:	b2da      	uxtb	r2, r3
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d163      	bne.n	8008b94 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ad0:	009a      	lsls	r2, r3, #2
 8008ad2:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008ad6:	4013      	ands	r3, r2
 8008ad8:	687a      	ldr	r2, [r7, #4]
 8008ada:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008adc:	0f92      	lsrs	r2, r2, #30
 8008ade:	431a      	orrs	r2, r3
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ae8:	0edb      	lsrs	r3, r3, #27
 8008aea:	b2db      	uxtb	r3, r3
 8008aec:	f003 0307 	and.w	r3, r3, #7
 8008af0:	b2da      	uxtb	r2, r3
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008afa:	0e1b      	lsrs	r3, r3, #24
 8008afc:	b2db      	uxtb	r3, r3
 8008afe:	f003 0307 	and.w	r3, r3, #7
 8008b02:	b2da      	uxtb	r2, r3
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b0c:	0d5b      	lsrs	r3, r3, #21
 8008b0e:	b2db      	uxtb	r3, r3
 8008b10:	f003 0307 	and.w	r3, r3, #7
 8008b14:	b2da      	uxtb	r2, r3
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b1e:	0c9b      	lsrs	r3, r3, #18
 8008b20:	b2db      	uxtb	r3, r3
 8008b22:	f003 0307 	and.w	r3, r3, #7
 8008b26:	b2da      	uxtb	r2, r3
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b30:	0bdb      	lsrs	r3, r3, #15
 8008b32:	b2db      	uxtb	r3, r3
 8008b34:	f003 0307 	and.w	r3, r3, #7
 8008b38:	b2da      	uxtb	r2, r3
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	691b      	ldr	r3, [r3, #16]
 8008b42:	1c5a      	adds	r2, r3, #1
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	7e1b      	ldrb	r3, [r3, #24]
 8008b4c:	b2db      	uxtb	r3, r3
 8008b4e:	f003 0307 	and.w	r3, r3, #7
 8008b52:	3302      	adds	r3, #2
 8008b54:	2201      	movs	r2, #1
 8008b56:	fa02 f303 	lsl.w	r3, r2, r3
 8008b5a:	687a      	ldr	r2, [r7, #4]
 8008b5c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008b5e:	fb02 f203 	mul.w	r2, r2, r3
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	7a1b      	ldrb	r3, [r3, #8]
 8008b6a:	b2db      	uxtb	r3, r3
 8008b6c:	f003 030f 	and.w	r3, r3, #15
 8008b70:	2201      	movs	r2, #1
 8008b72:	409a      	lsls	r2, r3
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b7c:	687a      	ldr	r2, [r7, #4]
 8008b7e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008b80:	0a52      	lsrs	r2, r2, #9
 8008b82:	fb02 f203 	mul.w	r2, r2, r3
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b90:	661a      	str	r2, [r3, #96]	; 0x60
 8008b92:	e031      	b.n	8008bf8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d11d      	bne.n	8008bd8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ba0:	041b      	lsls	r3, r3, #16
 8008ba2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008baa:	0c1b      	lsrs	r3, r3, #16
 8008bac:	431a      	orrs	r2, r3
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	691b      	ldr	r3, [r3, #16]
 8008bb6:	3301      	adds	r3, #1
 8008bb8:	029a      	lsls	r2, r3, #10
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008bcc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	661a      	str	r2, [r3, #96]	; 0x60
 8008bd6:	e00f      	b.n	8008bf8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a58      	ldr	r2, [pc, #352]	; (8008d40 <HAL_SD_GetCardCSD+0x344>)
 8008bde:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2201      	movs	r2, #1
 8008bf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	e09d      	b.n	8008d34 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bfc:	0b9b      	lsrs	r3, r3, #14
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	f003 0301 	and.w	r3, r3, #1
 8008c04:	b2da      	uxtb	r2, r3
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c0e:	09db      	lsrs	r3, r3, #7
 8008c10:	b2db      	uxtb	r3, r3
 8008c12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c16:	b2da      	uxtb	r2, r3
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c20:	b2db      	uxtb	r3, r3
 8008c22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c26:	b2da      	uxtb	r2, r3
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c30:	0fdb      	lsrs	r3, r3, #31
 8008c32:	b2da      	uxtb	r2, r3
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c3c:	0f5b      	lsrs	r3, r3, #29
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	f003 0303 	and.w	r3, r3, #3
 8008c44:	b2da      	uxtb	r2, r3
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c4e:	0e9b      	lsrs	r3, r3, #26
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	f003 0307 	and.w	r3, r3, #7
 8008c56:	b2da      	uxtb	r2, r3
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c60:	0d9b      	lsrs	r3, r3, #22
 8008c62:	b2db      	uxtb	r3, r3
 8008c64:	f003 030f 	and.w	r3, r3, #15
 8008c68:	b2da      	uxtb	r2, r3
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c72:	0d5b      	lsrs	r3, r3, #21
 8008c74:	b2db      	uxtb	r3, r3
 8008c76:	f003 0301 	and.w	r3, r3, #1
 8008c7a:	b2da      	uxtb	r2, r3
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	2200      	movs	r2, #0
 8008c86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c8e:	0c1b      	lsrs	r3, r3, #16
 8008c90:	b2db      	uxtb	r3, r3
 8008c92:	f003 0301 	and.w	r3, r3, #1
 8008c96:	b2da      	uxtb	r2, r3
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ca2:	0bdb      	lsrs	r3, r3, #15
 8008ca4:	b2db      	uxtb	r3, r3
 8008ca6:	f003 0301 	and.w	r3, r3, #1
 8008caa:	b2da      	uxtb	r2, r3
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cb6:	0b9b      	lsrs	r3, r3, #14
 8008cb8:	b2db      	uxtb	r3, r3
 8008cba:	f003 0301 	and.w	r3, r3, #1
 8008cbe:	b2da      	uxtb	r2, r3
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cca:	0b5b      	lsrs	r3, r3, #13
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	f003 0301 	and.w	r3, r3, #1
 8008cd2:	b2da      	uxtb	r2, r3
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cde:	0b1b      	lsrs	r3, r3, #12
 8008ce0:	b2db      	uxtb	r3, r3
 8008ce2:	f003 0301 	and.w	r3, r3, #1
 8008ce6:	b2da      	uxtb	r2, r3
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cf2:	0a9b      	lsrs	r3, r3, #10
 8008cf4:	b2db      	uxtb	r3, r3
 8008cf6:	f003 0303 	and.w	r3, r3, #3
 8008cfa:	b2da      	uxtb	r2, r3
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d06:	0a1b      	lsrs	r3, r3, #8
 8008d08:	b2db      	uxtb	r3, r3
 8008d0a:	f003 0303 	and.w	r3, r3, #3
 8008d0e:	b2da      	uxtb	r2, r3
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d1a:	085b      	lsrs	r3, r3, #1
 8008d1c:	b2db      	uxtb	r3, r3
 8008d1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d22:	b2da      	uxtb	r2, r3
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	2201      	movs	r2, #1
 8008d2e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008d32:	2300      	movs	r3, #0
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	370c      	adds	r7, #12
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr
 8008d40:	004005ff 	.word	0x004005ff

08008d44 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b083      	sub	sp, #12
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008d8e:	2300      	movs	r3, #0
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	370c      	adds	r7, #12
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr

08008d9c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008d9c:	b5b0      	push	{r4, r5, r7, lr}
 8008d9e:	b08e      	sub	sp, #56	; 0x38
 8008da0:	af04      	add	r7, sp, #16
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2203      	movs	r2, #3
 8008daa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008db2:	2b03      	cmp	r3, #3
 8008db4:	d02e      	beq.n	8008e14 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dbc:	d106      	bne.n	8008dcc <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dc2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	639a      	str	r2, [r3, #56]	; 0x38
 8008dca:	e029      	b.n	8008e20 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008dd2:	d10a      	bne.n	8008dea <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 faa1 	bl	800931c <SD_WideBus_Enable>
 8008dda:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de2:	431a      	orrs	r2, r3
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	639a      	str	r2, [r3, #56]	; 0x38
 8008de8:	e01a      	b.n	8008e20 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d10a      	bne.n	8008e06 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f000 fade 	bl	80093b2 <SD_WideBus_Disable>
 8008df6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dfe:	431a      	orrs	r2, r3
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	639a      	str	r2, [r3, #56]	; 0x38
 8008e04:	e00c      	b.n	8008e20 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e0a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	639a      	str	r2, [r3, #56]	; 0x38
 8008e12:	e005      	b.n	8008e20 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e18:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d009      	beq.n	8008e3c <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a18      	ldr	r2, [pc, #96]	; (8008e90 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8008e2e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2201      	movs	r2, #1
 8008e34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008e38:	2301      	movs	r3, #1
 8008e3a:	e024      	b.n	8008e86 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	689b      	ldr	r3, [r3, #8]
 8008e46:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	68db      	ldr	r3, [r3, #12]
 8008e4c:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	695b      	ldr	r3, [r3, #20]
 8008e56:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	699b      	ldr	r3, [r3, #24]
 8008e5c:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681d      	ldr	r5, [r3, #0]
 8008e62:	466c      	mov	r4, sp
 8008e64:	f107 0318 	add.w	r3, r7, #24
 8008e68:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008e6c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008e70:	f107 030c 	add.w	r3, r7, #12
 8008e74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008e76:	4628      	mov	r0, r5
 8008e78:	f002 fae4 	bl	800b444 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2201      	movs	r2, #1
 8008e80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008e84:	2300      	movs	r3, #0
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3728      	adds	r7, #40	; 0x28
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bdb0      	pop	{r4, r5, r7, pc}
 8008e8e:	bf00      	nop
 8008e90:	004005ff 	.word	0x004005ff

08008e94 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b086      	sub	sp, #24
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008ea0:	f107 030c 	add.w	r3, r7, #12
 8008ea4:	4619      	mov	r1, r3
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 fa10 	bl	80092cc <SD_SendStatus>
 8008eac:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d005      	beq.n	8008ec0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	431a      	orrs	r2, r3
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	0a5b      	lsrs	r3, r3, #9
 8008ec4:	f003 030f 	and.w	r3, r3, #15
 8008ec8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008eca:	693b      	ldr	r3, [r7, #16]
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3718      	adds	r7, #24
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}

08008ed4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b085      	sub	sp, #20
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ee0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ef0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8008ef2:	bf00      	nop
 8008ef4:	3714      	adds	r7, #20
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efc:	4770      	bx	lr

08008efe <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008efe:	b580      	push	{r7, lr}
 8008f00:	b084      	sub	sp, #16
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f0a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f10:	2b82      	cmp	r3, #130	; 0x82
 8008f12:	d111      	bne.n	8008f38 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f002 fc09 	bl	800b730 <SDMMC_CmdStopTransfer>
 8008f1e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d008      	beq.n	8008f38 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	431a      	orrs	r2, r3
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8008f32:	68f8      	ldr	r0, [r7, #12]
 8008f34:	f7ff fd58 	bl	80089e8 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f022 0208 	bic.w	r2, r2, #8
 8008f46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f240 523a 	movw	r2, #1338	; 0x53a
 8008f50:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	2201      	movs	r2, #1
 8008f56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8008f60:	68f8      	ldr	r0, [r7, #12]
 8008f62:	f003 f84f 	bl	800c004 <HAL_SD_RxCpltCallback>
#endif
}
 8008f66:	bf00      	nop
 8008f68:	3710      	adds	r7, #16
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}
	...

08008f70 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b086      	sub	sp, #24
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f7c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f7fc f8c4 	bl	800510c <HAL_DMA_GetError>
 8008f84:	4603      	mov	r3, r0
 8008f86:	2b02      	cmp	r3, #2
 8008f88:	d03e      	beq.n	8009008 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f90:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f98:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d002      	beq.n	8008fa6 <SD_DMAError+0x36>
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	d12d      	bne.n	8009002 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4a19      	ldr	r2, [pc, #100]	; (8009010 <SD_DMAError+0xa0>)
 8008fac:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008fbc:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fc2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8008fca:	6978      	ldr	r0, [r7, #20]
 8008fcc:	f7ff ff62 	bl	8008e94 <HAL_SD_GetCardState>
 8008fd0:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	2b06      	cmp	r3, #6
 8008fd6:	d002      	beq.n	8008fde <SD_DMAError+0x6e>
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	2b05      	cmp	r3, #5
 8008fdc:	d10a      	bne.n	8008ff4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f002 fba4 	bl	800b730 <SDMMC_CmdStopTransfer>
 8008fe8:	4602      	mov	r2, r0
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fee:	431a      	orrs	r2, r3
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	2200      	movs	r2, #0
 8009000:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8009002:	6978      	ldr	r0, [r7, #20]
 8009004:	f7ff fcf0 	bl	80089e8 <HAL_SD_ErrorCallback>
#endif
  }
}
 8009008:	bf00      	nop
 800900a:	3718      	adds	r7, #24
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}
 8009010:	004005ff 	.word	0x004005ff

08009014 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009014:	b5b0      	push	{r4, r5, r7, lr}
 8009016:	b094      	sub	sp, #80	; 0x50
 8009018:	af04      	add	r7, sp, #16
 800901a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800901c:	2301      	movs	r3, #1
 800901e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4618      	mov	r0, r3
 8009026:	f002 fa55 	bl	800b4d4 <SDMMC_GetPowerState>
 800902a:	4603      	mov	r3, r0
 800902c:	2b00      	cmp	r3, #0
 800902e:	d102      	bne.n	8009036 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009030:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009034:	e0b7      	b.n	80091a6 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800903a:	2b03      	cmp	r3, #3
 800903c:	d02f      	beq.n	800909e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	4618      	mov	r0, r3
 8009044:	f002 fc7f 	bl	800b946 <SDMMC_CmdSendCID>
 8009048:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800904a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800904c:	2b00      	cmp	r3, #0
 800904e:	d001      	beq.n	8009054 <SD_InitCard+0x40>
    {
      return errorstate;
 8009050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009052:	e0a8      	b.n	80091a6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	2100      	movs	r1, #0
 800905a:	4618      	mov	r0, r3
 800905c:	f002 fa7f 	bl	800b55e <SDMMC_GetResponse>
 8009060:	4602      	mov	r2, r0
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	2104      	movs	r1, #4
 800906c:	4618      	mov	r0, r3
 800906e:	f002 fa76 	bl	800b55e <SDMMC_GetResponse>
 8009072:	4602      	mov	r2, r0
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	2108      	movs	r1, #8
 800907e:	4618      	mov	r0, r3
 8009080:	f002 fa6d 	bl	800b55e <SDMMC_GetResponse>
 8009084:	4602      	mov	r2, r0
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	210c      	movs	r1, #12
 8009090:	4618      	mov	r0, r3
 8009092:	f002 fa64 	bl	800b55e <SDMMC_GetResponse>
 8009096:	4602      	mov	r2, r0
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090a2:	2b03      	cmp	r3, #3
 80090a4:	d00d      	beq.n	80090c2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f107 020e 	add.w	r2, r7, #14
 80090ae:	4611      	mov	r1, r2
 80090b0:	4618      	mov	r0, r3
 80090b2:	f002 fc85 	bl	800b9c0 <SDMMC_CmdSetRelAdd>
 80090b6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80090b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d001      	beq.n	80090c2 <SD_InitCard+0xae>
    {
      return errorstate;
 80090be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090c0:	e071      	b.n	80091a6 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090c6:	2b03      	cmp	r3, #3
 80090c8:	d036      	beq.n	8009138 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80090ca:	89fb      	ldrh	r3, [r7, #14]
 80090cc:	461a      	mov	r2, r3
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681a      	ldr	r2, [r3, #0]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090da:	041b      	lsls	r3, r3, #16
 80090dc:	4619      	mov	r1, r3
 80090de:	4610      	mov	r0, r2
 80090e0:	f002 fc4f 	bl	800b982 <SDMMC_CmdSendCSD>
 80090e4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80090e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d001      	beq.n	80090f0 <SD_InitCard+0xdc>
    {
      return errorstate;
 80090ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090ee:	e05a      	b.n	80091a6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	2100      	movs	r1, #0
 80090f6:	4618      	mov	r0, r3
 80090f8:	f002 fa31 	bl	800b55e <SDMMC_GetResponse>
 80090fc:	4602      	mov	r2, r0
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	2104      	movs	r1, #4
 8009108:	4618      	mov	r0, r3
 800910a:	f002 fa28 	bl	800b55e <SDMMC_GetResponse>
 800910e:	4602      	mov	r2, r0
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	2108      	movs	r1, #8
 800911a:	4618      	mov	r0, r3
 800911c:	f002 fa1f 	bl	800b55e <SDMMC_GetResponse>
 8009120:	4602      	mov	r2, r0
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	210c      	movs	r1, #12
 800912c:	4618      	mov	r0, r3
 800912e:	f002 fa16 	bl	800b55e <SDMMC_GetResponse>
 8009132:	4602      	mov	r2, r0
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	2104      	movs	r1, #4
 800913e:	4618      	mov	r0, r3
 8009140:	f002 fa0d 	bl	800b55e <SDMMC_GetResponse>
 8009144:	4603      	mov	r3, r0
 8009146:	0d1a      	lsrs	r2, r3, #20
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800914c:	f107 0310 	add.w	r3, r7, #16
 8009150:	4619      	mov	r1, r3
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f7ff fc52 	bl	80089fc <HAL_SD_GetCardCSD>
 8009158:	4603      	mov	r3, r0
 800915a:	2b00      	cmp	r3, #0
 800915c:	d002      	beq.n	8009164 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800915e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009162:	e020      	b.n	80091a6 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6819      	ldr	r1, [r3, #0]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800916c:	041b      	lsls	r3, r3, #16
 800916e:	f04f 0400 	mov.w	r4, #0
 8009172:	461a      	mov	r2, r3
 8009174:	4623      	mov	r3, r4
 8009176:	4608      	mov	r0, r1
 8009178:	f002 fafc 	bl	800b774 <SDMMC_CmdSelDesel>
 800917c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800917e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009180:	2b00      	cmp	r3, #0
 8009182:	d001      	beq.n	8009188 <SD_InitCard+0x174>
  {
    return errorstate;
 8009184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009186:	e00e      	b.n	80091a6 <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681d      	ldr	r5, [r3, #0]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	466c      	mov	r4, sp
 8009190:	f103 0210 	add.w	r2, r3, #16
 8009194:	ca07      	ldmia	r2, {r0, r1, r2}
 8009196:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800919a:	3304      	adds	r3, #4
 800919c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800919e:	4628      	mov	r0, r5
 80091a0:	f002 f950 	bl	800b444 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80091a4:	2300      	movs	r3, #0
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3740      	adds	r7, #64	; 0x40
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bdb0      	pop	{r4, r5, r7, pc}
	...

080091b0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b086      	sub	sp, #24
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80091b8:	2300      	movs	r3, #0
 80091ba:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80091bc:	2300      	movs	r3, #0
 80091be:	617b      	str	r3, [r7, #20]
 80091c0:	2300      	movs	r3, #0
 80091c2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	4618      	mov	r0, r3
 80091ca:	f002 faf6 	bl	800b7ba <SDMMC_CmdGoIdleState>
 80091ce:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d001      	beq.n	80091da <SD_PowerON+0x2a>
  {
    return errorstate;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	e072      	b.n	80092c0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4618      	mov	r0, r3
 80091e0:	f002 fb09 	bl	800b7f6 <SDMMC_CmdOperCond>
 80091e4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d00d      	beq.n	8009208 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2200      	movs	r2, #0
 80091f0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	4618      	mov	r0, r3
 80091f8:	f002 fadf 	bl	800b7ba <SDMMC_CmdGoIdleState>
 80091fc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d004      	beq.n	800920e <SD_PowerON+0x5e>
    {
      return errorstate;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	e05b      	b.n	80092c0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2201      	movs	r2, #1
 800920c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009212:	2b01      	cmp	r3, #1
 8009214:	d137      	bne.n	8009286 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	2100      	movs	r1, #0
 800921c:	4618      	mov	r0, r3
 800921e:	f002 fb09 	bl	800b834 <SDMMC_CmdAppCommand>
 8009222:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d02d      	beq.n	8009286 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800922a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800922e:	e047      	b.n	80092c0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	2100      	movs	r1, #0
 8009236:	4618      	mov	r0, r3
 8009238:	f002 fafc 	bl	800b834 <SDMMC_CmdAppCommand>
 800923c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d001      	beq.n	8009248 <SD_PowerON+0x98>
    {
      return errorstate;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	e03b      	b.n	80092c0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	491e      	ldr	r1, [pc, #120]	; (80092c8 <SD_PowerON+0x118>)
 800924e:	4618      	mov	r0, r3
 8009250:	f002 fb12 	bl	800b878 <SDMMC_CmdAppOperCommand>
 8009254:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d002      	beq.n	8009262 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800925c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009260:	e02e      	b.n	80092c0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	2100      	movs	r1, #0
 8009268:	4618      	mov	r0, r3
 800926a:	f002 f978 	bl	800b55e <SDMMC_GetResponse>
 800926e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	0fdb      	lsrs	r3, r3, #31
 8009274:	2b01      	cmp	r3, #1
 8009276:	d101      	bne.n	800927c <SD_PowerON+0xcc>
 8009278:	2301      	movs	r3, #1
 800927a:	e000      	b.n	800927e <SD_PowerON+0xce>
 800927c:	2300      	movs	r3, #0
 800927e:	613b      	str	r3, [r7, #16]

    count++;
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	3301      	adds	r3, #1
 8009284:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800928c:	4293      	cmp	r3, r2
 800928e:	d802      	bhi.n	8009296 <SD_PowerON+0xe6>
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d0cc      	beq.n	8009230 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800929c:	4293      	cmp	r3, r2
 800929e:	d902      	bls.n	80092a6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80092a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80092a4:	e00c      	b.n	80092c0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d003      	beq.n	80092b8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2201      	movs	r2, #1
 80092b4:	645a      	str	r2, [r3, #68]	; 0x44
 80092b6:	e002      	b.n	80092be <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2200      	movs	r2, #0
 80092bc:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80092be:	2300      	movs	r3, #0
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3718      	adds	r7, #24
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}
 80092c8:	c1100000 	.word	0xc1100000

080092cc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b084      	sub	sp, #16
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
 80092d4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d102      	bne.n	80092e2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80092dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80092e0:	e018      	b.n	8009314 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681a      	ldr	r2, [r3, #0]
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092ea:	041b      	lsls	r3, r3, #16
 80092ec:	4619      	mov	r1, r3
 80092ee:	4610      	mov	r0, r2
 80092f0:	f002 fb87 	bl	800ba02 <SDMMC_CmdSendStatus>
 80092f4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d001      	beq.n	8009300 <SD_SendStatus+0x34>
  {
    return errorstate;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	e009      	b.n	8009314 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	2100      	movs	r1, #0
 8009306:	4618      	mov	r0, r3
 8009308:	f002 f929 	bl	800b55e <SDMMC_GetResponse>
 800930c:	4602      	mov	r2, r0
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009312:	2300      	movs	r3, #0
}
 8009314:	4618      	mov	r0, r3
 8009316:	3710      	adds	r7, #16
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b086      	sub	sp, #24
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009324:	2300      	movs	r3, #0
 8009326:	60fb      	str	r3, [r7, #12]
 8009328:	2300      	movs	r3, #0
 800932a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	2100      	movs	r1, #0
 8009332:	4618      	mov	r0, r3
 8009334:	f002 f913 	bl	800b55e <SDMMC_GetResponse>
 8009338:	4603      	mov	r3, r0
 800933a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800933e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009342:	d102      	bne.n	800934a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009344:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009348:	e02f      	b.n	80093aa <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800934a:	f107 030c 	add.w	r3, r7, #12
 800934e:	4619      	mov	r1, r3
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f000 f879 	bl	8009448 <SD_FindSCR>
 8009356:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d001      	beq.n	8009362 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	e023      	b.n	80093aa <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009368:	2b00      	cmp	r3, #0
 800936a:	d01c      	beq.n	80093a6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681a      	ldr	r2, [r3, #0]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009374:	041b      	lsls	r3, r3, #16
 8009376:	4619      	mov	r1, r3
 8009378:	4610      	mov	r0, r2
 800937a:	f002 fa5b 	bl	800b834 <SDMMC_CmdAppCommand>
 800937e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d001      	beq.n	800938a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	e00f      	b.n	80093aa <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	2102      	movs	r1, #2
 8009390:	4618      	mov	r0, r3
 8009392:	f002 fa95 	bl	800b8c0 <SDMMC_CmdBusWidth>
 8009396:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d001      	beq.n	80093a2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	e003      	b.n	80093aa <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80093a2:	2300      	movs	r3, #0
 80093a4:	e001      	b.n	80093aa <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80093a6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3718      	adds	r7, #24
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}

080093b2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80093b2:	b580      	push	{r7, lr}
 80093b4:	b086      	sub	sp, #24
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80093ba:	2300      	movs	r3, #0
 80093bc:	60fb      	str	r3, [r7, #12]
 80093be:	2300      	movs	r3, #0
 80093c0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	2100      	movs	r1, #0
 80093c8:	4618      	mov	r0, r3
 80093ca:	f002 f8c8 	bl	800b55e <SDMMC_GetResponse>
 80093ce:	4603      	mov	r3, r0
 80093d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80093d8:	d102      	bne.n	80093e0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80093da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80093de:	e02f      	b.n	8009440 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80093e0:	f107 030c 	add.w	r3, r7, #12
 80093e4:	4619      	mov	r1, r3
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f000 f82e 	bl	8009448 <SD_FindSCR>
 80093ec:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d001      	beq.n	80093f8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	e023      	b.n	8009440 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d01c      	beq.n	800943c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681a      	ldr	r2, [r3, #0]
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800940a:	041b      	lsls	r3, r3, #16
 800940c:	4619      	mov	r1, r3
 800940e:	4610      	mov	r0, r2
 8009410:	f002 fa10 	bl	800b834 <SDMMC_CmdAppCommand>
 8009414:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d001      	beq.n	8009420 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	e00f      	b.n	8009440 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	2100      	movs	r1, #0
 8009426:	4618      	mov	r0, r3
 8009428:	f002 fa4a 	bl	800b8c0 <SDMMC_CmdBusWidth>
 800942c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d001      	beq.n	8009438 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	e003      	b.n	8009440 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009438:	2300      	movs	r3, #0
 800943a:	e001      	b.n	8009440 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800943c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009440:	4618      	mov	r0, r3
 8009442:	3718      	adds	r7, #24
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}

08009448 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009448:	b590      	push	{r4, r7, lr}
 800944a:	b08f      	sub	sp, #60	; 0x3c
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009452:	f7fa fb4d 	bl	8003af0 <HAL_GetTick>
 8009456:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009458:	2300      	movs	r3, #0
 800945a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800945c:	2300      	movs	r3, #0
 800945e:	60bb      	str	r3, [r7, #8]
 8009460:	2300      	movs	r3, #0
 8009462:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	2108      	movs	r1, #8
 800946e:	4618      	mov	r0, r3
 8009470:	f002 f8b4 	bl	800b5dc <SDMMC_CmdBlockLength>
 8009474:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009478:	2b00      	cmp	r3, #0
 800947a:	d001      	beq.n	8009480 <SD_FindSCR+0x38>
  {
    return errorstate;
 800947c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800947e:	e0a9      	b.n	80095d4 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681a      	ldr	r2, [r3, #0]
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009488:	041b      	lsls	r3, r3, #16
 800948a:	4619      	mov	r1, r3
 800948c:	4610      	mov	r0, r2
 800948e:	f002 f9d1 	bl	800b834 <SDMMC_CmdAppCommand>
 8009492:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009496:	2b00      	cmp	r3, #0
 8009498:	d001      	beq.n	800949e <SD_FindSCR+0x56>
  {
    return errorstate;
 800949a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800949c:	e09a      	b.n	80095d4 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800949e:	f04f 33ff 	mov.w	r3, #4294967295
 80094a2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80094a4:	2308      	movs	r3, #8
 80094a6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80094a8:	2330      	movs	r3, #48	; 0x30
 80094aa:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80094ac:	2302      	movs	r3, #2
 80094ae:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80094b0:	2300      	movs	r3, #0
 80094b2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80094b4:	2301      	movs	r3, #1
 80094b6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f107 0210 	add.w	r2, r7, #16
 80094c0:	4611      	mov	r1, r2
 80094c2:	4618      	mov	r0, r3
 80094c4:	f002 f85e 	bl	800b584 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4618      	mov	r0, r3
 80094ce:	f002 fa19 	bl	800b904 <SDMMC_CmdSendSCR>
 80094d2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80094d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d022      	beq.n	8009520 <SD_FindSCR+0xd8>
  {
    return errorstate;
 80094da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094dc:	e07a      	b.n	80095d4 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d00e      	beq.n	800950a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6819      	ldr	r1, [r3, #0]
 80094f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	f107 0208 	add.w	r2, r7, #8
 80094f8:	18d4      	adds	r4, r2, r3
 80094fa:	4608      	mov	r0, r1
 80094fc:	f001 ffce 	bl	800b49c <SDMMC_ReadFIFO>
 8009500:	4603      	mov	r3, r0
 8009502:	6023      	str	r3, [r4, #0]
      index++;
 8009504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009506:	3301      	adds	r3, #1
 8009508:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800950a:	f7fa faf1 	bl	8003af0 <HAL_GetTick>
 800950e:	4602      	mov	r2, r0
 8009510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009512:	1ad3      	subs	r3, r2, r3
 8009514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009518:	d102      	bne.n	8009520 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800951a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800951e:	e059      	b.n	80095d4 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009526:	f240 432a 	movw	r3, #1066	; 0x42a
 800952a:	4013      	ands	r3, r2
 800952c:	2b00      	cmp	r3, #0
 800952e:	d0d6      	beq.n	80094de <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009536:	f003 0308 	and.w	r3, r3, #8
 800953a:	2b00      	cmp	r3, #0
 800953c:	d005      	beq.n	800954a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	2208      	movs	r2, #8
 8009544:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009546:	2308      	movs	r3, #8
 8009548:	e044      	b.n	80095d4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009550:	f003 0302 	and.w	r3, r3, #2
 8009554:	2b00      	cmp	r3, #0
 8009556:	d005      	beq.n	8009564 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	2202      	movs	r2, #2
 800955e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009560:	2302      	movs	r3, #2
 8009562:	e037      	b.n	80095d4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800956a:	f003 0320 	and.w	r3, r3, #32
 800956e:	2b00      	cmp	r3, #0
 8009570:	d005      	beq.n	800957e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	2220      	movs	r2, #32
 8009578:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800957a:	2320      	movs	r3, #32
 800957c:	e02a      	b.n	80095d4 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f240 523a 	movw	r2, #1338	; 0x53a
 8009586:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	061a      	lsls	r2, r3, #24
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	021b      	lsls	r3, r3, #8
 8009590:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009594:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	0a1b      	lsrs	r3, r3, #8
 800959a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800959e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	0e1b      	lsrs	r3, r3, #24
 80095a4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80095a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095a8:	601a      	str	r2, [r3, #0]
    scr++;
 80095aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ac:	3304      	adds	r3, #4
 80095ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	061a      	lsls	r2, r3, #24
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	021b      	lsls	r3, r3, #8
 80095b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80095bc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	0a1b      	lsrs	r3, r3, #8
 80095c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80095c6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	0e1b      	lsrs	r3, r3, #24
 80095cc:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80095ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095d0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80095d2:	2300      	movs	r3, #0
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	373c      	adds	r7, #60	; 0x3c
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd90      	pop	{r4, r7, pc}

080095dc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80095dc:	b580      	push	{r7, lr}
 80095de:	b082      	sub	sp, #8
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d101      	bne.n	80095f0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80095ec:	2301      	movs	r3, #1
 80095ee:	e025      	b.n	800963c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80095f6:	b2db      	uxtb	r3, r3
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d106      	bne.n	800960a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2200      	movs	r2, #0
 8009600:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f7fa f849 	bl	800369c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2202      	movs	r2, #2
 800960e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681a      	ldr	r2, [r3, #0]
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	3304      	adds	r3, #4
 800961a:	4619      	mov	r1, r3
 800961c:	4610      	mov	r0, r2
 800961e:	f001 fdeb 	bl	800b1f8 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6818      	ldr	r0, [r3, #0]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	685b      	ldr	r3, [r3, #4]
 800962a:	461a      	mov	r2, r3
 800962c:	6839      	ldr	r1, [r7, #0]
 800962e:	f001 fe55 	bl	800b2dc <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2201      	movs	r2, #1
 8009636:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800963a:	2300      	movs	r3, #0
}
 800963c:	4618      	mov	r0, r3
 800963e:	3708      	adds	r7, #8
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}

08009644 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b084      	sub	sp, #16
 8009648:	af00      	add	r7, sp, #0
 800964a:	60f8      	str	r0, [r7, #12]
 800964c:	60b9      	str	r1, [r7, #8]
 800964e:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009656:	b2db      	uxtb	r3, r3
 8009658:	2b02      	cmp	r3, #2
 800965a:	d101      	bne.n	8009660 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800965c:	2302      	movs	r3, #2
 800965e:	e018      	b.n	8009692 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2202      	movs	r2, #2
 8009664:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	68b9      	ldr	r1, [r7, #8]
 8009670:	4618      	mov	r0, r3
 8009672:	f001 feb3 	bl	800b3dc <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	2b02      	cmp	r3, #2
 800967c:	d104      	bne.n	8009688 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	2205      	movs	r2, #5
 8009682:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8009686:	e003      	b.n	8009690 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2201      	movs	r2, #1
 800968c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8009690:	2300      	movs	r3, #0
}
 8009692:	4618      	mov	r0, r3
 8009694:	3710      	adds	r7, #16
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}

0800969a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800969a:	b580      	push	{r7, lr}
 800969c:	b082      	sub	sp, #8
 800969e:	af00      	add	r7, sp, #0
 80096a0:	6078      	str	r0, [r7, #4]
 80096a2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80096aa:	b2db      	uxtb	r3, r3
 80096ac:	2b02      	cmp	r3, #2
 80096ae:	d101      	bne.n	80096b4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80096b0:	2302      	movs	r3, #2
 80096b2:	e00e      	b.n	80096d2 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2202      	movs	r2, #2
 80096b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	6839      	ldr	r1, [r7, #0]
 80096c2:	4618      	mov	r0, r3
 80096c4:	f001 feab 	bl	800b41e <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2201      	movs	r2, #1
 80096cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80096d0:	2300      	movs	r3, #0
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3708      	adds	r7, #8
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
	...

080096dc <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b084      	sub	sp, #16
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d101      	bne.n	80096ee <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 80096ea:	2301      	movs	r3, #1
 80096ec:	e04c      	b.n	8009788 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d106      	bne.n	8009708 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2200      	movs	r2, #0
 80096fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f7f9 fca6 	bl	8003054 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2202      	movs	r2, #2
 800970c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	681a      	ldr	r2, [r3, #0]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f022 0203 	bic.w	r2, r2, #3
 800971e:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8009728:	68fa      	ldr	r2, [r7, #12]
 800972a:	4b19      	ldr	r3, [pc, #100]	; (8009790 <HAL_SPDIFRX_Init+0xb4>)
 800972c:	4013      	ands	r3, r2
 800972e:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8009738:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800973e:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8009744:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800974a:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8009750:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8009756:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800975c:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 8009762:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8009768:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800976a:	68fa      	ldr	r2, [r7, #12]
 800976c:	4313      	orrs	r3, r2
 800976e:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	68fa      	ldr	r2, [r7, #12]
 8009776:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2200      	movs	r2, #0
 800977c:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2201      	movs	r2, #1
 8009782:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8009786:	2300      	movs	r3, #0
}
 8009788:	4618      	mov	r0, r3
 800978a:	3710      	adds	r7, #16
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}
 8009790:	fff88407 	.word	0xfff88407

08009794 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b084      	sub	sp, #16
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d101      	bne.n	80097a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80097a2:	2301      	movs	r3, #1
 80097a4:	e084      	b.n	80098b0 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2200      	movs	r2, #0
 80097aa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80097b2:	b2db      	uxtb	r3, r3
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d106      	bne.n	80097c6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2200      	movs	r2, #0
 80097bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f7f9 fc89 	bl	80030d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2202      	movs	r2, #2
 80097ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	681a      	ldr	r2, [r3, #0]
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80097dc:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	68db      	ldr	r3, [r3, #12]
 80097e2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80097e6:	d902      	bls.n	80097ee <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80097e8:	2300      	movs	r3, #0
 80097ea:	60fb      	str	r3, [r7, #12]
 80097ec:	e002      	b.n	80097f4 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80097ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80097f2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	68db      	ldr	r3, [r3, #12]
 80097f8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80097fc:	d007      	beq.n	800980e <HAL_SPI_Init+0x7a>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	68db      	ldr	r3, [r3, #12]
 8009802:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009806:	d002      	beq.n	800980e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2200      	movs	r2, #0
 800980c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009812:	2b00      	cmp	r3, #0
 8009814:	d10b      	bne.n	800982e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	68db      	ldr	r3, [r3, #12]
 800981a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800981e:	d903      	bls.n	8009828 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2202      	movs	r2, #2
 8009824:	631a      	str	r2, [r3, #48]	; 0x30
 8009826:	e002      	b.n	800982e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2201      	movs	r2, #1
 800982c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	685a      	ldr	r2, [r3, #4]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	689b      	ldr	r3, [r3, #8]
 8009836:	431a      	orrs	r2, r3
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	691b      	ldr	r3, [r3, #16]
 800983c:	431a      	orrs	r2, r3
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	695b      	ldr	r3, [r3, #20]
 8009842:	431a      	orrs	r2, r3
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	699b      	ldr	r3, [r3, #24]
 8009848:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800984c:	431a      	orrs	r2, r3
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	69db      	ldr	r3, [r3, #28]
 8009852:	431a      	orrs	r2, r3
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6a1b      	ldr	r3, [r3, #32]
 8009858:	ea42 0103 	orr.w	r1, r2, r3
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	430a      	orrs	r2, r1
 8009866:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	699b      	ldr	r3, [r3, #24]
 800986c:	0c1b      	lsrs	r3, r3, #16
 800986e:	f003 0204 	and.w	r2, r3, #4
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009876:	431a      	orrs	r2, r3
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800987c:	431a      	orrs	r2, r3
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	68db      	ldr	r3, [r3, #12]
 8009882:	ea42 0103 	orr.w	r1, r2, r3
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	68fa      	ldr	r2, [r7, #12]
 800988c:	430a      	orrs	r2, r1
 800988e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	69da      	ldr	r2, [r3, #28]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800989e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2200      	movs	r2, #0
 80098a4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2201      	movs	r2, #1
 80098aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80098ae:	2300      	movs	r3, #0
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	3710      	adds	r7, #16
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}

080098b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b082      	sub	sp, #8
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d101      	bne.n	80098ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80098c6:	2301      	movs	r3, #1
 80098c8:	e01d      	b.n	8009906 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098d0:	b2db      	uxtb	r3, r3
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d106      	bne.n	80098e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2200      	movs	r2, #0
 80098da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f7f9 fc5c 	bl	800319c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2202      	movs	r2, #2
 80098e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681a      	ldr	r2, [r3, #0]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	3304      	adds	r3, #4
 80098f4:	4619      	mov	r1, r3
 80098f6:	4610      	mov	r0, r2
 80098f8:	f000 fb78 	bl	8009fec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2201      	movs	r2, #1
 8009900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009904:	2300      	movs	r3, #0
}
 8009906:	4618      	mov	r0, r3
 8009908:	3708      	adds	r7, #8
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}
	...

08009910 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009910:	b480      	push	{r7}
 8009912:	b085      	sub	sp, #20
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	68da      	ldr	r2, [r3, #12]
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f042 0201 	orr.w	r2, r2, #1
 8009926:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	689a      	ldr	r2, [r3, #8]
 800992e:	4b0c      	ldr	r3, [pc, #48]	; (8009960 <HAL_TIM_Base_Start_IT+0x50>)
 8009930:	4013      	ands	r3, r2
 8009932:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	2b06      	cmp	r3, #6
 8009938:	d00b      	beq.n	8009952 <HAL_TIM_Base_Start_IT+0x42>
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009940:	d007      	beq.n	8009952 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	681a      	ldr	r2, [r3, #0]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f042 0201 	orr.w	r2, r2, #1
 8009950:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009952:	2300      	movs	r3, #0
}
 8009954:	4618      	mov	r0, r3
 8009956:	3714      	adds	r7, #20
 8009958:	46bd      	mov	sp, r7
 800995a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995e:	4770      	bx	lr
 8009960:	00010007 	.word	0x00010007

08009964 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b082      	sub	sp, #8
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d101      	bne.n	8009976 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009972:	2301      	movs	r3, #1
 8009974:	e01d      	b.n	80099b2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800997c:	b2db      	uxtb	r3, r3
 800997e:	2b00      	cmp	r3, #0
 8009980:	d106      	bne.n	8009990 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2200      	movs	r2, #0
 8009986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f7f9 fc74 	bl	8003278 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2202      	movs	r2, #2
 8009994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681a      	ldr	r2, [r3, #0]
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	3304      	adds	r3, #4
 80099a0:	4619      	mov	r1, r3
 80099a2:	4610      	mov	r0, r2
 80099a4:	f000 fb22 	bl	8009fec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2201      	movs	r2, #1
 80099ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80099b0:	2300      	movs	r3, #0
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3708      	adds	r7, #8
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}

080099ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80099ba:	b580      	push	{r7, lr}
 80099bc:	b082      	sub	sp, #8
 80099be:	af00      	add	r7, sp, #0
 80099c0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	691b      	ldr	r3, [r3, #16]
 80099c8:	f003 0302 	and.w	r3, r3, #2
 80099cc:	2b02      	cmp	r3, #2
 80099ce:	d122      	bne.n	8009a16 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	68db      	ldr	r3, [r3, #12]
 80099d6:	f003 0302 	and.w	r3, r3, #2
 80099da:	2b02      	cmp	r3, #2
 80099dc:	d11b      	bne.n	8009a16 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f06f 0202 	mvn.w	r2, #2
 80099e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2201      	movs	r2, #1
 80099ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	699b      	ldr	r3, [r3, #24]
 80099f4:	f003 0303 	and.w	r3, r3, #3
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d003      	beq.n	8009a04 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f000 fad7 	bl	8009fb0 <HAL_TIM_IC_CaptureCallback>
 8009a02:	e005      	b.n	8009a10 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f000 fac9 	bl	8009f9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f000 fada 	bl	8009fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2200      	movs	r2, #0
 8009a14:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	691b      	ldr	r3, [r3, #16]
 8009a1c:	f003 0304 	and.w	r3, r3, #4
 8009a20:	2b04      	cmp	r3, #4
 8009a22:	d122      	bne.n	8009a6a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	68db      	ldr	r3, [r3, #12]
 8009a2a:	f003 0304 	and.w	r3, r3, #4
 8009a2e:	2b04      	cmp	r3, #4
 8009a30:	d11b      	bne.n	8009a6a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f06f 0204 	mvn.w	r2, #4
 8009a3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2202      	movs	r2, #2
 8009a40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	699b      	ldr	r3, [r3, #24]
 8009a48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d003      	beq.n	8009a58 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f000 faad 	bl	8009fb0 <HAL_TIM_IC_CaptureCallback>
 8009a56:	e005      	b.n	8009a64 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f000 fa9f 	bl	8009f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f000 fab0 	bl	8009fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2200      	movs	r2, #0
 8009a68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	691b      	ldr	r3, [r3, #16]
 8009a70:	f003 0308 	and.w	r3, r3, #8
 8009a74:	2b08      	cmp	r3, #8
 8009a76:	d122      	bne.n	8009abe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	68db      	ldr	r3, [r3, #12]
 8009a7e:	f003 0308 	and.w	r3, r3, #8
 8009a82:	2b08      	cmp	r3, #8
 8009a84:	d11b      	bne.n	8009abe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f06f 0208 	mvn.w	r2, #8
 8009a8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2204      	movs	r2, #4
 8009a94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	69db      	ldr	r3, [r3, #28]
 8009a9c:	f003 0303 	and.w	r3, r3, #3
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d003      	beq.n	8009aac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f000 fa83 	bl	8009fb0 <HAL_TIM_IC_CaptureCallback>
 8009aaa:	e005      	b.n	8009ab8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f000 fa75 	bl	8009f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f000 fa86 	bl	8009fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2200      	movs	r2, #0
 8009abc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	691b      	ldr	r3, [r3, #16]
 8009ac4:	f003 0310 	and.w	r3, r3, #16
 8009ac8:	2b10      	cmp	r3, #16
 8009aca:	d122      	bne.n	8009b12 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	68db      	ldr	r3, [r3, #12]
 8009ad2:	f003 0310 	and.w	r3, r3, #16
 8009ad6:	2b10      	cmp	r3, #16
 8009ad8:	d11b      	bne.n	8009b12 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f06f 0210 	mvn.w	r2, #16
 8009ae2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2208      	movs	r2, #8
 8009ae8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	69db      	ldr	r3, [r3, #28]
 8009af0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d003      	beq.n	8009b00 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f000 fa59 	bl	8009fb0 <HAL_TIM_IC_CaptureCallback>
 8009afe:	e005      	b.n	8009b0c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f000 fa4b 	bl	8009f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f000 fa5c 	bl	8009fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	691b      	ldr	r3, [r3, #16]
 8009b18:	f003 0301 	and.w	r3, r3, #1
 8009b1c:	2b01      	cmp	r3, #1
 8009b1e:	d10e      	bne.n	8009b3e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	68db      	ldr	r3, [r3, #12]
 8009b26:	f003 0301 	and.w	r3, r3, #1
 8009b2a:	2b01      	cmp	r3, #1
 8009b2c:	d107      	bne.n	8009b3e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f06f 0201 	mvn.w	r2, #1
 8009b36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f7f8 feb1 	bl	80028a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	691b      	ldr	r3, [r3, #16]
 8009b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b48:	2b80      	cmp	r3, #128	; 0x80
 8009b4a:	d10e      	bne.n	8009b6a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	68db      	ldr	r3, [r3, #12]
 8009b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b56:	2b80      	cmp	r3, #128	; 0x80
 8009b58:	d107      	bne.n	8009b6a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009b62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f000 feef 	bl	800a948 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	691b      	ldr	r3, [r3, #16]
 8009b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b78:	d10e      	bne.n	8009b98 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	68db      	ldr	r3, [r3, #12]
 8009b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b84:	2b80      	cmp	r3, #128	; 0x80
 8009b86:	d107      	bne.n	8009b98 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f000 fee2 	bl	800a95c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	691b      	ldr	r3, [r3, #16]
 8009b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ba2:	2b40      	cmp	r3, #64	; 0x40
 8009ba4:	d10e      	bne.n	8009bc4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	68db      	ldr	r3, [r3, #12]
 8009bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bb0:	2b40      	cmp	r3, #64	; 0x40
 8009bb2:	d107      	bne.n	8009bc4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 fa0a 	bl	8009fd8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	691b      	ldr	r3, [r3, #16]
 8009bca:	f003 0320 	and.w	r3, r3, #32
 8009bce:	2b20      	cmp	r3, #32
 8009bd0:	d10e      	bne.n	8009bf0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	68db      	ldr	r3, [r3, #12]
 8009bd8:	f003 0320 	and.w	r3, r3, #32
 8009bdc:	2b20      	cmp	r3, #32
 8009bde:	d107      	bne.n	8009bf0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f06f 0220 	mvn.w	r2, #32
 8009be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f000 fea2 	bl	800a934 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009bf0:	bf00      	nop
 8009bf2:	3708      	adds	r7, #8
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}

08009bf8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b084      	sub	sp, #16
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	60f8      	str	r0, [r7, #12]
 8009c00:	60b9      	str	r1, [r7, #8]
 8009c02:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	d101      	bne.n	8009c12 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009c0e:	2302      	movs	r3, #2
 8009c10:	e105      	b.n	8009e1e <HAL_TIM_PWM_ConfigChannel+0x226>
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2201      	movs	r2, #1
 8009c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	2202      	movs	r2, #2
 8009c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2b14      	cmp	r3, #20
 8009c26:	f200 80f0 	bhi.w	8009e0a <HAL_TIM_PWM_ConfigChannel+0x212>
 8009c2a:	a201      	add	r2, pc, #4	; (adr r2, 8009c30 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c30:	08009c85 	.word	0x08009c85
 8009c34:	08009e0b 	.word	0x08009e0b
 8009c38:	08009e0b 	.word	0x08009e0b
 8009c3c:	08009e0b 	.word	0x08009e0b
 8009c40:	08009cc5 	.word	0x08009cc5
 8009c44:	08009e0b 	.word	0x08009e0b
 8009c48:	08009e0b 	.word	0x08009e0b
 8009c4c:	08009e0b 	.word	0x08009e0b
 8009c50:	08009d07 	.word	0x08009d07
 8009c54:	08009e0b 	.word	0x08009e0b
 8009c58:	08009e0b 	.word	0x08009e0b
 8009c5c:	08009e0b 	.word	0x08009e0b
 8009c60:	08009d47 	.word	0x08009d47
 8009c64:	08009e0b 	.word	0x08009e0b
 8009c68:	08009e0b 	.word	0x08009e0b
 8009c6c:	08009e0b 	.word	0x08009e0b
 8009c70:	08009d89 	.word	0x08009d89
 8009c74:	08009e0b 	.word	0x08009e0b
 8009c78:	08009e0b 	.word	0x08009e0b
 8009c7c:	08009e0b 	.word	0x08009e0b
 8009c80:	08009dc9 	.word	0x08009dc9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	68b9      	ldr	r1, [r7, #8]
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f000 fa4e 	bl	800a12c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	699a      	ldr	r2, [r3, #24]
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f042 0208 	orr.w	r2, r2, #8
 8009c9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	699a      	ldr	r2, [r3, #24]
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f022 0204 	bic.w	r2, r2, #4
 8009cae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	6999      	ldr	r1, [r3, #24]
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	691a      	ldr	r2, [r3, #16]
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	430a      	orrs	r2, r1
 8009cc0:	619a      	str	r2, [r3, #24]
      break;
 8009cc2:	e0a3      	b.n	8009e0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	68b9      	ldr	r1, [r7, #8]
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f000 faa0 	bl	800a210 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	699a      	ldr	r2, [r3, #24]
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009cde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	699a      	ldr	r2, [r3, #24]
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009cee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	6999      	ldr	r1, [r3, #24]
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	691b      	ldr	r3, [r3, #16]
 8009cfa:	021a      	lsls	r2, r3, #8
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	430a      	orrs	r2, r1
 8009d02:	619a      	str	r2, [r3, #24]
      break;
 8009d04:	e082      	b.n	8009e0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	68b9      	ldr	r1, [r7, #8]
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f000 faf7 	bl	800a300 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	69da      	ldr	r2, [r3, #28]
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f042 0208 	orr.w	r2, r2, #8
 8009d20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	69da      	ldr	r2, [r3, #28]
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f022 0204 	bic.w	r2, r2, #4
 8009d30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	69d9      	ldr	r1, [r3, #28]
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	691a      	ldr	r2, [r3, #16]
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	430a      	orrs	r2, r1
 8009d42:	61da      	str	r2, [r3, #28]
      break;
 8009d44:	e062      	b.n	8009e0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	68b9      	ldr	r1, [r7, #8]
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f000 fb4d 	bl	800a3ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	69da      	ldr	r2, [r3, #28]
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009d60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	69da      	ldr	r2, [r3, #28]
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	69d9      	ldr	r1, [r3, #28]
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	691b      	ldr	r3, [r3, #16]
 8009d7c:	021a      	lsls	r2, r3, #8
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	430a      	orrs	r2, r1
 8009d84:	61da      	str	r2, [r3, #28]
      break;
 8009d86:	e041      	b.n	8009e0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	68b9      	ldr	r1, [r7, #8]
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f000 fb84 	bl	800a49c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f042 0208 	orr.w	r2, r2, #8
 8009da2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f022 0204 	bic.w	r2, r2, #4
 8009db2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	691a      	ldr	r2, [r3, #16]
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	430a      	orrs	r2, r1
 8009dc4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009dc6:	e021      	b.n	8009e0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	68b9      	ldr	r1, [r7, #8]
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f000 fbb6 	bl	800a540 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009de2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009df2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	691b      	ldr	r3, [r3, #16]
 8009dfe:	021a      	lsls	r2, r3, #8
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	430a      	orrs	r2, r1
 8009e06:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009e08:	e000      	b.n	8009e0c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8009e0a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	2201      	movs	r2, #1
 8009e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	2200      	movs	r2, #0
 8009e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009e1c:	2300      	movs	r3, #0
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	3710      	adds	r7, #16
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}
 8009e26:	bf00      	nop

08009e28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b084      	sub	sp, #16
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
 8009e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	d101      	bne.n	8009e40 <HAL_TIM_ConfigClockSource+0x18>
 8009e3c:	2302      	movs	r3, #2
 8009e3e:	e0a6      	b.n	8009f8e <HAL_TIM_ConfigClockSource+0x166>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2201      	movs	r2, #1
 8009e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2202      	movs	r2, #2
 8009e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	689b      	ldr	r3, [r3, #8]
 8009e56:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009e58:	68fa      	ldr	r2, [r7, #12]
 8009e5a:	4b4f      	ldr	r3, [pc, #316]	; (8009f98 <HAL_TIM_ConfigClockSource+0x170>)
 8009e5c:	4013      	ands	r3, r2
 8009e5e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009e66:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	68fa      	ldr	r2, [r7, #12]
 8009e6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	2b40      	cmp	r3, #64	; 0x40
 8009e76:	d067      	beq.n	8009f48 <HAL_TIM_ConfigClockSource+0x120>
 8009e78:	2b40      	cmp	r3, #64	; 0x40
 8009e7a:	d80b      	bhi.n	8009e94 <HAL_TIM_ConfigClockSource+0x6c>
 8009e7c:	2b10      	cmp	r3, #16
 8009e7e:	d073      	beq.n	8009f68 <HAL_TIM_ConfigClockSource+0x140>
 8009e80:	2b10      	cmp	r3, #16
 8009e82:	d802      	bhi.n	8009e8a <HAL_TIM_ConfigClockSource+0x62>
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d06f      	beq.n	8009f68 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009e88:	e078      	b.n	8009f7c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009e8a:	2b20      	cmp	r3, #32
 8009e8c:	d06c      	beq.n	8009f68 <HAL_TIM_ConfigClockSource+0x140>
 8009e8e:	2b30      	cmp	r3, #48	; 0x30
 8009e90:	d06a      	beq.n	8009f68 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8009e92:	e073      	b.n	8009f7c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009e94:	2b70      	cmp	r3, #112	; 0x70
 8009e96:	d00d      	beq.n	8009eb4 <HAL_TIM_ConfigClockSource+0x8c>
 8009e98:	2b70      	cmp	r3, #112	; 0x70
 8009e9a:	d804      	bhi.n	8009ea6 <HAL_TIM_ConfigClockSource+0x7e>
 8009e9c:	2b50      	cmp	r3, #80	; 0x50
 8009e9e:	d033      	beq.n	8009f08 <HAL_TIM_ConfigClockSource+0xe0>
 8009ea0:	2b60      	cmp	r3, #96	; 0x60
 8009ea2:	d041      	beq.n	8009f28 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8009ea4:	e06a      	b.n	8009f7c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009ea6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009eaa:	d066      	beq.n	8009f7a <HAL_TIM_ConfigClockSource+0x152>
 8009eac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009eb0:	d017      	beq.n	8009ee2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8009eb2:	e063      	b.n	8009f7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6818      	ldr	r0, [r3, #0]
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	6899      	ldr	r1, [r3, #8]
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	685a      	ldr	r2, [r3, #4]
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	68db      	ldr	r3, [r3, #12]
 8009ec4:	f000 fc0a 	bl	800a6dc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	689b      	ldr	r3, [r3, #8]
 8009ece:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009ed6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	68fa      	ldr	r2, [r7, #12]
 8009ede:	609a      	str	r2, [r3, #8]
      break;
 8009ee0:	e04c      	b.n	8009f7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6818      	ldr	r0, [r3, #0]
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	6899      	ldr	r1, [r3, #8]
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	685a      	ldr	r2, [r3, #4]
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	68db      	ldr	r3, [r3, #12]
 8009ef2:	f000 fbf3 	bl	800a6dc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	689a      	ldr	r2, [r3, #8]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009f04:	609a      	str	r2, [r3, #8]
      break;
 8009f06:	e039      	b.n	8009f7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6818      	ldr	r0, [r3, #0]
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	6859      	ldr	r1, [r3, #4]
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	68db      	ldr	r3, [r3, #12]
 8009f14:	461a      	mov	r2, r3
 8009f16:	f000 fb67 	bl	800a5e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	2150      	movs	r1, #80	; 0x50
 8009f20:	4618      	mov	r0, r3
 8009f22:	f000 fbc0 	bl	800a6a6 <TIM_ITRx_SetConfig>
      break;
 8009f26:	e029      	b.n	8009f7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6818      	ldr	r0, [r3, #0]
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	6859      	ldr	r1, [r3, #4]
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	68db      	ldr	r3, [r3, #12]
 8009f34:	461a      	mov	r2, r3
 8009f36:	f000 fb86 	bl	800a646 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	2160      	movs	r1, #96	; 0x60
 8009f40:	4618      	mov	r0, r3
 8009f42:	f000 fbb0 	bl	800a6a6 <TIM_ITRx_SetConfig>
      break;
 8009f46:	e019      	b.n	8009f7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6818      	ldr	r0, [r3, #0]
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	6859      	ldr	r1, [r3, #4]
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	68db      	ldr	r3, [r3, #12]
 8009f54:	461a      	mov	r2, r3
 8009f56:	f000 fb47 	bl	800a5e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	2140      	movs	r1, #64	; 0x40
 8009f60:	4618      	mov	r0, r3
 8009f62:	f000 fba0 	bl	800a6a6 <TIM_ITRx_SetConfig>
      break;
 8009f66:	e009      	b.n	8009f7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681a      	ldr	r2, [r3, #0]
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	4619      	mov	r1, r3
 8009f72:	4610      	mov	r0, r2
 8009f74:	f000 fb97 	bl	800a6a6 <TIM_ITRx_SetConfig>
      break;
 8009f78:	e000      	b.n	8009f7c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8009f7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2201      	movs	r2, #1
 8009f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2200      	movs	r2, #0
 8009f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009f8c:	2300      	movs	r3, #0
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	3710      	adds	r7, #16
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}
 8009f96:	bf00      	nop
 8009f98:	fffeff88 	.word	0xfffeff88

08009f9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b083      	sub	sp, #12
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009fa4:	bf00      	nop
 8009fa6:	370c      	adds	r7, #12
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fae:	4770      	bx	lr

08009fb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b083      	sub	sp, #12
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009fb8:	bf00      	nop
 8009fba:	370c      	adds	r7, #12
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc2:	4770      	bx	lr

08009fc4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b083      	sub	sp, #12
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009fcc:	bf00      	nop
 8009fce:	370c      	adds	r7, #12
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd6:	4770      	bx	lr

08009fd8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b083      	sub	sp, #12
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009fe0:	bf00      	nop
 8009fe2:	370c      	adds	r7, #12
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fea:	4770      	bx	lr

08009fec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009fec:	b480      	push	{r7}
 8009fee:	b085      	sub	sp, #20
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
 8009ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	4a40      	ldr	r2, [pc, #256]	; (800a100 <TIM_Base_SetConfig+0x114>)
 800a000:	4293      	cmp	r3, r2
 800a002:	d013      	beq.n	800a02c <TIM_Base_SetConfig+0x40>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a00a:	d00f      	beq.n	800a02c <TIM_Base_SetConfig+0x40>
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	4a3d      	ldr	r2, [pc, #244]	; (800a104 <TIM_Base_SetConfig+0x118>)
 800a010:	4293      	cmp	r3, r2
 800a012:	d00b      	beq.n	800a02c <TIM_Base_SetConfig+0x40>
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	4a3c      	ldr	r2, [pc, #240]	; (800a108 <TIM_Base_SetConfig+0x11c>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d007      	beq.n	800a02c <TIM_Base_SetConfig+0x40>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	4a3b      	ldr	r2, [pc, #236]	; (800a10c <TIM_Base_SetConfig+0x120>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d003      	beq.n	800a02c <TIM_Base_SetConfig+0x40>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	4a3a      	ldr	r2, [pc, #232]	; (800a110 <TIM_Base_SetConfig+0x124>)
 800a028:	4293      	cmp	r3, r2
 800a02a:	d108      	bne.n	800a03e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a032:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	685b      	ldr	r3, [r3, #4]
 800a038:	68fa      	ldr	r2, [r7, #12]
 800a03a:	4313      	orrs	r3, r2
 800a03c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	4a2f      	ldr	r2, [pc, #188]	; (800a100 <TIM_Base_SetConfig+0x114>)
 800a042:	4293      	cmp	r3, r2
 800a044:	d02b      	beq.n	800a09e <TIM_Base_SetConfig+0xb2>
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a04c:	d027      	beq.n	800a09e <TIM_Base_SetConfig+0xb2>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	4a2c      	ldr	r2, [pc, #176]	; (800a104 <TIM_Base_SetConfig+0x118>)
 800a052:	4293      	cmp	r3, r2
 800a054:	d023      	beq.n	800a09e <TIM_Base_SetConfig+0xb2>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	4a2b      	ldr	r2, [pc, #172]	; (800a108 <TIM_Base_SetConfig+0x11c>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d01f      	beq.n	800a09e <TIM_Base_SetConfig+0xb2>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	4a2a      	ldr	r2, [pc, #168]	; (800a10c <TIM_Base_SetConfig+0x120>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d01b      	beq.n	800a09e <TIM_Base_SetConfig+0xb2>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	4a29      	ldr	r2, [pc, #164]	; (800a110 <TIM_Base_SetConfig+0x124>)
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d017      	beq.n	800a09e <TIM_Base_SetConfig+0xb2>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	4a28      	ldr	r2, [pc, #160]	; (800a114 <TIM_Base_SetConfig+0x128>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d013      	beq.n	800a09e <TIM_Base_SetConfig+0xb2>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	4a27      	ldr	r2, [pc, #156]	; (800a118 <TIM_Base_SetConfig+0x12c>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d00f      	beq.n	800a09e <TIM_Base_SetConfig+0xb2>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	4a26      	ldr	r2, [pc, #152]	; (800a11c <TIM_Base_SetConfig+0x130>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d00b      	beq.n	800a09e <TIM_Base_SetConfig+0xb2>
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	4a25      	ldr	r2, [pc, #148]	; (800a120 <TIM_Base_SetConfig+0x134>)
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d007      	beq.n	800a09e <TIM_Base_SetConfig+0xb2>
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	4a24      	ldr	r2, [pc, #144]	; (800a124 <TIM_Base_SetConfig+0x138>)
 800a092:	4293      	cmp	r3, r2
 800a094:	d003      	beq.n	800a09e <TIM_Base_SetConfig+0xb2>
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	4a23      	ldr	r2, [pc, #140]	; (800a128 <TIM_Base_SetConfig+0x13c>)
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d108      	bne.n	800a0b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a0a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	68db      	ldr	r3, [r3, #12]
 800a0aa:	68fa      	ldr	r2, [r7, #12]
 800a0ac:	4313      	orrs	r3, r2
 800a0ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	695b      	ldr	r3, [r3, #20]
 800a0ba:	4313      	orrs	r3, r2
 800a0bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	68fa      	ldr	r2, [r7, #12]
 800a0c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	689a      	ldr	r2, [r3, #8]
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	681a      	ldr	r2, [r3, #0]
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	4a0a      	ldr	r2, [pc, #40]	; (800a100 <TIM_Base_SetConfig+0x114>)
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	d003      	beq.n	800a0e4 <TIM_Base_SetConfig+0xf8>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	4a0c      	ldr	r2, [pc, #48]	; (800a110 <TIM_Base_SetConfig+0x124>)
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d103      	bne.n	800a0ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	691a      	ldr	r2, [r3, #16]
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2201      	movs	r2, #1
 800a0f0:	615a      	str	r2, [r3, #20]
}
 800a0f2:	bf00      	nop
 800a0f4:	3714      	adds	r7, #20
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fc:	4770      	bx	lr
 800a0fe:	bf00      	nop
 800a100:	40010000 	.word	0x40010000
 800a104:	40000400 	.word	0x40000400
 800a108:	40000800 	.word	0x40000800
 800a10c:	40000c00 	.word	0x40000c00
 800a110:	40010400 	.word	0x40010400
 800a114:	40014000 	.word	0x40014000
 800a118:	40014400 	.word	0x40014400
 800a11c:	40014800 	.word	0x40014800
 800a120:	40001800 	.word	0x40001800
 800a124:	40001c00 	.word	0x40001c00
 800a128:	40002000 	.word	0x40002000

0800a12c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a12c:	b480      	push	{r7}
 800a12e:	b087      	sub	sp, #28
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
 800a134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6a1b      	ldr	r3, [r3, #32]
 800a13a:	f023 0201 	bic.w	r2, r3, #1
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6a1b      	ldr	r3, [r3, #32]
 800a146:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	685b      	ldr	r3, [r3, #4]
 800a14c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	699b      	ldr	r3, [r3, #24]
 800a152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a154:	68fa      	ldr	r2, [r7, #12]
 800a156:	4b2b      	ldr	r3, [pc, #172]	; (800a204 <TIM_OC1_SetConfig+0xd8>)
 800a158:	4013      	ands	r3, r2
 800a15a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	f023 0303 	bic.w	r3, r3, #3
 800a162:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	68fa      	ldr	r2, [r7, #12]
 800a16a:	4313      	orrs	r3, r2
 800a16c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	f023 0302 	bic.w	r3, r3, #2
 800a174:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	689b      	ldr	r3, [r3, #8]
 800a17a:	697a      	ldr	r2, [r7, #20]
 800a17c:	4313      	orrs	r3, r2
 800a17e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	4a21      	ldr	r2, [pc, #132]	; (800a208 <TIM_OC1_SetConfig+0xdc>)
 800a184:	4293      	cmp	r3, r2
 800a186:	d003      	beq.n	800a190 <TIM_OC1_SetConfig+0x64>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	4a20      	ldr	r2, [pc, #128]	; (800a20c <TIM_OC1_SetConfig+0xe0>)
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d10c      	bne.n	800a1aa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a190:	697b      	ldr	r3, [r7, #20]
 800a192:	f023 0308 	bic.w	r3, r3, #8
 800a196:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	68db      	ldr	r3, [r3, #12]
 800a19c:	697a      	ldr	r2, [r7, #20]
 800a19e:	4313      	orrs	r3, r2
 800a1a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a1a2:	697b      	ldr	r3, [r7, #20]
 800a1a4:	f023 0304 	bic.w	r3, r3, #4
 800a1a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	4a16      	ldr	r2, [pc, #88]	; (800a208 <TIM_OC1_SetConfig+0xdc>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d003      	beq.n	800a1ba <TIM_OC1_SetConfig+0x8e>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	4a15      	ldr	r2, [pc, #84]	; (800a20c <TIM_OC1_SetConfig+0xe0>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d111      	bne.n	800a1de <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a1c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a1c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	695b      	ldr	r3, [r3, #20]
 800a1ce:	693a      	ldr	r2, [r7, #16]
 800a1d0:	4313      	orrs	r3, r2
 800a1d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	699b      	ldr	r3, [r3, #24]
 800a1d8:	693a      	ldr	r2, [r7, #16]
 800a1da:	4313      	orrs	r3, r2
 800a1dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	693a      	ldr	r2, [r7, #16]
 800a1e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	68fa      	ldr	r2, [r7, #12]
 800a1e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	685a      	ldr	r2, [r3, #4]
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	697a      	ldr	r2, [r7, #20]
 800a1f6:	621a      	str	r2, [r3, #32]
}
 800a1f8:	bf00      	nop
 800a1fa:	371c      	adds	r7, #28
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a202:	4770      	bx	lr
 800a204:	fffeff8f 	.word	0xfffeff8f
 800a208:	40010000 	.word	0x40010000
 800a20c:	40010400 	.word	0x40010400

0800a210 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a210:	b480      	push	{r7}
 800a212:	b087      	sub	sp, #28
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6a1b      	ldr	r3, [r3, #32]
 800a21e:	f023 0210 	bic.w	r2, r3, #16
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6a1b      	ldr	r3, [r3, #32]
 800a22a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	685b      	ldr	r3, [r3, #4]
 800a230:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	699b      	ldr	r3, [r3, #24]
 800a236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a238:	68fa      	ldr	r2, [r7, #12]
 800a23a:	4b2e      	ldr	r3, [pc, #184]	; (800a2f4 <TIM_OC2_SetConfig+0xe4>)
 800a23c:	4013      	ands	r3, r2
 800a23e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a246:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	021b      	lsls	r3, r3, #8
 800a24e:	68fa      	ldr	r2, [r7, #12]
 800a250:	4313      	orrs	r3, r2
 800a252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a254:	697b      	ldr	r3, [r7, #20]
 800a256:	f023 0320 	bic.w	r3, r3, #32
 800a25a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	689b      	ldr	r3, [r3, #8]
 800a260:	011b      	lsls	r3, r3, #4
 800a262:	697a      	ldr	r2, [r7, #20]
 800a264:	4313      	orrs	r3, r2
 800a266:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	4a23      	ldr	r2, [pc, #140]	; (800a2f8 <TIM_OC2_SetConfig+0xe8>)
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d003      	beq.n	800a278 <TIM_OC2_SetConfig+0x68>
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	4a22      	ldr	r2, [pc, #136]	; (800a2fc <TIM_OC2_SetConfig+0xec>)
 800a274:	4293      	cmp	r3, r2
 800a276:	d10d      	bne.n	800a294 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a27e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	68db      	ldr	r3, [r3, #12]
 800a284:	011b      	lsls	r3, r3, #4
 800a286:	697a      	ldr	r2, [r7, #20]
 800a288:	4313      	orrs	r3, r2
 800a28a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a292:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	4a18      	ldr	r2, [pc, #96]	; (800a2f8 <TIM_OC2_SetConfig+0xe8>)
 800a298:	4293      	cmp	r3, r2
 800a29a:	d003      	beq.n	800a2a4 <TIM_OC2_SetConfig+0x94>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	4a17      	ldr	r2, [pc, #92]	; (800a2fc <TIM_OC2_SetConfig+0xec>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d113      	bne.n	800a2cc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a2a4:	693b      	ldr	r3, [r7, #16]
 800a2a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a2aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a2b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	695b      	ldr	r3, [r3, #20]
 800a2b8:	009b      	lsls	r3, r3, #2
 800a2ba:	693a      	ldr	r2, [r7, #16]
 800a2bc:	4313      	orrs	r3, r2
 800a2be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	699b      	ldr	r3, [r3, #24]
 800a2c4:	009b      	lsls	r3, r3, #2
 800a2c6:	693a      	ldr	r2, [r7, #16]
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	693a      	ldr	r2, [r7, #16]
 800a2d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	68fa      	ldr	r2, [r7, #12]
 800a2d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	685a      	ldr	r2, [r3, #4]
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	697a      	ldr	r2, [r7, #20]
 800a2e4:	621a      	str	r2, [r3, #32]
}
 800a2e6:	bf00      	nop
 800a2e8:	371c      	adds	r7, #28
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f0:	4770      	bx	lr
 800a2f2:	bf00      	nop
 800a2f4:	feff8fff 	.word	0xfeff8fff
 800a2f8:	40010000 	.word	0x40010000
 800a2fc:	40010400 	.word	0x40010400

0800a300 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a300:	b480      	push	{r7}
 800a302:	b087      	sub	sp, #28
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
 800a308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6a1b      	ldr	r3, [r3, #32]
 800a30e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6a1b      	ldr	r3, [r3, #32]
 800a31a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	685b      	ldr	r3, [r3, #4]
 800a320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	69db      	ldr	r3, [r3, #28]
 800a326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a328:	68fa      	ldr	r2, [r7, #12]
 800a32a:	4b2d      	ldr	r3, [pc, #180]	; (800a3e0 <TIM_OC3_SetConfig+0xe0>)
 800a32c:	4013      	ands	r3, r2
 800a32e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	f023 0303 	bic.w	r3, r3, #3
 800a336:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	68fa      	ldr	r2, [r7, #12]
 800a33e:	4313      	orrs	r3, r2
 800a340:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a348:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	689b      	ldr	r3, [r3, #8]
 800a34e:	021b      	lsls	r3, r3, #8
 800a350:	697a      	ldr	r2, [r7, #20]
 800a352:	4313      	orrs	r3, r2
 800a354:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	4a22      	ldr	r2, [pc, #136]	; (800a3e4 <TIM_OC3_SetConfig+0xe4>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d003      	beq.n	800a366 <TIM_OC3_SetConfig+0x66>
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	4a21      	ldr	r2, [pc, #132]	; (800a3e8 <TIM_OC3_SetConfig+0xe8>)
 800a362:	4293      	cmp	r3, r2
 800a364:	d10d      	bne.n	800a382 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a36c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	68db      	ldr	r3, [r3, #12]
 800a372:	021b      	lsls	r3, r3, #8
 800a374:	697a      	ldr	r2, [r7, #20]
 800a376:	4313      	orrs	r3, r2
 800a378:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a37a:	697b      	ldr	r3, [r7, #20]
 800a37c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a380:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	4a17      	ldr	r2, [pc, #92]	; (800a3e4 <TIM_OC3_SetConfig+0xe4>)
 800a386:	4293      	cmp	r3, r2
 800a388:	d003      	beq.n	800a392 <TIM_OC3_SetConfig+0x92>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	4a16      	ldr	r2, [pc, #88]	; (800a3e8 <TIM_OC3_SetConfig+0xe8>)
 800a38e:	4293      	cmp	r3, r2
 800a390:	d113      	bne.n	800a3ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a398:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a3a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	695b      	ldr	r3, [r3, #20]
 800a3a6:	011b      	lsls	r3, r3, #4
 800a3a8:	693a      	ldr	r2, [r7, #16]
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	699b      	ldr	r3, [r3, #24]
 800a3b2:	011b      	lsls	r3, r3, #4
 800a3b4:	693a      	ldr	r2, [r7, #16]
 800a3b6:	4313      	orrs	r3, r2
 800a3b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	693a      	ldr	r2, [r7, #16]
 800a3be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	68fa      	ldr	r2, [r7, #12]
 800a3c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	685a      	ldr	r2, [r3, #4]
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	697a      	ldr	r2, [r7, #20]
 800a3d2:	621a      	str	r2, [r3, #32]
}
 800a3d4:	bf00      	nop
 800a3d6:	371c      	adds	r7, #28
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3de:	4770      	bx	lr
 800a3e0:	fffeff8f 	.word	0xfffeff8f
 800a3e4:	40010000 	.word	0x40010000
 800a3e8:	40010400 	.word	0x40010400

0800a3ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b087      	sub	sp, #28
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
 800a3f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6a1b      	ldr	r3, [r3, #32]
 800a3fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6a1b      	ldr	r3, [r3, #32]
 800a406:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	685b      	ldr	r3, [r3, #4]
 800a40c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	69db      	ldr	r3, [r3, #28]
 800a412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a414:	68fa      	ldr	r2, [r7, #12]
 800a416:	4b1e      	ldr	r3, [pc, #120]	; (800a490 <TIM_OC4_SetConfig+0xa4>)
 800a418:	4013      	ands	r3, r2
 800a41a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a422:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	021b      	lsls	r3, r3, #8
 800a42a:	68fa      	ldr	r2, [r7, #12]
 800a42c:	4313      	orrs	r3, r2
 800a42e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a430:	693b      	ldr	r3, [r7, #16]
 800a432:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a436:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	689b      	ldr	r3, [r3, #8]
 800a43c:	031b      	lsls	r3, r3, #12
 800a43e:	693a      	ldr	r2, [r7, #16]
 800a440:	4313      	orrs	r3, r2
 800a442:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	4a13      	ldr	r2, [pc, #76]	; (800a494 <TIM_OC4_SetConfig+0xa8>)
 800a448:	4293      	cmp	r3, r2
 800a44a:	d003      	beq.n	800a454 <TIM_OC4_SetConfig+0x68>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	4a12      	ldr	r2, [pc, #72]	; (800a498 <TIM_OC4_SetConfig+0xac>)
 800a450:	4293      	cmp	r3, r2
 800a452:	d109      	bne.n	800a468 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a454:	697b      	ldr	r3, [r7, #20]
 800a456:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a45a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	695b      	ldr	r3, [r3, #20]
 800a460:	019b      	lsls	r3, r3, #6
 800a462:	697a      	ldr	r2, [r7, #20]
 800a464:	4313      	orrs	r3, r2
 800a466:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	697a      	ldr	r2, [r7, #20]
 800a46c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	68fa      	ldr	r2, [r7, #12]
 800a472:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	685a      	ldr	r2, [r3, #4]
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	693a      	ldr	r2, [r7, #16]
 800a480:	621a      	str	r2, [r3, #32]
}
 800a482:	bf00      	nop
 800a484:	371c      	adds	r7, #28
 800a486:	46bd      	mov	sp, r7
 800a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48c:	4770      	bx	lr
 800a48e:	bf00      	nop
 800a490:	feff8fff 	.word	0xfeff8fff
 800a494:	40010000 	.word	0x40010000
 800a498:	40010400 	.word	0x40010400

0800a49c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a49c:	b480      	push	{r7}
 800a49e:	b087      	sub	sp, #28
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
 800a4a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6a1b      	ldr	r3, [r3, #32]
 800a4aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6a1b      	ldr	r3, [r3, #32]
 800a4b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	685b      	ldr	r3, [r3, #4]
 800a4bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a4c4:	68fa      	ldr	r2, [r7, #12]
 800a4c6:	4b1b      	ldr	r3, [pc, #108]	; (800a534 <TIM_OC5_SetConfig+0x98>)
 800a4c8:	4013      	ands	r3, r2
 800a4ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	68fa      	ldr	r2, [r7, #12]
 800a4d2:	4313      	orrs	r3, r2
 800a4d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a4dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	689b      	ldr	r3, [r3, #8]
 800a4e2:	041b      	lsls	r3, r3, #16
 800a4e4:	693a      	ldr	r2, [r7, #16]
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	4a12      	ldr	r2, [pc, #72]	; (800a538 <TIM_OC5_SetConfig+0x9c>)
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	d003      	beq.n	800a4fa <TIM_OC5_SetConfig+0x5e>
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	4a11      	ldr	r2, [pc, #68]	; (800a53c <TIM_OC5_SetConfig+0xa0>)
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	d109      	bne.n	800a50e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a500:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	695b      	ldr	r3, [r3, #20]
 800a506:	021b      	lsls	r3, r3, #8
 800a508:	697a      	ldr	r2, [r7, #20]
 800a50a:	4313      	orrs	r3, r2
 800a50c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	697a      	ldr	r2, [r7, #20]
 800a512:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	68fa      	ldr	r2, [r7, #12]
 800a518:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	685a      	ldr	r2, [r3, #4]
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	693a      	ldr	r2, [r7, #16]
 800a526:	621a      	str	r2, [r3, #32]
}
 800a528:	bf00      	nop
 800a52a:	371c      	adds	r7, #28
 800a52c:	46bd      	mov	sp, r7
 800a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a532:	4770      	bx	lr
 800a534:	fffeff8f 	.word	0xfffeff8f
 800a538:	40010000 	.word	0x40010000
 800a53c:	40010400 	.word	0x40010400

0800a540 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a540:	b480      	push	{r7}
 800a542:	b087      	sub	sp, #28
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
 800a548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6a1b      	ldr	r3, [r3, #32]
 800a54e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6a1b      	ldr	r3, [r3, #32]
 800a55a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	685b      	ldr	r3, [r3, #4]
 800a560:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a568:	68fa      	ldr	r2, [r7, #12]
 800a56a:	4b1c      	ldr	r3, [pc, #112]	; (800a5dc <TIM_OC6_SetConfig+0x9c>)
 800a56c:	4013      	ands	r3, r2
 800a56e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	021b      	lsls	r3, r3, #8
 800a576:	68fa      	ldr	r2, [r7, #12]
 800a578:	4313      	orrs	r3, r2
 800a57a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a582:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	689b      	ldr	r3, [r3, #8]
 800a588:	051b      	lsls	r3, r3, #20
 800a58a:	693a      	ldr	r2, [r7, #16]
 800a58c:	4313      	orrs	r3, r2
 800a58e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	4a13      	ldr	r2, [pc, #76]	; (800a5e0 <TIM_OC6_SetConfig+0xa0>)
 800a594:	4293      	cmp	r3, r2
 800a596:	d003      	beq.n	800a5a0 <TIM_OC6_SetConfig+0x60>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	4a12      	ldr	r2, [pc, #72]	; (800a5e4 <TIM_OC6_SetConfig+0xa4>)
 800a59c:	4293      	cmp	r3, r2
 800a59e:	d109      	bne.n	800a5b4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a5a0:	697b      	ldr	r3, [r7, #20]
 800a5a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a5a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	695b      	ldr	r3, [r3, #20]
 800a5ac:	029b      	lsls	r3, r3, #10
 800a5ae:	697a      	ldr	r2, [r7, #20]
 800a5b0:	4313      	orrs	r3, r2
 800a5b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	697a      	ldr	r2, [r7, #20]
 800a5b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	68fa      	ldr	r2, [r7, #12]
 800a5be:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	685a      	ldr	r2, [r3, #4]
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	693a      	ldr	r2, [r7, #16]
 800a5cc:	621a      	str	r2, [r3, #32]
}
 800a5ce:	bf00      	nop
 800a5d0:	371c      	adds	r7, #28
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d8:	4770      	bx	lr
 800a5da:	bf00      	nop
 800a5dc:	feff8fff 	.word	0xfeff8fff
 800a5e0:	40010000 	.word	0x40010000
 800a5e4:	40010400 	.word	0x40010400

0800a5e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	b087      	sub	sp, #28
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	60f8      	str	r0, [r7, #12]
 800a5f0:	60b9      	str	r1, [r7, #8]
 800a5f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	6a1b      	ldr	r3, [r3, #32]
 800a5f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	6a1b      	ldr	r3, [r3, #32]
 800a5fe:	f023 0201 	bic.w	r2, r3, #1
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	699b      	ldr	r3, [r3, #24]
 800a60a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a612:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	011b      	lsls	r3, r3, #4
 800a618:	693a      	ldr	r2, [r7, #16]
 800a61a:	4313      	orrs	r3, r2
 800a61c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	f023 030a 	bic.w	r3, r3, #10
 800a624:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a626:	697a      	ldr	r2, [r7, #20]
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	4313      	orrs	r3, r2
 800a62c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	693a      	ldr	r2, [r7, #16]
 800a632:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	697a      	ldr	r2, [r7, #20]
 800a638:	621a      	str	r2, [r3, #32]
}
 800a63a:	bf00      	nop
 800a63c:	371c      	adds	r7, #28
 800a63e:	46bd      	mov	sp, r7
 800a640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a644:	4770      	bx	lr

0800a646 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a646:	b480      	push	{r7}
 800a648:	b087      	sub	sp, #28
 800a64a:	af00      	add	r7, sp, #0
 800a64c:	60f8      	str	r0, [r7, #12]
 800a64e:	60b9      	str	r1, [r7, #8]
 800a650:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	6a1b      	ldr	r3, [r3, #32]
 800a656:	f023 0210 	bic.w	r2, r3, #16
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	699b      	ldr	r3, [r3, #24]
 800a662:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	6a1b      	ldr	r3, [r3, #32]
 800a668:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a670:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	031b      	lsls	r3, r3, #12
 800a676:	697a      	ldr	r2, [r7, #20]
 800a678:	4313      	orrs	r3, r2
 800a67a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a682:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	011b      	lsls	r3, r3, #4
 800a688:	693a      	ldr	r2, [r7, #16]
 800a68a:	4313      	orrs	r3, r2
 800a68c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	697a      	ldr	r2, [r7, #20]
 800a692:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	693a      	ldr	r2, [r7, #16]
 800a698:	621a      	str	r2, [r3, #32]
}
 800a69a:	bf00      	nop
 800a69c:	371c      	adds	r7, #28
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a4:	4770      	bx	lr

0800a6a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a6a6:	b480      	push	{r7}
 800a6a8:	b085      	sub	sp, #20
 800a6aa:	af00      	add	r7, sp, #0
 800a6ac:	6078      	str	r0, [r7, #4]
 800a6ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	689b      	ldr	r3, [r3, #8]
 800a6b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a6be:	683a      	ldr	r2, [r7, #0]
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	4313      	orrs	r3, r2
 800a6c4:	f043 0307 	orr.w	r3, r3, #7
 800a6c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	68fa      	ldr	r2, [r7, #12]
 800a6ce:	609a      	str	r2, [r3, #8]
}
 800a6d0:	bf00      	nop
 800a6d2:	3714      	adds	r7, #20
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr

0800a6dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b087      	sub	sp, #28
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	60f8      	str	r0, [r7, #12]
 800a6e4:	60b9      	str	r1, [r7, #8]
 800a6e6:	607a      	str	r2, [r7, #4]
 800a6e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	689b      	ldr	r3, [r3, #8]
 800a6ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a6f0:	697b      	ldr	r3, [r7, #20]
 800a6f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a6f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	021a      	lsls	r2, r3, #8
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	431a      	orrs	r2, r3
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	4313      	orrs	r3, r2
 800a704:	697a      	ldr	r2, [r7, #20]
 800a706:	4313      	orrs	r3, r2
 800a708:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	697a      	ldr	r2, [r7, #20]
 800a70e:	609a      	str	r2, [r3, #8]
}
 800a710:	bf00      	nop
 800a712:	371c      	adds	r7, #28
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr

0800a71c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a71c:	b480      	push	{r7}
 800a71e:	b085      	sub	sp, #20
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a72c:	2b01      	cmp	r3, #1
 800a72e:	d101      	bne.n	800a734 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a730:	2302      	movs	r3, #2
 800a732:	e06d      	b.n	800a810 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2201      	movs	r2, #1
 800a738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2202      	movs	r2, #2
 800a740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	685b      	ldr	r3, [r3, #4]
 800a74a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	689b      	ldr	r3, [r3, #8]
 800a752:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4a30      	ldr	r2, [pc, #192]	; (800a81c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a75a:	4293      	cmp	r3, r2
 800a75c:	d004      	beq.n	800a768 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	4a2f      	ldr	r2, [pc, #188]	; (800a820 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a764:	4293      	cmp	r3, r2
 800a766:	d108      	bne.n	800a77a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a76e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	685b      	ldr	r3, [r3, #4]
 800a774:	68fa      	ldr	r2, [r7, #12]
 800a776:	4313      	orrs	r3, r2
 800a778:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a780:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	68fa      	ldr	r2, [r7, #12]
 800a788:	4313      	orrs	r3, r2
 800a78a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	68fa      	ldr	r2, [r7, #12]
 800a792:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	4a20      	ldr	r2, [pc, #128]	; (800a81c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a79a:	4293      	cmp	r3, r2
 800a79c:	d022      	beq.n	800a7e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7a6:	d01d      	beq.n	800a7e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	4a1d      	ldr	r2, [pc, #116]	; (800a824 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d018      	beq.n	800a7e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	4a1c      	ldr	r2, [pc, #112]	; (800a828 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	d013      	beq.n	800a7e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	4a1a      	ldr	r2, [pc, #104]	; (800a82c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a7c2:	4293      	cmp	r3, r2
 800a7c4:	d00e      	beq.n	800a7e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	4a15      	ldr	r2, [pc, #84]	; (800a820 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a7cc:	4293      	cmp	r3, r2
 800a7ce:	d009      	beq.n	800a7e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	4a16      	ldr	r2, [pc, #88]	; (800a830 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d004      	beq.n	800a7e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	4a15      	ldr	r2, [pc, #84]	; (800a834 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	d10c      	bne.n	800a7fe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a7ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	689b      	ldr	r3, [r3, #8]
 800a7f0:	68ba      	ldr	r2, [r7, #8]
 800a7f2:	4313      	orrs	r3, r2
 800a7f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	68ba      	ldr	r2, [r7, #8]
 800a7fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2201      	movs	r2, #1
 800a802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2200      	movs	r2, #0
 800a80a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a80e:	2300      	movs	r3, #0
}
 800a810:	4618      	mov	r0, r3
 800a812:	3714      	adds	r7, #20
 800a814:	46bd      	mov	sp, r7
 800a816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81a:	4770      	bx	lr
 800a81c:	40010000 	.word	0x40010000
 800a820:	40010400 	.word	0x40010400
 800a824:	40000400 	.word	0x40000400
 800a828:	40000800 	.word	0x40000800
 800a82c:	40000c00 	.word	0x40000c00
 800a830:	40014000 	.word	0x40014000
 800a834:	40001800 	.word	0x40001800

0800a838 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a838:	b480      	push	{r7}
 800a83a:	b085      	sub	sp, #20
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
 800a840:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a842:	2300      	movs	r3, #0
 800a844:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a84c:	2b01      	cmp	r3, #1
 800a84e:	d101      	bne.n	800a854 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a850:	2302      	movs	r3, #2
 800a852:	e065      	b.n	800a920 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2201      	movs	r2, #1
 800a858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	68db      	ldr	r3, [r3, #12]
 800a866:	4313      	orrs	r3, r2
 800a868:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	689b      	ldr	r3, [r3, #8]
 800a874:	4313      	orrs	r3, r2
 800a876:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	685b      	ldr	r3, [r3, #4]
 800a882:	4313      	orrs	r3, r2
 800a884:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	4313      	orrs	r3, r2
 800a892:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	691b      	ldr	r3, [r3, #16]
 800a89e:	4313      	orrs	r3, r2
 800a8a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	695b      	ldr	r3, [r3, #20]
 800a8ac:	4313      	orrs	r3, r2
 800a8ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8ba:	4313      	orrs	r3, r2
 800a8bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	699b      	ldr	r3, [r3, #24]
 800a8c8:	041b      	lsls	r3, r3, #16
 800a8ca:	4313      	orrs	r3, r2
 800a8cc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	4a16      	ldr	r2, [pc, #88]	; (800a92c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a8d4:	4293      	cmp	r3, r2
 800a8d6:	d004      	beq.n	800a8e2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	4a14      	ldr	r2, [pc, #80]	; (800a930 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d115      	bne.n	800a90e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ec:	051b      	lsls	r3, r3, #20
 800a8ee:	4313      	orrs	r3, r2
 800a8f0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	69db      	ldr	r3, [r3, #28]
 800a8fc:	4313      	orrs	r3, r2
 800a8fe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	6a1b      	ldr	r3, [r3, #32]
 800a90a:	4313      	orrs	r3, r2
 800a90c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	68fa      	ldr	r2, [r7, #12]
 800a914:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2200      	movs	r2, #0
 800a91a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a91e:	2300      	movs	r3, #0
}
 800a920:	4618      	mov	r0, r3
 800a922:	3714      	adds	r7, #20
 800a924:	46bd      	mov	sp, r7
 800a926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92a:	4770      	bx	lr
 800a92c:	40010000 	.word	0x40010000
 800a930:	40010400 	.word	0x40010400

0800a934 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a934:	b480      	push	{r7}
 800a936:	b083      	sub	sp, #12
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a93c:	bf00      	nop
 800a93e:	370c      	adds	r7, #12
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr

0800a948 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a948:	b480      	push	{r7}
 800a94a:	b083      	sub	sp, #12
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a950:	bf00      	nop
 800a952:	370c      	adds	r7, #12
 800a954:	46bd      	mov	sp, r7
 800a956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95a:	4770      	bx	lr

0800a95c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a95c:	b480      	push	{r7}
 800a95e:	b083      	sub	sp, #12
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a964:	bf00      	nop
 800a966:	370c      	adds	r7, #12
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr

0800a970 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b082      	sub	sp, #8
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d101      	bne.n	800a982 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a97e:	2301      	movs	r3, #1
 800a980:	e040      	b.n	800aa04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a986:	2b00      	cmp	r3, #0
 800a988:	d106      	bne.n	800a998 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2200      	movs	r2, #0
 800a98e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f7f8 fd5e 	bl	8003454 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2224      	movs	r2, #36	; 0x24
 800a99c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	681a      	ldr	r2, [r3, #0]
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f022 0201 	bic.w	r2, r2, #1
 800a9ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f000 f82c 	bl	800aa0c <UART_SetConfig>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	2b01      	cmp	r3, #1
 800a9b8:	d101      	bne.n	800a9be <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	e022      	b.n	800aa04 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d002      	beq.n	800a9cc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f000 faca 	bl	800af60 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	685a      	ldr	r2, [r3, #4]
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a9da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	689a      	ldr	r2, [r3, #8]
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a9ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	681a      	ldr	r2, [r3, #0]
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f042 0201 	orr.w	r2, r2, #1
 800a9fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f000 fb51 	bl	800b0a4 <UART_CheckIdleState>
 800aa02:	4603      	mov	r3, r0
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	3708      	adds	r7, #8
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}

0800aa0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b088      	sub	sp, #32
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800aa14:	2300      	movs	r3, #0
 800aa16:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800aa18:	2300      	movs	r3, #0
 800aa1a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	689a      	ldr	r2, [r3, #8]
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	691b      	ldr	r3, [r3, #16]
 800aa24:	431a      	orrs	r2, r3
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	695b      	ldr	r3, [r3, #20]
 800aa2a:	431a      	orrs	r2, r3
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	69db      	ldr	r3, [r3, #28]
 800aa30:	4313      	orrs	r3, r2
 800aa32:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	681a      	ldr	r2, [r3, #0]
 800aa3a:	4bb1      	ldr	r3, [pc, #708]	; (800ad00 <UART_SetConfig+0x2f4>)
 800aa3c:	4013      	ands	r3, r2
 800aa3e:	687a      	ldr	r2, [r7, #4]
 800aa40:	6812      	ldr	r2, [r2, #0]
 800aa42:	6939      	ldr	r1, [r7, #16]
 800aa44:	430b      	orrs	r3, r1
 800aa46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	685b      	ldr	r3, [r3, #4]
 800aa4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	68da      	ldr	r2, [r3, #12]
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	430a      	orrs	r2, r1
 800aa5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	699b      	ldr	r3, [r3, #24]
 800aa62:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	6a1b      	ldr	r3, [r3, #32]
 800aa68:	693a      	ldr	r2, [r7, #16]
 800aa6a:	4313      	orrs	r3, r2
 800aa6c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	689b      	ldr	r3, [r3, #8]
 800aa74:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	693a      	ldr	r2, [r7, #16]
 800aa7e:	430a      	orrs	r2, r1
 800aa80:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	4a9f      	ldr	r2, [pc, #636]	; (800ad04 <UART_SetConfig+0x2f8>)
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	d121      	bne.n	800aad0 <UART_SetConfig+0xc4>
 800aa8c:	4b9e      	ldr	r3, [pc, #632]	; (800ad08 <UART_SetConfig+0x2fc>)
 800aa8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa92:	f003 0303 	and.w	r3, r3, #3
 800aa96:	2b03      	cmp	r3, #3
 800aa98:	d816      	bhi.n	800aac8 <UART_SetConfig+0xbc>
 800aa9a:	a201      	add	r2, pc, #4	; (adr r2, 800aaa0 <UART_SetConfig+0x94>)
 800aa9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaa0:	0800aab1 	.word	0x0800aab1
 800aaa4:	0800aabd 	.word	0x0800aabd
 800aaa8:	0800aab7 	.word	0x0800aab7
 800aaac:	0800aac3 	.word	0x0800aac3
 800aab0:	2301      	movs	r3, #1
 800aab2:	77fb      	strb	r3, [r7, #31]
 800aab4:	e151      	b.n	800ad5a <UART_SetConfig+0x34e>
 800aab6:	2302      	movs	r3, #2
 800aab8:	77fb      	strb	r3, [r7, #31]
 800aaba:	e14e      	b.n	800ad5a <UART_SetConfig+0x34e>
 800aabc:	2304      	movs	r3, #4
 800aabe:	77fb      	strb	r3, [r7, #31]
 800aac0:	e14b      	b.n	800ad5a <UART_SetConfig+0x34e>
 800aac2:	2308      	movs	r3, #8
 800aac4:	77fb      	strb	r3, [r7, #31]
 800aac6:	e148      	b.n	800ad5a <UART_SetConfig+0x34e>
 800aac8:	2310      	movs	r3, #16
 800aaca:	77fb      	strb	r3, [r7, #31]
 800aacc:	bf00      	nop
 800aace:	e144      	b.n	800ad5a <UART_SetConfig+0x34e>
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	4a8d      	ldr	r2, [pc, #564]	; (800ad0c <UART_SetConfig+0x300>)
 800aad6:	4293      	cmp	r3, r2
 800aad8:	d134      	bne.n	800ab44 <UART_SetConfig+0x138>
 800aada:	4b8b      	ldr	r3, [pc, #556]	; (800ad08 <UART_SetConfig+0x2fc>)
 800aadc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aae0:	f003 030c 	and.w	r3, r3, #12
 800aae4:	2b0c      	cmp	r3, #12
 800aae6:	d829      	bhi.n	800ab3c <UART_SetConfig+0x130>
 800aae8:	a201      	add	r2, pc, #4	; (adr r2, 800aaf0 <UART_SetConfig+0xe4>)
 800aaea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaee:	bf00      	nop
 800aaf0:	0800ab25 	.word	0x0800ab25
 800aaf4:	0800ab3d 	.word	0x0800ab3d
 800aaf8:	0800ab3d 	.word	0x0800ab3d
 800aafc:	0800ab3d 	.word	0x0800ab3d
 800ab00:	0800ab31 	.word	0x0800ab31
 800ab04:	0800ab3d 	.word	0x0800ab3d
 800ab08:	0800ab3d 	.word	0x0800ab3d
 800ab0c:	0800ab3d 	.word	0x0800ab3d
 800ab10:	0800ab2b 	.word	0x0800ab2b
 800ab14:	0800ab3d 	.word	0x0800ab3d
 800ab18:	0800ab3d 	.word	0x0800ab3d
 800ab1c:	0800ab3d 	.word	0x0800ab3d
 800ab20:	0800ab37 	.word	0x0800ab37
 800ab24:	2300      	movs	r3, #0
 800ab26:	77fb      	strb	r3, [r7, #31]
 800ab28:	e117      	b.n	800ad5a <UART_SetConfig+0x34e>
 800ab2a:	2302      	movs	r3, #2
 800ab2c:	77fb      	strb	r3, [r7, #31]
 800ab2e:	e114      	b.n	800ad5a <UART_SetConfig+0x34e>
 800ab30:	2304      	movs	r3, #4
 800ab32:	77fb      	strb	r3, [r7, #31]
 800ab34:	e111      	b.n	800ad5a <UART_SetConfig+0x34e>
 800ab36:	2308      	movs	r3, #8
 800ab38:	77fb      	strb	r3, [r7, #31]
 800ab3a:	e10e      	b.n	800ad5a <UART_SetConfig+0x34e>
 800ab3c:	2310      	movs	r3, #16
 800ab3e:	77fb      	strb	r3, [r7, #31]
 800ab40:	bf00      	nop
 800ab42:	e10a      	b.n	800ad5a <UART_SetConfig+0x34e>
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	4a71      	ldr	r2, [pc, #452]	; (800ad10 <UART_SetConfig+0x304>)
 800ab4a:	4293      	cmp	r3, r2
 800ab4c:	d120      	bne.n	800ab90 <UART_SetConfig+0x184>
 800ab4e:	4b6e      	ldr	r3, [pc, #440]	; (800ad08 <UART_SetConfig+0x2fc>)
 800ab50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab54:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ab58:	2b10      	cmp	r3, #16
 800ab5a:	d00f      	beq.n	800ab7c <UART_SetConfig+0x170>
 800ab5c:	2b10      	cmp	r3, #16
 800ab5e:	d802      	bhi.n	800ab66 <UART_SetConfig+0x15a>
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d005      	beq.n	800ab70 <UART_SetConfig+0x164>
 800ab64:	e010      	b.n	800ab88 <UART_SetConfig+0x17c>
 800ab66:	2b20      	cmp	r3, #32
 800ab68:	d005      	beq.n	800ab76 <UART_SetConfig+0x16a>
 800ab6a:	2b30      	cmp	r3, #48	; 0x30
 800ab6c:	d009      	beq.n	800ab82 <UART_SetConfig+0x176>
 800ab6e:	e00b      	b.n	800ab88 <UART_SetConfig+0x17c>
 800ab70:	2300      	movs	r3, #0
 800ab72:	77fb      	strb	r3, [r7, #31]
 800ab74:	e0f1      	b.n	800ad5a <UART_SetConfig+0x34e>
 800ab76:	2302      	movs	r3, #2
 800ab78:	77fb      	strb	r3, [r7, #31]
 800ab7a:	e0ee      	b.n	800ad5a <UART_SetConfig+0x34e>
 800ab7c:	2304      	movs	r3, #4
 800ab7e:	77fb      	strb	r3, [r7, #31]
 800ab80:	e0eb      	b.n	800ad5a <UART_SetConfig+0x34e>
 800ab82:	2308      	movs	r3, #8
 800ab84:	77fb      	strb	r3, [r7, #31]
 800ab86:	e0e8      	b.n	800ad5a <UART_SetConfig+0x34e>
 800ab88:	2310      	movs	r3, #16
 800ab8a:	77fb      	strb	r3, [r7, #31]
 800ab8c:	bf00      	nop
 800ab8e:	e0e4      	b.n	800ad5a <UART_SetConfig+0x34e>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	4a5f      	ldr	r2, [pc, #380]	; (800ad14 <UART_SetConfig+0x308>)
 800ab96:	4293      	cmp	r3, r2
 800ab98:	d120      	bne.n	800abdc <UART_SetConfig+0x1d0>
 800ab9a:	4b5b      	ldr	r3, [pc, #364]	; (800ad08 <UART_SetConfig+0x2fc>)
 800ab9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aba0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800aba4:	2b40      	cmp	r3, #64	; 0x40
 800aba6:	d00f      	beq.n	800abc8 <UART_SetConfig+0x1bc>
 800aba8:	2b40      	cmp	r3, #64	; 0x40
 800abaa:	d802      	bhi.n	800abb2 <UART_SetConfig+0x1a6>
 800abac:	2b00      	cmp	r3, #0
 800abae:	d005      	beq.n	800abbc <UART_SetConfig+0x1b0>
 800abb0:	e010      	b.n	800abd4 <UART_SetConfig+0x1c8>
 800abb2:	2b80      	cmp	r3, #128	; 0x80
 800abb4:	d005      	beq.n	800abc2 <UART_SetConfig+0x1b6>
 800abb6:	2bc0      	cmp	r3, #192	; 0xc0
 800abb8:	d009      	beq.n	800abce <UART_SetConfig+0x1c2>
 800abba:	e00b      	b.n	800abd4 <UART_SetConfig+0x1c8>
 800abbc:	2300      	movs	r3, #0
 800abbe:	77fb      	strb	r3, [r7, #31]
 800abc0:	e0cb      	b.n	800ad5a <UART_SetConfig+0x34e>
 800abc2:	2302      	movs	r3, #2
 800abc4:	77fb      	strb	r3, [r7, #31]
 800abc6:	e0c8      	b.n	800ad5a <UART_SetConfig+0x34e>
 800abc8:	2304      	movs	r3, #4
 800abca:	77fb      	strb	r3, [r7, #31]
 800abcc:	e0c5      	b.n	800ad5a <UART_SetConfig+0x34e>
 800abce:	2308      	movs	r3, #8
 800abd0:	77fb      	strb	r3, [r7, #31]
 800abd2:	e0c2      	b.n	800ad5a <UART_SetConfig+0x34e>
 800abd4:	2310      	movs	r3, #16
 800abd6:	77fb      	strb	r3, [r7, #31]
 800abd8:	bf00      	nop
 800abda:	e0be      	b.n	800ad5a <UART_SetConfig+0x34e>
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	4a4d      	ldr	r2, [pc, #308]	; (800ad18 <UART_SetConfig+0x30c>)
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d124      	bne.n	800ac30 <UART_SetConfig+0x224>
 800abe6:	4b48      	ldr	r3, [pc, #288]	; (800ad08 <UART_SetConfig+0x2fc>)
 800abe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800abf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abf4:	d012      	beq.n	800ac1c <UART_SetConfig+0x210>
 800abf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abfa:	d802      	bhi.n	800ac02 <UART_SetConfig+0x1f6>
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d007      	beq.n	800ac10 <UART_SetConfig+0x204>
 800ac00:	e012      	b.n	800ac28 <UART_SetConfig+0x21c>
 800ac02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac06:	d006      	beq.n	800ac16 <UART_SetConfig+0x20a>
 800ac08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac0c:	d009      	beq.n	800ac22 <UART_SetConfig+0x216>
 800ac0e:	e00b      	b.n	800ac28 <UART_SetConfig+0x21c>
 800ac10:	2300      	movs	r3, #0
 800ac12:	77fb      	strb	r3, [r7, #31]
 800ac14:	e0a1      	b.n	800ad5a <UART_SetConfig+0x34e>
 800ac16:	2302      	movs	r3, #2
 800ac18:	77fb      	strb	r3, [r7, #31]
 800ac1a:	e09e      	b.n	800ad5a <UART_SetConfig+0x34e>
 800ac1c:	2304      	movs	r3, #4
 800ac1e:	77fb      	strb	r3, [r7, #31]
 800ac20:	e09b      	b.n	800ad5a <UART_SetConfig+0x34e>
 800ac22:	2308      	movs	r3, #8
 800ac24:	77fb      	strb	r3, [r7, #31]
 800ac26:	e098      	b.n	800ad5a <UART_SetConfig+0x34e>
 800ac28:	2310      	movs	r3, #16
 800ac2a:	77fb      	strb	r3, [r7, #31]
 800ac2c:	bf00      	nop
 800ac2e:	e094      	b.n	800ad5a <UART_SetConfig+0x34e>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	4a39      	ldr	r2, [pc, #228]	; (800ad1c <UART_SetConfig+0x310>)
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d124      	bne.n	800ac84 <UART_SetConfig+0x278>
 800ac3a:	4b33      	ldr	r3, [pc, #204]	; (800ad08 <UART_SetConfig+0x2fc>)
 800ac3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac40:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ac44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac48:	d012      	beq.n	800ac70 <UART_SetConfig+0x264>
 800ac4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac4e:	d802      	bhi.n	800ac56 <UART_SetConfig+0x24a>
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d007      	beq.n	800ac64 <UART_SetConfig+0x258>
 800ac54:	e012      	b.n	800ac7c <UART_SetConfig+0x270>
 800ac56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac5a:	d006      	beq.n	800ac6a <UART_SetConfig+0x25e>
 800ac5c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ac60:	d009      	beq.n	800ac76 <UART_SetConfig+0x26a>
 800ac62:	e00b      	b.n	800ac7c <UART_SetConfig+0x270>
 800ac64:	2301      	movs	r3, #1
 800ac66:	77fb      	strb	r3, [r7, #31]
 800ac68:	e077      	b.n	800ad5a <UART_SetConfig+0x34e>
 800ac6a:	2302      	movs	r3, #2
 800ac6c:	77fb      	strb	r3, [r7, #31]
 800ac6e:	e074      	b.n	800ad5a <UART_SetConfig+0x34e>
 800ac70:	2304      	movs	r3, #4
 800ac72:	77fb      	strb	r3, [r7, #31]
 800ac74:	e071      	b.n	800ad5a <UART_SetConfig+0x34e>
 800ac76:	2308      	movs	r3, #8
 800ac78:	77fb      	strb	r3, [r7, #31]
 800ac7a:	e06e      	b.n	800ad5a <UART_SetConfig+0x34e>
 800ac7c:	2310      	movs	r3, #16
 800ac7e:	77fb      	strb	r3, [r7, #31]
 800ac80:	bf00      	nop
 800ac82:	e06a      	b.n	800ad5a <UART_SetConfig+0x34e>
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	4a25      	ldr	r2, [pc, #148]	; (800ad20 <UART_SetConfig+0x314>)
 800ac8a:	4293      	cmp	r3, r2
 800ac8c:	d124      	bne.n	800acd8 <UART_SetConfig+0x2cc>
 800ac8e:	4b1e      	ldr	r3, [pc, #120]	; (800ad08 <UART_SetConfig+0x2fc>)
 800ac90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac94:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800ac98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac9c:	d012      	beq.n	800acc4 <UART_SetConfig+0x2b8>
 800ac9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aca2:	d802      	bhi.n	800acaa <UART_SetConfig+0x29e>
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d007      	beq.n	800acb8 <UART_SetConfig+0x2ac>
 800aca8:	e012      	b.n	800acd0 <UART_SetConfig+0x2c4>
 800acaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800acae:	d006      	beq.n	800acbe <UART_SetConfig+0x2b2>
 800acb0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800acb4:	d009      	beq.n	800acca <UART_SetConfig+0x2be>
 800acb6:	e00b      	b.n	800acd0 <UART_SetConfig+0x2c4>
 800acb8:	2300      	movs	r3, #0
 800acba:	77fb      	strb	r3, [r7, #31]
 800acbc:	e04d      	b.n	800ad5a <UART_SetConfig+0x34e>
 800acbe:	2302      	movs	r3, #2
 800acc0:	77fb      	strb	r3, [r7, #31]
 800acc2:	e04a      	b.n	800ad5a <UART_SetConfig+0x34e>
 800acc4:	2304      	movs	r3, #4
 800acc6:	77fb      	strb	r3, [r7, #31]
 800acc8:	e047      	b.n	800ad5a <UART_SetConfig+0x34e>
 800acca:	2308      	movs	r3, #8
 800accc:	77fb      	strb	r3, [r7, #31]
 800acce:	e044      	b.n	800ad5a <UART_SetConfig+0x34e>
 800acd0:	2310      	movs	r3, #16
 800acd2:	77fb      	strb	r3, [r7, #31]
 800acd4:	bf00      	nop
 800acd6:	e040      	b.n	800ad5a <UART_SetConfig+0x34e>
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	4a11      	ldr	r2, [pc, #68]	; (800ad24 <UART_SetConfig+0x318>)
 800acde:	4293      	cmp	r3, r2
 800ace0:	d139      	bne.n	800ad56 <UART_SetConfig+0x34a>
 800ace2:	4b09      	ldr	r3, [pc, #36]	; (800ad08 <UART_SetConfig+0x2fc>)
 800ace4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ace8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800acec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800acf0:	d027      	beq.n	800ad42 <UART_SetConfig+0x336>
 800acf2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800acf6:	d817      	bhi.n	800ad28 <UART_SetConfig+0x31c>
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d01c      	beq.n	800ad36 <UART_SetConfig+0x32a>
 800acfc:	e027      	b.n	800ad4e <UART_SetConfig+0x342>
 800acfe:	bf00      	nop
 800ad00:	efff69f3 	.word	0xefff69f3
 800ad04:	40011000 	.word	0x40011000
 800ad08:	40023800 	.word	0x40023800
 800ad0c:	40004400 	.word	0x40004400
 800ad10:	40004800 	.word	0x40004800
 800ad14:	40004c00 	.word	0x40004c00
 800ad18:	40005000 	.word	0x40005000
 800ad1c:	40011400 	.word	0x40011400
 800ad20:	40007800 	.word	0x40007800
 800ad24:	40007c00 	.word	0x40007c00
 800ad28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad2c:	d006      	beq.n	800ad3c <UART_SetConfig+0x330>
 800ad2e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ad32:	d009      	beq.n	800ad48 <UART_SetConfig+0x33c>
 800ad34:	e00b      	b.n	800ad4e <UART_SetConfig+0x342>
 800ad36:	2300      	movs	r3, #0
 800ad38:	77fb      	strb	r3, [r7, #31]
 800ad3a:	e00e      	b.n	800ad5a <UART_SetConfig+0x34e>
 800ad3c:	2302      	movs	r3, #2
 800ad3e:	77fb      	strb	r3, [r7, #31]
 800ad40:	e00b      	b.n	800ad5a <UART_SetConfig+0x34e>
 800ad42:	2304      	movs	r3, #4
 800ad44:	77fb      	strb	r3, [r7, #31]
 800ad46:	e008      	b.n	800ad5a <UART_SetConfig+0x34e>
 800ad48:	2308      	movs	r3, #8
 800ad4a:	77fb      	strb	r3, [r7, #31]
 800ad4c:	e005      	b.n	800ad5a <UART_SetConfig+0x34e>
 800ad4e:	2310      	movs	r3, #16
 800ad50:	77fb      	strb	r3, [r7, #31]
 800ad52:	bf00      	nop
 800ad54:	e001      	b.n	800ad5a <UART_SetConfig+0x34e>
 800ad56:	2310      	movs	r3, #16
 800ad58:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	69db      	ldr	r3, [r3, #28]
 800ad5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad62:	d17f      	bne.n	800ae64 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800ad64:	7ffb      	ldrb	r3, [r7, #31]
 800ad66:	2b08      	cmp	r3, #8
 800ad68:	d85c      	bhi.n	800ae24 <UART_SetConfig+0x418>
 800ad6a:	a201      	add	r2, pc, #4	; (adr r2, 800ad70 <UART_SetConfig+0x364>)
 800ad6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad70:	0800ad95 	.word	0x0800ad95
 800ad74:	0800adb5 	.word	0x0800adb5
 800ad78:	0800add5 	.word	0x0800add5
 800ad7c:	0800ae25 	.word	0x0800ae25
 800ad80:	0800aded 	.word	0x0800aded
 800ad84:	0800ae25 	.word	0x0800ae25
 800ad88:	0800ae25 	.word	0x0800ae25
 800ad8c:	0800ae25 	.word	0x0800ae25
 800ad90:	0800ae0d 	.word	0x0800ae0d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad94:	f7fc f8d0 	bl	8006f38 <HAL_RCC_GetPCLK1Freq>
 800ad98:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	005a      	lsls	r2, r3, #1
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	685b      	ldr	r3, [r3, #4]
 800ada2:	085b      	lsrs	r3, r3, #1
 800ada4:	441a      	add	r2, r3
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	685b      	ldr	r3, [r3, #4]
 800adaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800adae:	b29b      	uxth	r3, r3
 800adb0:	61bb      	str	r3, [r7, #24]
        break;
 800adb2:	e03a      	b.n	800ae2a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800adb4:	f7fc f8d4 	bl	8006f60 <HAL_RCC_GetPCLK2Freq>
 800adb8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	005a      	lsls	r2, r3, #1
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	685b      	ldr	r3, [r3, #4]
 800adc2:	085b      	lsrs	r3, r3, #1
 800adc4:	441a      	add	r2, r3
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	685b      	ldr	r3, [r3, #4]
 800adca:	fbb2 f3f3 	udiv	r3, r2, r3
 800adce:	b29b      	uxth	r3, r3
 800add0:	61bb      	str	r3, [r7, #24]
        break;
 800add2:	e02a      	b.n	800ae2a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	685b      	ldr	r3, [r3, #4]
 800add8:	085a      	lsrs	r2, r3, #1
 800adda:	4b5f      	ldr	r3, [pc, #380]	; (800af58 <UART_SetConfig+0x54c>)
 800addc:	4413      	add	r3, r2
 800adde:	687a      	ldr	r2, [r7, #4]
 800ade0:	6852      	ldr	r2, [r2, #4]
 800ade2:	fbb3 f3f2 	udiv	r3, r3, r2
 800ade6:	b29b      	uxth	r3, r3
 800ade8:	61bb      	str	r3, [r7, #24]
        break;
 800adea:	e01e      	b.n	800ae2a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800adec:	f7fb ffe6 	bl	8006dbc <HAL_RCC_GetSysClockFreq>
 800adf0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	005a      	lsls	r2, r3, #1
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	685b      	ldr	r3, [r3, #4]
 800adfa:	085b      	lsrs	r3, r3, #1
 800adfc:	441a      	add	r2, r3
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	685b      	ldr	r3, [r3, #4]
 800ae02:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae06:	b29b      	uxth	r3, r3
 800ae08:	61bb      	str	r3, [r7, #24]
        break;
 800ae0a:	e00e      	b.n	800ae2a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	685b      	ldr	r3, [r3, #4]
 800ae10:	085b      	lsrs	r3, r3, #1
 800ae12:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	685b      	ldr	r3, [r3, #4]
 800ae1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae1e:	b29b      	uxth	r3, r3
 800ae20:	61bb      	str	r3, [r7, #24]
        break;
 800ae22:	e002      	b.n	800ae2a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800ae24:	2301      	movs	r3, #1
 800ae26:	75fb      	strb	r3, [r7, #23]
        break;
 800ae28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae2a:	69bb      	ldr	r3, [r7, #24]
 800ae2c:	2b0f      	cmp	r3, #15
 800ae2e:	d916      	bls.n	800ae5e <UART_SetConfig+0x452>
 800ae30:	69bb      	ldr	r3, [r7, #24]
 800ae32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae36:	d212      	bcs.n	800ae5e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ae38:	69bb      	ldr	r3, [r7, #24]
 800ae3a:	b29b      	uxth	r3, r3
 800ae3c:	f023 030f 	bic.w	r3, r3, #15
 800ae40:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ae42:	69bb      	ldr	r3, [r7, #24]
 800ae44:	085b      	lsrs	r3, r3, #1
 800ae46:	b29b      	uxth	r3, r3
 800ae48:	f003 0307 	and.w	r3, r3, #7
 800ae4c:	b29a      	uxth	r2, r3
 800ae4e:	897b      	ldrh	r3, [r7, #10]
 800ae50:	4313      	orrs	r3, r2
 800ae52:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	897a      	ldrh	r2, [r7, #10]
 800ae5a:	60da      	str	r2, [r3, #12]
 800ae5c:	e070      	b.n	800af40 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800ae5e:	2301      	movs	r3, #1
 800ae60:	75fb      	strb	r3, [r7, #23]
 800ae62:	e06d      	b.n	800af40 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800ae64:	7ffb      	ldrb	r3, [r7, #31]
 800ae66:	2b08      	cmp	r3, #8
 800ae68:	d859      	bhi.n	800af1e <UART_SetConfig+0x512>
 800ae6a:	a201      	add	r2, pc, #4	; (adr r2, 800ae70 <UART_SetConfig+0x464>)
 800ae6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae70:	0800ae95 	.word	0x0800ae95
 800ae74:	0800aeb3 	.word	0x0800aeb3
 800ae78:	0800aed1 	.word	0x0800aed1
 800ae7c:	0800af1f 	.word	0x0800af1f
 800ae80:	0800aee9 	.word	0x0800aee9
 800ae84:	0800af1f 	.word	0x0800af1f
 800ae88:	0800af1f 	.word	0x0800af1f
 800ae8c:	0800af1f 	.word	0x0800af1f
 800ae90:	0800af07 	.word	0x0800af07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae94:	f7fc f850 	bl	8006f38 <HAL_RCC_GetPCLK1Freq>
 800ae98:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	685b      	ldr	r3, [r3, #4]
 800ae9e:	085a      	lsrs	r2, r3, #1
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	441a      	add	r2, r3
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	685b      	ldr	r3, [r3, #4]
 800aea8:	fbb2 f3f3 	udiv	r3, r2, r3
 800aeac:	b29b      	uxth	r3, r3
 800aeae:	61bb      	str	r3, [r7, #24]
        break;
 800aeb0:	e038      	b.n	800af24 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aeb2:	f7fc f855 	bl	8006f60 <HAL_RCC_GetPCLK2Freq>
 800aeb6:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	685b      	ldr	r3, [r3, #4]
 800aebc:	085a      	lsrs	r2, r3, #1
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	441a      	add	r2, r3
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	685b      	ldr	r3, [r3, #4]
 800aec6:	fbb2 f3f3 	udiv	r3, r2, r3
 800aeca:	b29b      	uxth	r3, r3
 800aecc:	61bb      	str	r3, [r7, #24]
        break;
 800aece:	e029      	b.n	800af24 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	685b      	ldr	r3, [r3, #4]
 800aed4:	085a      	lsrs	r2, r3, #1
 800aed6:	4b21      	ldr	r3, [pc, #132]	; (800af5c <UART_SetConfig+0x550>)
 800aed8:	4413      	add	r3, r2
 800aeda:	687a      	ldr	r2, [r7, #4]
 800aedc:	6852      	ldr	r2, [r2, #4]
 800aede:	fbb3 f3f2 	udiv	r3, r3, r2
 800aee2:	b29b      	uxth	r3, r3
 800aee4:	61bb      	str	r3, [r7, #24]
        break;
 800aee6:	e01d      	b.n	800af24 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aee8:	f7fb ff68 	bl	8006dbc <HAL_RCC_GetSysClockFreq>
 800aeec:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	685b      	ldr	r3, [r3, #4]
 800aef2:	085a      	lsrs	r2, r3, #1
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	441a      	add	r2, r3
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	685b      	ldr	r3, [r3, #4]
 800aefc:	fbb2 f3f3 	udiv	r3, r2, r3
 800af00:	b29b      	uxth	r3, r3
 800af02:	61bb      	str	r3, [r7, #24]
        break;
 800af04:	e00e      	b.n	800af24 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	685b      	ldr	r3, [r3, #4]
 800af0a:	085b      	lsrs	r3, r3, #1
 800af0c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	685b      	ldr	r3, [r3, #4]
 800af14:	fbb2 f3f3 	udiv	r3, r2, r3
 800af18:	b29b      	uxth	r3, r3
 800af1a:	61bb      	str	r3, [r7, #24]
        break;
 800af1c:	e002      	b.n	800af24 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800af1e:	2301      	movs	r3, #1
 800af20:	75fb      	strb	r3, [r7, #23]
        break;
 800af22:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af24:	69bb      	ldr	r3, [r7, #24]
 800af26:	2b0f      	cmp	r3, #15
 800af28:	d908      	bls.n	800af3c <UART_SetConfig+0x530>
 800af2a:	69bb      	ldr	r3, [r7, #24]
 800af2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af30:	d204      	bcs.n	800af3c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	69ba      	ldr	r2, [r7, #24]
 800af38:	60da      	str	r2, [r3, #12]
 800af3a:	e001      	b.n	800af40 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800af3c:	2301      	movs	r3, #1
 800af3e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2200      	movs	r2, #0
 800af44:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2200      	movs	r2, #0
 800af4a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800af4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3720      	adds	r7, #32
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}
 800af56:	bf00      	nop
 800af58:	01e84800 	.word	0x01e84800
 800af5c:	00f42400 	.word	0x00f42400

0800af60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800af60:	b480      	push	{r7}
 800af62:	b083      	sub	sp, #12
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af6c:	f003 0301 	and.w	r3, r3, #1
 800af70:	2b00      	cmp	r3, #0
 800af72:	d00a      	beq.n	800af8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	685b      	ldr	r3, [r3, #4]
 800af7a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	430a      	orrs	r2, r1
 800af88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af8e:	f003 0302 	and.w	r3, r3, #2
 800af92:	2b00      	cmp	r3, #0
 800af94:	d00a      	beq.n	800afac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	685b      	ldr	r3, [r3, #4]
 800af9c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	430a      	orrs	r2, r1
 800afaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afb0:	f003 0304 	and.w	r3, r3, #4
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d00a      	beq.n	800afce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	685b      	ldr	r3, [r3, #4]
 800afbe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	430a      	orrs	r2, r1
 800afcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd2:	f003 0308 	and.w	r3, r3, #8
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d00a      	beq.n	800aff0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	685b      	ldr	r3, [r3, #4]
 800afe0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	430a      	orrs	r2, r1
 800afee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aff4:	f003 0310 	and.w	r3, r3, #16
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d00a      	beq.n	800b012 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	689b      	ldr	r3, [r3, #8]
 800b002:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	430a      	orrs	r2, r1
 800b010:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b016:	f003 0320 	and.w	r3, r3, #32
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d00a      	beq.n	800b034 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	689b      	ldr	r3, [r3, #8]
 800b024:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	430a      	orrs	r2, r1
 800b032:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d01a      	beq.n	800b076 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	685b      	ldr	r3, [r3, #4]
 800b046:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	430a      	orrs	r2, r1
 800b054:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b05a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b05e:	d10a      	bne.n	800b076 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	685b      	ldr	r3, [r3, #4]
 800b066:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	430a      	orrs	r2, r1
 800b074:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b07a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d00a      	beq.n	800b098 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	685b      	ldr	r3, [r3, #4]
 800b088:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	430a      	orrs	r2, r1
 800b096:	605a      	str	r2, [r3, #4]
  }
}
 800b098:	bf00      	nop
 800b09a:	370c      	adds	r7, #12
 800b09c:	46bd      	mov	sp, r7
 800b09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a2:	4770      	bx	lr

0800b0a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b086      	sub	sp, #24
 800b0a8:	af02      	add	r7, sp, #8
 800b0aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b0b2:	f7f8 fd1d 	bl	8003af0 <HAL_GetTick>
 800b0b6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	f003 0308 	and.w	r3, r3, #8
 800b0c2:	2b08      	cmp	r3, #8
 800b0c4:	d10e      	bne.n	800b0e4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b0c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b0ca:	9300      	str	r3, [sp, #0]
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f000 f814 	bl	800b102 <UART_WaitOnFlagUntilTimeout>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d001      	beq.n	800b0e4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b0e0:	2303      	movs	r3, #3
 800b0e2:	e00a      	b.n	800b0fa <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2220      	movs	r2, #32
 800b0e8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2220      	movs	r2, #32
 800b0ee:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800b0f8:	2300      	movs	r3, #0
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3710      	adds	r7, #16
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}

0800b102 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b102:	b580      	push	{r7, lr}
 800b104:	b084      	sub	sp, #16
 800b106:	af00      	add	r7, sp, #0
 800b108:	60f8      	str	r0, [r7, #12]
 800b10a:	60b9      	str	r1, [r7, #8]
 800b10c:	603b      	str	r3, [r7, #0]
 800b10e:	4613      	mov	r3, r2
 800b110:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b112:	e05d      	b.n	800b1d0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b114:	69bb      	ldr	r3, [r7, #24]
 800b116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b11a:	d059      	beq.n	800b1d0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b11c:	f7f8 fce8 	bl	8003af0 <HAL_GetTick>
 800b120:	4602      	mov	r2, r0
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	1ad3      	subs	r3, r2, r3
 800b126:	69ba      	ldr	r2, [r7, #24]
 800b128:	429a      	cmp	r2, r3
 800b12a:	d302      	bcc.n	800b132 <UART_WaitOnFlagUntilTimeout+0x30>
 800b12c:	69bb      	ldr	r3, [r7, #24]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d11b      	bne.n	800b16a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	681a      	ldr	r2, [r3, #0]
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b140:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	689a      	ldr	r2, [r3, #8]
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f022 0201 	bic.w	r2, r2, #1
 800b150:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	2220      	movs	r2, #32
 800b156:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	2220      	movs	r2, #32
 800b15c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	2200      	movs	r2, #0
 800b162:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800b166:	2303      	movs	r3, #3
 800b168:	e042      	b.n	800b1f0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f003 0304 	and.w	r3, r3, #4
 800b174:	2b00      	cmp	r3, #0
 800b176:	d02b      	beq.n	800b1d0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	69db      	ldr	r3, [r3, #28]
 800b17e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b182:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b186:	d123      	bne.n	800b1d0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b190:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	681a      	ldr	r2, [r3, #0]
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b1a0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	689a      	ldr	r2, [r3, #8]
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f022 0201 	bic.w	r2, r2, #1
 800b1b0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	2220      	movs	r2, #32
 800b1b6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	2220      	movs	r2, #32
 800b1bc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	2220      	movs	r2, #32
 800b1c2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800b1cc:	2303      	movs	r3, #3
 800b1ce:	e00f      	b.n	800b1f0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	69da      	ldr	r2, [r3, #28]
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	4013      	ands	r3, r2
 800b1da:	68ba      	ldr	r2, [r7, #8]
 800b1dc:	429a      	cmp	r2, r3
 800b1de:	bf0c      	ite	eq
 800b1e0:	2301      	moveq	r3, #1
 800b1e2:	2300      	movne	r3, #0
 800b1e4:	b2db      	uxtb	r3, r3
 800b1e6:	461a      	mov	r2, r3
 800b1e8:	79fb      	ldrb	r3, [r7, #7]
 800b1ea:	429a      	cmp	r2, r3
 800b1ec:	d092      	beq.n	800b114 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b1ee:	2300      	movs	r3, #0
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	3710      	adds	r7, #16
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}

0800b1f8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b1f8:	b480      	push	{r7}
 800b1fa:	b085      	sub	sp, #20
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
 800b200:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800b202:	2300      	movs	r3, #0
 800b204:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800b206:	2300      	movs	r3, #0
 800b208:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	2b01      	cmp	r3, #1
 800b210:	d027      	beq.n	800b262 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b218:	68fa      	ldr	r2, [r7, #12]
 800b21a:	4b2f      	ldr	r3, [pc, #188]	; (800b2d8 <FMC_SDRAM_Init+0xe0>)
 800b21c:	4013      	ands	r3, r2
 800b21e:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b228:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800b22e:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800b234:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800b23a:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800b240:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800b246:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800b24c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b252:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b254:	68fa      	ldr	r2, [r7, #12]
 800b256:	4313      	orrs	r3, r2
 800b258:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	68fa      	ldr	r2, [r7, #12]
 800b25e:	601a      	str	r2, [r3, #0]
 800b260:	e032      	b.n	800b2c8 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b26e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b278:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b27e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b280:	68fa      	ldr	r2, [r7, #12]
 800b282:	4313      	orrs	r3, r2
 800b284:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	685b      	ldr	r3, [r3, #4]
 800b28a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b28c:	68ba      	ldr	r2, [r7, #8]
 800b28e:	4b12      	ldr	r3, [pc, #72]	; (800b2d8 <FMC_SDRAM_Init+0xe0>)
 800b290:	4013      	ands	r3, r2
 800b292:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b29c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800b2a2:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800b2a8:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800b2ae:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800b2b4:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b2b6:	68ba      	ldr	r2, [r7, #8]
 800b2b8:	4313      	orrs	r3, r2
 800b2ba:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	68fa      	ldr	r2, [r7, #12]
 800b2c0:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	68ba      	ldr	r2, [r7, #8]
 800b2c6:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800b2c8:	2300      	movs	r3, #0
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	3714      	adds	r7, #20
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d4:	4770      	bx	lr
 800b2d6:	bf00      	nop
 800b2d8:	ffff8000 	.word	0xffff8000

0800b2dc <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b2dc:	b480      	push	{r7}
 800b2de:	b087      	sub	sp, #28
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	60f8      	str	r0, [r7, #12]
 800b2e4:	60b9      	str	r1, [r7, #8]
 800b2e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2b01      	cmp	r3, #1
 800b2f4:	d02e      	beq.n	800b354 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	689b      	ldr	r3, [r3, #8]
 800b2fa:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b302:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	685b      	ldr	r3, [r3, #4]
 800b30e:	3b01      	subs	r3, #1
 800b310:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b312:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	689b      	ldr	r3, [r3, #8]
 800b318:	3b01      	subs	r3, #1
 800b31a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b31c:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b31e:	68bb      	ldr	r3, [r7, #8]
 800b320:	68db      	ldr	r3, [r3, #12]
 800b322:	3b01      	subs	r3, #1
 800b324:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b326:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	691b      	ldr	r3, [r3, #16]
 800b32c:	3b01      	subs	r3, #1
 800b32e:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b330:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	695b      	ldr	r3, [r3, #20]
 800b336:	3b01      	subs	r3, #1
 800b338:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b33a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	699b      	ldr	r3, [r3, #24]
 800b340:	3b01      	subs	r3, #1
 800b342:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b344:	4313      	orrs	r3, r2
 800b346:	697a      	ldr	r2, [r7, #20]
 800b348:	4313      	orrs	r3, r2
 800b34a:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	697a      	ldr	r2, [r7, #20]
 800b350:	609a      	str	r2, [r3, #8]
 800b352:	e039      	b.n	800b3c8 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	689b      	ldr	r3, [r3, #8]
 800b358:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800b35a:	697a      	ldr	r2, [r7, #20]
 800b35c:	4b1e      	ldr	r3, [pc, #120]	; (800b3d8 <FMC_SDRAM_Timing_Init+0xfc>)
 800b35e:	4013      	ands	r3, r2
 800b360:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	68db      	ldr	r3, [r3, #12]
 800b366:	3b01      	subs	r3, #1
 800b368:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800b36a:	68bb      	ldr	r3, [r7, #8]
 800b36c:	695b      	ldr	r3, [r3, #20]
 800b36e:	3b01      	subs	r3, #1
 800b370:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b372:	4313      	orrs	r3, r2
 800b374:	697a      	ldr	r2, [r7, #20]
 800b376:	4313      	orrs	r3, r2
 800b378:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	68db      	ldr	r3, [r3, #12]
 800b37e:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b386:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	685b      	ldr	r3, [r3, #4]
 800b392:	3b01      	subs	r3, #1
 800b394:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b396:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	689b      	ldr	r3, [r3, #8]
 800b39c:	3b01      	subs	r3, #1
 800b39e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b3a0:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	691b      	ldr	r3, [r3, #16]
 800b3a6:	3b01      	subs	r3, #1
 800b3a8:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b3aa:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	699b      	ldr	r3, [r3, #24]
 800b3b0:	3b01      	subs	r3, #1
 800b3b2:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b3b4:	4313      	orrs	r3, r2
 800b3b6:	693a      	ldr	r2, [r7, #16]
 800b3b8:	4313      	orrs	r3, r2
 800b3ba:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	697a      	ldr	r2, [r7, #20]
 800b3c0:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	693a      	ldr	r2, [r7, #16]
 800b3c6:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800b3c8:	2300      	movs	r3, #0
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	371c      	adds	r7, #28
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d4:	4770      	bx	lr
 800b3d6:	bf00      	nop
 800b3d8:	ff0f0fff 	.word	0xff0f0fff

0800b3dc <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b3dc:	b480      	push	{r7}
 800b3de:	b087      	sub	sp, #28
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	60f8      	str	r0, [r7, #12]
 800b3e4:	60b9      	str	r1, [r7, #8]
 800b3e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b3f4:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800b3f6:	68bb      	ldr	r3, [r7, #8]
 800b3f8:	689b      	ldr	r3, [r3, #8]
 800b3fa:	3b01      	subs	r3, #1
 800b3fc:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800b3fe:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	68db      	ldr	r3, [r3, #12]
 800b404:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b406:	4313      	orrs	r3, r2
 800b408:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800b40a:	697a      	ldr	r2, [r7, #20]
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800b410:	2300      	movs	r3, #0
}
 800b412:	4618      	mov	r0, r3
 800b414:	371c      	adds	r7, #28
 800b416:	46bd      	mov	sp, r7
 800b418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41c:	4770      	bx	lr

0800b41e <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b41e:	b480      	push	{r7}
 800b420:	b083      	sub	sp, #12
 800b422:	af00      	add	r7, sp, #0
 800b424:	6078      	str	r0, [r7, #4]
 800b426:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	695a      	ldr	r2, [r3, #20]
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	005b      	lsls	r3, r3, #1
 800b430:	431a      	orrs	r2, r3
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800b436:	2300      	movs	r3, #0
}
 800b438:	4618      	mov	r0, r3
 800b43a:	370c      	adds	r7, #12
 800b43c:	46bd      	mov	sp, r7
 800b43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b442:	4770      	bx	lr

0800b444 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b444:	b084      	sub	sp, #16
 800b446:	b480      	push	{r7}
 800b448:	b085      	sub	sp, #20
 800b44a:	af00      	add	r7, sp, #0
 800b44c:	6078      	str	r0, [r7, #4]
 800b44e:	f107 001c 	add.w	r0, r7, #28
 800b452:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b456:	2300      	movs	r3, #0
 800b458:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b45a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800b45c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b45e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800b460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800b462:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b464:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800b466:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800b46a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b46c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800b46e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b470:	68fa      	ldr	r2, [r7, #12]
 800b472:	4313      	orrs	r3, r2
 800b474:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	685a      	ldr	r2, [r3, #4]
 800b47a:	4b07      	ldr	r3, [pc, #28]	; (800b498 <SDMMC_Init+0x54>)
 800b47c:	4013      	ands	r3, r2
 800b47e:	68fa      	ldr	r2, [r7, #12]
 800b480:	431a      	orrs	r2, r3
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b486:	2300      	movs	r3, #0
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3714      	adds	r7, #20
 800b48c:	46bd      	mov	sp, r7
 800b48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b492:	b004      	add	sp, #16
 800b494:	4770      	bx	lr
 800b496:	bf00      	nop
 800b498:	ffff8100 	.word	0xffff8100

0800b49c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b49c:	b480      	push	{r7}
 800b49e:	b083      	sub	sp, #12
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	370c      	adds	r7, #12
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b4:	4770      	bx	lr

0800b4b6 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800b4b6:	b580      	push	{r7, lr}
 800b4b8:	b082      	sub	sp, #8
 800b4ba:	af00      	add	r7, sp, #0
 800b4bc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2203      	movs	r2, #3
 800b4c2:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800b4c4:	2002      	movs	r0, #2
 800b4c6:	f7f8 fb1f 	bl	8003b08 <HAL_Delay>
  
  return HAL_OK;
 800b4ca:	2300      	movs	r3, #0
}
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	3708      	adds	r7, #8
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bd80      	pop	{r7, pc}

0800b4d4 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	b083      	sub	sp, #12
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	f003 0303 	and.w	r3, r3, #3
}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	370c      	adds	r7, #12
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ee:	4770      	bx	lr

0800b4f0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b4f0:	b480      	push	{r7}
 800b4f2:	b085      	sub	sp, #20
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
 800b4f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	681a      	ldr	r2, [r3, #0]
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b50e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b514:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b51a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b51c:	68fa      	ldr	r2, [r7, #12]
 800b51e:	4313      	orrs	r3, r2
 800b520:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	68da      	ldr	r2, [r3, #12]
 800b526:	4b06      	ldr	r3, [pc, #24]	; (800b540 <SDMMC_SendCommand+0x50>)
 800b528:	4013      	ands	r3, r2
 800b52a:	68fa      	ldr	r2, [r7, #12]
 800b52c:	431a      	orrs	r2, r3
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800b532:	2300      	movs	r3, #0
}
 800b534:	4618      	mov	r0, r3
 800b536:	3714      	adds	r7, #20
 800b538:	46bd      	mov	sp, r7
 800b53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53e:	4770      	bx	lr
 800b540:	fffff000 	.word	0xfffff000

0800b544 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b544:	b480      	push	{r7}
 800b546:	b083      	sub	sp, #12
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	691b      	ldr	r3, [r3, #16]
 800b550:	b2db      	uxtb	r3, r3
}
 800b552:	4618      	mov	r0, r3
 800b554:	370c      	adds	r7, #12
 800b556:	46bd      	mov	sp, r7
 800b558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55c:	4770      	bx	lr

0800b55e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b55e:	b480      	push	{r7}
 800b560:	b085      	sub	sp, #20
 800b562:	af00      	add	r7, sp, #0
 800b564:	6078      	str	r0, [r7, #4]
 800b566:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	3314      	adds	r3, #20
 800b56c:	461a      	mov	r2, r3
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	4413      	add	r3, r2
 800b572:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	681b      	ldr	r3, [r3, #0]
}  
 800b578:	4618      	mov	r0, r3
 800b57a:	3714      	adds	r7, #20
 800b57c:	46bd      	mov	sp, r7
 800b57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b582:	4770      	bx	lr

0800b584 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800b584:	b480      	push	{r7}
 800b586:	b085      	sub	sp, #20
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
 800b58c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b58e:	2300      	movs	r3, #0
 800b590:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	681a      	ldr	r2, [r3, #0]
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	685a      	ldr	r2, [r3, #4]
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b5aa:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b5b0:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b5b6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b5b8:	68fa      	ldr	r2, [r7, #12]
 800b5ba:	4313      	orrs	r3, r2
 800b5bc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5c2:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	431a      	orrs	r2, r3
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b5ce:	2300      	movs	r3, #0

}
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	3714      	adds	r7, #20
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5da:	4770      	bx	lr

0800b5dc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b088      	sub	sp, #32
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
 800b5e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b5ea:	2310      	movs	r3, #16
 800b5ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b5ee:	2340      	movs	r3, #64	; 0x40
 800b5f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b5fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5fc:	f107 0308 	add.w	r3, r7, #8
 800b600:	4619      	mov	r1, r3
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f7ff ff74 	bl	800b4f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b608:	f241 3288 	movw	r2, #5000	; 0x1388
 800b60c:	2110      	movs	r1, #16
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f000 fa42 	bl	800ba98 <SDMMC_GetCmdResp1>
 800b614:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b616:	69fb      	ldr	r3, [r7, #28]
}
 800b618:	4618      	mov	r0, r3
 800b61a:	3720      	adds	r7, #32
 800b61c:	46bd      	mov	sp, r7
 800b61e:	bd80      	pop	{r7, pc}

0800b620 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b088      	sub	sp, #32
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
 800b628:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b62e:	2311      	movs	r3, #17
 800b630:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b632:	2340      	movs	r3, #64	; 0x40
 800b634:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b636:	2300      	movs	r3, #0
 800b638:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b63a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b63e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b640:	f107 0308 	add.w	r3, r7, #8
 800b644:	4619      	mov	r1, r3
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f7ff ff52 	bl	800b4f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b64c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b650:	2111      	movs	r1, #17
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f000 fa20 	bl	800ba98 <SDMMC_GetCmdResp1>
 800b658:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b65a:	69fb      	ldr	r3, [r7, #28]
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	3720      	adds	r7, #32
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}

0800b664 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b088      	sub	sp, #32
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
 800b66c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b672:	2312      	movs	r3, #18
 800b674:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b676:	2340      	movs	r3, #64	; 0x40
 800b678:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b67a:	2300      	movs	r3, #0
 800b67c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b67e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b682:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b684:	f107 0308 	add.w	r3, r7, #8
 800b688:	4619      	mov	r1, r3
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f7ff ff30 	bl	800b4f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b690:	f241 3288 	movw	r2, #5000	; 0x1388
 800b694:	2112      	movs	r1, #18
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f000 f9fe 	bl	800ba98 <SDMMC_GetCmdResp1>
 800b69c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b69e:	69fb      	ldr	r3, [r7, #28]
}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	3720      	adds	r7, #32
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}

0800b6a8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b088      	sub	sp, #32
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
 800b6b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b6b6:	2318      	movs	r3, #24
 800b6b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b6ba:	2340      	movs	r3, #64	; 0x40
 800b6bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6be:	2300      	movs	r3, #0
 800b6c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6c8:	f107 0308 	add.w	r3, r7, #8
 800b6cc:	4619      	mov	r1, r3
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f7ff ff0e 	bl	800b4f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b6d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6d8:	2118      	movs	r1, #24
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	f000 f9dc 	bl	800ba98 <SDMMC_GetCmdResp1>
 800b6e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6e2:	69fb      	ldr	r3, [r7, #28]
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	3720      	adds	r7, #32
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}

0800b6ec <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b088      	sub	sp, #32
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
 800b6f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b6fa:	2319      	movs	r3, #25
 800b6fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b6fe:	2340      	movs	r3, #64	; 0x40
 800b700:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b702:	2300      	movs	r3, #0
 800b704:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b706:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b70a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b70c:	f107 0308 	add.w	r3, r7, #8
 800b710:	4619      	mov	r1, r3
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f7ff feec 	bl	800b4f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b718:	f241 3288 	movw	r2, #5000	; 0x1388
 800b71c:	2119      	movs	r1, #25
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	f000 f9ba 	bl	800ba98 <SDMMC_GetCmdResp1>
 800b724:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b726:	69fb      	ldr	r3, [r7, #28]
}
 800b728:	4618      	mov	r0, r3
 800b72a:	3720      	adds	r7, #32
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bd80      	pop	{r7, pc}

0800b730 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b088      	sub	sp, #32
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b738:	2300      	movs	r3, #0
 800b73a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b73c:	230c      	movs	r3, #12
 800b73e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b740:	2340      	movs	r3, #64	; 0x40
 800b742:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b744:	2300      	movs	r3, #0
 800b746:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b748:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b74c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b74e:	f107 0308 	add.w	r3, r7, #8
 800b752:	4619      	mov	r1, r3
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f7ff fecb 	bl	800b4f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b75a:	4a05      	ldr	r2, [pc, #20]	; (800b770 <SDMMC_CmdStopTransfer+0x40>)
 800b75c:	210c      	movs	r1, #12
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f000 f99a 	bl	800ba98 <SDMMC_GetCmdResp1>
 800b764:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b766:	69fb      	ldr	r3, [r7, #28]
}
 800b768:	4618      	mov	r0, r3
 800b76a:	3720      	adds	r7, #32
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bd80      	pop	{r7, pc}
 800b770:	05f5e100 	.word	0x05f5e100

0800b774 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b08a      	sub	sp, #40	; 0x28
 800b778:	af00      	add	r7, sp, #0
 800b77a:	60f8      	str	r0, [r7, #12]
 800b77c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b784:	2307      	movs	r3, #7
 800b786:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b788:	2340      	movs	r3, #64	; 0x40
 800b78a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b78c:	2300      	movs	r3, #0
 800b78e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b790:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b794:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b796:	f107 0310 	add.w	r3, r7, #16
 800b79a:	4619      	mov	r1, r3
 800b79c:	68f8      	ldr	r0, [r7, #12]
 800b79e:	f7ff fea7 	bl	800b4f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b7a2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7a6:	2107      	movs	r1, #7
 800b7a8:	68f8      	ldr	r0, [r7, #12]
 800b7aa:	f000 f975 	bl	800ba98 <SDMMC_GetCmdResp1>
 800b7ae:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	3728      	adds	r7, #40	; 0x28
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bd80      	pop	{r7, pc}

0800b7ba <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b7ba:	b580      	push	{r7, lr}
 800b7bc:	b088      	sub	sp, #32
 800b7be:	af00      	add	r7, sp, #0
 800b7c0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7d8:	f107 0308 	add.w	r3, r7, #8
 800b7dc:	4619      	mov	r1, r3
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	f7ff fe86 	bl	800b4f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b7e4:	6878      	ldr	r0, [r7, #4]
 800b7e6:	f000 f92f 	bl	800ba48 <SDMMC_GetCmdError>
 800b7ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7ec:	69fb      	ldr	r3, [r7, #28]
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3720      	adds	r7, #32
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}

0800b7f6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b7f6:	b580      	push	{r7, lr}
 800b7f8:	b088      	sub	sp, #32
 800b7fa:	af00      	add	r7, sp, #0
 800b7fc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b7fe:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b802:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b804:	2308      	movs	r3, #8
 800b806:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b808:	2340      	movs	r3, #64	; 0x40
 800b80a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b80c:	2300      	movs	r3, #0
 800b80e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b810:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b814:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b816:	f107 0308 	add.w	r3, r7, #8
 800b81a:	4619      	mov	r1, r3
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f7ff fe67 	bl	800b4f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	f000 fb18 	bl	800be58 <SDMMC_GetCmdResp7>
 800b828:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b82a:	69fb      	ldr	r3, [r7, #28]
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	3720      	adds	r7, #32
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}

0800b834 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b088      	sub	sp, #32
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
 800b83c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b842:	2337      	movs	r3, #55	; 0x37
 800b844:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b846:	2340      	movs	r3, #64	; 0x40
 800b848:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b84a:	2300      	movs	r3, #0
 800b84c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b84e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b852:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b854:	f107 0308 	add.w	r3, r7, #8
 800b858:	4619      	mov	r1, r3
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	f7ff fe48 	bl	800b4f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b860:	f241 3288 	movw	r2, #5000	; 0x1388
 800b864:	2137      	movs	r1, #55	; 0x37
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f000 f916 	bl	800ba98 <SDMMC_GetCmdResp1>
 800b86c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b86e:	69fb      	ldr	r3, [r7, #28]
}
 800b870:	4618      	mov	r0, r3
 800b872:	3720      	adds	r7, #32
 800b874:	46bd      	mov	sp, r7
 800b876:	bd80      	pop	{r7, pc}

0800b878 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b088      	sub	sp, #32
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
 800b880:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b882:	683a      	ldr	r2, [r7, #0]
 800b884:	4b0d      	ldr	r3, [pc, #52]	; (800b8bc <SDMMC_CmdAppOperCommand+0x44>)
 800b886:	4313      	orrs	r3, r2
 800b888:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b88a:	2329      	movs	r3, #41	; 0x29
 800b88c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b88e:	2340      	movs	r3, #64	; 0x40
 800b890:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b892:	2300      	movs	r3, #0
 800b894:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b896:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b89a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b89c:	f107 0308 	add.w	r3, r7, #8
 800b8a0:	4619      	mov	r1, r3
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f7ff fe24 	bl	800b4f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	f000 fa27 	bl	800bcfc <SDMMC_GetCmdResp3>
 800b8ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8b0:	69fb      	ldr	r3, [r7, #28]
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3720      	adds	r7, #32
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd80      	pop	{r7, pc}
 800b8ba:	bf00      	nop
 800b8bc:	80100000 	.word	0x80100000

0800b8c0 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b088      	sub	sp, #32
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
 800b8c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b8ce:	2306      	movs	r3, #6
 800b8d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b8d2:	2340      	movs	r3, #64	; 0x40
 800b8d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b8da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b8e0:	f107 0308 	add.w	r3, r7, #8
 800b8e4:	4619      	mov	r1, r3
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	f7ff fe02 	bl	800b4f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b8ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8f0:	2106      	movs	r1, #6
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	f000 f8d0 	bl	800ba98 <SDMMC_GetCmdResp1>
 800b8f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8fa:	69fb      	ldr	r3, [r7, #28]
}
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	3720      	adds	r7, #32
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}

0800b904 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b088      	sub	sp, #32
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b90c:	2300      	movs	r3, #0
 800b90e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b910:	2333      	movs	r3, #51	; 0x33
 800b912:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b914:	2340      	movs	r3, #64	; 0x40
 800b916:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b918:	2300      	movs	r3, #0
 800b91a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b91c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b920:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b922:	f107 0308 	add.w	r3, r7, #8
 800b926:	4619      	mov	r1, r3
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	f7ff fde1 	bl	800b4f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b92e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b932:	2133      	movs	r1, #51	; 0x33
 800b934:	6878      	ldr	r0, [r7, #4]
 800b936:	f000 f8af 	bl	800ba98 <SDMMC_GetCmdResp1>
 800b93a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b93c:	69fb      	ldr	r3, [r7, #28]
}
 800b93e:	4618      	mov	r0, r3
 800b940:	3720      	adds	r7, #32
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}

0800b946 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b946:	b580      	push	{r7, lr}
 800b948:	b088      	sub	sp, #32
 800b94a:	af00      	add	r7, sp, #0
 800b94c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b94e:	2300      	movs	r3, #0
 800b950:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b952:	2302      	movs	r3, #2
 800b954:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b956:	23c0      	movs	r3, #192	; 0xc0
 800b958:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b95a:	2300      	movs	r3, #0
 800b95c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b95e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b962:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b964:	f107 0308 	add.w	r3, r7, #8
 800b968:	4619      	mov	r1, r3
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f7ff fdc0 	bl	800b4f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f000 f97d 	bl	800bc70 <SDMMC_GetCmdResp2>
 800b976:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b978:	69fb      	ldr	r3, [r7, #28]
}
 800b97a:	4618      	mov	r0, r3
 800b97c:	3720      	adds	r7, #32
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd80      	pop	{r7, pc}

0800b982 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b982:	b580      	push	{r7, lr}
 800b984:	b088      	sub	sp, #32
 800b986:	af00      	add	r7, sp, #0
 800b988:	6078      	str	r0, [r7, #4]
 800b98a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b990:	2309      	movs	r3, #9
 800b992:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b994:	23c0      	movs	r3, #192	; 0xc0
 800b996:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b998:	2300      	movs	r3, #0
 800b99a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b99c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b9a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b9a2:	f107 0308 	add.w	r3, r7, #8
 800b9a6:	4619      	mov	r1, r3
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	f7ff fda1 	bl	800b4f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f000 f95e 	bl	800bc70 <SDMMC_GetCmdResp2>
 800b9b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b9b6:	69fb      	ldr	r3, [r7, #28]
}
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	3720      	adds	r7, #32
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}

0800b9c0 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b088      	sub	sp, #32
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
 800b9c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b9ce:	2303      	movs	r3, #3
 800b9d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b9d2:	2340      	movs	r3, #64	; 0x40
 800b9d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b9da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b9de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b9e0:	f107 0308 	add.w	r3, r7, #8
 800b9e4:	4619      	mov	r1, r3
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f7ff fd82 	bl	800b4f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b9ec:	683a      	ldr	r2, [r7, #0]
 800b9ee:	2103      	movs	r1, #3
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f000 f9bd 	bl	800bd70 <SDMMC_GetCmdResp6>
 800b9f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b9f8:	69fb      	ldr	r3, [r7, #28]
}
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	3720      	adds	r7, #32
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	bd80      	pop	{r7, pc}

0800ba02 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ba02:	b580      	push	{r7, lr}
 800ba04:	b088      	sub	sp, #32
 800ba06:	af00      	add	r7, sp, #0
 800ba08:	6078      	str	r0, [r7, #4]
 800ba0a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ba10:	230d      	movs	r3, #13
 800ba12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ba14:	2340      	movs	r3, #64	; 0x40
 800ba16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ba1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba20:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ba22:	f107 0308 	add.w	r3, r7, #8
 800ba26:	4619      	mov	r1, r3
 800ba28:	6878      	ldr	r0, [r7, #4]
 800ba2a:	f7ff fd61 	bl	800b4f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800ba2e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba32:	210d      	movs	r1, #13
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	f000 f82f 	bl	800ba98 <SDMMC_GetCmdResp1>
 800ba3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba3c:	69fb      	ldr	r3, [r7, #28]
}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	3720      	adds	r7, #32
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}
	...

0800ba48 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800ba48:	b490      	push	{r4, r7}
 800ba4a:	b082      	sub	sp, #8
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ba50:	4b0f      	ldr	r3, [pc, #60]	; (800ba90 <SDMMC_GetCmdError+0x48>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	4a0f      	ldr	r2, [pc, #60]	; (800ba94 <SDMMC_GetCmdError+0x4c>)
 800ba56:	fba2 2303 	umull	r2, r3, r2, r3
 800ba5a:	0a5b      	lsrs	r3, r3, #9
 800ba5c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba60:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ba64:	4623      	mov	r3, r4
 800ba66:	1e5c      	subs	r4, r3, #1
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d102      	bne.n	800ba72 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ba6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ba70:	e009      	b.n	800ba86 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d0f2      	beq.n	800ba64 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	22c5      	movs	r2, #197	; 0xc5
 800ba82:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800ba84:	2300      	movs	r3, #0
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	3708      	adds	r7, #8
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bc90      	pop	{r4, r7}
 800ba8e:	4770      	bx	lr
 800ba90:	20000018 	.word	0x20000018
 800ba94:	10624dd3 	.word	0x10624dd3

0800ba98 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ba98:	b590      	push	{r4, r7, lr}
 800ba9a:	b087      	sub	sp, #28
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	60f8      	str	r0, [r7, #12]
 800baa0:	460b      	mov	r3, r1
 800baa2:	607a      	str	r2, [r7, #4]
 800baa4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800baa6:	4b6f      	ldr	r3, [pc, #444]	; (800bc64 <SDMMC_GetCmdResp1+0x1cc>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	4a6f      	ldr	r2, [pc, #444]	; (800bc68 <SDMMC_GetCmdResp1+0x1d0>)
 800baac:	fba2 2303 	umull	r2, r3, r2, r3
 800bab0:	0a5b      	lsrs	r3, r3, #9
 800bab2:	687a      	ldr	r2, [r7, #4]
 800bab4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bab8:	4623      	mov	r3, r4
 800baba:	1e5c      	subs	r4, r3, #1
 800babc:	2b00      	cmp	r3, #0
 800babe:	d102      	bne.n	800bac6 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bac0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bac4:	e0c9      	b.n	800bc5a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800baca:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bacc:	697b      	ldr	r3, [r7, #20]
 800bace:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d0f0      	beq.n	800bab8 <SDMMC_GetCmdResp1+0x20>
 800bad6:	697b      	ldr	r3, [r7, #20]
 800bad8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800badc:	2b00      	cmp	r3, #0
 800bade:	d1eb      	bne.n	800bab8 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bae4:	f003 0304 	and.w	r3, r3, #4
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d004      	beq.n	800baf6 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	2204      	movs	r2, #4
 800baf0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800baf2:	2304      	movs	r3, #4
 800baf4:	e0b1      	b.n	800bc5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bafa:	f003 0301 	and.w	r3, r3, #1
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d004      	beq.n	800bb0c <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	2201      	movs	r2, #1
 800bb06:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb08:	2301      	movs	r3, #1
 800bb0a:	e0a6      	b.n	800bc5a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	22c5      	movs	r2, #197	; 0xc5
 800bb10:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bb12:	68f8      	ldr	r0, [r7, #12]
 800bb14:	f7ff fd16 	bl	800b544 <SDMMC_GetCommandResponse>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	461a      	mov	r2, r3
 800bb1c:	7afb      	ldrb	r3, [r7, #11]
 800bb1e:	4293      	cmp	r3, r2
 800bb20:	d001      	beq.n	800bb26 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb22:	2301      	movs	r3, #1
 800bb24:	e099      	b.n	800bc5a <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bb26:	2100      	movs	r1, #0
 800bb28:	68f8      	ldr	r0, [r7, #12]
 800bb2a:	f7ff fd18 	bl	800b55e <SDMMC_GetResponse>
 800bb2e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bb30:	693a      	ldr	r2, [r7, #16]
 800bb32:	4b4e      	ldr	r3, [pc, #312]	; (800bc6c <SDMMC_GetCmdResp1+0x1d4>)
 800bb34:	4013      	ands	r3, r2
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d101      	bne.n	800bb3e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	e08d      	b.n	800bc5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bb3e:	693b      	ldr	r3, [r7, #16]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	da02      	bge.n	800bb4a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800bb44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bb48:	e087      	b.n	800bc5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bb4a:	693b      	ldr	r3, [r7, #16]
 800bb4c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d001      	beq.n	800bb58 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bb54:	2340      	movs	r3, #64	; 0x40
 800bb56:	e080      	b.n	800bc5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800bb58:	693b      	ldr	r3, [r7, #16]
 800bb5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d001      	beq.n	800bb66 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800bb62:	2380      	movs	r3, #128	; 0x80
 800bb64:	e079      	b.n	800bc5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bb66:	693b      	ldr	r3, [r7, #16]
 800bb68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d002      	beq.n	800bb76 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800bb70:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb74:	e071      	b.n	800bc5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800bb76:	693b      	ldr	r3, [r7, #16]
 800bb78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d002      	beq.n	800bb86 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bb80:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb84:	e069      	b.n	800bc5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800bb86:	693b      	ldr	r3, [r7, #16]
 800bb88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d002      	beq.n	800bb96 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bb90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb94:	e061      	b.n	800bc5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bb96:	693b      	ldr	r3, [r7, #16]
 800bb98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d002      	beq.n	800bba6 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bba0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bba4:	e059      	b.n	800bc5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800bba6:	693b      	ldr	r3, [r7, #16]
 800bba8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d002      	beq.n	800bbb6 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bbb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bbb4:	e051      	b.n	800bc5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800bbb6:	693b      	ldr	r3, [r7, #16]
 800bbb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d002      	beq.n	800bbc6 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bbc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bbc4:	e049      	b.n	800bc5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800bbc6:	693b      	ldr	r3, [r7, #16]
 800bbc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d002      	beq.n	800bbd6 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800bbd0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bbd4:	e041      	b.n	800bc5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d002      	beq.n	800bbe6 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800bbe0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bbe4:	e039      	b.n	800bc5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d002      	beq.n	800bbf6 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bbf0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bbf4:	e031      	b.n	800bc5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bbf6:	693b      	ldr	r3, [r7, #16]
 800bbf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d002      	beq.n	800bc06 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bc00:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bc04:	e029      	b.n	800bc5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bc06:	693b      	ldr	r3, [r7, #16]
 800bc08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d002      	beq.n	800bc16 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bc10:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bc14:	e021      	b.n	800bc5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bc16:	693b      	ldr	r3, [r7, #16]
 800bc18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d002      	beq.n	800bc26 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bc20:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800bc24:	e019      	b.n	800bc5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bc26:	693b      	ldr	r3, [r7, #16]
 800bc28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d002      	beq.n	800bc36 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bc30:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800bc34:	e011      	b.n	800bc5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bc36:	693b      	ldr	r3, [r7, #16]
 800bc38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d002      	beq.n	800bc46 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800bc40:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800bc44:	e009      	b.n	800bc5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800bc46:	693b      	ldr	r3, [r7, #16]
 800bc48:	f003 0308 	and.w	r3, r3, #8
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d002      	beq.n	800bc56 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800bc50:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800bc54:	e001      	b.n	800bc5a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bc56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	371c      	adds	r7, #28
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd90      	pop	{r4, r7, pc}
 800bc62:	bf00      	nop
 800bc64:	20000018 	.word	0x20000018
 800bc68:	10624dd3 	.word	0x10624dd3
 800bc6c:	fdffe008 	.word	0xfdffe008

0800bc70 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800bc70:	b490      	push	{r4, r7}
 800bc72:	b084      	sub	sp, #16
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bc78:	4b1e      	ldr	r3, [pc, #120]	; (800bcf4 <SDMMC_GetCmdResp2+0x84>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	4a1e      	ldr	r2, [pc, #120]	; (800bcf8 <SDMMC_GetCmdResp2+0x88>)
 800bc7e:	fba2 2303 	umull	r2, r3, r2, r3
 800bc82:	0a5b      	lsrs	r3, r3, #9
 800bc84:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc88:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bc8c:	4623      	mov	r3, r4
 800bc8e:	1e5c      	subs	r4, r3, #1
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d102      	bne.n	800bc9a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bc94:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bc98:	e026      	b.n	800bce8 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc9e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d0f0      	beq.n	800bc8c <SDMMC_GetCmdResp2+0x1c>
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d1eb      	bne.n	800bc8c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcb8:	f003 0304 	and.w	r3, r3, #4
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d004      	beq.n	800bcca <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2204      	movs	r2, #4
 800bcc4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bcc6:	2304      	movs	r3, #4
 800bcc8:	e00e      	b.n	800bce8 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcce:	f003 0301 	and.w	r3, r3, #1
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d004      	beq.n	800bce0 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	2201      	movs	r2, #1
 800bcda:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bcdc:	2301      	movs	r3, #1
 800bcde:	e003      	b.n	800bce8 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	22c5      	movs	r2, #197	; 0xc5
 800bce4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bce6:	2300      	movs	r3, #0
}
 800bce8:	4618      	mov	r0, r3
 800bcea:	3710      	adds	r7, #16
 800bcec:	46bd      	mov	sp, r7
 800bcee:	bc90      	pop	{r4, r7}
 800bcf0:	4770      	bx	lr
 800bcf2:	bf00      	nop
 800bcf4:	20000018 	.word	0x20000018
 800bcf8:	10624dd3 	.word	0x10624dd3

0800bcfc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800bcfc:	b490      	push	{r4, r7}
 800bcfe:	b084      	sub	sp, #16
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bd04:	4b18      	ldr	r3, [pc, #96]	; (800bd68 <SDMMC_GetCmdResp3+0x6c>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	4a18      	ldr	r2, [pc, #96]	; (800bd6c <SDMMC_GetCmdResp3+0x70>)
 800bd0a:	fba2 2303 	umull	r2, r3, r2, r3
 800bd0e:	0a5b      	lsrs	r3, r3, #9
 800bd10:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd14:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bd18:	4623      	mov	r3, r4
 800bd1a:	1e5c      	subs	r4, r3, #1
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d102      	bne.n	800bd26 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bd20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bd24:	e01b      	b.n	800bd5e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd2a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d0f0      	beq.n	800bd18 <SDMMC_GetCmdResp3+0x1c>
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d1eb      	bne.n	800bd18 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd44:	f003 0304 	and.w	r3, r3, #4
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d004      	beq.n	800bd56 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2204      	movs	r2, #4
 800bd50:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bd52:	2304      	movs	r3, #4
 800bd54:	e003      	b.n	800bd5e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	22c5      	movs	r2, #197	; 0xc5
 800bd5a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800bd5c:	2300      	movs	r3, #0
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	3710      	adds	r7, #16
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bc90      	pop	{r4, r7}
 800bd66:	4770      	bx	lr
 800bd68:	20000018 	.word	0x20000018
 800bd6c:	10624dd3 	.word	0x10624dd3

0800bd70 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800bd70:	b590      	push	{r4, r7, lr}
 800bd72:	b087      	sub	sp, #28
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	60f8      	str	r0, [r7, #12]
 800bd78:	460b      	mov	r3, r1
 800bd7a:	607a      	str	r2, [r7, #4]
 800bd7c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bd7e:	4b34      	ldr	r3, [pc, #208]	; (800be50 <SDMMC_GetCmdResp6+0xe0>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	4a34      	ldr	r2, [pc, #208]	; (800be54 <SDMMC_GetCmdResp6+0xe4>)
 800bd84:	fba2 2303 	umull	r2, r3, r2, r3
 800bd88:	0a5b      	lsrs	r3, r3, #9
 800bd8a:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd8e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bd92:	4623      	mov	r3, r4
 800bd94:	1e5c      	subs	r4, r3, #1
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d102      	bne.n	800bda0 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bd9a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bd9e:	e052      	b.n	800be46 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bda4:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bda6:	697b      	ldr	r3, [r7, #20]
 800bda8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d0f0      	beq.n	800bd92 <SDMMC_GetCmdResp6+0x22>
 800bdb0:	697b      	ldr	r3, [r7, #20]
 800bdb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d1eb      	bne.n	800bd92 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdbe:	f003 0304 	and.w	r3, r3, #4
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d004      	beq.n	800bdd0 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	2204      	movs	r2, #4
 800bdca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bdcc:	2304      	movs	r3, #4
 800bdce:	e03a      	b.n	800be46 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdd4:	f003 0301 	and.w	r3, r3, #1
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d004      	beq.n	800bde6 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	2201      	movs	r2, #1
 800bde0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bde2:	2301      	movs	r3, #1
 800bde4:	e02f      	b.n	800be46 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bde6:	68f8      	ldr	r0, [r7, #12]
 800bde8:	f7ff fbac 	bl	800b544 <SDMMC_GetCommandResponse>
 800bdec:	4603      	mov	r3, r0
 800bdee:	461a      	mov	r2, r3
 800bdf0:	7afb      	ldrb	r3, [r7, #11]
 800bdf2:	4293      	cmp	r3, r2
 800bdf4:	d001      	beq.n	800bdfa <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bdf6:	2301      	movs	r3, #1
 800bdf8:	e025      	b.n	800be46 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	22c5      	movs	r2, #197	; 0xc5
 800bdfe:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800be00:	2100      	movs	r1, #0
 800be02:	68f8      	ldr	r0, [r7, #12]
 800be04:	f7ff fbab 	bl	800b55e <SDMMC_GetResponse>
 800be08:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800be0a:	693b      	ldr	r3, [r7, #16]
 800be0c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800be10:	2b00      	cmp	r3, #0
 800be12:	d106      	bne.n	800be22 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800be14:	693b      	ldr	r3, [r7, #16]
 800be16:	0c1b      	lsrs	r3, r3, #16
 800be18:	b29a      	uxth	r2, r3
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800be1e:	2300      	movs	r3, #0
 800be20:	e011      	b.n	800be46 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800be22:	693b      	ldr	r3, [r7, #16]
 800be24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d002      	beq.n	800be32 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800be2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800be30:	e009      	b.n	800be46 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800be32:	693b      	ldr	r3, [r7, #16]
 800be34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d002      	beq.n	800be42 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800be3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800be40:	e001      	b.n	800be46 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800be42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800be46:	4618      	mov	r0, r3
 800be48:	371c      	adds	r7, #28
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd90      	pop	{r4, r7, pc}
 800be4e:	bf00      	nop
 800be50:	20000018 	.word	0x20000018
 800be54:	10624dd3 	.word	0x10624dd3

0800be58 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800be58:	b490      	push	{r4, r7}
 800be5a:	b084      	sub	sp, #16
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800be60:	4b21      	ldr	r3, [pc, #132]	; (800bee8 <SDMMC_GetCmdResp7+0x90>)
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	4a21      	ldr	r2, [pc, #132]	; (800beec <SDMMC_GetCmdResp7+0x94>)
 800be66:	fba2 2303 	umull	r2, r3, r2, r3
 800be6a:	0a5b      	lsrs	r3, r3, #9
 800be6c:	f241 3288 	movw	r2, #5000	; 0x1388
 800be70:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800be74:	4623      	mov	r3, r4
 800be76:	1e5c      	subs	r4, r3, #1
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d102      	bne.n	800be82 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800be7c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800be80:	e02c      	b.n	800bedc <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be86:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d0f0      	beq.n	800be74 <SDMMC_GetCmdResp7+0x1c>
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d1eb      	bne.n	800be74 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bea0:	f003 0304 	and.w	r3, r3, #4
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d004      	beq.n	800beb2 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	2204      	movs	r2, #4
 800beac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800beae:	2304      	movs	r3, #4
 800beb0:	e014      	b.n	800bedc <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800beb6:	f003 0301 	and.w	r3, r3, #1
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d004      	beq.n	800bec8 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2201      	movs	r2, #1
 800bec2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bec4:	2301      	movs	r3, #1
 800bec6:	e009      	b.n	800bedc <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800becc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d002      	beq.n	800beda <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2240      	movs	r2, #64	; 0x40
 800bed8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800beda:	2300      	movs	r3, #0
  
}
 800bedc:	4618      	mov	r0, r3
 800bede:	3710      	adds	r7, #16
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bc90      	pop	{r4, r7}
 800bee4:	4770      	bx	lr
 800bee6:	bf00      	nop
 800bee8:	20000018 	.word	0x20000018
 800beec:	10624dd3 	.word	0x10624dd3

0800bef0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800bef4:	4904      	ldr	r1, [pc, #16]	; (800bf08 <MX_FATFS_Init+0x18>)
 800bef6:	4805      	ldr	r0, [pc, #20]	; (800bf0c <MX_FATFS_Init+0x1c>)
 800bef8:	f000 fa96 	bl	800c428 <FATFS_LinkDriver>
 800befc:	4603      	mov	r3, r0
 800befe:	461a      	mov	r2, r3
 800bf00:	4b03      	ldr	r3, [pc, #12]	; (800bf10 <MX_FATFS_Init+0x20>)
 800bf02:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800bf04:	bf00      	nop
 800bf06:	bd80      	pop	{r7, pc}
 800bf08:	2000c6d4 	.word	0x2000c6d4
 800bf0c:	080263d8 	.word	0x080263d8
 800bf10:	2000c6d0 	.word	0x2000c6d0

0800bf14 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b082      	sub	sp, #8
 800bf18:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800bf1e:	f000 f87b 	bl	800c018 <BSP_SD_IsDetected>
 800bf22:	4603      	mov	r3, r0
 800bf24:	2b01      	cmp	r3, #1
 800bf26:	d001      	beq.n	800bf2c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800bf28:	2302      	movs	r3, #2
 800bf2a:	e012      	b.n	800bf52 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800bf2c:	480b      	ldr	r0, [pc, #44]	; (800bf5c <BSP_SD_Init+0x48>)
 800bf2e:	f7fc fae9 	bl	8008504 <HAL_SD_Init>
 800bf32:	4603      	mov	r3, r0
 800bf34:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800bf36:	79fb      	ldrb	r3, [r7, #7]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d109      	bne.n	800bf50 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800bf3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800bf40:	4806      	ldr	r0, [pc, #24]	; (800bf5c <BSP_SD_Init+0x48>)
 800bf42:	f7fc ff2b 	bl	8008d9c <HAL_SD_ConfigWideBusOperation>
 800bf46:	4603      	mov	r3, r0
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d001      	beq.n	800bf50 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800bf50:	79fb      	ldrb	r3, [r7, #7]
}
 800bf52:	4618      	mov	r0, r3
 800bf54:	3708      	adds	r7, #8
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bd80      	pop	{r7, pc}
 800bf5a:	bf00      	nop
 800bf5c:	2000c15c 	.word	0x2000c15c

0800bf60 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b086      	sub	sp, #24
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	60f8      	str	r0, [r7, #12]
 800bf68:	60b9      	str	r1, [r7, #8]
 800bf6a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	68ba      	ldr	r2, [r7, #8]
 800bf74:	68f9      	ldr	r1, [r7, #12]
 800bf76:	4806      	ldr	r0, [pc, #24]	; (800bf90 <BSP_SD_ReadBlocks_DMA+0x30>)
 800bf78:	f7fc fb5c 	bl	8008634 <HAL_SD_ReadBlocks_DMA>
 800bf7c:	4603      	mov	r3, r0
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d001      	beq.n	800bf86 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800bf82:	2301      	movs	r3, #1
 800bf84:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800bf86:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf88:	4618      	mov	r0, r3
 800bf8a:	3718      	adds	r7, #24
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	bd80      	pop	{r7, pc}
 800bf90:	2000c15c 	.word	0x2000c15c

0800bf94 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b086      	sub	sp, #24
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	60f8      	str	r0, [r7, #12]
 800bf9c:	60b9      	str	r1, [r7, #8]
 800bf9e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	68ba      	ldr	r2, [r7, #8]
 800bfa8:	68f9      	ldr	r1, [r7, #12]
 800bfaa:	4806      	ldr	r0, [pc, #24]	; (800bfc4 <BSP_SD_WriteBlocks_DMA+0x30>)
 800bfac:	f7fc fc2e 	bl	800880c <HAL_SD_WriteBlocks_DMA>
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d001      	beq.n	800bfba <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800bfb6:	2301      	movs	r3, #1
 800bfb8:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800bfba:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	3718      	adds	r7, #24
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}
 800bfc4:	2000c15c 	.word	0x2000c15c

0800bfc8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800bfcc:	4805      	ldr	r0, [pc, #20]	; (800bfe4 <BSP_SD_GetCardState+0x1c>)
 800bfce:	f7fc ff61 	bl	8008e94 <HAL_SD_GetCardState>
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	2b04      	cmp	r3, #4
 800bfd6:	bf14      	ite	ne
 800bfd8:	2301      	movne	r3, #1
 800bfda:	2300      	moveq	r3, #0
 800bfdc:	b2db      	uxtb	r3, r3
}
 800bfde:	4618      	mov	r0, r3
 800bfe0:	bd80      	pop	{r7, pc}
 800bfe2:	bf00      	nop
 800bfe4:	2000c15c 	.word	0x2000c15c

0800bfe8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b082      	sub	sp, #8
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800bff0:	6879      	ldr	r1, [r7, #4]
 800bff2:	4803      	ldr	r0, [pc, #12]	; (800c000 <BSP_SD_GetCardInfo+0x18>)
 800bff4:	f7fc fea6 	bl	8008d44 <HAL_SD_GetCardInfo>
}
 800bff8:	bf00      	nop
 800bffa:	3708      	adds	r7, #8
 800bffc:	46bd      	mov	sp, r7
 800bffe:	bd80      	pop	{r7, pc}
 800c000:	2000c15c 	.word	0x2000c15c

0800c004 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b082      	sub	sp, #8
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800c00c:	f000 f9b2 	bl	800c374 <BSP_SD_ReadCpltCallback>
}
 800c010:	bf00      	nop
 800c012:	3708      	adds	r7, #8
 800c014:	46bd      	mov	sp, r7
 800c016:	bd80      	pop	{r7, pc}

0800c018 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b082      	sub	sp, #8
 800c01c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c01e:	2301      	movs	r3, #1
 800c020:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800c022:	f000 f80b 	bl	800c03c <BSP_PlatformIsDetected>
 800c026:	4603      	mov	r3, r0
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d101      	bne.n	800c030 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800c02c:	2300      	movs	r3, #0
 800c02e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800c030:	79fb      	ldrb	r3, [r7, #7]
 800c032:	b2db      	uxtb	r3, r3
}
 800c034:	4618      	mov	r0, r3
 800c036:	3708      	adds	r7, #8
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd80      	pop	{r7, pc}

0800c03c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b082      	sub	sp, #8
 800c040:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800c042:	2301      	movs	r3, #1
 800c044:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800c046:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c04a:	4806      	ldr	r0, [pc, #24]	; (800c064 <BSP_PlatformIsDetected+0x28>)
 800c04c:	f7f9 fe3a 	bl	8005cc4 <HAL_GPIO_ReadPin>
 800c050:	4603      	mov	r3, r0
 800c052:	2b00      	cmp	r3, #0
 800c054:	d001      	beq.n	800c05a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800c056:	2300      	movs	r3, #0
 800c058:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800c05a:	79fb      	ldrb	r3, [r7, #7]
}  
 800c05c:	4618      	mov	r0, r3
 800c05e:	3708      	adds	r7, #8
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}
 800c064:	40020800 	.word	0x40020800

0800c068 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b084      	sub	sp, #16
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800c070:	f000 fa26 	bl	800c4c0 <osKernelSysTick>
 800c074:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800c076:	e006      	b.n	800c086 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c078:	f7ff ffa6 	bl	800bfc8 <BSP_SD_GetCardState>
 800c07c:	4603      	mov	r3, r0
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d101      	bne.n	800c086 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800c082:	2300      	movs	r3, #0
 800c084:	e009      	b.n	800c09a <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800c086:	f000 fa1b 	bl	800c4c0 <osKernelSysTick>
 800c08a:	4602      	mov	r2, r0
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	1ad3      	subs	r3, r2, r3
 800c090:	687a      	ldr	r2, [r7, #4]
 800c092:	429a      	cmp	r2, r3
 800c094:	d8f0      	bhi.n	800c078 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800c096:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c09a:	4618      	mov	r0, r3
 800c09c:	3710      	adds	r7, #16
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bd80      	pop	{r7, pc}
	...

0800c0a4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b082      	sub	sp, #8
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c0ae:	4b0b      	ldr	r3, [pc, #44]	; (800c0dc <SD_CheckStatus+0x38>)
 800c0b0:	2201      	movs	r2, #1
 800c0b2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c0b4:	f7ff ff88 	bl	800bfc8 <BSP_SD_GetCardState>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d107      	bne.n	800c0ce <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c0be:	4b07      	ldr	r3, [pc, #28]	; (800c0dc <SD_CheckStatus+0x38>)
 800c0c0:	781b      	ldrb	r3, [r3, #0]
 800c0c2:	b2db      	uxtb	r3, r3
 800c0c4:	f023 0301 	bic.w	r3, r3, #1
 800c0c8:	b2da      	uxtb	r2, r3
 800c0ca:	4b04      	ldr	r3, [pc, #16]	; (800c0dc <SD_CheckStatus+0x38>)
 800c0cc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c0ce:	4b03      	ldr	r3, [pc, #12]	; (800c0dc <SD_CheckStatus+0x38>)
 800c0d0:	781b      	ldrb	r3, [r3, #0]
 800c0d2:	b2db      	uxtb	r3, r3
}
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	3708      	adds	r7, #8
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}
 800c0dc:	20000021 	.word	0x20000021

0800c0e0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c0e0:	b590      	push	{r4, r7, lr}
 800c0e2:	b087      	sub	sp, #28
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 800c0ea:	4b20      	ldr	r3, [pc, #128]	; (800c16c <SD_initialize+0x8c>)
 800c0ec:	2201      	movs	r2, #1
 800c0ee:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800c0f0:	f000 f9da 	bl	800c4a8 <osKernelRunning>
 800c0f4:	4603      	mov	r3, r0
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d030      	beq.n	800c15c <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800c0fa:	f7ff ff0b 	bl	800bf14 <BSP_SD_Init>
 800c0fe:	4603      	mov	r3, r0
 800c100:	2b00      	cmp	r3, #0
 800c102:	d107      	bne.n	800c114 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800c104:	79fb      	ldrb	r3, [r7, #7]
 800c106:	4618      	mov	r0, r3
 800c108:	f7ff ffcc 	bl	800c0a4 <SD_CheckStatus>
 800c10c:	4603      	mov	r3, r0
 800c10e:	461a      	mov	r2, r3
 800c110:	4b16      	ldr	r3, [pc, #88]	; (800c16c <SD_initialize+0x8c>)
 800c112:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800c114:	4b15      	ldr	r3, [pc, #84]	; (800c16c <SD_initialize+0x8c>)
 800c116:	781b      	ldrb	r3, [r3, #0]
 800c118:	b2db      	uxtb	r3, r3
 800c11a:	2b01      	cmp	r3, #1
 800c11c:	d01e      	beq.n	800c15c <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800c11e:	4b14      	ldr	r3, [pc, #80]	; (800c170 <SD_initialize+0x90>)
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d10e      	bne.n	800c144 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800c126:	4b13      	ldr	r3, [pc, #76]	; (800c174 <SD_initialize+0x94>)
 800c128:	f107 0408 	add.w	r4, r7, #8
 800c12c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c12e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800c132:	f107 0308 	add.w	r3, r7, #8
 800c136:	2100      	movs	r1, #0
 800c138:	4618      	mov	r0, r3
 800c13a:	f000 fa31 	bl	800c5a0 <osMessageCreate>
 800c13e:	4602      	mov	r2, r0
 800c140:	4b0b      	ldr	r3, [pc, #44]	; (800c170 <SD_initialize+0x90>)
 800c142:	601a      	str	r2, [r3, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800c144:	4b0a      	ldr	r3, [pc, #40]	; (800c170 <SD_initialize+0x90>)
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d107      	bne.n	800c15c <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800c14c:	4b07      	ldr	r3, [pc, #28]	; (800c16c <SD_initialize+0x8c>)
 800c14e:	781b      	ldrb	r3, [r3, #0]
 800c150:	b2db      	uxtb	r3, r3
 800c152:	f043 0301 	orr.w	r3, r3, #1
 800c156:	b2da      	uxtb	r2, r3
 800c158:	4b04      	ldr	r3, [pc, #16]	; (800c16c <SD_initialize+0x8c>)
 800c15a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800c15c:	4b03      	ldr	r3, [pc, #12]	; (800c16c <SD_initialize+0x8c>)
 800c15e:	781b      	ldrb	r3, [r3, #0]
 800c160:	b2db      	uxtb	r3, r3
}
 800c162:	4618      	mov	r0, r3
 800c164:	371c      	adds	r7, #28
 800c166:	46bd      	mov	sp, r7
 800c168:	bd90      	pop	{r4, r7, pc}
 800c16a:	bf00      	nop
 800c16c:	20000021 	.word	0x20000021
 800c170:	200003b0 	.word	0x200003b0
 800c174:	08025cc0 	.word	0x08025cc0

0800c178 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b082      	sub	sp, #8
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	4603      	mov	r3, r0
 800c180:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c182:	79fb      	ldrb	r3, [r7, #7]
 800c184:	4618      	mov	r0, r3
 800c186:	f7ff ff8d 	bl	800c0a4 <SD_CheckStatus>
 800c18a:	4603      	mov	r3, r0
}
 800c18c:	4618      	mov	r0, r3
 800c18e:	3708      	adds	r7, #8
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}

0800c194 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b08a      	sub	sp, #40	; 0x28
 800c198:	af00      	add	r7, sp, #0
 800c19a:	60b9      	str	r1, [r7, #8]
 800c19c:	607a      	str	r2, [r7, #4]
 800c19e:	603b      	str	r3, [r7, #0]
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c1a4:	2301      	movs	r3, #1
 800c1a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c1aa:	f247 5030 	movw	r0, #30000	; 0x7530
 800c1ae:	f7ff ff5b 	bl	800c068 <SD_CheckStatusWithTimeout>
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	da02      	bge.n	800c1be <SD_read+0x2a>
  {
    return res;
 800c1b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c1bc:	e032      	b.n	800c224 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800c1be:	683a      	ldr	r2, [r7, #0]
 800c1c0:	6879      	ldr	r1, [r7, #4]
 800c1c2:	68b8      	ldr	r0, [r7, #8]
 800c1c4:	f7ff fecc 	bl	800bf60 <BSP_SD_ReadBlocks_DMA>
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800c1ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d124      	bne.n	800c220 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800c1d6:	4b15      	ldr	r3, [pc, #84]	; (800c22c <SD_read+0x98>)
 800c1d8:	6819      	ldr	r1, [r3, #0]
 800c1da:	f107 0314 	add.w	r3, r7, #20
 800c1de:	f247 5230 	movw	r2, #30000	; 0x7530
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	f000 fa46 	bl	800c674 <osMessageGet>

    if (event.status == osEventMessage)
 800c1e8:	697b      	ldr	r3, [r7, #20]
 800c1ea:	2b10      	cmp	r3, #16
 800c1ec:	d118      	bne.n	800c220 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800c1ee:	69bb      	ldr	r3, [r7, #24]
 800c1f0:	2b01      	cmp	r3, #1
 800c1f2:	d115      	bne.n	800c220 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800c1f4:	f000 f964 	bl	800c4c0 <osKernelSysTick>
 800c1f8:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800c1fa:	e008      	b.n	800c20e <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c1fc:	f7ff fee4 	bl	800bfc8 <BSP_SD_GetCardState>
 800c200:	4603      	mov	r3, r0
 800c202:	2b00      	cmp	r3, #0
 800c204:	d103      	bne.n	800c20e <SD_read+0x7a>
              {
                res = RES_OK;
 800c206:	2300      	movs	r3, #0
 800c208:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800c20c:	e008      	b.n	800c220 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800c20e:	f000 f957 	bl	800c4c0 <osKernelSysTick>
 800c212:	4602      	mov	r2, r0
 800c214:	6a3b      	ldr	r3, [r7, #32]
 800c216:	1ad3      	subs	r3, r2, r3
 800c218:	f247 522f 	movw	r2, #29999	; 0x752f
 800c21c:	4293      	cmp	r3, r2
 800c21e:	d9ed      	bls.n	800c1fc <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800c220:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c224:	4618      	mov	r0, r3
 800c226:	3728      	adds	r7, #40	; 0x28
 800c228:	46bd      	mov	sp, r7
 800c22a:	bd80      	pop	{r7, pc}
 800c22c:	200003b0 	.word	0x200003b0

0800c230 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b08a      	sub	sp, #40	; 0x28
 800c234:	af00      	add	r7, sp, #0
 800c236:	60b9      	str	r1, [r7, #8]
 800c238:	607a      	str	r2, [r7, #4]
 800c23a:	603b      	str	r3, [r7, #0]
 800c23c:	4603      	mov	r3, r0
 800c23e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c240:	2301      	movs	r3, #1
 800c242:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c246:	f247 5030 	movw	r0, #30000	; 0x7530
 800c24a:	f7ff ff0d 	bl	800c068 <SD_CheckStatusWithTimeout>
 800c24e:	4603      	mov	r3, r0
 800c250:	2b00      	cmp	r3, #0
 800c252:	da02      	bge.n	800c25a <SD_write+0x2a>
  {
    return res;
 800c254:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c258:	e02e      	b.n	800c2b8 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800c25a:	683a      	ldr	r2, [r7, #0]
 800c25c:	6879      	ldr	r1, [r7, #4]
 800c25e:	68b8      	ldr	r0, [r7, #8]
 800c260:	f7ff fe98 	bl	800bf94 <BSP_SD_WriteBlocks_DMA>
 800c264:	4603      	mov	r3, r0
 800c266:	2b00      	cmp	r3, #0
 800c268:	d124      	bne.n	800c2b4 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800c26a:	4b15      	ldr	r3, [pc, #84]	; (800c2c0 <SD_write+0x90>)
 800c26c:	6819      	ldr	r1, [r3, #0]
 800c26e:	f107 0314 	add.w	r3, r7, #20
 800c272:	f247 5230 	movw	r2, #30000	; 0x7530
 800c276:	4618      	mov	r0, r3
 800c278:	f000 f9fc 	bl	800c674 <osMessageGet>

    if (event.status == osEventMessage)
 800c27c:	697b      	ldr	r3, [r7, #20]
 800c27e:	2b10      	cmp	r3, #16
 800c280:	d118      	bne.n	800c2b4 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800c282:	69bb      	ldr	r3, [r7, #24]
 800c284:	2b02      	cmp	r3, #2
 800c286:	d115      	bne.n	800c2b4 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800c288:	f000 f91a 	bl	800c4c0 <osKernelSysTick>
 800c28c:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800c28e:	e008      	b.n	800c2a2 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c290:	f7ff fe9a 	bl	800bfc8 <BSP_SD_GetCardState>
 800c294:	4603      	mov	r3, r0
 800c296:	2b00      	cmp	r3, #0
 800c298:	d103      	bne.n	800c2a2 <SD_write+0x72>
          {
            res = RES_OK;
 800c29a:	2300      	movs	r3, #0
 800c29c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800c2a0:	e008      	b.n	800c2b4 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800c2a2:	f000 f90d 	bl	800c4c0 <osKernelSysTick>
 800c2a6:	4602      	mov	r2, r0
 800c2a8:	6a3b      	ldr	r3, [r7, #32]
 800c2aa:	1ad3      	subs	r3, r2, r3
 800c2ac:	f247 522f 	movw	r2, #29999	; 0x752f
 800c2b0:	4293      	cmp	r3, r2
 800c2b2:	d9ed      	bls.n	800c290 <SD_write+0x60>
    }

  }
#endif

  return res;
 800c2b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	3728      	adds	r7, #40	; 0x28
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}
 800c2c0:	200003b0 	.word	0x200003b0

0800c2c4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b08c      	sub	sp, #48	; 0x30
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	603a      	str	r2, [r7, #0]
 800c2ce:	71fb      	strb	r3, [r7, #7]
 800c2d0:	460b      	mov	r3, r1
 800c2d2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c2d4:	2301      	movs	r3, #1
 800c2d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c2da:	4b25      	ldr	r3, [pc, #148]	; (800c370 <SD_ioctl+0xac>)
 800c2dc:	781b      	ldrb	r3, [r3, #0]
 800c2de:	b2db      	uxtb	r3, r3
 800c2e0:	f003 0301 	and.w	r3, r3, #1
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d001      	beq.n	800c2ec <SD_ioctl+0x28>
 800c2e8:	2303      	movs	r3, #3
 800c2ea:	e03c      	b.n	800c366 <SD_ioctl+0xa2>

  switch (cmd)
 800c2ec:	79bb      	ldrb	r3, [r7, #6]
 800c2ee:	2b03      	cmp	r3, #3
 800c2f0:	d834      	bhi.n	800c35c <SD_ioctl+0x98>
 800c2f2:	a201      	add	r2, pc, #4	; (adr r2, 800c2f8 <SD_ioctl+0x34>)
 800c2f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2f8:	0800c309 	.word	0x0800c309
 800c2fc:	0800c311 	.word	0x0800c311
 800c300:	0800c329 	.word	0x0800c329
 800c304:	0800c343 	.word	0x0800c343
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c308:	2300      	movs	r3, #0
 800c30a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c30e:	e028      	b.n	800c362 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c310:	f107 030c 	add.w	r3, r7, #12
 800c314:	4618      	mov	r0, r3
 800c316:	f7ff fe67 	bl	800bfe8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c31a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c320:	2300      	movs	r3, #0
 800c322:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c326:	e01c      	b.n	800c362 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c328:	f107 030c 	add.w	r3, r7, #12
 800c32c:	4618      	mov	r0, r3
 800c32e:	f7ff fe5b 	bl	800bfe8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c334:	b29a      	uxth	r2, r3
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c33a:	2300      	movs	r3, #0
 800c33c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c340:	e00f      	b.n	800c362 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c342:	f107 030c 	add.w	r3, r7, #12
 800c346:	4618      	mov	r0, r3
 800c348:	f7ff fe4e 	bl	800bfe8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c34c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c34e:	0a5a      	lsrs	r2, r3, #9
 800c350:	683b      	ldr	r3, [r7, #0]
 800c352:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c354:	2300      	movs	r3, #0
 800c356:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c35a:	e002      	b.n	800c362 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c35c:	2304      	movs	r3, #4
 800c35e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800c362:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c366:	4618      	mov	r0, r3
 800c368:	3730      	adds	r7, #48	; 0x30
 800c36a:	46bd      	mov	sp, r7
 800c36c:	bd80      	pop	{r7, pc}
 800c36e:	bf00      	nop
 800c370:	20000021 	.word	0x20000021

0800c374 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800c378:	4b04      	ldr	r3, [pc, #16]	; (800c38c <BSP_SD_ReadCpltCallback+0x18>)
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	2200      	movs	r2, #0
 800c37e:	2101      	movs	r1, #1
 800c380:	4618      	mov	r0, r3
 800c382:	f000 f937 	bl	800c5f4 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800c386:	bf00      	nop
 800c388:	bd80      	pop	{r7, pc}
 800c38a:	bf00      	nop
 800c38c:	200003b0 	.word	0x200003b0

0800c390 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c390:	b480      	push	{r7}
 800c392:	b087      	sub	sp, #28
 800c394:	af00      	add	r7, sp, #0
 800c396:	60f8      	str	r0, [r7, #12]
 800c398:	60b9      	str	r1, [r7, #8]
 800c39a:	4613      	mov	r3, r2
 800c39c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c39e:	2301      	movs	r3, #1
 800c3a0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c3a6:	4b1f      	ldr	r3, [pc, #124]	; (800c424 <FATFS_LinkDriverEx+0x94>)
 800c3a8:	7a5b      	ldrb	r3, [r3, #9]
 800c3aa:	b2db      	uxtb	r3, r3
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d131      	bne.n	800c414 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c3b0:	4b1c      	ldr	r3, [pc, #112]	; (800c424 <FATFS_LinkDriverEx+0x94>)
 800c3b2:	7a5b      	ldrb	r3, [r3, #9]
 800c3b4:	b2db      	uxtb	r3, r3
 800c3b6:	461a      	mov	r2, r3
 800c3b8:	4b1a      	ldr	r3, [pc, #104]	; (800c424 <FATFS_LinkDriverEx+0x94>)
 800c3ba:	2100      	movs	r1, #0
 800c3bc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c3be:	4b19      	ldr	r3, [pc, #100]	; (800c424 <FATFS_LinkDriverEx+0x94>)
 800c3c0:	7a5b      	ldrb	r3, [r3, #9]
 800c3c2:	b2db      	uxtb	r3, r3
 800c3c4:	4a17      	ldr	r2, [pc, #92]	; (800c424 <FATFS_LinkDriverEx+0x94>)
 800c3c6:	009b      	lsls	r3, r3, #2
 800c3c8:	4413      	add	r3, r2
 800c3ca:	68fa      	ldr	r2, [r7, #12]
 800c3cc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c3ce:	4b15      	ldr	r3, [pc, #84]	; (800c424 <FATFS_LinkDriverEx+0x94>)
 800c3d0:	7a5b      	ldrb	r3, [r3, #9]
 800c3d2:	b2db      	uxtb	r3, r3
 800c3d4:	461a      	mov	r2, r3
 800c3d6:	4b13      	ldr	r3, [pc, #76]	; (800c424 <FATFS_LinkDriverEx+0x94>)
 800c3d8:	4413      	add	r3, r2
 800c3da:	79fa      	ldrb	r2, [r7, #7]
 800c3dc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c3de:	4b11      	ldr	r3, [pc, #68]	; (800c424 <FATFS_LinkDriverEx+0x94>)
 800c3e0:	7a5b      	ldrb	r3, [r3, #9]
 800c3e2:	b2db      	uxtb	r3, r3
 800c3e4:	1c5a      	adds	r2, r3, #1
 800c3e6:	b2d1      	uxtb	r1, r2
 800c3e8:	4a0e      	ldr	r2, [pc, #56]	; (800c424 <FATFS_LinkDriverEx+0x94>)
 800c3ea:	7251      	strb	r1, [r2, #9]
 800c3ec:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c3ee:	7dbb      	ldrb	r3, [r7, #22]
 800c3f0:	3330      	adds	r3, #48	; 0x30
 800c3f2:	b2da      	uxtb	r2, r3
 800c3f4:	68bb      	ldr	r3, [r7, #8]
 800c3f6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c3f8:	68bb      	ldr	r3, [r7, #8]
 800c3fa:	3301      	adds	r3, #1
 800c3fc:	223a      	movs	r2, #58	; 0x3a
 800c3fe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c400:	68bb      	ldr	r3, [r7, #8]
 800c402:	3302      	adds	r3, #2
 800c404:	222f      	movs	r2, #47	; 0x2f
 800c406:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c408:	68bb      	ldr	r3, [r7, #8]
 800c40a:	3303      	adds	r3, #3
 800c40c:	2200      	movs	r2, #0
 800c40e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c410:	2300      	movs	r3, #0
 800c412:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c414:	7dfb      	ldrb	r3, [r7, #23]
}
 800c416:	4618      	mov	r0, r3
 800c418:	371c      	adds	r7, #28
 800c41a:	46bd      	mov	sp, r7
 800c41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c420:	4770      	bx	lr
 800c422:	bf00      	nop
 800c424:	200003b4 	.word	0x200003b4

0800c428 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b082      	sub	sp, #8
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
 800c430:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c432:	2200      	movs	r2, #0
 800c434:	6839      	ldr	r1, [r7, #0]
 800c436:	6878      	ldr	r0, [r7, #4]
 800c438:	f7ff ffaa 	bl	800c390 <FATFS_LinkDriverEx>
 800c43c:	4603      	mov	r3, r0
}
 800c43e:	4618      	mov	r0, r3
 800c440:	3708      	adds	r7, #8
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}

0800c446 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c446:	b480      	push	{r7}
 800c448:	b085      	sub	sp, #20
 800c44a:	af00      	add	r7, sp, #0
 800c44c:	4603      	mov	r3, r0
 800c44e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c450:	2300      	movs	r3, #0
 800c452:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c454:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c458:	2b84      	cmp	r3, #132	; 0x84
 800c45a:	d005      	beq.n	800c468 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c45c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	4413      	add	r3, r2
 800c464:	3303      	adds	r3, #3
 800c466:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c468:	68fb      	ldr	r3, [r7, #12]
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	3714      	adds	r7, #20
 800c46e:	46bd      	mov	sp, r7
 800c470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c474:	4770      	bx	lr

0800c476 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800c476:	b480      	push	{r7}
 800c478:	b083      	sub	sp, #12
 800c47a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c47c:	f3ef 8305 	mrs	r3, IPSR
 800c480:	607b      	str	r3, [r7, #4]
  return(result);
 800c482:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800c484:	2b00      	cmp	r3, #0
 800c486:	bf14      	ite	ne
 800c488:	2301      	movne	r3, #1
 800c48a:	2300      	moveq	r3, #0
 800c48c:	b2db      	uxtb	r3, r3
}
 800c48e:	4618      	mov	r0, r3
 800c490:	370c      	adds	r7, #12
 800c492:	46bd      	mov	sp, r7
 800c494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c498:	4770      	bx	lr

0800c49a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c49a:	b580      	push	{r7, lr}
 800c49c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c49e:	f001 faff 	bl	800daa0 <vTaskStartScheduler>
  
  return osOK;
 800c4a2:	2300      	movs	r3, #0
}
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	bd80      	pop	{r7, pc}

0800c4a8 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800c4ac:	f001 ff4a 	bl	800e344 <xTaskGetSchedulerState>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	2b01      	cmp	r3, #1
 800c4b4:	d101      	bne.n	800c4ba <osKernelRunning+0x12>
    return 0;
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	e000      	b.n	800c4bc <osKernelRunning+0x14>
  else
    return 1;
 800c4ba:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800c4bc:	4618      	mov	r0, r3
 800c4be:	bd80      	pop	{r7, pc}

0800c4c0 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800c4c4:	f7ff ffd7 	bl	800c476 <inHandlerMode>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d003      	beq.n	800c4d6 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800c4ce:	f001 fc05 	bl	800dcdc <xTaskGetTickCountFromISR>
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	e002      	b.n	800c4dc <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800c4d6:	f001 fbf1 	bl	800dcbc <xTaskGetTickCount>
 800c4da:	4603      	mov	r3, r0
  }
}
 800c4dc:	4618      	mov	r0, r3
 800c4de:	bd80      	pop	{r7, pc}

0800c4e0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c4e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4e2:	b089      	sub	sp, #36	; 0x24
 800c4e4:	af04      	add	r7, sp, #16
 800c4e6:	6078      	str	r0, [r7, #4]
 800c4e8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	695b      	ldr	r3, [r3, #20]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d020      	beq.n	800c534 <osThreadCreate+0x54>
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	699b      	ldr	r3, [r3, #24]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d01c      	beq.n	800c534 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	685c      	ldr	r4, [r3, #4]
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681d      	ldr	r5, [r3, #0]
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	691e      	ldr	r6, [r3, #16]
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c50c:	4618      	mov	r0, r3
 800c50e:	f7ff ff9a 	bl	800c446 <makeFreeRtosPriority>
 800c512:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	695b      	ldr	r3, [r3, #20]
 800c518:	687a      	ldr	r2, [r7, #4]
 800c51a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c51c:	9202      	str	r2, [sp, #8]
 800c51e:	9301      	str	r3, [sp, #4]
 800c520:	9100      	str	r1, [sp, #0]
 800c522:	683b      	ldr	r3, [r7, #0]
 800c524:	4632      	mov	r2, r6
 800c526:	4629      	mov	r1, r5
 800c528:	4620      	mov	r0, r4
 800c52a:	f001 f8e0 	bl	800d6ee <xTaskCreateStatic>
 800c52e:	4603      	mov	r3, r0
 800c530:	60fb      	str	r3, [r7, #12]
 800c532:	e01c      	b.n	800c56e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	685c      	ldr	r4, [r3, #4]
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c540:	b29e      	uxth	r6, r3
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c548:	4618      	mov	r0, r3
 800c54a:	f7ff ff7c 	bl	800c446 <makeFreeRtosPriority>
 800c54e:	4602      	mov	r2, r0
 800c550:	f107 030c 	add.w	r3, r7, #12
 800c554:	9301      	str	r3, [sp, #4]
 800c556:	9200      	str	r2, [sp, #0]
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	4632      	mov	r2, r6
 800c55c:	4629      	mov	r1, r5
 800c55e:	4620      	mov	r0, r4
 800c560:	f001 f925 	bl	800d7ae <xTaskCreate>
 800c564:	4603      	mov	r3, r0
 800c566:	2b01      	cmp	r3, #1
 800c568:	d001      	beq.n	800c56e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c56a:	2300      	movs	r3, #0
 800c56c:	e000      	b.n	800c570 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c56e:	68fb      	ldr	r3, [r7, #12]
}
 800c570:	4618      	mov	r0, r3
 800c572:	3714      	adds	r7, #20
 800c574:	46bd      	mov	sp, r7
 800c576:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c578 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b084      	sub	sp, #16
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d001      	beq.n	800c58e <osDelay+0x16>
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	e000      	b.n	800c590 <osDelay+0x18>
 800c58e:	2301      	movs	r3, #1
 800c590:	4618      	mov	r0, r3
 800c592:	f001 fa4f 	bl	800da34 <vTaskDelay>
  
  return osOK;
 800c596:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c598:	4618      	mov	r0, r3
 800c59a:	3710      	adds	r7, #16
 800c59c:	46bd      	mov	sp, r7
 800c59e:	bd80      	pop	{r7, pc}

0800c5a0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800c5a0:	b590      	push	{r4, r7, lr}
 800c5a2:	b085      	sub	sp, #20
 800c5a4:	af02      	add	r7, sp, #8
 800c5a6:	6078      	str	r0, [r7, #4]
 800c5a8:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	689b      	ldr	r3, [r3, #8]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d012      	beq.n	800c5d8 <osMessageCreate+0x38>
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	68db      	ldr	r3, [r3, #12]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d00e      	beq.n	800c5d8 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	6818      	ldr	r0, [r3, #0]
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	6859      	ldr	r1, [r3, #4]
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	689a      	ldr	r2, [r3, #8]
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	68dc      	ldr	r4, [r3, #12]
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	9300      	str	r3, [sp, #0]
 800c5ce:	4623      	mov	r3, r4
 800c5d0:	f000 f9e2 	bl	800c998 <xQueueGenericCreateStatic>
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	e008      	b.n	800c5ea <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	6818      	ldr	r0, [r3, #0]
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	685b      	ldr	r3, [r3, #4]
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	4619      	mov	r1, r3
 800c5e4:	f000 fa55 	bl	800ca92 <xQueueGenericCreate>
 800c5e8:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	370c      	adds	r7, #12
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bd90      	pop	{r4, r7, pc}
	...

0800c5f4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b086      	sub	sp, #24
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	60f8      	str	r0, [r7, #12]
 800c5fc:	60b9      	str	r1, [r7, #8]
 800c5fe:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800c600:	2300      	movs	r3, #0
 800c602:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800c608:	697b      	ldr	r3, [r7, #20]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d101      	bne.n	800c612 <osMessagePut+0x1e>
    ticks = 1;
 800c60e:	2301      	movs	r3, #1
 800c610:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800c612:	f7ff ff30 	bl	800c476 <inHandlerMode>
 800c616:	4603      	mov	r3, r0
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d018      	beq.n	800c64e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800c61c:	f107 0210 	add.w	r2, r7, #16
 800c620:	f107 0108 	add.w	r1, r7, #8
 800c624:	2300      	movs	r3, #0
 800c626:	68f8      	ldr	r0, [r7, #12]
 800c628:	f000 fb96 	bl	800cd58 <xQueueGenericSendFromISR>
 800c62c:	4603      	mov	r3, r0
 800c62e:	2b01      	cmp	r3, #1
 800c630:	d001      	beq.n	800c636 <osMessagePut+0x42>
      return osErrorOS;
 800c632:	23ff      	movs	r3, #255	; 0xff
 800c634:	e018      	b.n	800c668 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c636:	693b      	ldr	r3, [r7, #16]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d014      	beq.n	800c666 <osMessagePut+0x72>
 800c63c:	4b0c      	ldr	r3, [pc, #48]	; (800c670 <osMessagePut+0x7c>)
 800c63e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c642:	601a      	str	r2, [r3, #0]
 800c644:	f3bf 8f4f 	dsb	sy
 800c648:	f3bf 8f6f 	isb	sy
 800c64c:	e00b      	b.n	800c666 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800c64e:	f107 0108 	add.w	r1, r7, #8
 800c652:	2300      	movs	r3, #0
 800c654:	697a      	ldr	r2, [r7, #20]
 800c656:	68f8      	ldr	r0, [r7, #12]
 800c658:	f000 fa7c 	bl	800cb54 <xQueueGenericSend>
 800c65c:	4603      	mov	r3, r0
 800c65e:	2b01      	cmp	r3, #1
 800c660:	d001      	beq.n	800c666 <osMessagePut+0x72>
      return osErrorOS;
 800c662:	23ff      	movs	r3, #255	; 0xff
 800c664:	e000      	b.n	800c668 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800c666:	2300      	movs	r3, #0
}
 800c668:	4618      	mov	r0, r3
 800c66a:	3718      	adds	r7, #24
 800c66c:	46bd      	mov	sp, r7
 800c66e:	bd80      	pop	{r7, pc}
 800c670:	e000ed04 	.word	0xe000ed04

0800c674 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800c674:	b590      	push	{r4, r7, lr}
 800c676:	b08b      	sub	sp, #44	; 0x2c
 800c678:	af00      	add	r7, sp, #0
 800c67a:	60f8      	str	r0, [r7, #12]
 800c67c:	60b9      	str	r1, [r7, #8]
 800c67e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800c680:	68bb      	ldr	r3, [r7, #8]
 800c682:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800c684:	2300      	movs	r3, #0
 800c686:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800c688:	68bb      	ldr	r3, [r7, #8]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d10a      	bne.n	800c6a4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800c68e:	2380      	movs	r3, #128	; 0x80
 800c690:	617b      	str	r3, [r7, #20]
    return event;
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	461c      	mov	r4, r3
 800c696:	f107 0314 	add.w	r3, r7, #20
 800c69a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c69e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c6a2:	e054      	b.n	800c74e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6b2:	d103      	bne.n	800c6bc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800c6b4:	f04f 33ff 	mov.w	r3, #4294967295
 800c6b8:	627b      	str	r3, [r7, #36]	; 0x24
 800c6ba:	e009      	b.n	800c6d0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d006      	beq.n	800c6d0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800c6c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d101      	bne.n	800c6d0 <osMessageGet+0x5c>
      ticks = 1;
 800c6cc:	2301      	movs	r3, #1
 800c6ce:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800c6d0:	f7ff fed1 	bl	800c476 <inHandlerMode>
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d01c      	beq.n	800c714 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800c6da:	f107 0220 	add.w	r2, r7, #32
 800c6de:	f107 0314 	add.w	r3, r7, #20
 800c6e2:	3304      	adds	r3, #4
 800c6e4:	4619      	mov	r1, r3
 800c6e6:	68b8      	ldr	r0, [r7, #8]
 800c6e8:	f000 fe56 	bl	800d398 <xQueueReceiveFromISR>
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	2b01      	cmp	r3, #1
 800c6f0:	d102      	bne.n	800c6f8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800c6f2:	2310      	movs	r3, #16
 800c6f4:	617b      	str	r3, [r7, #20]
 800c6f6:	e001      	b.n	800c6fc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c6fc:	6a3b      	ldr	r3, [r7, #32]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d01d      	beq.n	800c73e <osMessageGet+0xca>
 800c702:	4b15      	ldr	r3, [pc, #84]	; (800c758 <osMessageGet+0xe4>)
 800c704:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c708:	601a      	str	r2, [r3, #0]
 800c70a:	f3bf 8f4f 	dsb	sy
 800c70e:	f3bf 8f6f 	isb	sy
 800c712:	e014      	b.n	800c73e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800c714:	f107 0314 	add.w	r3, r7, #20
 800c718:	3304      	adds	r3, #4
 800c71a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c71c:	4619      	mov	r1, r3
 800c71e:	68b8      	ldr	r0, [r7, #8]
 800c720:	f000 fc48 	bl	800cfb4 <xQueueReceive>
 800c724:	4603      	mov	r3, r0
 800c726:	2b01      	cmp	r3, #1
 800c728:	d102      	bne.n	800c730 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800c72a:	2310      	movs	r3, #16
 800c72c:	617b      	str	r3, [r7, #20]
 800c72e:	e006      	b.n	800c73e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800c730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c732:	2b00      	cmp	r3, #0
 800c734:	d101      	bne.n	800c73a <osMessageGet+0xc6>
 800c736:	2300      	movs	r3, #0
 800c738:	e000      	b.n	800c73c <osMessageGet+0xc8>
 800c73a:	2340      	movs	r3, #64	; 0x40
 800c73c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	461c      	mov	r4, r3
 800c742:	f107 0314 	add.w	r3, r7, #20
 800c746:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c74a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800c74e:	68f8      	ldr	r0, [r7, #12]
 800c750:	372c      	adds	r7, #44	; 0x2c
 800c752:	46bd      	mov	sp, r7
 800c754:	bd90      	pop	{r4, r7, pc}
 800c756:	bf00      	nop
 800c758:	e000ed04 	.word	0xe000ed04

0800c75c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c75c:	b480      	push	{r7}
 800c75e:	b083      	sub	sp, #12
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	f103 0208 	add.w	r2, r3, #8
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	f04f 32ff 	mov.w	r2, #4294967295
 800c774:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	f103 0208 	add.w	r2, r3, #8
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	f103 0208 	add.w	r2, r3, #8
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	2200      	movs	r2, #0
 800c78e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c790:	bf00      	nop
 800c792:	370c      	adds	r7, #12
 800c794:	46bd      	mov	sp, r7
 800c796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79a:	4770      	bx	lr

0800c79c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c79c:	b480      	push	{r7}
 800c79e:	b083      	sub	sp, #12
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c7aa:	bf00      	nop
 800c7ac:	370c      	adds	r7, #12
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b4:	4770      	bx	lr

0800c7b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c7b6:	b480      	push	{r7}
 800c7b8:	b085      	sub	sp, #20
 800c7ba:	af00      	add	r7, sp, #0
 800c7bc:	6078      	str	r0, [r7, #4]
 800c7be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	685b      	ldr	r3, [r3, #4]
 800c7c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	68fa      	ldr	r2, [r7, #12]
 800c7ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	689a      	ldr	r2, [r3, #8]
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	689b      	ldr	r3, [r3, #8]
 800c7d8:	683a      	ldr	r2, [r7, #0]
 800c7da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	683a      	ldr	r2, [r7, #0]
 800c7e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c7e2:	683b      	ldr	r3, [r7, #0]
 800c7e4:	687a      	ldr	r2, [r7, #4]
 800c7e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	1c5a      	adds	r2, r3, #1
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	601a      	str	r2, [r3, #0]
}
 800c7f2:	bf00      	nop
 800c7f4:	3714      	adds	r7, #20
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fc:	4770      	bx	lr

0800c7fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c7fe:	b480      	push	{r7}
 800c800:	b085      	sub	sp, #20
 800c802:	af00      	add	r7, sp, #0
 800c804:	6078      	str	r0, [r7, #4]
 800c806:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c808:	683b      	ldr	r3, [r7, #0]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c80e:	68bb      	ldr	r3, [r7, #8]
 800c810:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c814:	d103      	bne.n	800c81e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	691b      	ldr	r3, [r3, #16]
 800c81a:	60fb      	str	r3, [r7, #12]
 800c81c:	e00c      	b.n	800c838 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	3308      	adds	r3, #8
 800c822:	60fb      	str	r3, [r7, #12]
 800c824:	e002      	b.n	800c82c <vListInsert+0x2e>
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	685b      	ldr	r3, [r3, #4]
 800c82a:	60fb      	str	r3, [r7, #12]
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	685b      	ldr	r3, [r3, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	68ba      	ldr	r2, [r7, #8]
 800c834:	429a      	cmp	r2, r3
 800c836:	d2f6      	bcs.n	800c826 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	685a      	ldr	r2, [r3, #4]
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	685b      	ldr	r3, [r3, #4]
 800c844:	683a      	ldr	r2, [r7, #0]
 800c846:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	68fa      	ldr	r2, [r7, #12]
 800c84c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	683a      	ldr	r2, [r7, #0]
 800c852:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	687a      	ldr	r2, [r7, #4]
 800c858:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	1c5a      	adds	r2, r3, #1
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	601a      	str	r2, [r3, #0]
}
 800c864:	bf00      	nop
 800c866:	3714      	adds	r7, #20
 800c868:	46bd      	mov	sp, r7
 800c86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86e:	4770      	bx	lr

0800c870 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c870:	b480      	push	{r7}
 800c872:	b085      	sub	sp, #20
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	691b      	ldr	r3, [r3, #16]
 800c87c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	685b      	ldr	r3, [r3, #4]
 800c882:	687a      	ldr	r2, [r7, #4]
 800c884:	6892      	ldr	r2, [r2, #8]
 800c886:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	689b      	ldr	r3, [r3, #8]
 800c88c:	687a      	ldr	r2, [r7, #4]
 800c88e:	6852      	ldr	r2, [r2, #4]
 800c890:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	685b      	ldr	r3, [r3, #4]
 800c896:	687a      	ldr	r2, [r7, #4]
 800c898:	429a      	cmp	r2, r3
 800c89a:	d103      	bne.n	800c8a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	689a      	ldr	r2, [r3, #8]
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	1e5a      	subs	r2, r3, #1
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	681b      	ldr	r3, [r3, #0]
}
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	3714      	adds	r7, #20
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c2:	4770      	bx	lr

0800c8c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b084      	sub	sp, #16
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
 800c8cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d10b      	bne.n	800c8f0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c8d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8dc:	b672      	cpsid	i
 800c8de:	f383 8811 	msr	BASEPRI, r3
 800c8e2:	f3bf 8f6f 	isb	sy
 800c8e6:	f3bf 8f4f 	dsb	sy
 800c8ea:	b662      	cpsie	i
 800c8ec:	60bb      	str	r3, [r7, #8]
 800c8ee:	e7fe      	b.n	800c8ee <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800c8f0:	f002 f86a 	bl	800e9c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	681a      	ldr	r2, [r3, #0]
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8fc:	68f9      	ldr	r1, [r7, #12]
 800c8fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c900:	fb01 f303 	mul.w	r3, r1, r3
 800c904:	441a      	add	r2, r3
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	2200      	movs	r2, #0
 800c90e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	681a      	ldr	r2, [r3, #0]
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	681a      	ldr	r2, [r3, #0]
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c920:	3b01      	subs	r3, #1
 800c922:	68f9      	ldr	r1, [r7, #12]
 800c924:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c926:	fb01 f303 	mul.w	r3, r1, r3
 800c92a:	441a      	add	r2, r3
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	22ff      	movs	r2, #255	; 0xff
 800c934:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	22ff      	movs	r2, #255	; 0xff
 800c93c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d114      	bne.n	800c970 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	691b      	ldr	r3, [r3, #16]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d01a      	beq.n	800c984 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	3310      	adds	r3, #16
 800c952:	4618      	mov	r0, r3
 800c954:	f001 fb36 	bl	800dfc4 <xTaskRemoveFromEventList>
 800c958:	4603      	mov	r3, r0
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d012      	beq.n	800c984 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c95e:	4b0d      	ldr	r3, [pc, #52]	; (800c994 <xQueueGenericReset+0xd0>)
 800c960:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c964:	601a      	str	r2, [r3, #0]
 800c966:	f3bf 8f4f 	dsb	sy
 800c96a:	f3bf 8f6f 	isb	sy
 800c96e:	e009      	b.n	800c984 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	3310      	adds	r3, #16
 800c974:	4618      	mov	r0, r3
 800c976:	f7ff fef1 	bl	800c75c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	3324      	adds	r3, #36	; 0x24
 800c97e:	4618      	mov	r0, r3
 800c980:	f7ff feec 	bl	800c75c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c984:	f002 f852 	bl	800ea2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c988:	2301      	movs	r3, #1
}
 800c98a:	4618      	mov	r0, r3
 800c98c:	3710      	adds	r7, #16
 800c98e:	46bd      	mov	sp, r7
 800c990:	bd80      	pop	{r7, pc}
 800c992:	bf00      	nop
 800c994:	e000ed04 	.word	0xe000ed04

0800c998 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b08e      	sub	sp, #56	; 0x38
 800c99c:	af02      	add	r7, sp, #8
 800c99e:	60f8      	str	r0, [r7, #12]
 800c9a0:	60b9      	str	r1, [r7, #8]
 800c9a2:	607a      	str	r2, [r7, #4]
 800c9a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d10b      	bne.n	800c9c4 <xQueueGenericCreateStatic+0x2c>
 800c9ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9b0:	b672      	cpsid	i
 800c9b2:	f383 8811 	msr	BASEPRI, r3
 800c9b6:	f3bf 8f6f 	isb	sy
 800c9ba:	f3bf 8f4f 	dsb	sy
 800c9be:	b662      	cpsie	i
 800c9c0:	62bb      	str	r3, [r7, #40]	; 0x28
 800c9c2:	e7fe      	b.n	800c9c2 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d10b      	bne.n	800c9e2 <xQueueGenericCreateStatic+0x4a>
 800c9ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ce:	b672      	cpsid	i
 800c9d0:	f383 8811 	msr	BASEPRI, r3
 800c9d4:	f3bf 8f6f 	isb	sy
 800c9d8:	f3bf 8f4f 	dsb	sy
 800c9dc:	b662      	cpsie	i
 800c9de:	627b      	str	r3, [r7, #36]	; 0x24
 800c9e0:	e7fe      	b.n	800c9e0 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d002      	beq.n	800c9ee <xQueueGenericCreateStatic+0x56>
 800c9e8:	68bb      	ldr	r3, [r7, #8]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d001      	beq.n	800c9f2 <xQueueGenericCreateStatic+0x5a>
 800c9ee:	2301      	movs	r3, #1
 800c9f0:	e000      	b.n	800c9f4 <xQueueGenericCreateStatic+0x5c>
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d10b      	bne.n	800ca10 <xQueueGenericCreateStatic+0x78>
 800c9f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9fc:	b672      	cpsid	i
 800c9fe:	f383 8811 	msr	BASEPRI, r3
 800ca02:	f3bf 8f6f 	isb	sy
 800ca06:	f3bf 8f4f 	dsb	sy
 800ca0a:	b662      	cpsie	i
 800ca0c:	623b      	str	r3, [r7, #32]
 800ca0e:	e7fe      	b.n	800ca0e <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d102      	bne.n	800ca1c <xQueueGenericCreateStatic+0x84>
 800ca16:	68bb      	ldr	r3, [r7, #8]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d101      	bne.n	800ca20 <xQueueGenericCreateStatic+0x88>
 800ca1c:	2301      	movs	r3, #1
 800ca1e:	e000      	b.n	800ca22 <xQueueGenericCreateStatic+0x8a>
 800ca20:	2300      	movs	r3, #0
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d10b      	bne.n	800ca3e <xQueueGenericCreateStatic+0xa6>
 800ca26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca2a:	b672      	cpsid	i
 800ca2c:	f383 8811 	msr	BASEPRI, r3
 800ca30:	f3bf 8f6f 	isb	sy
 800ca34:	f3bf 8f4f 	dsb	sy
 800ca38:	b662      	cpsie	i
 800ca3a:	61fb      	str	r3, [r7, #28]
 800ca3c:	e7fe      	b.n	800ca3c <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ca3e:	2348      	movs	r3, #72	; 0x48
 800ca40:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ca42:	697b      	ldr	r3, [r7, #20]
 800ca44:	2b48      	cmp	r3, #72	; 0x48
 800ca46:	d00b      	beq.n	800ca60 <xQueueGenericCreateStatic+0xc8>
 800ca48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca4c:	b672      	cpsid	i
 800ca4e:	f383 8811 	msr	BASEPRI, r3
 800ca52:	f3bf 8f6f 	isb	sy
 800ca56:	f3bf 8f4f 	dsb	sy
 800ca5a:	b662      	cpsie	i
 800ca5c:	61bb      	str	r3, [r7, #24]
 800ca5e:	e7fe      	b.n	800ca5e <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ca60:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ca66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d00d      	beq.n	800ca88 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ca6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca6e:	2201      	movs	r2, #1
 800ca70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ca74:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ca78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca7a:	9300      	str	r3, [sp, #0]
 800ca7c:	4613      	mov	r3, r2
 800ca7e:	687a      	ldr	r2, [r7, #4]
 800ca80:	68b9      	ldr	r1, [r7, #8]
 800ca82:	68f8      	ldr	r0, [r7, #12]
 800ca84:	f000 f846 	bl	800cb14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ca88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	3730      	adds	r7, #48	; 0x30
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd80      	pop	{r7, pc}

0800ca92 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ca92:	b580      	push	{r7, lr}
 800ca94:	b08a      	sub	sp, #40	; 0x28
 800ca96:	af02      	add	r7, sp, #8
 800ca98:	60f8      	str	r0, [r7, #12]
 800ca9a:	60b9      	str	r1, [r7, #8]
 800ca9c:	4613      	mov	r3, r2
 800ca9e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d10b      	bne.n	800cabe <xQueueGenericCreate+0x2c>
 800caa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caaa:	b672      	cpsid	i
 800caac:	f383 8811 	msr	BASEPRI, r3
 800cab0:	f3bf 8f6f 	isb	sy
 800cab4:	f3bf 8f4f 	dsb	sy
 800cab8:	b662      	cpsie	i
 800caba:	613b      	str	r3, [r7, #16]
 800cabc:	e7fe      	b.n	800cabc <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800cabe:	68bb      	ldr	r3, [r7, #8]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d102      	bne.n	800caca <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800cac4:	2300      	movs	r3, #0
 800cac6:	61fb      	str	r3, [r7, #28]
 800cac8:	e004      	b.n	800cad4 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	68ba      	ldr	r2, [r7, #8]
 800cace:	fb02 f303 	mul.w	r3, r2, r3
 800cad2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cad4:	69fb      	ldr	r3, [r7, #28]
 800cad6:	3348      	adds	r3, #72	; 0x48
 800cad8:	4618      	mov	r0, r3
 800cada:	f002 f897 	bl	800ec0c <pvPortMalloc>
 800cade:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cae0:	69bb      	ldr	r3, [r7, #24]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d011      	beq.n	800cb0a <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800cae6:	69bb      	ldr	r3, [r7, #24]
 800cae8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800caea:	697b      	ldr	r3, [r7, #20]
 800caec:	3348      	adds	r3, #72	; 0x48
 800caee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800caf0:	69bb      	ldr	r3, [r7, #24]
 800caf2:	2200      	movs	r2, #0
 800caf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800caf8:	79fa      	ldrb	r2, [r7, #7]
 800cafa:	69bb      	ldr	r3, [r7, #24]
 800cafc:	9300      	str	r3, [sp, #0]
 800cafe:	4613      	mov	r3, r2
 800cb00:	697a      	ldr	r2, [r7, #20]
 800cb02:	68b9      	ldr	r1, [r7, #8]
 800cb04:	68f8      	ldr	r0, [r7, #12]
 800cb06:	f000 f805 	bl	800cb14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cb0a:	69bb      	ldr	r3, [r7, #24]
	}
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	3720      	adds	r7, #32
 800cb10:	46bd      	mov	sp, r7
 800cb12:	bd80      	pop	{r7, pc}

0800cb14 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b084      	sub	sp, #16
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	60f8      	str	r0, [r7, #12]
 800cb1c:	60b9      	str	r1, [r7, #8]
 800cb1e:	607a      	str	r2, [r7, #4]
 800cb20:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cb22:	68bb      	ldr	r3, [r7, #8]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d103      	bne.n	800cb30 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cb28:	69bb      	ldr	r3, [r7, #24]
 800cb2a:	69ba      	ldr	r2, [r7, #24]
 800cb2c:	601a      	str	r2, [r3, #0]
 800cb2e:	e002      	b.n	800cb36 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cb30:	69bb      	ldr	r3, [r7, #24]
 800cb32:	687a      	ldr	r2, [r7, #4]
 800cb34:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cb36:	69bb      	ldr	r3, [r7, #24]
 800cb38:	68fa      	ldr	r2, [r7, #12]
 800cb3a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cb3c:	69bb      	ldr	r3, [r7, #24]
 800cb3e:	68ba      	ldr	r2, [r7, #8]
 800cb40:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cb42:	2101      	movs	r1, #1
 800cb44:	69b8      	ldr	r0, [r7, #24]
 800cb46:	f7ff febd 	bl	800c8c4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cb4a:	bf00      	nop
 800cb4c:	3710      	adds	r7, #16
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd80      	pop	{r7, pc}
	...

0800cb54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b08e      	sub	sp, #56	; 0x38
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	60f8      	str	r0, [r7, #12]
 800cb5c:	60b9      	str	r1, [r7, #8]
 800cb5e:	607a      	str	r2, [r7, #4]
 800cb60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cb62:	2300      	movs	r3, #0
 800cb64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cb6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d10b      	bne.n	800cb88 <xQueueGenericSend+0x34>
 800cb70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb74:	b672      	cpsid	i
 800cb76:	f383 8811 	msr	BASEPRI, r3
 800cb7a:	f3bf 8f6f 	isb	sy
 800cb7e:	f3bf 8f4f 	dsb	sy
 800cb82:	b662      	cpsie	i
 800cb84:	62bb      	str	r3, [r7, #40]	; 0x28
 800cb86:	e7fe      	b.n	800cb86 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cb88:	68bb      	ldr	r3, [r7, #8]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d103      	bne.n	800cb96 <xQueueGenericSend+0x42>
 800cb8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d101      	bne.n	800cb9a <xQueueGenericSend+0x46>
 800cb96:	2301      	movs	r3, #1
 800cb98:	e000      	b.n	800cb9c <xQueueGenericSend+0x48>
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d10b      	bne.n	800cbb8 <xQueueGenericSend+0x64>
 800cba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cba4:	b672      	cpsid	i
 800cba6:	f383 8811 	msr	BASEPRI, r3
 800cbaa:	f3bf 8f6f 	isb	sy
 800cbae:	f3bf 8f4f 	dsb	sy
 800cbb2:	b662      	cpsie	i
 800cbb4:	627b      	str	r3, [r7, #36]	; 0x24
 800cbb6:	e7fe      	b.n	800cbb6 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	2b02      	cmp	r3, #2
 800cbbc:	d103      	bne.n	800cbc6 <xQueueGenericSend+0x72>
 800cbbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbc2:	2b01      	cmp	r3, #1
 800cbc4:	d101      	bne.n	800cbca <xQueueGenericSend+0x76>
 800cbc6:	2301      	movs	r3, #1
 800cbc8:	e000      	b.n	800cbcc <xQueueGenericSend+0x78>
 800cbca:	2300      	movs	r3, #0
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d10b      	bne.n	800cbe8 <xQueueGenericSend+0x94>
 800cbd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbd4:	b672      	cpsid	i
 800cbd6:	f383 8811 	msr	BASEPRI, r3
 800cbda:	f3bf 8f6f 	isb	sy
 800cbde:	f3bf 8f4f 	dsb	sy
 800cbe2:	b662      	cpsie	i
 800cbe4:	623b      	str	r3, [r7, #32]
 800cbe6:	e7fe      	b.n	800cbe6 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cbe8:	f001 fbac 	bl	800e344 <xTaskGetSchedulerState>
 800cbec:	4603      	mov	r3, r0
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d102      	bne.n	800cbf8 <xQueueGenericSend+0xa4>
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d101      	bne.n	800cbfc <xQueueGenericSend+0xa8>
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	e000      	b.n	800cbfe <xQueueGenericSend+0xaa>
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d10b      	bne.n	800cc1a <xQueueGenericSend+0xc6>
 800cc02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc06:	b672      	cpsid	i
 800cc08:	f383 8811 	msr	BASEPRI, r3
 800cc0c:	f3bf 8f6f 	isb	sy
 800cc10:	f3bf 8f4f 	dsb	sy
 800cc14:	b662      	cpsie	i
 800cc16:	61fb      	str	r3, [r7, #28]
 800cc18:	e7fe      	b.n	800cc18 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cc1a:	f001 fed5 	bl	800e9c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cc1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc26:	429a      	cmp	r2, r3
 800cc28:	d302      	bcc.n	800cc30 <xQueueGenericSend+0xdc>
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	2b02      	cmp	r3, #2
 800cc2e:	d129      	bne.n	800cc84 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cc30:	683a      	ldr	r2, [r7, #0]
 800cc32:	68b9      	ldr	r1, [r7, #8]
 800cc34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cc36:	f000 fc4a 	bl	800d4ce <prvCopyDataToQueue>
 800cc3a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d010      	beq.n	800cc66 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cc44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc46:	3324      	adds	r3, #36	; 0x24
 800cc48:	4618      	mov	r0, r3
 800cc4a:	f001 f9bb 	bl	800dfc4 <xTaskRemoveFromEventList>
 800cc4e:	4603      	mov	r3, r0
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d013      	beq.n	800cc7c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cc54:	4b3f      	ldr	r3, [pc, #252]	; (800cd54 <xQueueGenericSend+0x200>)
 800cc56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc5a:	601a      	str	r2, [r3, #0]
 800cc5c:	f3bf 8f4f 	dsb	sy
 800cc60:	f3bf 8f6f 	isb	sy
 800cc64:	e00a      	b.n	800cc7c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cc66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d007      	beq.n	800cc7c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cc6c:	4b39      	ldr	r3, [pc, #228]	; (800cd54 <xQueueGenericSend+0x200>)
 800cc6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc72:	601a      	str	r2, [r3, #0]
 800cc74:	f3bf 8f4f 	dsb	sy
 800cc78:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cc7c:	f001 fed6 	bl	800ea2c <vPortExitCritical>
				return pdPASS;
 800cc80:	2301      	movs	r3, #1
 800cc82:	e063      	b.n	800cd4c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d103      	bne.n	800cc92 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cc8a:	f001 fecf 	bl	800ea2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cc8e:	2300      	movs	r3, #0
 800cc90:	e05c      	b.n	800cd4c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cc92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d106      	bne.n	800cca6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cc98:	f107 0314 	add.w	r3, r7, #20
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	f001 f9f5 	bl	800e08c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cca2:	2301      	movs	r3, #1
 800cca4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cca6:	f001 fec1 	bl	800ea2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ccaa:	f000 ff5b 	bl	800db64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ccae:	f001 fe8b 	bl	800e9c8 <vPortEnterCritical>
 800ccb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ccb8:	b25b      	sxtb	r3, r3
 800ccba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccbe:	d103      	bne.n	800ccc8 <xQueueGenericSend+0x174>
 800ccc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ccc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ccce:	b25b      	sxtb	r3, r3
 800ccd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccd4:	d103      	bne.n	800ccde <xQueueGenericSend+0x18a>
 800ccd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccd8:	2200      	movs	r2, #0
 800ccda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ccde:	f001 fea5 	bl	800ea2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cce2:	1d3a      	adds	r2, r7, #4
 800cce4:	f107 0314 	add.w	r3, r7, #20
 800cce8:	4611      	mov	r1, r2
 800ccea:	4618      	mov	r0, r3
 800ccec:	f001 f9e4 	bl	800e0b8 <xTaskCheckForTimeOut>
 800ccf0:	4603      	mov	r3, r0
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d124      	bne.n	800cd40 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ccf6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ccf8:	f000 fce1 	bl	800d6be <prvIsQueueFull>
 800ccfc:	4603      	mov	r3, r0
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d018      	beq.n	800cd34 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cd02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd04:	3310      	adds	r3, #16
 800cd06:	687a      	ldr	r2, [r7, #4]
 800cd08:	4611      	mov	r1, r2
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	f001 f934 	bl	800df78 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cd10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd12:	f000 fc6c 	bl	800d5ee <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cd16:	f000 ff33 	bl	800db80 <xTaskResumeAll>
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	f47f af7c 	bne.w	800cc1a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800cd22:	4b0c      	ldr	r3, [pc, #48]	; (800cd54 <xQueueGenericSend+0x200>)
 800cd24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd28:	601a      	str	r2, [r3, #0]
 800cd2a:	f3bf 8f4f 	dsb	sy
 800cd2e:	f3bf 8f6f 	isb	sy
 800cd32:	e772      	b.n	800cc1a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cd34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd36:	f000 fc5a 	bl	800d5ee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cd3a:	f000 ff21 	bl	800db80 <xTaskResumeAll>
 800cd3e:	e76c      	b.n	800cc1a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cd40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd42:	f000 fc54 	bl	800d5ee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cd46:	f000 ff1b 	bl	800db80 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cd4a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	3738      	adds	r7, #56	; 0x38
 800cd50:	46bd      	mov	sp, r7
 800cd52:	bd80      	pop	{r7, pc}
 800cd54:	e000ed04 	.word	0xe000ed04

0800cd58 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b08e      	sub	sp, #56	; 0x38
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	60f8      	str	r0, [r7, #12]
 800cd60:	60b9      	str	r1, [r7, #8]
 800cd62:	607a      	str	r2, [r7, #4]
 800cd64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cd6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d10b      	bne.n	800cd88 <xQueueGenericSendFromISR+0x30>
 800cd70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd74:	b672      	cpsid	i
 800cd76:	f383 8811 	msr	BASEPRI, r3
 800cd7a:	f3bf 8f6f 	isb	sy
 800cd7e:	f3bf 8f4f 	dsb	sy
 800cd82:	b662      	cpsie	i
 800cd84:	627b      	str	r3, [r7, #36]	; 0x24
 800cd86:	e7fe      	b.n	800cd86 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd88:	68bb      	ldr	r3, [r7, #8]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d103      	bne.n	800cd96 <xQueueGenericSendFromISR+0x3e>
 800cd8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d101      	bne.n	800cd9a <xQueueGenericSendFromISR+0x42>
 800cd96:	2301      	movs	r3, #1
 800cd98:	e000      	b.n	800cd9c <xQueueGenericSendFromISR+0x44>
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d10b      	bne.n	800cdb8 <xQueueGenericSendFromISR+0x60>
 800cda0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cda4:	b672      	cpsid	i
 800cda6:	f383 8811 	msr	BASEPRI, r3
 800cdaa:	f3bf 8f6f 	isb	sy
 800cdae:	f3bf 8f4f 	dsb	sy
 800cdb2:	b662      	cpsie	i
 800cdb4:	623b      	str	r3, [r7, #32]
 800cdb6:	e7fe      	b.n	800cdb6 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cdb8:	683b      	ldr	r3, [r7, #0]
 800cdba:	2b02      	cmp	r3, #2
 800cdbc:	d103      	bne.n	800cdc6 <xQueueGenericSendFromISR+0x6e>
 800cdbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdc2:	2b01      	cmp	r3, #1
 800cdc4:	d101      	bne.n	800cdca <xQueueGenericSendFromISR+0x72>
 800cdc6:	2301      	movs	r3, #1
 800cdc8:	e000      	b.n	800cdcc <xQueueGenericSendFromISR+0x74>
 800cdca:	2300      	movs	r3, #0
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d10b      	bne.n	800cde8 <xQueueGenericSendFromISR+0x90>
 800cdd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdd4:	b672      	cpsid	i
 800cdd6:	f383 8811 	msr	BASEPRI, r3
 800cdda:	f3bf 8f6f 	isb	sy
 800cdde:	f3bf 8f4f 	dsb	sy
 800cde2:	b662      	cpsie	i
 800cde4:	61fb      	str	r3, [r7, #28]
 800cde6:	e7fe      	b.n	800cde6 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cde8:	f001 fece 	bl	800eb88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cdec:	f3ef 8211 	mrs	r2, BASEPRI
 800cdf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdf4:	b672      	cpsid	i
 800cdf6:	f383 8811 	msr	BASEPRI, r3
 800cdfa:	f3bf 8f6f 	isb	sy
 800cdfe:	f3bf 8f4f 	dsb	sy
 800ce02:	b662      	cpsie	i
 800ce04:	61ba      	str	r2, [r7, #24]
 800ce06:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ce08:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ce0a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ce0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce14:	429a      	cmp	r2, r3
 800ce16:	d302      	bcc.n	800ce1e <xQueueGenericSendFromISR+0xc6>
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	2b02      	cmp	r3, #2
 800ce1c:	d12c      	bne.n	800ce78 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ce1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ce24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ce28:	683a      	ldr	r2, [r7, #0]
 800ce2a:	68b9      	ldr	r1, [r7, #8]
 800ce2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce2e:	f000 fb4e 	bl	800d4ce <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ce32:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800ce36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce3a:	d112      	bne.n	800ce62 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ce3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d016      	beq.n	800ce72 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ce44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce46:	3324      	adds	r3, #36	; 0x24
 800ce48:	4618      	mov	r0, r3
 800ce4a:	f001 f8bb 	bl	800dfc4 <xTaskRemoveFromEventList>
 800ce4e:	4603      	mov	r3, r0
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d00e      	beq.n	800ce72 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d00b      	beq.n	800ce72 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2201      	movs	r2, #1
 800ce5e:	601a      	str	r2, [r3, #0]
 800ce60:	e007      	b.n	800ce72 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ce62:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ce66:	3301      	adds	r3, #1
 800ce68:	b2db      	uxtb	r3, r3
 800ce6a:	b25a      	sxtb	r2, r3
 800ce6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ce72:	2301      	movs	r3, #1
 800ce74:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800ce76:	e001      	b.n	800ce7c <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ce78:	2300      	movs	r3, #0
 800ce7a:	637b      	str	r3, [r7, #52]	; 0x34
 800ce7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce7e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ce80:	693b      	ldr	r3, [r7, #16]
 800ce82:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ce86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ce88:	4618      	mov	r0, r3
 800ce8a:	3738      	adds	r7, #56	; 0x38
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	bd80      	pop	{r7, pc}

0800ce90 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b08e      	sub	sp, #56	; 0x38
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
 800ce98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ce9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d10b      	bne.n	800cebc <xQueueGiveFromISR+0x2c>
	__asm volatile
 800cea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cea8:	b672      	cpsid	i
 800ceaa:	f383 8811 	msr	BASEPRI, r3
 800ceae:	f3bf 8f6f 	isb	sy
 800ceb2:	f3bf 8f4f 	dsb	sy
 800ceb6:	b662      	cpsie	i
 800ceb8:	623b      	str	r3, [r7, #32]
 800ceba:	e7fe      	b.n	800ceba <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d00b      	beq.n	800cedc <xQueueGiveFromISR+0x4c>
 800cec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cec8:	b672      	cpsid	i
 800ceca:	f383 8811 	msr	BASEPRI, r3
 800cece:	f3bf 8f6f 	isb	sy
 800ced2:	f3bf 8f4f 	dsb	sy
 800ced6:	b662      	cpsie	i
 800ced8:	61fb      	str	r3, [r7, #28]
 800ceda:	e7fe      	b.n	800ceda <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800cedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d103      	bne.n	800ceec <xQueueGiveFromISR+0x5c>
 800cee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cee6:	689b      	ldr	r3, [r3, #8]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d101      	bne.n	800cef0 <xQueueGiveFromISR+0x60>
 800ceec:	2301      	movs	r3, #1
 800ceee:	e000      	b.n	800cef2 <xQueueGiveFromISR+0x62>
 800cef0:	2300      	movs	r3, #0
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d10b      	bne.n	800cf0e <xQueueGiveFromISR+0x7e>
 800cef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cefa:	b672      	cpsid	i
 800cefc:	f383 8811 	msr	BASEPRI, r3
 800cf00:	f3bf 8f6f 	isb	sy
 800cf04:	f3bf 8f4f 	dsb	sy
 800cf08:	b662      	cpsie	i
 800cf0a:	61bb      	str	r3, [r7, #24]
 800cf0c:	e7fe      	b.n	800cf0c <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cf0e:	f001 fe3b 	bl	800eb88 <vPortValidateInterruptPriority>
	__asm volatile
 800cf12:	f3ef 8211 	mrs	r2, BASEPRI
 800cf16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf1a:	b672      	cpsid	i
 800cf1c:	f383 8811 	msr	BASEPRI, r3
 800cf20:	f3bf 8f6f 	isb	sy
 800cf24:	f3bf 8f4f 	dsb	sy
 800cf28:	b662      	cpsie	i
 800cf2a:	617a      	str	r2, [r7, #20]
 800cf2c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800cf2e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cf30:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cf32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf36:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800cf38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf3e:	429a      	cmp	r2, r3
 800cf40:	d22b      	bcs.n	800cf9a <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cf42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cf48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cf4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf4e:	1c5a      	adds	r2, r3, #1
 800cf50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf52:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cf54:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cf58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf5c:	d112      	bne.n	800cf84 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cf5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d016      	beq.n	800cf94 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cf66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf68:	3324      	adds	r3, #36	; 0x24
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	f001 f82a 	bl	800dfc4 <xTaskRemoveFromEventList>
 800cf70:	4603      	mov	r3, r0
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d00e      	beq.n	800cf94 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cf76:	683b      	ldr	r3, [r7, #0]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d00b      	beq.n	800cf94 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	2201      	movs	r2, #1
 800cf80:	601a      	str	r2, [r3, #0]
 800cf82:	e007      	b.n	800cf94 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cf84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf88:	3301      	adds	r3, #1
 800cf8a:	b2db      	uxtb	r3, r3
 800cf8c:	b25a      	sxtb	r2, r3
 800cf8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cf94:	2301      	movs	r3, #1
 800cf96:	637b      	str	r3, [r7, #52]	; 0x34
 800cf98:	e001      	b.n	800cf9e <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	637b      	str	r3, [r7, #52]	; 0x34
 800cf9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfa0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cfa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cfaa:	4618      	mov	r0, r3
 800cfac:	3738      	adds	r7, #56	; 0x38
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	bd80      	pop	{r7, pc}
	...

0800cfb4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b08c      	sub	sp, #48	; 0x30
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	60f8      	str	r0, [r7, #12]
 800cfbc:	60b9      	str	r1, [r7, #8]
 800cfbe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cfc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d10b      	bne.n	800cfe6 <xQueueReceive+0x32>
	__asm volatile
 800cfce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfd2:	b672      	cpsid	i
 800cfd4:	f383 8811 	msr	BASEPRI, r3
 800cfd8:	f3bf 8f6f 	isb	sy
 800cfdc:	f3bf 8f4f 	dsb	sy
 800cfe0:	b662      	cpsie	i
 800cfe2:	623b      	str	r3, [r7, #32]
 800cfe4:	e7fe      	b.n	800cfe4 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cfe6:	68bb      	ldr	r3, [r7, #8]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d103      	bne.n	800cff4 <xQueueReceive+0x40>
 800cfec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d101      	bne.n	800cff8 <xQueueReceive+0x44>
 800cff4:	2301      	movs	r3, #1
 800cff6:	e000      	b.n	800cffa <xQueueReceive+0x46>
 800cff8:	2300      	movs	r3, #0
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d10b      	bne.n	800d016 <xQueueReceive+0x62>
 800cffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d002:	b672      	cpsid	i
 800d004:	f383 8811 	msr	BASEPRI, r3
 800d008:	f3bf 8f6f 	isb	sy
 800d00c:	f3bf 8f4f 	dsb	sy
 800d010:	b662      	cpsie	i
 800d012:	61fb      	str	r3, [r7, #28]
 800d014:	e7fe      	b.n	800d014 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d016:	f001 f995 	bl	800e344 <xTaskGetSchedulerState>
 800d01a:	4603      	mov	r3, r0
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d102      	bne.n	800d026 <xQueueReceive+0x72>
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d101      	bne.n	800d02a <xQueueReceive+0x76>
 800d026:	2301      	movs	r3, #1
 800d028:	e000      	b.n	800d02c <xQueueReceive+0x78>
 800d02a:	2300      	movs	r3, #0
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d10b      	bne.n	800d048 <xQueueReceive+0x94>
 800d030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d034:	b672      	cpsid	i
 800d036:	f383 8811 	msr	BASEPRI, r3
 800d03a:	f3bf 8f6f 	isb	sy
 800d03e:	f3bf 8f4f 	dsb	sy
 800d042:	b662      	cpsie	i
 800d044:	61bb      	str	r3, [r7, #24]
 800d046:	e7fe      	b.n	800d046 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d048:	f001 fcbe 	bl	800e9c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d04c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d04e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d050:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d054:	2b00      	cmp	r3, #0
 800d056:	d01f      	beq.n	800d098 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d058:	68b9      	ldr	r1, [r7, #8]
 800d05a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d05c:	f000 faa1 	bl	800d5a2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d062:	1e5a      	subs	r2, r3, #1
 800d064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d066:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d06a:	691b      	ldr	r3, [r3, #16]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d00f      	beq.n	800d090 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d072:	3310      	adds	r3, #16
 800d074:	4618      	mov	r0, r3
 800d076:	f000 ffa5 	bl	800dfc4 <xTaskRemoveFromEventList>
 800d07a:	4603      	mov	r3, r0
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d007      	beq.n	800d090 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d080:	4b3c      	ldr	r3, [pc, #240]	; (800d174 <xQueueReceive+0x1c0>)
 800d082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d086:	601a      	str	r2, [r3, #0]
 800d088:	f3bf 8f4f 	dsb	sy
 800d08c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d090:	f001 fccc 	bl	800ea2c <vPortExitCritical>
				return pdPASS;
 800d094:	2301      	movs	r3, #1
 800d096:	e069      	b.n	800d16c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d103      	bne.n	800d0a6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d09e:	f001 fcc5 	bl	800ea2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	e062      	b.n	800d16c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d0a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d106      	bne.n	800d0ba <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d0ac:	f107 0310 	add.w	r3, r7, #16
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	f000 ffeb 	bl	800e08c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d0ba:	f001 fcb7 	bl	800ea2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d0be:	f000 fd51 	bl	800db64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d0c2:	f001 fc81 	bl	800e9c8 <vPortEnterCritical>
 800d0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d0cc:	b25b      	sxtb	r3, r3
 800d0ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0d2:	d103      	bne.n	800d0dc <xQueueReceive+0x128>
 800d0d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d0e2:	b25b      	sxtb	r3, r3
 800d0e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0e8:	d103      	bne.n	800d0f2 <xQueueReceive+0x13e>
 800d0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d0f2:	f001 fc9b 	bl	800ea2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d0f6:	1d3a      	adds	r2, r7, #4
 800d0f8:	f107 0310 	add.w	r3, r7, #16
 800d0fc:	4611      	mov	r1, r2
 800d0fe:	4618      	mov	r0, r3
 800d100:	f000 ffda 	bl	800e0b8 <xTaskCheckForTimeOut>
 800d104:	4603      	mov	r3, r0
 800d106:	2b00      	cmp	r3, #0
 800d108:	d123      	bne.n	800d152 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d10a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d10c:	f000 fac1 	bl	800d692 <prvIsQueueEmpty>
 800d110:	4603      	mov	r3, r0
 800d112:	2b00      	cmp	r3, #0
 800d114:	d017      	beq.n	800d146 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d118:	3324      	adds	r3, #36	; 0x24
 800d11a:	687a      	ldr	r2, [r7, #4]
 800d11c:	4611      	mov	r1, r2
 800d11e:	4618      	mov	r0, r3
 800d120:	f000 ff2a 	bl	800df78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d124:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d126:	f000 fa62 	bl	800d5ee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d12a:	f000 fd29 	bl	800db80 <xTaskResumeAll>
 800d12e:	4603      	mov	r3, r0
 800d130:	2b00      	cmp	r3, #0
 800d132:	d189      	bne.n	800d048 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800d134:	4b0f      	ldr	r3, [pc, #60]	; (800d174 <xQueueReceive+0x1c0>)
 800d136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d13a:	601a      	str	r2, [r3, #0]
 800d13c:	f3bf 8f4f 	dsb	sy
 800d140:	f3bf 8f6f 	isb	sy
 800d144:	e780      	b.n	800d048 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d146:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d148:	f000 fa51 	bl	800d5ee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d14c:	f000 fd18 	bl	800db80 <xTaskResumeAll>
 800d150:	e77a      	b.n	800d048 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d152:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d154:	f000 fa4b 	bl	800d5ee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d158:	f000 fd12 	bl	800db80 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d15c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d15e:	f000 fa98 	bl	800d692 <prvIsQueueEmpty>
 800d162:	4603      	mov	r3, r0
 800d164:	2b00      	cmp	r3, #0
 800d166:	f43f af6f 	beq.w	800d048 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d16a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d16c:	4618      	mov	r0, r3
 800d16e:	3730      	adds	r7, #48	; 0x30
 800d170:	46bd      	mov	sp, r7
 800d172:	bd80      	pop	{r7, pc}
 800d174:	e000ed04 	.word	0xe000ed04

0800d178 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b08e      	sub	sp, #56	; 0x38
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
 800d180:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d182:	2300      	movs	r3, #0
 800d184:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d18a:	2300      	movs	r3, #0
 800d18c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d18e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d190:	2b00      	cmp	r3, #0
 800d192:	d10b      	bne.n	800d1ac <xQueueSemaphoreTake+0x34>
 800d194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d198:	b672      	cpsid	i
 800d19a:	f383 8811 	msr	BASEPRI, r3
 800d19e:	f3bf 8f6f 	isb	sy
 800d1a2:	f3bf 8f4f 	dsb	sy
 800d1a6:	b662      	cpsie	i
 800d1a8:	623b      	str	r3, [r7, #32]
 800d1aa:	e7fe      	b.n	800d1aa <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d1ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d00b      	beq.n	800d1cc <xQueueSemaphoreTake+0x54>
 800d1b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1b8:	b672      	cpsid	i
 800d1ba:	f383 8811 	msr	BASEPRI, r3
 800d1be:	f3bf 8f6f 	isb	sy
 800d1c2:	f3bf 8f4f 	dsb	sy
 800d1c6:	b662      	cpsie	i
 800d1c8:	61fb      	str	r3, [r7, #28]
 800d1ca:	e7fe      	b.n	800d1ca <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d1cc:	f001 f8ba 	bl	800e344 <xTaskGetSchedulerState>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d102      	bne.n	800d1dc <xQueueSemaphoreTake+0x64>
 800d1d6:	683b      	ldr	r3, [r7, #0]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d101      	bne.n	800d1e0 <xQueueSemaphoreTake+0x68>
 800d1dc:	2301      	movs	r3, #1
 800d1de:	e000      	b.n	800d1e2 <xQueueSemaphoreTake+0x6a>
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d10b      	bne.n	800d1fe <xQueueSemaphoreTake+0x86>
 800d1e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ea:	b672      	cpsid	i
 800d1ec:	f383 8811 	msr	BASEPRI, r3
 800d1f0:	f3bf 8f6f 	isb	sy
 800d1f4:	f3bf 8f4f 	dsb	sy
 800d1f8:	b662      	cpsie	i
 800d1fa:	61bb      	str	r3, [r7, #24]
 800d1fc:	e7fe      	b.n	800d1fc <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d1fe:	f001 fbe3 	bl	800e9c8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d206:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d024      	beq.n	800d258 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d210:	1e5a      	subs	r2, r3, #1
 800d212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d214:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d104      	bne.n	800d228 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d21e:	f001 fa53 	bl	800e6c8 <pvTaskIncrementMutexHeldCount>
 800d222:	4602      	mov	r2, r0
 800d224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d226:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d22a:	691b      	ldr	r3, [r3, #16]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d00f      	beq.n	800d250 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d232:	3310      	adds	r3, #16
 800d234:	4618      	mov	r0, r3
 800d236:	f000 fec5 	bl	800dfc4 <xTaskRemoveFromEventList>
 800d23a:	4603      	mov	r3, r0
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d007      	beq.n	800d250 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d240:	4b54      	ldr	r3, [pc, #336]	; (800d394 <xQueueSemaphoreTake+0x21c>)
 800d242:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d246:	601a      	str	r2, [r3, #0]
 800d248:	f3bf 8f4f 	dsb	sy
 800d24c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d250:	f001 fbec 	bl	800ea2c <vPortExitCritical>
				return pdPASS;
 800d254:	2301      	movs	r3, #1
 800d256:	e098      	b.n	800d38a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d258:	683b      	ldr	r3, [r7, #0]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d112      	bne.n	800d284 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d260:	2b00      	cmp	r3, #0
 800d262:	d00b      	beq.n	800d27c <xQueueSemaphoreTake+0x104>
 800d264:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d268:	b672      	cpsid	i
 800d26a:	f383 8811 	msr	BASEPRI, r3
 800d26e:	f3bf 8f6f 	isb	sy
 800d272:	f3bf 8f4f 	dsb	sy
 800d276:	b662      	cpsie	i
 800d278:	617b      	str	r3, [r7, #20]
 800d27a:	e7fe      	b.n	800d27a <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d27c:	f001 fbd6 	bl	800ea2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d280:	2300      	movs	r3, #0
 800d282:	e082      	b.n	800d38a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d286:	2b00      	cmp	r3, #0
 800d288:	d106      	bne.n	800d298 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d28a:	f107 030c 	add.w	r3, r7, #12
 800d28e:	4618      	mov	r0, r3
 800d290:	f000 fefc 	bl	800e08c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d294:	2301      	movs	r3, #1
 800d296:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d298:	f001 fbc8 	bl	800ea2c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d29c:	f000 fc62 	bl	800db64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d2a0:	f001 fb92 	bl	800e9c8 <vPortEnterCritical>
 800d2a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d2aa:	b25b      	sxtb	r3, r3
 800d2ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2b0:	d103      	bne.n	800d2ba <xQueueSemaphoreTake+0x142>
 800d2b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d2ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d2c0:	b25b      	sxtb	r3, r3
 800d2c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2c6:	d103      	bne.n	800d2d0 <xQueueSemaphoreTake+0x158>
 800d2c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d2d0:	f001 fbac 	bl	800ea2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d2d4:	463a      	mov	r2, r7
 800d2d6:	f107 030c 	add.w	r3, r7, #12
 800d2da:	4611      	mov	r1, r2
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f000 feeb 	bl	800e0b8 <xTaskCheckForTimeOut>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d132      	bne.n	800d34e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d2e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d2ea:	f000 f9d2 	bl	800d692 <prvIsQueueEmpty>
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d026      	beq.n	800d342 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d2f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d109      	bne.n	800d310 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800d2fc:	f001 fb64 	bl	800e9c8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d302:	689b      	ldr	r3, [r3, #8]
 800d304:	4618      	mov	r0, r3
 800d306:	f001 f83b 	bl	800e380 <xTaskPriorityInherit>
 800d30a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d30c:	f001 fb8e 	bl	800ea2c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d312:	3324      	adds	r3, #36	; 0x24
 800d314:	683a      	ldr	r2, [r7, #0]
 800d316:	4611      	mov	r1, r2
 800d318:	4618      	mov	r0, r3
 800d31a:	f000 fe2d 	bl	800df78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d31e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d320:	f000 f965 	bl	800d5ee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d324:	f000 fc2c 	bl	800db80 <xTaskResumeAll>
 800d328:	4603      	mov	r3, r0
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	f47f af67 	bne.w	800d1fe <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800d330:	4b18      	ldr	r3, [pc, #96]	; (800d394 <xQueueSemaphoreTake+0x21c>)
 800d332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d336:	601a      	str	r2, [r3, #0]
 800d338:	f3bf 8f4f 	dsb	sy
 800d33c:	f3bf 8f6f 	isb	sy
 800d340:	e75d      	b.n	800d1fe <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d342:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d344:	f000 f953 	bl	800d5ee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d348:	f000 fc1a 	bl	800db80 <xTaskResumeAll>
 800d34c:	e757      	b.n	800d1fe <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d34e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d350:	f000 f94d 	bl	800d5ee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d354:	f000 fc14 	bl	800db80 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d358:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d35a:	f000 f99a 	bl	800d692 <prvIsQueueEmpty>
 800d35e:	4603      	mov	r3, r0
 800d360:	2b00      	cmp	r3, #0
 800d362:	f43f af4c 	beq.w	800d1fe <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d00d      	beq.n	800d388 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800d36c:	f001 fb2c 	bl	800e9c8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d370:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d372:	f000 f894 	bl	800d49e <prvGetDisinheritPriorityAfterTimeout>
 800d376:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d37a:	689b      	ldr	r3, [r3, #8]
 800d37c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d37e:	4618      	mov	r0, r3
 800d380:	f001 f906 	bl	800e590 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d384:	f001 fb52 	bl	800ea2c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d388:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d38a:	4618      	mov	r0, r3
 800d38c:	3738      	adds	r7, #56	; 0x38
 800d38e:	46bd      	mov	sp, r7
 800d390:	bd80      	pop	{r7, pc}
 800d392:	bf00      	nop
 800d394:	e000ed04 	.word	0xe000ed04

0800d398 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	b08e      	sub	sp, #56	; 0x38
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	60f8      	str	r0, [r7, #12]
 800d3a0:	60b9      	str	r1, [r7, #8]
 800d3a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d3a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d10b      	bne.n	800d3c6 <xQueueReceiveFromISR+0x2e>
 800d3ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3b2:	b672      	cpsid	i
 800d3b4:	f383 8811 	msr	BASEPRI, r3
 800d3b8:	f3bf 8f6f 	isb	sy
 800d3bc:	f3bf 8f4f 	dsb	sy
 800d3c0:	b662      	cpsie	i
 800d3c2:	623b      	str	r3, [r7, #32]
 800d3c4:	e7fe      	b.n	800d3c4 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d3c6:	68bb      	ldr	r3, [r7, #8]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d103      	bne.n	800d3d4 <xQueueReceiveFromISR+0x3c>
 800d3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d101      	bne.n	800d3d8 <xQueueReceiveFromISR+0x40>
 800d3d4:	2301      	movs	r3, #1
 800d3d6:	e000      	b.n	800d3da <xQueueReceiveFromISR+0x42>
 800d3d8:	2300      	movs	r3, #0
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d10b      	bne.n	800d3f6 <xQueueReceiveFromISR+0x5e>
 800d3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3e2:	b672      	cpsid	i
 800d3e4:	f383 8811 	msr	BASEPRI, r3
 800d3e8:	f3bf 8f6f 	isb	sy
 800d3ec:	f3bf 8f4f 	dsb	sy
 800d3f0:	b662      	cpsie	i
 800d3f2:	61fb      	str	r3, [r7, #28]
 800d3f4:	e7fe      	b.n	800d3f4 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d3f6:	f001 fbc7 	bl	800eb88 <vPortValidateInterruptPriority>
	__asm volatile
 800d3fa:	f3ef 8211 	mrs	r2, BASEPRI
 800d3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d402:	b672      	cpsid	i
 800d404:	f383 8811 	msr	BASEPRI, r3
 800d408:	f3bf 8f6f 	isb	sy
 800d40c:	f3bf 8f4f 	dsb	sy
 800d410:	b662      	cpsie	i
 800d412:	61ba      	str	r2, [r7, #24]
 800d414:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d416:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d418:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d41a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d41c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d41e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d422:	2b00      	cmp	r3, #0
 800d424:	d02f      	beq.n	800d486 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d428:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d42c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d430:	68b9      	ldr	r1, [r7, #8]
 800d432:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d434:	f000 f8b5 	bl	800d5a2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d43a:	1e5a      	subs	r2, r3, #1
 800d43c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d43e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d440:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d444:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d448:	d112      	bne.n	800d470 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d44c:	691b      	ldr	r3, [r3, #16]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d016      	beq.n	800d480 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d454:	3310      	adds	r3, #16
 800d456:	4618      	mov	r0, r3
 800d458:	f000 fdb4 	bl	800dfc4 <xTaskRemoveFromEventList>
 800d45c:	4603      	mov	r3, r0
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d00e      	beq.n	800d480 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d00b      	beq.n	800d480 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	2201      	movs	r2, #1
 800d46c:	601a      	str	r2, [r3, #0]
 800d46e:	e007      	b.n	800d480 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d470:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d474:	3301      	adds	r3, #1
 800d476:	b2db      	uxtb	r3, r3
 800d478:	b25a      	sxtb	r2, r3
 800d47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d47c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d480:	2301      	movs	r3, #1
 800d482:	637b      	str	r3, [r7, #52]	; 0x34
 800d484:	e001      	b.n	800d48a <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 800d486:	2300      	movs	r3, #0
 800d488:	637b      	str	r3, [r7, #52]	; 0x34
 800d48a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d48c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d48e:	693b      	ldr	r3, [r7, #16]
 800d490:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d496:	4618      	mov	r0, r3
 800d498:	3738      	adds	r7, #56	; 0x38
 800d49a:	46bd      	mov	sp, r7
 800d49c:	bd80      	pop	{r7, pc}

0800d49e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d49e:	b480      	push	{r7}
 800d4a0:	b085      	sub	sp, #20
 800d4a2:	af00      	add	r7, sp, #0
 800d4a4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d006      	beq.n	800d4bc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	f1c3 0307 	rsb	r3, r3, #7
 800d4b8:	60fb      	str	r3, [r7, #12]
 800d4ba:	e001      	b.n	800d4c0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d4bc:	2300      	movs	r3, #0
 800d4be:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d4c0:	68fb      	ldr	r3, [r7, #12]
	}
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	3714      	adds	r7, #20
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4cc:	4770      	bx	lr

0800d4ce <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d4ce:	b580      	push	{r7, lr}
 800d4d0:	b086      	sub	sp, #24
 800d4d2:	af00      	add	r7, sp, #0
 800d4d4:	60f8      	str	r0, [r7, #12]
 800d4d6:	60b9      	str	r1, [r7, #8]
 800d4d8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d4da:	2300      	movs	r3, #0
 800d4dc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4e2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d10d      	bne.n	800d508 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d14d      	bne.n	800d590 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	689b      	ldr	r3, [r3, #8]
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	f000 ffc1 	bl	800e480 <xTaskPriorityDisinherit>
 800d4fe:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	2200      	movs	r2, #0
 800d504:	609a      	str	r2, [r3, #8]
 800d506:	e043      	b.n	800d590 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d119      	bne.n	800d542 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	6858      	ldr	r0, [r3, #4]
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d516:	461a      	mov	r2, r3
 800d518:	68b9      	ldr	r1, [r7, #8]
 800d51a:	f017 fc03 	bl	8024d24 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	685a      	ldr	r2, [r3, #4]
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d526:	441a      	add	r2, r3
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	685a      	ldr	r2, [r3, #4]
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	689b      	ldr	r3, [r3, #8]
 800d534:	429a      	cmp	r2, r3
 800d536:	d32b      	bcc.n	800d590 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	681a      	ldr	r2, [r3, #0]
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	605a      	str	r2, [r3, #4]
 800d540:	e026      	b.n	800d590 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	68d8      	ldr	r0, [r3, #12]
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d54a:	461a      	mov	r2, r3
 800d54c:	68b9      	ldr	r1, [r7, #8]
 800d54e:	f017 fbe9 	bl	8024d24 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	68da      	ldr	r2, [r3, #12]
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d55a:	425b      	negs	r3, r3
 800d55c:	441a      	add	r2, r3
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	68da      	ldr	r2, [r3, #12]
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	429a      	cmp	r2, r3
 800d56c:	d207      	bcs.n	800d57e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	689a      	ldr	r2, [r3, #8]
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d576:	425b      	negs	r3, r3
 800d578:	441a      	add	r2, r3
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	2b02      	cmp	r3, #2
 800d582:	d105      	bne.n	800d590 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d584:	693b      	ldr	r3, [r7, #16]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d002      	beq.n	800d590 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d58a:	693b      	ldr	r3, [r7, #16]
 800d58c:	3b01      	subs	r3, #1
 800d58e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d590:	693b      	ldr	r3, [r7, #16]
 800d592:	1c5a      	adds	r2, r3, #1
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d598:	697b      	ldr	r3, [r7, #20]
}
 800d59a:	4618      	mov	r0, r3
 800d59c:	3718      	adds	r7, #24
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	bd80      	pop	{r7, pc}

0800d5a2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d5a2:	b580      	push	{r7, lr}
 800d5a4:	b082      	sub	sp, #8
 800d5a6:	af00      	add	r7, sp, #0
 800d5a8:	6078      	str	r0, [r7, #4]
 800d5aa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d018      	beq.n	800d5e6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	68da      	ldr	r2, [r3, #12]
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5bc:	441a      	add	r2, r3
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	68da      	ldr	r2, [r3, #12]
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	689b      	ldr	r3, [r3, #8]
 800d5ca:	429a      	cmp	r2, r3
 800d5cc:	d303      	bcc.n	800d5d6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	681a      	ldr	r2, [r3, #0]
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	68d9      	ldr	r1, [r3, #12]
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5de:	461a      	mov	r2, r3
 800d5e0:	6838      	ldr	r0, [r7, #0]
 800d5e2:	f017 fb9f 	bl	8024d24 <memcpy>
	}
}
 800d5e6:	bf00      	nop
 800d5e8:	3708      	adds	r7, #8
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	bd80      	pop	{r7, pc}

0800d5ee <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d5ee:	b580      	push	{r7, lr}
 800d5f0:	b084      	sub	sp, #16
 800d5f2:	af00      	add	r7, sp, #0
 800d5f4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d5f6:	f001 f9e7 	bl	800e9c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d600:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d602:	e011      	b.n	800d628 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d012      	beq.n	800d632 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	3324      	adds	r3, #36	; 0x24
 800d610:	4618      	mov	r0, r3
 800d612:	f000 fcd7 	bl	800dfc4 <xTaskRemoveFromEventList>
 800d616:	4603      	mov	r3, r0
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d001      	beq.n	800d620 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d61c:	f000 fdb0 	bl	800e180 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d620:	7bfb      	ldrb	r3, [r7, #15]
 800d622:	3b01      	subs	r3, #1
 800d624:	b2db      	uxtb	r3, r3
 800d626:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d628:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	dce9      	bgt.n	800d604 <prvUnlockQueue+0x16>
 800d630:	e000      	b.n	800d634 <prvUnlockQueue+0x46>
					break;
 800d632:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	22ff      	movs	r2, #255	; 0xff
 800d638:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d63c:	f001 f9f6 	bl	800ea2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d640:	f001 f9c2 	bl	800e9c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d64a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d64c:	e011      	b.n	800d672 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	691b      	ldr	r3, [r3, #16]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d012      	beq.n	800d67c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	3310      	adds	r3, #16
 800d65a:	4618      	mov	r0, r3
 800d65c:	f000 fcb2 	bl	800dfc4 <xTaskRemoveFromEventList>
 800d660:	4603      	mov	r3, r0
 800d662:	2b00      	cmp	r3, #0
 800d664:	d001      	beq.n	800d66a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d666:	f000 fd8b 	bl	800e180 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d66a:	7bbb      	ldrb	r3, [r7, #14]
 800d66c:	3b01      	subs	r3, #1
 800d66e:	b2db      	uxtb	r3, r3
 800d670:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d672:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d676:	2b00      	cmp	r3, #0
 800d678:	dce9      	bgt.n	800d64e <prvUnlockQueue+0x60>
 800d67a:	e000      	b.n	800d67e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d67c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	22ff      	movs	r2, #255	; 0xff
 800d682:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d686:	f001 f9d1 	bl	800ea2c <vPortExitCritical>
}
 800d68a:	bf00      	nop
 800d68c:	3710      	adds	r7, #16
 800d68e:	46bd      	mov	sp, r7
 800d690:	bd80      	pop	{r7, pc}

0800d692 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d692:	b580      	push	{r7, lr}
 800d694:	b084      	sub	sp, #16
 800d696:	af00      	add	r7, sp, #0
 800d698:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d69a:	f001 f995 	bl	800e9c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d102      	bne.n	800d6ac <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d6a6:	2301      	movs	r3, #1
 800d6a8:	60fb      	str	r3, [r7, #12]
 800d6aa:	e001      	b.n	800d6b0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d6b0:	f001 f9bc 	bl	800ea2c <vPortExitCritical>

	return xReturn;
 800d6b4:	68fb      	ldr	r3, [r7, #12]
}
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	3710      	adds	r7, #16
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	bd80      	pop	{r7, pc}

0800d6be <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d6be:	b580      	push	{r7, lr}
 800d6c0:	b084      	sub	sp, #16
 800d6c2:	af00      	add	r7, sp, #0
 800d6c4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d6c6:	f001 f97f 	bl	800e9c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6d2:	429a      	cmp	r2, r3
 800d6d4:	d102      	bne.n	800d6dc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d6d6:	2301      	movs	r3, #1
 800d6d8:	60fb      	str	r3, [r7, #12]
 800d6da:	e001      	b.n	800d6e0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d6dc:	2300      	movs	r3, #0
 800d6de:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d6e0:	f001 f9a4 	bl	800ea2c <vPortExitCritical>

	return xReturn;
 800d6e4:	68fb      	ldr	r3, [r7, #12]
}
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	3710      	adds	r7, #16
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	bd80      	pop	{r7, pc}

0800d6ee <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d6ee:	b580      	push	{r7, lr}
 800d6f0:	b08e      	sub	sp, #56	; 0x38
 800d6f2:	af04      	add	r7, sp, #16
 800d6f4:	60f8      	str	r0, [r7, #12]
 800d6f6:	60b9      	str	r1, [r7, #8]
 800d6f8:	607a      	str	r2, [r7, #4]
 800d6fa:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d6fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d10b      	bne.n	800d71a <xTaskCreateStatic+0x2c>
	__asm volatile
 800d702:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d706:	b672      	cpsid	i
 800d708:	f383 8811 	msr	BASEPRI, r3
 800d70c:	f3bf 8f6f 	isb	sy
 800d710:	f3bf 8f4f 	dsb	sy
 800d714:	b662      	cpsie	i
 800d716:	623b      	str	r3, [r7, #32]
 800d718:	e7fe      	b.n	800d718 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800d71a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d10b      	bne.n	800d738 <xTaskCreateStatic+0x4a>
 800d720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d724:	b672      	cpsid	i
 800d726:	f383 8811 	msr	BASEPRI, r3
 800d72a:	f3bf 8f6f 	isb	sy
 800d72e:	f3bf 8f4f 	dsb	sy
 800d732:	b662      	cpsie	i
 800d734:	61fb      	str	r3, [r7, #28]
 800d736:	e7fe      	b.n	800d736 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d738:	2358      	movs	r3, #88	; 0x58
 800d73a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d73c:	693b      	ldr	r3, [r7, #16]
 800d73e:	2b58      	cmp	r3, #88	; 0x58
 800d740:	d00b      	beq.n	800d75a <xTaskCreateStatic+0x6c>
 800d742:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d746:	b672      	cpsid	i
 800d748:	f383 8811 	msr	BASEPRI, r3
 800d74c:	f3bf 8f6f 	isb	sy
 800d750:	f3bf 8f4f 	dsb	sy
 800d754:	b662      	cpsie	i
 800d756:	61bb      	str	r3, [r7, #24]
 800d758:	e7fe      	b.n	800d758 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d75a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d75c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d01e      	beq.n	800d7a0 <xTaskCreateStatic+0xb2>
 800d762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d764:	2b00      	cmp	r3, #0
 800d766:	d01b      	beq.n	800d7a0 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d76a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d76e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d770:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d774:	2202      	movs	r2, #2
 800d776:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d77a:	2300      	movs	r3, #0
 800d77c:	9303      	str	r3, [sp, #12]
 800d77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d780:	9302      	str	r3, [sp, #8]
 800d782:	f107 0314 	add.w	r3, r7, #20
 800d786:	9301      	str	r3, [sp, #4]
 800d788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d78a:	9300      	str	r3, [sp, #0]
 800d78c:	683b      	ldr	r3, [r7, #0]
 800d78e:	687a      	ldr	r2, [r7, #4]
 800d790:	68b9      	ldr	r1, [r7, #8]
 800d792:	68f8      	ldr	r0, [r7, #12]
 800d794:	f000 f850 	bl	800d838 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d798:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d79a:	f000 f8e1 	bl	800d960 <prvAddNewTaskToReadyList>
 800d79e:	e001      	b.n	800d7a4 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d7a4:	697b      	ldr	r3, [r7, #20]
	}
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	3728      	adds	r7, #40	; 0x28
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	bd80      	pop	{r7, pc}

0800d7ae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d7ae:	b580      	push	{r7, lr}
 800d7b0:	b08c      	sub	sp, #48	; 0x30
 800d7b2:	af04      	add	r7, sp, #16
 800d7b4:	60f8      	str	r0, [r7, #12]
 800d7b6:	60b9      	str	r1, [r7, #8]
 800d7b8:	603b      	str	r3, [r7, #0]
 800d7ba:	4613      	mov	r3, r2
 800d7bc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d7be:	88fb      	ldrh	r3, [r7, #6]
 800d7c0:	009b      	lsls	r3, r3, #2
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f001 fa22 	bl	800ec0c <pvPortMalloc>
 800d7c8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d7ca:	697b      	ldr	r3, [r7, #20]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d00e      	beq.n	800d7ee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d7d0:	2058      	movs	r0, #88	; 0x58
 800d7d2:	f001 fa1b 	bl	800ec0c <pvPortMalloc>
 800d7d6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d7d8:	69fb      	ldr	r3, [r7, #28]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d003      	beq.n	800d7e6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d7de:	69fb      	ldr	r3, [r7, #28]
 800d7e0:	697a      	ldr	r2, [r7, #20]
 800d7e2:	631a      	str	r2, [r3, #48]	; 0x30
 800d7e4:	e005      	b.n	800d7f2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d7e6:	6978      	ldr	r0, [r7, #20]
 800d7e8:	f001 fadc 	bl	800eda4 <vPortFree>
 800d7ec:	e001      	b.n	800d7f2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d7f2:	69fb      	ldr	r3, [r7, #28]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d017      	beq.n	800d828 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d7f8:	69fb      	ldr	r3, [r7, #28]
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d800:	88fa      	ldrh	r2, [r7, #6]
 800d802:	2300      	movs	r3, #0
 800d804:	9303      	str	r3, [sp, #12]
 800d806:	69fb      	ldr	r3, [r7, #28]
 800d808:	9302      	str	r3, [sp, #8]
 800d80a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d80c:	9301      	str	r3, [sp, #4]
 800d80e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d810:	9300      	str	r3, [sp, #0]
 800d812:	683b      	ldr	r3, [r7, #0]
 800d814:	68b9      	ldr	r1, [r7, #8]
 800d816:	68f8      	ldr	r0, [r7, #12]
 800d818:	f000 f80e 	bl	800d838 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d81c:	69f8      	ldr	r0, [r7, #28]
 800d81e:	f000 f89f 	bl	800d960 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d822:	2301      	movs	r3, #1
 800d824:	61bb      	str	r3, [r7, #24]
 800d826:	e002      	b.n	800d82e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d828:	f04f 33ff 	mov.w	r3, #4294967295
 800d82c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d82e:	69bb      	ldr	r3, [r7, #24]
	}
 800d830:	4618      	mov	r0, r3
 800d832:	3720      	adds	r7, #32
 800d834:	46bd      	mov	sp, r7
 800d836:	bd80      	pop	{r7, pc}

0800d838 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b088      	sub	sp, #32
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	60f8      	str	r0, [r7, #12]
 800d840:	60b9      	str	r1, [r7, #8]
 800d842:	607a      	str	r2, [r7, #4]
 800d844:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d848:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	009b      	lsls	r3, r3, #2
 800d84e:	461a      	mov	r2, r3
 800d850:	21a5      	movs	r1, #165	; 0xa5
 800d852:	f017 fa72 	bl	8024d3a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d858:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d85a:	6879      	ldr	r1, [r7, #4]
 800d85c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800d860:	440b      	add	r3, r1
 800d862:	009b      	lsls	r3, r3, #2
 800d864:	4413      	add	r3, r2
 800d866:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d868:	69bb      	ldr	r3, [r7, #24]
 800d86a:	f023 0307 	bic.w	r3, r3, #7
 800d86e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d870:	69bb      	ldr	r3, [r7, #24]
 800d872:	f003 0307 	and.w	r3, r3, #7
 800d876:	2b00      	cmp	r3, #0
 800d878:	d00b      	beq.n	800d892 <prvInitialiseNewTask+0x5a>
 800d87a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d87e:	b672      	cpsid	i
 800d880:	f383 8811 	msr	BASEPRI, r3
 800d884:	f3bf 8f6f 	isb	sy
 800d888:	f3bf 8f4f 	dsb	sy
 800d88c:	b662      	cpsie	i
 800d88e:	617b      	str	r3, [r7, #20]
 800d890:	e7fe      	b.n	800d890 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d892:	68bb      	ldr	r3, [r7, #8]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d01f      	beq.n	800d8d8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d898:	2300      	movs	r3, #0
 800d89a:	61fb      	str	r3, [r7, #28]
 800d89c:	e012      	b.n	800d8c4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d89e:	68ba      	ldr	r2, [r7, #8]
 800d8a0:	69fb      	ldr	r3, [r7, #28]
 800d8a2:	4413      	add	r3, r2
 800d8a4:	7819      	ldrb	r1, [r3, #0]
 800d8a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8a8:	69fb      	ldr	r3, [r7, #28]
 800d8aa:	4413      	add	r3, r2
 800d8ac:	3334      	adds	r3, #52	; 0x34
 800d8ae:	460a      	mov	r2, r1
 800d8b0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d8b2:	68ba      	ldr	r2, [r7, #8]
 800d8b4:	69fb      	ldr	r3, [r7, #28]
 800d8b6:	4413      	add	r3, r2
 800d8b8:	781b      	ldrb	r3, [r3, #0]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d006      	beq.n	800d8cc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d8be:	69fb      	ldr	r3, [r7, #28]
 800d8c0:	3301      	adds	r3, #1
 800d8c2:	61fb      	str	r3, [r7, #28]
 800d8c4:	69fb      	ldr	r3, [r7, #28]
 800d8c6:	2b0f      	cmp	r3, #15
 800d8c8:	d9e9      	bls.n	800d89e <prvInitialiseNewTask+0x66>
 800d8ca:	e000      	b.n	800d8ce <prvInitialiseNewTask+0x96>
			{
				break;
 800d8cc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8d0:	2200      	movs	r2, #0
 800d8d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d8d6:	e003      	b.n	800d8e0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d8d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8da:	2200      	movs	r2, #0
 800d8dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d8e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8e2:	2b06      	cmp	r3, #6
 800d8e4:	d901      	bls.n	800d8ea <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d8e6:	2306      	movs	r3, #6
 800d8e8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8ee:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d8f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8f4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d8f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8f8:	2200      	movs	r2, #0
 800d8fa:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d8fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8fe:	3304      	adds	r3, #4
 800d900:	4618      	mov	r0, r3
 800d902:	f7fe ff4b 	bl	800c79c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d908:	3318      	adds	r3, #24
 800d90a:	4618      	mov	r0, r3
 800d90c:	f7fe ff46 	bl	800c79c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d912:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d914:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d918:	f1c3 0207 	rsb	r2, r3, #7
 800d91c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d91e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d922:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d924:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800d926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d928:	2200      	movs	r2, #0
 800d92a:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d92c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d92e:	2200      	movs	r2, #0
 800d930:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d934:	2200      	movs	r2, #0
 800d936:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d93a:	683a      	ldr	r2, [r7, #0]
 800d93c:	68f9      	ldr	r1, [r7, #12]
 800d93e:	69b8      	ldr	r0, [r7, #24]
 800d940:	f000 ff3c 	bl	800e7bc <pxPortInitialiseStack>
 800d944:	4602      	mov	r2, r0
 800d946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d948:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d94a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d002      	beq.n	800d956 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d952:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d954:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d956:	bf00      	nop
 800d958:	3720      	adds	r7, #32
 800d95a:	46bd      	mov	sp, r7
 800d95c:	bd80      	pop	{r7, pc}
	...

0800d960 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b082      	sub	sp, #8
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d968:	f001 f82e 	bl	800e9c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d96c:	4b2a      	ldr	r3, [pc, #168]	; (800da18 <prvAddNewTaskToReadyList+0xb8>)
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	3301      	adds	r3, #1
 800d972:	4a29      	ldr	r2, [pc, #164]	; (800da18 <prvAddNewTaskToReadyList+0xb8>)
 800d974:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d976:	4b29      	ldr	r3, [pc, #164]	; (800da1c <prvAddNewTaskToReadyList+0xbc>)
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d109      	bne.n	800d992 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d97e:	4a27      	ldr	r2, [pc, #156]	; (800da1c <prvAddNewTaskToReadyList+0xbc>)
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d984:	4b24      	ldr	r3, [pc, #144]	; (800da18 <prvAddNewTaskToReadyList+0xb8>)
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	2b01      	cmp	r3, #1
 800d98a:	d110      	bne.n	800d9ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d98c:	f000 fc1e 	bl	800e1cc <prvInitialiseTaskLists>
 800d990:	e00d      	b.n	800d9ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d992:	4b23      	ldr	r3, [pc, #140]	; (800da20 <prvAddNewTaskToReadyList+0xc0>)
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d109      	bne.n	800d9ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d99a:	4b20      	ldr	r3, [pc, #128]	; (800da1c <prvAddNewTaskToReadyList+0xbc>)
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9a4:	429a      	cmp	r2, r3
 800d9a6:	d802      	bhi.n	800d9ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d9a8:	4a1c      	ldr	r2, [pc, #112]	; (800da1c <prvAddNewTaskToReadyList+0xbc>)
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d9ae:	4b1d      	ldr	r3, [pc, #116]	; (800da24 <prvAddNewTaskToReadyList+0xc4>)
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	3301      	adds	r3, #1
 800d9b4:	4a1b      	ldr	r2, [pc, #108]	; (800da24 <prvAddNewTaskToReadyList+0xc4>)
 800d9b6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9bc:	2201      	movs	r2, #1
 800d9be:	409a      	lsls	r2, r3
 800d9c0:	4b19      	ldr	r3, [pc, #100]	; (800da28 <prvAddNewTaskToReadyList+0xc8>)
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	4313      	orrs	r3, r2
 800d9c6:	4a18      	ldr	r2, [pc, #96]	; (800da28 <prvAddNewTaskToReadyList+0xc8>)
 800d9c8:	6013      	str	r3, [r2, #0]
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9ce:	4613      	mov	r3, r2
 800d9d0:	009b      	lsls	r3, r3, #2
 800d9d2:	4413      	add	r3, r2
 800d9d4:	009b      	lsls	r3, r3, #2
 800d9d6:	4a15      	ldr	r2, [pc, #84]	; (800da2c <prvAddNewTaskToReadyList+0xcc>)
 800d9d8:	441a      	add	r2, r3
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	3304      	adds	r3, #4
 800d9de:	4619      	mov	r1, r3
 800d9e0:	4610      	mov	r0, r2
 800d9e2:	f7fe fee8 	bl	800c7b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d9e6:	f001 f821 	bl	800ea2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d9ea:	4b0d      	ldr	r3, [pc, #52]	; (800da20 <prvAddNewTaskToReadyList+0xc0>)
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d00e      	beq.n	800da10 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d9f2:	4b0a      	ldr	r3, [pc, #40]	; (800da1c <prvAddNewTaskToReadyList+0xbc>)
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9fc:	429a      	cmp	r2, r3
 800d9fe:	d207      	bcs.n	800da10 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800da00:	4b0b      	ldr	r3, [pc, #44]	; (800da30 <prvAddNewTaskToReadyList+0xd0>)
 800da02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da06:	601a      	str	r2, [r3, #0]
 800da08:	f3bf 8f4f 	dsb	sy
 800da0c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800da10:	bf00      	nop
 800da12:	3708      	adds	r7, #8
 800da14:	46bd      	mov	sp, r7
 800da16:	bd80      	pop	{r7, pc}
 800da18:	200004c0 	.word	0x200004c0
 800da1c:	200003c0 	.word	0x200003c0
 800da20:	200004cc 	.word	0x200004cc
 800da24:	200004dc 	.word	0x200004dc
 800da28:	200004c8 	.word	0x200004c8
 800da2c:	200003c4 	.word	0x200003c4
 800da30:	e000ed04 	.word	0xe000ed04

0800da34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800da34:	b580      	push	{r7, lr}
 800da36:	b084      	sub	sp, #16
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800da3c:	2300      	movs	r3, #0
 800da3e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d018      	beq.n	800da78 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800da46:	4b14      	ldr	r3, [pc, #80]	; (800da98 <vTaskDelay+0x64>)
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d00b      	beq.n	800da66 <vTaskDelay+0x32>
 800da4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da52:	b672      	cpsid	i
 800da54:	f383 8811 	msr	BASEPRI, r3
 800da58:	f3bf 8f6f 	isb	sy
 800da5c:	f3bf 8f4f 	dsb	sy
 800da60:	b662      	cpsie	i
 800da62:	60bb      	str	r3, [r7, #8]
 800da64:	e7fe      	b.n	800da64 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800da66:	f000 f87d 	bl	800db64 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800da6a:	2100      	movs	r1, #0
 800da6c:	6878      	ldr	r0, [r7, #4]
 800da6e:	f000 fe3f 	bl	800e6f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800da72:	f000 f885 	bl	800db80 <xTaskResumeAll>
 800da76:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d107      	bne.n	800da8e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800da7e:	4b07      	ldr	r3, [pc, #28]	; (800da9c <vTaskDelay+0x68>)
 800da80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da84:	601a      	str	r2, [r3, #0]
 800da86:	f3bf 8f4f 	dsb	sy
 800da8a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800da8e:	bf00      	nop
 800da90:	3710      	adds	r7, #16
 800da92:	46bd      	mov	sp, r7
 800da94:	bd80      	pop	{r7, pc}
 800da96:	bf00      	nop
 800da98:	200004e8 	.word	0x200004e8
 800da9c:	e000ed04 	.word	0xe000ed04

0800daa0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b08a      	sub	sp, #40	; 0x28
 800daa4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800daa6:	2300      	movs	r3, #0
 800daa8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800daaa:	2300      	movs	r3, #0
 800daac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800daae:	463a      	mov	r2, r7
 800dab0:	1d39      	adds	r1, r7, #4
 800dab2:	f107 0308 	add.w	r3, r7, #8
 800dab6:	4618      	mov	r0, r3
 800dab8:	f7f3 f828 	bl	8000b0c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dabc:	6839      	ldr	r1, [r7, #0]
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	68ba      	ldr	r2, [r7, #8]
 800dac2:	9202      	str	r2, [sp, #8]
 800dac4:	9301      	str	r3, [sp, #4]
 800dac6:	2300      	movs	r3, #0
 800dac8:	9300      	str	r3, [sp, #0]
 800daca:	2300      	movs	r3, #0
 800dacc:	460a      	mov	r2, r1
 800dace:	491f      	ldr	r1, [pc, #124]	; (800db4c <vTaskStartScheduler+0xac>)
 800dad0:	481f      	ldr	r0, [pc, #124]	; (800db50 <vTaskStartScheduler+0xb0>)
 800dad2:	f7ff fe0c 	bl	800d6ee <xTaskCreateStatic>
 800dad6:	4602      	mov	r2, r0
 800dad8:	4b1e      	ldr	r3, [pc, #120]	; (800db54 <vTaskStartScheduler+0xb4>)
 800dada:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dadc:	4b1d      	ldr	r3, [pc, #116]	; (800db54 <vTaskStartScheduler+0xb4>)
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d002      	beq.n	800daea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dae4:	2301      	movs	r3, #1
 800dae6:	617b      	str	r3, [r7, #20]
 800dae8:	e001      	b.n	800daee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800daea:	2300      	movs	r3, #0
 800daec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800daee:	697b      	ldr	r3, [r7, #20]
 800daf0:	2b01      	cmp	r3, #1
 800daf2:	d117      	bne.n	800db24 <vTaskStartScheduler+0x84>
 800daf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daf8:	b672      	cpsid	i
 800dafa:	f383 8811 	msr	BASEPRI, r3
 800dafe:	f3bf 8f6f 	isb	sy
 800db02:	f3bf 8f4f 	dsb	sy
 800db06:	b662      	cpsie	i
 800db08:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800db0a:	4b13      	ldr	r3, [pc, #76]	; (800db58 <vTaskStartScheduler+0xb8>)
 800db0c:	f04f 32ff 	mov.w	r2, #4294967295
 800db10:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800db12:	4b12      	ldr	r3, [pc, #72]	; (800db5c <vTaskStartScheduler+0xbc>)
 800db14:	2201      	movs	r2, #1
 800db16:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800db18:	4b11      	ldr	r3, [pc, #68]	; (800db60 <vTaskStartScheduler+0xc0>)
 800db1a:	2200      	movs	r2, #0
 800db1c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800db1e:	f000 fed7 	bl	800e8d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800db22:	e00f      	b.n	800db44 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800db24:	697b      	ldr	r3, [r7, #20]
 800db26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db2a:	d10b      	bne.n	800db44 <vTaskStartScheduler+0xa4>
 800db2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db30:	b672      	cpsid	i
 800db32:	f383 8811 	msr	BASEPRI, r3
 800db36:	f3bf 8f6f 	isb	sy
 800db3a:	f3bf 8f4f 	dsb	sy
 800db3e:	b662      	cpsie	i
 800db40:	60fb      	str	r3, [r7, #12]
 800db42:	e7fe      	b.n	800db42 <vTaskStartScheduler+0xa2>
}
 800db44:	bf00      	nop
 800db46:	3718      	adds	r7, #24
 800db48:	46bd      	mov	sp, r7
 800db4a:	bd80      	pop	{r7, pc}
 800db4c:	08025cd0 	.word	0x08025cd0
 800db50:	0800e199 	.word	0x0800e199
 800db54:	200004e4 	.word	0x200004e4
 800db58:	200004e0 	.word	0x200004e0
 800db5c:	200004cc 	.word	0x200004cc
 800db60:	200004c4 	.word	0x200004c4

0800db64 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800db64:	b480      	push	{r7}
 800db66:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800db68:	4b04      	ldr	r3, [pc, #16]	; (800db7c <vTaskSuspendAll+0x18>)
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	3301      	adds	r3, #1
 800db6e:	4a03      	ldr	r2, [pc, #12]	; (800db7c <vTaskSuspendAll+0x18>)
 800db70:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800db72:	bf00      	nop
 800db74:	46bd      	mov	sp, r7
 800db76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db7a:	4770      	bx	lr
 800db7c:	200004e8 	.word	0x200004e8

0800db80 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800db80:	b580      	push	{r7, lr}
 800db82:	b084      	sub	sp, #16
 800db84:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800db86:	2300      	movs	r3, #0
 800db88:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800db8a:	2300      	movs	r3, #0
 800db8c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800db8e:	4b42      	ldr	r3, [pc, #264]	; (800dc98 <xTaskResumeAll+0x118>)
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d10b      	bne.n	800dbae <xTaskResumeAll+0x2e>
 800db96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db9a:	b672      	cpsid	i
 800db9c:	f383 8811 	msr	BASEPRI, r3
 800dba0:	f3bf 8f6f 	isb	sy
 800dba4:	f3bf 8f4f 	dsb	sy
 800dba8:	b662      	cpsie	i
 800dbaa:	603b      	str	r3, [r7, #0]
 800dbac:	e7fe      	b.n	800dbac <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dbae:	f000 ff0b 	bl	800e9c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dbb2:	4b39      	ldr	r3, [pc, #228]	; (800dc98 <xTaskResumeAll+0x118>)
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	3b01      	subs	r3, #1
 800dbb8:	4a37      	ldr	r2, [pc, #220]	; (800dc98 <xTaskResumeAll+0x118>)
 800dbba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dbbc:	4b36      	ldr	r3, [pc, #216]	; (800dc98 <xTaskResumeAll+0x118>)
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d161      	bne.n	800dc88 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dbc4:	4b35      	ldr	r3, [pc, #212]	; (800dc9c <xTaskResumeAll+0x11c>)
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d05d      	beq.n	800dc88 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dbcc:	e02e      	b.n	800dc2c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dbce:	4b34      	ldr	r3, [pc, #208]	; (800dca0 <xTaskResumeAll+0x120>)
 800dbd0:	68db      	ldr	r3, [r3, #12]
 800dbd2:	68db      	ldr	r3, [r3, #12]
 800dbd4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	3318      	adds	r3, #24
 800dbda:	4618      	mov	r0, r3
 800dbdc:	f7fe fe48 	bl	800c870 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	3304      	adds	r3, #4
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	f7fe fe43 	bl	800c870 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbee:	2201      	movs	r2, #1
 800dbf0:	409a      	lsls	r2, r3
 800dbf2:	4b2c      	ldr	r3, [pc, #176]	; (800dca4 <xTaskResumeAll+0x124>)
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	4313      	orrs	r3, r2
 800dbf8:	4a2a      	ldr	r2, [pc, #168]	; (800dca4 <xTaskResumeAll+0x124>)
 800dbfa:	6013      	str	r3, [r2, #0]
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc00:	4613      	mov	r3, r2
 800dc02:	009b      	lsls	r3, r3, #2
 800dc04:	4413      	add	r3, r2
 800dc06:	009b      	lsls	r3, r3, #2
 800dc08:	4a27      	ldr	r2, [pc, #156]	; (800dca8 <xTaskResumeAll+0x128>)
 800dc0a:	441a      	add	r2, r3
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	3304      	adds	r3, #4
 800dc10:	4619      	mov	r1, r3
 800dc12:	4610      	mov	r0, r2
 800dc14:	f7fe fdcf 	bl	800c7b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc1c:	4b23      	ldr	r3, [pc, #140]	; (800dcac <xTaskResumeAll+0x12c>)
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc22:	429a      	cmp	r2, r3
 800dc24:	d302      	bcc.n	800dc2c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800dc26:	4b22      	ldr	r3, [pc, #136]	; (800dcb0 <xTaskResumeAll+0x130>)
 800dc28:	2201      	movs	r2, #1
 800dc2a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dc2c:	4b1c      	ldr	r3, [pc, #112]	; (800dca0 <xTaskResumeAll+0x120>)
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d1cc      	bne.n	800dbce <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d001      	beq.n	800dc3e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dc3a:	f000 fb63 	bl	800e304 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800dc3e:	4b1d      	ldr	r3, [pc, #116]	; (800dcb4 <xTaskResumeAll+0x134>)
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d010      	beq.n	800dc6c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800dc4a:	f000 f859 	bl	800dd00 <xTaskIncrementTick>
 800dc4e:	4603      	mov	r3, r0
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d002      	beq.n	800dc5a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800dc54:	4b16      	ldr	r3, [pc, #88]	; (800dcb0 <xTaskResumeAll+0x130>)
 800dc56:	2201      	movs	r2, #1
 800dc58:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	3b01      	subs	r3, #1
 800dc5e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d1f1      	bne.n	800dc4a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800dc66:	4b13      	ldr	r3, [pc, #76]	; (800dcb4 <xTaskResumeAll+0x134>)
 800dc68:	2200      	movs	r2, #0
 800dc6a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800dc6c:	4b10      	ldr	r3, [pc, #64]	; (800dcb0 <xTaskResumeAll+0x130>)
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d009      	beq.n	800dc88 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800dc74:	2301      	movs	r3, #1
 800dc76:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800dc78:	4b0f      	ldr	r3, [pc, #60]	; (800dcb8 <xTaskResumeAll+0x138>)
 800dc7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc7e:	601a      	str	r2, [r3, #0]
 800dc80:	f3bf 8f4f 	dsb	sy
 800dc84:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dc88:	f000 fed0 	bl	800ea2c <vPortExitCritical>

	return xAlreadyYielded;
 800dc8c:	68bb      	ldr	r3, [r7, #8]
}
 800dc8e:	4618      	mov	r0, r3
 800dc90:	3710      	adds	r7, #16
 800dc92:	46bd      	mov	sp, r7
 800dc94:	bd80      	pop	{r7, pc}
 800dc96:	bf00      	nop
 800dc98:	200004e8 	.word	0x200004e8
 800dc9c:	200004c0 	.word	0x200004c0
 800dca0:	20000480 	.word	0x20000480
 800dca4:	200004c8 	.word	0x200004c8
 800dca8:	200003c4 	.word	0x200003c4
 800dcac:	200003c0 	.word	0x200003c0
 800dcb0:	200004d4 	.word	0x200004d4
 800dcb4:	200004d0 	.word	0x200004d0
 800dcb8:	e000ed04 	.word	0xe000ed04

0800dcbc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800dcbc:	b480      	push	{r7}
 800dcbe:	b083      	sub	sp, #12
 800dcc0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800dcc2:	4b05      	ldr	r3, [pc, #20]	; (800dcd8 <xTaskGetTickCount+0x1c>)
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800dcc8:	687b      	ldr	r3, [r7, #4]
}
 800dcca:	4618      	mov	r0, r3
 800dccc:	370c      	adds	r7, #12
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd4:	4770      	bx	lr
 800dcd6:	bf00      	nop
 800dcd8:	200004c4 	.word	0x200004c4

0800dcdc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b082      	sub	sp, #8
 800dce0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dce2:	f000 ff51 	bl	800eb88 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800dce6:	2300      	movs	r3, #0
 800dce8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800dcea:	4b04      	ldr	r3, [pc, #16]	; (800dcfc <xTaskGetTickCountFromISR+0x20>)
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dcf0:	683b      	ldr	r3, [r7, #0]
}
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	3708      	adds	r7, #8
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bd80      	pop	{r7, pc}
 800dcfa:	bf00      	nop
 800dcfc:	200004c4 	.word	0x200004c4

0800dd00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b086      	sub	sp, #24
 800dd04:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dd06:	2300      	movs	r3, #0
 800dd08:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dd0a:	4b4f      	ldr	r3, [pc, #316]	; (800de48 <xTaskIncrementTick+0x148>)
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	f040 8089 	bne.w	800de26 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dd14:	4b4d      	ldr	r3, [pc, #308]	; (800de4c <xTaskIncrementTick+0x14c>)
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	3301      	adds	r3, #1
 800dd1a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dd1c:	4a4b      	ldr	r2, [pc, #300]	; (800de4c <xTaskIncrementTick+0x14c>)
 800dd1e:	693b      	ldr	r3, [r7, #16]
 800dd20:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dd22:	693b      	ldr	r3, [r7, #16]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d121      	bne.n	800dd6c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800dd28:	4b49      	ldr	r3, [pc, #292]	; (800de50 <xTaskIncrementTick+0x150>)
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d00b      	beq.n	800dd4a <xTaskIncrementTick+0x4a>
 800dd32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd36:	b672      	cpsid	i
 800dd38:	f383 8811 	msr	BASEPRI, r3
 800dd3c:	f3bf 8f6f 	isb	sy
 800dd40:	f3bf 8f4f 	dsb	sy
 800dd44:	b662      	cpsie	i
 800dd46:	603b      	str	r3, [r7, #0]
 800dd48:	e7fe      	b.n	800dd48 <xTaskIncrementTick+0x48>
 800dd4a:	4b41      	ldr	r3, [pc, #260]	; (800de50 <xTaskIncrementTick+0x150>)
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	60fb      	str	r3, [r7, #12]
 800dd50:	4b40      	ldr	r3, [pc, #256]	; (800de54 <xTaskIncrementTick+0x154>)
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	4a3e      	ldr	r2, [pc, #248]	; (800de50 <xTaskIncrementTick+0x150>)
 800dd56:	6013      	str	r3, [r2, #0]
 800dd58:	4a3e      	ldr	r2, [pc, #248]	; (800de54 <xTaskIncrementTick+0x154>)
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	6013      	str	r3, [r2, #0]
 800dd5e:	4b3e      	ldr	r3, [pc, #248]	; (800de58 <xTaskIncrementTick+0x158>)
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	3301      	adds	r3, #1
 800dd64:	4a3c      	ldr	r2, [pc, #240]	; (800de58 <xTaskIncrementTick+0x158>)
 800dd66:	6013      	str	r3, [r2, #0]
 800dd68:	f000 facc 	bl	800e304 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dd6c:	4b3b      	ldr	r3, [pc, #236]	; (800de5c <xTaskIncrementTick+0x15c>)
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	693a      	ldr	r2, [r7, #16]
 800dd72:	429a      	cmp	r2, r3
 800dd74:	d348      	bcc.n	800de08 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dd76:	4b36      	ldr	r3, [pc, #216]	; (800de50 <xTaskIncrementTick+0x150>)
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d104      	bne.n	800dd8a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd80:	4b36      	ldr	r3, [pc, #216]	; (800de5c <xTaskIncrementTick+0x15c>)
 800dd82:	f04f 32ff 	mov.w	r2, #4294967295
 800dd86:	601a      	str	r2, [r3, #0]
					break;
 800dd88:	e03e      	b.n	800de08 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd8a:	4b31      	ldr	r3, [pc, #196]	; (800de50 <xTaskIncrementTick+0x150>)
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	68db      	ldr	r3, [r3, #12]
 800dd90:	68db      	ldr	r3, [r3, #12]
 800dd92:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dd94:	68bb      	ldr	r3, [r7, #8]
 800dd96:	685b      	ldr	r3, [r3, #4]
 800dd98:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dd9a:	693a      	ldr	r2, [r7, #16]
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	429a      	cmp	r2, r3
 800dda0:	d203      	bcs.n	800ddaa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800dda2:	4a2e      	ldr	r2, [pc, #184]	; (800de5c <xTaskIncrementTick+0x15c>)
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dda8:	e02e      	b.n	800de08 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ddaa:	68bb      	ldr	r3, [r7, #8]
 800ddac:	3304      	adds	r3, #4
 800ddae:	4618      	mov	r0, r3
 800ddb0:	f7fe fd5e 	bl	800c870 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ddb4:	68bb      	ldr	r3, [r7, #8]
 800ddb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d004      	beq.n	800ddc6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ddbc:	68bb      	ldr	r3, [r7, #8]
 800ddbe:	3318      	adds	r3, #24
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	f7fe fd55 	bl	800c870 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ddc6:	68bb      	ldr	r3, [r7, #8]
 800ddc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddca:	2201      	movs	r2, #1
 800ddcc:	409a      	lsls	r2, r3
 800ddce:	4b24      	ldr	r3, [pc, #144]	; (800de60 <xTaskIncrementTick+0x160>)
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	4313      	orrs	r3, r2
 800ddd4:	4a22      	ldr	r2, [pc, #136]	; (800de60 <xTaskIncrementTick+0x160>)
 800ddd6:	6013      	str	r3, [r2, #0]
 800ddd8:	68bb      	ldr	r3, [r7, #8]
 800ddda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dddc:	4613      	mov	r3, r2
 800ddde:	009b      	lsls	r3, r3, #2
 800dde0:	4413      	add	r3, r2
 800dde2:	009b      	lsls	r3, r3, #2
 800dde4:	4a1f      	ldr	r2, [pc, #124]	; (800de64 <xTaskIncrementTick+0x164>)
 800dde6:	441a      	add	r2, r3
 800dde8:	68bb      	ldr	r3, [r7, #8]
 800ddea:	3304      	adds	r3, #4
 800ddec:	4619      	mov	r1, r3
 800ddee:	4610      	mov	r0, r2
 800ddf0:	f7fe fce1 	bl	800c7b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ddf4:	68bb      	ldr	r3, [r7, #8]
 800ddf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddf8:	4b1b      	ldr	r3, [pc, #108]	; (800de68 <xTaskIncrementTick+0x168>)
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddfe:	429a      	cmp	r2, r3
 800de00:	d3b9      	bcc.n	800dd76 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800de02:	2301      	movs	r3, #1
 800de04:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800de06:	e7b6      	b.n	800dd76 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800de08:	4b17      	ldr	r3, [pc, #92]	; (800de68 <xTaskIncrementTick+0x168>)
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de0e:	4915      	ldr	r1, [pc, #84]	; (800de64 <xTaskIncrementTick+0x164>)
 800de10:	4613      	mov	r3, r2
 800de12:	009b      	lsls	r3, r3, #2
 800de14:	4413      	add	r3, r2
 800de16:	009b      	lsls	r3, r3, #2
 800de18:	440b      	add	r3, r1
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	2b01      	cmp	r3, #1
 800de1e:	d907      	bls.n	800de30 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800de20:	2301      	movs	r3, #1
 800de22:	617b      	str	r3, [r7, #20]
 800de24:	e004      	b.n	800de30 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800de26:	4b11      	ldr	r3, [pc, #68]	; (800de6c <xTaskIncrementTick+0x16c>)
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	3301      	adds	r3, #1
 800de2c:	4a0f      	ldr	r2, [pc, #60]	; (800de6c <xTaskIncrementTick+0x16c>)
 800de2e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800de30:	4b0f      	ldr	r3, [pc, #60]	; (800de70 <xTaskIncrementTick+0x170>)
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d001      	beq.n	800de3c <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800de38:	2301      	movs	r3, #1
 800de3a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800de3c:	697b      	ldr	r3, [r7, #20]
}
 800de3e:	4618      	mov	r0, r3
 800de40:	3718      	adds	r7, #24
 800de42:	46bd      	mov	sp, r7
 800de44:	bd80      	pop	{r7, pc}
 800de46:	bf00      	nop
 800de48:	200004e8 	.word	0x200004e8
 800de4c:	200004c4 	.word	0x200004c4
 800de50:	20000478 	.word	0x20000478
 800de54:	2000047c 	.word	0x2000047c
 800de58:	200004d8 	.word	0x200004d8
 800de5c:	200004e0 	.word	0x200004e0
 800de60:	200004c8 	.word	0x200004c8
 800de64:	200003c4 	.word	0x200003c4
 800de68:	200003c0 	.word	0x200003c0
 800de6c:	200004d0 	.word	0x200004d0
 800de70:	200004d4 	.word	0x200004d4

0800de74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b088      	sub	sp, #32
 800de78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800de7a:	4b3a      	ldr	r3, [pc, #232]	; (800df64 <vTaskSwitchContext+0xf0>)
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d003      	beq.n	800de8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800de82:	4b39      	ldr	r3, [pc, #228]	; (800df68 <vTaskSwitchContext+0xf4>)
 800de84:	2201      	movs	r2, #1
 800de86:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800de88:	e067      	b.n	800df5a <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 800de8a:	4b37      	ldr	r3, [pc, #220]	; (800df68 <vTaskSwitchContext+0xf4>)
 800de8c:	2200      	movs	r2, #0
 800de8e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800de90:	4b36      	ldr	r3, [pc, #216]	; (800df6c <vTaskSwitchContext+0xf8>)
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de96:	61fb      	str	r3, [r7, #28]
 800de98:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800de9c:	61bb      	str	r3, [r7, #24]
 800de9e:	69fb      	ldr	r3, [r7, #28]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	69ba      	ldr	r2, [r7, #24]
 800dea4:	429a      	cmp	r2, r3
 800dea6:	d111      	bne.n	800decc <vTaskSwitchContext+0x58>
 800dea8:	69fb      	ldr	r3, [r7, #28]
 800deaa:	3304      	adds	r3, #4
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	69ba      	ldr	r2, [r7, #24]
 800deb0:	429a      	cmp	r2, r3
 800deb2:	d10b      	bne.n	800decc <vTaskSwitchContext+0x58>
 800deb4:	69fb      	ldr	r3, [r7, #28]
 800deb6:	3308      	adds	r3, #8
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	69ba      	ldr	r2, [r7, #24]
 800debc:	429a      	cmp	r2, r3
 800debe:	d105      	bne.n	800decc <vTaskSwitchContext+0x58>
 800dec0:	69fb      	ldr	r3, [r7, #28]
 800dec2:	330c      	adds	r3, #12
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	69ba      	ldr	r2, [r7, #24]
 800dec8:	429a      	cmp	r2, r3
 800deca:	d008      	beq.n	800dede <vTaskSwitchContext+0x6a>
 800decc:	4b27      	ldr	r3, [pc, #156]	; (800df6c <vTaskSwitchContext+0xf8>)
 800dece:	681a      	ldr	r2, [r3, #0]
 800ded0:	4b26      	ldr	r3, [pc, #152]	; (800df6c <vTaskSwitchContext+0xf8>)
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	3334      	adds	r3, #52	; 0x34
 800ded6:	4619      	mov	r1, r3
 800ded8:	4610      	mov	r0, r2
 800deda:	f7f2 fe04 	bl	8000ae6 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dede:	4b24      	ldr	r3, [pc, #144]	; (800df70 <vTaskSwitchContext+0xfc>)
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	fab3 f383 	clz	r3, r3
 800deea:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800deec:	7afb      	ldrb	r3, [r7, #11]
 800deee:	f1c3 031f 	rsb	r3, r3, #31
 800def2:	617b      	str	r3, [r7, #20]
 800def4:	491f      	ldr	r1, [pc, #124]	; (800df74 <vTaskSwitchContext+0x100>)
 800def6:	697a      	ldr	r2, [r7, #20]
 800def8:	4613      	mov	r3, r2
 800defa:	009b      	lsls	r3, r3, #2
 800defc:	4413      	add	r3, r2
 800defe:	009b      	lsls	r3, r3, #2
 800df00:	440b      	add	r3, r1
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d10b      	bne.n	800df20 <vTaskSwitchContext+0xac>
	__asm volatile
 800df08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df0c:	b672      	cpsid	i
 800df0e:	f383 8811 	msr	BASEPRI, r3
 800df12:	f3bf 8f6f 	isb	sy
 800df16:	f3bf 8f4f 	dsb	sy
 800df1a:	b662      	cpsie	i
 800df1c:	607b      	str	r3, [r7, #4]
 800df1e:	e7fe      	b.n	800df1e <vTaskSwitchContext+0xaa>
 800df20:	697a      	ldr	r2, [r7, #20]
 800df22:	4613      	mov	r3, r2
 800df24:	009b      	lsls	r3, r3, #2
 800df26:	4413      	add	r3, r2
 800df28:	009b      	lsls	r3, r3, #2
 800df2a:	4a12      	ldr	r2, [pc, #72]	; (800df74 <vTaskSwitchContext+0x100>)
 800df2c:	4413      	add	r3, r2
 800df2e:	613b      	str	r3, [r7, #16]
 800df30:	693b      	ldr	r3, [r7, #16]
 800df32:	685b      	ldr	r3, [r3, #4]
 800df34:	685a      	ldr	r2, [r3, #4]
 800df36:	693b      	ldr	r3, [r7, #16]
 800df38:	605a      	str	r2, [r3, #4]
 800df3a:	693b      	ldr	r3, [r7, #16]
 800df3c:	685a      	ldr	r2, [r3, #4]
 800df3e:	693b      	ldr	r3, [r7, #16]
 800df40:	3308      	adds	r3, #8
 800df42:	429a      	cmp	r2, r3
 800df44:	d104      	bne.n	800df50 <vTaskSwitchContext+0xdc>
 800df46:	693b      	ldr	r3, [r7, #16]
 800df48:	685b      	ldr	r3, [r3, #4]
 800df4a:	685a      	ldr	r2, [r3, #4]
 800df4c:	693b      	ldr	r3, [r7, #16]
 800df4e:	605a      	str	r2, [r3, #4]
 800df50:	693b      	ldr	r3, [r7, #16]
 800df52:	685b      	ldr	r3, [r3, #4]
 800df54:	68db      	ldr	r3, [r3, #12]
 800df56:	4a05      	ldr	r2, [pc, #20]	; (800df6c <vTaskSwitchContext+0xf8>)
 800df58:	6013      	str	r3, [r2, #0]
}
 800df5a:	bf00      	nop
 800df5c:	3720      	adds	r7, #32
 800df5e:	46bd      	mov	sp, r7
 800df60:	bd80      	pop	{r7, pc}
 800df62:	bf00      	nop
 800df64:	200004e8 	.word	0x200004e8
 800df68:	200004d4 	.word	0x200004d4
 800df6c:	200003c0 	.word	0x200003c0
 800df70:	200004c8 	.word	0x200004c8
 800df74:	200003c4 	.word	0x200003c4

0800df78 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800df78:	b580      	push	{r7, lr}
 800df7a:	b084      	sub	sp, #16
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]
 800df80:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d10b      	bne.n	800dfa0 <vTaskPlaceOnEventList+0x28>
 800df88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df8c:	b672      	cpsid	i
 800df8e:	f383 8811 	msr	BASEPRI, r3
 800df92:	f3bf 8f6f 	isb	sy
 800df96:	f3bf 8f4f 	dsb	sy
 800df9a:	b662      	cpsie	i
 800df9c:	60fb      	str	r3, [r7, #12]
 800df9e:	e7fe      	b.n	800df9e <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dfa0:	4b07      	ldr	r3, [pc, #28]	; (800dfc0 <vTaskPlaceOnEventList+0x48>)
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	3318      	adds	r3, #24
 800dfa6:	4619      	mov	r1, r3
 800dfa8:	6878      	ldr	r0, [r7, #4]
 800dfaa:	f7fe fc28 	bl	800c7fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dfae:	2101      	movs	r1, #1
 800dfb0:	6838      	ldr	r0, [r7, #0]
 800dfb2:	f000 fb9d 	bl	800e6f0 <prvAddCurrentTaskToDelayedList>
}
 800dfb6:	bf00      	nop
 800dfb8:	3710      	adds	r7, #16
 800dfba:	46bd      	mov	sp, r7
 800dfbc:	bd80      	pop	{r7, pc}
 800dfbe:	bf00      	nop
 800dfc0:	200003c0 	.word	0x200003c0

0800dfc4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b086      	sub	sp, #24
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	68db      	ldr	r3, [r3, #12]
 800dfd0:	68db      	ldr	r3, [r3, #12]
 800dfd2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800dfd4:	693b      	ldr	r3, [r7, #16]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d10b      	bne.n	800dff2 <xTaskRemoveFromEventList+0x2e>
 800dfda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfde:	b672      	cpsid	i
 800dfe0:	f383 8811 	msr	BASEPRI, r3
 800dfe4:	f3bf 8f6f 	isb	sy
 800dfe8:	f3bf 8f4f 	dsb	sy
 800dfec:	b662      	cpsie	i
 800dfee:	60fb      	str	r3, [r7, #12]
 800dff0:	e7fe      	b.n	800dff0 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800dff2:	693b      	ldr	r3, [r7, #16]
 800dff4:	3318      	adds	r3, #24
 800dff6:	4618      	mov	r0, r3
 800dff8:	f7fe fc3a 	bl	800c870 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dffc:	4b1d      	ldr	r3, [pc, #116]	; (800e074 <xTaskRemoveFromEventList+0xb0>)
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d11c      	bne.n	800e03e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e004:	693b      	ldr	r3, [r7, #16]
 800e006:	3304      	adds	r3, #4
 800e008:	4618      	mov	r0, r3
 800e00a:	f7fe fc31 	bl	800c870 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e00e:	693b      	ldr	r3, [r7, #16]
 800e010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e012:	2201      	movs	r2, #1
 800e014:	409a      	lsls	r2, r3
 800e016:	4b18      	ldr	r3, [pc, #96]	; (800e078 <xTaskRemoveFromEventList+0xb4>)
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	4313      	orrs	r3, r2
 800e01c:	4a16      	ldr	r2, [pc, #88]	; (800e078 <xTaskRemoveFromEventList+0xb4>)
 800e01e:	6013      	str	r3, [r2, #0]
 800e020:	693b      	ldr	r3, [r7, #16]
 800e022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e024:	4613      	mov	r3, r2
 800e026:	009b      	lsls	r3, r3, #2
 800e028:	4413      	add	r3, r2
 800e02a:	009b      	lsls	r3, r3, #2
 800e02c:	4a13      	ldr	r2, [pc, #76]	; (800e07c <xTaskRemoveFromEventList+0xb8>)
 800e02e:	441a      	add	r2, r3
 800e030:	693b      	ldr	r3, [r7, #16]
 800e032:	3304      	adds	r3, #4
 800e034:	4619      	mov	r1, r3
 800e036:	4610      	mov	r0, r2
 800e038:	f7fe fbbd 	bl	800c7b6 <vListInsertEnd>
 800e03c:	e005      	b.n	800e04a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e03e:	693b      	ldr	r3, [r7, #16]
 800e040:	3318      	adds	r3, #24
 800e042:	4619      	mov	r1, r3
 800e044:	480e      	ldr	r0, [pc, #56]	; (800e080 <xTaskRemoveFromEventList+0xbc>)
 800e046:	f7fe fbb6 	bl	800c7b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e04a:	693b      	ldr	r3, [r7, #16]
 800e04c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e04e:	4b0d      	ldr	r3, [pc, #52]	; (800e084 <xTaskRemoveFromEventList+0xc0>)
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e054:	429a      	cmp	r2, r3
 800e056:	d905      	bls.n	800e064 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e058:	2301      	movs	r3, #1
 800e05a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e05c:	4b0a      	ldr	r3, [pc, #40]	; (800e088 <xTaskRemoveFromEventList+0xc4>)
 800e05e:	2201      	movs	r2, #1
 800e060:	601a      	str	r2, [r3, #0]
 800e062:	e001      	b.n	800e068 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e064:	2300      	movs	r3, #0
 800e066:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e068:	697b      	ldr	r3, [r7, #20]
}
 800e06a:	4618      	mov	r0, r3
 800e06c:	3718      	adds	r7, #24
 800e06e:	46bd      	mov	sp, r7
 800e070:	bd80      	pop	{r7, pc}
 800e072:	bf00      	nop
 800e074:	200004e8 	.word	0x200004e8
 800e078:	200004c8 	.word	0x200004c8
 800e07c:	200003c4 	.word	0x200003c4
 800e080:	20000480 	.word	0x20000480
 800e084:	200003c0 	.word	0x200003c0
 800e088:	200004d4 	.word	0x200004d4

0800e08c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e08c:	b480      	push	{r7}
 800e08e:	b083      	sub	sp, #12
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e094:	4b06      	ldr	r3, [pc, #24]	; (800e0b0 <vTaskInternalSetTimeOutState+0x24>)
 800e096:	681a      	ldr	r2, [r3, #0]
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e09c:	4b05      	ldr	r3, [pc, #20]	; (800e0b4 <vTaskInternalSetTimeOutState+0x28>)
 800e09e:	681a      	ldr	r2, [r3, #0]
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	605a      	str	r2, [r3, #4]
}
 800e0a4:	bf00      	nop
 800e0a6:	370c      	adds	r7, #12
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ae:	4770      	bx	lr
 800e0b0:	200004d8 	.word	0x200004d8
 800e0b4:	200004c4 	.word	0x200004c4

0800e0b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b088      	sub	sp, #32
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
 800e0c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d10b      	bne.n	800e0e0 <xTaskCheckForTimeOut+0x28>
 800e0c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0cc:	b672      	cpsid	i
 800e0ce:	f383 8811 	msr	BASEPRI, r3
 800e0d2:	f3bf 8f6f 	isb	sy
 800e0d6:	f3bf 8f4f 	dsb	sy
 800e0da:	b662      	cpsie	i
 800e0dc:	613b      	str	r3, [r7, #16]
 800e0de:	e7fe      	b.n	800e0de <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800e0e0:	683b      	ldr	r3, [r7, #0]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d10b      	bne.n	800e0fe <xTaskCheckForTimeOut+0x46>
 800e0e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0ea:	b672      	cpsid	i
 800e0ec:	f383 8811 	msr	BASEPRI, r3
 800e0f0:	f3bf 8f6f 	isb	sy
 800e0f4:	f3bf 8f4f 	dsb	sy
 800e0f8:	b662      	cpsie	i
 800e0fa:	60fb      	str	r3, [r7, #12]
 800e0fc:	e7fe      	b.n	800e0fc <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800e0fe:	f000 fc63 	bl	800e9c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e102:	4b1d      	ldr	r3, [pc, #116]	; (800e178 <xTaskCheckForTimeOut+0xc0>)
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	685b      	ldr	r3, [r3, #4]
 800e10c:	69ba      	ldr	r2, [r7, #24]
 800e10e:	1ad3      	subs	r3, r2, r3
 800e110:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e112:	683b      	ldr	r3, [r7, #0]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e11a:	d102      	bne.n	800e122 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e11c:	2300      	movs	r3, #0
 800e11e:	61fb      	str	r3, [r7, #28]
 800e120:	e023      	b.n	800e16a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	681a      	ldr	r2, [r3, #0]
 800e126:	4b15      	ldr	r3, [pc, #84]	; (800e17c <xTaskCheckForTimeOut+0xc4>)
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	429a      	cmp	r2, r3
 800e12c:	d007      	beq.n	800e13e <xTaskCheckForTimeOut+0x86>
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	685b      	ldr	r3, [r3, #4]
 800e132:	69ba      	ldr	r2, [r7, #24]
 800e134:	429a      	cmp	r2, r3
 800e136:	d302      	bcc.n	800e13e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e138:	2301      	movs	r3, #1
 800e13a:	61fb      	str	r3, [r7, #28]
 800e13c:	e015      	b.n	800e16a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e13e:	683b      	ldr	r3, [r7, #0]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	697a      	ldr	r2, [r7, #20]
 800e144:	429a      	cmp	r2, r3
 800e146:	d20b      	bcs.n	800e160 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e148:	683b      	ldr	r3, [r7, #0]
 800e14a:	681a      	ldr	r2, [r3, #0]
 800e14c:	697b      	ldr	r3, [r7, #20]
 800e14e:	1ad2      	subs	r2, r2, r3
 800e150:	683b      	ldr	r3, [r7, #0]
 800e152:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e154:	6878      	ldr	r0, [r7, #4]
 800e156:	f7ff ff99 	bl	800e08c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e15a:	2300      	movs	r3, #0
 800e15c:	61fb      	str	r3, [r7, #28]
 800e15e:	e004      	b.n	800e16a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e160:	683b      	ldr	r3, [r7, #0]
 800e162:	2200      	movs	r2, #0
 800e164:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e166:	2301      	movs	r3, #1
 800e168:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e16a:	f000 fc5f 	bl	800ea2c <vPortExitCritical>

	return xReturn;
 800e16e:	69fb      	ldr	r3, [r7, #28]
}
 800e170:	4618      	mov	r0, r3
 800e172:	3720      	adds	r7, #32
 800e174:	46bd      	mov	sp, r7
 800e176:	bd80      	pop	{r7, pc}
 800e178:	200004c4 	.word	0x200004c4
 800e17c:	200004d8 	.word	0x200004d8

0800e180 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e180:	b480      	push	{r7}
 800e182:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e184:	4b03      	ldr	r3, [pc, #12]	; (800e194 <vTaskMissedYield+0x14>)
 800e186:	2201      	movs	r2, #1
 800e188:	601a      	str	r2, [r3, #0]
}
 800e18a:	bf00      	nop
 800e18c:	46bd      	mov	sp, r7
 800e18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e192:	4770      	bx	lr
 800e194:	200004d4 	.word	0x200004d4

0800e198 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b082      	sub	sp, #8
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e1a0:	f000 f854 	bl	800e24c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e1a4:	4b07      	ldr	r3, [pc, #28]	; (800e1c4 <prvIdleTask+0x2c>)
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	2b01      	cmp	r3, #1
 800e1aa:	d907      	bls.n	800e1bc <prvIdleTask+0x24>
			{
				taskYIELD();
 800e1ac:	4b06      	ldr	r3, [pc, #24]	; (800e1c8 <prvIdleTask+0x30>)
 800e1ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1b2:	601a      	str	r2, [r3, #0]
 800e1b4:	f3bf 8f4f 	dsb	sy
 800e1b8:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800e1bc:	f7f2 fc8c 	bl	8000ad8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800e1c0:	e7ee      	b.n	800e1a0 <prvIdleTask+0x8>
 800e1c2:	bf00      	nop
 800e1c4:	200003c4 	.word	0x200003c4
 800e1c8:	e000ed04 	.word	0xe000ed04

0800e1cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b082      	sub	sp, #8
 800e1d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	607b      	str	r3, [r7, #4]
 800e1d6:	e00c      	b.n	800e1f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e1d8:	687a      	ldr	r2, [r7, #4]
 800e1da:	4613      	mov	r3, r2
 800e1dc:	009b      	lsls	r3, r3, #2
 800e1de:	4413      	add	r3, r2
 800e1e0:	009b      	lsls	r3, r3, #2
 800e1e2:	4a12      	ldr	r2, [pc, #72]	; (800e22c <prvInitialiseTaskLists+0x60>)
 800e1e4:	4413      	add	r3, r2
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	f7fe fab8 	bl	800c75c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	3301      	adds	r3, #1
 800e1f0:	607b      	str	r3, [r7, #4]
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	2b06      	cmp	r3, #6
 800e1f6:	d9ef      	bls.n	800e1d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e1f8:	480d      	ldr	r0, [pc, #52]	; (800e230 <prvInitialiseTaskLists+0x64>)
 800e1fa:	f7fe faaf 	bl	800c75c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e1fe:	480d      	ldr	r0, [pc, #52]	; (800e234 <prvInitialiseTaskLists+0x68>)
 800e200:	f7fe faac 	bl	800c75c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e204:	480c      	ldr	r0, [pc, #48]	; (800e238 <prvInitialiseTaskLists+0x6c>)
 800e206:	f7fe faa9 	bl	800c75c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e20a:	480c      	ldr	r0, [pc, #48]	; (800e23c <prvInitialiseTaskLists+0x70>)
 800e20c:	f7fe faa6 	bl	800c75c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e210:	480b      	ldr	r0, [pc, #44]	; (800e240 <prvInitialiseTaskLists+0x74>)
 800e212:	f7fe faa3 	bl	800c75c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e216:	4b0b      	ldr	r3, [pc, #44]	; (800e244 <prvInitialiseTaskLists+0x78>)
 800e218:	4a05      	ldr	r2, [pc, #20]	; (800e230 <prvInitialiseTaskLists+0x64>)
 800e21a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e21c:	4b0a      	ldr	r3, [pc, #40]	; (800e248 <prvInitialiseTaskLists+0x7c>)
 800e21e:	4a05      	ldr	r2, [pc, #20]	; (800e234 <prvInitialiseTaskLists+0x68>)
 800e220:	601a      	str	r2, [r3, #0]
}
 800e222:	bf00      	nop
 800e224:	3708      	adds	r7, #8
 800e226:	46bd      	mov	sp, r7
 800e228:	bd80      	pop	{r7, pc}
 800e22a:	bf00      	nop
 800e22c:	200003c4 	.word	0x200003c4
 800e230:	20000450 	.word	0x20000450
 800e234:	20000464 	.word	0x20000464
 800e238:	20000480 	.word	0x20000480
 800e23c:	20000494 	.word	0x20000494
 800e240:	200004ac 	.word	0x200004ac
 800e244:	20000478 	.word	0x20000478
 800e248:	2000047c 	.word	0x2000047c

0800e24c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e24c:	b580      	push	{r7, lr}
 800e24e:	b082      	sub	sp, #8
 800e250:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e252:	e019      	b.n	800e288 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e254:	f000 fbb8 	bl	800e9c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e258:	4b0f      	ldr	r3, [pc, #60]	; (800e298 <prvCheckTasksWaitingTermination+0x4c>)
 800e25a:	68db      	ldr	r3, [r3, #12]
 800e25c:	68db      	ldr	r3, [r3, #12]
 800e25e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	3304      	adds	r3, #4
 800e264:	4618      	mov	r0, r3
 800e266:	f7fe fb03 	bl	800c870 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e26a:	4b0c      	ldr	r3, [pc, #48]	; (800e29c <prvCheckTasksWaitingTermination+0x50>)
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	3b01      	subs	r3, #1
 800e270:	4a0a      	ldr	r2, [pc, #40]	; (800e29c <prvCheckTasksWaitingTermination+0x50>)
 800e272:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e274:	4b0a      	ldr	r3, [pc, #40]	; (800e2a0 <prvCheckTasksWaitingTermination+0x54>)
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	3b01      	subs	r3, #1
 800e27a:	4a09      	ldr	r2, [pc, #36]	; (800e2a0 <prvCheckTasksWaitingTermination+0x54>)
 800e27c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e27e:	f000 fbd5 	bl	800ea2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e282:	6878      	ldr	r0, [r7, #4]
 800e284:	f000 f80e 	bl	800e2a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e288:	4b05      	ldr	r3, [pc, #20]	; (800e2a0 <prvCheckTasksWaitingTermination+0x54>)
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d1e1      	bne.n	800e254 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e290:	bf00      	nop
 800e292:	3708      	adds	r7, #8
 800e294:	46bd      	mov	sp, r7
 800e296:	bd80      	pop	{r7, pc}
 800e298:	20000494 	.word	0x20000494
 800e29c:	200004c0 	.word	0x200004c0
 800e2a0:	200004a8 	.word	0x200004a8

0800e2a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e2a4:	b580      	push	{r7, lr}
 800e2a6:	b084      	sub	sp, #16
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d108      	bne.n	800e2c8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	f000 fd72 	bl	800eda4 <vPortFree>
				vPortFree( pxTCB );
 800e2c0:	6878      	ldr	r0, [r7, #4]
 800e2c2:	f000 fd6f 	bl	800eda4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e2c6:	e019      	b.n	800e2fc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800e2ce:	2b01      	cmp	r3, #1
 800e2d0:	d103      	bne.n	800e2da <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e2d2:	6878      	ldr	r0, [r7, #4]
 800e2d4:	f000 fd66 	bl	800eda4 <vPortFree>
	}
 800e2d8:	e010      	b.n	800e2fc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800e2e0:	2b02      	cmp	r3, #2
 800e2e2:	d00b      	beq.n	800e2fc <prvDeleteTCB+0x58>
 800e2e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2e8:	b672      	cpsid	i
 800e2ea:	f383 8811 	msr	BASEPRI, r3
 800e2ee:	f3bf 8f6f 	isb	sy
 800e2f2:	f3bf 8f4f 	dsb	sy
 800e2f6:	b662      	cpsie	i
 800e2f8:	60fb      	str	r3, [r7, #12]
 800e2fa:	e7fe      	b.n	800e2fa <prvDeleteTCB+0x56>
	}
 800e2fc:	bf00      	nop
 800e2fe:	3710      	adds	r7, #16
 800e300:	46bd      	mov	sp, r7
 800e302:	bd80      	pop	{r7, pc}

0800e304 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e304:	b480      	push	{r7}
 800e306:	b083      	sub	sp, #12
 800e308:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e30a:	4b0c      	ldr	r3, [pc, #48]	; (800e33c <prvResetNextTaskUnblockTime+0x38>)
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	2b00      	cmp	r3, #0
 800e312:	d104      	bne.n	800e31e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e314:	4b0a      	ldr	r3, [pc, #40]	; (800e340 <prvResetNextTaskUnblockTime+0x3c>)
 800e316:	f04f 32ff 	mov.w	r2, #4294967295
 800e31a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e31c:	e008      	b.n	800e330 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e31e:	4b07      	ldr	r3, [pc, #28]	; (800e33c <prvResetNextTaskUnblockTime+0x38>)
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	68db      	ldr	r3, [r3, #12]
 800e324:	68db      	ldr	r3, [r3, #12]
 800e326:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	685b      	ldr	r3, [r3, #4]
 800e32c:	4a04      	ldr	r2, [pc, #16]	; (800e340 <prvResetNextTaskUnblockTime+0x3c>)
 800e32e:	6013      	str	r3, [r2, #0]
}
 800e330:	bf00      	nop
 800e332:	370c      	adds	r7, #12
 800e334:	46bd      	mov	sp, r7
 800e336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e33a:	4770      	bx	lr
 800e33c:	20000478 	.word	0x20000478
 800e340:	200004e0 	.word	0x200004e0

0800e344 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e344:	b480      	push	{r7}
 800e346:	b083      	sub	sp, #12
 800e348:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e34a:	4b0b      	ldr	r3, [pc, #44]	; (800e378 <xTaskGetSchedulerState+0x34>)
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d102      	bne.n	800e358 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e352:	2301      	movs	r3, #1
 800e354:	607b      	str	r3, [r7, #4]
 800e356:	e008      	b.n	800e36a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e358:	4b08      	ldr	r3, [pc, #32]	; (800e37c <xTaskGetSchedulerState+0x38>)
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d102      	bne.n	800e366 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e360:	2302      	movs	r3, #2
 800e362:	607b      	str	r3, [r7, #4]
 800e364:	e001      	b.n	800e36a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e366:	2300      	movs	r3, #0
 800e368:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e36a:	687b      	ldr	r3, [r7, #4]
	}
 800e36c:	4618      	mov	r0, r3
 800e36e:	370c      	adds	r7, #12
 800e370:	46bd      	mov	sp, r7
 800e372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e376:	4770      	bx	lr
 800e378:	200004cc 	.word	0x200004cc
 800e37c:	200004e8 	.word	0x200004e8

0800e380 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e380:	b580      	push	{r7, lr}
 800e382:	b084      	sub	sp, #16
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e38c:	2300      	movs	r3, #0
 800e38e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	2b00      	cmp	r3, #0
 800e394:	d069      	beq.n	800e46a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e396:	68bb      	ldr	r3, [r7, #8]
 800e398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e39a:	4b36      	ldr	r3, [pc, #216]	; (800e474 <xTaskPriorityInherit+0xf4>)
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3a0:	429a      	cmp	r2, r3
 800e3a2:	d259      	bcs.n	800e458 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e3a4:	68bb      	ldr	r3, [r7, #8]
 800e3a6:	699b      	ldr	r3, [r3, #24]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	db06      	blt.n	800e3ba <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e3ac:	4b31      	ldr	r3, [pc, #196]	; (800e474 <xTaskPriorityInherit+0xf4>)
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3b2:	f1c3 0207 	rsb	r2, r3, #7
 800e3b6:	68bb      	ldr	r3, [r7, #8]
 800e3b8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e3ba:	68bb      	ldr	r3, [r7, #8]
 800e3bc:	6959      	ldr	r1, [r3, #20]
 800e3be:	68bb      	ldr	r3, [r7, #8]
 800e3c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3c2:	4613      	mov	r3, r2
 800e3c4:	009b      	lsls	r3, r3, #2
 800e3c6:	4413      	add	r3, r2
 800e3c8:	009b      	lsls	r3, r3, #2
 800e3ca:	4a2b      	ldr	r2, [pc, #172]	; (800e478 <xTaskPriorityInherit+0xf8>)
 800e3cc:	4413      	add	r3, r2
 800e3ce:	4299      	cmp	r1, r3
 800e3d0:	d13a      	bne.n	800e448 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e3d2:	68bb      	ldr	r3, [r7, #8]
 800e3d4:	3304      	adds	r3, #4
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f7fe fa4a 	bl	800c870 <uxListRemove>
 800e3dc:	4603      	mov	r3, r0
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d115      	bne.n	800e40e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800e3e2:	68bb      	ldr	r3, [r7, #8]
 800e3e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3e6:	4924      	ldr	r1, [pc, #144]	; (800e478 <xTaskPriorityInherit+0xf8>)
 800e3e8:	4613      	mov	r3, r2
 800e3ea:	009b      	lsls	r3, r3, #2
 800e3ec:	4413      	add	r3, r2
 800e3ee:	009b      	lsls	r3, r3, #2
 800e3f0:	440b      	add	r3, r1
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d10a      	bne.n	800e40e <xTaskPriorityInherit+0x8e>
 800e3f8:	68bb      	ldr	r3, [r7, #8]
 800e3fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3fc:	2201      	movs	r2, #1
 800e3fe:	fa02 f303 	lsl.w	r3, r2, r3
 800e402:	43da      	mvns	r2, r3
 800e404:	4b1d      	ldr	r3, [pc, #116]	; (800e47c <xTaskPriorityInherit+0xfc>)
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	4013      	ands	r3, r2
 800e40a:	4a1c      	ldr	r2, [pc, #112]	; (800e47c <xTaskPriorityInherit+0xfc>)
 800e40c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e40e:	4b19      	ldr	r3, [pc, #100]	; (800e474 <xTaskPriorityInherit+0xf4>)
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e414:	68bb      	ldr	r3, [r7, #8]
 800e416:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e418:	68bb      	ldr	r3, [r7, #8]
 800e41a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e41c:	2201      	movs	r2, #1
 800e41e:	409a      	lsls	r2, r3
 800e420:	4b16      	ldr	r3, [pc, #88]	; (800e47c <xTaskPriorityInherit+0xfc>)
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	4313      	orrs	r3, r2
 800e426:	4a15      	ldr	r2, [pc, #84]	; (800e47c <xTaskPriorityInherit+0xfc>)
 800e428:	6013      	str	r3, [r2, #0]
 800e42a:	68bb      	ldr	r3, [r7, #8]
 800e42c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e42e:	4613      	mov	r3, r2
 800e430:	009b      	lsls	r3, r3, #2
 800e432:	4413      	add	r3, r2
 800e434:	009b      	lsls	r3, r3, #2
 800e436:	4a10      	ldr	r2, [pc, #64]	; (800e478 <xTaskPriorityInherit+0xf8>)
 800e438:	441a      	add	r2, r3
 800e43a:	68bb      	ldr	r3, [r7, #8]
 800e43c:	3304      	adds	r3, #4
 800e43e:	4619      	mov	r1, r3
 800e440:	4610      	mov	r0, r2
 800e442:	f7fe f9b8 	bl	800c7b6 <vListInsertEnd>
 800e446:	e004      	b.n	800e452 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e448:	4b0a      	ldr	r3, [pc, #40]	; (800e474 <xTaskPriorityInherit+0xf4>)
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e44e:	68bb      	ldr	r3, [r7, #8]
 800e450:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e452:	2301      	movs	r3, #1
 800e454:	60fb      	str	r3, [r7, #12]
 800e456:	e008      	b.n	800e46a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e458:	68bb      	ldr	r3, [r7, #8]
 800e45a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e45c:	4b05      	ldr	r3, [pc, #20]	; (800e474 <xTaskPriorityInherit+0xf4>)
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e462:	429a      	cmp	r2, r3
 800e464:	d201      	bcs.n	800e46a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e466:	2301      	movs	r3, #1
 800e468:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e46a:	68fb      	ldr	r3, [r7, #12]
	}
 800e46c:	4618      	mov	r0, r3
 800e46e:	3710      	adds	r7, #16
 800e470:	46bd      	mov	sp, r7
 800e472:	bd80      	pop	{r7, pc}
 800e474:	200003c0 	.word	0x200003c0
 800e478:	200003c4 	.word	0x200003c4
 800e47c:	200004c8 	.word	0x200004c8

0800e480 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e480:	b580      	push	{r7, lr}
 800e482:	b086      	sub	sp, #24
 800e484:	af00      	add	r7, sp, #0
 800e486:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e48c:	2300      	movs	r3, #0
 800e48e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d070      	beq.n	800e578 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e496:	4b3b      	ldr	r3, [pc, #236]	; (800e584 <xTaskPriorityDisinherit+0x104>)
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	693a      	ldr	r2, [r7, #16]
 800e49c:	429a      	cmp	r2, r3
 800e49e:	d00b      	beq.n	800e4b8 <xTaskPriorityDisinherit+0x38>
 800e4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4a4:	b672      	cpsid	i
 800e4a6:	f383 8811 	msr	BASEPRI, r3
 800e4aa:	f3bf 8f6f 	isb	sy
 800e4ae:	f3bf 8f4f 	dsb	sy
 800e4b2:	b662      	cpsie	i
 800e4b4:	60fb      	str	r3, [r7, #12]
 800e4b6:	e7fe      	b.n	800e4b6 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800e4b8:	693b      	ldr	r3, [r7, #16]
 800e4ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d10b      	bne.n	800e4d8 <xTaskPriorityDisinherit+0x58>
 800e4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4c4:	b672      	cpsid	i
 800e4c6:	f383 8811 	msr	BASEPRI, r3
 800e4ca:	f3bf 8f6f 	isb	sy
 800e4ce:	f3bf 8f4f 	dsb	sy
 800e4d2:	b662      	cpsie	i
 800e4d4:	60bb      	str	r3, [r7, #8]
 800e4d6:	e7fe      	b.n	800e4d6 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800e4d8:	693b      	ldr	r3, [r7, #16]
 800e4da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e4dc:	1e5a      	subs	r2, r3, #1
 800e4de:	693b      	ldr	r3, [r7, #16]
 800e4e0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e4e2:	693b      	ldr	r3, [r7, #16]
 800e4e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4e6:	693b      	ldr	r3, [r7, #16]
 800e4e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4ea:	429a      	cmp	r2, r3
 800e4ec:	d044      	beq.n	800e578 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e4ee:	693b      	ldr	r3, [r7, #16]
 800e4f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d140      	bne.n	800e578 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e4f6:	693b      	ldr	r3, [r7, #16]
 800e4f8:	3304      	adds	r3, #4
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	f7fe f9b8 	bl	800c870 <uxListRemove>
 800e500:	4603      	mov	r3, r0
 800e502:	2b00      	cmp	r3, #0
 800e504:	d115      	bne.n	800e532 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e506:	693b      	ldr	r3, [r7, #16]
 800e508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e50a:	491f      	ldr	r1, [pc, #124]	; (800e588 <xTaskPriorityDisinherit+0x108>)
 800e50c:	4613      	mov	r3, r2
 800e50e:	009b      	lsls	r3, r3, #2
 800e510:	4413      	add	r3, r2
 800e512:	009b      	lsls	r3, r3, #2
 800e514:	440b      	add	r3, r1
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d10a      	bne.n	800e532 <xTaskPriorityDisinherit+0xb2>
 800e51c:	693b      	ldr	r3, [r7, #16]
 800e51e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e520:	2201      	movs	r2, #1
 800e522:	fa02 f303 	lsl.w	r3, r2, r3
 800e526:	43da      	mvns	r2, r3
 800e528:	4b18      	ldr	r3, [pc, #96]	; (800e58c <xTaskPriorityDisinherit+0x10c>)
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	4013      	ands	r3, r2
 800e52e:	4a17      	ldr	r2, [pc, #92]	; (800e58c <xTaskPriorityDisinherit+0x10c>)
 800e530:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e532:	693b      	ldr	r3, [r7, #16]
 800e534:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e536:	693b      	ldr	r3, [r7, #16]
 800e538:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e53a:	693b      	ldr	r3, [r7, #16]
 800e53c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e53e:	f1c3 0207 	rsb	r2, r3, #7
 800e542:	693b      	ldr	r3, [r7, #16]
 800e544:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e546:	693b      	ldr	r3, [r7, #16]
 800e548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e54a:	2201      	movs	r2, #1
 800e54c:	409a      	lsls	r2, r3
 800e54e:	4b0f      	ldr	r3, [pc, #60]	; (800e58c <xTaskPriorityDisinherit+0x10c>)
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	4313      	orrs	r3, r2
 800e554:	4a0d      	ldr	r2, [pc, #52]	; (800e58c <xTaskPriorityDisinherit+0x10c>)
 800e556:	6013      	str	r3, [r2, #0]
 800e558:	693b      	ldr	r3, [r7, #16]
 800e55a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e55c:	4613      	mov	r3, r2
 800e55e:	009b      	lsls	r3, r3, #2
 800e560:	4413      	add	r3, r2
 800e562:	009b      	lsls	r3, r3, #2
 800e564:	4a08      	ldr	r2, [pc, #32]	; (800e588 <xTaskPriorityDisinherit+0x108>)
 800e566:	441a      	add	r2, r3
 800e568:	693b      	ldr	r3, [r7, #16]
 800e56a:	3304      	adds	r3, #4
 800e56c:	4619      	mov	r1, r3
 800e56e:	4610      	mov	r0, r2
 800e570:	f7fe f921 	bl	800c7b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e574:	2301      	movs	r3, #1
 800e576:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e578:	697b      	ldr	r3, [r7, #20]
	}
 800e57a:	4618      	mov	r0, r3
 800e57c:	3718      	adds	r7, #24
 800e57e:	46bd      	mov	sp, r7
 800e580:	bd80      	pop	{r7, pc}
 800e582:	bf00      	nop
 800e584:	200003c0 	.word	0x200003c0
 800e588:	200003c4 	.word	0x200003c4
 800e58c:	200004c8 	.word	0x200004c8

0800e590 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e590:	b580      	push	{r7, lr}
 800e592:	b088      	sub	sp, #32
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
 800e598:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e59e:	2301      	movs	r3, #1
 800e5a0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	f000 8085 	beq.w	800e6b4 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e5aa:	69bb      	ldr	r3, [r7, #24]
 800e5ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d10b      	bne.n	800e5ca <vTaskPriorityDisinheritAfterTimeout+0x3a>
 800e5b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5b6:	b672      	cpsid	i
 800e5b8:	f383 8811 	msr	BASEPRI, r3
 800e5bc:	f3bf 8f6f 	isb	sy
 800e5c0:	f3bf 8f4f 	dsb	sy
 800e5c4:	b662      	cpsie	i
 800e5c6:	60fb      	str	r3, [r7, #12]
 800e5c8:	e7fe      	b.n	800e5c8 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e5ca:	69bb      	ldr	r3, [r7, #24]
 800e5cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5ce:	683a      	ldr	r2, [r7, #0]
 800e5d0:	429a      	cmp	r2, r3
 800e5d2:	d902      	bls.n	800e5da <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e5d4:	683b      	ldr	r3, [r7, #0]
 800e5d6:	61fb      	str	r3, [r7, #28]
 800e5d8:	e002      	b.n	800e5e0 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e5da:	69bb      	ldr	r3, [r7, #24]
 800e5dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5de:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e5e0:	69bb      	ldr	r3, [r7, #24]
 800e5e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5e4:	69fa      	ldr	r2, [r7, #28]
 800e5e6:	429a      	cmp	r2, r3
 800e5e8:	d064      	beq.n	800e6b4 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e5ea:	69bb      	ldr	r3, [r7, #24]
 800e5ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e5ee:	697a      	ldr	r2, [r7, #20]
 800e5f0:	429a      	cmp	r2, r3
 800e5f2:	d15f      	bne.n	800e6b4 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e5f4:	4b31      	ldr	r3, [pc, #196]	; (800e6bc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	69ba      	ldr	r2, [r7, #24]
 800e5fa:	429a      	cmp	r2, r3
 800e5fc:	d10b      	bne.n	800e616 <vTaskPriorityDisinheritAfterTimeout+0x86>
 800e5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e602:	b672      	cpsid	i
 800e604:	f383 8811 	msr	BASEPRI, r3
 800e608:	f3bf 8f6f 	isb	sy
 800e60c:	f3bf 8f4f 	dsb	sy
 800e610:	b662      	cpsie	i
 800e612:	60bb      	str	r3, [r7, #8]
 800e614:	e7fe      	b.n	800e614 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e616:	69bb      	ldr	r3, [r7, #24]
 800e618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e61a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e61c:	69bb      	ldr	r3, [r7, #24]
 800e61e:	69fa      	ldr	r2, [r7, #28]
 800e620:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e622:	69bb      	ldr	r3, [r7, #24]
 800e624:	699b      	ldr	r3, [r3, #24]
 800e626:	2b00      	cmp	r3, #0
 800e628:	db04      	blt.n	800e634 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e62a:	69fb      	ldr	r3, [r7, #28]
 800e62c:	f1c3 0207 	rsb	r2, r3, #7
 800e630:	69bb      	ldr	r3, [r7, #24]
 800e632:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e634:	69bb      	ldr	r3, [r7, #24]
 800e636:	6959      	ldr	r1, [r3, #20]
 800e638:	693a      	ldr	r2, [r7, #16]
 800e63a:	4613      	mov	r3, r2
 800e63c:	009b      	lsls	r3, r3, #2
 800e63e:	4413      	add	r3, r2
 800e640:	009b      	lsls	r3, r3, #2
 800e642:	4a1f      	ldr	r2, [pc, #124]	; (800e6c0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e644:	4413      	add	r3, r2
 800e646:	4299      	cmp	r1, r3
 800e648:	d134      	bne.n	800e6b4 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e64a:	69bb      	ldr	r3, [r7, #24]
 800e64c:	3304      	adds	r3, #4
 800e64e:	4618      	mov	r0, r3
 800e650:	f7fe f90e 	bl	800c870 <uxListRemove>
 800e654:	4603      	mov	r3, r0
 800e656:	2b00      	cmp	r3, #0
 800e658:	d115      	bne.n	800e686 <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e65a:	69bb      	ldr	r3, [r7, #24]
 800e65c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e65e:	4918      	ldr	r1, [pc, #96]	; (800e6c0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e660:	4613      	mov	r3, r2
 800e662:	009b      	lsls	r3, r3, #2
 800e664:	4413      	add	r3, r2
 800e666:	009b      	lsls	r3, r3, #2
 800e668:	440b      	add	r3, r1
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d10a      	bne.n	800e686 <vTaskPriorityDisinheritAfterTimeout+0xf6>
 800e670:	69bb      	ldr	r3, [r7, #24]
 800e672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e674:	2201      	movs	r2, #1
 800e676:	fa02 f303 	lsl.w	r3, r2, r3
 800e67a:	43da      	mvns	r2, r3
 800e67c:	4b11      	ldr	r3, [pc, #68]	; (800e6c4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	4013      	ands	r3, r2
 800e682:	4a10      	ldr	r2, [pc, #64]	; (800e6c4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e684:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e686:	69bb      	ldr	r3, [r7, #24]
 800e688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e68a:	2201      	movs	r2, #1
 800e68c:	409a      	lsls	r2, r3
 800e68e:	4b0d      	ldr	r3, [pc, #52]	; (800e6c4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	4313      	orrs	r3, r2
 800e694:	4a0b      	ldr	r2, [pc, #44]	; (800e6c4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e696:	6013      	str	r3, [r2, #0]
 800e698:	69bb      	ldr	r3, [r7, #24]
 800e69a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e69c:	4613      	mov	r3, r2
 800e69e:	009b      	lsls	r3, r3, #2
 800e6a0:	4413      	add	r3, r2
 800e6a2:	009b      	lsls	r3, r3, #2
 800e6a4:	4a06      	ldr	r2, [pc, #24]	; (800e6c0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e6a6:	441a      	add	r2, r3
 800e6a8:	69bb      	ldr	r3, [r7, #24]
 800e6aa:	3304      	adds	r3, #4
 800e6ac:	4619      	mov	r1, r3
 800e6ae:	4610      	mov	r0, r2
 800e6b0:	f7fe f881 	bl	800c7b6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e6b4:	bf00      	nop
 800e6b6:	3720      	adds	r7, #32
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	bd80      	pop	{r7, pc}
 800e6bc:	200003c0 	.word	0x200003c0
 800e6c0:	200003c4 	.word	0x200003c4
 800e6c4:	200004c8 	.word	0x200004c8

0800e6c8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e6c8:	b480      	push	{r7}
 800e6ca:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e6cc:	4b07      	ldr	r3, [pc, #28]	; (800e6ec <pvTaskIncrementMutexHeldCount+0x24>)
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d004      	beq.n	800e6de <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e6d4:	4b05      	ldr	r3, [pc, #20]	; (800e6ec <pvTaskIncrementMutexHeldCount+0x24>)
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e6da:	3201      	adds	r2, #1
 800e6dc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800e6de:	4b03      	ldr	r3, [pc, #12]	; (800e6ec <pvTaskIncrementMutexHeldCount+0x24>)
 800e6e0:	681b      	ldr	r3, [r3, #0]
	}
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ea:	4770      	bx	lr
 800e6ec:	200003c0 	.word	0x200003c0

0800e6f0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b084      	sub	sp, #16
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	6078      	str	r0, [r7, #4]
 800e6f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e6fa:	4b29      	ldr	r3, [pc, #164]	; (800e7a0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e700:	4b28      	ldr	r3, [pc, #160]	; (800e7a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	3304      	adds	r3, #4
 800e706:	4618      	mov	r0, r3
 800e708:	f7fe f8b2 	bl	800c870 <uxListRemove>
 800e70c:	4603      	mov	r3, r0
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d10b      	bne.n	800e72a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e712:	4b24      	ldr	r3, [pc, #144]	; (800e7a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e718:	2201      	movs	r2, #1
 800e71a:	fa02 f303 	lsl.w	r3, r2, r3
 800e71e:	43da      	mvns	r2, r3
 800e720:	4b21      	ldr	r3, [pc, #132]	; (800e7a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	4013      	ands	r3, r2
 800e726:	4a20      	ldr	r2, [pc, #128]	; (800e7a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e728:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e730:	d10a      	bne.n	800e748 <prvAddCurrentTaskToDelayedList+0x58>
 800e732:	683b      	ldr	r3, [r7, #0]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d007      	beq.n	800e748 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e738:	4b1a      	ldr	r3, [pc, #104]	; (800e7a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	3304      	adds	r3, #4
 800e73e:	4619      	mov	r1, r3
 800e740:	481a      	ldr	r0, [pc, #104]	; (800e7ac <prvAddCurrentTaskToDelayedList+0xbc>)
 800e742:	f7fe f838 	bl	800c7b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e746:	e026      	b.n	800e796 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e748:	68fa      	ldr	r2, [r7, #12]
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	4413      	add	r3, r2
 800e74e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e750:	4b14      	ldr	r3, [pc, #80]	; (800e7a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	68ba      	ldr	r2, [r7, #8]
 800e756:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e758:	68ba      	ldr	r2, [r7, #8]
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	429a      	cmp	r2, r3
 800e75e:	d209      	bcs.n	800e774 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e760:	4b13      	ldr	r3, [pc, #76]	; (800e7b0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e762:	681a      	ldr	r2, [r3, #0]
 800e764:	4b0f      	ldr	r3, [pc, #60]	; (800e7a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	3304      	adds	r3, #4
 800e76a:	4619      	mov	r1, r3
 800e76c:	4610      	mov	r0, r2
 800e76e:	f7fe f846 	bl	800c7fe <vListInsert>
}
 800e772:	e010      	b.n	800e796 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e774:	4b0f      	ldr	r3, [pc, #60]	; (800e7b4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e776:	681a      	ldr	r2, [r3, #0]
 800e778:	4b0a      	ldr	r3, [pc, #40]	; (800e7a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	3304      	adds	r3, #4
 800e77e:	4619      	mov	r1, r3
 800e780:	4610      	mov	r0, r2
 800e782:	f7fe f83c 	bl	800c7fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e786:	4b0c      	ldr	r3, [pc, #48]	; (800e7b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	68ba      	ldr	r2, [r7, #8]
 800e78c:	429a      	cmp	r2, r3
 800e78e:	d202      	bcs.n	800e796 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e790:	4a09      	ldr	r2, [pc, #36]	; (800e7b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e792:	68bb      	ldr	r3, [r7, #8]
 800e794:	6013      	str	r3, [r2, #0]
}
 800e796:	bf00      	nop
 800e798:	3710      	adds	r7, #16
 800e79a:	46bd      	mov	sp, r7
 800e79c:	bd80      	pop	{r7, pc}
 800e79e:	bf00      	nop
 800e7a0:	200004c4 	.word	0x200004c4
 800e7a4:	200003c0 	.word	0x200003c0
 800e7a8:	200004c8 	.word	0x200004c8
 800e7ac:	200004ac 	.word	0x200004ac
 800e7b0:	2000047c 	.word	0x2000047c
 800e7b4:	20000478 	.word	0x20000478
 800e7b8:	200004e0 	.word	0x200004e0

0800e7bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e7bc:	b480      	push	{r7}
 800e7be:	b085      	sub	sp, #20
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	60f8      	str	r0, [r7, #12]
 800e7c4:	60b9      	str	r1, [r7, #8]
 800e7c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	3b04      	subs	r3, #4
 800e7cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e7d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	3b04      	subs	r3, #4
 800e7da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e7dc:	68bb      	ldr	r3, [r7, #8]
 800e7de:	f023 0201 	bic.w	r2, r3, #1
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	3b04      	subs	r3, #4
 800e7ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e7ec:	4a0c      	ldr	r2, [pc, #48]	; (800e820 <pxPortInitialiseStack+0x64>)
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	3b14      	subs	r3, #20
 800e7f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e7f8:	687a      	ldr	r2, [r7, #4]
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	3b04      	subs	r3, #4
 800e802:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	f06f 0202 	mvn.w	r2, #2
 800e80a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	3b20      	subs	r3, #32
 800e810:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e812:	68fb      	ldr	r3, [r7, #12]
}
 800e814:	4618      	mov	r0, r3
 800e816:	3714      	adds	r7, #20
 800e818:	46bd      	mov	sp, r7
 800e81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81e:	4770      	bx	lr
 800e820:	0800e825 	.word	0x0800e825

0800e824 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e824:	b480      	push	{r7}
 800e826:	b085      	sub	sp, #20
 800e828:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e82a:	2300      	movs	r3, #0
 800e82c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e82e:	4b13      	ldr	r3, [pc, #76]	; (800e87c <prvTaskExitError+0x58>)
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e836:	d00b      	beq.n	800e850 <prvTaskExitError+0x2c>
 800e838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e83c:	b672      	cpsid	i
 800e83e:	f383 8811 	msr	BASEPRI, r3
 800e842:	f3bf 8f6f 	isb	sy
 800e846:	f3bf 8f4f 	dsb	sy
 800e84a:	b662      	cpsie	i
 800e84c:	60fb      	str	r3, [r7, #12]
 800e84e:	e7fe      	b.n	800e84e <prvTaskExitError+0x2a>
 800e850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e854:	b672      	cpsid	i
 800e856:	f383 8811 	msr	BASEPRI, r3
 800e85a:	f3bf 8f6f 	isb	sy
 800e85e:	f3bf 8f4f 	dsb	sy
 800e862:	b662      	cpsie	i
 800e864:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e866:	bf00      	nop
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d0fc      	beq.n	800e868 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e86e:	bf00      	nop
 800e870:	3714      	adds	r7, #20
 800e872:	46bd      	mov	sp, r7
 800e874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e878:	4770      	bx	lr
 800e87a:	bf00      	nop
 800e87c:	20000024 	.word	0x20000024

0800e880 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e880:	4b07      	ldr	r3, [pc, #28]	; (800e8a0 <pxCurrentTCBConst2>)
 800e882:	6819      	ldr	r1, [r3, #0]
 800e884:	6808      	ldr	r0, [r1, #0]
 800e886:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e88a:	f380 8809 	msr	PSP, r0
 800e88e:	f3bf 8f6f 	isb	sy
 800e892:	f04f 0000 	mov.w	r0, #0
 800e896:	f380 8811 	msr	BASEPRI, r0
 800e89a:	4770      	bx	lr
 800e89c:	f3af 8000 	nop.w

0800e8a0 <pxCurrentTCBConst2>:
 800e8a0:	200003c0 	.word	0x200003c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e8a4:	bf00      	nop
 800e8a6:	bf00      	nop

0800e8a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e8a8:	4808      	ldr	r0, [pc, #32]	; (800e8cc <prvPortStartFirstTask+0x24>)
 800e8aa:	6800      	ldr	r0, [r0, #0]
 800e8ac:	6800      	ldr	r0, [r0, #0]
 800e8ae:	f380 8808 	msr	MSP, r0
 800e8b2:	f04f 0000 	mov.w	r0, #0
 800e8b6:	f380 8814 	msr	CONTROL, r0
 800e8ba:	b662      	cpsie	i
 800e8bc:	b661      	cpsie	f
 800e8be:	f3bf 8f4f 	dsb	sy
 800e8c2:	f3bf 8f6f 	isb	sy
 800e8c6:	df00      	svc	0
 800e8c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e8ca:	bf00      	nop
 800e8cc:	e000ed08 	.word	0xe000ed08

0800e8d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b084      	sub	sp, #16
 800e8d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e8d6:	4b36      	ldr	r3, [pc, #216]	; (800e9b0 <xPortStartScheduler+0xe0>)
 800e8d8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	781b      	ldrb	r3, [r3, #0]
 800e8de:	b2db      	uxtb	r3, r3
 800e8e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	22ff      	movs	r2, #255	; 0xff
 800e8e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	781b      	ldrb	r3, [r3, #0]
 800e8ec:	b2db      	uxtb	r3, r3
 800e8ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e8f0:	78fb      	ldrb	r3, [r7, #3]
 800e8f2:	b2db      	uxtb	r3, r3
 800e8f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e8f8:	b2da      	uxtb	r2, r3
 800e8fa:	4b2e      	ldr	r3, [pc, #184]	; (800e9b4 <xPortStartScheduler+0xe4>)
 800e8fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e8fe:	4b2e      	ldr	r3, [pc, #184]	; (800e9b8 <xPortStartScheduler+0xe8>)
 800e900:	2207      	movs	r2, #7
 800e902:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e904:	e009      	b.n	800e91a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800e906:	4b2c      	ldr	r3, [pc, #176]	; (800e9b8 <xPortStartScheduler+0xe8>)
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	3b01      	subs	r3, #1
 800e90c:	4a2a      	ldr	r2, [pc, #168]	; (800e9b8 <xPortStartScheduler+0xe8>)
 800e90e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e910:	78fb      	ldrb	r3, [r7, #3]
 800e912:	b2db      	uxtb	r3, r3
 800e914:	005b      	lsls	r3, r3, #1
 800e916:	b2db      	uxtb	r3, r3
 800e918:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e91a:	78fb      	ldrb	r3, [r7, #3]
 800e91c:	b2db      	uxtb	r3, r3
 800e91e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e922:	2b80      	cmp	r3, #128	; 0x80
 800e924:	d0ef      	beq.n	800e906 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e926:	4b24      	ldr	r3, [pc, #144]	; (800e9b8 <xPortStartScheduler+0xe8>)
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	f1c3 0307 	rsb	r3, r3, #7
 800e92e:	2b04      	cmp	r3, #4
 800e930:	d00b      	beq.n	800e94a <xPortStartScheduler+0x7a>
 800e932:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e936:	b672      	cpsid	i
 800e938:	f383 8811 	msr	BASEPRI, r3
 800e93c:	f3bf 8f6f 	isb	sy
 800e940:	f3bf 8f4f 	dsb	sy
 800e944:	b662      	cpsie	i
 800e946:	60bb      	str	r3, [r7, #8]
 800e948:	e7fe      	b.n	800e948 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e94a:	4b1b      	ldr	r3, [pc, #108]	; (800e9b8 <xPortStartScheduler+0xe8>)
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	021b      	lsls	r3, r3, #8
 800e950:	4a19      	ldr	r2, [pc, #100]	; (800e9b8 <xPortStartScheduler+0xe8>)
 800e952:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e954:	4b18      	ldr	r3, [pc, #96]	; (800e9b8 <xPortStartScheduler+0xe8>)
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e95c:	4a16      	ldr	r2, [pc, #88]	; (800e9b8 <xPortStartScheduler+0xe8>)
 800e95e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	b2da      	uxtb	r2, r3
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e968:	4b14      	ldr	r3, [pc, #80]	; (800e9bc <xPortStartScheduler+0xec>)
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	4a13      	ldr	r2, [pc, #76]	; (800e9bc <xPortStartScheduler+0xec>)
 800e96e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e972:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e974:	4b11      	ldr	r3, [pc, #68]	; (800e9bc <xPortStartScheduler+0xec>)
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	4a10      	ldr	r2, [pc, #64]	; (800e9bc <xPortStartScheduler+0xec>)
 800e97a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e97e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e980:	f000 f8d4 	bl	800eb2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e984:	4b0e      	ldr	r3, [pc, #56]	; (800e9c0 <xPortStartScheduler+0xf0>)
 800e986:	2200      	movs	r2, #0
 800e988:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e98a:	f000 f8f3 	bl	800eb74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e98e:	4b0d      	ldr	r3, [pc, #52]	; (800e9c4 <xPortStartScheduler+0xf4>)
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	4a0c      	ldr	r2, [pc, #48]	; (800e9c4 <xPortStartScheduler+0xf4>)
 800e994:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e998:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e99a:	f7ff ff85 	bl	800e8a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e99e:	f7ff fa69 	bl	800de74 <vTaskSwitchContext>
	prvTaskExitError();
 800e9a2:	f7ff ff3f 	bl	800e824 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e9a6:	2300      	movs	r3, #0
}
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	3710      	adds	r7, #16
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	bd80      	pop	{r7, pc}
 800e9b0:	e000e400 	.word	0xe000e400
 800e9b4:	200004ec 	.word	0x200004ec
 800e9b8:	200004f0 	.word	0x200004f0
 800e9bc:	e000ed20 	.word	0xe000ed20
 800e9c0:	20000024 	.word	0x20000024
 800e9c4:	e000ef34 	.word	0xe000ef34

0800e9c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e9c8:	b480      	push	{r7}
 800e9ca:	b083      	sub	sp, #12
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9d2:	b672      	cpsid	i
 800e9d4:	f383 8811 	msr	BASEPRI, r3
 800e9d8:	f3bf 8f6f 	isb	sy
 800e9dc:	f3bf 8f4f 	dsb	sy
 800e9e0:	b662      	cpsie	i
 800e9e2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e9e4:	4b0f      	ldr	r3, [pc, #60]	; (800ea24 <vPortEnterCritical+0x5c>)
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	3301      	adds	r3, #1
 800e9ea:	4a0e      	ldr	r2, [pc, #56]	; (800ea24 <vPortEnterCritical+0x5c>)
 800e9ec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e9ee:	4b0d      	ldr	r3, [pc, #52]	; (800ea24 <vPortEnterCritical+0x5c>)
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	2b01      	cmp	r3, #1
 800e9f4:	d110      	bne.n	800ea18 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e9f6:	4b0c      	ldr	r3, [pc, #48]	; (800ea28 <vPortEnterCritical+0x60>)
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	b2db      	uxtb	r3, r3
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d00b      	beq.n	800ea18 <vPortEnterCritical+0x50>
 800ea00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea04:	b672      	cpsid	i
 800ea06:	f383 8811 	msr	BASEPRI, r3
 800ea0a:	f3bf 8f6f 	isb	sy
 800ea0e:	f3bf 8f4f 	dsb	sy
 800ea12:	b662      	cpsie	i
 800ea14:	603b      	str	r3, [r7, #0]
 800ea16:	e7fe      	b.n	800ea16 <vPortEnterCritical+0x4e>
	}
}
 800ea18:	bf00      	nop
 800ea1a:	370c      	adds	r7, #12
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea22:	4770      	bx	lr
 800ea24:	20000024 	.word	0x20000024
 800ea28:	e000ed04 	.word	0xe000ed04

0800ea2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ea2c:	b480      	push	{r7}
 800ea2e:	b083      	sub	sp, #12
 800ea30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ea32:	4b12      	ldr	r3, [pc, #72]	; (800ea7c <vPortExitCritical+0x50>)
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d10b      	bne.n	800ea52 <vPortExitCritical+0x26>
 800ea3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea3e:	b672      	cpsid	i
 800ea40:	f383 8811 	msr	BASEPRI, r3
 800ea44:	f3bf 8f6f 	isb	sy
 800ea48:	f3bf 8f4f 	dsb	sy
 800ea4c:	b662      	cpsie	i
 800ea4e:	607b      	str	r3, [r7, #4]
 800ea50:	e7fe      	b.n	800ea50 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800ea52:	4b0a      	ldr	r3, [pc, #40]	; (800ea7c <vPortExitCritical+0x50>)
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	3b01      	subs	r3, #1
 800ea58:	4a08      	ldr	r2, [pc, #32]	; (800ea7c <vPortExitCritical+0x50>)
 800ea5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ea5c:	4b07      	ldr	r3, [pc, #28]	; (800ea7c <vPortExitCritical+0x50>)
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d104      	bne.n	800ea6e <vPortExitCritical+0x42>
 800ea64:	2300      	movs	r3, #0
 800ea66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ea68:	683b      	ldr	r3, [r7, #0]
 800ea6a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800ea6e:	bf00      	nop
 800ea70:	370c      	adds	r7, #12
 800ea72:	46bd      	mov	sp, r7
 800ea74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea78:	4770      	bx	lr
 800ea7a:	bf00      	nop
 800ea7c:	20000024 	.word	0x20000024

0800ea80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ea80:	f3ef 8009 	mrs	r0, PSP
 800ea84:	f3bf 8f6f 	isb	sy
 800ea88:	4b15      	ldr	r3, [pc, #84]	; (800eae0 <pxCurrentTCBConst>)
 800ea8a:	681a      	ldr	r2, [r3, #0]
 800ea8c:	f01e 0f10 	tst.w	lr, #16
 800ea90:	bf08      	it	eq
 800ea92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ea96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea9a:	6010      	str	r0, [r2, #0]
 800ea9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800eaa0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800eaa4:	b672      	cpsid	i
 800eaa6:	f380 8811 	msr	BASEPRI, r0
 800eaaa:	f3bf 8f4f 	dsb	sy
 800eaae:	f3bf 8f6f 	isb	sy
 800eab2:	b662      	cpsie	i
 800eab4:	f7ff f9de 	bl	800de74 <vTaskSwitchContext>
 800eab8:	f04f 0000 	mov.w	r0, #0
 800eabc:	f380 8811 	msr	BASEPRI, r0
 800eac0:	bc09      	pop	{r0, r3}
 800eac2:	6819      	ldr	r1, [r3, #0]
 800eac4:	6808      	ldr	r0, [r1, #0]
 800eac6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaca:	f01e 0f10 	tst.w	lr, #16
 800eace:	bf08      	it	eq
 800ead0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ead4:	f380 8809 	msr	PSP, r0
 800ead8:	f3bf 8f6f 	isb	sy
 800eadc:	4770      	bx	lr
 800eade:	bf00      	nop

0800eae0 <pxCurrentTCBConst>:
 800eae0:	200003c0 	.word	0x200003c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800eae4:	bf00      	nop
 800eae6:	bf00      	nop

0800eae8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800eae8:	b580      	push	{r7, lr}
 800eaea:	b082      	sub	sp, #8
 800eaec:	af00      	add	r7, sp, #0
	__asm volatile
 800eaee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaf2:	b672      	cpsid	i
 800eaf4:	f383 8811 	msr	BASEPRI, r3
 800eaf8:	f3bf 8f6f 	isb	sy
 800eafc:	f3bf 8f4f 	dsb	sy
 800eb00:	b662      	cpsie	i
 800eb02:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800eb04:	f7ff f8fc 	bl	800dd00 <xTaskIncrementTick>
 800eb08:	4603      	mov	r3, r0
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d003      	beq.n	800eb16 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800eb0e:	4b06      	ldr	r3, [pc, #24]	; (800eb28 <SysTick_Handler+0x40>)
 800eb10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb14:	601a      	str	r2, [r3, #0]
 800eb16:	2300      	movs	r3, #0
 800eb18:	603b      	str	r3, [r7, #0]
	__asm volatile
 800eb1a:	683b      	ldr	r3, [r7, #0]
 800eb1c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800eb20:	bf00      	nop
 800eb22:	3708      	adds	r7, #8
 800eb24:	46bd      	mov	sp, r7
 800eb26:	bd80      	pop	{r7, pc}
 800eb28:	e000ed04 	.word	0xe000ed04

0800eb2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800eb2c:	b480      	push	{r7}
 800eb2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800eb30:	4b0b      	ldr	r3, [pc, #44]	; (800eb60 <vPortSetupTimerInterrupt+0x34>)
 800eb32:	2200      	movs	r2, #0
 800eb34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800eb36:	4b0b      	ldr	r3, [pc, #44]	; (800eb64 <vPortSetupTimerInterrupt+0x38>)
 800eb38:	2200      	movs	r2, #0
 800eb3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800eb3c:	4b0a      	ldr	r3, [pc, #40]	; (800eb68 <vPortSetupTimerInterrupt+0x3c>)
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	4a0a      	ldr	r2, [pc, #40]	; (800eb6c <vPortSetupTimerInterrupt+0x40>)
 800eb42:	fba2 2303 	umull	r2, r3, r2, r3
 800eb46:	099b      	lsrs	r3, r3, #6
 800eb48:	4a09      	ldr	r2, [pc, #36]	; (800eb70 <vPortSetupTimerInterrupt+0x44>)
 800eb4a:	3b01      	subs	r3, #1
 800eb4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800eb4e:	4b04      	ldr	r3, [pc, #16]	; (800eb60 <vPortSetupTimerInterrupt+0x34>)
 800eb50:	2207      	movs	r2, #7
 800eb52:	601a      	str	r2, [r3, #0]
}
 800eb54:	bf00      	nop
 800eb56:	46bd      	mov	sp, r7
 800eb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5c:	4770      	bx	lr
 800eb5e:	bf00      	nop
 800eb60:	e000e010 	.word	0xe000e010
 800eb64:	e000e018 	.word	0xe000e018
 800eb68:	20000018 	.word	0x20000018
 800eb6c:	10624dd3 	.word	0x10624dd3
 800eb70:	e000e014 	.word	0xe000e014

0800eb74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800eb74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800eb84 <vPortEnableVFP+0x10>
 800eb78:	6801      	ldr	r1, [r0, #0]
 800eb7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800eb7e:	6001      	str	r1, [r0, #0]
 800eb80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800eb82:	bf00      	nop
 800eb84:	e000ed88 	.word	0xe000ed88

0800eb88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800eb88:	b480      	push	{r7}
 800eb8a:	b085      	sub	sp, #20
 800eb8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800eb8e:	f3ef 8305 	mrs	r3, IPSR
 800eb92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	2b0f      	cmp	r3, #15
 800eb98:	d915      	bls.n	800ebc6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800eb9a:	4a18      	ldr	r2, [pc, #96]	; (800ebfc <vPortValidateInterruptPriority+0x74>)
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	4413      	add	r3, r2
 800eba0:	781b      	ldrb	r3, [r3, #0]
 800eba2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800eba4:	4b16      	ldr	r3, [pc, #88]	; (800ec00 <vPortValidateInterruptPriority+0x78>)
 800eba6:	781b      	ldrb	r3, [r3, #0]
 800eba8:	7afa      	ldrb	r2, [r7, #11]
 800ebaa:	429a      	cmp	r2, r3
 800ebac:	d20b      	bcs.n	800ebc6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ebae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebb2:	b672      	cpsid	i
 800ebb4:	f383 8811 	msr	BASEPRI, r3
 800ebb8:	f3bf 8f6f 	isb	sy
 800ebbc:	f3bf 8f4f 	dsb	sy
 800ebc0:	b662      	cpsie	i
 800ebc2:	607b      	str	r3, [r7, #4]
 800ebc4:	e7fe      	b.n	800ebc4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ebc6:	4b0f      	ldr	r3, [pc, #60]	; (800ec04 <vPortValidateInterruptPriority+0x7c>)
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ebce:	4b0e      	ldr	r3, [pc, #56]	; (800ec08 <vPortValidateInterruptPriority+0x80>)
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	429a      	cmp	r2, r3
 800ebd4:	d90b      	bls.n	800ebee <vPortValidateInterruptPriority+0x66>
 800ebd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebda:	b672      	cpsid	i
 800ebdc:	f383 8811 	msr	BASEPRI, r3
 800ebe0:	f3bf 8f6f 	isb	sy
 800ebe4:	f3bf 8f4f 	dsb	sy
 800ebe8:	b662      	cpsie	i
 800ebea:	603b      	str	r3, [r7, #0]
 800ebec:	e7fe      	b.n	800ebec <vPortValidateInterruptPriority+0x64>
	}
 800ebee:	bf00      	nop
 800ebf0:	3714      	adds	r7, #20
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf8:	4770      	bx	lr
 800ebfa:	bf00      	nop
 800ebfc:	e000e3f0 	.word	0xe000e3f0
 800ec00:	200004ec 	.word	0x200004ec
 800ec04:	e000ed0c 	.word	0xe000ed0c
 800ec08:	200004f0 	.word	0x200004f0

0800ec0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b08a      	sub	sp, #40	; 0x28
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ec14:	2300      	movs	r3, #0
 800ec16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ec18:	f7fe ffa4 	bl	800db64 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ec1c:	4b5c      	ldr	r3, [pc, #368]	; (800ed90 <pvPortMalloc+0x184>)
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d101      	bne.n	800ec28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ec24:	f000 f91a 	bl	800ee5c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ec28:	4b5a      	ldr	r3, [pc, #360]	; (800ed94 <pvPortMalloc+0x188>)
 800ec2a:	681a      	ldr	r2, [r3, #0]
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	4013      	ands	r3, r2
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	f040 8090 	bne.w	800ed56 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d01e      	beq.n	800ec7a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ec3c:	2208      	movs	r2, #8
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	4413      	add	r3, r2
 800ec42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	f003 0307 	and.w	r3, r3, #7
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d015      	beq.n	800ec7a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	f023 0307 	bic.w	r3, r3, #7
 800ec54:	3308      	adds	r3, #8
 800ec56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	f003 0307 	and.w	r3, r3, #7
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d00b      	beq.n	800ec7a <pvPortMalloc+0x6e>
 800ec62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec66:	b672      	cpsid	i
 800ec68:	f383 8811 	msr	BASEPRI, r3
 800ec6c:	f3bf 8f6f 	isb	sy
 800ec70:	f3bf 8f4f 	dsb	sy
 800ec74:	b662      	cpsie	i
 800ec76:	617b      	str	r3, [r7, #20]
 800ec78:	e7fe      	b.n	800ec78 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d06a      	beq.n	800ed56 <pvPortMalloc+0x14a>
 800ec80:	4b45      	ldr	r3, [pc, #276]	; (800ed98 <pvPortMalloc+0x18c>)
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	687a      	ldr	r2, [r7, #4]
 800ec86:	429a      	cmp	r2, r3
 800ec88:	d865      	bhi.n	800ed56 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ec8a:	4b44      	ldr	r3, [pc, #272]	; (800ed9c <pvPortMalloc+0x190>)
 800ec8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ec8e:	4b43      	ldr	r3, [pc, #268]	; (800ed9c <pvPortMalloc+0x190>)
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ec94:	e004      	b.n	800eca0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ec96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ec9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eca2:	685b      	ldr	r3, [r3, #4]
 800eca4:	687a      	ldr	r2, [r7, #4]
 800eca6:	429a      	cmp	r2, r3
 800eca8:	d903      	bls.n	800ecb2 <pvPortMalloc+0xa6>
 800ecaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d1f1      	bne.n	800ec96 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ecb2:	4b37      	ldr	r3, [pc, #220]	; (800ed90 <pvPortMalloc+0x184>)
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ecb8:	429a      	cmp	r2, r3
 800ecba:	d04c      	beq.n	800ed56 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ecbc:	6a3b      	ldr	r3, [r7, #32]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	2208      	movs	r2, #8
 800ecc2:	4413      	add	r3, r2
 800ecc4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ecc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecc8:	681a      	ldr	r2, [r3, #0]
 800ecca:	6a3b      	ldr	r3, [r7, #32]
 800eccc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ecce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecd0:	685a      	ldr	r2, [r3, #4]
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	1ad2      	subs	r2, r2, r3
 800ecd6:	2308      	movs	r3, #8
 800ecd8:	005b      	lsls	r3, r3, #1
 800ecda:	429a      	cmp	r2, r3
 800ecdc:	d920      	bls.n	800ed20 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ecde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	4413      	add	r3, r2
 800ece4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ece6:	69bb      	ldr	r3, [r7, #24]
 800ece8:	f003 0307 	and.w	r3, r3, #7
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d00b      	beq.n	800ed08 <pvPortMalloc+0xfc>
 800ecf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecf4:	b672      	cpsid	i
 800ecf6:	f383 8811 	msr	BASEPRI, r3
 800ecfa:	f3bf 8f6f 	isb	sy
 800ecfe:	f3bf 8f4f 	dsb	sy
 800ed02:	b662      	cpsie	i
 800ed04:	613b      	str	r3, [r7, #16]
 800ed06:	e7fe      	b.n	800ed06 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ed08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed0a:	685a      	ldr	r2, [r3, #4]
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	1ad2      	subs	r2, r2, r3
 800ed10:	69bb      	ldr	r3, [r7, #24]
 800ed12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ed14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed16:	687a      	ldr	r2, [r7, #4]
 800ed18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ed1a:	69b8      	ldr	r0, [r7, #24]
 800ed1c:	f000 f900 	bl	800ef20 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ed20:	4b1d      	ldr	r3, [pc, #116]	; (800ed98 <pvPortMalloc+0x18c>)
 800ed22:	681a      	ldr	r2, [r3, #0]
 800ed24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed26:	685b      	ldr	r3, [r3, #4]
 800ed28:	1ad3      	subs	r3, r2, r3
 800ed2a:	4a1b      	ldr	r2, [pc, #108]	; (800ed98 <pvPortMalloc+0x18c>)
 800ed2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ed2e:	4b1a      	ldr	r3, [pc, #104]	; (800ed98 <pvPortMalloc+0x18c>)
 800ed30:	681a      	ldr	r2, [r3, #0]
 800ed32:	4b1b      	ldr	r3, [pc, #108]	; (800eda0 <pvPortMalloc+0x194>)
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	429a      	cmp	r2, r3
 800ed38:	d203      	bcs.n	800ed42 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ed3a:	4b17      	ldr	r3, [pc, #92]	; (800ed98 <pvPortMalloc+0x18c>)
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	4a18      	ldr	r2, [pc, #96]	; (800eda0 <pvPortMalloc+0x194>)
 800ed40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ed42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed44:	685a      	ldr	r2, [r3, #4]
 800ed46:	4b13      	ldr	r3, [pc, #76]	; (800ed94 <pvPortMalloc+0x188>)
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	431a      	orrs	r2, r3
 800ed4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ed50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed52:	2200      	movs	r2, #0
 800ed54:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ed56:	f7fe ff13 	bl	800db80 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800ed5a:	69fb      	ldr	r3, [r7, #28]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d101      	bne.n	800ed64 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800ed60:	f7f1 fecc 	bl	8000afc <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ed64:	69fb      	ldr	r3, [r7, #28]
 800ed66:	f003 0307 	and.w	r3, r3, #7
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d00b      	beq.n	800ed86 <pvPortMalloc+0x17a>
 800ed6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed72:	b672      	cpsid	i
 800ed74:	f383 8811 	msr	BASEPRI, r3
 800ed78:	f3bf 8f6f 	isb	sy
 800ed7c:	f3bf 8f4f 	dsb	sy
 800ed80:	b662      	cpsie	i
 800ed82:	60fb      	str	r3, [r7, #12]
 800ed84:	e7fe      	b.n	800ed84 <pvPortMalloc+0x178>
	return pvReturn;
 800ed86:	69fb      	ldr	r3, [r7, #28]
}
 800ed88:	4618      	mov	r0, r3
 800ed8a:	3728      	adds	r7, #40	; 0x28
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	bd80      	pop	{r7, pc}
 800ed90:	200084fc 	.word	0x200084fc
 800ed94:	20008508 	.word	0x20008508
 800ed98:	20008500 	.word	0x20008500
 800ed9c:	200084f4 	.word	0x200084f4
 800eda0:	20008504 	.word	0x20008504

0800eda4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b086      	sub	sp, #24
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d04a      	beq.n	800ee4c <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800edb6:	2308      	movs	r3, #8
 800edb8:	425b      	negs	r3, r3
 800edba:	697a      	ldr	r2, [r7, #20]
 800edbc:	4413      	add	r3, r2
 800edbe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800edc0:	697b      	ldr	r3, [r7, #20]
 800edc2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800edc4:	693b      	ldr	r3, [r7, #16]
 800edc6:	685a      	ldr	r2, [r3, #4]
 800edc8:	4b22      	ldr	r3, [pc, #136]	; (800ee54 <vPortFree+0xb0>)
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	4013      	ands	r3, r2
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d10b      	bne.n	800edea <vPortFree+0x46>
 800edd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edd6:	b672      	cpsid	i
 800edd8:	f383 8811 	msr	BASEPRI, r3
 800eddc:	f3bf 8f6f 	isb	sy
 800ede0:	f3bf 8f4f 	dsb	sy
 800ede4:	b662      	cpsie	i
 800ede6:	60fb      	str	r3, [r7, #12]
 800ede8:	e7fe      	b.n	800ede8 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800edea:	693b      	ldr	r3, [r7, #16]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d00b      	beq.n	800ee0a <vPortFree+0x66>
 800edf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edf6:	b672      	cpsid	i
 800edf8:	f383 8811 	msr	BASEPRI, r3
 800edfc:	f3bf 8f6f 	isb	sy
 800ee00:	f3bf 8f4f 	dsb	sy
 800ee04:	b662      	cpsie	i
 800ee06:	60bb      	str	r3, [r7, #8]
 800ee08:	e7fe      	b.n	800ee08 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ee0a:	693b      	ldr	r3, [r7, #16]
 800ee0c:	685a      	ldr	r2, [r3, #4]
 800ee0e:	4b11      	ldr	r3, [pc, #68]	; (800ee54 <vPortFree+0xb0>)
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	4013      	ands	r3, r2
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d019      	beq.n	800ee4c <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ee18:	693b      	ldr	r3, [r7, #16]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d115      	bne.n	800ee4c <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ee20:	693b      	ldr	r3, [r7, #16]
 800ee22:	685a      	ldr	r2, [r3, #4]
 800ee24:	4b0b      	ldr	r3, [pc, #44]	; (800ee54 <vPortFree+0xb0>)
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	43db      	mvns	r3, r3
 800ee2a:	401a      	ands	r2, r3
 800ee2c:	693b      	ldr	r3, [r7, #16]
 800ee2e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ee30:	f7fe fe98 	bl	800db64 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ee34:	693b      	ldr	r3, [r7, #16]
 800ee36:	685a      	ldr	r2, [r3, #4]
 800ee38:	4b07      	ldr	r3, [pc, #28]	; (800ee58 <vPortFree+0xb4>)
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	4413      	add	r3, r2
 800ee3e:	4a06      	ldr	r2, [pc, #24]	; (800ee58 <vPortFree+0xb4>)
 800ee40:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ee42:	6938      	ldr	r0, [r7, #16]
 800ee44:	f000 f86c 	bl	800ef20 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ee48:	f7fe fe9a 	bl	800db80 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ee4c:	bf00      	nop
 800ee4e:	3718      	adds	r7, #24
 800ee50:	46bd      	mov	sp, r7
 800ee52:	bd80      	pop	{r7, pc}
 800ee54:	20008508 	.word	0x20008508
 800ee58:	20008500 	.word	0x20008500

0800ee5c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ee5c:	b480      	push	{r7}
 800ee5e:	b085      	sub	sp, #20
 800ee60:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ee62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ee66:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ee68:	4b27      	ldr	r3, [pc, #156]	; (800ef08 <prvHeapInit+0xac>)
 800ee6a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	f003 0307 	and.w	r3, r3, #7
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d00c      	beq.n	800ee90 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	3307      	adds	r3, #7
 800ee7a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	f023 0307 	bic.w	r3, r3, #7
 800ee82:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ee84:	68ba      	ldr	r2, [r7, #8]
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	1ad3      	subs	r3, r2, r3
 800ee8a:	4a1f      	ldr	r2, [pc, #124]	; (800ef08 <prvHeapInit+0xac>)
 800ee8c:	4413      	add	r3, r2
 800ee8e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ee94:	4a1d      	ldr	r2, [pc, #116]	; (800ef0c <prvHeapInit+0xb0>)
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ee9a:	4b1c      	ldr	r3, [pc, #112]	; (800ef0c <prvHeapInit+0xb0>)
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	68ba      	ldr	r2, [r7, #8]
 800eea4:	4413      	add	r3, r2
 800eea6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800eea8:	2208      	movs	r2, #8
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	1a9b      	subs	r3, r3, r2
 800eeae:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	f023 0307 	bic.w	r3, r3, #7
 800eeb6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	4a15      	ldr	r2, [pc, #84]	; (800ef10 <prvHeapInit+0xb4>)
 800eebc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800eebe:	4b14      	ldr	r3, [pc, #80]	; (800ef10 <prvHeapInit+0xb4>)
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	2200      	movs	r2, #0
 800eec4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800eec6:	4b12      	ldr	r3, [pc, #72]	; (800ef10 <prvHeapInit+0xb4>)
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	2200      	movs	r2, #0
 800eecc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800eed2:	683b      	ldr	r3, [r7, #0]
 800eed4:	68fa      	ldr	r2, [r7, #12]
 800eed6:	1ad2      	subs	r2, r2, r3
 800eed8:	683b      	ldr	r3, [r7, #0]
 800eeda:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800eedc:	4b0c      	ldr	r3, [pc, #48]	; (800ef10 <prvHeapInit+0xb4>)
 800eede:	681a      	ldr	r2, [r3, #0]
 800eee0:	683b      	ldr	r3, [r7, #0]
 800eee2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eee4:	683b      	ldr	r3, [r7, #0]
 800eee6:	685b      	ldr	r3, [r3, #4]
 800eee8:	4a0a      	ldr	r2, [pc, #40]	; (800ef14 <prvHeapInit+0xb8>)
 800eeea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eeec:	683b      	ldr	r3, [r7, #0]
 800eeee:	685b      	ldr	r3, [r3, #4]
 800eef0:	4a09      	ldr	r2, [pc, #36]	; (800ef18 <prvHeapInit+0xbc>)
 800eef2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800eef4:	4b09      	ldr	r3, [pc, #36]	; (800ef1c <prvHeapInit+0xc0>)
 800eef6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800eefa:	601a      	str	r2, [r3, #0]
}
 800eefc:	bf00      	nop
 800eefe:	3714      	adds	r7, #20
 800ef00:	46bd      	mov	sp, r7
 800ef02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef06:	4770      	bx	lr
 800ef08:	200004f4 	.word	0x200004f4
 800ef0c:	200084f4 	.word	0x200084f4
 800ef10:	200084fc 	.word	0x200084fc
 800ef14:	20008504 	.word	0x20008504
 800ef18:	20008500 	.word	0x20008500
 800ef1c:	20008508 	.word	0x20008508

0800ef20 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ef20:	b480      	push	{r7}
 800ef22:	b085      	sub	sp, #20
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ef28:	4b28      	ldr	r3, [pc, #160]	; (800efcc <prvInsertBlockIntoFreeList+0xac>)
 800ef2a:	60fb      	str	r3, [r7, #12]
 800ef2c:	e002      	b.n	800ef34 <prvInsertBlockIntoFreeList+0x14>
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	60fb      	str	r3, [r7, #12]
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	687a      	ldr	r2, [r7, #4]
 800ef3a:	429a      	cmp	r2, r3
 800ef3c:	d8f7      	bhi.n	800ef2e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	685b      	ldr	r3, [r3, #4]
 800ef46:	68ba      	ldr	r2, [r7, #8]
 800ef48:	4413      	add	r3, r2
 800ef4a:	687a      	ldr	r2, [r7, #4]
 800ef4c:	429a      	cmp	r2, r3
 800ef4e:	d108      	bne.n	800ef62 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	685a      	ldr	r2, [r3, #4]
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	685b      	ldr	r3, [r3, #4]
 800ef58:	441a      	add	r2, r3
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	685b      	ldr	r3, [r3, #4]
 800ef6a:	68ba      	ldr	r2, [r7, #8]
 800ef6c:	441a      	add	r2, r3
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	429a      	cmp	r2, r3
 800ef74:	d118      	bne.n	800efa8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	681a      	ldr	r2, [r3, #0]
 800ef7a:	4b15      	ldr	r3, [pc, #84]	; (800efd0 <prvInsertBlockIntoFreeList+0xb0>)
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	429a      	cmp	r2, r3
 800ef80:	d00d      	beq.n	800ef9e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	685a      	ldr	r2, [r3, #4]
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	685b      	ldr	r3, [r3, #4]
 800ef8c:	441a      	add	r2, r3
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	681a      	ldr	r2, [r3, #0]
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	601a      	str	r2, [r3, #0]
 800ef9c:	e008      	b.n	800efb0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ef9e:	4b0c      	ldr	r3, [pc, #48]	; (800efd0 <prvInsertBlockIntoFreeList+0xb0>)
 800efa0:	681a      	ldr	r2, [r3, #0]
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	601a      	str	r2, [r3, #0]
 800efa6:	e003      	b.n	800efb0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	681a      	ldr	r2, [r3, #0]
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800efb0:	68fa      	ldr	r2, [r7, #12]
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	429a      	cmp	r2, r3
 800efb6:	d002      	beq.n	800efbe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	687a      	ldr	r2, [r7, #4]
 800efbc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800efbe:	bf00      	nop
 800efc0:	3714      	adds	r7, #20
 800efc2:	46bd      	mov	sp, r7
 800efc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc8:	4770      	bx	lr
 800efca:	bf00      	nop
 800efcc:	200084f4 	.word	0x200084f4
 800efd0:	200084fc 	.word	0x200084fc

0800efd4 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800efd4:	b580      	push	{r7, lr}
 800efd6:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 800efd8:	f005 fbd4 	bl	8014784 <touchgfx_init>
}
 800efdc:	bf00      	nop
 800efde:	bd80      	pop	{r7, pc}

0800efe0 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 800efe0:	b580      	push	{r7, lr}
 800efe2:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
 800efe4:	f005 fbf8 	bl	80147d8 <touchgfx_taskEntry>
}
 800efe8:	bf00      	nop
 800efea:	bd80      	pop	{r7, pc}

0800efec <_ZN8touchgfx12FontProviderD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~FontProvider()
 800efec:	b480      	push	{r7}
 800efee:	b083      	sub	sp, #12
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	6078      	str	r0, [r7, #4]
    {
 800eff4:	4a04      	ldr	r2, [pc, #16]	; (800f008 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	601a      	str	r2, [r3, #0]
    }
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	4618      	mov	r0, r3
 800effe:	370c      	adds	r7, #12
 800f000:	46bd      	mov	sp, r7
 800f002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f006:	4770      	bx	lr
 800f008:	08026408 	.word	0x08026408

0800f00c <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800f00c:	b580      	push	{r7, lr}
 800f00e:	b082      	sub	sp, #8
 800f010:	af00      	add	r7, sp, #0
 800f012:	6078      	str	r0, [r7, #4]
    }
 800f014:	6878      	ldr	r0, [r7, #4]
 800f016:	f7ff ffe9 	bl	800efec <_ZN8touchgfx12FontProviderD1Ev>
 800f01a:	2104      	movs	r1, #4
 800f01c:	6878      	ldr	r0, [r7, #4]
 800f01e:	f015 fdd8 	bl	8024bd2 <_ZdlPvj>
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	4618      	mov	r0, r3
 800f026:	3708      	adds	r7, #8
 800f028:	46bd      	mov	sp, r7
 800f02a:	bd80      	pop	{r7, pc}

0800f02c <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800f02c:	b580      	push	{r7, lr}
 800f02e:	b082      	sub	sp, #8
 800f030:	af00      	add	r7, sp, #0
 800f032:	6078      	str	r0, [r7, #4]
 800f034:	460b      	mov	r3, r1
 800f036:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800f038:	887b      	ldrh	r3, [r7, #2]
 800f03a:	2b07      	cmp	r3, #7
 800f03c:	d83a      	bhi.n	800f0b4 <_ZN23ApplicationFontProvider7getFontEt+0x88>
 800f03e:	a201      	add	r2, pc, #4	; (adr r2, 800f044 <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 800f040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f044:	0800f065 	.word	0x0800f065
 800f048:	0800f06f 	.word	0x0800f06f
 800f04c:	0800f079 	.word	0x0800f079
 800f050:	0800f083 	.word	0x0800f083
 800f054:	0800f08d 	.word	0x0800f08d
 800f058:	0800f097 	.word	0x0800f097
 800f05c:	0800f0a1 	.word	0x0800f0a1
 800f060:	0800f0ab 	.word	0x0800f0ab
    {
    case Typography::DEFAULT:
        // Asap_Bold_18_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800f064:	f003 fc22 	bl	80128ac <_ZN17TypedTextDatabase8getFontsEv>
 800f068:	4603      	mov	r3, r0
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	e023      	b.n	800f0b6 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPMTEXT:
        // Asap_Bold_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800f06e:	f003 fc1d 	bl	80128ac <_ZN17TypedTextDatabase8getFontsEv>
 800f072:	4603      	mov	r3, r0
 800f074:	685b      	ldr	r3, [r3, #4]
 800f076:	e01e      	b.n	800f0b6 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::VALUES:
        // Asap_Bold_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800f078:	f003 fc18 	bl	80128ac <_ZN17TypedTextDatabase8getFontsEv>
 800f07c:	4603      	mov	r3, r0
 800f07e:	689b      	ldr	r3, [r3, #8]
 800f080:	e019      	b.n	800f0b6 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::LAMBDA:
        // Asap_Bold_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800f082:	f003 fc13 	bl	80128ac <_ZN17TypedTextDatabase8getFontsEv>
 800f086:	4603      	mov	r3, r0
 800f088:	689b      	ldr	r3, [r3, #8]
 800f08a:	e014      	b.n	800f0b6 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::SMALL:
        // Asap_Bold_12_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 800f08c:	f003 fc0e 	bl	80128ac <_ZN17TypedTextDatabase8getFontsEv>
 800f090:	4603      	mov	r3, r0
 800f092:	68db      	ldr	r3, [r3, #12]
 800f094:	e00f      	b.n	800f0b6 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::LARGE:
        // Asap_Bold_60_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 800f096:	f003 fc09 	bl	80128ac <_ZN17TypedTextDatabase8getFontsEv>
 800f09a:	4603      	mov	r3, r0
 800f09c:	691b      	ldr	r3, [r3, #16]
 800f09e:	e00a      	b.n	800f0b6 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPM_LETTERS:
        // Asap_Bold_21_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[5]);
 800f0a0:	f003 fc04 	bl	80128ac <_ZN17TypedTextDatabase8getFontsEv>
 800f0a4:	4603      	mov	r3, r0
 800f0a6:	695b      	ldr	r3, [r3, #20]
 800f0a8:	e005      	b.n	800f0b6 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPM_DESCRIPTOR:
        // Asap_Bold_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[6]);
 800f0aa:	f003 fbff 	bl	80128ac <_ZN17TypedTextDatabase8getFontsEv>
 800f0ae:	4603      	mov	r3, r0
 800f0b0:	699b      	ldr	r3, [r3, #24]
 800f0b2:	e000      	b.n	800f0b6 <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    default:
        return 0;
 800f0b4:	2300      	movs	r3, #0
    }
}
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	3708      	adds	r7, #8
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	bd80      	pop	{r7, pc}
 800f0be:	bf00      	nop

0800f0c0 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId RPM_LETTERS = 5;    // Asap_Bold_21_4bpp
    static const touchgfx::FontId RPM_DESCRIPTOR = 6; // Asap_Bold_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 7;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	b082      	sub	sp, #8
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	6078      	str	r0, [r7, #4]
 800f0c8:	4a05      	ldr	r2, [pc, #20]	; (800f0e0 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	601a      	str	r2, [r3, #0]
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	f7ff ff8b 	bl	800efec <_ZN8touchgfx12FontProviderD1Ev>
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	4618      	mov	r0, r3
 800f0da:	3708      	adds	r7, #8
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	bd80      	pop	{r7, pc}
 800f0e0:	080263f4 	.word	0x080263f4

0800f0e4 <_ZN23ApplicationFontProviderD0Ev>:
 800f0e4:	b580      	push	{r7, lr}
 800f0e6:	b082      	sub	sp, #8
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	6078      	str	r0, [r7, #4]
 800f0ec:	6878      	ldr	r0, [r7, #4]
 800f0ee:	f7ff ffe7 	bl	800f0c0 <_ZN23ApplicationFontProviderD1Ev>
 800f0f2:	2104      	movs	r1, #4
 800f0f4:	6878      	ldr	r0, [r7, #4]
 800f0f6:	f015 fd6c 	bl	8024bd2 <_ZdlPvj>
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	3708      	adds	r7, #8
 800f100:	46bd      	mov	sp, r7
 800f102:	bd80      	pop	{r7, pc}

0800f104 <_ZN8touchgfx4FontD1Ev>:
 *        It provides utility functions such as obtaining string width and font height.
 */
class Font
{
public:
    virtual ~Font() { }
 800f104:	b480      	push	{r7}
 800f106:	b083      	sub	sp, #12
 800f108:	af00      	add	r7, sp, #0
 800f10a:	6078      	str	r0, [r7, #4]
 800f10c:	4a04      	ldr	r2, [pc, #16]	; (800f120 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	601a      	str	r2, [r3, #0]
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	4618      	mov	r0, r3
 800f116:	370c      	adds	r7, #12
 800f118:	46bd      	mov	sp, r7
 800f11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f11e:	4770      	bx	lr
 800f120:	08028694 	.word	0x08028694

0800f124 <_ZN8touchgfx4FontD0Ev>:
 800f124:	b580      	push	{r7, lr}
 800f126:	b082      	sub	sp, #8
 800f128:	af00      	add	r7, sp, #0
 800f12a:	6078      	str	r0, [r7, #4]
 800f12c:	6878      	ldr	r0, [r7, #4]
 800f12e:	f7ff ffe9 	bl	800f104 <_ZN8touchgfx4FontD1Ev>
 800f132:	2110      	movs	r1, #16
 800f134:	6878      	ldr	r0, [r7, #4]
 800f136:	f015 fd4c 	bl	8024bd2 <_ZdlPvj>
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	4618      	mov	r0, r3
 800f13e:	3708      	adds	r7, #8
 800f140:	46bd      	mov	sp, r7
 800f142:	bd80      	pop	{r7, pc}

0800f144 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getGlyph
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800f144:	b590      	push	{r4, r7, lr}
 800f146:	b087      	sub	sp, #28
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]
 800f14c:	460b      	mov	r3, r1
 800f14e:	807b      	strh	r3, [r7, #2]
    {
        const uint8_t* dummyPixelDataPointer = 0;
 800f150:	2300      	movs	r3, #0
 800f152:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800f154:	2300      	movs	r3, #0
 800f156:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	3308      	adds	r3, #8
 800f15e:	681c      	ldr	r4, [r3, #0]
 800f160:	f107 030f 	add.w	r3, r7, #15
 800f164:	f107 0210 	add.w	r2, r7, #16
 800f168:	8879      	ldrh	r1, [r7, #2]
 800f16a:	6878      	ldr	r0, [r7, #4]
 800f16c:	47a0      	blx	r4
 800f16e:	6178      	str	r0, [r7, #20]
        return glyph;
 800f170:	697b      	ldr	r3, [r7, #20]
    }
 800f172:	4618      	mov	r0, r3
 800f174:	371c      	adds	r7, #28
 800f176:	46bd      	mov	sp, r7
 800f178:	bd90      	pop	{r4, r7, pc}

0800f17a <_ZNK8touchgfx4Font15getFallbackCharEv>:
     *        character, use the glyph for the character returned by this function. If 0 (zero)
     *        is returned, there is no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800f17a:	b480      	push	{r7}
 800f17c:	b083      	sub	sp, #12
 800f17e:	af00      	add	r7, sp, #0
 800f180:	6078      	str	r0, [r7, #4]
    {
        return falllbackCharacter;
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	895b      	ldrh	r3, [r3, #10]
    }
 800f186:	4618      	mov	r0, r3
 800f188:	370c      	adds	r7, #12
 800f18a:	46bd      	mov	sp, r7
 800f18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f190:	4770      	bx	lr

0800f192 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
    *        Gets ellipsis character for the given font. This is the character which is used
    *        when truncating long lines.
    *
    * @return The ellipsis character for the typography.
    */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800f192:	b480      	push	{r7}
 800f194:	b083      	sub	sp, #12
 800f196:	af00      	add	r7, sp, #0
 800f198:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	899b      	ldrh	r3, [r3, #12]
    }
 800f19e:	4618      	mov	r0, r3
 800f1a0:	370c      	adds	r7, #12
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a8:	4770      	bx	lr

0800f1aa <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     *
     * @return The height in pixels of this font.
     */
    virtual uint16_t getFontHeight() const
 800f1aa:	b480      	push	{r7}
 800f1ac:	b083      	sub	sp, #12
 800f1ae:	af00      	add	r7, sp, #0
 800f1b0:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	889b      	ldrh	r3, [r3, #4]
    }
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	370c      	adds	r7, #12
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c0:	4770      	bx	lr

0800f1c2 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *        into account that certain characters (eg 'g') have pixels below the baseline,
     *        thus making the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    virtual uint16_t getMinimumTextHeight() const
 800f1c2:	b480      	push	{r7}
 800f1c4:	b083      	sub	sp, #12
 800f1c6:	af00      	add	r7, sp, #0
 800f1c8:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	889a      	ldrh	r2, [r3, #4]
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	799b      	ldrb	r3, [r3, #6]
 800f1d2:	b29b      	uxth	r3, r3
 800f1d4:	4413      	add	r3, r2
 800f1d6:	b29b      	uxth	r3, r3
    }
 800f1d8:	4618      	mov	r0, r3
 800f1da:	370c      	adds	r7, #12
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e2:	4770      	bx	lr

0800f1e4 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     *        Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    virtual uint8_t getBitsPerPixel() const
 800f1e4:	b480      	push	{r7}
 800f1e6:	b083      	sub	sp, #12
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	79db      	ldrb	r3, [r3, #7]
 800f1f0:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800f1f4:	b2db      	uxtb	r3, r3
    }
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	370c      	adds	r7, #12
 800f1fa:	46bd      	mov	sp, r7
 800f1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f200:	4770      	bx	lr

0800f202 <_ZNK8touchgfx4Font15getDataFormatA4Ev>:
     *
     *        Are the glyphs saved using ST A4 format.
     *
     * @return True if the font is stored using A4 format, false otherwise.
     */
    virtual uint8_t getDataFormatA4() const
 800f202:	b480      	push	{r7}
 800f204:	b083      	sub	sp, #12
 800f206:	af00      	add	r7, sp, #0
 800f208:	6078      	str	r0, [r7, #4]
    {
        return a4;
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	79db      	ldrb	r3, [r3, #7]
 800f20e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800f212:	b2db      	uxtb	r3, r3
    }
 800f214:	4618      	mov	r0, r3
 800f216:	370c      	adds	r7, #12
 800f218:	46bd      	mov	sp, r7
 800f21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f21e:	4770      	bx	lr

0800f220 <_ZN8touchgfx9ConstFontD1Ev>:
 * @note Pure virtual class. Create an application-
 *          specific implementation of getPixelData.
 *
 * @see Font
 */
class ConstFont : public Font
 800f220:	b580      	push	{r7, lr}
 800f222:	b082      	sub	sp, #8
 800f224:	af00      	add	r7, sp, #0
 800f226:	6078      	str	r0, [r7, #4]
 800f228:	4a05      	ldr	r2, [pc, #20]	; (800f240 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	601a      	str	r2, [r3, #0]
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	4618      	mov	r0, r3
 800f232:	f7ff ff67 	bl	800f104 <_ZN8touchgfx4FontD1Ev>
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	4618      	mov	r0, r3
 800f23a:	3708      	adds	r7, #8
 800f23c:	46bd      	mov	sp, r7
 800f23e:	bd80      	pop	{r7, pc}
 800f240:	0802874c 	.word	0x0802874c

0800f244 <_ZN8touchgfx9ConstFontD0Ev>:
 800f244:	b580      	push	{r7, lr}
 800f246:	b082      	sub	sp, #8
 800f248:	af00      	add	r7, sp, #0
 800f24a:	6078      	str	r0, [r7, #4]
 800f24c:	6878      	ldr	r0, [r7, #4]
 800f24e:	f7ff ffe7 	bl	800f220 <_ZN8touchgfx9ConstFontD1Ev>
 800f252:	2118      	movs	r1, #24
 800f254:	6878      	ldr	r0, [r7, #4]
 800f256:	f015 fcbc 	bl	8024bd2 <_ZdlPvj>
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	4618      	mov	r0, r3
 800f25e:	3708      	adds	r7, #8
 800f260:	46bd      	mov	sp, r7
 800f262:	bd80      	pop	{r7, pc}

0800f264 <_ZN8touchgfx13GeneratedFontD1Ev>:
 *        An GeneratedFont has both glyph table and glyph data placed in a flash which
 *        supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 800f264:	b580      	push	{r7, lr}
 800f266:	b082      	sub	sp, #8
 800f268:	af00      	add	r7, sp, #0
 800f26a:	6078      	str	r0, [r7, #4]
 800f26c:	4a05      	ldr	r2, [pc, #20]	; (800f284 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	601a      	str	r2, [r3, #0]
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	4618      	mov	r0, r3
 800f276:	f7ff ffd3 	bl	800f220 <_ZN8touchgfx9ConstFontD1Ev>
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	4618      	mov	r0, r3
 800f27e:	3708      	adds	r7, #8
 800f280:	46bd      	mov	sp, r7
 800f282:	bd80      	pop	{r7, pc}
 800f284:	0802644c 	.word	0x0802644c

0800f288 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800f288:	b580      	push	{r7, lr}
 800f28a:	b082      	sub	sp, #8
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	6078      	str	r0, [r7, #4]
 800f290:	6878      	ldr	r0, [r7, #4]
 800f292:	f7ff ffe7 	bl	800f264 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f296:	2124      	movs	r1, #36	; 0x24
 800f298:	6878      	ldr	r0, [r7, #4]
 800f29a:	f015 fc9a 	bl	8024bd2 <_ZdlPvj>
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	3708      	adds	r7, #8
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	bd80      	pop	{r7, pc}

0800f2a8 <_ZNK8touchgfx9TypedText7getFontEv>:
     *
     *        Gets the font associated with this TypedText.
     *
     * @return The font.
     */
    const Font* getFont() const
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	b082      	sub	sp, #8
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800f2b0:	6878      	ldr	r0, [r7, #4]
 800f2b2:	f000 f82d 	bl	800f310 <_ZNK8touchgfx9TypedText11assertValidEv>
        return fonts[typedTexts[typedTextId].fontIdx];
 800f2b6:	4b08      	ldr	r3, [pc, #32]	; (800f2d8 <_ZNK8touchgfx9TypedText7getFontEv+0x30>)
 800f2b8:	681a      	ldr	r2, [r3, #0]
 800f2ba:	4b08      	ldr	r3, [pc, #32]	; (800f2dc <_ZNK8touchgfx9TypedText7getFontEv+0x34>)
 800f2bc:	6819      	ldr	r1, [r3, #0]
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	881b      	ldrh	r3, [r3, #0]
 800f2c2:	005b      	lsls	r3, r3, #1
 800f2c4:	440b      	add	r3, r1
 800f2c6:	781b      	ldrb	r3, [r3, #0]
 800f2c8:	009b      	lsls	r3, r3, #2
 800f2ca:	4413      	add	r3, r2
 800f2cc:	681b      	ldr	r3, [r3, #0]
    }
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	3708      	adds	r7, #8
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	bd80      	pop	{r7, pc}
 800f2d6:	bf00      	nop
 800f2d8:	2000bd14 	.word	0x2000bd14
 800f2dc:	2000bd0c 	.word	0x2000bd0c

0800f2e0 <_ZNK8touchgfx9TypedText16getTextDirectionEv>:
     *
     *        Gets the text direction associated with this TypedText.
     *
     * @return The alignment.
     */
    TextDirection getTextDirection() const
 800f2e0:	b580      	push	{r7, lr}
 800f2e2:	b082      	sub	sp, #8
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800f2e8:	6878      	ldr	r0, [r7, #4]
 800f2ea:	f000 f811 	bl	800f310 <_ZNK8touchgfx9TypedText11assertValidEv>
        return typedTexts[typedTextId].direction;
 800f2ee:	4b07      	ldr	r3, [pc, #28]	; (800f30c <_ZNK8touchgfx9TypedText16getTextDirectionEv+0x2c>)
 800f2f0:	681a      	ldr	r2, [r3, #0]
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	881b      	ldrh	r3, [r3, #0]
 800f2f6:	005b      	lsls	r3, r3, #1
 800f2f8:	4413      	add	r3, r2
 800f2fa:	785b      	ldrb	r3, [r3, #1]
 800f2fc:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800f300:	b2db      	uxtb	r3, r3
    }
 800f302:	4618      	mov	r0, r3
 800f304:	3708      	adds	r7, #8
 800f306:	46bd      	mov	sp, r7
 800f308:	bd80      	pop	{r7, pc}
 800f30a:	bf00      	nop
 800f30c:	2000bd0c 	.word	0x2000bd0c

0800f310 <_ZNK8touchgfx9TypedText11assertValidEv>:
    {
        texts = t;
    }

private:
    void assertValid() const
 800f310:	b580      	push	{r7, lr}
 800f312:	b082      	sub	sp, #8
 800f314:	af00      	add	r7, sp, #0
 800f316:	6078      	str	r0, [r7, #4]
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800f318:	4b0c      	ldr	r3, [pc, #48]	; (800f34c <_ZNK8touchgfx9TypedText11assertValidEv+0x3c>)
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d105      	bne.n	800f32c <_ZNK8touchgfx9TypedText11assertValidEv+0x1c>
 800f320:	4b0b      	ldr	r3, [pc, #44]	; (800f350 <_ZNK8touchgfx9TypedText11assertValidEv+0x40>)
 800f322:	4a0c      	ldr	r2, [pc, #48]	; (800f354 <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 800f324:	21de      	movs	r1, #222	; 0xde
 800f326:	480c      	ldr	r0, [pc, #48]	; (800f358 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 800f328:	f015 fc7e 	bl	8024c28 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	881a      	ldrh	r2, [r3, #0]
 800f330:	4b0a      	ldr	r3, [pc, #40]	; (800f35c <_ZNK8touchgfx9TypedText11assertValidEv+0x4c>)
 800f332:	881b      	ldrh	r3, [r3, #0]
 800f334:	429a      	cmp	r2, r3
 800f336:	d305      	bcc.n	800f344 <_ZNK8touchgfx9TypedText11assertValidEv+0x34>
 800f338:	4b09      	ldr	r3, [pc, #36]	; (800f360 <_ZNK8touchgfx9TypedText11assertValidEv+0x50>)
 800f33a:	4a06      	ldr	r2, [pc, #24]	; (800f354 <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 800f33c:	21df      	movs	r1, #223	; 0xdf
 800f33e:	4806      	ldr	r0, [pc, #24]	; (800f358 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 800f340:	f015 fc72 	bl	8024c28 <__assert_func>
    }
 800f344:	bf00      	nop
 800f346:	3708      	adds	r7, #8
 800f348:	46bd      	mov	sp, r7
 800f34a:	bd80      	pop	{r7, pc}
 800f34c:	2000bd0c 	.word	0x2000bd0c
 800f350:	08025cd8 	.word	0x08025cd8
 800f354:	08026414 	.word	0x08026414
 800f358:	08025d1c 	.word	0x08025d1c
 800f35c:	2000bd10 	.word	0x2000bd10
 800f360:	08025d60 	.word	0x08025d60

0800f364 <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>:
    uint16_t kerningTablePos() const
 800f364:	b480      	push	{r7}
 800f366:	b083      	sub	sp, #12
 800f368:	af00      	add	r7, sp, #0
 800f36a:	6078      	str	r0, [r7, #4]
        return (((uint16_t)(flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10)) << 8) | (uint16_t)_kerningTablePos;
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	7b5b      	ldrb	r3, [r3, #13]
 800f370:	021b      	lsls	r3, r3, #8
 800f372:	b21b      	sxth	r3, r3
 800f374:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f378:	b21a      	sxth	r2, r3
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	7adb      	ldrb	r3, [r3, #11]
 800f37e:	b21b      	sxth	r3, r3
 800f380:	4313      	orrs	r3, r2
 800f382:	b21b      	sxth	r3, r3
 800f384:	b29b      	uxth	r3, r3
    }
 800f386:	4618      	mov	r0, r3
 800f388:	370c      	adds	r7, #12
 800f38a:	46bd      	mov	sp, r7
 800f38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f390:	4770      	bx	lr

0800f392 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     *
     *        Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 800f392:	b480      	push	{r7}
 800f394:	b083      	sub	sp, #12
 800f396:	af00      	add	r7, sp, #0
 800f398:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	6a1b      	ldr	r3, [r3, #32]
    }
 800f39e:	4618      	mov	r0, r3
 800f3a0:	370c      	adds	r7, #12
 800f3a2:	46bd      	mov	sp, r7
 800f3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a8:	4770      	bx	lr
	...

0800f3ac <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t dataFormatA4, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 800f3ac:	b580      	push	{r7, lr}
 800f3ae:	b08c      	sub	sp, #48	; 0x30
 800f3b0:	af08      	add	r7, sp, #32
 800f3b2:	60f8      	str	r0, [r7, #12]
 800f3b4:	60b9      	str	r1, [r7, #8]
 800f3b6:	4611      	mov	r1, r2
 800f3b8:	461a      	mov	r2, r3
 800f3ba:	460b      	mov	r3, r1
 800f3bc:	80fb      	strh	r3, [r7, #6]
 800f3be:	4613      	mov	r3, r2
 800f3c0:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, dataFormatA4, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 800f3c2:	68f8      	ldr	r0, [r7, #12]
 800f3c4:	88b9      	ldrh	r1, [r7, #4]
 800f3c6:	88fa      	ldrh	r2, [r7, #6]
 800f3c8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f3ca:	9306      	str	r3, [sp, #24]
 800f3cc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f3ce:	9305      	str	r3, [sp, #20]
 800f3d0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f3d4:	9304      	str	r3, [sp, #16]
 800f3d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f3da:	9303      	str	r3, [sp, #12]
 800f3dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f3e0:	9302      	str	r3, [sp, #8]
 800f3e2:	7f3b      	ldrb	r3, [r7, #28]
 800f3e4:	9301      	str	r3, [sp, #4]
 800f3e6:	7e3b      	ldrb	r3, [r7, #24]
 800f3e8:	9300      	str	r3, [sp, #0]
 800f3ea:	460b      	mov	r3, r1
 800f3ec:	68b9      	ldr	r1, [r7, #8]
 800f3ee:	f00a f90f 	bl	8019610 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800f3f2:	4a08      	ldr	r2, [pc, #32]	; (800f414 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	601a      	str	r2, [r3, #0]
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f3fc:	619a      	str	r2, [r3, #24]
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f402:	61da      	str	r2, [r3, #28]
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f408:	621a      	str	r2, [r3, #32]
{
}
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	4618      	mov	r0, r3
 800f40e:	3710      	adds	r7, #16
 800f410:	46bd      	mov	sp, r7
 800f412:	bd80      	pop	{r7, pc}
 800f414:	0802644c 	.word	0x0802644c

0800f418 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800f418:	b480      	push	{r7}
 800f41a:	b085      	sub	sp, #20
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	6078      	str	r0, [r7, #4]
 800f420:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	699b      	ldr	r3, [r3, #24]
 800f426:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800f428:	683b      	ldr	r3, [r7, #0]
 800f42a:	889b      	ldrh	r3, [r3, #4]
 800f42c:	0adb      	lsrs	r3, r3, #11
 800f42e:	b29b      	uxth	r3, r3
 800f430:	009b      	lsls	r3, r3, #2
 800f432:	68fa      	ldr	r2, [r7, #12]
 800f434:	4413      	add	r3, r2
 800f436:	681a      	ldr	r2, [r3, #0]
 800f438:	683b      	ldr	r3, [r7, #0]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	4413      	add	r3, r2
}
 800f43e:	4618      	mov	r0, r3
 800f440:	3714      	adds	r7, #20
 800f442:	46bd      	mov	sp, r7
 800f444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f448:	4770      	bx	lr

0800f44a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800f44a:	b580      	push	{r7, lr}
 800f44c:	b086      	sub	sp, #24
 800f44e:	af00      	add	r7, sp, #0
 800f450:	60f8      	str	r0, [r7, #12]
 800f452:	460b      	mov	r3, r1
 800f454:	607a      	str	r2, [r7, #4]
 800f456:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d003      	beq.n	800f466 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	7b1b      	ldrb	r3, [r3, #12]
 800f462:	2b00      	cmp	r3, #0
 800f464:	d101      	bne.n	800f46a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800f466:	2300      	movs	r3, #0
 800f468:	e023      	b.n	800f4b2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    }

    uint16_t kerningTablePos = glyph->kerningTablePos();
 800f46a:	6878      	ldr	r0, [r7, #4]
 800f46c:	f7ff ff7a 	bl	800f364 <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>
 800f470:	4603      	mov	r3, r0
 800f472:	82bb      	strh	r3, [r7, #20]
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 800f474:	8abb      	ldrh	r3, [r7, #20]
 800f476:	82fb      	strh	r3, [r7, #22]
 800f478:	8afa      	ldrh	r2, [r7, #22]
 800f47a:	8abb      	ldrh	r3, [r7, #20]
 800f47c:	6879      	ldr	r1, [r7, #4]
 800f47e:	7b09      	ldrb	r1, [r1, #12]
 800f480:	440b      	add	r3, r1
 800f482:	429a      	cmp	r2, r3
 800f484:	da14      	bge.n	800f4b0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
    {
        if (prevChar == kerningData[i].unicodePrevChar)
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	69da      	ldr	r2, [r3, #28]
 800f48a:	8afb      	ldrh	r3, [r7, #22]
 800f48c:	009b      	lsls	r3, r3, #2
 800f48e:	4413      	add	r3, r2
 800f490:	881b      	ldrh	r3, [r3, #0]
 800f492:	897a      	ldrh	r2, [r7, #10]
 800f494:	429a      	cmp	r2, r3
 800f496:	d107      	bne.n	800f4a8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x5e>
        {
            return kerningData[i].distance;
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	69da      	ldr	r2, [r3, #28]
 800f49c:	8afb      	ldrh	r3, [r7, #22]
 800f49e:	009b      	lsls	r3, r3, #2
 800f4a0:	4413      	add	r3, r2
 800f4a2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800f4a6:	e004      	b.n	800f4b2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 800f4a8:	8afb      	ldrh	r3, [r7, #22]
 800f4aa:	3301      	adds	r3, #1
 800f4ac:	82fb      	strh	r3, [r7, #22]
 800f4ae:	e7e3      	b.n	800f478 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x2e>
        }
    }
    return 0;
 800f4b0:	2300      	movs	r3, #0
}
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	3718      	adds	r7, #24
 800f4b6:	46bd      	mov	sp, r7
 800f4b8:	bd80      	pop	{r7, pc}
	...

0800f4bc <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_10_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_10_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_10_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_10_4bpp(glyphs_Asap_Bold_10_4bpp, 4, 10, 0, 4, 1, 0, 1, unicodes_Asap_Bold_10_4bpp, kerning_Asap_Bold_10_4bpp, 63, 0, 0);
 800f4bc:	b580      	push	{r7, lr}
 800f4be:	af00      	add	r7, sp, #0
 800f4c0:	4801      	ldr	r0, [pc, #4]	; (800f4c8 <__tcf_0+0xc>)
 800f4c2:	f7ff fecf 	bl	800f264 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f4c6:	bd80      	pop	{r7, pc}
 800f4c8:	2000850c 	.word	0x2000850c

0800f4cc <_Z25getFont_Asap_Bold_10_4bppv>:
{
 800f4cc:	b580      	push	{r7, lr}
 800f4ce:	b08a      	sub	sp, #40	; 0x28
 800f4d0:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_10_4bpp(glyphs_Asap_Bold_10_4bpp, 4, 10, 0, 4, 1, 0, 1, unicodes_Asap_Bold_10_4bpp, kerning_Asap_Bold_10_4bpp, 63, 0, 0);
 800f4d2:	4b15      	ldr	r3, [pc, #84]	; (800f528 <_Z25getFont_Asap_Bold_10_4bppv+0x5c>)
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	f003 0301 	and.w	r3, r3, #1
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d11f      	bne.n	800f51e <_Z25getFont_Asap_Bold_10_4bppv+0x52>
 800f4de:	2300      	movs	r3, #0
 800f4e0:	9309      	str	r3, [sp, #36]	; 0x24
 800f4e2:	2300      	movs	r3, #0
 800f4e4:	9308      	str	r3, [sp, #32]
 800f4e6:	233f      	movs	r3, #63	; 0x3f
 800f4e8:	9307      	str	r3, [sp, #28]
 800f4ea:	4b10      	ldr	r3, [pc, #64]	; (800f52c <_Z25getFont_Asap_Bold_10_4bppv+0x60>)
 800f4ec:	9306      	str	r3, [sp, #24]
 800f4ee:	4b10      	ldr	r3, [pc, #64]	; (800f530 <_Z25getFont_Asap_Bold_10_4bppv+0x64>)
 800f4f0:	9305      	str	r3, [sp, #20]
 800f4f2:	2301      	movs	r3, #1
 800f4f4:	9304      	str	r3, [sp, #16]
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	9303      	str	r3, [sp, #12]
 800f4fa:	2301      	movs	r3, #1
 800f4fc:	9302      	str	r3, [sp, #8]
 800f4fe:	2304      	movs	r3, #4
 800f500:	9301      	str	r3, [sp, #4]
 800f502:	2300      	movs	r3, #0
 800f504:	9300      	str	r3, [sp, #0]
 800f506:	230a      	movs	r3, #10
 800f508:	2204      	movs	r2, #4
 800f50a:	490a      	ldr	r1, [pc, #40]	; (800f534 <_Z25getFont_Asap_Bold_10_4bppv+0x68>)
 800f50c:	480a      	ldr	r0, [pc, #40]	; (800f538 <_Z25getFont_Asap_Bold_10_4bppv+0x6c>)
 800f50e:	f7ff ff4d 	bl	800f3ac <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f512:	4b05      	ldr	r3, [pc, #20]	; (800f528 <_Z25getFont_Asap_Bold_10_4bppv+0x5c>)
 800f514:	2201      	movs	r2, #1
 800f516:	601a      	str	r2, [r3, #0]
 800f518:	4808      	ldr	r0, [pc, #32]	; (800f53c <_Z25getFont_Asap_Bold_10_4bppv+0x70>)
 800f51a:	f015 fba3 	bl	8024c64 <atexit>
    return Asap_Bold_10_4bpp;
 800f51e:	4b06      	ldr	r3, [pc, #24]	; (800f538 <_Z25getFont_Asap_Bold_10_4bppv+0x6c>)
}
 800f520:	4618      	mov	r0, r3
 800f522:	46bd      	mov	sp, r7
 800f524:	bd80      	pop	{r7, pc}
 800f526:	bf00      	nop
 800f528:	20008530 	.word	0x20008530
 800f52c:	0802d6f8 	.word	0x0802d6f8
 800f530:	08026498 	.word	0x08026498
 800f534:	0802d714 	.word	0x0802d714
 800f538:	2000850c 	.word	0x2000850c
 800f53c:	0800f4bd 	.word	0x0800f4bd

0800f540 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_12_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_12_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_12_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_12_4bpp(glyphs_Asap_Bold_12_4bpp, 26, 12, 0, 4, 1, 0, 1, unicodes_Asap_Bold_12_4bpp, kerning_Asap_Bold_12_4bpp, 63, 0, 0);
 800f540:	b580      	push	{r7, lr}
 800f542:	af00      	add	r7, sp, #0
 800f544:	4801      	ldr	r0, [pc, #4]	; (800f54c <__tcf_0+0xc>)
 800f546:	f7ff fe8d 	bl	800f264 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f54a:	bd80      	pop	{r7, pc}
 800f54c:	20008534 	.word	0x20008534

0800f550 <_Z25getFont_Asap_Bold_12_4bppv>:
{
 800f550:	b580      	push	{r7, lr}
 800f552:	b08a      	sub	sp, #40	; 0x28
 800f554:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_12_4bpp(glyphs_Asap_Bold_12_4bpp, 26, 12, 0, 4, 1, 0, 1, unicodes_Asap_Bold_12_4bpp, kerning_Asap_Bold_12_4bpp, 63, 0, 0);
 800f556:	4b15      	ldr	r3, [pc, #84]	; (800f5ac <_Z25getFont_Asap_Bold_12_4bppv+0x5c>)
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	f003 0301 	and.w	r3, r3, #1
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d11f      	bne.n	800f5a2 <_Z25getFont_Asap_Bold_12_4bppv+0x52>
 800f562:	2300      	movs	r3, #0
 800f564:	9309      	str	r3, [sp, #36]	; 0x24
 800f566:	2300      	movs	r3, #0
 800f568:	9308      	str	r3, [sp, #32]
 800f56a:	233f      	movs	r3, #63	; 0x3f
 800f56c:	9307      	str	r3, [sp, #28]
 800f56e:	4b10      	ldr	r3, [pc, #64]	; (800f5b0 <_Z25getFont_Asap_Bold_12_4bppv+0x60>)
 800f570:	9306      	str	r3, [sp, #24]
 800f572:	4b10      	ldr	r3, [pc, #64]	; (800f5b4 <_Z25getFont_Asap_Bold_12_4bppv+0x64>)
 800f574:	9305      	str	r3, [sp, #20]
 800f576:	2301      	movs	r3, #1
 800f578:	9304      	str	r3, [sp, #16]
 800f57a:	2300      	movs	r3, #0
 800f57c:	9303      	str	r3, [sp, #12]
 800f57e:	2301      	movs	r3, #1
 800f580:	9302      	str	r3, [sp, #8]
 800f582:	2304      	movs	r3, #4
 800f584:	9301      	str	r3, [sp, #4]
 800f586:	2300      	movs	r3, #0
 800f588:	9300      	str	r3, [sp, #0]
 800f58a:	230c      	movs	r3, #12
 800f58c:	221a      	movs	r2, #26
 800f58e:	490a      	ldr	r1, [pc, #40]	; (800f5b8 <_Z25getFont_Asap_Bold_12_4bppv+0x68>)
 800f590:	480a      	ldr	r0, [pc, #40]	; (800f5bc <_Z25getFont_Asap_Bold_12_4bppv+0x6c>)
 800f592:	f7ff ff0b 	bl	800f3ac <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f596:	4b05      	ldr	r3, [pc, #20]	; (800f5ac <_Z25getFont_Asap_Bold_12_4bppv+0x5c>)
 800f598:	2201      	movs	r2, #1
 800f59a:	601a      	str	r2, [r3, #0]
 800f59c:	4808      	ldr	r0, [pc, #32]	; (800f5c0 <_Z25getFont_Asap_Bold_12_4bppv+0x70>)
 800f59e:	f015 fb61 	bl	8024c64 <atexit>
    return Asap_Bold_12_4bpp;
 800f5a2:	4b06      	ldr	r3, [pc, #24]	; (800f5bc <_Z25getFont_Asap_Bold_12_4bppv+0x6c>)
}
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	bd80      	pop	{r7, pc}
 800f5aa:	bf00      	nop
 800f5ac:	20008558 	.word	0x20008558
 800f5b0:	0802d6fc 	.word	0x0802d6fc
 800f5b4:	0802649c 	.word	0x0802649c
 800f5b8:	0802d74c 	.word	0x0802d74c
 800f5bc:	20008534 	.word	0x20008534
 800f5c0:	0800f541 	.word	0x0800f541

0800f5c4 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_18_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_18_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_18_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_18_4bpp(glyphs_Asap_Bold_18_4bpp, 13, 18, 0, 4, 1, 0, 0, unicodes_Asap_Bold_18_4bpp, kerning_Asap_Bold_18_4bpp, 0, 0, 0);
 800f5c4:	b580      	push	{r7, lr}
 800f5c6:	af00      	add	r7, sp, #0
 800f5c8:	4801      	ldr	r0, [pc, #4]	; (800f5d0 <__tcf_0+0xc>)
 800f5ca:	f7ff fe4b 	bl	800f264 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f5ce:	bd80      	pop	{r7, pc}
 800f5d0:	2000855c 	.word	0x2000855c

0800f5d4 <_Z25getFont_Asap_Bold_18_4bppv>:
{
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	b08a      	sub	sp, #40	; 0x28
 800f5d8:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_18_4bpp(glyphs_Asap_Bold_18_4bpp, 13, 18, 0, 4, 1, 0, 0, unicodes_Asap_Bold_18_4bpp, kerning_Asap_Bold_18_4bpp, 0, 0, 0);
 800f5da:	4b15      	ldr	r3, [pc, #84]	; (800f630 <_Z25getFont_Asap_Bold_18_4bppv+0x5c>)
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	f003 0301 	and.w	r3, r3, #1
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d11f      	bne.n	800f626 <_Z25getFont_Asap_Bold_18_4bppv+0x52>
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	9309      	str	r3, [sp, #36]	; 0x24
 800f5ea:	2300      	movs	r3, #0
 800f5ec:	9308      	str	r3, [sp, #32]
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	9307      	str	r3, [sp, #28]
 800f5f2:	4b10      	ldr	r3, [pc, #64]	; (800f634 <_Z25getFont_Asap_Bold_18_4bppv+0x60>)
 800f5f4:	9306      	str	r3, [sp, #24]
 800f5f6:	4b10      	ldr	r3, [pc, #64]	; (800f638 <_Z25getFont_Asap_Bold_18_4bppv+0x64>)
 800f5f8:	9305      	str	r3, [sp, #20]
 800f5fa:	2300      	movs	r3, #0
 800f5fc:	9304      	str	r3, [sp, #16]
 800f5fe:	2300      	movs	r3, #0
 800f600:	9303      	str	r3, [sp, #12]
 800f602:	2301      	movs	r3, #1
 800f604:	9302      	str	r3, [sp, #8]
 800f606:	2304      	movs	r3, #4
 800f608:	9301      	str	r3, [sp, #4]
 800f60a:	2300      	movs	r3, #0
 800f60c:	9300      	str	r3, [sp, #0]
 800f60e:	2312      	movs	r3, #18
 800f610:	220d      	movs	r2, #13
 800f612:	490a      	ldr	r1, [pc, #40]	; (800f63c <_Z25getFont_Asap_Bold_18_4bppv+0x68>)
 800f614:	480a      	ldr	r0, [pc, #40]	; (800f640 <_Z25getFont_Asap_Bold_18_4bppv+0x6c>)
 800f616:	f7ff fec9 	bl	800f3ac <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f61a:	4b05      	ldr	r3, [pc, #20]	; (800f630 <_Z25getFont_Asap_Bold_18_4bppv+0x5c>)
 800f61c:	2201      	movs	r2, #1
 800f61e:	601a      	str	r2, [r3, #0]
 800f620:	4808      	ldr	r0, [pc, #32]	; (800f644 <_Z25getFont_Asap_Bold_18_4bppv+0x70>)
 800f622:	f015 fb1f 	bl	8024c64 <atexit>
    return Asap_Bold_18_4bpp;
 800f626:	4b06      	ldr	r3, [pc, #24]	; (800f640 <_Z25getFont_Asap_Bold_18_4bppv+0x6c>)
}
 800f628:	4618      	mov	r0, r3
 800f62a:	46bd      	mov	sp, r7
 800f62c:	bd80      	pop	{r7, pc}
 800f62e:	bf00      	nop
 800f630:	20008580 	.word	0x20008580
 800f634:	0802d700 	.word	0x0802d700
 800f638:	080264a0 	.word	0x080264a0
 800f63c:	0802d8b8 	.word	0x0802d8b8
 800f640:	2000855c 	.word	0x2000855c
 800f644:	0800f5c5 	.word	0x0800f5c5

0800f648 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_21_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_21_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_21_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_21_4bpp(glyphs_Asap_Bold_21_4bpp, 13, 21, 0, 4, 1, 0, 1, unicodes_Asap_Bold_21_4bpp, kerning_Asap_Bold_21_4bpp, 63, 0, 0);
 800f648:	b580      	push	{r7, lr}
 800f64a:	af00      	add	r7, sp, #0
 800f64c:	4801      	ldr	r0, [pc, #4]	; (800f654 <__tcf_0+0xc>)
 800f64e:	f7ff fe09 	bl	800f264 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f652:	bd80      	pop	{r7, pc}
 800f654:	20008584 	.word	0x20008584

0800f658 <_Z25getFont_Asap_Bold_21_4bppv>:
{
 800f658:	b580      	push	{r7, lr}
 800f65a:	b08a      	sub	sp, #40	; 0x28
 800f65c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_21_4bpp(glyphs_Asap_Bold_21_4bpp, 13, 21, 0, 4, 1, 0, 1, unicodes_Asap_Bold_21_4bpp, kerning_Asap_Bold_21_4bpp, 63, 0, 0);
 800f65e:	4b15      	ldr	r3, [pc, #84]	; (800f6b4 <_Z25getFont_Asap_Bold_21_4bppv+0x5c>)
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	f003 0301 	and.w	r3, r3, #1
 800f666:	2b00      	cmp	r3, #0
 800f668:	d11f      	bne.n	800f6aa <_Z25getFont_Asap_Bold_21_4bppv+0x52>
 800f66a:	2300      	movs	r3, #0
 800f66c:	9309      	str	r3, [sp, #36]	; 0x24
 800f66e:	2300      	movs	r3, #0
 800f670:	9308      	str	r3, [sp, #32]
 800f672:	233f      	movs	r3, #63	; 0x3f
 800f674:	9307      	str	r3, [sp, #28]
 800f676:	4b10      	ldr	r3, [pc, #64]	; (800f6b8 <_Z25getFont_Asap_Bold_21_4bppv+0x60>)
 800f678:	9306      	str	r3, [sp, #24]
 800f67a:	4b10      	ldr	r3, [pc, #64]	; (800f6bc <_Z25getFont_Asap_Bold_21_4bppv+0x64>)
 800f67c:	9305      	str	r3, [sp, #20]
 800f67e:	2301      	movs	r3, #1
 800f680:	9304      	str	r3, [sp, #16]
 800f682:	2300      	movs	r3, #0
 800f684:	9303      	str	r3, [sp, #12]
 800f686:	2301      	movs	r3, #1
 800f688:	9302      	str	r3, [sp, #8]
 800f68a:	2304      	movs	r3, #4
 800f68c:	9301      	str	r3, [sp, #4]
 800f68e:	2300      	movs	r3, #0
 800f690:	9300      	str	r3, [sp, #0]
 800f692:	2315      	movs	r3, #21
 800f694:	220d      	movs	r2, #13
 800f696:	490a      	ldr	r1, [pc, #40]	; (800f6c0 <_Z25getFont_Asap_Bold_21_4bppv+0x68>)
 800f698:	480a      	ldr	r0, [pc, #40]	; (800f6c4 <_Z25getFont_Asap_Bold_21_4bppv+0x6c>)
 800f69a:	f7ff fe87 	bl	800f3ac <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f69e:	4b05      	ldr	r3, [pc, #20]	; (800f6b4 <_Z25getFont_Asap_Bold_21_4bppv+0x5c>)
 800f6a0:	2201      	movs	r2, #1
 800f6a2:	601a      	str	r2, [r3, #0]
 800f6a4:	4808      	ldr	r0, [pc, #32]	; (800f6c8 <_Z25getFont_Asap_Bold_21_4bppv+0x70>)
 800f6a6:	f015 fadd 	bl	8024c64 <atexit>
    return Asap_Bold_21_4bpp;
 800f6aa:	4b06      	ldr	r3, [pc, #24]	; (800f6c4 <_Z25getFont_Asap_Bold_21_4bppv+0x6c>)
}
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	46bd      	mov	sp, r7
 800f6b0:	bd80      	pop	{r7, pc}
 800f6b2:	bf00      	nop
 800f6b4:	200085a8 	.word	0x200085a8
 800f6b8:	0802d704 	.word	0x0802d704
 800f6bc:	080264a4 	.word	0x080264a4
 800f6c0:	0802d970 	.word	0x0802d970
 800f6c4:	20008584 	.word	0x20008584
 800f6c8:	0800f649 	.word	0x0800f649

0800f6cc <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_30_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_30_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_30_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_30_4bpp(glyphs_Asap_Bold_30_4bpp, 13, 30, 0, 4, 1, 0, 1, unicodes_Asap_Bold_30_4bpp, kerning_Asap_Bold_30_4bpp, 63, 0, 0);
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	af00      	add	r7, sp, #0
 800f6d0:	4801      	ldr	r0, [pc, #4]	; (800f6d8 <__tcf_0+0xc>)
 800f6d2:	f7ff fdc7 	bl	800f264 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f6d6:	bd80      	pop	{r7, pc}
 800f6d8:	200085ac 	.word	0x200085ac

0800f6dc <_Z25getFont_Asap_Bold_30_4bppv>:
{
 800f6dc:	b580      	push	{r7, lr}
 800f6de:	b08a      	sub	sp, #40	; 0x28
 800f6e0:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_30_4bpp(glyphs_Asap_Bold_30_4bpp, 13, 30, 0, 4, 1, 0, 1, unicodes_Asap_Bold_30_4bpp, kerning_Asap_Bold_30_4bpp, 63, 0, 0);
 800f6e2:	4b15      	ldr	r3, [pc, #84]	; (800f738 <_Z25getFont_Asap_Bold_30_4bppv+0x5c>)
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	f003 0301 	and.w	r3, r3, #1
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d11f      	bne.n	800f72e <_Z25getFont_Asap_Bold_30_4bppv+0x52>
 800f6ee:	2300      	movs	r3, #0
 800f6f0:	9309      	str	r3, [sp, #36]	; 0x24
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	9308      	str	r3, [sp, #32]
 800f6f6:	233f      	movs	r3, #63	; 0x3f
 800f6f8:	9307      	str	r3, [sp, #28]
 800f6fa:	4b10      	ldr	r3, [pc, #64]	; (800f73c <_Z25getFont_Asap_Bold_30_4bppv+0x60>)
 800f6fc:	9306      	str	r3, [sp, #24]
 800f6fe:	4b10      	ldr	r3, [pc, #64]	; (800f740 <_Z25getFont_Asap_Bold_30_4bppv+0x64>)
 800f700:	9305      	str	r3, [sp, #20]
 800f702:	2301      	movs	r3, #1
 800f704:	9304      	str	r3, [sp, #16]
 800f706:	2300      	movs	r3, #0
 800f708:	9303      	str	r3, [sp, #12]
 800f70a:	2301      	movs	r3, #1
 800f70c:	9302      	str	r3, [sp, #8]
 800f70e:	2304      	movs	r3, #4
 800f710:	9301      	str	r3, [sp, #4]
 800f712:	2300      	movs	r3, #0
 800f714:	9300      	str	r3, [sp, #0]
 800f716:	231e      	movs	r3, #30
 800f718:	220d      	movs	r2, #13
 800f71a:	490a      	ldr	r1, [pc, #40]	; (800f744 <_Z25getFont_Asap_Bold_30_4bppv+0x68>)
 800f71c:	480a      	ldr	r0, [pc, #40]	; (800f748 <_Z25getFont_Asap_Bold_30_4bppv+0x6c>)
 800f71e:	f7ff fe45 	bl	800f3ac <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f722:	4b05      	ldr	r3, [pc, #20]	; (800f738 <_Z25getFont_Asap_Bold_30_4bppv+0x5c>)
 800f724:	2201      	movs	r2, #1
 800f726:	601a      	str	r2, [r3, #0]
 800f728:	4808      	ldr	r0, [pc, #32]	; (800f74c <_Z25getFont_Asap_Bold_30_4bppv+0x70>)
 800f72a:	f015 fa9b 	bl	8024c64 <atexit>
    return Asap_Bold_30_4bpp;
 800f72e:	4b06      	ldr	r3, [pc, #24]	; (800f748 <_Z25getFont_Asap_Bold_30_4bppv+0x6c>)
}
 800f730:	4618      	mov	r0, r3
 800f732:	46bd      	mov	sp, r7
 800f734:	bd80      	pop	{r7, pc}
 800f736:	bf00      	nop
 800f738:	200085d0 	.word	0x200085d0
 800f73c:	0802d708 	.word	0x0802d708
 800f740:	080264a8 	.word	0x080264a8
 800f744:	0802da28 	.word	0x0802da28
 800f748:	200085ac 	.word	0x200085ac
 800f74c:	0800f6cd 	.word	0x0800f6cd

0800f750 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_40_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_40_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_40_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_40_4bpp(glyphs_Asap_Bold_40_4bpp, 12, 40, 0, 4, 1, 0, 1, unicodes_Asap_Bold_40_4bpp, kerning_Asap_Bold_40_4bpp, 63, 0, 0);
 800f750:	b580      	push	{r7, lr}
 800f752:	af00      	add	r7, sp, #0
 800f754:	4801      	ldr	r0, [pc, #4]	; (800f75c <__tcf_0+0xc>)
 800f756:	f7ff fd85 	bl	800f264 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f75a:	bd80      	pop	{r7, pc}
 800f75c:	200085d4 	.word	0x200085d4

0800f760 <_Z25getFont_Asap_Bold_40_4bppv>:
{
 800f760:	b580      	push	{r7, lr}
 800f762:	b08a      	sub	sp, #40	; 0x28
 800f764:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_40_4bpp(glyphs_Asap_Bold_40_4bpp, 12, 40, 0, 4, 1, 0, 1, unicodes_Asap_Bold_40_4bpp, kerning_Asap_Bold_40_4bpp, 63, 0, 0);
 800f766:	4b15      	ldr	r3, [pc, #84]	; (800f7bc <_Z25getFont_Asap_Bold_40_4bppv+0x5c>)
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	f003 0301 	and.w	r3, r3, #1
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d11f      	bne.n	800f7b2 <_Z25getFont_Asap_Bold_40_4bppv+0x52>
 800f772:	2300      	movs	r3, #0
 800f774:	9309      	str	r3, [sp, #36]	; 0x24
 800f776:	2300      	movs	r3, #0
 800f778:	9308      	str	r3, [sp, #32]
 800f77a:	233f      	movs	r3, #63	; 0x3f
 800f77c:	9307      	str	r3, [sp, #28]
 800f77e:	4b10      	ldr	r3, [pc, #64]	; (800f7c0 <_Z25getFont_Asap_Bold_40_4bppv+0x60>)
 800f780:	9306      	str	r3, [sp, #24]
 800f782:	4b10      	ldr	r3, [pc, #64]	; (800f7c4 <_Z25getFont_Asap_Bold_40_4bppv+0x64>)
 800f784:	9305      	str	r3, [sp, #20]
 800f786:	2301      	movs	r3, #1
 800f788:	9304      	str	r3, [sp, #16]
 800f78a:	2300      	movs	r3, #0
 800f78c:	9303      	str	r3, [sp, #12]
 800f78e:	2301      	movs	r3, #1
 800f790:	9302      	str	r3, [sp, #8]
 800f792:	2304      	movs	r3, #4
 800f794:	9301      	str	r3, [sp, #4]
 800f796:	2300      	movs	r3, #0
 800f798:	9300      	str	r3, [sp, #0]
 800f79a:	2328      	movs	r3, #40	; 0x28
 800f79c:	220c      	movs	r2, #12
 800f79e:	490a      	ldr	r1, [pc, #40]	; (800f7c8 <_Z25getFont_Asap_Bold_40_4bppv+0x68>)
 800f7a0:	480a      	ldr	r0, [pc, #40]	; (800f7cc <_Z25getFont_Asap_Bold_40_4bppv+0x6c>)
 800f7a2:	f7ff fe03 	bl	800f3ac <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f7a6:	4b05      	ldr	r3, [pc, #20]	; (800f7bc <_Z25getFont_Asap_Bold_40_4bppv+0x5c>)
 800f7a8:	2201      	movs	r2, #1
 800f7aa:	601a      	str	r2, [r3, #0]
 800f7ac:	4808      	ldr	r0, [pc, #32]	; (800f7d0 <_Z25getFont_Asap_Bold_40_4bppv+0x70>)
 800f7ae:	f015 fa59 	bl	8024c64 <atexit>
    return Asap_Bold_40_4bpp;
 800f7b2:	4b06      	ldr	r3, [pc, #24]	; (800f7cc <_Z25getFont_Asap_Bold_40_4bppv+0x6c>)
}
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	46bd      	mov	sp, r7
 800f7b8:	bd80      	pop	{r7, pc}
 800f7ba:	bf00      	nop
 800f7bc:	200085f8 	.word	0x200085f8
 800f7c0:	0802d70c 	.word	0x0802d70c
 800f7c4:	080264ac 	.word	0x080264ac
 800f7c8:	0802dae0 	.word	0x0802dae0
 800f7cc:	200085d4 	.word	0x200085d4
 800f7d0:	0800f751 	.word	0x0800f751

0800f7d4 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_60_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_60_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_60_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_60_4bpp(glyphs_Asap_Bold_60_4bpp, 12, 60, 0, 4, 1, 0, 0, unicodes_Asap_Bold_60_4bpp, kerning_Asap_Bold_60_4bpp, 63, 0, 0);
 800f7d4:	b580      	push	{r7, lr}
 800f7d6:	af00      	add	r7, sp, #0
 800f7d8:	4801      	ldr	r0, [pc, #4]	; (800f7e0 <__tcf_0+0xc>)
 800f7da:	f7ff fd43 	bl	800f264 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f7de:	bd80      	pop	{r7, pc}
 800f7e0:	200085fc 	.word	0x200085fc

0800f7e4 <_Z25getFont_Asap_Bold_60_4bppv>:
{
 800f7e4:	b580      	push	{r7, lr}
 800f7e6:	b08a      	sub	sp, #40	; 0x28
 800f7e8:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_60_4bpp(glyphs_Asap_Bold_60_4bpp, 12, 60, 0, 4, 1, 0, 0, unicodes_Asap_Bold_60_4bpp, kerning_Asap_Bold_60_4bpp, 63, 0, 0);
 800f7ea:	4b15      	ldr	r3, [pc, #84]	; (800f840 <_Z25getFont_Asap_Bold_60_4bppv+0x5c>)
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	f003 0301 	and.w	r3, r3, #1
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d11f      	bne.n	800f836 <_Z25getFont_Asap_Bold_60_4bppv+0x52>
 800f7f6:	2300      	movs	r3, #0
 800f7f8:	9309      	str	r3, [sp, #36]	; 0x24
 800f7fa:	2300      	movs	r3, #0
 800f7fc:	9308      	str	r3, [sp, #32]
 800f7fe:	233f      	movs	r3, #63	; 0x3f
 800f800:	9307      	str	r3, [sp, #28]
 800f802:	4b10      	ldr	r3, [pc, #64]	; (800f844 <_Z25getFont_Asap_Bold_60_4bppv+0x60>)
 800f804:	9306      	str	r3, [sp, #24]
 800f806:	4b10      	ldr	r3, [pc, #64]	; (800f848 <_Z25getFont_Asap_Bold_60_4bppv+0x64>)
 800f808:	9305      	str	r3, [sp, #20]
 800f80a:	2300      	movs	r3, #0
 800f80c:	9304      	str	r3, [sp, #16]
 800f80e:	2300      	movs	r3, #0
 800f810:	9303      	str	r3, [sp, #12]
 800f812:	2301      	movs	r3, #1
 800f814:	9302      	str	r3, [sp, #8]
 800f816:	2304      	movs	r3, #4
 800f818:	9301      	str	r3, [sp, #4]
 800f81a:	2300      	movs	r3, #0
 800f81c:	9300      	str	r3, [sp, #0]
 800f81e:	233c      	movs	r3, #60	; 0x3c
 800f820:	220c      	movs	r2, #12
 800f822:	490a      	ldr	r1, [pc, #40]	; (800f84c <_Z25getFont_Asap_Bold_60_4bppv+0x68>)
 800f824:	480a      	ldr	r0, [pc, #40]	; (800f850 <_Z25getFont_Asap_Bold_60_4bppv+0x6c>)
 800f826:	f7ff fdc1 	bl	800f3ac <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f82a:	4b05      	ldr	r3, [pc, #20]	; (800f840 <_Z25getFont_Asap_Bold_60_4bppv+0x5c>)
 800f82c:	2201      	movs	r2, #1
 800f82e:	601a      	str	r2, [r3, #0]
 800f830:	4808      	ldr	r0, [pc, #32]	; (800f854 <_Z25getFont_Asap_Bold_60_4bppv+0x70>)
 800f832:	f015 fa17 	bl	8024c64 <atexit>
    return Asap_Bold_60_4bpp;
 800f836:	4b06      	ldr	r3, [pc, #24]	; (800f850 <_Z25getFont_Asap_Bold_60_4bppv+0x6c>)
}
 800f838:	4618      	mov	r0, r3
 800f83a:	46bd      	mov	sp, r7
 800f83c:	bd80      	pop	{r7, pc}
 800f83e:	bf00      	nop
 800f840:	20008620 	.word	0x20008620
 800f844:	0802d710 	.word	0x0802d710
 800f848:	080264b0 	.word	0x080264b0
 800f84c:	0802db88 	.word	0x0802db88
 800f850:	200085fc 	.word	0x200085fc
 800f854:	0800f7d5 	.word	0x0800f7d5

0800f858 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800f858:	b480      	push	{r7}
 800f85a:	b083      	sub	sp, #12
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	6078      	str	r0, [r7, #4]
 800f860:	6039      	str	r1, [r7, #0]
 800f862:	683b      	ldr	r3, [r7, #0]
 800f864:	4618      	mov	r0, r3
 800f866:	370c      	adds	r7, #12
 800f868:	46bd      	mov	sp, r7
 800f86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86e:	4770      	bx	lr

0800f870 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     *        This handler is invoked when a mouse click or display touch event has been
     *        detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800f870:	b480      	push	{r7}
 800f872:	b083      	sub	sp, #12
 800f874:	af00      	add	r7, sp, #0
 800f876:	6078      	str	r0, [r7, #4]
 800f878:	6039      	str	r1, [r7, #0]
    {
    }
 800f87a:	bf00      	nop
 800f87c:	370c      	adds	r7, #12
 800f87e:	46bd      	mov	sp, r7
 800f880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f884:	4770      	bx	lr

0800f886 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
     *
     *        This handler is invoked when a drag event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800f886:	b480      	push	{r7}
 800f888:	b083      	sub	sp, #12
 800f88a:	af00      	add	r7, sp, #0
 800f88c:	6078      	str	r0, [r7, #4]
 800f88e:	6039      	str	r1, [r7, #0]
    {
    }
 800f890:	bf00      	nop
 800f892:	370c      	adds	r7, #12
 800f894:	46bd      	mov	sp, r7
 800f896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f89a:	4770      	bx	lr

0800f89c <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
     *
     *        This handler is invoked when a gesture event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800f89c:	b480      	push	{r7}
 800f89e:	b083      	sub	sp, #12
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	6078      	str	r0, [r7, #4]
 800f8a4:	6039      	str	r1, [r7, #0]
    {
    }
 800f8a6:	bf00      	nop
 800f8a8:	370c      	adds	r7, #12
 800f8aa:	46bd      	mov	sp, r7
 800f8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b0:	4770      	bx	lr

0800f8b2 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
     *        This handler is invoked when a key (or button) event has been detected by the
     *        system.
     *
     * @param c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800f8b2:	b480      	push	{r7}
 800f8b4:	b083      	sub	sp, #12
 800f8b6:	af00      	add	r7, sp, #0
 800f8b8:	6078      	str	r0, [r7, #4]
 800f8ba:	460b      	mov	r3, r1
 800f8bc:	70fb      	strb	r3, [r7, #3]
    {
    }
 800f8be:	bf00      	nop
 800f8c0:	370c      	adds	r7, #12
 800f8c2:	46bd      	mov	sp, r7
 800f8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c8:	4770      	bx	lr

0800f8ca <_ZN8touchgfx15UIEventListener15handleTickEventEv>:
     * @brief This handler is invoked when a system tick event has been generated.
     *
     *        This handler is invoked when a system tick event has been generated. The system
     *        tick period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800f8ca:	b480      	push	{r7}
 800f8cc:	b083      	sub	sp, #12
 800f8ce:	af00      	add	r7, sp, #0
 800f8d0:	6078      	str	r0, [r7, #4]
    {
    }
 800f8d2:	bf00      	nop
 800f8d4:	370c      	adds	r7, #12
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8dc:	4770      	bx	lr

0800f8de <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:
     *
     * @brief This handler is invoked when a change screen event is pending.
     *
     *        This handler is invoked when a change screen event is pending.
     */
    virtual void handlePendingScreenTransition()
 800f8de:	b480      	push	{r7}
 800f8e0:	b083      	sub	sp, #12
 800f8e2:	af00      	add	r7, sp, #0
 800f8e4:	6078      	str	r0, [r7, #4]
    {
    }
 800f8e6:	bf00      	nop
 800f8e8:	370c      	adds	r7, #12
 800f8ea:	46bd      	mov	sp, r7
 800f8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f0:	4770      	bx	lr
	...

0800f8f4 <_ZN8touchgfx15UIEventListenerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~UIEventListener()
 800f8f4:	b480      	push	{r7}
 800f8f6:	b083      	sub	sp, #12
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	6078      	str	r0, [r7, #4]
    {
 800f8fc:	4a04      	ldr	r2, [pc, #16]	; (800f910 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	601a      	str	r2, [r3, #0]
    }
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	4618      	mov	r0, r3
 800f906:	370c      	adds	r7, #12
 800f908:	46bd      	mov	sp, r7
 800f90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90e:	4770      	bx	lr
 800f910:	080265a4 	.word	0x080265a4

0800f914 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800f914:	b580      	push	{r7, lr}
 800f916:	b082      	sub	sp, #8
 800f918:	af00      	add	r7, sp, #0
 800f91a:	6078      	str	r0, [r7, #4]
    }
 800f91c:	6878      	ldr	r0, [r7, #4]
 800f91e:	f7ff ffe9 	bl	800f8f4 <_ZN8touchgfx15UIEventListenerD1Ev>
 800f922:	2104      	movs	r1, #4
 800f924:	6878      	ldr	r0, [r7, #4]
 800f926:	f015 f954 	bl	8024bd2 <_ZdlPvj>
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	4618      	mov	r0, r3
 800f92e:	3708      	adds	r7, #8
 800f930:	46bd      	mov	sp, r7
 800f932:	bd80      	pop	{r7, pc}

0800f934 <_ZN8touchgfx10TransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs the Transition.
     */
    Transition() :
 800f934:	b480      	push	{r7}
 800f936:	b083      	sub	sp, #12
 800f938:	af00      	add	r7, sp, #0
 800f93a:	6078      	str	r0, [r7, #4]
        screenContainer(0), done(false)
 800f93c:	4a07      	ldr	r2, [pc, #28]	; (800f95c <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	601a      	str	r2, [r3, #0]
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	2200      	movs	r2, #0
 800f946:	605a      	str	r2, [r3, #4]
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	2200      	movs	r2, #0
 800f94c:	721a      	strb	r2, [r3, #8]
    {
    }
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	4618      	mov	r0, r3
 800f952:	370c      	adds	r7, #12
 800f954:	46bd      	mov	sp, r7
 800f956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95a:	4770      	bx	lr
 800f95c:	08026584 	.word	0x08026584

0800f960 <_ZN8touchgfx10TransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Transition()
 800f960:	b480      	push	{r7}
 800f962:	b083      	sub	sp, #12
 800f964:	af00      	add	r7, sp, #0
 800f966:	6078      	str	r0, [r7, #4]
    {
 800f968:	4a04      	ldr	r2, [pc, #16]	; (800f97c <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	601a      	str	r2, [r3, #0]
    }
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	4618      	mov	r0, r3
 800f972:	370c      	adds	r7, #12
 800f974:	46bd      	mov	sp, r7
 800f976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f97a:	4770      	bx	lr
 800f97c:	08026584 	.word	0x08026584

0800f980 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800f980:	b580      	push	{r7, lr}
 800f982:	b082      	sub	sp, #8
 800f984:	af00      	add	r7, sp, #0
 800f986:	6078      	str	r0, [r7, #4]
    }
 800f988:	6878      	ldr	r0, [r7, #4]
 800f98a:	f7ff ffe9 	bl	800f960 <_ZN8touchgfx10TransitionD1Ev>
 800f98e:	210c      	movs	r1, #12
 800f990:	6878      	ldr	r0, [r7, #4]
 800f992:	f015 f91e 	bl	8024bd2 <_ZdlPvj>
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	4618      	mov	r0, r3
 800f99a:	3708      	adds	r7, #8
 800f99c:	46bd      	mov	sp, r7
 800f99e:	bd80      	pop	{r7, pc}

0800f9a0 <_ZN8touchgfx10Transition15handleTickEventEv>:
     *
     * @brief Called for every tick when transitioning.
     *
     *        Called for every tick when transitioning. Base does nothing.
     */
    virtual void handleTickEvent() { }
 800f9a0:	b480      	push	{r7}
 800f9a2:	b083      	sub	sp, #12
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	6078      	str	r0, [r7, #4]
 800f9a8:	bf00      	nop
 800f9aa:	370c      	adds	r7, #12
 800f9ac:	46bd      	mov	sp, r7
 800f9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b2:	4770      	bx	lr

0800f9b4 <_ZN8touchgfx10Transition8tearDownEv>:
     * @brief Tears down the Animation.
     *
     *        Tears down the Animation. Called before the d.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void tearDown() { }
 800f9b4:	b480      	push	{r7}
 800f9b6:	b083      	sub	sp, #12
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	6078      	str	r0, [r7, #4]
 800f9bc:	bf00      	nop
 800f9be:	370c      	adds	r7, #12
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c6:	4770      	bx	lr

0800f9c8 <_ZN8touchgfx10Transition4initEv>:
     * @brief Initializes the transition.
     *
     *        Initializes the transition. Called after the c.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void init() { }
 800f9c8:	b480      	push	{r7}
 800f9ca:	b083      	sub	sp, #12
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	6078      	str	r0, [r7, #4]
 800f9d0:	bf00      	nop
 800f9d2:	370c      	adds	r7, #12
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9da:	4770      	bx	lr

0800f9dc <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *        Sets the screen container. Is used by Screen to enable the transition to access
     *        the container.
     *
     * @param [in] cont The container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800f9dc:	b480      	push	{r7}
 800f9de:	b083      	sub	sp, #12
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	6078      	str	r0, [r7, #4]
 800f9e4:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	683a      	ldr	r2, [r7, #0]
 800f9ea:	605a      	str	r2, [r3, #4]
    }
 800f9ec:	bf00      	nop
 800f9ee:	370c      	adds	r7, #12
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f6:	4770      	bx	lr

0800f9f8 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *        provide a means to switch screen from places that does not have access to a
     *        pointer to the new screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800f9f8:	b480      	push	{r7}
 800f9fa:	b083      	sub	sp, #12
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	6078      	str	r0, [r7, #4]
 800fa00:	460b      	mov	r3, r1
 800fa02:	70fb      	strb	r3, [r7, #3]
    {
    }
 800fa04:	bf00      	nop
 800fa06:	370c      	adds	r7, #12
 800fa08:	46bd      	mov	sp, r7
 800fa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa0e:	4770      	bx	lr

0800fa10 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
     *
     * @brief Destructor.
     *
     *        Empty virtual destructor.
     */
    virtual ~GenericCallback()
 800fa10:	b480      	push	{r7}
 800fa12:	b083      	sub	sp, #12
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	6078      	str	r0, [r7, #4]
    {
 800fa18:	4a04      	ldr	r2, [pc, #16]	; (800fa2c <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	601a      	str	r2, [r3, #0]
    }
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	4618      	mov	r0, r3
 800fa22:	370c      	adds	r7, #12
 800fa24:	46bd      	mov	sp, r7
 800fa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa2a:	4770      	bx	lr
 800fa2c:	0802656c 	.word	0x0802656c

0800fa30 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800fa30:	b580      	push	{r7, lr}
 800fa32:	b082      	sub	sp, #8
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	6078      	str	r0, [r7, #4]
    }
 800fa38:	6878      	ldr	r0, [r7, #4]
 800fa3a:	f7ff ffe9 	bl	800fa10 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800fa3e:	2104      	movs	r1, #4
 800fa40:	6878      	ldr	r0, [r7, #4]
 800fa42:	f015 f8c6 	bl	8024bd2 <_ZdlPvj>
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	4618      	mov	r0, r3
 800fa4a:	3708      	adds	r7, #8
 800fa4c:	46bd      	mov	sp, r7
 800fa4e:	bd80      	pop	{r7, pc}

0800fa50 <_ZN8touchgfx3HAL11getInstanceEv>:
     *
     *        Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800fa50:	b480      	push	{r7}
 800fa52:	af00      	add	r7, sp, #0
    {
        return instance;
 800fa54:	4b03      	ldr	r3, [pc, #12]	; (800fa64 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800fa56:	681b      	ldr	r3, [r3, #0]
    }
 800fa58:	4618      	mov	r0, r3
 800fa5a:	46bd      	mov	sp, r7
 800fa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa60:	4770      	bx	lr
 800fa62:	bf00      	nop
 800fa64:	2000bc7c 	.word	0x2000bc7c

0800fa68 <_ZN8touchgfx3HAL3lcdEv>:
     *
     *        Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800fa68:	b480      	push	{r7}
 800fa6a:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800fa6c:	4b0b      	ldr	r3, [pc, #44]	; (800fa9c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d008      	beq.n	800fa8a <_ZN8touchgfx3HAL3lcdEv+0x22>
 800fa78:	4b08      	ldr	r3, [pc, #32]	; (800fa9c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d003      	beq.n	800fa8a <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800fa82:	4b06      	ldr	r3, [pc, #24]	; (800fa9c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fa88:	e002      	b.n	800fa90 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 800fa8a:	4b04      	ldr	r3, [pc, #16]	; (800fa9c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	689b      	ldr	r3, [r3, #8]
        }
    }
 800fa90:	4618      	mov	r0, r3
 800fa92:	46bd      	mov	sp, r7
 800fa94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa98:	4770      	bx	lr
 800fa9a:	bf00      	nop
 800fa9c:	2000bc7c 	.word	0x2000bc7c

0800faa0 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800faa0:	b580      	push	{r7, lr}
 800faa2:	b082      	sub	sp, #8
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	6078      	str	r0, [r7, #4]
 800faa8:	4a05      	ldr	r2, [pc, #20]	; (800fac0 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	601a      	str	r2, [r3, #0]
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	4618      	mov	r0, r3
 800fab2:	f7ff ff1f 	bl	800f8f4 <_ZN8touchgfx15UIEventListenerD1Ev>
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	4618      	mov	r0, r3
 800faba:	3708      	adds	r7, #8
 800fabc:	46bd      	mov	sp, r7
 800fabe:	bd80      	pop	{r7, pc}
 800fac0:	080285ac 	.word	0x080285ac

0800fac4 <_ZN8touchgfx11ApplicationD0Ev>:
 800fac4:	b580      	push	{r7, lr}
 800fac6:	b082      	sub	sp, #8
 800fac8:	af00      	add	r7, sp, #0
 800faca:	6078      	str	r0, [r7, #4]
 800facc:	6878      	ldr	r0, [r7, #4]
 800face:	f7ff ffe7 	bl	800faa0 <_ZN8touchgfx11ApplicationD1Ev>
 800fad2:	f44f 7198 	mov.w	r1, #304	; 0x130
 800fad6:	6878      	ldr	r0, [r7, #4]
 800fad8:	f015 f87b 	bl	8024bd2 <_ZdlPvj>
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	4618      	mov	r0, r3
 800fae0:	3708      	adds	r7, #8
 800fae2:	46bd      	mov	sp, r7
 800fae4:	bd80      	pop	{r7, pc}
	...

0800fae8 <_ZN8touchgfx14MVPApplicationC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    MVPApplication() :
 800fae8:	b580      	push	{r7, lr}
 800faea:	b082      	sub	sp, #8
 800faec:	af00      	add	r7, sp, #0
 800faee:	6078      	str	r0, [r7, #4]
        currentPresenter(0),
        pendingScreenTransitionCallback(0)
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	4618      	mov	r0, r3
 800faf4:	f009 f8c6 	bl	8018c84 <_ZN8touchgfx11ApplicationC1Ev>
 800faf8:	4a09      	ldr	r2, [pc, #36]	; (800fb20 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	601a      	str	r2, [r3, #0]
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	2200      	movs	r2, #0
 800fb02:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	2200      	movs	r2, #0
 800fb0a:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    {
        instance = this;
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	4a04      	ldr	r2, [pc, #16]	; (800fb24 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800fb12:	6013      	str	r3, [r2, #0]
    }
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	4618      	mov	r0, r3
 800fb18:	3708      	adds	r7, #8
 800fb1a:	46bd      	mov	sp, r7
 800fb1c:	bd80      	pop	{r7, pc}
 800fb1e:	bf00      	nop
 800fb20:	08026530 	.word	0x08026530
 800fb24:	2000bd08 	.word	0x2000bd08

0800fb28 <_ZN8touchgfx14MVPApplicationD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPApplication() { }
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b082      	sub	sp, #8
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]
 800fb30:	4a05      	ldr	r2, [pc, #20]	; (800fb48 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	601a      	str	r2, [r3, #0]
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	4618      	mov	r0, r3
 800fb3a:	f7ff ffb1 	bl	800faa0 <_ZN8touchgfx11ApplicationD1Ev>
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	4618      	mov	r0, r3
 800fb42:	3708      	adds	r7, #8
 800fb44:	46bd      	mov	sp, r7
 800fb46:	bd80      	pop	{r7, pc}
 800fb48:	08026530 	.word	0x08026530

0800fb4c <_ZN8touchgfx14MVPApplicationD0Ev>:
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b082      	sub	sp, #8
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	6078      	str	r0, [r7, #4]
 800fb54:	6878      	ldr	r0, [r7, #4]
 800fb56:	f7ff ffe7 	bl	800fb28 <_ZN8touchgfx14MVPApplicationD1Ev>
 800fb5a:	f44f 719c 	mov.w	r1, #312	; 0x138
 800fb5e:	6878      	ldr	r0, [r7, #4]
 800fb60:	f015 f837 	bl	8024bd2 <_ZdlPvj>
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	4618      	mov	r0, r3
 800fb68:	3708      	adds	r7, #8
 800fb6a:	46bd      	mov	sp, r7
 800fb6c:	bd80      	pop	{r7, pc}

0800fb6e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
     *
     * @brief Handles the pending screen transition.
     *
     *        Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800fb6e:	b580      	push	{r7, lr}
 800fb70:	b082      	sub	sp, #8
 800fb72:	af00      	add	r7, sp, #0
 800fb74:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800fb76:	6878      	ldr	r0, [r7, #4]
 800fb78:	f000 f804 	bl	800fb84 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800fb7c:	bf00      	nop
 800fb7e:	3708      	adds	r7, #8
 800fb80:	46bd      	mov	sp, r7
 800fb82:	bd80      	pop	{r7, pc}

0800fb84 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:
     * @brief Evaluates the pending Callback instances.
     *
     *        Evaluates the pending Callback instances. If a callback is valid, it is executed
     *        and a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800fb84:	b580      	push	{r7, lr}
 800fb86:	b082      	sub	sp, #8
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d00f      	beq.n	800fbb6 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	330c      	adds	r3, #12
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	4610      	mov	r0, r2
 800fbaa:	4798      	blx	r3
 800fbac:	4603      	mov	r3, r0
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d001      	beq.n	800fbb6 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800fbb2:	2301      	movs	r3, #1
 800fbb4:	e000      	b.n	800fbb8 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800fbb6:	2300      	movs	r3, #0
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d00e      	beq.n	800fbda <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	3308      	adds	r3, #8
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	4610      	mov	r0, r2
 800fbd0:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	2200      	movs	r2, #0
 800fbd6:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
        }
    }
 800fbda:	bf00      	nop
 800fbdc:	3708      	adds	r7, #8
 800fbde:	46bd      	mov	sp, r7
 800fbe0:	bd80      	pop	{r7, pc}

0800fbe2 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>:
 * @param [in] currentScreen    If non-null, the current screen.
 * @param [in] currentPresenter If non-null, the current presenter.
 * @param [in] currentTrans     If non-null, the current transaction.
 */
static inline void prepareTransition(Screen** currentScreen, Presenter** currentPresenter, Transition** currentTrans)
{
 800fbe2:	b580      	push	{r7, lr}
 800fbe4:	b084      	sub	sp, #16
 800fbe6:	af00      	add	r7, sp, #0
 800fbe8:	60f8      	str	r0, [r7, #12]
 800fbea:	60b9      	str	r1, [r7, #8]
 800fbec:	607a      	str	r2, [r7, #4]
    Application::getInstance()->clearAllTimerWidgets();
 800fbee:	f009 f827 	bl	8018c40 <_ZN8touchgfx11Application11getInstanceEv>
 800fbf2:	4603      	mov	r3, r0
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	f009 f829 	bl	8018c4c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>

    if (*currentTrans)
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d008      	beq.n	800fc14 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x32>
    {
        (*currentTrans)->tearDown();
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	681a      	ldr	r2, [r3, #0]
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	330c      	adds	r3, #12
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	4610      	mov	r0, r2
 800fc12:	4798      	blx	r3
    }
    if (*currentTrans)
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d007      	beq.n	800fc2c <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x4a>
    {
        (*currentTrans)->~Transition();
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	681a      	ldr	r2, [r3, #0]
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	4610      	mov	r0, r2
 800fc2a:	4798      	blx	r3
    }
    if (*currentScreen)
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d008      	beq.n	800fc46 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x64>
    {
        (*currentScreen)->tearDownScreen();
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	681a      	ldr	r2, [r3, #0]
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	3314      	adds	r3, #20
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	4610      	mov	r0, r2
 800fc44:	4798      	blx	r3
    }
    if (*currentPresenter)
 800fc46:	68bb      	ldr	r3, [r7, #8]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d008      	beq.n	800fc60 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x7e>
    {
        (*currentPresenter)->deactivate();
 800fc4e:	68bb      	ldr	r3, [r7, #8]
 800fc50:	681a      	ldr	r2, [r3, #0]
 800fc52:	68bb      	ldr	r3, [r7, #8]
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	3304      	adds	r3, #4
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	4610      	mov	r0, r2
 800fc5e:	4798      	blx	r3
    }
    if (*currentScreen)
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d007      	beq.n	800fc78 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x96>
    {
        (*currentScreen)->~Screen();
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	681a      	ldr	r2, [r3, #0]
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	4610      	mov	r0, r2
 800fc76:	4798      	blx	r3
    }
    if (*currentPresenter)
 800fc78:	68bb      	ldr	r3, [r7, #8]
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d008      	beq.n	800fc92 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0xb0>
    {
        (*currentPresenter)->~Presenter();
 800fc80:	68bb      	ldr	r3, [r7, #8]
 800fc82:	681a      	ldr	r2, [r3, #0]
 800fc84:	68bb      	ldr	r3, [r7, #8]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	3308      	adds	r3, #8
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	4610      	mov	r0, r2
 800fc90:	4798      	blx	r3
    }
}
 800fc92:	bf00      	nop
 800fc94:	3710      	adds	r7, #16
 800fc96:	46bd      	mov	sp, r7
 800fc98:	bd80      	pop	{r7, pc}

0800fc9a <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>:
 * @param [in] newScreen     If non-null, the new screen.
 * @param [in] newPresenter  If non-null, the new presenter.
 * @param [in] newTransition If non-null, the new transition.
 */
static inline void finalizeTransition(Screen* newScreen, Presenter* newPresenter, Transition* newTransition)
{
 800fc9a:	b580      	push	{r7, lr}
 800fc9c:	b084      	sub	sp, #16
 800fc9e:	af00      	add	r7, sp, #0
 800fca0:	60f8      	str	r0, [r7, #12]
 800fca2:	60b9      	str	r1, [r7, #8]
 800fca4:	607a      	str	r2, [r7, #4]
    newScreen->setupScreen();
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	330c      	adds	r3, #12
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	68f8      	ldr	r0, [r7, #12]
 800fcb0:	4798      	blx	r3
    newPresenter->activate();
 800fcb2:	68bb      	ldr	r3, [r7, #8]
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	68b8      	ldr	r0, [r7, #8]
 800fcba:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800fcbc:	6879      	ldr	r1, [r7, #4]
 800fcbe:	68f8      	ldr	r0, [r7, #12]
 800fcc0:	f00a f8ce 	bl	8019e60 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	3310      	adds	r3, #16
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	6878      	ldr	r0, [r7, #4]
 800fcce:	4798      	blx	r3

    Application::getInstance()->draw();
 800fcd0:	f008 ffb6 	bl	8018c40 <_ZN8touchgfx11Application11getInstanceEv>
 800fcd4:	4602      	mov	r2, r0
 800fcd6:	6813      	ldr	r3, [r2, #0]
 800fcd8:	3328      	adds	r3, #40	; 0x28
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	4610      	mov	r0, r2
 800fcde:	4798      	blx	r3
}
 800fce0:	bf00      	nop
 800fce2:	3710      	adds	r7, #16
 800fce4:	46bd      	mov	sp, r7
 800fce6:	bd80      	pop	{r7, pc}

0800fce8 <_ZN5Model4bindEP13ModelListener>:

    /**
     * Sets the modelListener to point to the currently active presenter. Called automatically
     * when switching screen.
     */
    void bind(ModelListener* listener)
 800fce8:	b480      	push	{r7}
 800fcea:	b083      	sub	sp, #12
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	6078      	str	r0, [r7, #4]
 800fcf0:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	683a      	ldr	r2, [r7, #0]
 800fcf6:	601a      	str	r2, [r3, #0]
    }
 800fcf8:	bf00      	nop
 800fcfa:	370c      	adds	r7, #12
 800fcfc:	46bd      	mov	sp, r7
 800fcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd02:	4770      	bx	lr

0800fd04 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800fd04:	b580      	push	{r7, lr}
 800fd06:	b082      	sub	sp, #8
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	6078      	str	r0, [r7, #4]
 800fd0c:	4a08      	ldr	r2, [pc, #32]	; (800fd30 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	601a      	str	r2, [r3, #0]
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800fd18:	4618      	mov	r0, r3
 800fd1a:	f000 fa5f 	bl	80101dc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	4618      	mov	r0, r3
 800fd22:	f7ff ff01 	bl	800fb28 <_ZN8touchgfx14MVPApplicationD1Ev>
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	4618      	mov	r0, r3
 800fd2a:	3708      	adds	r7, #8
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	bd80      	pop	{r7, pc}
 800fd30:	080264dc 	.word	0x080264dc

0800fd34 <_ZN23FrontendApplicationBaseD0Ev>:
 800fd34:	b580      	push	{r7, lr}
 800fd36:	b082      	sub	sp, #8
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	6078      	str	r0, [r7, #4]
 800fd3c:	6878      	ldr	r0, [r7, #4]
 800fd3e:	f7ff ffe1 	bl	800fd04 <_ZN23FrontendApplicationBaseD1Ev>
 800fd42:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800fd46:	6878      	ldr	r0, [r7, #4]
 800fd48:	f014 ff43 	bl	8024bd2 <_ZdlPvj>
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	4618      	mov	r0, r3
 800fd50:	3708      	adds	r7, #8
 800fd52:	46bd      	mov	sp, r7
 800fd54:	bd80      	pop	{r7, pc}
	...

0800fd58 <_ZN8touchgfx12NoTransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    NoTransition() : Transition() { }
 800fd58:	b580      	push	{r7, lr}
 800fd5a:	b082      	sub	sp, #8
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	6078      	str	r0, [r7, #4]
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	4618      	mov	r0, r3
 800fd64:	f7ff fde6 	bl	800f934 <_ZN8touchgfx10TransitionC1Ev>
 800fd68:	4a03      	ldr	r2, [pc, #12]	; (800fd78 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	601a      	str	r2, [r3, #0]
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	4618      	mov	r0, r3
 800fd72:	3708      	adds	r7, #8
 800fd74:	46bd      	mov	sp, r7
 800fd76:	bd80      	pop	{r7, pc}
 800fd78:	080264bc 	.word	0x080264bc

0800fd7c <_ZN8touchgfx12NoTransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~NoTransition() { }
 800fd7c:	b580      	push	{r7, lr}
 800fd7e:	b082      	sub	sp, #8
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	6078      	str	r0, [r7, #4]
 800fd84:	4a05      	ldr	r2, [pc, #20]	; (800fd9c <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	601a      	str	r2, [r3, #0]
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	f7ff fde7 	bl	800f960 <_ZN8touchgfx10TransitionD1Ev>
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	4618      	mov	r0, r3
 800fd96:	3708      	adds	r7, #8
 800fd98:	46bd      	mov	sp, r7
 800fd9a:	bd80      	pop	{r7, pc}
 800fd9c:	080264bc 	.word	0x080264bc

0800fda0 <_ZN8touchgfx12NoTransitionD0Ev>:
 800fda0:	b580      	push	{r7, lr}
 800fda2:	b082      	sub	sp, #8
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	6078      	str	r0, [r7, #4]
 800fda8:	6878      	ldr	r0, [r7, #4]
 800fdaa:	f7ff ffe7 	bl	800fd7c <_ZN8touchgfx12NoTransitionD1Ev>
 800fdae:	210c      	movs	r1, #12
 800fdb0:	6878      	ldr	r0, [r7, #4]
 800fdb2:	f014 ff0e 	bl	8024bd2 <_ZdlPvj>
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	4618      	mov	r0, r3
 800fdba:	3708      	adds	r7, #8
 800fdbc:	46bd      	mov	sp, r7
 800fdbe:	bd80      	pop	{r7, pc}

0800fdc0 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
     *
     * @brief Indicates that the transition is done after the first tick.
     *
     *        Indicates that the transition is done after the first tick.
     */
    virtual void handleTickEvent()
 800fdc0:	b480      	push	{r7}
 800fdc2:	b083      	sub	sp, #12
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	2201      	movs	r2, #1
 800fdcc:	721a      	strb	r2, [r3, #8]
    }
 800fdce:	bf00      	nop
 800fdd0:	370c      	adds	r7, #12
 800fdd2:	46bd      	mov	sp, r7
 800fdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd8:	4770      	bx	lr

0800fdda <_ZN13ModelListener4bindEP5Model>:

    /**
     * Sets the model pointer to point to the Model object. Called automatically
     * when switching screen.
     */
    void bind(Model* m)
 800fdda:	b480      	push	{r7}
 800fddc:	b083      	sub	sp, #12
 800fdde:	af00      	add	r7, sp, #0
 800fde0:	6078      	str	r0, [r7, #4]
 800fde2:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	683a      	ldr	r2, [r7, #0]
 800fde8:	605a      	str	r2, [r3, #4]
    }
 800fdea:	bf00      	nop
 800fdec:	370c      	adds	r7, #12
 800fdee:	46bd      	mov	sp, r7
 800fdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf4:	4770      	bx	lr
	...

0800fdf8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800fdf8:	b580      	push	{r7, lr}
 800fdfa:	b084      	sub	sp, #16
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	60f8      	str	r0, [r7, #12]
 800fe00:	60b9      	str	r1, [r7, #8]
 800fe02:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	4618      	mov	r0, r3
 800fe08:	f7ff fe6e 	bl	800fae8 <_ZN8touchgfx14MVPApplicationC1Ev>
 800fe0c:	4a13      	ldr	r2, [pc, #76]	; (800fe5c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	601a      	str	r2, [r3, #0]
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800fe18:	4618      	mov	r0, r3
 800fe1a:	f000 f89f 	bl	800ff5c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	687a      	ldr	r2, [r7, #4]
 800fe22:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	68ba      	ldr	r2, [r7, #8]
 800fe2a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800fe2e:	f7ff fe0f 	bl	800fa50 <_ZN8touchgfx3HAL11getInstanceEv>
 800fe32:	4602      	mov	r2, r0
 800fe34:	6813      	ldr	r3, [r2, #0]
 800fe36:	3308      	adds	r3, #8
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	2100      	movs	r1, #0
 800fe3c:	4610      	mov	r0, r2
 800fe3e:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 800fe40:	2000      	movs	r0, #0
 800fe42:	f002 fcbb 	bl	80127bc <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800fe46:	f7ff fe0f 	bl	800fa68 <_ZN8touchgfx3HAL3lcdEv>
 800fe4a:	4603      	mov	r3, r0
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	f00e fbce 	bl	801e5ee <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	4618      	mov	r0, r3
 800fe56:	3710      	adds	r7, #16
 800fe58:	46bd      	mov	sp, r7
 800fe5a:	bd80      	pop	{r7, pc}
 800fe5c:	080264dc 	.word	0x080264dc

0800fe60 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800fe60:	b480      	push	{r7}
 800fe62:	b083      	sub	sp, #12
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	6078      	str	r0, [r7, #4]
 800fe68:	6039      	str	r1, [r7, #0]
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	370c      	adds	r7, #12
 800fe70:	46bd      	mov	sp, r7
 800fe72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe76:	4770      	bx	lr

0800fe78 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *       three arguments of any type.
 *
 * @tparam dest_type The type of the class in which the member function resides.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b082      	sub	sp, #8
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	6078      	str	r0, [r7, #4]
 800fe80:	6039      	str	r1, [r7, #0]
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	683a      	ldr	r2, [r7, #0]
 800fe86:	4611      	mov	r1, r2
 800fe88:	4618      	mov	r0, r3
 800fe8a:	f7ff ffe9 	bl	800fe60 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800fe8e:	683b      	ldr	r3, [r7, #0]
 800fe90:	685a      	ldr	r2, [r3, #4]
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	605a      	str	r2, [r3, #4]
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	683a      	ldr	r2, [r7, #0]
 800fe9a:	3308      	adds	r3, #8
 800fe9c:	3208      	adds	r2, #8
 800fe9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fea2:	e883 0003 	stmia.w	r3, {r0, r1}
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	4618      	mov	r0, r3
 800feaa:	3708      	adds	r7, #8
 800feac:	46bd      	mov	sp, r7
 800feae:	bd80      	pop	{r7, pc}

0800feb0 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>:
 */

// Main

void FrontendApplicationBase::gotoMainScreenNoTransition()
{
 800feb0:	b590      	push	{r4, r7, lr}
 800feb2:	b089      	sub	sp, #36	; 0x24
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenNoTransitionImpl);
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	f503 749c 	add.w	r4, r3, #312	; 0x138
 800febe:	4b10      	ldr	r3, [pc, #64]	; (800ff00 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv+0x50>)
 800fec0:	61bb      	str	r3, [r7, #24]
 800fec2:	2300      	movs	r3, #0
 800fec4:	61fb      	str	r3, [r7, #28]
 800fec6:	f107 0008 	add.w	r0, r7, #8
 800feca:	f107 0318 	add.w	r3, r7, #24
 800fece:	cb0c      	ldmia	r3, {r2, r3}
 800fed0:	6879      	ldr	r1, [r7, #4]
 800fed2:	f000 f85f 	bl	800ff94 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800fed6:	f107 0308 	add.w	r3, r7, #8
 800feda:	4619      	mov	r1, r3
 800fedc:	4620      	mov	r0, r4
 800fede:	f7ff ffcb 	bl	800fe78 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800fee2:	f107 0308 	add.w	r3, r7, #8
 800fee6:	4618      	mov	r0, r3
 800fee8:	f000 f978 	bl	80101dc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 800fef8:	bf00      	nop
 800fefa:	3724      	adds	r7, #36	; 0x24
 800fefc:	46bd      	mov	sp, r7
 800fefe:	bd90      	pop	{r4, r7, pc}
 800ff00:	0800ff05 	.word	0x0800ff05

0800ff04 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoMainScreenNoTransitionImpl()
{
 800ff04:	b580      	push	{r7, lr}
 800ff06:	b084      	sub	sp, #16
 800ff08:	af02      	add	r7, sp, #8
 800ff0a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	f503 7198 	add.w	r1, r3, #304	; 0x130
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800ff18:	461a      	mov	r2, r3
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800ff20:	9300      	str	r3, [sp, #0]
 800ff22:	4b04      	ldr	r3, [pc, #16]	; (800ff34 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x30>)
 800ff24:	4804      	ldr	r0, [pc, #16]	; (800ff38 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x34>)
 800ff26:	f000 f855 	bl	800ffd4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800ff2a:	bf00      	nop
 800ff2c:	3708      	adds	r7, #8
 800ff2e:	46bd      	mov	sp, r7
 800ff30:	bd80      	pop	{r7, pc}
 800ff32:	bf00      	nop
 800ff34:	2000bcfc 	.word	0x2000bcfc
 800ff38:	2000bcf8 	.word	0x2000bcf8

0800ff3c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800ff3c:	b480      	push	{r7}
 800ff3e:	b083      	sub	sp, #12
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]
 800ff44:	4a04      	ldr	r2, [pc, #16]	; (800ff58 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	601a      	str	r2, [r3, #0]
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	370c      	adds	r7, #12
 800ff50:	46bd      	mov	sp, r7
 800ff52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff56:	4770      	bx	lr
 800ff58:	0802656c 	.word	0x0802656c

0800ff5c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Initializes an empty callback.
     */
    Callback() : pobject(0), pmemfun_0(0) { }
 800ff5c:	b580      	push	{r7, lr}
 800ff5e:	b082      	sub	sp, #8
 800ff60:	af00      	add	r7, sp, #0
 800ff62:	6078      	str	r0, [r7, #4]
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	4618      	mov	r0, r3
 800ff68:	f7ff ffe8 	bl	800ff3c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800ff6c:	4a08      	ldr	r2, [pc, #32]	; (800ff90 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	601a      	str	r2, [r3, #0]
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	2200      	movs	r2, #0
 800ff76:	605a      	str	r2, [r3, #4]
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	2200      	movs	r2, #0
 800ff7c:	609a      	str	r2, [r3, #8]
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	2200      	movs	r2, #0
 800ff82:	60da      	str	r2, [r3, #12]
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	4618      	mov	r0, r3
 800ff88:	3708      	adds	r7, #8
 800ff8a:	46bd      	mov	sp, r7
 800ff8c:	bd80      	pop	{r7, pc}
 800ff8e:	bf00      	nop
 800ff90:	08026518 	.word	0x08026518

0800ff94 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function
     *                       takes zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b084      	sub	sp, #16
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	60f8      	str	r0, [r7, #12]
 800ff9c:	60b9      	str	r1, [r7, #8]
 800ff9e:	4639      	mov	r1, r7
 800ffa0:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	4618      	mov	r0, r3
 800ffa8:	f7ff ffc8 	bl	800ff3c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800ffac:	4a08      	ldr	r2, [pc, #32]	; (800ffd0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	68ba      	ldr	r2, [r7, #8]
 800ffb6:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	3308      	adds	r3, #8
 800ffbc:	463a      	mov	r2, r7
 800ffbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ffc2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	4618      	mov	r0, r3
 800ffca:	3710      	adds	r7, #16
 800ffcc:	46bd      	mov	sp, r7
 800ffce:	bd80      	pop	{r7, pc}
 800ffd0:	08026518 	.word	0x08026518

0800ffd4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template< class ScreenType, class PresenterType, class TransType, class ModelType  >
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800ffd4:	b590      	push	{r4, r7, lr}
 800ffd6:	b089      	sub	sp, #36	; 0x24
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	60f8      	str	r0, [r7, #12]
 800ffdc:	60b9      	str	r1, [r7, #8]
 800ffde:	607a      	str	r2, [r7, #4]
 800ffe0:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	689a      	ldr	r2, [r3, #8]
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	689b      	ldr	r3, [r3, #8]
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	3320      	adds	r3, #32
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	4610      	mov	r0, r2
 800fff2:	4798      	blx	r3
 800fff4:	4602      	mov	r2, r0
 800fff6:	f242 7303 	movw	r3, #9987	; 0x2703
 800fffa:	429a      	cmp	r2, r3
 800fffc:	d805      	bhi.n	801000a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800fffe:	4b4e      	ldr	r3, [pc, #312]	; (8010138 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 8010000:	4a4e      	ldr	r2, [pc, #312]	; (801013c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8010002:	21c2      	movs	r1, #194	; 0xc2
 8010004:	484e      	ldr	r0, [pc, #312]	; (8010140 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 8010006:	f014 fe0f 	bl	8024c28 <__assert_func>
 801000a:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	685a      	ldr	r2, [r3, #4]
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	685b      	ldr	r3, [r3, #4]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	3320      	adds	r3, #32
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	4610      	mov	r0, r2
 801001c:	4798      	blx	r3
 801001e:	4603      	mov	r3, r0
 8010020:	2b0f      	cmp	r3, #15
 8010022:	d805      	bhi.n	8010030 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 8010024:	4b47      	ldr	r3, [pc, #284]	; (8010144 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 8010026:	4a45      	ldr	r2, [pc, #276]	; (801013c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8010028:	21c3      	movs	r1, #195	; 0xc3
 801002a:	4845      	ldr	r0, [pc, #276]	; (8010140 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 801002c:	f014 fdfc 	bl	8024c28 <__assert_func>
 8010030:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	68da      	ldr	r2, [r3, #12]
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	68db      	ldr	r3, [r3, #12]
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	3320      	adds	r3, #32
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	4610      	mov	r0, r2
 8010042:	4798      	blx	r3
 8010044:	4603      	mov	r3, r0
 8010046:	2b0b      	cmp	r3, #11
 8010048:	d805      	bhi.n	8010056 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 801004a:	4b3f      	ldr	r3, [pc, #252]	; (8010148 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x174>)
 801004c:	4a3b      	ldr	r2, [pc, #236]	; (801013c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 801004e:	21c4      	movs	r1, #196	; 0xc4
 8010050:	483b      	ldr	r0, [pc, #236]	; (8010140 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 8010052:	f014 fde9 	bl	8024c28 <__assert_func>
 8010056:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);
 8010058:	683a      	ldr	r2, [r7, #0]
 801005a:	68b9      	ldr	r1, [r7, #8]
 801005c:	68f8      	ldr	r0, [r7, #12]
 801005e:	f7ff fdc0 	bl	800fbe2 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>

    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	68db      	ldr	r3, [r3, #12]
 8010066:	2100      	movs	r1, #0
 8010068:	4618      	mov	r0, r3
 801006a:	f000 f86f 	bl	801014c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 801006e:	4603      	mov	r3, r0
 8010070:	4619      	mov	r1, r3
 8010072:	200c      	movs	r0, #12
 8010074:	f7ff fbf0 	bl	800f858 <_ZnwjPv>
 8010078:	4604      	mov	r4, r0
 801007a:	2c00      	cmp	r4, #0
 801007c:	d004      	beq.n	8010088 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 801007e:	4620      	mov	r0, r4
 8010080:	f7ff fe6a 	bl	800fd58 <_ZN8touchgfx12NoTransitionC1Ev>
 8010084:	4623      	mov	r3, r4
 8010086:	e000      	b.n	801008a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
 8010088:	4623      	mov	r3, r4
 801008a:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	689b      	ldr	r3, [r3, #8]
 8010090:	2100      	movs	r1, #0
 8010092:	4618      	mov	r0, r3
 8010094:	f000 f86d 	bl	8010172 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 8010098:	4603      	mov	r3, r0
 801009a:	4619      	mov	r1, r3
 801009c:	f242 7004 	movw	r0, #9988	; 0x2704
 80100a0:	f7ff fbda 	bl	800f858 <_ZnwjPv>
 80100a4:	4604      	mov	r4, r0
 80100a6:	2c00      	cmp	r4, #0
 80100a8:	d004      	beq.n	80100b4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
 80100aa:	4620      	mov	r0, r4
 80100ac:	f002 fe0e 	bl	8012ccc <_ZN8MainViewC1Ev>
 80100b0:	4623      	mov	r3, r4
 80100b2:	e000      	b.n	80100b6 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
 80100b4:	4623      	mov	r3, r4
 80100b6:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	685b      	ldr	r3, [r3, #4]
 80100bc:	2100      	movs	r1, #0
 80100be:	4618      	mov	r0, r3
 80100c0:	f000 f86a 	bl	8010198 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 80100c4:	4603      	mov	r3, r0
 80100c6:	4619      	mov	r1, r3
 80100c8:	2010      	movs	r0, #16
 80100ca:	f7ff fbc5 	bl	800f858 <_ZnwjPv>
 80100ce:	4604      	mov	r4, r0
 80100d0:	2c00      	cmp	r4, #0
 80100d2:	d005      	beq.n	80100e0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 80100d4:	69b9      	ldr	r1, [r7, #24]
 80100d6:	4620      	mov	r0, r4
 80100d8:	f002 fd3e 	bl	8012b58 <_ZN13MainPresenterC1ER8MainView>
 80100dc:	4623      	mov	r3, r4
 80100de:	e000      	b.n	80100e2 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
 80100e0:	4623      	mov	r3, r4
 80100e2:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 80100e4:	683b      	ldr	r3, [r7, #0]
 80100e6:	69fa      	ldr	r2, [r7, #28]
 80100e8:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 80100ea:	68bb      	ldr	r3, [r7, #8]
 80100ec:	697a      	ldr	r2, [r7, #20]
 80100ee:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	69ba      	ldr	r2, [r7, #24]
 80100f4:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 80100f6:	697b      	ldr	r3, [r7, #20]
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d002      	beq.n	8010102 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 80100fc:	697b      	ldr	r3, [r7, #20]
 80100fe:	3304      	adds	r3, #4
 8010100:	e000      	b.n	8010104 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
 8010102:	2300      	movs	r3, #0
 8010104:	4619      	mov	r1, r3
 8010106:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010108:	f7ff fdee 	bl	800fce8 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 801010c:	697b      	ldr	r3, [r7, #20]
 801010e:	3304      	adds	r3, #4
 8010110:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010112:	4618      	mov	r0, r3
 8010114:	f7ff fe61 	bl	800fdda <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8010118:	69bb      	ldr	r3, [r7, #24]
 801011a:	6979      	ldr	r1, [r7, #20]
 801011c:	4618      	mov	r0, r3
 801011e:	f000 f84e 	bl	80101be <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 8010122:	69fa      	ldr	r2, [r7, #28]
 8010124:	6979      	ldr	r1, [r7, #20]
 8010126:	69b8      	ldr	r0, [r7, #24]
 8010128:	f7ff fdb7 	bl	800fc9a <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>

    return newPresenter;
 801012c:	697b      	ldr	r3, [r7, #20]
}
 801012e:	4618      	mov	r0, r3
 8010130:	3724      	adds	r7, #36	; 0x24
 8010132:	46bd      	mov	sp, r7
 8010134:	bd90      	pop	{r4, r7, pc}
 8010136:	bf00      	nop
 8010138:	08025db4 	.word	0x08025db4
 801013c:	080265c4 	.word	0x080265c4
 8010140:	08025e44 	.word	0x08025e44
 8010144:	08025e88 	.word	0x08025e88
 8010148:	08025f2c 	.word	0x08025f2c

0801014c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template< typename T >
    T& at(const uint16_t index)
 801014c:	b580      	push	{r7, lr}
 801014e:	b082      	sub	sp, #8
 8010150:	af00      	add	r7, sp, #0
 8010152:	6078      	str	r0, [r7, #4]
 8010154:	460b      	mov	r3, r1
 8010156:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	3324      	adds	r3, #36	; 0x24
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	887a      	ldrh	r2, [r7, #2]
 8010162:	4611      	mov	r1, r2
 8010164:	6878      	ldr	r0, [r7, #4]
 8010166:	4798      	blx	r3
 8010168:	4603      	mov	r3, r0
    }
 801016a:	4618      	mov	r0, r3
 801016c:	3708      	adds	r7, #8
 801016e:	46bd      	mov	sp, r7
 8010170:	bd80      	pop	{r7, pc}

08010172 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>:
    T& at(const uint16_t index)
 8010172:	b580      	push	{r7, lr}
 8010174:	b082      	sub	sp, #8
 8010176:	af00      	add	r7, sp, #0
 8010178:	6078      	str	r0, [r7, #4]
 801017a:	460b      	mov	r3, r1
 801017c:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	3324      	adds	r3, #36	; 0x24
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	887a      	ldrh	r2, [r7, #2]
 8010188:	4611      	mov	r1, r2
 801018a:	6878      	ldr	r0, [r7, #4]
 801018c:	4798      	blx	r3
 801018e:	4603      	mov	r3, r0
    }
 8010190:	4618      	mov	r0, r3
 8010192:	3708      	adds	r7, #8
 8010194:	46bd      	mov	sp, r7
 8010196:	bd80      	pop	{r7, pc}

08010198 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>:
    T& at(const uint16_t index)
 8010198:	b580      	push	{r7, lr}
 801019a:	b082      	sub	sp, #8
 801019c:	af00      	add	r7, sp, #0
 801019e:	6078      	str	r0, [r7, #4]
 80101a0:	460b      	mov	r3, r1
 80101a2:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	3324      	adds	r3, #36	; 0x24
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	887a      	ldrh	r2, [r7, #2]
 80101ae:	4611      	mov	r1, r2
 80101b0:	6878      	ldr	r0, [r7, #4]
 80101b2:	4798      	blx	r3
 80101b4:	4603      	mov	r3, r0
    }
 80101b6:	4618      	mov	r0, r3
 80101b8:	3708      	adds	r7, #8
 80101ba:	46bd      	mov	sp, r7
 80101bc:	bd80      	pop	{r7, pc}

080101be <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>:
     *        Binds an instance of a specific Presenter type (subclass) to the View instance.
     *        This function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 80101be:	b480      	push	{r7}
 80101c0:	b083      	sub	sp, #12
 80101c2:	af00      	add	r7, sp, #0
 80101c4:	6078      	str	r0, [r7, #4]
 80101c6:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	683a      	ldr	r2, [r7, #0]
 80101cc:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80101ce:	bf00      	nop
 80101d0:	370c      	adds	r7, #12
 80101d2:	46bd      	mov	sp, r7
 80101d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d8:	4770      	bx	lr
	...

080101dc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80101dc:	b580      	push	{r7, lr}
 80101de:	b082      	sub	sp, #8
 80101e0:	af00      	add	r7, sp, #0
 80101e2:	6078      	str	r0, [r7, #4]
 80101e4:	4a05      	ldr	r2, [pc, #20]	; (80101fc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	601a      	str	r2, [r3, #0]
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	4618      	mov	r0, r3
 80101ee:	f7ff fc0f 	bl	800fa10 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	4618      	mov	r0, r3
 80101f6:	3708      	adds	r7, #8
 80101f8:	46bd      	mov	sp, r7
 80101fa:	bd80      	pop	{r7, pc}
 80101fc:	08026518 	.word	0x08026518

08010200 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8010200:	b580      	push	{r7, lr}
 8010202:	b082      	sub	sp, #8
 8010204:	af00      	add	r7, sp, #0
 8010206:	6078      	str	r0, [r7, #4]
 8010208:	6878      	ldr	r0, [r7, #4]
 801020a:	f7ff ffe7 	bl	80101dc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 801020e:	2110      	movs	r1, #16
 8010210:	6878      	ldr	r0, [r7, #4]
 8010212:	f014 fcde 	bl	8024bd2 <_ZdlPvj>
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	4618      	mov	r0, r3
 801021a:	3708      	adds	r7, #8
 801021c:	46bd      	mov	sp, r7
 801021e:	bd80      	pop	{r7, pc}

08010220 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * @brief Calls the member function.
     *
     *        Calls the member function. Do not call execute unless isValid() returns true (ie.
     *        a pointer to the object and the function has been set).
     */
    virtual void execute()
 8010220:	b580      	push	{r7, lr}
 8010222:	b082      	sub	sp, #8
 8010224:	af00      	add	r7, sp, #0
 8010226:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	685b      	ldr	r3, [r3, #4]
 801022c:	687a      	ldr	r2, [r7, #4]
 801022e:	68d2      	ldr	r2, [r2, #12]
 8010230:	1052      	asrs	r2, r2, #1
 8010232:	1899      	adds	r1, r3, r2
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	68db      	ldr	r3, [r3, #12]
 8010238:	f003 0301 	and.w	r3, r3, #1
 801023c:	2b00      	cmp	r3, #0
 801023e:	d102      	bne.n	8010246 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	689b      	ldr	r3, [r3, #8]
 8010244:	e00a      	b.n	801025c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	685b      	ldr	r3, [r3, #4]
 801024a:	687a      	ldr	r2, [r7, #4]
 801024c:	68d2      	ldr	r2, [r2, #12]
 801024e:	1052      	asrs	r2, r2, #1
 8010250:	4413      	add	r3, r2
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	687a      	ldr	r2, [r7, #4]
 8010256:	6892      	ldr	r2, [r2, #8]
 8010258:	4413      	add	r3, r2
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	4608      	mov	r0, r1
 801025e:	4798      	blx	r3
    }
 8010260:	bf00      	nop
 8010262:	3708      	adds	r7, #8
 8010264:	46bd      	mov	sp, r7
 8010266:	bd80      	pop	{r7, pc}

08010268 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     *        Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8010268:	b480      	push	{r7}
 801026a:	b083      	sub	sp, #12
 801026c:	af00      	add	r7, sp, #0
 801026e:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	685b      	ldr	r3, [r3, #4]
 8010274:	2b00      	cmp	r3, #0
 8010276:	d010      	beq.n	801029a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	689b      	ldr	r3, [r3, #8]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d107      	bne.n	8010290 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	68db      	ldr	r3, [r3, #12]
 8010284:	f003 0301 	and.w	r3, r3, #1
 8010288:	2b00      	cmp	r3, #0
 801028a:	d101      	bne.n	8010290 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 801028c:	2301      	movs	r3, #1
 801028e:	e000      	b.n	8010292 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8010290:	2300      	movs	r3, #0
 8010292:	2b01      	cmp	r3, #1
 8010294:	d001      	beq.n	801029a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8010296:	2301      	movs	r3, #1
 8010298:	e000      	b.n	801029c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 801029a:	2300      	movs	r3, #0
    }
 801029c:	4618      	mov	r0, r3
 801029e:	370c      	adds	r7, #12
 80102a0:	46bd      	mov	sp, r7
 80102a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a6:	4770      	bx	lr

080102a8 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param col The color.
     *
     * @see Color::getColorFrom24BitRGB()
     */
    colortype(uint32_t col)
 80102a8:	b480      	push	{r7}
 80102aa:	b083      	sub	sp, #12
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	6078      	str	r0, [r7, #4]
 80102b0:	6039      	str	r1, [r7, #0]
    {
        color = col;
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	683a      	ldr	r2, [r7, #0]
 80102b6:	601a      	str	r2, [r3, #0]
    }
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	4618      	mov	r0, r3
 80102bc:	370c      	adds	r7, #12
 80102be:	46bd      	mov	sp, r7
 80102c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102c4:	4770      	bx	lr

080102c6 <_ZN8touchgfx4RectC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Resulting in an empty Rect with coordinates 0,0.
     */
    Rect()
 80102c6:	b480      	push	{r7}
 80102c8:	b083      	sub	sp, #12
 80102ca:	af00      	add	r7, sp, #0
 80102cc:	6078      	str	r0, [r7, #4]
    {
        this->x = 0;
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	2200      	movs	r2, #0
 80102d2:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	2200      	movs	r2, #0
 80102d8:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	2200      	movs	r2, #0
 80102de:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	2200      	movs	r2, #0
 80102e4:	80da      	strh	r2, [r3, #6]
    }
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	4618      	mov	r0, r3
 80102ea:	370c      	adds	r7, #12
 80102ec:	46bd      	mov	sp, r7
 80102ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f2:	4770      	bx	lr

080102f4 <_ZN8touchgfx4RectC1Essss>:
     * @param x      The x coordinate.
     * @param y      The y coordinate.
     * @param width  The width.
     * @param height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 80102f4:	b480      	push	{r7}
 80102f6:	b085      	sub	sp, #20
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	60f8      	str	r0, [r7, #12]
 80102fc:	4608      	mov	r0, r1
 80102fe:	4611      	mov	r1, r2
 8010300:	461a      	mov	r2, r3
 8010302:	4603      	mov	r3, r0
 8010304:	817b      	strh	r3, [r7, #10]
 8010306:	460b      	mov	r3, r1
 8010308:	813b      	strh	r3, [r7, #8]
 801030a:	4613      	mov	r3, r2
 801030c:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	897a      	ldrh	r2, [r7, #10]
 8010312:	801a      	strh	r2, [r3, #0]
        this->y = y;
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	893a      	ldrh	r2, [r7, #8]
 8010318:	805a      	strh	r2, [r3, #2]
        this->width = width;
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	88fa      	ldrh	r2, [r7, #6]
 801031e:	809a      	strh	r2, [r3, #4]
        this->height = height;
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	8b3a      	ldrh	r2, [r7, #24]
 8010324:	80da      	strh	r2, [r3, #6]
    }
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	4618      	mov	r0, r3
 801032a:	3714      	adds	r7, #20
 801032c:	46bd      	mov	sp, r7
 801032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010332:	4770      	bx	lr

08010334 <_ZN8touchgfx6BitmapC1Et>:
     *        Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     *        array.
     *
     * @param id The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID)
 8010334:	b480      	push	{r7}
 8010336:	b083      	sub	sp, #12
 8010338:	af00      	add	r7, sp, #0
 801033a:	6078      	str	r0, [r7, #4]
 801033c:	460b      	mov	r3, r1
 801033e:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	887a      	ldrh	r2, [r7, #2]
 8010344:	801a      	strh	r2, [r3, #0]
    {
    }
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	4618      	mov	r0, r3
 801034a:	370c      	adds	r7, #12
 801034c:	46bd      	mov	sp, r7
 801034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010352:	4770      	bx	lr

08010354 <_ZN8touchgfx8DrawableC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Drawable() : rect(0, 0, 0, 0),
 8010354:	b580      	push	{r7, lr}
 8010356:	b084      	sub	sp, #16
 8010358:	af02      	add	r7, sp, #8
 801035a:	6078      	str	r0, [r7, #4]
        parent(0),
        nextSibling(0),
        nextDrawChainElement(0),
        touchable(false),
        visible(true)
 801035c:	4a13      	ldr	r2, [pc, #76]	; (80103ac <_ZN8touchgfx8DrawableC1Ev+0x58>)
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	601a      	str	r2, [r3, #0]
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	1d18      	adds	r0, r3, #4
 8010366:	2300      	movs	r3, #0
 8010368:	9300      	str	r3, [sp, #0]
 801036a:	2300      	movs	r3, #0
 801036c:	2200      	movs	r2, #0
 801036e:	2100      	movs	r1, #0
 8010370:	f7ff ffc0 	bl	80102f4 <_ZN8touchgfx4RectC1Essss>
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	330c      	adds	r3, #12
 8010378:	4618      	mov	r0, r3
 801037a:	f7ff ffa4 	bl	80102c6 <_ZN8touchgfx4RectC1Ev>
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	2200      	movs	r2, #0
 8010382:	615a      	str	r2, [r3, #20]
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	2200      	movs	r2, #0
 8010388:	619a      	str	r2, [r3, #24]
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	2200      	movs	r2, #0
 801038e:	61da      	str	r2, [r3, #28]
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	2200      	movs	r2, #0
 8010394:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	2201      	movs	r2, #1
 801039c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	4618      	mov	r0, r3
 80103a4:	3708      	adds	r7, #8
 80103a6:	46bd      	mov	sp, r7
 80103a8:	bd80      	pop	{r7, pc}
 80103aa:	bf00      	nop
 80103ac:	080286e4 	.word	0x080286e4

080103b0 <_ZN8touchgfx8DrawableD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Drawable() { }
 80103b0:	b480      	push	{r7}
 80103b2:	b083      	sub	sp, #12
 80103b4:	af00      	add	r7, sp, #0
 80103b6:	6078      	str	r0, [r7, #4]
 80103b8:	4a04      	ldr	r2, [pc, #16]	; (80103cc <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	601a      	str	r2, [r3, #0]
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	4618      	mov	r0, r3
 80103c2:	370c      	adds	r7, #12
 80103c4:	46bd      	mov	sp, r7
 80103c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ca:	4770      	bx	lr
 80103cc:	080286e4 	.word	0x080286e4

080103d0 <_ZN8touchgfx8DrawableD0Ev>:
 80103d0:	b580      	push	{r7, lr}
 80103d2:	b082      	sub	sp, #8
 80103d4:	af00      	add	r7, sp, #0
 80103d6:	6078      	str	r0, [r7, #4]
 80103d8:	6878      	ldr	r0, [r7, #4]
 80103da:	f7ff ffe9 	bl	80103b0 <_ZN8touchgfx8DrawableD1Ev>
 80103de:	2128      	movs	r1, #40	; 0x28
 80103e0:	6878      	ldr	r0, [r7, #4]
 80103e2:	f014 fbf6 	bl	8024bd2 <_ZdlPvj>
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	4618      	mov	r0, r3
 80103ea:	3708      	adds	r7, #8
 80103ec:	46bd      	mov	sp, r7
 80103ee:	bd80      	pop	{r7, pc}

080103f0 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param x      The x coordinate of this Drawable.
     * @param y      The y coordinate of this Drawable.
     * @param width  The width of this Drawable.
     * @param height The height of this Drawable.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 80103f0:	b580      	push	{r7, lr}
 80103f2:	b084      	sub	sp, #16
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	60f8      	str	r0, [r7, #12]
 80103f8:	4608      	mov	r0, r1
 80103fa:	4611      	mov	r1, r2
 80103fc:	461a      	mov	r2, r3
 80103fe:	4603      	mov	r3, r0
 8010400:	817b      	strh	r3, [r7, #10]
 8010402:	460b      	mov	r3, r1
 8010404:	813b      	strh	r3, [r7, #8]
 8010406:	4613      	mov	r3, r2
 8010408:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	3334      	adds	r3, #52	; 0x34
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8010416:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 801041a:	68f8      	ldr	r0, [r7, #12]
 801041c:	4798      	blx	r3
        setWidth(width);
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	3338      	adds	r3, #56	; 0x38
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801042a:	4611      	mov	r1, r2
 801042c:	68f8      	ldr	r0, [r7, #12]
 801042e:	4798      	blx	r3
        setHeight(height);
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	333c      	adds	r3, #60	; 0x3c
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 801043c:	4611      	mov	r1, r2
 801043e:	68f8      	ldr	r0, [r7, #12]
 8010440:	4798      	blx	r3
    }
 8010442:	bf00      	nop
 8010444:	3710      	adds	r7, #16
 8010446:	46bd      	mov	sp, r7
 8010448:	bd80      	pop	{r7, pc}

0801044a <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     */
    virtual void setX(int16_t x)
 801044a:	b480      	push	{r7}
 801044c:	b083      	sub	sp, #12
 801044e:	af00      	add	r7, sp, #0
 8010450:	6078      	str	r0, [r7, #4]
 8010452:	460b      	mov	r3, r1
 8010454:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	887a      	ldrh	r2, [r7, #2]
 801045a:	809a      	strh	r2, [r3, #4]
    }
 801045c:	bf00      	nop
 801045e:	370c      	adds	r7, #12
 8010460:	46bd      	mov	sp, r7
 8010462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010466:	4770      	bx	lr

08010468 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setY(int16_t y)
 8010468:	b480      	push	{r7}
 801046a:	b083      	sub	sp, #12
 801046c:	af00      	add	r7, sp, #0
 801046e:	6078      	str	r0, [r7, #4]
 8010470:	460b      	mov	r3, r1
 8010472:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	887a      	ldrh	r2, [r7, #2]
 8010478:	80da      	strh	r2, [r3, #6]
    }
 801047a:	bf00      	nop
 801047c:	370c      	adds	r7, #12
 801047e:	46bd      	mov	sp, r7
 8010480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010484:	4770      	bx	lr

08010486 <_ZN8touchgfx8Drawable5setXYEss>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setXY(int16_t x, int16_t y)
 8010486:	b580      	push	{r7, lr}
 8010488:	b082      	sub	sp, #8
 801048a:	af00      	add	r7, sp, #0
 801048c:	6078      	str	r0, [r7, #4]
 801048e:	460b      	mov	r3, r1
 8010490:	807b      	strh	r3, [r7, #2]
 8010492:	4613      	mov	r3, r2
 8010494:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	332c      	adds	r3, #44	; 0x2c
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80104a2:	4611      	mov	r1, r2
 80104a4:	6878      	ldr	r0, [r7, #4]
 80104a6:	4798      	blx	r3
        setY(y);
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	3330      	adds	r3, #48	; 0x30
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	f9b7 2000 	ldrsh.w	r2, [r7]
 80104b4:	4611      	mov	r1, r2
 80104b6:	6878      	ldr	r0, [r7, #4]
 80104b8:	4798      	blx	r3
    }
 80104ba:	bf00      	nop
 80104bc:	3708      	adds	r7, #8
 80104be:	46bd      	mov	sp, r7
 80104c0:	bd80      	pop	{r7, pc}

080104c2 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param width The new width.
     */
    virtual void setWidth(int16_t width)
 80104c2:	b480      	push	{r7}
 80104c4:	b083      	sub	sp, #12
 80104c6:	af00      	add	r7, sp, #0
 80104c8:	6078      	str	r0, [r7, #4]
 80104ca:	460b      	mov	r3, r1
 80104cc:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	887a      	ldrh	r2, [r7, #2]
 80104d2:	811a      	strh	r2, [r3, #8]
    }
 80104d4:	bf00      	nop
 80104d6:	370c      	adds	r7, #12
 80104d8:	46bd      	mov	sp, r7
 80104da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104de:	4770      	bx	lr

080104e0 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param height The new height.
     */
    virtual void setHeight(int16_t height)
 80104e0:	b480      	push	{r7}
 80104e2:	b083      	sub	sp, #12
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	6078      	str	r0, [r7, #4]
 80104e8:	460b      	mov	r3, r1
 80104ea:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	887a      	ldrh	r2, [r7, #2]
 80104f0:	815a      	strh	r2, [r3, #10]
    }
 80104f2:	bf00      	nop
 80104f4:	370c      	adds	r7, #12
 80104f6:	46bd      	mov	sp, r7
 80104f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104fc:	4770      	bx	lr

080104fe <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     *
     *        This function can be called on parent nodes to signal that the size of one or
     *        more of its children has changed. Currently only used in ScrollableContainer to
     *        redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged() { }
 80104fe:	b480      	push	{r7}
 8010500:	b083      	sub	sp, #12
 8010502:	af00      	add	r7, sp, #0
 8010504:	6078      	str	r0, [r7, #4]
 8010506:	bf00      	nop
 8010508:	370c      	adds	r7, #12
 801050a:	46bd      	mov	sp, r7
 801050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010510:	4770      	bx	lr

08010512 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *        Defines the event handler interface for ClickEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt) { }
 8010512:	b480      	push	{r7}
 8010514:	b083      	sub	sp, #12
 8010516:	af00      	add	r7, sp, #0
 8010518:	6078      	str	r0, [r7, #4]
 801051a:	6039      	str	r1, [r7, #0]
 801051c:	bf00      	nop
 801051e:	370c      	adds	r7, #12
 8010520:	46bd      	mov	sp, r7
 8010522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010526:	4770      	bx	lr

08010528 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *        Defines the event handler interface for GestureEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt) { }
 8010528:	b480      	push	{r7}
 801052a:	b083      	sub	sp, #12
 801052c:	af00      	add	r7, sp, #0
 801052e:	6078      	str	r0, [r7, #4]
 8010530:	6039      	str	r1, [r7, #0]
 8010532:	bf00      	nop
 8010534:	370c      	adds	r7, #12
 8010536:	46bd      	mov	sp, r7
 8010538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801053c:	4770      	bx	lr

0801053e <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *        Defines the event handler interface for DragEvents. The event is only received if
     *        the drawable is touchable.
     *
     * @param evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt) { }
 801053e:	b480      	push	{r7}
 8010540:	b083      	sub	sp, #12
 8010542:	af00      	add	r7, sp, #0
 8010544:	6078      	str	r0, [r7, #4]
 8010546:	6039      	str	r1, [r7, #0]
 8010548:	bf00      	nop
 801054a:	370c      	adds	r7, #12
 801054c:	46bd      	mov	sp, r7
 801054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010552:	4770      	bx	lr

08010554 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *        Called periodically by the framework if the Drawable instance has subscribed to
     *        timer ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent() { }
 8010554:	b480      	push	{r7}
 8010556:	b083      	sub	sp, #12
 8010558:	af00      	add	r7, sp, #0
 801055a:	6078      	str	r0, [r7, #4]
 801055c:	bf00      	nop
 801055e:	370c      	adds	r7, #12
 8010560:	46bd      	mov	sp, r7
 8010562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010566:	4770      	bx	lr

08010568 <_ZN8touchgfx8Drawable10setVisibleEb>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param vis true if this Drawable should be visible. By default, drawables are visible unless
     *            this function has been called with false as argument.
     */
    void setVisible(bool vis)
 8010568:	b480      	push	{r7}
 801056a:	b083      	sub	sp, #12
 801056c:	af00      	add	r7, sp, #0
 801056e:	6078      	str	r0, [r7, #4]
 8010570:	460b      	mov	r3, r1
 8010572:	70fb      	strb	r3, [r7, #3]
    {
        visible = vis;
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	78fa      	ldrb	r2, [r7, #3]
 8010578:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 801057c:	bf00      	nop
 801057e:	370c      	adds	r7, #12
 8010580:	46bd      	mov	sp, r7
 8010582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010586:	4770      	bx	lr

08010588 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     * @return true if the Drawable is visible.
     * @return True if visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8010588:	b480      	push	{r7}
 801058a:	b083      	sub	sp, #12
 801058c:	af00      	add	r7, sp, #0
 801058e:	6078      	str	r0, [r7, #4]
    {
        return visible;
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 8010596:	4618      	mov	r0, r3
 8010598:	370c      	adds	r7, #12
 801059a:	46bd      	mov	sp, r7
 801059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a0:	4770      	bx	lr

080105a2 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 80105a2:	b480      	push	{r7}
 80105a4:	b083      	sub	sp, #12
 80105a6:	af00      	add	r7, sp, #0
 80105a8:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 80105b0:	4618      	mov	r0, r3
 80105b2:	370c      	adds	r7, #12
 80105b4:	46bd      	mov	sp, r7
 80105b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ba:	4770      	bx	lr

080105bc <_ZN8touchgfx8Drawable6moveToEss>:
     * @note Will redraw the appropriate areas of the screen.
     *
     * @param x The absolute position to move to.
     * @param y The absolute position to move to.
     */
    virtual void moveTo(int16_t x, int16_t y)
 80105bc:	b580      	push	{r7, lr}
 80105be:	b082      	sub	sp, #8
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	6078      	str	r0, [r7, #4]
 80105c4:	460b      	mov	r3, r1
 80105c6:	807b      	strh	r3, [r7, #2]
 80105c8:	4613      	mov	r3, r2
 80105ca:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	3354      	adds	r3, #84	; 0x54
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	8879      	ldrh	r1, [r7, #2]
 80105d6:	687a      	ldr	r2, [r7, #4]
 80105d8:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80105dc:	b292      	uxth	r2, r2
 80105de:	1a8a      	subs	r2, r1, r2
 80105e0:	b292      	uxth	r2, r2
 80105e2:	b210      	sxth	r0, r2
 80105e4:	8839      	ldrh	r1, [r7, #0]
 80105e6:	687a      	ldr	r2, [r7, #4]
 80105e8:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80105ec:	b292      	uxth	r2, r2
 80105ee:	1a8a      	subs	r2, r1, r2
 80105f0:	b292      	uxth	r2, r2
 80105f2:	b212      	sxth	r2, r2
 80105f4:	4601      	mov	r1, r0
 80105f6:	6878      	ldr	r0, [r7, #4]
 80105f8:	4798      	blx	r3
    }
 80105fa:	bf00      	nop
 80105fc:	3708      	adds	r7, #8
 80105fe:	46bd      	mov	sp, r7
 8010600:	bd80      	pop	{r7, pc}

08010602 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     *        Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8010602:	b480      	push	{r7}
 8010604:	b083      	sub	sp, #12
 8010606:	af00      	add	r7, sp, #0
 8010608:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010610:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010618:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010620:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 8010622:	bf00      	nop
 8010624:	370c      	adds	r7, #12
 8010626:	46bd      	mov	sp, r7
 8010628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801062c:	4770      	bx	lr

0801062e <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     *
     * @param invalidatedArea              Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 801062e:	b580      	push	{r7, lr}
 8010630:	b084      	sub	sp, #16
 8010632:	af00      	add	r7, sp, #0
 8010634:	60f8      	str	r0, [r7, #12]
 8010636:	60b9      	str	r1, [r7, #8]
 8010638:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 801063a:	68f8      	ldr	r0, [r7, #12]
 801063c:	f7ff ffe1 	bl	8010602 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	681a      	ldr	r2, [r3, #0]
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	68fa      	ldr	r2, [r7, #12]
 801064c:	601a      	str	r2, [r3, #0]
    }
 801064e:	bf00      	nop
 8010650:	3710      	adds	r7, #16
 8010652:	46bd      	mov	sp, r7
 8010654:	bd80      	pop	{r7, pc}
	...

08010658 <_ZN8touchgfx9ContainerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Container() { }
 8010658:	b580      	push	{r7, lr}
 801065a:	b082      	sub	sp, #8
 801065c:	af00      	add	r7, sp, #0
 801065e:	6078      	str	r0, [r7, #4]
 8010660:	4a05      	ldr	r2, [pc, #20]	; (8010678 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	601a      	str	r2, [r3, #0]
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	4618      	mov	r0, r3
 801066a:	f7ff fea1 	bl	80103b0 <_ZN8touchgfx8DrawableD1Ev>
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	4618      	mov	r0, r3
 8010672:	3708      	adds	r7, #8
 8010674:	46bd      	mov	sp, r7
 8010676:	bd80      	pop	{r7, pc}
 8010678:	080274b0 	.word	0x080274b0

0801067c <_ZN8touchgfx9ContainerD0Ev>:
 801067c:	b580      	push	{r7, lr}
 801067e:	b082      	sub	sp, #8
 8010680:	af00      	add	r7, sp, #0
 8010682:	6078      	str	r0, [r7, #4]
 8010684:	6878      	ldr	r0, [r7, #4]
 8010686:	f7ff ffe7 	bl	8010658 <_ZN8touchgfx9ContainerD1Ev>
 801068a:	212c      	movs	r1, #44	; 0x2c
 801068c:	6878      	ldr	r0, [r7, #4]
 801068e:	f014 faa0 	bl	8024bd2 <_ZdlPvj>
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	4618      	mov	r0, r3
 8010696:	3708      	adds	r7, #8
 8010698:	46bd      	mov	sp, r7
 801069a:	bd80      	pop	{r7, pc}

0801069c <_ZN8touchgfx6ScreenD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Screen() { }
 801069c:	b580      	push	{r7, lr}
 801069e:	b082      	sub	sp, #8
 80106a0:	af00      	add	r7, sp, #0
 80106a2:	6078      	str	r0, [r7, #4]
 80106a4:	4a06      	ldr	r2, [pc, #24]	; (80106c0 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	601a      	str	r2, [r3, #0]
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	3304      	adds	r3, #4
 80106ae:	4618      	mov	r0, r3
 80106b0:	f7ff ffd2 	bl	8010658 <_ZN8touchgfx9ContainerD1Ev>
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	4618      	mov	r0, r3
 80106b8:	3708      	adds	r7, #8
 80106ba:	46bd      	mov	sp, r7
 80106bc:	bd80      	pop	{r7, pc}
 80106be:	bf00      	nop
 80106c0:	080287dc 	.word	0x080287dc

080106c4 <_ZN8touchgfx6ScreenD0Ev>:
 80106c4:	b580      	push	{r7, lr}
 80106c6:	b082      	sub	sp, #8
 80106c8:	af00      	add	r7, sp, #0
 80106ca:	6078      	str	r0, [r7, #4]
 80106cc:	6878      	ldr	r0, [r7, #4]
 80106ce:	f7ff ffe5 	bl	801069c <_ZN8touchgfx6ScreenD1Ev>
 80106d2:	213c      	movs	r1, #60	; 0x3c
 80106d4:	6878      	ldr	r0, [r7, #4]
 80106d6:	f014 fa7c 	bl	8024bd2 <_ZdlPvj>
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	4618      	mov	r0, r3
 80106de:	3708      	adds	r7, #8
 80106e0:	46bd      	mov	sp, r7
 80106e2:	bd80      	pop	{r7, pc}

080106e4 <_ZN8touchgfx6Screen11setupScreenEv>:
     *        Base version does nothing, but place any screen specific initialization code in
     *        an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void setupScreen() { }
 80106e4:	b480      	push	{r7}
 80106e6:	b083      	sub	sp, #12
 80106e8:	af00      	add	r7, sp, #0
 80106ea:	6078      	str	r0, [r7, #4]
 80106ec:	bf00      	nop
 80106ee:	370c      	adds	r7, #12
 80106f0:	46bd      	mov	sp, r7
 80106f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f6:	4770      	bx	lr

080106f8 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *        Base version does nothing, but override to do screen specific initialization code
     *        that has to be done after the transition to the screen.
     *
     * @see touchgfx::Application::handleTick()
     */
    virtual void afterTransition() { }
 80106f8:	b480      	push	{r7}
 80106fa:	b083      	sub	sp, #12
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	6078      	str	r0, [r7, #4]
 8010700:	bf00      	nop
 8010702:	370c      	adds	r7, #12
 8010704:	46bd      	mov	sp, r7
 8010706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801070a:	4770      	bx	lr

0801070c <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *        displayed. Base version does nothing, but place any screen specific cleanup code
     *        in an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void tearDownScreen() { }
 801070c:	b480      	push	{r7}
 801070e:	b083      	sub	sp, #12
 8010710:	af00      	add	r7, sp, #0
 8010712:	6078      	str	r0, [r7, #4]
 8010714:	bf00      	nop
 8010716:	370c      	adds	r7, #12
 8010718:	46bd      	mov	sp, r7
 801071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801071e:	4770      	bx	lr

08010720 <_ZN8touchgfx6Screen15handleTickEventEv>:
     *        Application::TICK_INTERVAL_MS.
     *
     *        Called by the Application on the current screen with a frequency of
     *        Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8010720:	b480      	push	{r7}
 8010722:	b083      	sub	sp, #12
 8010724:	af00      	add	r7, sp, #0
 8010726:	6078      	str	r0, [r7, #4]
    {
    }
 8010728:	bf00      	nop
 801072a:	370c      	adds	r7, #12
 801072c:	46bd      	mov	sp, r7
 801072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010732:	4770      	bx	lr

08010734 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *        Called by the Application on the reception of a "key", the meaning of which is
     *        platform/application specific. Default implementation does nothing.
     *
     * @param key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8010734:	b480      	push	{r7}
 8010736:	b083      	sub	sp, #12
 8010738:	af00      	add	r7, sp, #0
 801073a:	6078      	str	r0, [r7, #4]
 801073c:	460b      	mov	r3, r1
 801073e:	70fb      	strb	r3, [r7, #3]
    {
    }
 8010740:	bf00      	nop
 8010742:	370c      	adds	r7, #12
 8010744:	46bd      	mov	sp, r7
 8010746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801074a:	4770      	bx	lr

0801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     *
     * @param [in] d The Drawable to add.
     */
    void add(Drawable& d)
 801074c:	b580      	push	{r7, lr}
 801074e:	b082      	sub	sp, #8
 8010750:	af00      	add	r7, sp, #0
 8010752:	6078      	str	r0, [r7, #4]
 8010754:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	3304      	adds	r3, #4
 801075a:	6839      	ldr	r1, [r7, #0]
 801075c:	4618      	mov	r0, r3
 801075e:	f005 f8d3 	bl	8015908 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8010762:	bf00      	nop
 8010764:	3708      	adds	r7, #8
 8010766:	46bd      	mov	sp, r7
 8010768:	bd80      	pop	{r7, pc}
	...

0801076c <_ZN8touchgfx6WidgetC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Widget() : Drawable() { }
 801076c:	b580      	push	{r7, lr}
 801076e:	b082      	sub	sp, #8
 8010770:	af00      	add	r7, sp, #0
 8010772:	6078      	str	r0, [r7, #4]
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	4618      	mov	r0, r3
 8010778:	f7ff fdec 	bl	8010354 <_ZN8touchgfx8DrawableC1Ev>
 801077c:	4a03      	ldr	r2, [pc, #12]	; (801078c <_ZN8touchgfx6WidgetC1Ev+0x20>)
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	601a      	str	r2, [r3, #0]
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	4618      	mov	r0, r3
 8010786:	3708      	adds	r7, #8
 8010788:	46bd      	mov	sp, r7
 801078a:	bd80      	pop	{r7, pc}
 801078c:	080267b0 	.word	0x080267b0

08010790 <_ZN8touchgfx6WidgetD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Widget() { }
 8010790:	b580      	push	{r7, lr}
 8010792:	b082      	sub	sp, #8
 8010794:	af00      	add	r7, sp, #0
 8010796:	6078      	str	r0, [r7, #4]
 8010798:	4a05      	ldr	r2, [pc, #20]	; (80107b0 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	601a      	str	r2, [r3, #0]
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	4618      	mov	r0, r3
 80107a2:	f7ff fe05 	bl	80103b0 <_ZN8touchgfx8DrawableD1Ev>
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	4618      	mov	r0, r3
 80107aa:	3708      	adds	r7, #8
 80107ac:	46bd      	mov	sp, r7
 80107ae:	bd80      	pop	{r7, pc}
 80107b0:	080267b0 	.word	0x080267b0

080107b4 <_ZN8touchgfx6WidgetD0Ev>:
 80107b4:	b580      	push	{r7, lr}
 80107b6:	b082      	sub	sp, #8
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	6078      	str	r0, [r7, #4]
 80107bc:	6878      	ldr	r0, [r7, #4]
 80107be:	f7ff ffe7 	bl	8010790 <_ZN8touchgfx6WidgetD1Ev>
 80107c2:	2128      	movs	r1, #40	; 0x28
 80107c4:	6878      	ldr	r0, [r7, #4]
 80107c6:	f014 fa04 	bl	8024bd2 <_ZdlPvj>
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	4618      	mov	r0, r3
 80107ce:	3708      	adds	r7, #8
 80107d0:	46bd      	mov	sp, r7
 80107d2:	bd80      	pop	{r7, pc}

080107d4 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param x          The point of intersection expressed in coordinates relative to the parent.
     * @param y          The y coordinate.
     * @param [out] last Result will be placed here.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 80107d4:	b580      	push	{r7, lr}
 80107d6:	b084      	sub	sp, #16
 80107d8:	af00      	add	r7, sp, #0
 80107da:	60f8      	str	r0, [r7, #12]
 80107dc:	607b      	str	r3, [r7, #4]
 80107de:	460b      	mov	r3, r1
 80107e0:	817b      	strh	r3, [r7, #10]
 80107e2:	4613      	mov	r3, r2
 80107e4:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	4618      	mov	r0, r3
 80107ea:	f7ff fecd 	bl	8010588 <_ZNK8touchgfx8Drawable9isVisibleEv>
 80107ee:	4603      	mov	r3, r0
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d008      	beq.n	8010806 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	4618      	mov	r0, r3
 80107f8:	f7ff fed3 	bl	80105a2 <_ZNK8touchgfx8Drawable11isTouchableEv>
 80107fc:	4603      	mov	r3, r0
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d001      	beq.n	8010806 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8010802:	2301      	movs	r3, #1
 8010804:	e000      	b.n	8010808 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8010806:	2300      	movs	r3, #0
 8010808:	2b00      	cmp	r3, #0
 801080a:	d002      	beq.n	8010812 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 801080c:	68fa      	ldr	r2, [r7, #12]
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	601a      	str	r2, [r3, #0]
        }
    }
 8010812:	bf00      	nop
 8010814:	3710      	adds	r7, #16
 8010816:	46bd      	mov	sp, r7
 8010818:	bd80      	pop	{r7, pc}
	...

0801081c <_ZN8touchgfx3BoxC1Ev>:
     *
     * @brief Constructor.
     *
     *        Constructs a new Box with a default alpha value of 255 (solid)
     */
    Box() : Widget(), alpha(255), color(0), reportAsSolid(false)
 801081c:	b580      	push	{r7, lr}
 801081e:	b082      	sub	sp, #8
 8010820:	af00      	add	r7, sp, #0
 8010822:	6078      	str	r0, [r7, #4]
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	4618      	mov	r0, r3
 8010828:	f7ff ffa0 	bl	801076c <_ZN8touchgfx6WidgetC1Ev>
 801082c:	4a0a      	ldr	r2, [pc, #40]	; (8010858 <_ZN8touchgfx3BoxC1Ev+0x3c>)
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	601a      	str	r2, [r3, #0]
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	22ff      	movs	r2, #255	; 0xff
 8010836:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	3328      	adds	r3, #40	; 0x28
 801083e:	2100      	movs	r1, #0
 8010840:	4618      	mov	r0, r3
 8010842:	f7ff fd31 	bl	80102a8 <_ZN8touchgfx9colortypeC1Em>
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	2200      	movs	r2, #0
 801084a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
    }
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	4618      	mov	r0, r3
 8010852:	3708      	adds	r7, #8
 8010854:	46bd      	mov	sp, r7
 8010856:	bd80      	pop	{r7, pc}
 8010858:	080281e8 	.word	0x080281e8

0801085c <_ZN8touchgfx3BoxD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Box() {}
 801085c:	b580      	push	{r7, lr}
 801085e:	b082      	sub	sp, #8
 8010860:	af00      	add	r7, sp, #0
 8010862:	6078      	str	r0, [r7, #4]
 8010864:	4a05      	ldr	r2, [pc, #20]	; (801087c <_ZN8touchgfx3BoxD1Ev+0x20>)
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	601a      	str	r2, [r3, #0]
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	4618      	mov	r0, r3
 801086e:	f7ff ff8f 	bl	8010790 <_ZN8touchgfx6WidgetD1Ev>
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	4618      	mov	r0, r3
 8010876:	3708      	adds	r7, #8
 8010878:	46bd      	mov	sp, r7
 801087a:	bd80      	pop	{r7, pc}
 801087c:	080281e8 	.word	0x080281e8

08010880 <_ZN8touchgfx3BoxD0Ev>:
 8010880:	b580      	push	{r7, lr}
 8010882:	b082      	sub	sp, #8
 8010884:	af00      	add	r7, sp, #0
 8010886:	6078      	str	r0, [r7, #4]
 8010888:	6878      	ldr	r0, [r7, #4]
 801088a:	f7ff ffe7 	bl	801085c <_ZN8touchgfx3BoxD1Ev>
 801088e:	2130      	movs	r1, #48	; 0x30
 8010890:	6878      	ldr	r0, [r7, #4]
 8010892:	f014 f99e 	bl	8024bd2 <_ZdlPvj>
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	4618      	mov	r0, r3
 801089a:	3708      	adds	r7, #8
 801089c:	46bd      	mov	sp, r7
 801089e:	bd80      	pop	{r7, pc}

080108a0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     *        Sets the color of the rectangle.
     *
     * @param color The color of the box.
     */
    void setColor(colortype color)
 80108a0:	b480      	push	{r7}
 80108a2:	b083      	sub	sp, #12
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	6078      	str	r0, [r7, #4]
 80108a8:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	683a      	ldr	r2, [r7, #0]
 80108ae:	629a      	str	r2, [r3, #40]	; 0x28
    }
 80108b0:	bf00      	nop
 80108b2:	370c      	adds	r7, #12
 80108b4:	46bd      	mov	sp, r7
 80108b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ba:	4770      	bx	lr

080108bc <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID) : typedTextId(id)
 80108bc:	b480      	push	{r7}
 80108be:	b083      	sub	sp, #12
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	6078      	str	r0, [r7, #4]
 80108c4:	460b      	mov	r3, r1
 80108c6:	807b      	strh	r3, [r7, #2]
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	887a      	ldrh	r2, [r7, #2]
 80108cc:	801a      	strh	r2, [r3, #0]
    }
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	4618      	mov	r0, r3
 80108d2:	370c      	adds	r7, #12
 80108d4:	46bd      	mov	sp, r7
 80108d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108da:	4770      	bx	lr

080108dc <_ZNK8touchgfx9TypedText7getTextEv>:
    const Unicode::UnicodeChar* getText() const
 80108dc:	b580      	push	{r7, lr}
 80108de:	b082      	sub	sp, #8
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	6078      	str	r0, [r7, #4]
        assertValid();
 80108e4:	6878      	ldr	r0, [r7, #4]
 80108e6:	f7fe fd13 	bl	800f310 <_ZNK8touchgfx9TypedText11assertValidEv>
        return texts->getText(typedTextId);
 80108ea:	4b06      	ldr	r3, [pc, #24]	; (8010904 <_ZNK8touchgfx9TypedText7getTextEv+0x28>)
 80108ec:	681a      	ldr	r2, [r3, #0]
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	881b      	ldrh	r3, [r3, #0]
 80108f2:	4619      	mov	r1, r3
 80108f4:	4610      	mov	r0, r2
 80108f6:	f001 ffb7 	bl	8012868 <_ZNK8touchgfx5Texts7getTextEt>
 80108fa:	4603      	mov	r3, r0
    }
 80108fc:	4618      	mov	r0, r3
 80108fe:	3708      	adds	r7, #8
 8010900:	46bd      	mov	sp, r7
 8010902:	bd80      	pop	{r7, pc}
 8010904:	2000bd18 	.word	0x2000bd18

08010908 <_ZN8touchgfx8TextAreaC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Create an empty TextArea. Default color is black.
     */
    TextArea()
 8010908:	b580      	push	{r7, lr}
 801090a:	b082      	sub	sp, #8
 801090c:	af00      	add	r7, sp, #0
 801090e:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	4618      	mov	r0, r3
 8010914:	f7ff ff2a 	bl	801076c <_ZN8touchgfx6WidgetC1Ev>
 8010918:	4a13      	ldr	r2, [pc, #76]	; (8010968 <_ZN8touchgfx8TextAreaC1Ev+0x60>)
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	601a      	str	r2, [r3, #0]
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	3326      	adds	r3, #38	; 0x26
 8010922:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010926:	4618      	mov	r0, r3
 8010928:	f7ff ffc8 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	3328      	adds	r3, #40	; 0x28
 8010930:	2100      	movs	r1, #0
 8010932:	4618      	mov	r0, r3
 8010934:	f7ff fcb8 	bl	80102a8 <_ZN8touchgfx9colortypeC1Em>
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	2200      	movs	r2, #0
 801093c:	859a      	strh	r2, [r3, #44]	; 0x2c
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	22ff      	movs	r2, #255	; 0xff
 8010942:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	2200      	movs	r2, #0
 801094a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	2200      	movs	r2, #0
 8010952:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	2200      	movs	r2, #0
 801095a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    {
    }
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	4618      	mov	r0, r3
 8010962:	3708      	adds	r7, #8
 8010964:	46bd      	mov	sp, r7
 8010966:	bd80      	pop	{r7, pc}
 8010968:	0802816c 	.word	0x0802816c

0801096c <_ZNK8touchgfx8TextArea12getSolidRectEv>:
     *
     *        Gets solid rectangle.
     *
     * @return the largest solid rectangle for this widget. For a TextArea, this is an empty area.
     */
    virtual Rect getSolidRect() const
 801096c:	b580      	push	{r7, lr}
 801096e:	b084      	sub	sp, #16
 8010970:	af02      	add	r7, sp, #8
 8010972:	6078      	str	r0, [r7, #4]
 8010974:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, 0, 0);
 8010976:	2300      	movs	r3, #0
 8010978:	9300      	str	r3, [sp, #0]
 801097a:	2300      	movs	r3, #0
 801097c:	2200      	movs	r2, #0
 801097e:	2100      	movs	r1, #0
 8010980:	6878      	ldr	r0, [r7, #4]
 8010982:	f7ff fcb7 	bl	80102f4 <_ZN8touchgfx4RectC1Essss>
    }
 8010986:	6878      	ldr	r0, [r7, #4]
 8010988:	3708      	adds	r7, #8
 801098a:	46bd      	mov	sp, r7
 801098c:	bd80      	pop	{r7, pc}

0801098e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>:
     *
     *        Sets the color of the text.
     *
     * @param color The color to use.
     */
    inline void setColor(colortype color)
 801098e:	b480      	push	{r7}
 8010990:	b083      	sub	sp, #12
 8010992:	af00      	add	r7, sp, #0
 8010994:	6078      	str	r0, [r7, #4]
 8010996:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	683a      	ldr	r2, [r7, #0]
 801099c:	629a      	str	r2, [r3, #40]	; 0x28
    }
 801099e:	bf00      	nop
 80109a0:	370c      	adds	r7, #12
 80109a2:	46bd      	mov	sp, r7
 80109a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a8:	4770      	bx	lr

080109aa <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *        changes you have to set the baseline again. Note that setTypedText must be called
     *        prior to setting the baseline.
     *
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 80109aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80109ac:	b085      	sub	sp, #20
 80109ae:	af00      	add	r7, sp, #0
 80109b0:	6078      	str	r0, [r7, #4]
 80109b2:	460b      	mov	r3, r1
 80109b4:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 80109b6:	687e      	ldr	r6, [r7, #4]
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	3330      	adds	r3, #48	; 0x30
 80109be:	681c      	ldr	r4, [r3, #0]
 80109c0:	887d      	ldrh	r5, [r7, #2]
 80109c2:	6878      	ldr	r0, [r7, #4]
 80109c4:	f000 f845 	bl	8010a52 <_ZNK8touchgfx8TextArea12getTypedTextEv>
 80109c8:	4603      	mov	r3, r0
 80109ca:	81bb      	strh	r3, [r7, #12]
 80109cc:	f107 030c 	add.w	r3, r7, #12
 80109d0:	4618      	mov	r0, r3
 80109d2:	f7fe fc69 	bl	800f2a8 <_ZNK8touchgfx9TypedText7getFontEv>
 80109d6:	4602      	mov	r2, r0
 80109d8:	6813      	ldr	r3, [r2, #0]
 80109da:	332c      	adds	r3, #44	; 0x2c
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	4610      	mov	r0, r2
 80109e0:	4798      	blx	r3
 80109e2:	4603      	mov	r3, r0
 80109e4:	1aeb      	subs	r3, r5, r3
 80109e6:	b29b      	uxth	r3, r3
 80109e8:	b21b      	sxth	r3, r3
 80109ea:	4619      	mov	r1, r3
 80109ec:	4630      	mov	r0, r6
 80109ee:	47a0      	blx	r4
    }
 80109f0:	bf00      	nop
 80109f2:	3714      	adds	r7, #20
 80109f4:	46bd      	mov	sp, r7
 80109f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080109f8 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *        coordinate of the TextArea.
     *
     * @param x         The x coordinate of the TextArea.
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 80109f8:	b580      	push	{r7, lr}
 80109fa:	b082      	sub	sp, #8
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	6078      	str	r0, [r7, #4]
 8010a00:	460b      	mov	r3, r1
 8010a02:	807b      	strh	r3, [r7, #2]
 8010a04:	4613      	mov	r3, r2
 8010a06:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8010a08:	687a      	ldr	r2, [r7, #4]
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	332c      	adds	r3, #44	; 0x2c
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8010a16:	4610      	mov	r0, r2
 8010a18:	4798      	blx	r3
        setBaselineY(baselineY);
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	3360      	adds	r3, #96	; 0x60
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	f9b7 2000 	ldrsh.w	r2, [r7]
 8010a26:	4611      	mov	r1, r2
 8010a28:	6878      	ldr	r0, [r7, #4]
 8010a2a:	4798      	blx	r3
    }
 8010a2c:	bf00      	nop
 8010a2e:	3708      	adds	r7, #8
 8010a30:	46bd      	mov	sp, r7
 8010a32:	bd80      	pop	{r7, pc}

08010a34 <_ZN8touchgfx8TextArea14setLinespacingEs>:
     *
     *        Sets the line spacing of the TextArea.
     *
     * @param space The line spacing of use in the TextArea.
     */
    inline void setLinespacing(int16_t space)
 8010a34:	b480      	push	{r7}
 8010a36:	b083      	sub	sp, #12
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	6078      	str	r0, [r7, #4]
 8010a3c:	460b      	mov	r3, r1
 8010a3e:	807b      	strh	r3, [r7, #2]
    {
        linespace = space;
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	887a      	ldrh	r2, [r7, #2]
 8010a44:	859a      	strh	r2, [r3, #44]	; 0x2c
    }
 8010a46:	bf00      	nop
 8010a48:	370c      	adds	r7, #12
 8010a4a:	46bd      	mov	sp, r7
 8010a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a50:	4770      	bx	lr

08010a52 <_ZNK8touchgfx8TextArea12getTypedTextEv>:
     *
     *        Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    TypedText getTypedText() const
 8010a52:	b480      	push	{r7}
 8010a54:	b083      	sub	sp, #12
 8010a56:	af00      	add	r7, sp, #0
 8010a58:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    }
 8010a5e:	4618      	mov	r0, r3
 8010a60:	370c      	adds	r7, #12
 8010a62:	46bd      	mov	sp, r7
 8010a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a68:	4770      	bx	lr
	...

08010a6c <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 8010a6c:	b580      	push	{r7, lr}
 8010a6e:	b082      	sub	sp, #8
 8010a70:	af00      	add	r7, sp, #0
 8010a72:	6078      	str	r0, [r7, #4]
 8010a74:	4a05      	ldr	r2, [pc, #20]	; (8010a8c <_ZN8touchgfx8TextAreaD1Ev+0x20>)
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	601a      	str	r2, [r3, #0]
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	4618      	mov	r0, r3
 8010a7e:	f7ff fe87 	bl	8010790 <_ZN8touchgfx6WidgetD1Ev>
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	4618      	mov	r0, r3
 8010a86:	3708      	adds	r7, #8
 8010a88:	46bd      	mov	sp, r7
 8010a8a:	bd80      	pop	{r7, pc}
 8010a8c:	0802816c 	.word	0x0802816c

08010a90 <_ZN8touchgfx8TextAreaD0Ev>:
 8010a90:	b580      	push	{r7, lr}
 8010a92:	b082      	sub	sp, #8
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	6078      	str	r0, [r7, #4]
 8010a98:	6878      	ldr	r0, [r7, #4]
 8010a9a:	f7ff ffe7 	bl	8010a6c <_ZN8touchgfx8TextAreaD1Ev>
 8010a9e:	2134      	movs	r1, #52	; 0x34
 8010aa0:	6878      	ldr	r0, [r7, #4]
 8010aa2:	f014 f896 	bl	8024bd2 <_ZdlPvj>
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	3708      	adds	r7, #8
 8010aac:	46bd      	mov	sp, r7
 8010aae:	bd80      	pop	{r7, pc}

08010ab0 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithWildcardBase()
 8010ab0:	b580      	push	{r7, lr}
 8010ab2:	b082      	sub	sp, #8
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	6078      	str	r0, [r7, #4]
        : TextArea()
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	4618      	mov	r0, r3
 8010abc:	f7ff ff24 	bl	8010908 <_ZN8touchgfx8TextAreaC1Ev>
 8010ac0:	4a03      	ldr	r2, [pc, #12]	; (8010ad0 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev+0x20>)
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	601a      	str	r2, [r3, #0]
    {
    }
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	4618      	mov	r0, r3
 8010aca:	3708      	adds	r7, #8
 8010acc:	46bd      	mov	sp, r7
 8010ace:	bd80      	pop	{r7, pc}
 8010ad0:	08026734 	.word	0x08026734

08010ad4 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 8010ad4:	b580      	push	{r7, lr}
 8010ad6:	b082      	sub	sp, #8
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	6078      	str	r0, [r7, #4]
 8010adc:	4a05      	ldr	r2, [pc, #20]	; (8010af4 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	601a      	str	r2, [r3, #0]
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	f7ff ffc1 	bl	8010a6c <_ZN8touchgfx8TextAreaD1Ev>
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	4618      	mov	r0, r3
 8010aee:	3708      	adds	r7, #8
 8010af0:	46bd      	mov	sp, r7
 8010af2:	bd80      	pop	{r7, pc}
 8010af4:	08026734 	.word	0x08026734

08010af8 <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 8010af8:	b580      	push	{r7, lr}
 8010afa:	b082      	sub	sp, #8
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	6078      	str	r0, [r7, #4]
 8010b00:	6878      	ldr	r0, [r7, #4]
 8010b02:	f7ff ffe7 	bl	8010ad4 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 8010b06:	2134      	movs	r1, #52	; 0x34
 8010b08:	6878      	ldr	r0, [r7, #4]
 8010b0a:	f014 f862 	bl	8024bd2 <_ZdlPvj>
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	4618      	mov	r0, r3
 8010b12:	3708      	adds	r7, #8
 8010b14:	46bd      	mov	sp, r7
 8010b16:	bd80      	pop	{r7, pc}

08010b18 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithOneWildcard()
 8010b18:	b580      	push	{r7, lr}
 8010b1a:	b082      	sub	sp, #8
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	6078      	str	r0, [r7, #4]
        : TextAreaWithWildcardBase(), wildcard(0)
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	4618      	mov	r0, r3
 8010b24:	f7ff ffc4 	bl	8010ab0 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>
 8010b28:	4a05      	ldr	r2, [pc, #20]	; (8010b40 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	601a      	str	r2, [r3, #0]
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	2200      	movs	r2, #0
 8010b32:	635a      	str	r2, [r3, #52]	; 0x34
    {
    }
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	4618      	mov	r0, r3
 8010b38:	3708      	adds	r7, #8
 8010b3a:	46bd      	mov	sp, r7
 8010b3c:	bd80      	pop	{r7, pc}
 8010b3e:	bf00      	nop
 8010b40:	080282d4 	.word	0x080282d4

08010b44 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     *
     *        Sets the wildcard in the text.Must be a zero-terminated UnicodeChar array.
     *
     * @param value A pointer to the UnicodeChar to set the wildcard to.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 8010b44:	b480      	push	{r7}
 8010b46:	b083      	sub	sp, #12
 8010b48:	af00      	add	r7, sp, #0
 8010b4a:	6078      	str	r0, [r7, #4]
 8010b4c:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	683a      	ldr	r2, [r7, #0]
 8010b52:	635a      	str	r2, [r3, #52]	; 0x34
    }
 8010b54:	bf00      	nop
 8010b56:	370c      	adds	r7, #12
 8010b58:	46bd      	mov	sp, r7
 8010b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b5e:	4770      	bx	lr

08010b60 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *        Constructs a new Image with a default alpha value of 255 (solid) and a default
     *        Bitmap if none is specified.
     *
     * @param bmp The bitmap to display.
     */
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 8010b60:	b580      	push	{r7, lr}
 8010b62:	b082      	sub	sp, #8
 8010b64:	af00      	add	r7, sp, #0
 8010b66:	6078      	str	r0, [r7, #4]
 8010b68:	6039      	str	r1, [r7, #0]
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	f7ff fdfd 	bl	801076c <_ZN8touchgfx6WidgetC1Ev>
 8010b72:	4a0b      	ldr	r2, [pc, #44]	; (8010ba0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x40>)
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	601a      	str	r2, [r3, #0]
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	3326      	adds	r3, #38	; 0x26
 8010b7c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010b80:	4618      	mov	r0, r3
 8010b82:	f7ff fbd7 	bl	8010334 <_ZN8touchgfx6BitmapC1Et>
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	22ff      	movs	r2, #255	; 0xff
 8010b8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        setBitmap(bmp);
 8010b8e:	6839      	ldr	r1, [r7, #0]
 8010b90:	6878      	ldr	r0, [r7, #4]
 8010b92:	f006 ffa7 	bl	8017ae4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	4618      	mov	r0, r3
 8010b9a:	3708      	adds	r7, #8
 8010b9c:	46bd      	mov	sp, r7
 8010b9e:	bd80      	pop	{r7, pc}
 8010ba0:	08028350 	.word	0x08028350

08010ba4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         *        Constructor from integer. No conversion is done - the integer is assumed to
         *        already be in Q5 format.
         *
         * @param i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i) : v(i) { }
 8010ba4:	b480      	push	{r7}
 8010ba6:	b083      	sub	sp, #12
 8010ba8:	af00      	add	r7, sp, #0
 8010baa:	6078      	str	r0, [r7, #4]
 8010bac:	6039      	str	r1, [r7, #0]
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	683a      	ldr	r2, [r7, #0]
 8010bb2:	601a      	str	r2, [r3, #0]
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	370c      	adds	r7, #12
 8010bba:	46bd      	mov	sp, r7
 8010bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc0:	4770      	bx	lr

08010bc2 <_ZNK8touchgfx7CWRUtil2Q5cviEv>:
         *
         *        Gets the Q5 as an integer without conversion.
         *
         * @return The unconverted Q5 value.
         */
        operator int() const
 8010bc2:	b480      	push	{r7}
 8010bc4:	b083      	sub	sp, #12
 8010bc6:	af00      	add	r7, sp, #0
 8010bc8:	6078      	str	r0, [r7, #4]
        {
            return v;
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	681b      	ldr	r3, [r3, #0]
        }
 8010bce:	4618      	mov	r0, r3
 8010bd0:	370c      	adds	r7, #12
 8010bd2:	46bd      	mov	sp, r7
 8010bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd8:	4770      	bx	lr

08010bda <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>:
     *
     * @note The area containing the Line is not invalidated.
     *
     * @see updateLineWidth
     */
    void setLineWidth(CWRUtil::Q5 widthQ5)
 8010bda:	b590      	push	{r4, r7, lr}
 8010bdc:	b083      	sub	sp, #12
 8010bde:	af00      	add	r7, sp, #0
 8010be0:	6078      	str	r0, [r7, #4]
 8010be2:	6039      	str	r1, [r7, #0]
    {
        if (lineWidth == widthQ5)
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	3340      	adds	r3, #64	; 0x40
 8010be8:	4618      	mov	r0, r3
 8010bea:	f7ff ffea 	bl	8010bc2 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8010bee:	4604      	mov	r4, r0
 8010bf0:	463b      	mov	r3, r7
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	f7ff ffe5 	bl	8010bc2 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8010bf8:	4603      	mov	r3, r0
 8010bfa:	429c      	cmp	r4, r3
 8010bfc:	bf0c      	ite	eq
 8010bfe:	2301      	moveq	r3, #1
 8010c00:	2300      	movne	r3, #0
 8010c02:	b2db      	uxtb	r3, r3
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d106      	bne.n	8010c16 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3c>
        {
            return;
        }

        lineWidth = widthQ5;
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	683a      	ldr	r2, [r7, #0]
 8010c0c:	641a      	str	r2, [r3, #64]	; 0x40

        updateCachedShape();
 8010c0e:	6878      	ldr	r0, [r7, #4]
 8010c10:	f006 f9e2 	bl	8016fd8 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8010c14:	e000      	b.n	8010c18 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3e>
            return;
 8010c16:	bf00      	nop
    }
 8010c18:	370c      	adds	r7, #12
 8010c1a:	46bd      	mov	sp, r7
 8010c1c:	bd90      	pop	{r4, r7, pc}
	...

08010c20 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>:
    AbstractPainterRGB888()
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
    }

    virtual ~AbstractPainterRGB888() {}
 8010c20:	b580      	push	{r7, lr}
 8010c22:	b082      	sub	sp, #8
 8010c24:	af00      	add	r7, sp, #0
 8010c26:	6078      	str	r0, [r7, #4]
 8010c28:	4a05      	ldr	r2, [pc, #20]	; (8010c40 <_ZN8touchgfx21AbstractPainterRGB888D1Ev+0x20>)
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	601a      	str	r2, [r3, #0]
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	4618      	mov	r0, r3
 8010c32:	f005 ffe5 	bl	8016c00 <_ZN8touchgfx15AbstractPainterD1Ev>
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	4618      	mov	r0, r3
 8010c3a:	3708      	adds	r7, #8
 8010c3c:	46bd      	mov	sp, r7
 8010c3e:	bd80      	pop	{r7, pc}
 8010c40:	08027cc0 	.word	0x08027cc0

08010c44 <_ZN8touchgfx21AbstractPainterRGB888D0Ev>:
 8010c44:	b580      	push	{r7, lr}
 8010c46:	b082      	sub	sp, #8
 8010c48:	af00      	add	r7, sp, #0
 8010c4a:	6078      	str	r0, [r7, #4]
 8010c4c:	6878      	ldr	r0, [r7, #4]
 8010c4e:	f7ff ffe7 	bl	8010c20 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 8010c52:	2114      	movs	r1, #20
 8010c54:	6878      	ldr	r0, [r7, #4]
 8010c56:	f013 ffbc 	bl	8024bd2 <_ZdlPvj>
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	3708      	adds	r7, #8
 8010c60:	46bd      	mov	sp, r7
 8010c62:	bd80      	pop	{r7, pc}

08010c64 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 8010c64:	b580      	push	{r7, lr}
 8010c66:	b082      	sub	sp, #8
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	6078      	str	r0, [r7, #4]
 8010c6c:	4a05      	ldr	r2, [pc, #20]	; (8010c84 <_ZN8touchgfx5ImageD1Ev+0x20>)
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	601a      	str	r2, [r3, #0]
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	4618      	mov	r0, r3
 8010c76:	f7ff fd8b 	bl	8010790 <_ZN8touchgfx6WidgetD1Ev>
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	4618      	mov	r0, r3
 8010c7e:	3708      	adds	r7, #8
 8010c80:	46bd      	mov	sp, r7
 8010c82:	bd80      	pop	{r7, pc}
 8010c84:	08028350 	.word	0x08028350

08010c88 <_ZN8touchgfx5ImageD0Ev>:
 8010c88:	b580      	push	{r7, lr}
 8010c8a:	b082      	sub	sp, #8
 8010c8c:	af00      	add	r7, sp, #0
 8010c8e:	6078      	str	r0, [r7, #4]
 8010c90:	6878      	ldr	r0, [r7, #4]
 8010c92:	f7ff ffe7 	bl	8010c64 <_ZN8touchgfx5ImageD1Ev>
 8010c96:	212c      	movs	r1, #44	; 0x2c
 8010c98:	6878      	ldr	r0, [r7, #4]
 8010c9a:	f013 ff9a 	bl	8024bd2 <_ZdlPvj>
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	4618      	mov	r0, r3
 8010ca2:	3708      	adds	r7, #8
 8010ca4:	46bd      	mov	sp, r7
 8010ca6:	bd80      	pop	{r7, pc}

08010ca8 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>:
class View : public Screen
 8010ca8:	b580      	push	{r7, lr}
 8010caa:	b082      	sub	sp, #8
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	6078      	str	r0, [r7, #4]
 8010cb0:	4a05      	ldr	r2, [pc, #20]	; (8010cc8 <_ZN8touchgfx4ViewI13MainPresenterED1Ev+0x20>)
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	601a      	str	r2, [r3, #0]
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	4618      	mov	r0, r3
 8010cba:	f7ff fcef 	bl	801069c <_ZN8touchgfx6ScreenD1Ev>
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	3708      	adds	r7, #8
 8010cc4:	46bd      	mov	sp, r7
 8010cc6:	bd80      	pop	{r7, pc}
 8010cc8:	08026700 	.word	0x08026700

08010ccc <_ZN8touchgfx4ViewI13MainPresenterED0Ev>:
 8010ccc:	b580      	push	{r7, lr}
 8010cce:	b082      	sub	sp, #8
 8010cd0:	af00      	add	r7, sp, #0
 8010cd2:	6078      	str	r0, [r7, #4]
 8010cd4:	6878      	ldr	r0, [r7, #4]
 8010cd6:	f7ff ffe7 	bl	8010ca8 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 8010cda:	2140      	movs	r1, #64	; 0x40
 8010cdc:	6878      	ldr	r0, [r7, #4]
 8010cde:	f013 ff78 	bl	8024bd2 <_ZdlPvj>
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	4618      	mov	r0, r3
 8010ce6:	3708      	adds	r7, #8
 8010ce8:	46bd      	mov	sp, r7
 8010cea:	bd80      	pop	{r7, pc}

08010cec <_ZN12MainViewBaseD1Ev>:

class MainViewBase : public touchgfx::View<MainPresenter>
{
public:
    MainViewBase();
    virtual ~MainViewBase() {}
 8010cec:	b580      	push	{r7, lr}
 8010cee:	b082      	sub	sp, #8
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	6078      	str	r0, [r7, #4]
 8010cf4:	4a7b      	ldr	r2, [pc, #492]	; (8010ee4 <_ZN12MainViewBaseD1Ev+0x1f8>)
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	601a      	str	r2, [r3, #0]
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	f603 231c 	addw	r3, r3, #2588	; 0xa1c
 8010d00:	4618      	mov	r0, r3
 8010d02:	f001 fcc7 	bl	8012694 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	f603 13e4 	addw	r3, r3, #2532	; 0x9e4
 8010d0c:	4618      	mov	r0, r3
 8010d0e:	f001 fcc1 	bl	8012694 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	f603 13ac 	addw	r3, r3, #2476	; 0x9ac
 8010d18:	4618      	mov	r0, r3
 8010d1a:	f001 fcbb 	bl	8012694 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	f603 1378 	addw	r3, r3, #2424	; 0x978
 8010d24:	4618      	mov	r0, r3
 8010d26:	f7ff fea1 	bl	8010a6c <_ZN8touchgfx8TextAreaD1Ev>
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 8010d30:	4618      	mov	r0, r3
 8010d32:	f001 fcaf 	bl	8012694 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	f004 fae7 	bl	8015310 <_ZN8touchgfx13ImageProgressD1Ev>
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8010d48:	4618      	mov	r0, r3
 8010d4a:	f001 fca3 	bl	8012694 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d54:	4618      	mov	r0, r3
 8010d56:	f001 fce1 	bl	801271c <_ZN8touchgfx13PainterRGB888D1Ev>
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	f203 738c 	addw	r3, r3, #1932	; 0x78c
 8010d60:	4618      	mov	r0, r3
 8010d62:	f001 fcb9 	bl	80126d8 <_ZN8touchgfx4LineD1Ev>
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	f203 7374 	addw	r3, r3, #1908	; 0x774
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	f001 fcd5 	bl	801271c <_ZN8touchgfx13PainterRGB888D1Ev>
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8010d78:	4618      	mov	r0, r3
 8010d7a:	f001 fcad 	bl	80126d8 <_ZN8touchgfx4LineD1Ev>
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8010d84:	4618      	mov	r0, r3
 8010d86:	f004 f9c3 	bl	8015110 <_ZN8touchgfx11BoxProgressD1Ev>
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 8010d90:	4618      	mov	r0, r3
 8010d92:	f7ff fe6b 	bl	8010a6c <_ZN8touchgfx8TextAreaD1Ev>
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	f203 53d4 	addw	r3, r3, #1492	; 0x5d4
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	f001 fc79 	bl	8012694 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	f203 539c 	addw	r3, r3, #1436	; 0x59c
 8010da8:	4618      	mov	r0, r3
 8010daa:	f001 fc73 	bl	8012694 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8010db4:	4618      	mov	r0, r3
 8010db6:	f7ff fe59 	bl	8010a6c <_ZN8touchgfx8TextAreaD1Ev>
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	f7ff fe53 	bl	8010a6c <_ZN8touchgfx8TextAreaD1Ev>
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	f203 43fc 	addw	r3, r3, #1276	; 0x4fc
 8010dcc:	4618      	mov	r0, r3
 8010dce:	f001 fc61 	bl	8012694 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8010dd8:	4618      	mov	r0, r3
 8010dda:	f001 fc5b 	bl	8012694 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8010de4:	4618      	mov	r0, r3
 8010de6:	f7ff fe41 	bl	8010a6c <_ZN8touchgfx8TextAreaD1Ev>
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 8010df0:	4618      	mov	r0, r3
 8010df2:	f7ff fe3b 	bl	8010a6c <_ZN8touchgfx8TextAreaD1Ev>
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	f001 fc8d 	bl	801271c <_ZN8touchgfx13PainterRGB888D1Ev>
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8010e08:	4618      	mov	r0, r3
 8010e0a:	f001 fc65 	bl	80126d8 <_ZN8touchgfx4LineD1Ev>
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	f503 7366 	add.w	r3, r3, #920	; 0x398
 8010e14:	4618      	mov	r0, r3
 8010e16:	f001 fc3d 	bl	8012694 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8010e20:	4618      	mov	r0, r3
 8010e22:	f001 fc37 	bl	8012694 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	f001 fc31 	bl	8012694 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 8010e38:	4618      	mov	r0, r3
 8010e3a:	f001 fc2b 	bl	8012694 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8010e44:	4618      	mov	r0, r3
 8010e46:	f001 fc25 	bl	8012694 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8010e50:	4618      	mov	r0, r3
 8010e52:	f001 fc1f 	bl	8012694 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	f001 fc19 	bl	8012694 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8010e68:	4618      	mov	r0, r3
 8010e6a:	f001 fc13 	bl	8012694 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010e74:	4618      	mov	r0, r3
 8010e76:	f7ff fef5 	bl	8010c64 <_ZN8touchgfx5ImageD1Ev>
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8010e80:	4618      	mov	r0, r3
 8010e82:	f001 fc07 	bl	8012694 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8010e8c:	4618      	mov	r0, r3
 8010e8e:	f001 fc01 	bl	8012694 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8010e98:	4618      	mov	r0, r3
 8010e9a:	f7ff fde7 	bl	8010a6c <_ZN8touchgfx8TextAreaD1Ev>
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	f7ff fde1 	bl	8010a6c <_ZN8touchgfx8TextAreaD1Ev>
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	33d8      	adds	r3, #216	; 0xd8
 8010eae:	4618      	mov	r0, r3
 8010eb0:	f7ff fddc 	bl	8010a6c <_ZN8touchgfx8TextAreaD1Ev>
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	33a4      	adds	r3, #164	; 0xa4
 8010eb8:	4618      	mov	r0, r3
 8010eba:	f7ff fdd7 	bl	8010a6c <_ZN8touchgfx8TextAreaD1Ev>
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	3370      	adds	r3, #112	; 0x70
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	f7ff fdd2 	bl	8010a6c <_ZN8touchgfx8TextAreaD1Ev>
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	3340      	adds	r3, #64	; 0x40
 8010ecc:	4618      	mov	r0, r3
 8010ece:	f7ff fcc5 	bl	801085c <_ZN8touchgfx3BoxD1Ev>
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	f7ff fee7 	bl	8010ca8 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	4618      	mov	r0, r3
 8010ede:	3708      	adds	r7, #8
 8010ee0:	46bd      	mov	sp, r7
 8010ee2:	bd80      	pop	{r7, pc}
 8010ee4:	080266cc 	.word	0x080266cc

08010ee8 <_ZN12MainViewBaseD0Ev>:
 8010ee8:	b580      	push	{r7, lr}
 8010eea:	b082      	sub	sp, #8
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	6078      	str	r0, [r7, #4]
 8010ef0:	6878      	ldr	r0, [r7, #4]
 8010ef2:	f7ff fefb 	bl	8010cec <_ZN12MainViewBaseD1Ev>
 8010ef6:	f242 7104 	movw	r1, #9988	; 0x2704
 8010efa:	6878      	ldr	r0, [r7, #4]
 8010efc:	f013 fe69 	bl	8024bd2 <_ZdlPvj>
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	4618      	mov	r0, r3
 8010f04:	3708      	adds	r7, #8
 8010f06:	46bd      	mov	sp, r7
 8010f08:	bd80      	pop	{r7, pc}
	...

08010f0c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     * @param green Value of the green part (0-255).
     * @param blue  Value of the blue part (0-255).
     *
     * @return The color representation depending on LCD color format.
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 8010f0c:	b590      	push	{r4, r7, lr}
 8010f0e:	b083      	sub	sp, #12
 8010f10:	af00      	add	r7, sp, #0
 8010f12:	4603      	mov	r3, r0
 8010f14:	71fb      	strb	r3, [r7, #7]
 8010f16:	460b      	mov	r3, r1
 8010f18:	71bb      	strb	r3, [r7, #6]
 8010f1a:	4613      	mov	r3, r2
 8010f1c:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 8010f1e:	f7fe fd97 	bl	800fa50 <_ZN8touchgfx3HAL11getInstanceEv>
 8010f22:	4603      	mov	r3, r0
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d105      	bne.n	8010f34 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 8010f28:	4b0a      	ldr	r3, [pc, #40]	; (8010f54 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 8010f2a:	4a0b      	ldr	r2, [pc, #44]	; (8010f58 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 8010f2c:	2138      	movs	r1, #56	; 0x38
 8010f2e:	480b      	ldr	r0, [pc, #44]	; (8010f5c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 8010f30:	f013 fe7a 	bl	8024c28 <__assert_func>
 8010f34:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 8010f36:	f7fe fd97 	bl	800fa68 <_ZN8touchgfx3HAL3lcdEv>
 8010f3a:	6803      	ldr	r3, [r0, #0]
 8010f3c:	332c      	adds	r3, #44	; 0x2c
 8010f3e:	681c      	ldr	r4, [r3, #0]
 8010f40:	797b      	ldrb	r3, [r7, #5]
 8010f42:	79ba      	ldrb	r2, [r7, #6]
 8010f44:	79f9      	ldrb	r1, [r7, #7]
 8010f46:	47a0      	blx	r4
 8010f48:	4603      	mov	r3, r0
    }
 8010f4a:	4618      	mov	r0, r3
 8010f4c:	370c      	adds	r7, #12
 8010f4e:	46bd      	mov	sp, r7
 8010f50:	bd90      	pop	{r4, r7, pc}
 8010f52:	bf00      	nop
 8010f54:	080260ac 	.word	0x080260ac
 8010f58:	08026810 	.word	0x08026810
 8010f5c:	080260f0 	.word	0x080260f0

08010f60 <_ZN12MainViewBaseC1Ev>:
#include <gui_generated/main_screen/MainViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include "BitmapDatabase.hpp"

MainViewBase::MainViewBase()
 8010f60:	b590      	push	{r4, r7, lr}
 8010f62:	b0bb      	sub	sp, #236	; 0xec
 8010f64:	af02      	add	r7, sp, #8
 8010f66:	6078      	str	r0, [r7, #4]
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	f001 fb18 	bl	80125a0 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>
 8010f70:	4adc      	ldr	r2, [pc, #880]	; (80112e4 <_ZN12MainViewBaseC1Ev+0x384>)
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	601a      	str	r2, [r3, #0]
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	3340      	adds	r3, #64	; 0x40
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	f7ff fc4e 	bl	801081c <_ZN8touchgfx3BoxC1Ev>
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	3370      	adds	r3, #112	; 0x70
 8010f84:	4618      	mov	r0, r3
 8010f86:	f7ff fcbf 	bl	8010908 <_ZN8touchgfx8TextAreaC1Ev>
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	33a4      	adds	r3, #164	; 0xa4
 8010f8e:	4618      	mov	r0, r3
 8010f90:	f7ff fcba 	bl	8010908 <_ZN8touchgfx8TextAreaC1Ev>
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	33d8      	adds	r3, #216	; 0xd8
 8010f98:	4618      	mov	r0, r3
 8010f9a:	f7ff fcb5 	bl	8010908 <_ZN8touchgfx8TextAreaC1Ev>
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	f7ff fcaf 	bl	8010908 <_ZN8touchgfx8TextAreaC1Ev>
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8010fb0:	4618      	mov	r0, r3
 8010fb2:	f7ff fca9 	bl	8010908 <_ZN8touchgfx8TextAreaC1Ev>
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8010fbc:	4618      	mov	r0, r3
 8010fbe:	f7ff fdab 	bl	8010b18 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8010fc8:	4618      	mov	r0, r3
 8010fca:	f7ff fda5 	bl	8010b18 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	f503 74f2 	add.w	r4, r3, #484	; 0x1e4
 8010fd4:	f107 0308 	add.w	r3, r7, #8
 8010fd8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010fdc:	4618      	mov	r0, r3
 8010fde:	f7ff f9a9 	bl	8010334 <_ZN8touchgfx6BitmapC1Et>
 8010fe2:	f107 0308 	add.w	r3, r7, #8
 8010fe6:	4619      	mov	r1, r3
 8010fe8:	4620      	mov	r0, r4
 8010fea:	f7ff fdb9 	bl	8010b60 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8010ff4:	4618      	mov	r0, r3
 8010ff6:	f7ff fd8f 	bl	8010b18 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8011000:	4618      	mov	r0, r3
 8011002:	f7ff fd89 	bl	8010b18 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	f503 7320 	add.w	r3, r3, #640	; 0x280
 801100c:	4618      	mov	r0, r3
 801100e:	f7ff fd83 	bl	8010b18 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8011018:	4618      	mov	r0, r3
 801101a:	f7ff fd7d 	bl	8010b18 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 8011024:	4618      	mov	r0, r3
 8011026:	f7ff fd77 	bl	8010b18 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8011030:	4618      	mov	r0, r3
 8011032:	f7ff fd71 	bl	8010b18 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801103c:	4618      	mov	r0, r3
 801103e:	f7ff fd6b 	bl	8010b18 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	f503 7366 	add.w	r3, r3, #920	; 0x398
 8011048:	4618      	mov	r0, r3
 801104a:	f7ff fd65 	bl	8010b18 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8011054:	4618      	mov	r0, r3
 8011056:	f005 ff9f 	bl	8016f98 <_ZN8touchgfx4LineC1Ev>
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	f203 4444 	addw	r4, r3, #1092	; 0x444
 8011060:	f107 030c 	add.w	r3, r7, #12
 8011064:	2100      	movs	r1, #0
 8011066:	4618      	mov	r0, r3
 8011068:	f7ff f91e 	bl	80102a8 <_ZN8touchgfx9colortypeC1Em>
 801106c:	22ff      	movs	r2, #255	; 0xff
 801106e:	68f9      	ldr	r1, [r7, #12]
 8011070:	4620      	mov	r0, r4
 8011072:	f005 fd83 	bl	8016b7c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 801107c:	4618      	mov	r0, r3
 801107e:	f7ff fc43 	bl	8010908 <_ZN8touchgfx8TextAreaC1Ev>
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8011088:	4618      	mov	r0, r3
 801108a:	f7ff fc3d 	bl	8010908 <_ZN8touchgfx8TextAreaC1Ev>
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8011094:	4618      	mov	r0, r3
 8011096:	f7ff fd3f 	bl	8010b18 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	f203 43fc 	addw	r3, r3, #1276	; 0x4fc
 80110a0:	4618      	mov	r0, r3
 80110a2:	f7ff fd39 	bl	8010b18 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	f203 5334 	addw	r3, r3, #1332	; 0x534
 80110ac:	4618      	mov	r0, r3
 80110ae:	f7ff fc2b 	bl	8010908 <_ZN8touchgfx8TextAreaC1Ev>
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 80110b8:	4618      	mov	r0, r3
 80110ba:	f7ff fc25 	bl	8010908 <_ZN8touchgfx8TextAreaC1Ev>
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	f203 539c 	addw	r3, r3, #1436	; 0x59c
 80110c4:	4618      	mov	r0, r3
 80110c6:	f7ff fd27 	bl	8010b18 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	f203 53d4 	addw	r3, r3, #1492	; 0x5d4
 80110d0:	4618      	mov	r0, r3
 80110d2:	f7ff fd21 	bl	8010b18 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 80110dc:	4618      	mov	r0, r3
 80110de:	f7ff fc13 	bl	8010908 <_ZN8touchgfx8TextAreaC1Ev>
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 80110e8:	4618      	mov	r0, r3
 80110ea:	f004 f825 	bl	8015138 <_ZN8touchgfx11BoxProgressC1Ev>
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 80110f4:	4618      	mov	r0, r3
 80110f6:	f005 ff4f 	bl	8016f98 <_ZN8touchgfx4LineC1Ev>
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	f203 7474 	addw	r4, r3, #1908	; 0x774
 8011100:	f107 0310 	add.w	r3, r7, #16
 8011104:	2100      	movs	r1, #0
 8011106:	4618      	mov	r0, r3
 8011108:	f7ff f8ce 	bl	80102a8 <_ZN8touchgfx9colortypeC1Em>
 801110c:	22ff      	movs	r2, #255	; 0xff
 801110e:	6939      	ldr	r1, [r7, #16]
 8011110:	4620      	mov	r0, r4
 8011112:	f005 fd33 	bl	8016b7c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	f203 738c 	addw	r3, r3, #1932	; 0x78c
 801111c:	4618      	mov	r0, r3
 801111e:	f005 ff3b 	bl	8016f98 <_ZN8touchgfx4LineC1Ev>
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	f503 6400 	add.w	r4, r3, #2048	; 0x800
 8011128:	f107 0314 	add.w	r3, r7, #20
 801112c:	2100      	movs	r1, #0
 801112e:	4618      	mov	r0, r3
 8011130:	f7ff f8ba 	bl	80102a8 <_ZN8touchgfx9colortypeC1Em>
 8011134:	22ff      	movs	r2, #255	; 0xff
 8011136:	6979      	ldr	r1, [r7, #20]
 8011138:	4620      	mov	r0, r4
 801113a:	f005 fd1f 	bl	8016b7c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8011144:	4618      	mov	r0, r3
 8011146:	f7ff fce7 	bl	8010b18 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 8011150:	4618      	mov	r0, r3
 8011152:	f004 f907 	bl	8015364 <_ZN8touchgfx13ImageProgressC1Ev>
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 801115c:	4618      	mov	r0, r3
 801115e:	f7ff fcdb 	bl	8010b18 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	f603 1378 	addw	r3, r3, #2424	; 0x978
 8011168:	4618      	mov	r0, r3
 801116a:	f7ff fbcd 	bl	8010908 <_ZN8touchgfx8TextAreaC1Ev>
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	f603 13ac 	addw	r3, r3, #2476	; 0x9ac
 8011174:	4618      	mov	r0, r3
 8011176:	f7ff fccf 	bl	8010b18 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	f603 13e4 	addw	r3, r3, #2532	; 0x9e4
 8011180:	4618      	mov	r0, r3
 8011182:	f7ff fcc9 	bl	8010b18 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	f603 231c 	addw	r3, r3, #2588	; 0xa1c
 801118c:	4618      	mov	r0, r3
 801118e:	f7ff fcc3 	bl	8010b18 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	f603 23e2 	addw	r3, r3, #2786	; 0xae2
 8011198:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 801119c:	4618      	mov	r0, r3
 801119e:	f006 fd0f 	bl	8017bc0 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    backgroundBox.setPosition(0, 0, 800, 480);
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80111a8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80111ac:	9300      	str	r3, [sp, #0]
 80111ae:	f44f 7348 	mov.w	r3, #800	; 0x320
 80111b2:	2200      	movs	r2, #0
 80111b4:	2100      	movs	r1, #0
 80111b6:	f7ff f91b 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
    backgroundBox.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80111c0:	2200      	movs	r2, #0
 80111c2:	2100      	movs	r1, #0
 80111c4:	2000      	movs	r0, #0
 80111c6:	f7ff fea1 	bl	8010f0c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80111ca:	4603      	mov	r3, r0
 80111cc:	4619      	mov	r1, r3
 80111ce:	4620      	mov	r0, r4
 80111d0:	f7ff fb66 	bl	80108a0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    RpmDescriptor.setXY(228, 138);
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	3370      	adds	r3, #112	; 0x70
 80111d8:	228a      	movs	r2, #138	; 0x8a
 80111da:	21e4      	movs	r1, #228	; 0xe4
 80111dc:	4618      	mov	r0, r3
 80111de:	f7ff f952 	bl	8010486 <_ZN8touchgfx8Drawable5setXYEss>
    RpmDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80111e8:	2200      	movs	r2, #0
 80111ea:	21dc      	movs	r1, #220	; 0xdc
 80111ec:	20ff      	movs	r0, #255	; 0xff
 80111ee:	f7ff fe8d 	bl	8010f0c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80111f2:	4603      	mov	r3, r0
 80111f4:	4619      	mov	r1, r3
 80111f6:	4620      	mov	r0, r4
 80111f8:	f7ff fbc9 	bl	801098e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    RpmDescriptor.setLinespacing(0);
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	3370      	adds	r3, #112	; 0x70
 8011200:	2100      	movs	r1, #0
 8011202:	4618      	mov	r0, r3
 8011204:	f7ff fc16 	bl	8010a34 <_ZN8touchgfx8TextArea14setLinespacingEs>
    RpmDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID21));
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	f103 0470 	add.w	r4, r3, #112	; 0x70
 801120e:	f107 0318 	add.w	r3, r7, #24
 8011212:	210c      	movs	r1, #12
 8011214:	4618      	mov	r0, r3
 8011216:	f7ff fb51 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 801121a:	8b39      	ldrh	r1, [r7, #24]
 801121c:	4620      	mov	r0, r4
 801121e:	f006 f9c1 	bl	80175a4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    KpaDescriptor.setXY(428, 126);
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	33a4      	adds	r3, #164	; 0xa4
 8011226:	227e      	movs	r2, #126	; 0x7e
 8011228:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 801122c:	4618      	mov	r0, r3
 801122e:	f7ff f92a 	bl	8010486 <_ZN8touchgfx8Drawable5setXYEss>
    KpaDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8011238:	2200      	movs	r2, #0
 801123a:	21dc      	movs	r1, #220	; 0xdc
 801123c:	20ff      	movs	r0, #255	; 0xff
 801123e:	f7ff fe65 	bl	8010f0c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011242:	4603      	mov	r3, r0
 8011244:	4619      	mov	r1, r3
 8011246:	4620      	mov	r0, r4
 8011248:	f7ff fba1 	bl	801098e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    KpaDescriptor.setLinespacing(0);
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	33a4      	adds	r3, #164	; 0xa4
 8011250:	2100      	movs	r1, #0
 8011252:	4618      	mov	r0, r3
 8011254:	f7ff fbee 	bl	8010a34 <_ZN8touchgfx8TextArea14setLinespacingEs>
    KpaDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID41));
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 801125e:	f107 031c 	add.w	r3, r7, #28
 8011262:	211b      	movs	r1, #27
 8011264:	4618      	mov	r0, r3
 8011266:	f7ff fb29 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 801126a:	8bb9      	ldrh	r1, [r7, #28]
 801126c:	4620      	mov	r0, r4
 801126e:	f006 f999 	bl	80175a4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CltDecsriptor.setXY(346, 126);
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	33d8      	adds	r3, #216	; 0xd8
 8011276:	227e      	movs	r2, #126	; 0x7e
 8011278:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 801127c:	4618      	mov	r0, r3
 801127e:	f7ff f902 	bl	8010486 <_ZN8touchgfx8Drawable5setXYEss>
    CltDecsriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 8011288:	2200      	movs	r2, #0
 801128a:	21dc      	movs	r1, #220	; 0xdc
 801128c:	20ff      	movs	r0, #255	; 0xff
 801128e:	f7ff fe3d 	bl	8010f0c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011292:	4603      	mov	r3, r0
 8011294:	4619      	mov	r1, r3
 8011296:	4620      	mov	r0, r4
 8011298:	f7ff fb79 	bl	801098e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CltDecsriptor.setLinespacing(0);
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	33d8      	adds	r3, #216	; 0xd8
 80112a0:	2100      	movs	r1, #0
 80112a2:	4618      	mov	r0, r3
 80112a4:	f7ff fbc6 	bl	8010a34 <_ZN8touchgfx8TextArea14setLinespacingEs>
    CltDecsriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID40));
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 80112ae:	f107 0320 	add.w	r3, r7, #32
 80112b2:	211a      	movs	r1, #26
 80112b4:	4618      	mov	r0, r3
 80112b6:	f7ff fb01 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 80112ba:	8c39      	ldrh	r1, [r7, #32]
 80112bc:	4620      	mov	r0, r4
 80112be:	f006 f971 	bl	80175a4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    LambdaDescriptor.setXY(38, 126);
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80112c8:	227e      	movs	r2, #126	; 0x7e
 80112ca:	2126      	movs	r1, #38	; 0x26
 80112cc:	4618      	mov	r0, r3
 80112ce:	f7ff f8da 	bl	8010486 <_ZN8touchgfx8Drawable5setXYEss>
    LambdaDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 80112d8:	2200      	movs	r2, #0
 80112da:	21dc      	movs	r1, #220	; 0xdc
 80112dc:	20ff      	movs	r0, #255	; 0xff
 80112de:	f7ff fe15 	bl	8010f0c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80112e2:	e001      	b.n	80112e8 <_ZN12MainViewBaseC1Ev+0x388>
 80112e4:	080266cc 	.word	0x080266cc
 80112e8:	4603      	mov	r3, r0
 80112ea:	4619      	mov	r1, r3
 80112ec:	4620      	mov	r0, r4
 80112ee:	f7ff fb4e 	bl	801098e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    LambdaDescriptor.setLinespacing(0);
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80112f8:	2100      	movs	r1, #0
 80112fa:	4618      	mov	r0, r3
 80112fc:	f7ff fb9a 	bl	8010a34 <_ZN8touchgfx8TextArea14setLinespacingEs>
    LambdaDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID33));
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 8011306:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801130a:	2114      	movs	r1, #20
 801130c:	4618      	mov	r0, r3
 801130e:	f7ff fad5 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 8011312:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8011314:	4620      	mov	r0, r4
 8011316:	f006 f945 	bl	80175a4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TrgtDescriptor.setXY(119, 126);
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8011320:	227e      	movs	r2, #126	; 0x7e
 8011322:	2177      	movs	r1, #119	; 0x77
 8011324:	4618      	mov	r0, r3
 8011326:	f7ff f8ae 	bl	8010486 <_ZN8touchgfx8Drawable5setXYEss>
    TrgtDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8011330:	2200      	movs	r2, #0
 8011332:	21dc      	movs	r1, #220	; 0xdc
 8011334:	20ff      	movs	r0, #255	; 0xff
 8011336:	f7ff fde9 	bl	8010f0c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801133a:	4603      	mov	r3, r0
 801133c:	4619      	mov	r1, r3
 801133e:	4620      	mov	r0, r4
 8011340:	f7ff fb25 	bl	801098e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TrgtDescriptor.setLinespacing(0);
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 801134a:	2100      	movs	r1, #0
 801134c:	4618      	mov	r0, r3
 801134e:	f7ff fb71 	bl	8010a34 <_ZN8touchgfx8TextArea14setLinespacingEs>
    TrgtDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID32));
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8011358:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801135c:	2113      	movs	r1, #19
 801135e:	4618      	mov	r0, r3
 8011360:	f7ff faac 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 8011364:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8011366:	4620      	mov	r0, r4
 8011368:	f006 f91c 	bl	80175a4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    LambdaValue.setPosition(24, 91, 60, 35);
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	f503 70ba 	add.w	r0, r3, #372	; 0x174
 8011372:	2323      	movs	r3, #35	; 0x23
 8011374:	9300      	str	r3, [sp, #0]
 8011376:	233c      	movs	r3, #60	; 0x3c
 8011378:	225b      	movs	r2, #91	; 0x5b
 801137a:	2118      	movs	r1, #24
 801137c:	f7ff f838 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
    LambdaValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	f503 74ba 	add.w	r4, r3, #372	; 0x174
 8011386:	22ff      	movs	r2, #255	; 0xff
 8011388:	21ff      	movs	r1, #255	; 0xff
 801138a:	20ff      	movs	r0, #255	; 0xff
 801138c:	f7ff fdbe 	bl	8010f0c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011390:	4603      	mov	r3, r0
 8011392:	4619      	mov	r1, r3
 8011394:	4620      	mov	r0, r4
 8011396:	f7ff fafa 	bl	801098e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    LambdaValue.setLinespacing(0);
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 80113a0:	2100      	movs	r1, #0
 80113a2:	4618      	mov	r0, r3
 80113a4:	f7ff fb46 	bl	8010a34 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(LambdaValueBuffer, LAMBDAVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID10).getText());
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	f603 2454 	addw	r4, r3, #2644	; 0xa54
 80113ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80113b2:	2103      	movs	r1, #3
 80113b4:	4618      	mov	r0, r3
 80113b6:	f7ff fa81 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 80113ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80113be:	4618      	mov	r0, r3
 80113c0:	f7ff fa8c 	bl	80108dc <_ZNK8touchgfx9TypedText7getTextEv>
 80113c4:	4603      	mov	r3, r0
 80113c6:	4ae1      	ldr	r2, [pc, #900]	; (801174c <_ZN12MainViewBaseC1Ev+0x7ec>)
 80113c8:	2105      	movs	r1, #5
 80113ca:	4620      	mov	r0, r4
 80113cc:	f009 fc94 	bl	801acf8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    LambdaValue.setWildcard(LambdaValueBuffer);
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	f503 72ba 	add.w	r2, r3, #372	; 0x174
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 80113dc:	4619      	mov	r1, r3
 80113de:	4610      	mov	r0, r2
 80113e0:	f7ff fbb0 	bl	8010b44 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    LambdaValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID9));
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	f503 74ba 	add.w	r4, r3, #372	; 0x174
 80113ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80113ee:	2102      	movs	r1, #2
 80113f0:	4618      	mov	r0, r3
 80113f2:	f7ff fa63 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 80113f6:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 80113f8:	4620      	mov	r0, r4
 80113fa:	f006 f8d3 	bl	80175a4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TrgtValue.setPosition(104, 91, 60, 35);
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	f503 70d6 	add.w	r0, r3, #428	; 0x1ac
 8011404:	2323      	movs	r3, #35	; 0x23
 8011406:	9300      	str	r3, [sp, #0]
 8011408:	233c      	movs	r3, #60	; 0x3c
 801140a:	225b      	movs	r2, #91	; 0x5b
 801140c:	2168      	movs	r1, #104	; 0x68
 801140e:	f7fe ffef 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
    TrgtValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	f503 74d6 	add.w	r4, r3, #428	; 0x1ac
 8011418:	22ff      	movs	r2, #255	; 0xff
 801141a:	21ff      	movs	r1, #255	; 0xff
 801141c:	20ff      	movs	r0, #255	; 0xff
 801141e:	f7ff fd75 	bl	8010f0c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011422:	4603      	mov	r3, r0
 8011424:	4619      	mov	r1, r3
 8011426:	4620      	mov	r0, r4
 8011428:	f7ff fab1 	bl	801098e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TrgtValue.setLinespacing(0);
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8011432:	2100      	movs	r1, #0
 8011434:	4618      	mov	r0, r3
 8011436:	f7ff fafd 	bl	8010a34 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(TrgtValueBuffer, TRGTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID8).getText());
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	f603 245e 	addw	r4, r3, #2654	; 0xa5e
 8011440:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011444:	2101      	movs	r1, #1
 8011446:	4618      	mov	r0, r3
 8011448:	f7ff fa38 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 801144c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011450:	4618      	mov	r0, r3
 8011452:	f7ff fa43 	bl	80108dc <_ZNK8touchgfx9TypedText7getTextEv>
 8011456:	4603      	mov	r3, r0
 8011458:	4abc      	ldr	r2, [pc, #752]	; (801174c <_ZN12MainViewBaseC1Ev+0x7ec>)
 801145a:	2105      	movs	r1, #5
 801145c:	4620      	mov	r0, r4
 801145e:	f009 fc4b 	bl	801acf8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    TrgtValue.setWildcard(TrgtValueBuffer);
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	f503 72d6 	add.w	r2, r3, #428	; 0x1ac
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	f603 235e 	addw	r3, r3, #2654	; 0xa5e
 801146e:	4619      	mov	r1, r3
 8011470:	4610      	mov	r0, r2
 8011472:	f7ff fb67 	bl	8010b44 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    TrgtValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID7));
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	f503 74d6 	add.w	r4, r3, #428	; 0x1ac
 801147c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011480:	2100      	movs	r1, #0
 8011482:	4618      	mov	r0, r3
 8011484:	f7ff fa1a 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 8011488:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 801148a:	4620      	mov	r0, r4
 801148c:	f006 f88a 	bl	80175a4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    backgroundImage.setXY(179, 63);
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011496:	223f      	movs	r2, #63	; 0x3f
 8011498:	21b3      	movs	r1, #179	; 0xb3
 801149a:	4618      	mov	r0, r3
 801149c:	f7fe fff3 	bl	8010486 <_ZN8touchgfx8Drawable5setXYEss>
    backgroundImage.setVisible(false);
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80114a6:	2100      	movs	r1, #0
 80114a8:	4618      	mov	r0, r3
 80114aa:	f7ff f85d 	bl	8010568 <_ZN8touchgfx8Drawable10setVisibleEb>

    rpm1.setPosition(54, 63, 18, 14);
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	f503 7004 	add.w	r0, r3, #528	; 0x210
 80114b4:	230e      	movs	r3, #14
 80114b6:	9300      	str	r3, [sp, #0]
 80114b8:	2312      	movs	r3, #18
 80114ba:	223f      	movs	r2, #63	; 0x3f
 80114bc:	2136      	movs	r1, #54	; 0x36
 80114be:	f7fe ff97 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	f503 7404 	add.w	r4, r3, #528	; 0x210
 80114c8:	22ff      	movs	r2, #255	; 0xff
 80114ca:	21ff      	movs	r1, #255	; 0xff
 80114cc:	20ff      	movs	r0, #255	; 0xff
 80114ce:	f7ff fd1d 	bl	8010f0c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80114d2:	4603      	mov	r3, r0
 80114d4:	4619      	mov	r1, r3
 80114d6:	4620      	mov	r0, r4
 80114d8:	f7ff fa59 	bl	801098e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm1.setLinespacing(0);
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80114e2:	2100      	movs	r1, #0
 80114e4:	4618      	mov	r0, r3
 80114e6:	f7ff faa5 	bl	8010a34 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm1Buffer, RPM1_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID60).getText());
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	f603 2468 	addw	r4, r3, #2664	; 0xa68
 80114f0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80114f4:	2129      	movs	r1, #41	; 0x29
 80114f6:	4618      	mov	r0, r3
 80114f8:	f7ff f9e0 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 80114fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011500:	4618      	mov	r0, r3
 8011502:	f7ff f9eb 	bl	80108dc <_ZNK8touchgfx9TypedText7getTextEv>
 8011506:	4603      	mov	r3, r0
 8011508:	4a90      	ldr	r2, [pc, #576]	; (801174c <_ZN12MainViewBaseC1Ev+0x7ec>)
 801150a:	2102      	movs	r1, #2
 801150c:	4620      	mov	r0, r4
 801150e:	f009 fbf3 	bl	801acf8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm1.setWildcard(rpm1Buffer);
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	f603 2368 	addw	r3, r3, #2664	; 0xa68
 801151e:	4619      	mov	r1, r3
 8011520:	4610      	mov	r0, r2
 8011522:	f7ff fb0f 	bl	8010b44 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID11));
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	f503 7404 	add.w	r4, r3, #528	; 0x210
 801152c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011530:	2104      	movs	r1, #4
 8011532:	4618      	mov	r0, r3
 8011534:	f7ff f9c2 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 8011538:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 801153c:	4620      	mov	r0, r4
 801153e:	f006 f831 	bl	80175a4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm2.setPosition(115, 63, 18, 14);
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	f503 7012 	add.w	r0, r3, #584	; 0x248
 8011548:	230e      	movs	r3, #14
 801154a:	9300      	str	r3, [sp, #0]
 801154c:	2312      	movs	r3, #18
 801154e:	223f      	movs	r2, #63	; 0x3f
 8011550:	2173      	movs	r1, #115	; 0x73
 8011552:	f7fe ff4d 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm2.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	f503 7412 	add.w	r4, r3, #584	; 0x248
 801155c:	22ff      	movs	r2, #255	; 0xff
 801155e:	21ff      	movs	r1, #255	; 0xff
 8011560:	20ff      	movs	r0, #255	; 0xff
 8011562:	f7ff fcd3 	bl	8010f0c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011566:	4603      	mov	r3, r0
 8011568:	4619      	mov	r1, r3
 801156a:	4620      	mov	r0, r4
 801156c:	f7ff fa0f 	bl	801098e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm2.setLinespacing(0);
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8011576:	2100      	movs	r1, #0
 8011578:	4618      	mov	r0, r3
 801157a:	f7ff fa5b 	bl	8010a34 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm2Buffer, RPM2_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID61).getText());
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	f603 246c 	addw	r4, r3, #2668	; 0xa6c
 8011584:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011588:	212a      	movs	r1, #42	; 0x2a
 801158a:	4618      	mov	r0, r3
 801158c:	f7ff f996 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 8011590:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011594:	4618      	mov	r0, r3
 8011596:	f7ff f9a1 	bl	80108dc <_ZNK8touchgfx9TypedText7getTextEv>
 801159a:	4603      	mov	r3, r0
 801159c:	4a6b      	ldr	r2, [pc, #428]	; (801174c <_ZN12MainViewBaseC1Ev+0x7ec>)
 801159e:	2102      	movs	r1, #2
 80115a0:	4620      	mov	r0, r4
 80115a2:	f009 fba9 	bl	801acf8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm2.setWildcard(rpm2Buffer);
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	f503 7212 	add.w	r2, r3, #584	; 0x248
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	f603 236c 	addw	r3, r3, #2668	; 0xa6c
 80115b2:	4619      	mov	r1, r3
 80115b4:	4610      	mov	r0, r2
 80115b6:	f7ff fac5 	bl	8010b44 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm2.setTypedText(touchgfx::TypedText(T_SINGLEUSEID12));
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	f503 7412 	add.w	r4, r3, #584	; 0x248
 80115c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80115c4:	2105      	movs	r1, #5
 80115c6:	4618      	mov	r0, r3
 80115c8:	f7ff f978 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 80115cc:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 80115d0:	4620      	mov	r0, r4
 80115d2:	f005 ffe7 	bl	80175a4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm3.setPosition(173, 62, 18, 14);
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	f503 7020 	add.w	r0, r3, #640	; 0x280
 80115dc:	230e      	movs	r3, #14
 80115de:	9300      	str	r3, [sp, #0]
 80115e0:	2312      	movs	r3, #18
 80115e2:	223e      	movs	r2, #62	; 0x3e
 80115e4:	21ad      	movs	r1, #173	; 0xad
 80115e6:	f7fe ff03 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm3.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	f503 7420 	add.w	r4, r3, #640	; 0x280
 80115f0:	22ff      	movs	r2, #255	; 0xff
 80115f2:	21ff      	movs	r1, #255	; 0xff
 80115f4:	20ff      	movs	r0, #255	; 0xff
 80115f6:	f7ff fc89 	bl	8010f0c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80115fa:	4603      	mov	r3, r0
 80115fc:	4619      	mov	r1, r3
 80115fe:	4620      	mov	r0, r4
 8011600:	f7ff f9c5 	bl	801098e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm3.setLinespacing(0);
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	f503 7320 	add.w	r3, r3, #640	; 0x280
 801160a:	2100      	movs	r1, #0
 801160c:	4618      	mov	r0, r3
 801160e:	f7ff fa11 	bl	8010a34 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm3Buffer, RPM3_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID62).getText());
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	f503 6427 	add.w	r4, r3, #2672	; 0xa70
 8011618:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801161c:	212b      	movs	r1, #43	; 0x2b
 801161e:	4618      	mov	r0, r3
 8011620:	f7ff f94c 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 8011624:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011628:	4618      	mov	r0, r3
 801162a:	f7ff f957 	bl	80108dc <_ZNK8touchgfx9TypedText7getTextEv>
 801162e:	4603      	mov	r3, r0
 8011630:	4a46      	ldr	r2, [pc, #280]	; (801174c <_ZN12MainViewBaseC1Ev+0x7ec>)
 8011632:	2102      	movs	r1, #2
 8011634:	4620      	mov	r0, r4
 8011636:	f009 fb5f 	bl	801acf8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm3.setWildcard(rpm3Buffer);
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	f503 7220 	add.w	r2, r3, #640	; 0x280
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	f503 6327 	add.w	r3, r3, #2672	; 0xa70
 8011646:	4619      	mov	r1, r3
 8011648:	4610      	mov	r0, r2
 801164a:	f7ff fa7b 	bl	8010b44 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm3.setTypedText(touchgfx::TypedText(T_SINGLEUSEID13));
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	f503 7420 	add.w	r4, r3, #640	; 0x280
 8011654:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011658:	2106      	movs	r1, #6
 801165a:	4618      	mov	r0, r3
 801165c:	f7ff f92e 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 8011660:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8011664:	4620      	mov	r0, r4
 8011666:	f005 ff9d 	bl	80175a4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm4.setPosition(231, 62, 18, 14);
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	f503 702e 	add.w	r0, r3, #696	; 0x2b8
 8011670:	230e      	movs	r3, #14
 8011672:	9300      	str	r3, [sp, #0]
 8011674:	2312      	movs	r3, #18
 8011676:	223e      	movs	r2, #62	; 0x3e
 8011678:	21e7      	movs	r1, #231	; 0xe7
 801167a:	f7fe feb9 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm4.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	f503 742e 	add.w	r4, r3, #696	; 0x2b8
 8011684:	22ff      	movs	r2, #255	; 0xff
 8011686:	21ff      	movs	r1, #255	; 0xff
 8011688:	20ff      	movs	r0, #255	; 0xff
 801168a:	f7ff fc3f 	bl	8010f0c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801168e:	4603      	mov	r3, r0
 8011690:	4619      	mov	r1, r3
 8011692:	4620      	mov	r0, r4
 8011694:	f7ff f97b 	bl	801098e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm4.setLinespacing(0);
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 801169e:	2100      	movs	r1, #0
 80116a0:	4618      	mov	r0, r3
 80116a2:	f7ff f9c7 	bl	8010a34 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm4Buffer, RPM4_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID63).getText());
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	f603 2474 	addw	r4, r3, #2676	; 0xa74
 80116ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80116b0:	212c      	movs	r1, #44	; 0x2c
 80116b2:	4618      	mov	r0, r3
 80116b4:	f7ff f902 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 80116b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80116bc:	4618      	mov	r0, r3
 80116be:	f7ff f90d 	bl	80108dc <_ZNK8touchgfx9TypedText7getTextEv>
 80116c2:	4603      	mov	r3, r0
 80116c4:	4a21      	ldr	r2, [pc, #132]	; (801174c <_ZN12MainViewBaseC1Ev+0x7ec>)
 80116c6:	2102      	movs	r1, #2
 80116c8:	4620      	mov	r0, r4
 80116ca:	f009 fb15 	bl	801acf8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm4.setWildcard(rpm4Buffer);
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	f503 722e 	add.w	r2, r3, #696	; 0x2b8
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	f603 2374 	addw	r3, r3, #2676	; 0xa74
 80116da:	4619      	mov	r1, r3
 80116dc:	4610      	mov	r0, r2
 80116de:	f7ff fa31 	bl	8010b44 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm4.setTypedText(touchgfx::TypedText(T_SINGLEUSEID14));
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	f503 742e 	add.w	r4, r3, #696	; 0x2b8
 80116e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80116ec:	2107      	movs	r1, #7
 80116ee:	4618      	mov	r0, r3
 80116f0:	f7ff f8e4 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 80116f4:	f8b7 1058 	ldrh.w	r1, [r7, #88]	; 0x58
 80116f8:	4620      	mov	r0, r4
 80116fa:	f005 ff53 	bl	80175a4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm5.setPosition(292, 63, 18, 14);
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	f503 703c 	add.w	r0, r3, #752	; 0x2f0
 8011704:	230e      	movs	r3, #14
 8011706:	9300      	str	r3, [sp, #0]
 8011708:	2312      	movs	r3, #18
 801170a:	223f      	movs	r2, #63	; 0x3f
 801170c:	f44f 7192 	mov.w	r1, #292	; 0x124
 8011710:	f7fe fe6e 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm5.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	f503 743c 	add.w	r4, r3, #752	; 0x2f0
 801171a:	22ff      	movs	r2, #255	; 0xff
 801171c:	21ff      	movs	r1, #255	; 0xff
 801171e:	20ff      	movs	r0, #255	; 0xff
 8011720:	f7ff fbf4 	bl	8010f0c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011724:	4603      	mov	r3, r0
 8011726:	4619      	mov	r1, r3
 8011728:	4620      	mov	r0, r4
 801172a:	f7ff f930 	bl	801098e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm5.setLinespacing(0);
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 8011734:	2100      	movs	r1, #0
 8011736:	4618      	mov	r0, r3
 8011738:	f7ff f97c 	bl	8010a34 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm5Buffer, RPM5_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID64).getText());
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	f603 2478 	addw	r4, r3, #2680	; 0xa78
 8011742:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8011746:	212d      	movs	r1, #45	; 0x2d
 8011748:	4618      	mov	r0, r3
 801174a:	e001      	b.n	8011750 <_ZN12MainViewBaseC1Ev+0x7f0>
 801174c:	08026130 	.word	0x08026130
 8011750:	f7ff f8b4 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 8011754:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8011758:	4618      	mov	r0, r3
 801175a:	f7ff f8bf 	bl	80108dc <_ZNK8touchgfx9TypedText7getTextEv>
 801175e:	4603      	mov	r3, r0
 8011760:	4ae2      	ldr	r2, [pc, #904]	; (8011aec <_ZN12MainViewBaseC1Ev+0xb8c>)
 8011762:	2102      	movs	r1, #2
 8011764:	4620      	mov	r0, r4
 8011766:	f009 fac7 	bl	801acf8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm5.setWildcard(rpm5Buffer);
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	f503 723c 	add.w	r2, r3, #752	; 0x2f0
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	f603 2378 	addw	r3, r3, #2680	; 0xa78
 8011776:	4619      	mov	r1, r3
 8011778:	4610      	mov	r0, r2
 801177a:	f7ff f9e3 	bl	8010b44 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm5.setTypedText(touchgfx::TypedText(T_SINGLEUSEID15));
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	f503 743c 	add.w	r4, r3, #752	; 0x2f0
 8011784:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8011788:	2108      	movs	r1, #8
 801178a:	4618      	mov	r0, r3
 801178c:	f7ff f896 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 8011790:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 8011794:	4620      	mov	r0, r4
 8011796:	f005 ff05 	bl	80175a4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm6.setPosition(349, 63, 18, 14);
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	f503 704a 	add.w	r0, r3, #808	; 0x328
 80117a0:	230e      	movs	r3, #14
 80117a2:	9300      	str	r3, [sp, #0]
 80117a4:	2312      	movs	r3, #18
 80117a6:	223f      	movs	r2, #63	; 0x3f
 80117a8:	f240 115d 	movw	r1, #349	; 0x15d
 80117ac:	f7fe fe20 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm6.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	f503 744a 	add.w	r4, r3, #808	; 0x328
 80117b6:	22ff      	movs	r2, #255	; 0xff
 80117b8:	21ff      	movs	r1, #255	; 0xff
 80117ba:	20ff      	movs	r0, #255	; 0xff
 80117bc:	f7ff fba6 	bl	8010f0c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80117c0:	4603      	mov	r3, r0
 80117c2:	4619      	mov	r1, r3
 80117c4:	4620      	mov	r0, r4
 80117c6:	f7ff f8e2 	bl	801098e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm6.setLinespacing(0);
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	f503 734a 	add.w	r3, r3, #808	; 0x328
 80117d0:	2100      	movs	r1, #0
 80117d2:	4618      	mov	r0, r3
 80117d4:	f7ff f92e 	bl	8010a34 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm6Buffer, RPM6_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID65).getText());
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	f603 247c 	addw	r4, r3, #2684	; 0xa7c
 80117de:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80117e2:	212e      	movs	r1, #46	; 0x2e
 80117e4:	4618      	mov	r0, r3
 80117e6:	f7ff f869 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 80117ea:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80117ee:	4618      	mov	r0, r3
 80117f0:	f7ff f874 	bl	80108dc <_ZNK8touchgfx9TypedText7getTextEv>
 80117f4:	4603      	mov	r3, r0
 80117f6:	4abd      	ldr	r2, [pc, #756]	; (8011aec <_ZN12MainViewBaseC1Ev+0xb8c>)
 80117f8:	2102      	movs	r1, #2
 80117fa:	4620      	mov	r0, r4
 80117fc:	f009 fa7c 	bl	801acf8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm6.setWildcard(rpm6Buffer);
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	f503 724a 	add.w	r2, r3, #808	; 0x328
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	f603 237c 	addw	r3, r3, #2684	; 0xa7c
 801180c:	4619      	mov	r1, r3
 801180e:	4610      	mov	r0, r2
 8011810:	f7ff f998 	bl	8010b44 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm6.setTypedText(touchgfx::TypedText(T_SINGLEUSEID16));
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	f503 744a 	add.w	r4, r3, #808	; 0x328
 801181a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801181e:	2109      	movs	r1, #9
 8011820:	4618      	mov	r0, r3
 8011822:	f7ff f84b 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 8011826:	f8b7 1068 	ldrh.w	r1, [r7, #104]	; 0x68
 801182a:	4620      	mov	r0, r4
 801182c:	f005 feba 	bl	80175a4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm7.setPosition(411, 62, 18, 15);
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8011836:	230f      	movs	r3, #15
 8011838:	9300      	str	r3, [sp, #0]
 801183a:	2312      	movs	r3, #18
 801183c:	223e      	movs	r2, #62	; 0x3e
 801183e:	f240 119b 	movw	r1, #411	; 0x19b
 8011842:	f7fe fdd5 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm7.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	f503 7458 	add.w	r4, r3, #864	; 0x360
 801184c:	22ff      	movs	r2, #255	; 0xff
 801184e:	21ff      	movs	r1, #255	; 0xff
 8011850:	20ff      	movs	r0, #255	; 0xff
 8011852:	f7ff fb5b 	bl	8010f0c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011856:	4603      	mov	r3, r0
 8011858:	4619      	mov	r1, r3
 801185a:	4620      	mov	r0, r4
 801185c:	f7ff f897 	bl	801098e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm7.setLinespacing(0);
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8011866:	2100      	movs	r1, #0
 8011868:	4618      	mov	r0, r3
 801186a:	f7ff f8e3 	bl	8010a34 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm7Buffer, RPM7_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID66).getText());
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	f503 6428 	add.w	r4, r3, #2688	; 0xa80
 8011874:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8011878:	212f      	movs	r1, #47	; 0x2f
 801187a:	4618      	mov	r0, r3
 801187c:	f7ff f81e 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 8011880:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8011884:	4618      	mov	r0, r3
 8011886:	f7ff f829 	bl	80108dc <_ZNK8touchgfx9TypedText7getTextEv>
 801188a:	4603      	mov	r3, r0
 801188c:	4a97      	ldr	r2, [pc, #604]	; (8011aec <_ZN12MainViewBaseC1Ev+0xb8c>)
 801188e:	2102      	movs	r1, #2
 8011890:	4620      	mov	r0, r4
 8011892:	f009 fa31 	bl	801acf8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm7.setWildcard(rpm7Buffer);
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	f503 7258 	add.w	r2, r3, #864	; 0x360
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	f503 6328 	add.w	r3, r3, #2688	; 0xa80
 80118a2:	4619      	mov	r1, r3
 80118a4:	4610      	mov	r0, r2
 80118a6:	f7ff f94d 	bl	8010b44 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm7.setTypedText(touchgfx::TypedText(T_SINGLEUSEID17));
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	f503 7458 	add.w	r4, r3, #864	; 0x360
 80118b0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80118b4:	210a      	movs	r1, #10
 80118b6:	4618      	mov	r0, r3
 80118b8:	f7ff f800 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 80118bc:	f8b7 1070 	ldrh.w	r1, [r7, #112]	; 0x70
 80118c0:	4620      	mov	r0, r4
 80118c2:	f005 fe6f 	bl	80175a4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm8.setPosition(462, 62, 18, 14);
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	f503 7066 	add.w	r0, r3, #920	; 0x398
 80118cc:	230e      	movs	r3, #14
 80118ce:	9300      	str	r3, [sp, #0]
 80118d0:	2312      	movs	r3, #18
 80118d2:	223e      	movs	r2, #62	; 0x3e
 80118d4:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 80118d8:	f7fe fd8a 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm8.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	f503 7466 	add.w	r4, r3, #920	; 0x398
 80118e2:	22ff      	movs	r2, #255	; 0xff
 80118e4:	21ff      	movs	r1, #255	; 0xff
 80118e6:	20ff      	movs	r0, #255	; 0xff
 80118e8:	f7ff fb10 	bl	8010f0c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80118ec:	4603      	mov	r3, r0
 80118ee:	4619      	mov	r1, r3
 80118f0:	4620      	mov	r0, r4
 80118f2:	f7ff f84c 	bl	801098e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm8.setLinespacing(0);
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	f503 7366 	add.w	r3, r3, #920	; 0x398
 80118fc:	2100      	movs	r1, #0
 80118fe:	4618      	mov	r0, r3
 8011900:	f7ff f898 	bl	8010a34 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm8Buffer, RPM8_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID67).getText());
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	f603 2484 	addw	r4, r3, #2692	; 0xa84
 801190a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801190e:	2130      	movs	r1, #48	; 0x30
 8011910:	4618      	mov	r0, r3
 8011912:	f7fe ffd3 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 8011916:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801191a:	4618      	mov	r0, r3
 801191c:	f7fe ffde 	bl	80108dc <_ZNK8touchgfx9TypedText7getTextEv>
 8011920:	4603      	mov	r3, r0
 8011922:	4a72      	ldr	r2, [pc, #456]	; (8011aec <_ZN12MainViewBaseC1Ev+0xb8c>)
 8011924:	2102      	movs	r1, #2
 8011926:	4620      	mov	r0, r4
 8011928:	f009 f9e6 	bl	801acf8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm8.setWildcard(rpm8Buffer);
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	f503 7266 	add.w	r2, r3, #920	; 0x398
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	f603 2384 	addw	r3, r3, #2692	; 0xa84
 8011938:	4619      	mov	r1, r3
 801193a:	4610      	mov	r0, r2
 801193c:	f7ff f902 	bl	8010b44 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm8.setTypedText(touchgfx::TypedText(T_SINGLEUSEID18));
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	f503 7466 	add.w	r4, r3, #920	; 0x398
 8011946:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801194a:	210b      	movs	r1, #11
 801194c:	4618      	mov	r0, r3
 801194e:	f7fe ffb5 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 8011952:	f8b7 1078 	ldrh.w	r1, [r7, #120]	; 0x78
 8011956:	4620      	mov	r0, r4
 8011958:	f005 fe24 	bl	80175a4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    line11.setPosition(-2, 58, 490, 5);
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	f503 7074 	add.w	r0, r3, #976	; 0x3d0
 8011962:	2305      	movs	r3, #5
 8011964:	9300      	str	r3, [sp, #0]
 8011966:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
 801196a:	223a      	movs	r2, #58	; 0x3a
 801196c:	f06f 0101 	mvn.w	r1, #1
 8011970:	f7fe fd3e 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
    line11Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	f203 4444 	addw	r4, r3, #1092	; 0x444
 801197a:	22ff      	movs	r2, #255	; 0xff
 801197c:	21ff      	movs	r1, #255	; 0xff
 801197e:	20ff      	movs	r0, #255	; 0xff
 8011980:	f7ff fac4 	bl	8010f0c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011984:	4603      	mov	r3, r0
 8011986:	22ff      	movs	r2, #255	; 0xff
 8011988:	4619      	mov	r1, r3
 801198a:	4620      	mov	r0, r4
 801198c:	f005 f8db 	bl	8016b46 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line11.setPainter(line11Painter);
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	f503 7274 	add.w	r2, r3, #976	; 0x3d0
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	f203 4344 	addw	r3, r3, #1092	; 0x444
 801199c:	4619      	mov	r1, r3
 801199e:	4610      	mov	r0, r2
 80119a0:	f005 f93a 	bl	8016c18 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line11.setStart(0, 3);
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 80119aa:	2203      	movs	r2, #3
 80119ac:	2100      	movs	r1, #0
 80119ae:	4618      	mov	r0, r3
 80119b0:	f000 fe0c 	bl	80125cc <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line11.setEnd(490, 3);
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 80119ba:	2203      	movs	r2, #3
 80119bc:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 80119c0:	4618      	mov	r0, r3
 80119c2:	f000 fe29 	bl	8012618 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line11.setLineWidth(2);
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 80119cc:	2102      	movs	r1, #2
 80119ce:	4618      	mov	r0, r3
 80119d0:	f000 fe48 	bl	8012664 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line11.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 80119da:	2101      	movs	r1, #1
 80119dc:	4618      	mov	r0, r3
 80119de:	f005 fc35 	bl	801724c <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    IATDescriptor.setXY(46, 188);
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 80119e8:	22bc      	movs	r2, #188	; 0xbc
 80119ea:	212e      	movs	r1, #46	; 0x2e
 80119ec:	4618      	mov	r0, r3
 80119ee:	f7fe fd4a 	bl	8010486 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	f203 445c 	addw	r4, r3, #1116	; 0x45c
 80119f8:	2200      	movs	r2, #0
 80119fa:	21dc      	movs	r1, #220	; 0xdc
 80119fc:	20ff      	movs	r0, #255	; 0xff
 80119fe:	f7ff fa85 	bl	8010f0c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011a02:	4603      	mov	r3, r0
 8011a04:	4619      	mov	r1, r3
 8011a06:	4620      	mov	r0, r4
 8011a08:	f7fe ffc1 	bl	801098e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor.setLinespacing(0);
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 8011a12:	2100      	movs	r1, #0
 8011a14:	4618      	mov	r0, r3
 8011a16:	f7ff f80d 	bl	8010a34 <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID30));
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	f203 445c 	addw	r4, r3, #1116	; 0x45c
 8011a20:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8011a24:	2111      	movs	r1, #17
 8011a26:	4618      	mov	r0, r3
 8011a28:	f7fe ff48 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 8011a2c:	f8b7 107c 	ldrh.w	r1, [r7, #124]	; 0x7c
 8011a30:	4620      	mov	r0, r4
 8011a32:	f005 fdb7 	bl	80175a4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    ECTDescriptor.setXY(124, 188);
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8011a3c:	22bc      	movs	r2, #188	; 0xbc
 8011a3e:	217c      	movs	r1, #124	; 0x7c
 8011a40:	4618      	mov	r0, r3
 8011a42:	f7fe fd20 	bl	8010486 <_ZN8touchgfx8Drawable5setXYEss>
    ECTDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	f503 6492 	add.w	r4, r3, #1168	; 0x490
 8011a4c:	2200      	movs	r2, #0
 8011a4e:	21dc      	movs	r1, #220	; 0xdc
 8011a50:	20ff      	movs	r0, #255	; 0xff
 8011a52:	f7ff fa5b 	bl	8010f0c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011a56:	4603      	mov	r3, r0
 8011a58:	4619      	mov	r1, r3
 8011a5a:	4620      	mov	r0, r4
 8011a5c:	f7fe ff97 	bl	801098e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    ECTDescriptor.setLinespacing(0);
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8011a66:	2100      	movs	r1, #0
 8011a68:	4618      	mov	r0, r3
 8011a6a:	f7fe ffe3 	bl	8010a34 <_ZN8touchgfx8TextArea14setLinespacingEs>
    ECTDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID31));
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	f503 6492 	add.w	r4, r3, #1168	; 0x490
 8011a74:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011a78:	2112      	movs	r1, #18
 8011a7a:	4618      	mov	r0, r3
 8011a7c:	f7fe ff1e 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 8011a80:	f8b7 1080 	ldrh.w	r1, [r7, #128]	; 0x80
 8011a84:	4620      	mov	r0, r4
 8011a86:	f005 fd8d 	bl	80175a4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATValue.setPosition(26, 153, 60, 35);
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	f203 40c4 	addw	r0, r3, #1220	; 0x4c4
 8011a90:	2323      	movs	r3, #35	; 0x23
 8011a92:	9300      	str	r3, [sp, #0]
 8011a94:	233c      	movs	r3, #60	; 0x3c
 8011a96:	2299      	movs	r2, #153	; 0x99
 8011a98:	211a      	movs	r1, #26
 8011a9a:	f7fe fca9 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
    IATValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	f203 44c4 	addw	r4, r3, #1220	; 0x4c4
 8011aa4:	22ff      	movs	r2, #255	; 0xff
 8011aa6:	21ff      	movs	r1, #255	; 0xff
 8011aa8:	20ff      	movs	r0, #255	; 0xff
 8011aaa:	f7ff fa2f 	bl	8010f0c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011aae:	4603      	mov	r3, r0
 8011ab0:	4619      	mov	r1, r3
 8011ab2:	4620      	mov	r0, r4
 8011ab4:	f7fe ff6b 	bl	801098e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATValue.setLinespacing(0);
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8011abe:	2100      	movs	r1, #0
 8011ac0:	4618      	mov	r0, r3
 8011ac2:	f7fe ffb7 	bl	8010a34 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(IATValueBuffer, IATVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID23).getText());
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	f603 2488 	addw	r4, r3, #2696	; 0xa88
 8011acc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8011ad0:	210e      	movs	r1, #14
 8011ad2:	4618      	mov	r0, r3
 8011ad4:	f7fe fef2 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 8011ad8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8011adc:	4618      	mov	r0, r3
 8011ade:	f7fe fefd 	bl	80108dc <_ZNK8touchgfx9TypedText7getTextEv>
 8011ae2:	4603      	mov	r3, r0
 8011ae4:	4a01      	ldr	r2, [pc, #4]	; (8011aec <_ZN12MainViewBaseC1Ev+0xb8c>)
 8011ae6:	2105      	movs	r1, #5
 8011ae8:	4620      	mov	r0, r4
 8011aea:	e001      	b.n	8011af0 <_ZN12MainViewBaseC1Ev+0xb90>
 8011aec:	08026130 	.word	0x08026130
 8011af0:	f009 f902 	bl	801acf8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    IATValue.setWildcard(IATValueBuffer);
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	f203 42c4 	addw	r2, r3, #1220	; 0x4c4
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	f603 2388 	addw	r3, r3, #2696	; 0xa88
 8011b00:	4619      	mov	r1, r3
 8011b02:	4610      	mov	r0, r2
 8011b04:	f7ff f81e 	bl	8010b44 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    IATValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID22));
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	f203 44c4 	addw	r4, r3, #1220	; 0x4c4
 8011b0e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8011b12:	210d      	movs	r1, #13
 8011b14:	4618      	mov	r0, r3
 8011b16:	f7fe fed1 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 8011b1a:	f8b7 1088 	ldrh.w	r1, [r7, #136]	; 0x88
 8011b1e:	4620      	mov	r0, r4
 8011b20:	f005 fd40 	bl	80175a4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    EGTValue.setPosition(104, 153, 60, 35);
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	f203 40fc 	addw	r0, r3, #1276	; 0x4fc
 8011b2a:	2323      	movs	r3, #35	; 0x23
 8011b2c:	9300      	str	r3, [sp, #0]
 8011b2e:	233c      	movs	r3, #60	; 0x3c
 8011b30:	2299      	movs	r2, #153	; 0x99
 8011b32:	2168      	movs	r1, #104	; 0x68
 8011b34:	f7fe fc5c 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
    EGTValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	f203 44fc 	addw	r4, r3, #1276	; 0x4fc
 8011b3e:	22ff      	movs	r2, #255	; 0xff
 8011b40:	21ff      	movs	r1, #255	; 0xff
 8011b42:	20ff      	movs	r0, #255	; 0xff
 8011b44:	f7ff f9e2 	bl	8010f0c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011b48:	4603      	mov	r3, r0
 8011b4a:	4619      	mov	r1, r3
 8011b4c:	4620      	mov	r0, r4
 8011b4e:	f7fe ff1e 	bl	801098e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    EGTValue.setLinespacing(0);
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	f203 43fc 	addw	r3, r3, #1276	; 0x4fc
 8011b58:	2100      	movs	r1, #0
 8011b5a:	4618      	mov	r0, r3
 8011b5c:	f7fe ff6a 	bl	8010a34 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(EGTValueBuffer, EGTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID25).getText());
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	f603 2492 	addw	r4, r3, #2706	; 0xa92
 8011b66:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8011b6a:	2110      	movs	r1, #16
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	f7fe fea5 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 8011b72:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8011b76:	4618      	mov	r0, r3
 8011b78:	f7fe feb0 	bl	80108dc <_ZNK8touchgfx9TypedText7getTextEv>
 8011b7c:	4603      	mov	r3, r0
 8011b7e:	4ae3      	ldr	r2, [pc, #908]	; (8011f0c <_ZN12MainViewBaseC1Ev+0xfac>)
 8011b80:	2105      	movs	r1, #5
 8011b82:	4620      	mov	r0, r4
 8011b84:	f009 f8b8 	bl	801acf8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    EGTValue.setWildcard(EGTValueBuffer);
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	f203 42fc 	addw	r2, r3, #1276	; 0x4fc
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	f603 2392 	addw	r3, r3, #2706	; 0xa92
 8011b94:	4619      	mov	r1, r3
 8011b96:	4610      	mov	r0, r2
 8011b98:	f7fe ffd4 	bl	8010b44 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    EGTValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID24));
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	f203 44fc 	addw	r4, r3, #1276	; 0x4fc
 8011ba2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8011ba6:	210f      	movs	r1, #15
 8011ba8:	4618      	mov	r0, r3
 8011baa:	f7fe fe87 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 8011bae:	f8b7 1090 	ldrh.w	r1, [r7, #144]	; 0x90
 8011bb2:	4620      	mov	r0, r4
 8011bb4:	f005 fcf6 	bl	80175a4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATDescriptor_1.setXY(343, 188);
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8011bbe:	22bc      	movs	r2, #188	; 0xbc
 8011bc0:	f240 1157 	movw	r1, #343	; 0x157
 8011bc4:	4618      	mov	r0, r3
 8011bc6:	f7fe fc5e 	bl	8010486 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	f203 5434 	addw	r4, r3, #1332	; 0x534
 8011bd0:	2200      	movs	r2, #0
 8011bd2:	21dc      	movs	r1, #220	; 0xdc
 8011bd4:	20ff      	movs	r0, #255	; 0xff
 8011bd6:	f7ff f999 	bl	8010f0c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011bda:	4603      	mov	r3, r0
 8011bdc:	4619      	mov	r1, r3
 8011bde:	4620      	mov	r0, r4
 8011be0:	f7fe fed5 	bl	801098e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor_1.setLinespacing(0);
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8011bea:	2100      	movs	r1, #0
 8011bec:	4618      	mov	r0, r3
 8011bee:	f7fe ff21 	bl	8010a34 <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID34));
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	f203 5434 	addw	r4, r3, #1332	; 0x534
 8011bf8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8011bfc:	2115      	movs	r1, #21
 8011bfe:	4618      	mov	r0, r3
 8011c00:	f7fe fe5c 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 8011c04:	f8b7 1094 	ldrh.w	r1, [r7, #148]	; 0x94
 8011c08:	4620      	mov	r0, r4
 8011c0a:	f005 fccb 	bl	80175a4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    ECTDescriptor_1.setXY(426, 188);
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8011c14:	22bc      	movs	r2, #188	; 0xbc
 8011c16:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011c1a:	4618      	mov	r0, r3
 8011c1c:	f7fe fc33 	bl	8010486 <_ZN8touchgfx8Drawable5setXYEss>
    ECTDescriptor_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	f503 64ad 	add.w	r4, r3, #1384	; 0x568
 8011c26:	2200      	movs	r2, #0
 8011c28:	21dc      	movs	r1, #220	; 0xdc
 8011c2a:	20ff      	movs	r0, #255	; 0xff
 8011c2c:	f7ff f96e 	bl	8010f0c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011c30:	4603      	mov	r3, r0
 8011c32:	4619      	mov	r1, r3
 8011c34:	4620      	mov	r0, r4
 8011c36:	f7fe feaa 	bl	801098e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    ECTDescriptor_1.setLinespacing(0);
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8011c40:	2100      	movs	r1, #0
 8011c42:	4618      	mov	r0, r3
 8011c44:	f7fe fef6 	bl	8010a34 <_ZN8touchgfx8TextArea14setLinespacingEs>
    ECTDescriptor_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID35));
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	f503 64ad 	add.w	r4, r3, #1384	; 0x568
 8011c4e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8011c52:	2116      	movs	r1, #22
 8011c54:	4618      	mov	r0, r3
 8011c56:	f7fe fe31 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 8011c5a:	f8b7 1098 	ldrh.w	r1, [r7, #152]	; 0x98
 8011c5e:	4620      	mov	r0, r4
 8011c60:	f005 fca0 	bl	80175a4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    OILTempValue.setPosition(328, 153, 60, 35);
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	f203 509c 	addw	r0, r3, #1436	; 0x59c
 8011c6a:	2323      	movs	r3, #35	; 0x23
 8011c6c:	9300      	str	r3, [sp, #0]
 8011c6e:	233c      	movs	r3, #60	; 0x3c
 8011c70:	2299      	movs	r2, #153	; 0x99
 8011c72:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8011c76:	f7fe fbbb 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
    OILTempValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	f203 549c 	addw	r4, r3, #1436	; 0x59c
 8011c80:	22ff      	movs	r2, #255	; 0xff
 8011c82:	21ff      	movs	r1, #255	; 0xff
 8011c84:	20ff      	movs	r0, #255	; 0xff
 8011c86:	f7ff f941 	bl	8010f0c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011c8a:	4603      	mov	r3, r0
 8011c8c:	4619      	mov	r1, r3
 8011c8e:	4620      	mov	r0, r4
 8011c90:	f7fe fe7d 	bl	801098e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    OILTempValue.setLinespacing(0);
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	f203 539c 	addw	r3, r3, #1436	; 0x59c
 8011c9a:	2100      	movs	r1, #0
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	f7fe fec9 	bl	8010a34 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(OILTempValueBuffer, OILTEMPVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID37).getText());
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	f603 249c 	addw	r4, r3, #2716	; 0xa9c
 8011ca8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8011cac:	2118      	movs	r1, #24
 8011cae:	4618      	mov	r0, r3
 8011cb0:	f7fe fe04 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 8011cb4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8011cb8:	4618      	mov	r0, r3
 8011cba:	f7fe fe0f 	bl	80108dc <_ZNK8touchgfx9TypedText7getTextEv>
 8011cbe:	4603      	mov	r3, r0
 8011cc0:	4a92      	ldr	r2, [pc, #584]	; (8011f0c <_ZN12MainViewBaseC1Ev+0xfac>)
 8011cc2:	2105      	movs	r1, #5
 8011cc4:	4620      	mov	r0, r4
 8011cc6:	f009 f817 	bl	801acf8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    OILTempValue.setWildcard(OILTempValueBuffer);
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	f203 529c 	addw	r2, r3, #1436	; 0x59c
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	f603 239c 	addw	r3, r3, #2716	; 0xa9c
 8011cd6:	4619      	mov	r1, r3
 8011cd8:	4610      	mov	r0, r2
 8011cda:	f7fe ff33 	bl	8010b44 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    OILTempValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID36));
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	f203 549c 	addw	r4, r3, #1436	; 0x59c
 8011ce4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8011ce8:	2117      	movs	r1, #23
 8011cea:	4618      	mov	r0, r3
 8011cec:	f7fe fde6 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 8011cf0:	f8b7 10a0 	ldrh.w	r1, [r7, #160]	; 0xa0
 8011cf4:	4620      	mov	r0, r4
 8011cf6:	f005 fc55 	bl	80175a4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    OILPressureValue.setPosition(411, 153, 60, 35);
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	f203 50d4 	addw	r0, r3, #1492	; 0x5d4
 8011d00:	2323      	movs	r3, #35	; 0x23
 8011d02:	9300      	str	r3, [sp, #0]
 8011d04:	233c      	movs	r3, #60	; 0x3c
 8011d06:	2299      	movs	r2, #153	; 0x99
 8011d08:	f240 119b 	movw	r1, #411	; 0x19b
 8011d0c:	f7fe fb70 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
    OILPressureValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	f203 54d4 	addw	r4, r3, #1492	; 0x5d4
 8011d16:	22ff      	movs	r2, #255	; 0xff
 8011d18:	21ff      	movs	r1, #255	; 0xff
 8011d1a:	20ff      	movs	r0, #255	; 0xff
 8011d1c:	f7ff f8f6 	bl	8010f0c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011d20:	4603      	mov	r3, r0
 8011d22:	4619      	mov	r1, r3
 8011d24:	4620      	mov	r0, r4
 8011d26:	f7fe fe32 	bl	801098e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    OILPressureValue.setLinespacing(0);
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	f203 53d4 	addw	r3, r3, #1492	; 0x5d4
 8011d30:	2100      	movs	r1, #0
 8011d32:	4618      	mov	r0, r3
 8011d34:	f7fe fe7e 	bl	8010a34 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(OILPressureValueBuffer, OILPRESSUREVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID57).getText());
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	f603 24a6 	addw	r4, r3, #2726	; 0xaa6
 8011d3e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8011d42:	2126      	movs	r1, #38	; 0x26
 8011d44:	4618      	mov	r0, r3
 8011d46:	f7fe fdb9 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 8011d4a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8011d4e:	4618      	mov	r0, r3
 8011d50:	f7fe fdc4 	bl	80108dc <_ZNK8touchgfx9TypedText7getTextEv>
 8011d54:	4603      	mov	r3, r0
 8011d56:	4a6d      	ldr	r2, [pc, #436]	; (8011f0c <_ZN12MainViewBaseC1Ev+0xfac>)
 8011d58:	2105      	movs	r1, #5
 8011d5a:	4620      	mov	r0, r4
 8011d5c:	f008 ffcc 	bl	801acf8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    OILPressureValue.setWildcard(OILPressureValueBuffer);
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	f203 52d4 	addw	r2, r3, #1492	; 0x5d4
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	f603 23a6 	addw	r3, r3, #2726	; 0xaa6
 8011d6c:	4619      	mov	r1, r3
 8011d6e:	4610      	mov	r0, r2
 8011d70:	f7fe fee8 	bl	8010b44 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    OILPressureValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID38));
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	f203 54d4 	addw	r4, r3, #1492	; 0x5d4
 8011d7a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8011d7e:	2119      	movs	r1, #25
 8011d80:	4618      	mov	r0, r3
 8011d82:	f7fe fd9b 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 8011d86:	f8b7 10a8 	ldrh.w	r1, [r7, #168]	; 0xa8
 8011d8a:	4620      	mov	r0, r4
 8011d8c:	f005 fc0a 	bl	80175a4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATDescriptor_1_1.setXY(407, 240);
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 8011d96:	22f0      	movs	r2, #240	; 0xf0
 8011d98:	f240 1197 	movw	r1, #407	; 0x197
 8011d9c:	4618      	mov	r0, r3
 8011d9e:	f7fe fb72 	bl	8010486 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor_1_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	f203 640c 	addw	r4, r3, #1548	; 0x60c
 8011da8:	2200      	movs	r2, #0
 8011daa:	21dc      	movs	r1, #220	; 0xdc
 8011dac:	20ff      	movs	r0, #255	; 0xff
 8011dae:	f7ff f8ad 	bl	8010f0c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011db2:	4603      	mov	r3, r0
 8011db4:	4619      	mov	r1, r3
 8011db6:	4620      	mov	r0, r4
 8011db8:	f7fe fde9 	bl	801098e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor_1_1.setLinespacing(0);
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 8011dc2:	2100      	movs	r1, #0
 8011dc4:	4618      	mov	r0, r3
 8011dc6:	f7fe fe35 	bl	8010a34 <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor_1_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID42));
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	f203 640c 	addw	r4, r3, #1548	; 0x60c
 8011dd0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8011dd4:	211c      	movs	r1, #28
 8011dd6:	4618      	mov	r0, r3
 8011dd8:	f7fe fd70 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 8011ddc:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 8011de0:	4620      	mov	r0, r4
 8011de2:	f005 fbdf 	bl	80175a4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TPSProgress.setXY(365, 226);
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8011dec:	22e2      	movs	r2, #226	; 0xe2
 8011dee:	f240 116d 	movw	r1, #365	; 0x16d
 8011df2:	4618      	mov	r0, r3
 8011df4:	f7fe fb47 	bl	8010486 <_ZN8touchgfx8Drawable5setXYEss>
    TPSProgress.setProgressIndicatorPosition(2, 2, 100, 10);
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	f503 60c8 	add.w	r0, r3, #1600	; 0x640
 8011dfe:	230a      	movs	r3, #10
 8011e00:	9300      	str	r3, [sp, #0]
 8011e02:	2364      	movs	r3, #100	; 0x64
 8011e04:	2202      	movs	r2, #2
 8011e06:	2102      	movs	r1, #2
 8011e08:	f003 f9cc 	bl	80151a4 <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>
    TPSProgress.setRange(0, 100);
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	f503 60c8 	add.w	r0, r3, #1600	; 0x640
 8011e12:	2300      	movs	r3, #0
 8011e14:	9300      	str	r3, [sp, #0]
 8011e16:	2300      	movs	r3, #0
 8011e18:	2264      	movs	r2, #100	; 0x64
 8011e1a:	2100      	movs	r1, #0
 8011e1c:	f003 fc40 	bl	80156a0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    TPSProgress.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8011e26:	2100      	movs	r1, #0
 8011e28:	4618      	mov	r0, r3
 8011e2a:	f003 fa1b 	bl	8015264 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    TPSProgress.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_SMALL_PROGRESS_INDICATOR_BG_SQUARE_0_DEGREES_ID));
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	f503 64c8 	add.w	r4, r3, #1600	; 0x640
 8011e34:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8011e38:	2100      	movs	r1, #0
 8011e3a:	4618      	mov	r0, r3
 8011e3c:	f7fe fa7a 	bl	8010334 <_ZN8touchgfx6BitmapC1Et>
 8011e40:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8011e44:	4619      	mov	r1, r3
 8011e46:	4620      	mov	r0, r4
 8011e48:	f003 fc1f 	bl	801568a <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    TPSProgress.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	f503 64c8 	add.w	r4, r3, #1600	; 0x640
 8011e52:	2200      	movs	r2, #0
 8011e54:	21dc      	movs	r1, #220	; 0xdc
 8011e56:	20ff      	movs	r0, #255	; 0xff
 8011e58:	f7ff f858 	bl	8010f0c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011e5c:	4603      	mov	r3, r0
 8011e5e:	4619      	mov	r1, r3
 8011e60:	4620      	mov	r0, r4
 8011e62:	f003 f949 	bl	80150f8 <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>
    TPSProgress.setValue(60);
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8011e6c:	213c      	movs	r1, #60	; 0x3c
 8011e6e:	4618      	mov	r0, r3
 8011e70:	f003 f9b0 	bl	80151d4 <_ZN8touchgfx11BoxProgress8setValueEi>

    line10.setPosition(14, 258, 180, 10);
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	f503 60e0 	add.w	r0, r3, #1792	; 0x700
 8011e7a:	230a      	movs	r3, #10
 8011e7c:	9300      	str	r3, [sp, #0]
 8011e7e:	23b4      	movs	r3, #180	; 0xb4
 8011e80:	f44f 7281 	mov.w	r2, #258	; 0x102
 8011e84:	210e      	movs	r1, #14
 8011e86:	f7fe fab3 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
    line10Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	f203 7474 	addw	r4, r3, #1908	; 0x774
 8011e90:	22ff      	movs	r2, #255	; 0xff
 8011e92:	21ff      	movs	r1, #255	; 0xff
 8011e94:	20ff      	movs	r0, #255	; 0xff
 8011e96:	f7ff f839 	bl	8010f0c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011e9a:	4603      	mov	r3, r0
 8011e9c:	22ff      	movs	r2, #255	; 0xff
 8011e9e:	4619      	mov	r1, r3
 8011ea0:	4620      	mov	r0, r4
 8011ea2:	f004 fe50 	bl	8016b46 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line10.setPainter(line10Painter);
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	f503 62e0 	add.w	r2, r3, #1792	; 0x700
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	f203 7374 	addw	r3, r3, #1908	; 0x774
 8011eb2:	4619      	mov	r1, r3
 8011eb4:	4610      	mov	r0, r2
 8011eb6:	f004 feaf 	bl	8016c18 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line10.setStart(0, 5);
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8011ec0:	2205      	movs	r2, #5
 8011ec2:	2100      	movs	r1, #0
 8011ec4:	4618      	mov	r0, r3
 8011ec6:	f000 fb81 	bl	80125cc <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line10.setEnd(180, 5);
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8011ed0:	2205      	movs	r2, #5
 8011ed2:	21b4      	movs	r1, #180	; 0xb4
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	f000 fb9f 	bl	8012618 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line10.setLineWidth(2);
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8011ee0:	2102      	movs	r1, #2
 8011ee2:	4618      	mov	r0, r3
 8011ee4:	f000 fbbe 	bl	8012664 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line10.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8011eee:	2100      	movs	r1, #0
 8011ef0:	4618      	mov	r0, r3
 8011ef2:	f005 f9ab 	bl	801724c <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    line10_1.setPosition(287, 258, 180, 10);
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	f203 708c 	addw	r0, r3, #1932	; 0x78c
 8011efc:	230a      	movs	r3, #10
 8011efe:	9300      	str	r3, [sp, #0]
 8011f00:	23b4      	movs	r3, #180	; 0xb4
 8011f02:	f44f 7281 	mov.w	r2, #258	; 0x102
 8011f06:	f240 111f 	movw	r1, #287	; 0x11f
 8011f0a:	e001      	b.n	8011f10 <_ZN12MainViewBaseC1Ev+0xfb0>
 8011f0c:	08026130 	.word	0x08026130
 8011f10:	f7fe fa6e 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
    line10_1Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	f503 6400 	add.w	r4, r3, #2048	; 0x800
 8011f1a:	22ff      	movs	r2, #255	; 0xff
 8011f1c:	21ff      	movs	r1, #255	; 0xff
 8011f1e:	20ff      	movs	r0, #255	; 0xff
 8011f20:	f7fe fff4 	bl	8010f0c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011f24:	4603      	mov	r3, r0
 8011f26:	22ff      	movs	r2, #255	; 0xff
 8011f28:	4619      	mov	r1, r3
 8011f2a:	4620      	mov	r0, r4
 8011f2c:	f004 fe0b 	bl	8016b46 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line10_1.setPainter(line10_1Painter);
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	f203 728c 	addw	r2, r3, #1932	; 0x78c
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f3c:	4619      	mov	r1, r3
 8011f3e:	4610      	mov	r0, r2
 8011f40:	f004 fe6a 	bl	8016c18 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line10_1.setStart(0, 5);
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	f203 738c 	addw	r3, r3, #1932	; 0x78c
 8011f4a:	2205      	movs	r2, #5
 8011f4c:	2100      	movs	r1, #0
 8011f4e:	4618      	mov	r0, r3
 8011f50:	f000 fb3c 	bl	80125cc <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line10_1.setEnd(180, 5);
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	f203 738c 	addw	r3, r3, #1932	; 0x78c
 8011f5a:	2205      	movs	r2, #5
 8011f5c:	21b4      	movs	r1, #180	; 0xb4
 8011f5e:	4618      	mov	r0, r3
 8011f60:	f000 fb5a 	bl	8012618 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line10_1.setLineWidth(2);
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	f203 738c 	addw	r3, r3, #1932	; 0x78c
 8011f6a:	2102      	movs	r1, #2
 8011f6c:	4618      	mov	r0, r3
 8011f6e:	f000 fb79 	bl	8012664 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line10_1.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	f203 738c 	addw	r3, r3, #1932	; 0x78c
 8011f78:	2100      	movs	r1, #0
 8011f7a:	4618      	mov	r0, r3
 8011f7c:	f005 f966 	bl	801724c <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    BatteryVoltage.setPosition(210, 247, 60, 21);
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	f603 0018 	addw	r0, r3, #2072	; 0x818
 8011f86:	2315      	movs	r3, #21
 8011f88:	9300      	str	r3, [sp, #0]
 8011f8a:	233c      	movs	r3, #60	; 0x3c
 8011f8c:	22f7      	movs	r2, #247	; 0xf7
 8011f8e:	21d2      	movs	r1, #210	; 0xd2
 8011f90:	f7fe fa2e 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
    BatteryVoltage.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	f603 0418 	addw	r4, r3, #2072	; 0x818
 8011f9a:	22ff      	movs	r2, #255	; 0xff
 8011f9c:	21ff      	movs	r1, #255	; 0xff
 8011f9e:	20ff      	movs	r0, #255	; 0xff
 8011fa0:	f7fe ffb4 	bl	8010f0c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011fa4:	4603      	mov	r3, r0
 8011fa6:	4619      	mov	r1, r3
 8011fa8:	4620      	mov	r0, r4
 8011faa:	f7fe fcf0 	bl	801098e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    BatteryVoltage.setLinespacing(0);
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8011fb4:	2100      	movs	r1, #0
 8011fb6:	4618      	mov	r0, r3
 8011fb8:	f7fe fd3c 	bl	8010a34 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(BatteryVoltageBuffer, BATTERYVOLTAGE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID45).getText());
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	f503 642b 	add.w	r4, r3, #2736	; 0xab0
 8011fc2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8011fc6:	211e      	movs	r1, #30
 8011fc8:	4618      	mov	r0, r3
 8011fca:	f7fe fc77 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 8011fce:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8011fd2:	4618      	mov	r0, r3
 8011fd4:	f7fe fc82 	bl	80108dc <_ZNK8touchgfx9TypedText7getTextEv>
 8011fd8:	4603      	mov	r3, r0
 8011fda:	4ae1      	ldr	r2, [pc, #900]	; (8012360 <_ZN12MainViewBaseC1Ev+0x1400>)
 8011fdc:	2105      	movs	r1, #5
 8011fde:	4620      	mov	r0, r4
 8011fe0:	f008 fe8a 	bl	801acf8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    BatteryVoltage.setWildcard(BatteryVoltageBuffer);
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	f603 0218 	addw	r2, r3, #2072	; 0x818
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	f503 632b 	add.w	r3, r3, #2736	; 0xab0
 8011ff0:	4619      	mov	r1, r3
 8011ff2:	4610      	mov	r0, r2
 8011ff4:	f7fe fda6 	bl	8010b44 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    BatteryVoltage.setTypedText(touchgfx::TypedText(T_SINGLEUSEID44));
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	f603 0418 	addw	r4, r3, #2072	; 0x818
 8011ffe:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8012002:	211d      	movs	r1, #29
 8012004:	4618      	mov	r0, r3
 8012006:	f7fe fc59 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 801200a:	f8b7 10b8 	ldrh.w	r1, [r7, #184]	; 0xb8
 801200e:	4620      	mov	r0, r4
 8012010:	f005 fac8 	bl	80175a4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    RPMProgressBar.setXY(1, 1);
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 801201a:	2201      	movs	r2, #1
 801201c:	2101      	movs	r1, #1
 801201e:	4618      	mov	r0, r3
 8012020:	f7fe fa31 	bl	8010486 <_ZN8touchgfx8Drawable5setXYEss>
    RPMProgressBar.setProgressIndicatorPosition(2, 2, 478, 55);
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	f503 6005 	add.w	r0, r3, #2128	; 0x850
 801202a:	2337      	movs	r3, #55	; 0x37
 801202c:	9300      	str	r3, [sp, #0]
 801202e:	f44f 73ef 	mov.w	r3, #478	; 0x1de
 8012032:	2202      	movs	r2, #2
 8012034:	2102      	movs	r1, #2
 8012036:	f003 fa05 	bl	8015444 <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>
    RPMProgressBar.setRange(0, 8000);
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	f503 6005 	add.w	r0, r3, #2128	; 0x850
 8012040:	2300      	movs	r3, #0
 8012042:	9300      	str	r3, [sp, #0]
 8012044:	2300      	movs	r3, #0
 8012046:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801204a:	2100      	movs	r1, #0
 801204c:	f003 fb28 	bl	80156a0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    RPMProgressBar.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 8012056:	2100      	movs	r1, #0
 8012058:	4618      	mov	r0, r3
 801205a:	f003 f903 	bl	8015264 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    RPMProgressBar.setBitmap(BITMAP_BLUE_PROGRESSINDICATORS_FILL_TILING_RED_YELLOW_FADEYELLOWRED_SMALL_TRANSPARENT_ID);
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 8012064:	2101      	movs	r1, #1
 8012066:	4618      	mov	r0, r3
 8012068:	f003 f947 	bl	80152fa <_ZN8touchgfx13ImageProgress9setBitmapEt>
    RPMProgressBar.setValue(7200);
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 8012072:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8012076:	4618      	mov	r0, r3
 8012078:	f003 f9fc 	bl	8015474 <_ZN8touchgfx13ImageProgress8setValueEi>
    RPMProgressBar.setAnchorAtZero(true);
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 8012082:	2101      	movs	r1, #1
 8012084:	4618      	mov	r0, r3
 8012086:	f003 f921 	bl	80152cc <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>

    RPMValue.setPosition(25, 4, 55, 22);
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	f503 6014 	add.w	r0, r3, #2368	; 0x940
 8012090:	2316      	movs	r3, #22
 8012092:	9300      	str	r3, [sp, #0]
 8012094:	2337      	movs	r3, #55	; 0x37
 8012096:	2204      	movs	r2, #4
 8012098:	2119      	movs	r1, #25
 801209a:	f7fe f9a9 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
    RPMValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	f503 6414 	add.w	r4, r3, #2368	; 0x940
 80120a4:	22ff      	movs	r2, #255	; 0xff
 80120a6:	21ff      	movs	r1, #255	; 0xff
 80120a8:	20ff      	movs	r0, #255	; 0xff
 80120aa:	f7fe ff2f 	bl	8010f0c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80120ae:	4603      	mov	r3, r0
 80120b0:	4619      	mov	r1, r3
 80120b2:	4620      	mov	r0, r4
 80120b4:	f7fe fc6b 	bl	801098e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    RPMValue.setLinespacing(0);
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 80120be:	2100      	movs	r1, #0
 80120c0:	4618      	mov	r0, r3
 80120c2:	f7fe fcb7 	bl	8010a34 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(RPMValueBuffer, RPMVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID47).getText());
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	f603 24ba 	addw	r4, r3, #2746	; 0xaba
 80120cc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80120d0:	2120      	movs	r1, #32
 80120d2:	4618      	mov	r0, r3
 80120d4:	f7fe fbf2 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 80120d8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80120dc:	4618      	mov	r0, r3
 80120de:	f7fe fbfd 	bl	80108dc <_ZNK8touchgfx9TypedText7getTextEv>
 80120e2:	4603      	mov	r3, r0
 80120e4:	4a9e      	ldr	r2, [pc, #632]	; (8012360 <_ZN12MainViewBaseC1Ev+0x1400>)
 80120e6:	2105      	movs	r1, #5
 80120e8:	4620      	mov	r0, r4
 80120ea:	f008 fe05 	bl	801acf8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    RPMValue.setWildcard(RPMValueBuffer);
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	f503 6214 	add.w	r2, r3, #2368	; 0x940
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	f603 23ba 	addw	r3, r3, #2746	; 0xaba
 80120fa:	4619      	mov	r1, r3
 80120fc:	4610      	mov	r0, r2
 80120fe:	f7fe fd21 	bl	8010b44 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    RPMValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID46));
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	f503 6414 	add.w	r4, r3, #2368	; 0x940
 8012108:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801210c:	211f      	movs	r1, #31
 801210e:	4618      	mov	r0, r3
 8012110:	f7fe fbd4 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 8012114:	f8b7 10c0 	ldrh.w	r1, [r7, #192]	; 0xc0
 8012118:	4620      	mov	r0, r4
 801211a:	f005 fa43 	bl	80175a4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CltValue_1_1.setXY(82, 15);
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	f603 1378 	addw	r3, r3, #2424	; 0x978
 8012124:	220f      	movs	r2, #15
 8012126:	2152      	movs	r1, #82	; 0x52
 8012128:	4618      	mov	r0, r3
 801212a:	f7fe f9ac 	bl	8010486 <_ZN8touchgfx8Drawable5setXYEss>
    CltValue_1_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	f603 1478 	addw	r4, r3, #2424	; 0x978
 8012134:	22ff      	movs	r2, #255	; 0xff
 8012136:	21ff      	movs	r1, #255	; 0xff
 8012138:	20ff      	movs	r0, #255	; 0xff
 801213a:	f7fe fee7 	bl	8010f0c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801213e:	4603      	mov	r3, r0
 8012140:	4619      	mov	r1, r3
 8012142:	4620      	mov	r0, r4
 8012144:	f7fe fc23 	bl	801098e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CltValue_1_1.setLinespacing(0);
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	f603 1378 	addw	r3, r3, #2424	; 0x978
 801214e:	2100      	movs	r1, #0
 8012150:	4618      	mov	r0, r3
 8012152:	f7fe fc6f 	bl	8010a34 <_ZN8touchgfx8TextArea14setLinespacingEs>
    CltValue_1_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID50));
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	f603 1478 	addw	r4, r3, #2424	; 0x978
 801215c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8012160:	2121      	movs	r1, #33	; 0x21
 8012162:	4618      	mov	r0, r3
 8012164:	f7fe fbaa 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 8012168:	f8b7 10c4 	ldrh.w	r1, [r7, #196]	; 0xc4
 801216c:	4620      	mov	r0, r4
 801216e:	f005 fa19 	bl	80175a4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CLTValue.setPosition(328, 91, 60, 35);
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	f603 10ac 	addw	r0, r3, #2476	; 0x9ac
 8012178:	2323      	movs	r3, #35	; 0x23
 801217a:	9300      	str	r3, [sp, #0]
 801217c:	233c      	movs	r3, #60	; 0x3c
 801217e:	225b      	movs	r2, #91	; 0x5b
 8012180:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8012184:	f7fe f934 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
    CLTValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	f603 14ac 	addw	r4, r3, #2476	; 0x9ac
 801218e:	22ff      	movs	r2, #255	; 0xff
 8012190:	21ff      	movs	r1, #255	; 0xff
 8012192:	20ff      	movs	r0, #255	; 0xff
 8012194:	f7fe feba 	bl	8010f0c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012198:	4603      	mov	r3, r0
 801219a:	4619      	mov	r1, r3
 801219c:	4620      	mov	r0, r4
 801219e:	f7fe fbf6 	bl	801098e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CLTValue.setLinespacing(0);
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	f603 13ac 	addw	r3, r3, #2476	; 0x9ac
 80121a8:	2100      	movs	r1, #0
 80121aa:	4618      	mov	r0, r3
 80121ac:	f7fe fc42 	bl	8010a34 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(CLTValueBuffer, CLTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID54).getText());
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	f603 24c4 	addw	r4, r3, #2756	; 0xac4
 80121b6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80121ba:	2123      	movs	r1, #35	; 0x23
 80121bc:	4618      	mov	r0, r3
 80121be:	f7fe fb7d 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 80121c2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80121c6:	4618      	mov	r0, r3
 80121c8:	f7fe fb88 	bl	80108dc <_ZNK8touchgfx9TypedText7getTextEv>
 80121cc:	4603      	mov	r3, r0
 80121ce:	4a64      	ldr	r2, [pc, #400]	; (8012360 <_ZN12MainViewBaseC1Ev+0x1400>)
 80121d0:	2105      	movs	r1, #5
 80121d2:	4620      	mov	r0, r4
 80121d4:	f008 fd90 	bl	801acf8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    CLTValue.setWildcard(CLTValueBuffer);
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	f603 12ac 	addw	r2, r3, #2476	; 0x9ac
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	f603 23c4 	addw	r3, r3, #2756	; 0xac4
 80121e4:	4619      	mov	r1, r3
 80121e6:	4610      	mov	r0, r2
 80121e8:	f7fe fcac 	bl	8010b44 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    CLTValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID53));
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	f603 14ac 	addw	r4, r3, #2476	; 0x9ac
 80121f2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80121f6:	2122      	movs	r1, #34	; 0x22
 80121f8:	4618      	mov	r0, r3
 80121fa:	f7fe fb5f 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 80121fe:	f8b7 10cc 	ldrh.w	r1, [r7, #204]	; 0xcc
 8012202:	4620      	mov	r0, r4
 8012204:	f005 f9ce 	bl	80175a4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    MAPValue.setPosition(409, 91, 60, 35);
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	f603 10e4 	addw	r0, r3, #2532	; 0x9e4
 801220e:	2323      	movs	r3, #35	; 0x23
 8012210:	9300      	str	r3, [sp, #0]
 8012212:	233c      	movs	r3, #60	; 0x3c
 8012214:	225b      	movs	r2, #91	; 0x5b
 8012216:	f240 1199 	movw	r1, #409	; 0x199
 801221a:	f7fe f8e9 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
    MAPValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	f603 14e4 	addw	r4, r3, #2532	; 0x9e4
 8012224:	22ff      	movs	r2, #255	; 0xff
 8012226:	21ff      	movs	r1, #255	; 0xff
 8012228:	20ff      	movs	r0, #255	; 0xff
 801222a:	f7fe fe6f 	bl	8010f0c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801222e:	4603      	mov	r3, r0
 8012230:	4619      	mov	r1, r3
 8012232:	4620      	mov	r0, r4
 8012234:	f7fe fbab 	bl	801098e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    MAPValue.setLinespacing(0);
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	f603 13e4 	addw	r3, r3, #2532	; 0x9e4
 801223e:	2100      	movs	r1, #0
 8012240:	4618      	mov	r0, r3
 8012242:	f7fe fbf7 	bl	8010a34 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(MAPValueBuffer, MAPVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID56).getText());
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	f603 24ce 	addw	r4, r3, #2766	; 0xace
 801224c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8012250:	2125      	movs	r1, #37	; 0x25
 8012252:	4618      	mov	r0, r3
 8012254:	f7fe fb32 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 8012258:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801225c:	4618      	mov	r0, r3
 801225e:	f7fe fb3d 	bl	80108dc <_ZNK8touchgfx9TypedText7getTextEv>
 8012262:	4603      	mov	r3, r0
 8012264:	4a3e      	ldr	r2, [pc, #248]	; (8012360 <_ZN12MainViewBaseC1Ev+0x1400>)
 8012266:	2105      	movs	r1, #5
 8012268:	4620      	mov	r0, r4
 801226a:	f008 fd45 	bl	801acf8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    MAPValue.setWildcard(MAPValueBuffer);
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	f603 12e4 	addw	r2, r3, #2532	; 0x9e4
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	f603 23ce 	addw	r3, r3, #2766	; 0xace
 801227a:	4619      	mov	r1, r3
 801227c:	4610      	mov	r0, r2
 801227e:	f7fe fc61 	bl	8010b44 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    MAPValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID55));
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	f603 14e4 	addw	r4, r3, #2532	; 0x9e4
 8012288:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801228c:	2124      	movs	r1, #36	; 0x24
 801228e:	4618      	mov	r0, r3
 8012290:	f7fe fb14 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 8012294:	f8b7 10d4 	ldrh.w	r1, [r7, #212]	; 0xd4
 8012298:	4620      	mov	r0, r4
 801229a:	f005 f983 	bl	80175a4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    KMHValue.setPosition(185, 76, 110, 69);
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	f603 201c 	addw	r0, r3, #2588	; 0xa1c
 80122a4:	2345      	movs	r3, #69	; 0x45
 80122a6:	9300      	str	r3, [sp, #0]
 80122a8:	236e      	movs	r3, #110	; 0x6e
 80122aa:	224c      	movs	r2, #76	; 0x4c
 80122ac:	21b9      	movs	r1, #185	; 0xb9
 80122ae:	f7fe f89f 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
    KMHValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	f603 241c 	addw	r4, r3, #2588	; 0xa1c
 80122b8:	22ff      	movs	r2, #255	; 0xff
 80122ba:	21ff      	movs	r1, #255	; 0xff
 80122bc:	20ff      	movs	r0, #255	; 0xff
 80122be:	f7fe fe25 	bl	8010f0c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80122c2:	4603      	mov	r3, r0
 80122c4:	4619      	mov	r1, r3
 80122c6:	4620      	mov	r0, r4
 80122c8:	f7fe fb61 	bl	801098e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    KMHValue.setLinespacing(0);
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	f603 231c 	addw	r3, r3, #2588	; 0xa1c
 80122d2:	2100      	movs	r1, #0
 80122d4:	4618      	mov	r0, r3
 80122d6:	f7fe fbad 	bl	8010a34 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(KMHValueBuffer, KMHVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID59).getText());
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	f603 24d8 	addw	r4, r3, #2776	; 0xad8
 80122e0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80122e4:	2128      	movs	r1, #40	; 0x28
 80122e6:	4618      	mov	r0, r3
 80122e8:	f7fe fae8 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 80122ec:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80122f0:	4618      	mov	r0, r3
 80122f2:	f7fe faf3 	bl	80108dc <_ZNK8touchgfx9TypedText7getTextEv>
 80122f6:	4603      	mov	r3, r0
 80122f8:	4a19      	ldr	r2, [pc, #100]	; (8012360 <_ZN12MainViewBaseC1Ev+0x1400>)
 80122fa:	2105      	movs	r1, #5
 80122fc:	4620      	mov	r0, r4
 80122fe:	f008 fcfb 	bl	801acf8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    KMHValue.setWildcard(KMHValueBuffer);
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	f603 221c 	addw	r2, r3, #2588	; 0xa1c
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	f603 23d8 	addw	r3, r3, #2776	; 0xad8
 801230e:	4619      	mov	r1, r3
 8012310:	4610      	mov	r0, r2
 8012312:	f7fe fc17 	bl	8010b44 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    KMHValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID58));
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	f603 241c 	addw	r4, r3, #2588	; 0xa1c
 801231c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8012320:	2127      	movs	r1, #39	; 0x27
 8012322:	4618      	mov	r0, r3
 8012324:	f7fe faca 	bl	80108bc <_ZN8touchgfx9TypedTextC1Et>
 8012328:	f8b7 10dc 	ldrh.w	r1, [r7, #220]	; 0xdc
 801232c:	4620      	mov	r0, r4
 801232e:	f005 f939 	bl	80175a4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    add(backgroundBox);
 8012332:	687a      	ldr	r2, [r7, #4]
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	3340      	adds	r3, #64	; 0x40
 8012338:	4619      	mov	r1, r3
 801233a:	4610      	mov	r0, r2
 801233c:	f7fe fa06 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(RpmDescriptor);
 8012340:	687a      	ldr	r2, [r7, #4]
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	3370      	adds	r3, #112	; 0x70
 8012346:	4619      	mov	r1, r3
 8012348:	4610      	mov	r0, r2
 801234a:	f7fe f9ff 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(KpaDescriptor);
 801234e:	687a      	ldr	r2, [r7, #4]
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	33a4      	adds	r3, #164	; 0xa4
 8012354:	4619      	mov	r1, r3
 8012356:	4610      	mov	r0, r2
 8012358:	f7fe f9f8 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
 801235c:	e002      	b.n	8012364 <_ZN12MainViewBaseC1Ev+0x1404>
 801235e:	bf00      	nop
 8012360:	08026130 	.word	0x08026130
    add(CltDecsriptor);
 8012364:	687a      	ldr	r2, [r7, #4]
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	33d8      	adds	r3, #216	; 0xd8
 801236a:	4619      	mov	r1, r3
 801236c:	4610      	mov	r0, r2
 801236e:	f7fe f9ed 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(LambdaDescriptor);
 8012372:	687a      	ldr	r2, [r7, #4]
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 801237a:	4619      	mov	r1, r3
 801237c:	4610      	mov	r0, r2
 801237e:	f7fe f9e5 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TrgtDescriptor);
 8012382:	687a      	ldr	r2, [r7, #4]
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 801238a:	4619      	mov	r1, r3
 801238c:	4610      	mov	r0, r2
 801238e:	f7fe f9dd 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(LambdaValue);
 8012392:	687a      	ldr	r2, [r7, #4]
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 801239a:	4619      	mov	r1, r3
 801239c:	4610      	mov	r0, r2
 801239e:	f7fe f9d5 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TrgtValue);
 80123a2:	687a      	ldr	r2, [r7, #4]
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80123aa:	4619      	mov	r1, r3
 80123ac:	4610      	mov	r0, r2
 80123ae:	f7fe f9cd 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(backgroundImage);
 80123b2:	687a      	ldr	r2, [r7, #4]
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80123ba:	4619      	mov	r1, r3
 80123bc:	4610      	mov	r0, r2
 80123be:	f7fe f9c5 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm1);
 80123c2:	687a      	ldr	r2, [r7, #4]
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80123ca:	4619      	mov	r1, r3
 80123cc:	4610      	mov	r0, r2
 80123ce:	f7fe f9bd 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm2);
 80123d2:	687a      	ldr	r2, [r7, #4]
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80123da:	4619      	mov	r1, r3
 80123dc:	4610      	mov	r0, r2
 80123de:	f7fe f9b5 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm3);
 80123e2:	687a      	ldr	r2, [r7, #4]
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80123ea:	4619      	mov	r1, r3
 80123ec:	4610      	mov	r0, r2
 80123ee:	f7fe f9ad 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm4);
 80123f2:	687a      	ldr	r2, [r7, #4]
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 80123fa:	4619      	mov	r1, r3
 80123fc:	4610      	mov	r0, r2
 80123fe:	f7fe f9a5 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm5);
 8012402:	687a      	ldr	r2, [r7, #4]
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 801240a:	4619      	mov	r1, r3
 801240c:	4610      	mov	r0, r2
 801240e:	f7fe f99d 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm6);
 8012412:	687a      	ldr	r2, [r7, #4]
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	f503 734a 	add.w	r3, r3, #808	; 0x328
 801241a:	4619      	mov	r1, r3
 801241c:	4610      	mov	r0, r2
 801241e:	f7fe f995 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm7);
 8012422:	687a      	ldr	r2, [r7, #4]
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801242a:	4619      	mov	r1, r3
 801242c:	4610      	mov	r0, r2
 801242e:	f7fe f98d 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm8);
 8012432:	687a      	ldr	r2, [r7, #4]
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	f503 7366 	add.w	r3, r3, #920	; 0x398
 801243a:	4619      	mov	r1, r3
 801243c:	4610      	mov	r0, r2
 801243e:	f7fe f985 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line11);
 8012442:	687a      	ldr	r2, [r7, #4]
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 801244a:	4619      	mov	r1, r3
 801244c:	4610      	mov	r0, r2
 801244e:	f7fe f97d 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor);
 8012452:	687a      	ldr	r2, [r7, #4]
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 801245a:	4619      	mov	r1, r3
 801245c:	4610      	mov	r0, r2
 801245e:	f7fe f975 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ECTDescriptor);
 8012462:	687a      	ldr	r2, [r7, #4]
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 801246a:	4619      	mov	r1, r3
 801246c:	4610      	mov	r0, r2
 801246e:	f7fe f96d 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATValue);
 8012472:	687a      	ldr	r2, [r7, #4]
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801247a:	4619      	mov	r1, r3
 801247c:	4610      	mov	r0, r2
 801247e:	f7fe f965 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(EGTValue);
 8012482:	687a      	ldr	r2, [r7, #4]
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	f203 43fc 	addw	r3, r3, #1276	; 0x4fc
 801248a:	4619      	mov	r1, r3
 801248c:	4610      	mov	r0, r2
 801248e:	f7fe f95d 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor_1);
 8012492:	687a      	ldr	r2, [r7, #4]
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	f203 5334 	addw	r3, r3, #1332	; 0x534
 801249a:	4619      	mov	r1, r3
 801249c:	4610      	mov	r0, r2
 801249e:	f7fe f955 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ECTDescriptor_1);
 80124a2:	687a      	ldr	r2, [r7, #4]
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 80124aa:	4619      	mov	r1, r3
 80124ac:	4610      	mov	r0, r2
 80124ae:	f7fe f94d 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(OILTempValue);
 80124b2:	687a      	ldr	r2, [r7, #4]
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	f203 539c 	addw	r3, r3, #1436	; 0x59c
 80124ba:	4619      	mov	r1, r3
 80124bc:	4610      	mov	r0, r2
 80124be:	f7fe f945 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(OILPressureValue);
 80124c2:	687a      	ldr	r2, [r7, #4]
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	f203 53d4 	addw	r3, r3, #1492	; 0x5d4
 80124ca:	4619      	mov	r1, r3
 80124cc:	4610      	mov	r0, r2
 80124ce:	f7fe f93d 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor_1_1);
 80124d2:	687a      	ldr	r2, [r7, #4]
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 80124da:	4619      	mov	r1, r3
 80124dc:	4610      	mov	r0, r2
 80124de:	f7fe f935 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TPSProgress);
 80124e2:	687a      	ldr	r2, [r7, #4]
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 80124ea:	4619      	mov	r1, r3
 80124ec:	4610      	mov	r0, r2
 80124ee:	f7fe f92d 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line10);
 80124f2:	687a      	ldr	r2, [r7, #4]
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 80124fa:	4619      	mov	r1, r3
 80124fc:	4610      	mov	r0, r2
 80124fe:	f7fe f925 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line10_1);
 8012502:	687a      	ldr	r2, [r7, #4]
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	f203 738c 	addw	r3, r3, #1932	; 0x78c
 801250a:	4619      	mov	r1, r3
 801250c:	4610      	mov	r0, r2
 801250e:	f7fe f91d 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(BatteryVoltage);
 8012512:	687a      	ldr	r2, [r7, #4]
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	f603 0318 	addw	r3, r3, #2072	; 0x818
 801251a:	4619      	mov	r1, r3
 801251c:	4610      	mov	r0, r2
 801251e:	f7fe f915 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(RPMProgressBar);
 8012522:	687a      	ldr	r2, [r7, #4]
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 801252a:	4619      	mov	r1, r3
 801252c:	4610      	mov	r0, r2
 801252e:	f7fe f90d 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(RPMValue);
 8012532:	687a      	ldr	r2, [r7, #4]
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 801253a:	4619      	mov	r1, r3
 801253c:	4610      	mov	r0, r2
 801253e:	f7fe f905 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CltValue_1_1);
 8012542:	687a      	ldr	r2, [r7, #4]
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	f603 1378 	addw	r3, r3, #2424	; 0x978
 801254a:	4619      	mov	r1, r3
 801254c:	4610      	mov	r0, r2
 801254e:	f7fe f8fd 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CLTValue);
 8012552:	687a      	ldr	r2, [r7, #4]
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	f603 13ac 	addw	r3, r3, #2476	; 0x9ac
 801255a:	4619      	mov	r1, r3
 801255c:	4610      	mov	r0, r2
 801255e:	f7fe f8f5 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(MAPValue);
 8012562:	687a      	ldr	r2, [r7, #4]
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	f603 13e4 	addw	r3, r3, #2532	; 0x9e4
 801256a:	4619      	mov	r1, r3
 801256c:	4610      	mov	r0, r2
 801256e:	f7fe f8ed 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(KMHValue);
 8012572:	687a      	ldr	r2, [r7, #4]
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	f603 231c 	addw	r3, r3, #2588	; 0xa1c
 801257a:	4619      	mov	r1, r3
 801257c:	4610      	mov	r0, r2
 801257e:	f7fe f8e5 	bl	801074c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	4618      	mov	r0, r3
 8012586:	37e4      	adds	r7, #228	; 0xe4
 8012588:	46bd      	mov	sp, r7
 801258a:	bd90      	pop	{r4, r7, pc}

0801258c <_ZN12MainViewBase11setupScreenEv>:

void MainViewBase::setupScreen()
{
 801258c:	b480      	push	{r7}
 801258e:	b083      	sub	sp, #12
 8012590:	af00      	add	r7, sp, #0
 8012592:	6078      	str	r0, [r7, #4]

}
 8012594:	bf00      	nop
 8012596:	370c      	adds	r7, #12
 8012598:	46bd      	mov	sp, r7
 801259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801259e:	4770      	bx	lr

080125a0 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>:
    View() : presenter(0)
 80125a0:	b580      	push	{r7, lr}
 80125a2:	b082      	sub	sp, #8
 80125a4:	af00      	add	r7, sp, #0
 80125a6:	6078      	str	r0, [r7, #4]
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	4618      	mov	r0, r3
 80125ac:	f007 fade 	bl	8019b6c <_ZN8touchgfx6ScreenC1Ev>
 80125b0:	4a05      	ldr	r2, [pc, #20]	; (80125c8 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev+0x28>)
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	601a      	str	r2, [r3, #0]
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	2200      	movs	r2, #0
 80125ba:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	4618      	mov	r0, r3
 80125c0:	3708      	adds	r7, #8
 80125c2:	46bd      	mov	sp, r7
 80125c4:	bd80      	pop	{r7, pc}
 80125c6:	bf00      	nop
 80125c8:	08026700 	.word	0x08026700

080125cc <_ZN8touchgfx4Line8setStartIiEEvT_S2_>:
    void setStart(T x, T y)
 80125cc:	b590      	push	{r4, r7, lr}
 80125ce:	b089      	sub	sp, #36	; 0x24
 80125d0:	af00      	add	r7, sp, #0
 80125d2:	60f8      	str	r0, [r7, #12]
 80125d4:	60b9      	str	r1, [r7, #8]
 80125d6:	607a      	str	r2, [r7, #4]
 80125d8:	68bb      	ldr	r3, [r7, #8]
 80125da:	61bb      	str	r3, [r7, #24]
#ifndef  __ICCARM__
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 80125dc:	69bb      	ldr	r3, [r7, #24]
 80125de:	015a      	lsls	r2, r3, #5
 80125e0:	f107 0314 	add.w	r3, r7, #20
 80125e4:	4611      	mov	r1, r2
 80125e6:	4618      	mov	r0, r3
 80125e8:	f7fe fadc 	bl	8010ba4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80125ec:	697b      	ldr	r3, [r7, #20]
 80125ee:	461c      	mov	r4, r3
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	61fb      	str	r3, [r7, #28]
 80125f4:	69fb      	ldr	r3, [r7, #28]
 80125f6:	015a      	lsls	r2, r3, #5
 80125f8:	f107 0310 	add.w	r3, r7, #16
 80125fc:	4611      	mov	r1, r2
 80125fe:	4618      	mov	r0, r3
 8012600:	f7fe fad0 	bl	8010ba4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8012604:	693b      	ldr	r3, [r7, #16]
        setStart(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 8012606:	461a      	mov	r2, r3
 8012608:	4621      	mov	r1, r4
 801260a:	68f8      	ldr	r0, [r7, #12]
 801260c:	f004 fe08 	bl	8017220 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>
    }
 8012610:	bf00      	nop
 8012612:	3724      	adds	r7, #36	; 0x24
 8012614:	46bd      	mov	sp, r7
 8012616:	bd90      	pop	{r4, r7, pc}

08012618 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>:
    void setEnd(T x, T y)
 8012618:	b590      	push	{r4, r7, lr}
 801261a:	b089      	sub	sp, #36	; 0x24
 801261c:	af00      	add	r7, sp, #0
 801261e:	60f8      	str	r0, [r7, #12]
 8012620:	60b9      	str	r1, [r7, #8]
 8012622:	607a      	str	r2, [r7, #4]
 8012624:	68bb      	ldr	r3, [r7, #8]
 8012626:	61bb      	str	r3, [r7, #24]
 8012628:	69bb      	ldr	r3, [r7, #24]
 801262a:	015a      	lsls	r2, r3, #5
 801262c:	f107 0314 	add.w	r3, r7, #20
 8012630:	4611      	mov	r1, r2
 8012632:	4618      	mov	r0, r3
 8012634:	f7fe fab6 	bl	8010ba4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8012638:	697b      	ldr	r3, [r7, #20]
 801263a:	461c      	mov	r4, r3
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	61fb      	str	r3, [r7, #28]
 8012640:	69fb      	ldr	r3, [r7, #28]
 8012642:	015a      	lsls	r2, r3, #5
 8012644:	f107 0310 	add.w	r3, r7, #16
 8012648:	4611      	mov	r1, r2
 801264a:	4618      	mov	r0, r3
 801264c:	f7fe faaa 	bl	8010ba4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8012650:	693b      	ldr	r3, [r7, #16]
        setEnd(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 8012652:	461a      	mov	r2, r3
 8012654:	4621      	mov	r1, r4
 8012656:	68f8      	ldr	r0, [r7, #12]
 8012658:	f004 fded 	bl	8017236 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>
    }
 801265c:	bf00      	nop
 801265e:	3724      	adds	r7, #36	; 0x24
 8012660:	46bd      	mov	sp, r7
 8012662:	bd90      	pop	{r4, r7, pc}

08012664 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>:
    void setLineWidth(T width)
 8012664:	b580      	push	{r7, lr}
 8012666:	b084      	sub	sp, #16
 8012668:	af00      	add	r7, sp, #0
 801266a:	6078      	str	r0, [r7, #4]
 801266c:	6039      	str	r1, [r7, #0]
 801266e:	683b      	ldr	r3, [r7, #0]
 8012670:	60fb      	str	r3, [r7, #12]
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	015a      	lsls	r2, r3, #5
 8012676:	f107 0308 	add.w	r3, r7, #8
 801267a:	4611      	mov	r1, r2
 801267c:	4618      	mov	r0, r3
 801267e:	f7fe fa91 	bl	8010ba4 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8012682:	68bb      	ldr	r3, [r7, #8]
        setLineWidth(CWRUtil::toQ5<T>(width));
 8012684:	4619      	mov	r1, r3
 8012686:	6878      	ldr	r0, [r7, #4]
 8012688:	f7fe faa7 	bl	8010bda <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>
    }
 801268c:	bf00      	nop
 801268e:	3710      	adds	r7, #16
 8012690:	46bd      	mov	sp, r7
 8012692:	bd80      	pop	{r7, pc}

08012694 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8012694:	b580      	push	{r7, lr}
 8012696:	b082      	sub	sp, #8
 8012698:	af00      	add	r7, sp, #0
 801269a:	6078      	str	r0, [r7, #4]
 801269c:	4a05      	ldr	r2, [pc, #20]	; (80126b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	601a      	str	r2, [r3, #0]
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	4618      	mov	r0, r3
 80126a6:	f7fe fa15 	bl	8010ad4 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	4618      	mov	r0, r3
 80126ae:	3708      	adds	r7, #8
 80126b0:	46bd      	mov	sp, r7
 80126b2:	bd80      	pop	{r7, pc}
 80126b4:	080282d4 	.word	0x080282d4

080126b8 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 80126b8:	b580      	push	{r7, lr}
 80126ba:	b082      	sub	sp, #8
 80126bc:	af00      	add	r7, sp, #0
 80126be:	6078      	str	r0, [r7, #4]
 80126c0:	6878      	ldr	r0, [r7, #4]
 80126c2:	f7ff ffe7 	bl	8012694 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80126c6:	2138      	movs	r1, #56	; 0x38
 80126c8:	6878      	ldr	r0, [r7, #4]
 80126ca:	f012 fa82 	bl	8024bd2 <_ZdlPvj>
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	4618      	mov	r0, r3
 80126d2:	3708      	adds	r7, #8
 80126d4:	46bd      	mov	sp, r7
 80126d6:	bd80      	pop	{r7, pc}

080126d8 <_ZN8touchgfx4LineD1Ev>:
class Line : public CanvasWidget
 80126d8:	b580      	push	{r7, lr}
 80126da:	b082      	sub	sp, #8
 80126dc:	af00      	add	r7, sp, #0
 80126de:	6078      	str	r0, [r7, #4]
 80126e0:	4a05      	ldr	r2, [pc, #20]	; (80126f8 <_ZN8touchgfx4LineD1Ev+0x20>)
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	601a      	str	r2, [r3, #0]
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	4618      	mov	r0, r3
 80126ea:	f004 fb73 	bl	8016dd4 <_ZN8touchgfx12CanvasWidgetD1Ev>
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	4618      	mov	r0, r3
 80126f2:	3708      	adds	r7, #8
 80126f4:	46bd      	mov	sp, r7
 80126f6:	bd80      	pop	{r7, pc}
 80126f8:	08028080 	.word	0x08028080

080126fc <_ZN8touchgfx4LineD0Ev>:
 80126fc:	b580      	push	{r7, lr}
 80126fe:	b082      	sub	sp, #8
 8012700:	af00      	add	r7, sp, #0
 8012702:	6078      	str	r0, [r7, #4]
 8012704:	6878      	ldr	r0, [r7, #4]
 8012706:	f7ff ffe7 	bl	80126d8 <_ZN8touchgfx4LineD1Ev>
 801270a:	2174      	movs	r1, #116	; 0x74
 801270c:	6878      	ldr	r0, [r7, #4]
 801270e:	f012 fa60 	bl	8024bd2 <_ZdlPvj>
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	4618      	mov	r0, r3
 8012716:	3708      	adds	r7, #8
 8012718:	46bd      	mov	sp, r7
 801271a:	bd80      	pop	{r7, pc}

0801271c <_ZN8touchgfx13PainterRGB888D1Ev>:
 *        The PainterRGB888 class allows a shape to be filled with a given color and alpha
 *        value. This allows transparent, anti-aliased elements to be drawn.
 *
 * @see AbstractPainter
 */
class PainterRGB888 : public AbstractPainterRGB888
 801271c:	b580      	push	{r7, lr}
 801271e:	b082      	sub	sp, #8
 8012720:	af00      	add	r7, sp, #0
 8012722:	6078      	str	r0, [r7, #4]
 8012724:	4a05      	ldr	r2, [pc, #20]	; (801273c <_ZN8touchgfx13PainterRGB888D1Ev+0x20>)
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	601a      	str	r2, [r3, #0]
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	4618      	mov	r0, r3
 801272e:	f7fe fa77 	bl	8010c20 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	4618      	mov	r0, r3
 8012736:	3708      	adds	r7, #8
 8012738:	46bd      	mov	sp, r7
 801273a:	bd80      	pop	{r7, pc}
 801273c:	08027d84 	.word	0x08027d84

08012740 <_ZN8touchgfx13PainterRGB888D0Ev>:
 8012740:	b580      	push	{r7, lr}
 8012742:	b082      	sub	sp, #8
 8012744:	af00      	add	r7, sp, #0
 8012746:	6078      	str	r0, [r7, #4]
 8012748:	6878      	ldr	r0, [r7, #4]
 801274a:	f7ff ffe7 	bl	801271c <_ZN8touchgfx13PainterRGB888D1Ev>
 801274e:	2118      	movs	r1, #24
 8012750:	6878      	ldr	r0, [r7, #4]
 8012752:	f012 fa3e 	bl	8024bd2 <_ZdlPvj>
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	4618      	mov	r0, r3
 801275a:	3708      	adds	r7, #8
 801275c:	46bd      	mov	sp, r7
 801275e:	bd80      	pop	{r7, pc}

08012760 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8012760:	b480      	push	{r7}
 8012762:	af00      	add	r7, sp, #0
    return bitmap_database;
 8012764:	4b02      	ldr	r3, [pc, #8]	; (8012770 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8012766:	4618      	mov	r0, r3
 8012768:	46bd      	mov	sp, r7
 801276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801276e:	4770      	bx	lr
 8012770:	0802686c 	.word	0x0802686c

08012774 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8012774:	b480      	push	{r7}
 8012776:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8012778:	2303      	movs	r3, #3
}
 801277a:	4618      	mov	r0, r3
 801277c:	46bd      	mov	sp, r7
 801277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012782:	4770      	bx	lr

08012784 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8012784:	b480      	push	{r7}
 8012786:	b085      	sub	sp, #20
 8012788:	af00      	add	r7, sp, #0
 801278a:	60f8      	str	r0, [r7, #12]
 801278c:	60b9      	str	r1, [r7, #8]
 801278e:	4613      	mov	r3, r2
 8012790:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 8012792:	4a07      	ldr	r2, [pc, #28]	; (80127b0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	6013      	str	r3, [r2, #0]
        fonts = f;
 8012798:	4a06      	ldr	r2, [pc, #24]	; (80127b4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 801279a:	68bb      	ldr	r3, [r7, #8]
 801279c:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 801279e:	4a06      	ldr	r2, [pc, #24]	; (80127b8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 80127a0:	88fb      	ldrh	r3, [r7, #6]
 80127a2:	8013      	strh	r3, [r2, #0]
    }
 80127a4:	bf00      	nop
 80127a6:	3714      	adds	r7, #20
 80127a8:	46bd      	mov	sp, r7
 80127aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ae:	4770      	bx	lr
 80127b0:	2000bd0c 	.word	0x2000bd0c
 80127b4:	2000bd14 	.word	0x2000bd14
 80127b8:	2000bd10 	.word	0x2000bd10

080127bc <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 80127bc:	b590      	push	{r4, r7, lr}
 80127be:	b085      	sub	sp, #20
 80127c0:	af00      	add	r7, sp, #0
 80127c2:	4603      	mov	r3, r0
 80127c4:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 80127c6:	2300      	movs	r3, #0
 80127c8:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 80127ca:	88fb      	ldrh	r3, [r7, #6]
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d127      	bne.n	8012820 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 80127d0:	88fb      	ldrh	r3, [r7, #6]
 80127d2:	4a1e      	ldr	r2, [pc, #120]	; (801284c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80127d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d016      	beq.n	801280a <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 80127dc:	88fb      	ldrh	r3, [r7, #6]
 80127de:	4a1b      	ldr	r2, [pc, #108]	; (801284c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80127e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80127e4:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80127e6:	68bb      	ldr	r3, [r7, #8]
 80127e8:	681b      	ldr	r3, [r3, #0]
 80127ea:	68ba      	ldr	r2, [r7, #8]
 80127ec:	4413      	add	r3, r2
 80127ee:	4a18      	ldr	r2, [pc, #96]	; (8012850 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80127f0:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80127f2:	68bb      	ldr	r3, [r7, #8]
 80127f4:	685b      	ldr	r3, [r3, #4]
 80127f6:	68ba      	ldr	r2, [r7, #8]
 80127f8:	4413      	add	r3, r2
 80127fa:	4a16      	ldr	r2, [pc, #88]	; (8012854 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 80127fc:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80127fe:	68bb      	ldr	r3, [r7, #8]
 8012800:	689b      	ldr	r3, [r3, #8]
 8012802:	68ba      	ldr	r2, [r7, #8]
 8012804:	4413      	add	r3, r2
 8012806:	60fb      	str	r3, [r7, #12]
 8012808:	e00a      	b.n	8012820 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 801280a:	4b11      	ldr	r3, [pc, #68]	; (8012850 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 801280c:	4a12      	ldr	r2, [pc, #72]	; (8012858 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 801280e:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8012810:	4a12      	ldr	r2, [pc, #72]	; (801285c <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8012812:	4b10      	ldr	r3, [pc, #64]	; (8012854 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8012814:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8012816:	88fb      	ldrh	r3, [r7, #6]
 8012818:	4a11      	ldr	r2, [pc, #68]	; (8012860 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 801281a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801281e:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8012820:	68fb      	ldr	r3, [r7, #12]
 8012822:	2b00      	cmp	r3, #0
 8012824:	d00d      	beq.n	8012842 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8012826:	4a0f      	ldr	r2, [pc, #60]	; (8012864 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8012828:	88fb      	ldrh	r3, [r7, #6]
 801282a:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 801282c:	f000 f83e 	bl	80128ac <_ZN17TypedTextDatabase8getFontsEv>
 8012830:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8012832:	f000 f833 	bl	801289c <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8012836:	4603      	mov	r3, r0
 8012838:	461a      	mov	r2, r3
 801283a:	4621      	mov	r1, r4
 801283c:	68f8      	ldr	r0, [r7, #12]
 801283e:	f7ff ffa1 	bl	8012784 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8012842:	bf00      	nop
 8012844:	3714      	adds	r7, #20
 8012846:	46bd      	mov	sp, r7
 8012848:	bd90      	pop	{r4, r7, pc}
 801284a:	bf00      	nop
 801284c:	20008634 	.word	0x20008634
 8012850:	2000863c 	.word	0x2000863c
 8012854:	20008640 	.word	0x20008640
 8012858:	080611ec 	.word	0x080611ec
 801285c:	08061128 	.word	0x08061128
 8012860:	08061344 	.word	0x08061344
 8012864:	20008638 	.word	0x20008638

08012868 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8012868:	b480      	push	{r7}
 801286a:	b083      	sub	sp, #12
 801286c:	af00      	add	r7, sp, #0
 801286e:	6078      	str	r0, [r7, #4]
 8012870:	460b      	mov	r3, r1
 8012872:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8012874:	4b07      	ldr	r3, [pc, #28]	; (8012894 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8012876:	681a      	ldr	r2, [r3, #0]
 8012878:	4b07      	ldr	r3, [pc, #28]	; (8012898 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 801287a:	6819      	ldr	r1, [r3, #0]
 801287c:	887b      	ldrh	r3, [r7, #2]
 801287e:	009b      	lsls	r3, r3, #2
 8012880:	440b      	add	r3, r1
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	005b      	lsls	r3, r3, #1
 8012886:	4413      	add	r3, r2
}
 8012888:	4618      	mov	r0, r3
 801288a:	370c      	adds	r7, #12
 801288c:	46bd      	mov	sp, r7
 801288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012892:	4770      	bx	lr
 8012894:	2000863c 	.word	0x2000863c
 8012898:	20008640 	.word	0x20008640

0801289c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 801289c:	b480      	push	{r7}
 801289e:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 80128a0:	2331      	movs	r3, #49	; 0x31
}
 80128a2:	4618      	mov	r0, r3
 80128a4:	46bd      	mov	sp, r7
 80128a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128aa:	4770      	bx	lr

080128ac <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 80128ac:	b480      	push	{r7}
 80128ae:	af00      	add	r7, sp, #0
    return _fonts;
 80128b0:	4b02      	ldr	r3, [pc, #8]	; (80128bc <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 80128b2:	4618      	mov	r0, r3
 80128b4:	46bd      	mov	sp, r7
 80128b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ba:	4770      	bx	lr
 80128bc:	20008644 	.word	0x20008644

080128c0 <_Z41__static_initialization_and_destruction_0ii>:
    case 6:
        _fonts[6] = &(getFont_Asap_Bold_10_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 80128c0:	b580      	push	{r7, lr}
 80128c2:	b082      	sub	sp, #8
 80128c4:	af00      	add	r7, sp, #0
 80128c6:	6078      	str	r0, [r7, #4]
 80128c8:	6039      	str	r1, [r7, #0]
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	2b01      	cmp	r3, #1
 80128ce:	d127      	bne.n	8012920 <_Z41__static_initialization_and_destruction_0ii+0x60>
 80128d0:	683b      	ldr	r3, [r7, #0]
 80128d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80128d6:	4293      	cmp	r3, r2
 80128d8:	d122      	bne.n	8012920 <_Z41__static_initialization_and_destruction_0ii+0x60>
    &(getFont_Asap_Bold_18_4bpp()),
 80128da:	f7fc fe7b 	bl	800f5d4 <_Z25getFont_Asap_Bold_18_4bppv>
 80128de:	4602      	mov	r2, r0
};
 80128e0:	4b11      	ldr	r3, [pc, #68]	; (8012928 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80128e2:	601a      	str	r2, [r3, #0]
    &(getFont_Asap_Bold_40_4bpp()),
 80128e4:	f7fc ff3c 	bl	800f760 <_Z25getFont_Asap_Bold_40_4bppv>
 80128e8:	4602      	mov	r2, r0
};
 80128ea:	4b0f      	ldr	r3, [pc, #60]	; (8012928 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80128ec:	605a      	str	r2, [r3, #4]
    &(getFont_Asap_Bold_30_4bpp()),
 80128ee:	f7fc fef5 	bl	800f6dc <_Z25getFont_Asap_Bold_30_4bppv>
 80128f2:	4602      	mov	r2, r0
};
 80128f4:	4b0c      	ldr	r3, [pc, #48]	; (8012928 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80128f6:	609a      	str	r2, [r3, #8]
    &(getFont_Asap_Bold_12_4bpp()),
 80128f8:	f7fc fe2a 	bl	800f550 <_Z25getFont_Asap_Bold_12_4bppv>
 80128fc:	4602      	mov	r2, r0
};
 80128fe:	4b0a      	ldr	r3, [pc, #40]	; (8012928 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8012900:	60da      	str	r2, [r3, #12]
    &(getFont_Asap_Bold_60_4bpp()),
 8012902:	f7fc ff6f 	bl	800f7e4 <_Z25getFont_Asap_Bold_60_4bppv>
 8012906:	4602      	mov	r2, r0
};
 8012908:	4b07      	ldr	r3, [pc, #28]	; (8012928 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 801290a:	611a      	str	r2, [r3, #16]
    &(getFont_Asap_Bold_21_4bpp()),
 801290c:	f7fc fea4 	bl	800f658 <_Z25getFont_Asap_Bold_21_4bppv>
 8012910:	4602      	mov	r2, r0
};
 8012912:	4b05      	ldr	r3, [pc, #20]	; (8012928 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8012914:	615a      	str	r2, [r3, #20]
    &(getFont_Asap_Bold_10_4bpp())
 8012916:	f7fc fdd9 	bl	800f4cc <_Z25getFont_Asap_Bold_10_4bppv>
 801291a:	4602      	mov	r2, r0
};
 801291c:	4b02      	ldr	r3, [pc, #8]	; (8012928 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 801291e:	619a      	str	r2, [r3, #24]
}  // namespace TypedTextDatabase
 8012920:	bf00      	nop
 8012922:	3708      	adds	r7, #8
 8012924:	46bd      	mov	sp, r7
 8012926:	bd80      	pop	{r7, pc}
 8012928:	20008644 	.word	0x20008644

0801292c <_GLOBAL__sub_I__fonts>:
 801292c:	b580      	push	{r7, lr}
 801292e:	af00      	add	r7, sp, #0
 8012930:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012934:	2001      	movs	r0, #1
 8012936:	f7ff ffc3 	bl	80128c0 <_Z41__static_initialization_and_destruction_0ii>
 801293a:	bd80      	pop	{r7, pc}

0801293c <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 801293c:	b580      	push	{r7, lr}
 801293e:	b082      	sub	sp, #8
 8012940:	af00      	add	r7, sp, #0
 8012942:	6078      	str	r0, [r7, #4]
 8012944:	4a05      	ldr	r2, [pc, #20]	; (801295c <_ZN19FrontendApplicationD1Ev+0x20>)
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	601a      	str	r2, [r3, #0]
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	4618      	mov	r0, r3
 801294e:	f7fd f9d9 	bl	800fd04 <_ZN23FrontendApplicationBaseD1Ev>
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	4618      	mov	r0, r3
 8012956:	3708      	adds	r7, #8
 8012958:	46bd      	mov	sp, r7
 801295a:	bd80      	pop	{r7, pc}
 801295c:	080268b0 	.word	0x080268b0

08012960 <_ZN19FrontendApplicationD0Ev>:
 8012960:	b580      	push	{r7, lr}
 8012962:	b082      	sub	sp, #8
 8012964:	af00      	add	r7, sp, #0
 8012966:	6078      	str	r0, [r7, #4]
 8012968:	6878      	ldr	r0, [r7, #4]
 801296a:	f7ff ffe7 	bl	801293c <_ZN19FrontendApplicationD1Ev>
 801296e:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8012972:	6878      	ldr	r0, [r7, #4]
 8012974:	f012 f92d 	bl	8024bd2 <_ZdlPvj>
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	4618      	mov	r0, r3
 801297c:	3708      	adds	r7, #8
 801297e:	46bd      	mov	sp, r7
 8012980:	bd80      	pop	{r7, pc}

08012982 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8012982:	b580      	push	{r7, lr}
 8012984:	b082      	sub	sp, #8
 8012986:	af00      	add	r7, sp, #0
 8012988:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8012990:	4618      	mov	r0, r3
 8012992:	f000 fc53 	bl	801323c <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	4618      	mov	r0, r3
 801299a:	f006 f86b 	bl	8018a74 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 801299e:	bf00      	nop
 80129a0:	3708      	adds	r7, #8
 80129a2:	46bd      	mov	sp, r7
 80129a4:	bd80      	pop	{r7, pc}
	...

080129a8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 80129a8:	b580      	push	{r7, lr}
 80129aa:	b084      	sub	sp, #16
 80129ac:	af00      	add	r7, sp, #0
 80129ae:	60f8      	str	r0, [r7, #12]
 80129b0:	60b9      	str	r1, [r7, #8]
 80129b2:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	687a      	ldr	r2, [r7, #4]
 80129b8:	68b9      	ldr	r1, [r7, #8]
 80129ba:	4618      	mov	r0, r3
 80129bc:	f7fd fa1c 	bl	800fdf8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 80129c0:	4a03      	ldr	r2, [pc, #12]	; (80129d0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 80129c2:	68fb      	ldr	r3, [r7, #12]
 80129c4:	601a      	str	r2, [r3, #0]
{
}
 80129c6:	68fb      	ldr	r3, [r7, #12]
 80129c8:	4618      	mov	r0, r3
 80129ca:	3710      	adds	r7, #16
 80129cc:	46bd      	mov	sp, r7
 80129ce:	bd80      	pop	{r7, pc}
 80129d0:	080268b0 	.word	0x080268b0

080129d4 <_ZN8touchgfx9Presenter8activateEv>:
     * @brief Place initialization code for the Presenter here.
     *
     *        The activate function is called automatically when a screen transition causes
     *        this Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 80129d4:	b480      	push	{r7}
 80129d6:	b083      	sub	sp, #12
 80129d8:	af00      	add	r7, sp, #0
 80129da:	6078      	str	r0, [r7, #4]
    {
    }
 80129dc:	bf00      	nop
 80129de:	370c      	adds	r7, #12
 80129e0:	46bd      	mov	sp, r7
 80129e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129e6:	4770      	bx	lr

080129e8 <_ZN8touchgfx9Presenter10deactivateEv>:
     * @brief Place cleanup code for the Presenter here.
     *
     *        The deactivate function is called automatically when a screen transition causes
     *        this Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 80129e8:	b480      	push	{r7}
 80129ea:	b083      	sub	sp, #12
 80129ec:	af00      	add	r7, sp, #0
 80129ee:	6078      	str	r0, [r7, #4]
    {
    }
 80129f0:	bf00      	nop
 80129f2:	370c      	adds	r7, #12
 80129f4:	46bd      	mov	sp, r7
 80129f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129fa:	4770      	bx	lr

080129fc <_ZN8touchgfx9PresenterD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Presenter()
 80129fc:	b480      	push	{r7}
 80129fe:	b083      	sub	sp, #12
 8012a00:	af00      	add	r7, sp, #0
 8012a02:	6078      	str	r0, [r7, #4]
    {
 8012a04:	4a04      	ldr	r2, [pc, #16]	; (8012a18 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	601a      	str	r2, [r3, #0]
    }
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	4618      	mov	r0, r3
 8012a0e:	370c      	adds	r7, #12
 8012a10:	46bd      	mov	sp, r7
 8012a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a16:	4770      	bx	lr
 8012a18:	0802693c 	.word	0x0802693c

08012a1c <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8012a1c:	b580      	push	{r7, lr}
 8012a1e:	b082      	sub	sp, #8
 8012a20:	af00      	add	r7, sp, #0
 8012a22:	6078      	str	r0, [r7, #4]
    }
 8012a24:	6878      	ldr	r0, [r7, #4]
 8012a26:	f7ff ffe9 	bl	80129fc <_ZN8touchgfx9PresenterD1Ev>
 8012a2a:	2104      	movs	r1, #4
 8012a2c:	6878      	ldr	r0, [r7, #4]
 8012a2e:	f012 f8d0 	bl	8024bd2 <_ZdlPvj>
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	4618      	mov	r0, r3
 8012a36:	3708      	adds	r7, #8
 8012a38:	46bd      	mov	sp, r7
 8012a3a:	bd80      	pop	{r7, pc}

08012a3c <_ZN8touchgfx9PresenterC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Presenter()
 8012a3c:	b480      	push	{r7}
 8012a3e:	b083      	sub	sp, #12
 8012a40:	af00      	add	r7, sp, #0
 8012a42:	6078      	str	r0, [r7, #4]
    {
 8012a44:	4a04      	ldr	r2, [pc, #16]	; (8012a58 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	601a      	str	r2, [r3, #0]
    }
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	4618      	mov	r0, r3
 8012a4e:	370c      	adds	r7, #12
 8012a50:	46bd      	mov	sp, r7
 8012a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a56:	4770      	bx	lr
 8012a58:	0802693c 	.word	0x0802693c

08012a5c <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8012a5c:	b480      	push	{r7}
 8012a5e:	b083      	sub	sp, #12
 8012a60:	af00      	add	r7, sp, #0
 8012a62:	6078      	str	r0, [r7, #4]
 8012a64:	4a06      	ldr	r2, [pc, #24]	; (8012a80 <_ZN13ModelListenerC1Ev+0x24>)
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	601a      	str	r2, [r3, #0]
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	2200      	movs	r2, #0
 8012a6e:	605a      	str	r2, [r3, #4]
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	4618      	mov	r0, r3
 8012a74:	370c      	adds	r7, #12
 8012a76:	46bd      	mov	sp, r7
 8012a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a7c:	4770      	bx	lr
 8012a7e:	bf00      	nop
 8012a80:	08026924 	.word	0x08026924

08012a84 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8012a84:	b480      	push	{r7}
 8012a86:	b083      	sub	sp, #12
 8012a88:	af00      	add	r7, sp, #0
 8012a8a:	6078      	str	r0, [r7, #4]
 8012a8c:	4a04      	ldr	r2, [pc, #16]	; (8012aa0 <_ZN13ModelListenerD1Ev+0x1c>)
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	601a      	str	r2, [r3, #0]
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	4618      	mov	r0, r3
 8012a96:	370c      	adds	r7, #12
 8012a98:	46bd      	mov	sp, r7
 8012a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a9e:	4770      	bx	lr
 8012aa0:	08026924 	.word	0x08026924

08012aa4 <_ZN13ModelListenerD0Ev>:
 8012aa4:	b580      	push	{r7, lr}
 8012aa6:	b082      	sub	sp, #8
 8012aa8:	af00      	add	r7, sp, #0
 8012aaa:	6078      	str	r0, [r7, #4]
 8012aac:	6878      	ldr	r0, [r7, #4]
 8012aae:	f7ff ffe9 	bl	8012a84 <_ZN13ModelListenerD1Ev>
 8012ab2:	2108      	movs	r1, #8
 8012ab4:	6878      	ldr	r0, [r7, #4]
 8012ab6:	f012 f88c 	bl	8024bd2 <_ZdlPvj>
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	4618      	mov	r0, r3
 8012abe:	3708      	adds	r7, #8
 8012ac0:	46bd      	mov	sp, r7
 8012ac2:	bd80      	pop	{r7, pc}

08012ac4 <_ZN13ModelListener11setNewValueEPh>:

    virtual void setNewValue(uint8_t* newValue){}
 8012ac4:	b480      	push	{r7}
 8012ac6:	b083      	sub	sp, #12
 8012ac8:	af00      	add	r7, sp, #0
 8012aca:	6078      	str	r0, [r7, #4]
 8012acc:	6039      	str	r1, [r7, #0]
 8012ace:	bf00      	nop
 8012ad0:	370c      	adds	r7, #12
 8012ad2:	46bd      	mov	sp, r7
 8012ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ad8:	4770      	bx	lr

08012ada <_ZN13ModelListener21updateDisplaySettingsEPh>:
    virtual void updateDisplaySettings(uint8_t* settings){}
 8012ada:	b480      	push	{r7}
 8012adc:	b083      	sub	sp, #12
 8012ade:	af00      	add	r7, sp, #0
 8012ae0:	6078      	str	r0, [r7, #4]
 8012ae2:	6039      	str	r1, [r7, #0]
 8012ae4:	bf00      	nop
 8012ae6:	370c      	adds	r7, #12
 8012ae8:	46bd      	mov	sp, r7
 8012aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aee:	4770      	bx	lr

08012af0 <_ZN13MainPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MainPresenter() {};
 8012af0:	b580      	push	{r7, lr}
 8012af2:	b082      	sub	sp, #8
 8012af4:	af00      	add	r7, sp, #0
 8012af6:	6078      	str	r0, [r7, #4]
 8012af8:	4a09      	ldr	r2, [pc, #36]	; (8012b20 <_ZN13MainPresenterD1Ev+0x30>)
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	601a      	str	r2, [r3, #0]
 8012afe:	4a09      	ldr	r2, [pc, #36]	; (8012b24 <_ZN13MainPresenterD1Ev+0x34>)
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	605a      	str	r2, [r3, #4]
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	3304      	adds	r3, #4
 8012b08:	4618      	mov	r0, r3
 8012b0a:	f7ff ffbb 	bl	8012a84 <_ZN13ModelListenerD1Ev>
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	4618      	mov	r0, r3
 8012b12:	f7ff ff73 	bl	80129fc <_ZN8touchgfx9PresenterD1Ev>
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	4618      	mov	r0, r3
 8012b1a:	3708      	adds	r7, #8
 8012b1c:	46bd      	mov	sp, r7
 8012b1e:	bd80      	pop	{r7, pc}
 8012b20:	080268ec 	.word	0x080268ec
 8012b24:	0802690c 	.word	0x0802690c

08012b28 <_ZThn4_N13MainPresenterD1Ev>:
 8012b28:	f1a0 0004 	sub.w	r0, r0, #4
 8012b2c:	e7e0      	b.n	8012af0 <_ZN13MainPresenterD1Ev>
 8012b2e:	bf00      	nop

08012b30 <_ZN13MainPresenterD0Ev>:
 8012b30:	b580      	push	{r7, lr}
 8012b32:	b082      	sub	sp, #8
 8012b34:	af00      	add	r7, sp, #0
 8012b36:	6078      	str	r0, [r7, #4]
 8012b38:	6878      	ldr	r0, [r7, #4]
 8012b3a:	f7ff ffd9 	bl	8012af0 <_ZN13MainPresenterD1Ev>
 8012b3e:	2110      	movs	r1, #16
 8012b40:	6878      	ldr	r0, [r7, #4]
 8012b42:	f012 f846 	bl	8024bd2 <_ZdlPvj>
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	4618      	mov	r0, r3
 8012b4a:	3708      	adds	r7, #8
 8012b4c:	46bd      	mov	sp, r7
 8012b4e:	bd80      	pop	{r7, pc}

08012b50 <_ZThn4_N13MainPresenterD0Ev>:
 8012b50:	f1a0 0004 	sub.w	r0, r0, #4
 8012b54:	e7ec      	b.n	8012b30 <_ZN13MainPresenterD0Ev>
	...

08012b58 <_ZN13MainPresenterC1ER8MainView>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

MainPresenter::MainPresenter(MainView& v)
 8012b58:	b580      	push	{r7, lr}
 8012b5a:	b082      	sub	sp, #8
 8012b5c:	af00      	add	r7, sp, #0
 8012b5e:	6078      	str	r0, [r7, #4]
 8012b60:	6039      	str	r1, [r7, #0]
    : view(v)
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	4618      	mov	r0, r3
 8012b66:	f7ff ff69 	bl	8012a3c <_ZN8touchgfx9PresenterC1Ev>
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	3304      	adds	r3, #4
 8012b6e:	4618      	mov	r0, r3
 8012b70:	f7ff ff74 	bl	8012a5c <_ZN13ModelListenerC1Ev>
 8012b74:	4a06      	ldr	r2, [pc, #24]	; (8012b90 <_ZN13MainPresenterC1ER8MainView+0x38>)
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	601a      	str	r2, [r3, #0]
 8012b7a:	4a06      	ldr	r2, [pc, #24]	; (8012b94 <_ZN13MainPresenterC1ER8MainView+0x3c>)
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	605a      	str	r2, [r3, #4]
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	683a      	ldr	r2, [r7, #0]
 8012b84:	60da      	str	r2, [r3, #12]
{
}
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	4618      	mov	r0, r3
 8012b8a:	3708      	adds	r7, #8
 8012b8c:	46bd      	mov	sp, r7
 8012b8e:	bd80      	pop	{r7, pc}
 8012b90:	080268ec 	.word	0x080268ec
 8012b94:	0802690c 	.word	0x0802690c

08012b98 <_ZN13MainPresenter8activateEv>:

void MainPresenter::activate()
{
 8012b98:	b480      	push	{r7}
 8012b9a:	b083      	sub	sp, #12
 8012b9c:	af00      	add	r7, sp, #0
 8012b9e:	6078      	str	r0, [r7, #4]
}
 8012ba0:	bf00      	nop
 8012ba2:	370c      	adds	r7, #12
 8012ba4:	46bd      	mov	sp, r7
 8012ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012baa:	4770      	bx	lr

08012bac <_ZN13MainPresenter10deactivateEv>:

void MainPresenter::deactivate()
{
 8012bac:	b480      	push	{r7}
 8012bae:	b083      	sub	sp, #12
 8012bb0:	af00      	add	r7, sp, #0
 8012bb2:	6078      	str	r0, [r7, #4]
}
 8012bb4:	bf00      	nop
 8012bb6:	370c      	adds	r7, #12
 8012bb8:	46bd      	mov	sp, r7
 8012bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bbe:	4770      	bx	lr

08012bc0 <_ZN13MainPresenter11setNewValueEPh>:

void MainPresenter::setNewValue(uint8_t* newValue)
{
 8012bc0:	b580      	push	{r7, lr}
 8012bc2:	b082      	sub	sp, #8
 8012bc4:	af00      	add	r7, sp, #0
 8012bc6:	6078      	str	r0, [r7, #4]
 8012bc8:	6039      	str	r1, [r7, #0]
	view.updateVal(newValue);
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	68db      	ldr	r3, [r3, #12]
 8012bce:	6839      	ldr	r1, [r7, #0]
 8012bd0:	4618      	mov	r0, r3
 8012bd2:	f000 f9f7 	bl	8012fc4 <_ZN8MainView9updateValEPh>
}
 8012bd6:	bf00      	nop
 8012bd8:	3708      	adds	r7, #8
 8012bda:	46bd      	mov	sp, r7
 8012bdc:	bd80      	pop	{r7, pc}

08012bde <_ZThn4_N13MainPresenter11setNewValueEPh>:

    void setNewValue(uint8_t* newValue);
 8012bde:	f1a0 0004 	sub.w	r0, r0, #4
 8012be2:	f7ff bfed 	b.w	8012bc0 <_ZN13MainPresenter11setNewValueEPh>

08012be6 <_ZN13MainPresenter21updateDisplaySettingsEPh>:

void MainPresenter::updateDisplaySettings(uint8_t* settings)
{
 8012be6:	b580      	push	{r7, lr}
 8012be8:	b082      	sub	sp, #8
 8012bea:	af00      	add	r7, sp, #0
 8012bec:	6078      	str	r0, [r7, #4]
 8012bee:	6039      	str	r1, [r7, #0]
	view.updateSettings(settings);
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	68db      	ldr	r3, [r3, #12]
 8012bf4:	6839      	ldr	r1, [r7, #0]
 8012bf6:	4618      	mov	r0, r3
 8012bf8:	f000 f908 	bl	8012e0c <_ZN8MainView14updateSettingsEPh>
}
 8012bfc:	bf00      	nop
 8012bfe:	3708      	adds	r7, #8
 8012c00:	46bd      	mov	sp, r7
 8012c02:	bd80      	pop	{r7, pc}

08012c04 <_ZThn4_N13MainPresenter21updateDisplaySettingsEPh>:
    void updateDisplaySettings(uint8_t* settings);
 8012c04:	f1a0 0004 	sub.w	r0, r0, #4
 8012c08:	f7ff bfed 	b.w	8012be6 <_ZN13MainPresenter21updateDisplaySettingsEPh>

08012c0c <_ZN8touchgfx9colortypeC1Ev>:
    colortype() : color(0) {}
 8012c0c:	b480      	push	{r7}
 8012c0e:	b083      	sub	sp, #12
 8012c10:	af00      	add	r7, sp, #0
 8012c12:	6078      	str	r0, [r7, #4]
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	2200      	movs	r2, #0
 8012c18:	601a      	str	r2, [r3, #0]
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	4618      	mov	r0, r3
 8012c1e:	370c      	adds	r7, #12
 8012c20:	46bd      	mov	sp, r7
 8012c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c26:	4770      	bx	lr

08012c28 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>:
     *          touchgfx::Unicode::snprintfFloats(dst, dstSize, tmpfmt, values);
     *          \endcode
     *
     * @see snprintf, snprintfFloats
     */
    static UnicodeChar* snprintfFloat(UnicodeChar* dst, uint16_t dstSize, const char* format, const float value)
 8012c28:	b580      	push	{r7, lr}
 8012c2a:	b084      	sub	sp, #16
 8012c2c:	af00      	add	r7, sp, #0
 8012c2e:	60f8      	str	r0, [r7, #12]
 8012c30:	460b      	mov	r3, r1
 8012c32:	607a      	str	r2, [r7, #4]
 8012c34:	ed87 0a00 	vstr	s0, [r7]
 8012c38:	817b      	strh	r3, [r7, #10]
    {
        return snprintfFloats(dst, dstSize, format, &value);
 8012c3a:	463b      	mov	r3, r7
 8012c3c:	8979      	ldrh	r1, [r7, #10]
 8012c3e:	687a      	ldr	r2, [r7, #4]
 8012c40:	68f8      	ldr	r0, [r7, #12]
 8012c42:	f008 f9b3 	bl	801afac <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
 8012c46:	4603      	mov	r3, r0
    }
 8012c48:	4618      	mov	r0, r3
 8012c4a:	3710      	adds	r7, #16
 8012c4c:	46bd      	mov	sp, r7
 8012c4e:	bd80      	pop	{r7, pc}

08012c50 <_ZNK8touchgfx8Drawable8getWidthEv>:
    int16_t getWidth() const
 8012c50:	b480      	push	{r7}
 8012c52:	b083      	sub	sp, #12
 8012c54:	af00      	add	r7, sp, #0
 8012c56:	6078      	str	r0, [r7, #4]
        return rect.width;
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 8012c5e:	4618      	mov	r0, r3
 8012c60:	370c      	adds	r7, #12
 8012c62:	46bd      	mov	sp, r7
 8012c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c68:	4770      	bx	lr

08012c6a <_ZNK8touchgfx8Drawable9getHeightEv>:
    int16_t getHeight() const
 8012c6a:	b480      	push	{r7}
 8012c6c:	b083      	sub	sp, #12
 8012c6e:	af00      	add	r7, sp, #0
 8012c70:	6078      	str	r0, [r7, #4]
        return rect.height;
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 8012c78:	4618      	mov	r0, r3
 8012c7a:	370c      	adds	r7, #12
 8012c7c:	46bd      	mov	sp, r7
 8012c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c82:	4770      	bx	lr

08012c84 <_ZN8MainViewD1Ev>:

class MainView : public MainViewBase
{
public:
    MainView();
    virtual ~MainView() {}
 8012c84:	b580      	push	{r7, lr}
 8012c86:	b082      	sub	sp, #8
 8012c88:	af00      	add	r7, sp, #0
 8012c8a:	6078      	str	r0, [r7, #4]
 8012c8c:	4a05      	ldr	r2, [pc, #20]	; (8012ca4 <_ZN8MainViewD1Ev+0x20>)
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	601a      	str	r2, [r3, #0]
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	4618      	mov	r0, r3
 8012c96:	f7fe f829 	bl	8010cec <_ZN12MainViewBaseD1Ev>
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	4618      	mov	r0, r3
 8012c9e:	3708      	adds	r7, #8
 8012ca0:	46bd      	mov	sp, r7
 8012ca2:	bd80      	pop	{r7, pc}
 8012ca4:	08026954 	.word	0x08026954

08012ca8 <_ZN8MainViewD0Ev>:
 8012ca8:	b580      	push	{r7, lr}
 8012caa:	b082      	sub	sp, #8
 8012cac:	af00      	add	r7, sp, #0
 8012cae:	6078      	str	r0, [r7, #4]
 8012cb0:	6878      	ldr	r0, [r7, #4]
 8012cb2:	f7ff ffe7 	bl	8012c84 <_ZN8MainViewD1Ev>
 8012cb6:	f242 7104 	movw	r1, #9988	; 0x2704
 8012cba:	6878      	ldr	r0, [r7, #4]
 8012cbc:	f011 ff89 	bl	8024bd2 <_ZdlPvj>
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	4618      	mov	r0, r3
 8012cc4:	3708      	adds	r7, #8
 8012cc6:	46bd      	mov	sp, r7
 8012cc8:	bd80      	pop	{r7, pc}
	...

08012ccc <_ZN8MainViewC1Ev>:
#include <touchgfx/Color.hpp>

static int color_index = 0;
static int rev_limit = 9000;

MainView::MainView()
 8012ccc:	b590      	push	{r4, r7, lr}
 8012cce:	b083      	sub	sp, #12
 8012cd0:	af00      	add	r7, sp, #0
 8012cd2:	6078      	str	r0, [r7, #4]
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	4618      	mov	r0, r3
 8012cd8:	f7fe f942 	bl	8010f60 <_ZN12MainViewBaseC1Ev>
 8012cdc:	4a15      	ldr	r2, [pc, #84]	; (8012d34 <_ZN8MainViewC1Ev+0x68>)
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	601a      	str	r2, [r3, #0]
{
    // Support of larger displays for this example
    // is handled by showing a black box in the
    // unused part of the display.
    if (HAL::DISPLAY_WIDTH > backgroundImage.getWidth() ||
 8012ce2:	4b15      	ldr	r3, [pc, #84]	; (8012d38 <_ZN8MainViewC1Ev+0x6c>)
 8012ce4:	881b      	ldrh	r3, [r3, #0]
 8012ce6:	461c      	mov	r4, r3
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012cee:	4618      	mov	r0, r3
 8012cf0:	f7ff ffae 	bl	8012c50 <_ZNK8touchgfx8Drawable8getWidthEv>
 8012cf4:	4603      	mov	r3, r0
 8012cf6:	429c      	cmp	r4, r3
 8012cf8:	dc0b      	bgt.n	8012d12 <_ZN8MainViewC1Ev+0x46>
            HAL::DISPLAY_HEIGHT > backgroundImage.getHeight())
 8012cfa:	4b10      	ldr	r3, [pc, #64]	; (8012d3c <_ZN8MainViewC1Ev+0x70>)
 8012cfc:	881b      	ldrh	r3, [r3, #0]
 8012cfe:	461c      	mov	r4, r3
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012d06:	4618      	mov	r0, r3
 8012d08:	f7ff ffaf 	bl	8012c6a <_ZNK8touchgfx8Drawable9getHeightEv>
 8012d0c:	4603      	mov	r3, r0
    if (HAL::DISPLAY_WIDTH > backgroundImage.getWidth() ||
 8012d0e:	429c      	cmp	r4, r3
 8012d10:	dd01      	ble.n	8012d16 <_ZN8MainViewC1Ev+0x4a>
 8012d12:	2301      	movs	r3, #1
 8012d14:	e000      	b.n	8012d18 <_ZN8MainViewC1Ev+0x4c>
 8012d16:	2300      	movs	r3, #0
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d005      	beq.n	8012d28 <_ZN8MainViewC1Ev+0x5c>
    {
        backgroundBox.setVisible(true);
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	3340      	adds	r3, #64	; 0x40
 8012d20:	2101      	movs	r1, #1
 8012d22:	4618      	mov	r0, r3
 8012d24:	f7fd fc20 	bl	8010568 <_ZN8touchgfx8Drawable10setVisibleEb>
    }
}
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	4618      	mov	r0, r3
 8012d2c:	370c      	adds	r7, #12
 8012d2e:	46bd      	mov	sp, r7
 8012d30:	bd90      	pop	{r4, r7, pc}
 8012d32:	bf00      	nop
 8012d34:	08026954 	.word	0x08026954
 8012d38:	2000bc70 	.word	0x2000bc70
 8012d3c:	2000bc72 	.word	0x2000bc72

08012d40 <_ZN8MainView11setupScreenEv>:

void MainView::setupScreen()
{
 8012d40:	b480      	push	{r7}
 8012d42:	b083      	sub	sp, #12
 8012d44:	af00      	add	r7, sp, #0
 8012d46:	6078      	str	r0, [r7, #4]
}
 8012d48:	bf00      	nop
 8012d4a:	370c      	adds	r7, #12
 8012d4c:	46bd      	mov	sp, r7
 8012d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d52:	4770      	bx	lr

08012d54 <_ZN8MainView14tearDownScreenEv>:

void MainView::tearDownScreen()
{
 8012d54:	b480      	push	{r7}
 8012d56:	b083      	sub	sp, #12
 8012d58:	af00      	add	r7, sp, #0
 8012d5a:	6078      	str	r0, [r7, #4]
}
 8012d5c:	bf00      	nop
 8012d5e:	370c      	adds	r7, #12
 8012d60:	46bd      	mov	sp, r7
 8012d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d66:	4770      	bx	lr

08012d68 <_ZL13getBlackColorv>:

static colortype getBlackColor()
{
 8012d68:	b580      	push	{r7, lr}
 8012d6a:	b082      	sub	sp, #8
 8012d6c:	af00      	add	r7, sp, #0
	colortype black_color = touchgfx::Color::getColorFrom24BitRGB(0,0,0);
 8012d6e:	2200      	movs	r2, #0
 8012d70:	2100      	movs	r1, #0
 8012d72:	2000      	movs	r0, #0
 8012d74:	f7fe f8ca 	bl	8010f0c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012d78:	4603      	mov	r3, r0
 8012d7a:	607b      	str	r3, [r7, #4]
}
 8012d7c:	bf00      	nop
 8012d7e:	4618      	mov	r0, r3
 8012d80:	3708      	adds	r7, #8
 8012d82:	46bd      	mov	sp, r7
 8012d84:	bd80      	pop	{r7, pc}
	...

08012d88 <_ZL20getColorFromRevLimitv>:

static colortype getColorFromRevLimit()
{
 8012d88:	b580      	push	{r7, lr}
 8012d8a:	b084      	sub	sp, #16
 8012d8c:	af00      	add	r7, sp, #0

	color_index ++;
 8012d8e:	4b1e      	ldr	r3, [pc, #120]	; (8012e08 <_ZL20getColorFromRevLimitv+0x80>)
 8012d90:	681b      	ldr	r3, [r3, #0]
 8012d92:	3301      	adds	r3, #1
 8012d94:	4a1c      	ldr	r2, [pc, #112]	; (8012e08 <_ZL20getColorFromRevLimitv+0x80>)
 8012d96:	6013      	str	r3, [r2, #0]
	if(color_index >= 3)
 8012d98:	4b1b      	ldr	r3, [pc, #108]	; (8012e08 <_ZL20getColorFromRevLimitv+0x80>)
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	2b02      	cmp	r3, #2
 8012d9e:	dd02      	ble.n	8012da6 <_ZL20getColorFromRevLimitv+0x1e>
	{
		color_index = 0;
 8012da0:	4b19      	ldr	r3, [pc, #100]	; (8012e08 <_ZL20getColorFromRevLimitv+0x80>)
 8012da2:	2200      	movs	r2, #0
 8012da4:	601a      	str	r2, [r3, #0]
	}

	colortype red_color = touchgfx::Color::getColorFrom24BitRGB(255,0,0);
 8012da6:	2200      	movs	r2, #0
 8012da8:	2100      	movs	r1, #0
 8012daa:	20ff      	movs	r0, #255	; 0xff
 8012dac:	f7fe f8ae 	bl	8010f0c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012db0:	4603      	mov	r3, r0
 8012db2:	60fb      	str	r3, [r7, #12]
	colortype black_color = touchgfx::Color::getColorFrom24BitRGB(0,0,0);
 8012db4:	2200      	movs	r2, #0
 8012db6:	2100      	movs	r1, #0
 8012db8:	2000      	movs	r0, #0
 8012dba:	f7fe f8a7 	bl	8010f0c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012dbe:	4603      	mov	r3, r0
 8012dc0:	60bb      	str	r3, [r7, #8]
	colortype white_color = touchgfx::Color::getColorFrom24BitRGB(255,255,255);
 8012dc2:	22ff      	movs	r2, #255	; 0xff
 8012dc4:	21ff      	movs	r1, #255	; 0xff
 8012dc6:	20ff      	movs	r0, #255	; 0xff
 8012dc8:	f7fe f8a0 	bl	8010f0c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012dcc:	4603      	mov	r3, r0
 8012dce:	607b      	str	r3, [r7, #4]

	colortype color_to_set;
 8012dd0:	463b      	mov	r3, r7
 8012dd2:	4618      	mov	r0, r3
 8012dd4:	f7ff ff1a 	bl	8012c0c <_ZN8touchgfx9colortypeC1Ev>

	if(color_index == 0)
 8012dd8:	4b0b      	ldr	r3, [pc, #44]	; (8012e08 <_ZL20getColorFromRevLimitv+0x80>)
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d101      	bne.n	8012de4 <_ZL20getColorFromRevLimitv+0x5c>
	{
		color_to_set = red_color;
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	603b      	str	r3, [r7, #0]
	}
	if(color_index == 1)
 8012de4:	4b08      	ldr	r3, [pc, #32]	; (8012e08 <_ZL20getColorFromRevLimitv+0x80>)
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	2b01      	cmp	r3, #1
 8012dea:	d101      	bne.n	8012df0 <_ZL20getColorFromRevLimitv+0x68>
	{
		color_to_set = black_color;
 8012dec:	68bb      	ldr	r3, [r7, #8]
 8012dee:	603b      	str	r3, [r7, #0]
	}
	if(color_index == 2)
 8012df0:	4b05      	ldr	r3, [pc, #20]	; (8012e08 <_ZL20getColorFromRevLimitv+0x80>)
 8012df2:	681b      	ldr	r3, [r3, #0]
 8012df4:	2b02      	cmp	r3, #2
 8012df6:	d101      	bne.n	8012dfc <_ZL20getColorFromRevLimitv+0x74>
	{
		color_to_set = white_color;
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	603b      	str	r3, [r7, #0]
	}

	return color_to_set;
 8012dfc:	683b      	ldr	r3, [r7, #0]
}
 8012dfe:	4618      	mov	r0, r3
 8012e00:	3710      	adds	r7, #16
 8012e02:	46bd      	mov	sp, r7
 8012e04:	bd80      	pop	{r7, pc}
 8012e06:	bf00      	nop
 8012e08:	20008660 	.word	0x20008660

08012e0c <_ZN8MainView14updateSettingsEPh>:

void MainView::updateSettings(uint8_t* settings)
{
 8012e0c:	b580      	push	{r7, lr}
 8012e0e:	b086      	sub	sp, #24
 8012e10:	af02      	add	r7, sp, #8
 8012e12:	6078      	str	r0, [r7, #4]
 8012e14:	6039      	str	r1, [r7, #0]
	settings_message* new_settings = (settings_message*) settings;
 8012e16:	683b      	ldr	r3, [r7, #0]
 8012e18:	60fb      	str	r3, [r7, #12]

	rev_limit = (int)new_settings->rpm_limit;
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	4a66      	ldr	r2, [pc, #408]	; (8012fb8 <_ZN8MainView14updateSettingsEPh+0x1ac>)
 8012e20:	6013      	str	r3, [r2, #0]

	RPMProgressBar.setRange(0, (int)(new_settings->rpm8*1000.0f), 0, 0);
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	f503 6005 	add.w	r0, r3, #2128	; 0x850
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	6a1b      	ldr	r3, [r3, #32]
 8012e2c:	ee07 3a90 	vmov	s15, r3
 8012e30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012e34:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8012fbc <_ZN8MainView14updateSettingsEPh+0x1b0>
 8012e38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012e3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012e40:	ee17 3a90 	vmov	r3, s15
 8012e44:	b21a      	sxth	r2, r3
 8012e46:	2300      	movs	r3, #0
 8012e48:	9300      	str	r3, [sp, #0]
 8012e4a:	2300      	movs	r3, #0
 8012e4c:	2100      	movs	r1, #0
 8012e4e:	f002 fc27 	bl	80156a0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
	RPMProgressBar.invalidate();
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 8012e58:	4618      	mov	r0, r3
 8012e5a:	f006 fb1f 	bl	801949c <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(rpm1Buffer, RPM1_SIZE, "%d", new_settings->rpm1);
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	f603 2068 	addw	r0, r3, #2664	; 0xa68
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	685b      	ldr	r3, [r3, #4]
 8012e68:	4a55      	ldr	r2, [pc, #340]	; (8012fc0 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8012e6a:	2102      	movs	r1, #2
 8012e6c:	f007 ff44 	bl	801acf8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm1.resizeToCurrentText();
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8012e76:	4618      	mov	r0, r3
 8012e78:	f004 fb6a 	bl	8017550 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm1.invalidate();
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8012e82:	4618      	mov	r0, r3
 8012e84:	f006 fb0a 	bl	801949c <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm2Buffer, RPM2_SIZE, "%d", new_settings->rpm2);
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	f603 206c 	addw	r0, r3, #2668	; 0xa6c
 8012e8e:	68fb      	ldr	r3, [r7, #12]
 8012e90:	689b      	ldr	r3, [r3, #8]
 8012e92:	4a4b      	ldr	r2, [pc, #300]	; (8012fc0 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8012e94:	2102      	movs	r1, #2
 8012e96:	f007 ff2f 	bl	801acf8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm2.resizeToCurrentText();
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8012ea0:	4618      	mov	r0, r3
 8012ea2:	f004 fb55 	bl	8017550 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm2.invalidate();
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8012eac:	4618      	mov	r0, r3
 8012eae:	f006 faf5 	bl	801949c <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm3Buffer, RPM3_SIZE, "%d", new_settings->rpm3);
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	f503 6027 	add.w	r0, r3, #2672	; 0xa70
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	68db      	ldr	r3, [r3, #12]
 8012ebc:	4a40      	ldr	r2, [pc, #256]	; (8012fc0 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8012ebe:	2102      	movs	r1, #2
 8012ec0:	f007 ff1a 	bl	801acf8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm3.resizeToCurrentText();
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8012eca:	4618      	mov	r0, r3
 8012ecc:	f004 fb40 	bl	8017550 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm3.invalidate();
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8012ed6:	4618      	mov	r0, r3
 8012ed8:	f006 fae0 	bl	801949c <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm4Buffer, RPM4_SIZE, "%d", new_settings->rpm4);
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	f603 2074 	addw	r0, r3, #2676	; 0xa74
 8012ee2:	68fb      	ldr	r3, [r7, #12]
 8012ee4:	691b      	ldr	r3, [r3, #16]
 8012ee6:	4a36      	ldr	r2, [pc, #216]	; (8012fc0 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8012ee8:	2102      	movs	r1, #2
 8012eea:	f007 ff05 	bl	801acf8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm4.resizeToCurrentText();
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8012ef4:	4618      	mov	r0, r3
 8012ef6:	f004 fb2b 	bl	8017550 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm4.invalidate();
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8012f00:	4618      	mov	r0, r3
 8012f02:	f006 facb 	bl	801949c <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm5Buffer, RPM5_SIZE, "%d", new_settings->rpm5);
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	f603 2078 	addw	r0, r3, #2680	; 0xa78
 8012f0c:	68fb      	ldr	r3, [r7, #12]
 8012f0e:	695b      	ldr	r3, [r3, #20]
 8012f10:	4a2b      	ldr	r2, [pc, #172]	; (8012fc0 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8012f12:	2102      	movs	r1, #2
 8012f14:	f007 fef0 	bl	801acf8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm5.resizeToCurrentText();
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 8012f1e:	4618      	mov	r0, r3
 8012f20:	f004 fb16 	bl	8017550 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm5.invalidate();
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 8012f2a:	4618      	mov	r0, r3
 8012f2c:	f006 fab6 	bl	801949c <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm6Buffer, RPM6_SIZE, "%d", new_settings->rpm6);
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	f603 207c 	addw	r0, r3, #2684	; 0xa7c
 8012f36:	68fb      	ldr	r3, [r7, #12]
 8012f38:	699b      	ldr	r3, [r3, #24]
 8012f3a:	4a21      	ldr	r2, [pc, #132]	; (8012fc0 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8012f3c:	2102      	movs	r1, #2
 8012f3e:	f007 fedb 	bl	801acf8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm6.resizeToCurrentText();
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8012f48:	4618      	mov	r0, r3
 8012f4a:	f004 fb01 	bl	8017550 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm6.invalidate();
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8012f54:	4618      	mov	r0, r3
 8012f56:	f006 faa1 	bl	801949c <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm7Buffer, RPM7_SIZE, "%d", new_settings->rpm7);
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	f503 6028 	add.w	r0, r3, #2688	; 0xa80
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	69db      	ldr	r3, [r3, #28]
 8012f64:	4a16      	ldr	r2, [pc, #88]	; (8012fc0 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8012f66:	2102      	movs	r1, #2
 8012f68:	f007 fec6 	bl	801acf8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm7.resizeToCurrentText();
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8012f72:	4618      	mov	r0, r3
 8012f74:	f004 faec 	bl	8017550 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm7.invalidate();
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8012f7e:	4618      	mov	r0, r3
 8012f80:	f006 fa8c 	bl	801949c <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm8Buffer, RPM8_SIZE, "%d", new_settings->rpm8);
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	f603 2084 	addw	r0, r3, #2692	; 0xa84
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	6a1b      	ldr	r3, [r3, #32]
 8012f8e:	4a0c      	ldr	r2, [pc, #48]	; (8012fc0 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8012f90:	2102      	movs	r1, #2
 8012f92:	f007 feb1 	bl	801acf8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm8.resizeToCurrentText();
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	f503 7366 	add.w	r3, r3, #920	; 0x398
 8012f9c:	4618      	mov	r0, r3
 8012f9e:	f004 fad7 	bl	8017550 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm8.invalidate();
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	f503 7366 	add.w	r3, r3, #920	; 0x398
 8012fa8:	4618      	mov	r0, r3
 8012faa:	f006 fa77 	bl	801949c <_ZNK8touchgfx8Drawable10invalidateEv>

}
 8012fae:	bf00      	nop
 8012fb0:	3710      	adds	r7, #16
 8012fb2:	46bd      	mov	sp, r7
 8012fb4:	bd80      	pop	{r7, pc}
 8012fb6:	bf00      	nop
 8012fb8:	20000038 	.word	0x20000038
 8012fbc:	447a0000 	.word	0x447a0000
 8012fc0:	08026294 	.word	0x08026294

08012fc4 <_ZN8MainView9updateValEPh>:

void MainView::updateVal(uint8_t* newValue)
{
 8012fc4:	b590      	push	{r4, r7, lr}
 8012fc6:	b085      	sub	sp, #20
 8012fc8:	af00      	add	r7, sp, #0
 8012fca:	6078      	str	r0, [r7, #4]
 8012fcc:	6039      	str	r1, [r7, #0]

	static bool background_is_black = false;
	display_values* values = (display_values*) newValue;
 8012fce:	683b      	ldr	r3, [r7, #0]
 8012fd0:	60fb      	str	r3, [r7, #12]

	bool on_rev_limiter = values->rpm >= rev_limit;
 8012fd2:	68fb      	ldr	r3, [r7, #12]
 8012fd4:	681a      	ldr	r2, [r3, #0]
 8012fd6:	4b84      	ldr	r3, [pc, #528]	; (80131e8 <_ZN8MainView9updateValEPh+0x224>)
 8012fd8:	681b      	ldr	r3, [r3, #0]
 8012fda:	429a      	cmp	r2, r3
 8012fdc:	bfac      	ite	ge
 8012fde:	2301      	movge	r3, #1
 8012fe0:	2300      	movlt	r3, #0
 8012fe2:	72fb      	strb	r3, [r7, #11]
	if(on_rev_limiter)
 8012fe4:	7afb      	ldrb	r3, [r7, #11]
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d012      	beq.n	8013010 <_ZN8MainView9updateValEPh+0x4c>
	{
		background_is_black = false;
 8012fea:	4b80      	ldr	r3, [pc, #512]	; (80131ec <_ZN8MainView9updateValEPh+0x228>)
 8012fec:	2200      	movs	r2, #0
 8012fee:	701a      	strb	r2, [r3, #0]
		backgroundBox.setColor(getColorFromRevLimit());
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8012ff6:	f7ff fec7 	bl	8012d88 <_ZL20getColorFromRevLimitv>
 8012ffa:	4603      	mov	r3, r0
 8012ffc:	4619      	mov	r1, r3
 8012ffe:	4620      	mov	r0, r4
 8013000:	f7fd fc4e 	bl	80108a0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		backgroundBox.invalidate();
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	3340      	adds	r3, #64	; 0x40
 8013008:	4618      	mov	r0, r3
 801300a:	f006 fa47 	bl	801949c <_ZNK8touchgfx8Drawable10invalidateEv>
 801300e:	e018      	b.n	8013042 <_ZN8MainView9updateValEPh+0x7e>
	}
	else if(!background_is_black){
 8013010:	4b76      	ldr	r3, [pc, #472]	; (80131ec <_ZN8MainView9updateValEPh+0x228>)
 8013012:	781b      	ldrb	r3, [r3, #0]
 8013014:	f083 0301 	eor.w	r3, r3, #1
 8013018:	b2db      	uxtb	r3, r3
 801301a:	2b00      	cmp	r3, #0
 801301c:	d011      	beq.n	8013042 <_ZN8MainView9updateValEPh+0x7e>
		backgroundBox.setColor(getBlackColor());
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8013024:	f7ff fea0 	bl	8012d68 <_ZL13getBlackColorv>
 8013028:	4603      	mov	r3, r0
 801302a:	4619      	mov	r1, r3
 801302c:	4620      	mov	r0, r4
 801302e:	f7fd fc37 	bl	80108a0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		backgroundBox.invalidate();
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	3340      	adds	r3, #64	; 0x40
 8013036:	4618      	mov	r0, r3
 8013038:	f006 fa30 	bl	801949c <_ZNK8touchgfx8Drawable10invalidateEv>
		background_is_black = true;
 801303c:	4b6b      	ldr	r3, [pc, #428]	; (80131ec <_ZN8MainView9updateValEPh+0x228>)
 801303e:	2201      	movs	r2, #1
 8013040:	701a      	strb	r2, [r3, #0]
	}

	RPMProgressBar.setValue(values->rpm);
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	f503 6205 	add.w	r2, r3, #2128	; 0x850
 8013048:	68fb      	ldr	r3, [r7, #12]
 801304a:	681b      	ldr	r3, [r3, #0]
 801304c:	4619      	mov	r1, r3
 801304e:	4610      	mov	r0, r2
 8013050:	f002 fa10 	bl	8015474 <_ZN8touchgfx13ImageProgress8setValueEi>
	RPMProgressBar.invalidate();
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 801305a:	4618      	mov	r0, r3
 801305c:	f006 fa1e 	bl	801949c <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(RPMValueBuffer, RPMVALUE_SIZE, "%d", values->rpm);
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	f603 20ba 	addw	r0, r3, #2746	; 0xaba
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	4a61      	ldr	r2, [pc, #388]	; (80131f0 <_ZN8MainView9updateValEPh+0x22c>)
 801306c:	2105      	movs	r1, #5
 801306e:	f007 fe43 	bl	801acf8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	RPMValue.invalidate();
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 8013078:	4618      	mov	r0, r3
 801307a:	f006 fa0f 	bl	801949c <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(MAPValueBuffer, MAPVALUE_SIZE, "%d", values->map);
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	f603 20ce 	addw	r0, r3, #2766	; 0xace
 8013084:	68fb      	ldr	r3, [r7, #12]
 8013086:	689b      	ldr	r3, [r3, #8]
 8013088:	4a59      	ldr	r2, [pc, #356]	; (80131f0 <_ZN8MainView9updateValEPh+0x22c>)
 801308a:	2105      	movs	r1, #5
 801308c:	f007 fe34 	bl	801acf8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	MAPValue.invalidate();
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	f603 13e4 	addw	r3, r3, #2532	; 0x9e4
 8013096:	4618      	mov	r0, r3
 8013098:	f006 fa00 	bl	801949c <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(CLTValueBuffer, CLTVALUE_SIZE, "%d", values->clt);
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	f603 20c4 	addw	r0, r3, #2756	; 0xac4
 80130a2:	68fb      	ldr	r3, [r7, #12]
 80130a4:	685b      	ldr	r3, [r3, #4]
 80130a6:	4a52      	ldr	r2, [pc, #328]	; (80131f0 <_ZN8MainView9updateValEPh+0x22c>)
 80130a8:	2105      	movs	r1, #5
 80130aa:	f007 fe25 	bl	801acf8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	CLTValue.invalidate();
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	f603 13ac 	addw	r3, r3, #2476	; 0x9ac
 80130b4:	4618      	mov	r0, r3
 80130b6:	f006 f9f1 	bl	801949c <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintfFloat(LambdaValueBuffer, LAMBDAVALUE_SIZE, "%.2f",values->lambda);
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	f603 2054 	addw	r0, r3, #2644	; 0xa54
 80130c0:	68fb      	ldr	r3, [r7, #12]
 80130c2:	edd3 7a03 	vldr	s15, [r3, #12]
 80130c6:	eeb0 0a67 	vmov.f32	s0, s15
 80130ca:	4a4a      	ldr	r2, [pc, #296]	; (80131f4 <_ZN8MainView9updateValEPh+0x230>)
 80130cc:	2105      	movs	r1, #5
 80130ce:	f7ff fdab 	bl	8012c28 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	LambdaValue.invalidate();
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 80130d8:	4618      	mov	r0, r3
 80130da:	f006 f9df 	bl	801949c <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintfFloat(TrgtValueBuffer, TRGTVALUE_SIZE, "%.2f",values->lambda_trgt);
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	f603 205e 	addw	r0, r3, #2654	; 0xa5e
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	edd3 7a04 	vldr	s15, [r3, #16]
 80130ea:	eeb0 0a67 	vmov.f32	s0, s15
 80130ee:	4a41      	ldr	r2, [pc, #260]	; (80131f4 <_ZN8MainView9updateValEPh+0x230>)
 80130f0:	2105      	movs	r1, #5
 80130f2:	f7ff fd99 	bl	8012c28 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	TrgtValue.invalidate();
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80130fc:	4618      	mov	r0, r3
 80130fe:	f006 f9cd 	bl	801949c <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(KMHValueBuffer, KMHVALUE_SIZE, "%d",values->vehicle_spd);
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	f603 20d8 	addw	r0, r3, #2776	; 0xad8
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	695b      	ldr	r3, [r3, #20]
 801310c:	4a38      	ldr	r2, [pc, #224]	; (80131f0 <_ZN8MainView9updateValEPh+0x22c>)
 801310e:	2105      	movs	r1, #5
 8013110:	f007 fdf2 	bl	801acf8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	KMHValue.invalidate();
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	f603 231c 	addw	r3, r3, #2588	; 0xa1c
 801311a:	4618      	mov	r0, r3
 801311c:	f006 f9be 	bl	801949c <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintfFloat(OILPressureValueBuffer, OILPRESSUREVALUE_SIZE, "%.1f",values->oil_press);
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	f603 20a6 	addw	r0, r3, #2726	; 0xaa6
 8013126:	68fb      	ldr	r3, [r7, #12]
 8013128:	edd3 7a07 	vldr	s15, [r3, #28]
 801312c:	eeb0 0a67 	vmov.f32	s0, s15
 8013130:	4a31      	ldr	r2, [pc, #196]	; (80131f8 <_ZN8MainView9updateValEPh+0x234>)
 8013132:	2105      	movs	r1, #5
 8013134:	f7ff fd78 	bl	8012c28 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	OILPressureValue.invalidate();
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	f203 53d4 	addw	r3, r3, #1492	; 0x5d4
 801313e:	4618      	mov	r0, r3
 8013140:	f006 f9ac 	bl	801949c <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(OILTempValueBuffer, OILTEMPVALUE_SIZE, "%d",values->oil_tmp);
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	f603 209c 	addw	r0, r3, #2716	; 0xa9c
 801314a:	68fb      	ldr	r3, [r7, #12]
 801314c:	699b      	ldr	r3, [r3, #24]
 801314e:	4a28      	ldr	r2, [pc, #160]	; (80131f0 <_ZN8MainView9updateValEPh+0x22c>)
 8013150:	2105      	movs	r1, #5
 8013152:	f007 fdd1 	bl	801acf8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	OILTempValue.invalidate();
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	f203 539c 	addw	r3, r3, #1436	; 0x59c
 801315c:	4618      	mov	r0, r3
 801315e:	f006 f99d 	bl	801949c <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(IATValueBuffer, IATVALUE_SIZE, "%d",values->iat);
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	f603 2088 	addw	r0, r3, #2696	; 0xa88
 8013168:	68fb      	ldr	r3, [r7, #12]
 801316a:	6a1b      	ldr	r3, [r3, #32]
 801316c:	4a20      	ldr	r2, [pc, #128]	; (80131f0 <_ZN8MainView9updateValEPh+0x22c>)
 801316e:	2105      	movs	r1, #5
 8013170:	f007 fdc2 	bl	801acf8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	IATValue.invalidate();
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801317a:	4618      	mov	r0, r3
 801317c:	f006 f98e 	bl	801949c <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(EGTValueBuffer, EGTVALUE_SIZE, "%d",values->egt);
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	f603 2092 	addw	r0, r3, #2706	; 0xa92
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801318a:	4a19      	ldr	r2, [pc, #100]	; (80131f0 <_ZN8MainView9updateValEPh+0x22c>)
 801318c:	2105      	movs	r1, #5
 801318e:	f007 fdb3 	bl	801acf8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	EGTValue.invalidate();
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	f203 43fc 	addw	r3, r3, #1276	; 0x4fc
 8013198:	4618      	mov	r0, r3
 801319a:	f006 f97f 	bl	801949c <_ZNK8touchgfx8Drawable10invalidateEv>

	TPSProgress.setValue(values->tps);
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	f503 62c8 	add.w	r2, r3, #1600	; 0x640
 80131a4:	68fb      	ldr	r3, [r7, #12]
 80131a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80131a8:	4619      	mov	r1, r3
 80131aa:	4610      	mov	r0, r2
 80131ac:	f002 f812 	bl	80151d4 <_ZN8touchgfx11BoxProgress8setValueEi>
	RPMProgressBar.invalidate();
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 80131b6:	4618      	mov	r0, r3
 80131b8:	f006 f970 	bl	801949c <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintfFloat(BatteryVoltageBuffer, BATTERYVOLTAGE_SIZE, "%.2f",values->batt_v);
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	f503 602b 	add.w	r0, r3, #2736	; 0xab0
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80131c8:	eeb0 0a67 	vmov.f32	s0, s15
 80131cc:	4a09      	ldr	r2, [pc, #36]	; (80131f4 <_ZN8MainView9updateValEPh+0x230>)
 80131ce:	2105      	movs	r1, #5
 80131d0:	f7ff fd2a 	bl	8012c28 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	BatteryVoltage.invalidate();
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	f603 0318 	addw	r3, r3, #2072	; 0x818
 80131da:	4618      	mov	r0, r3
 80131dc:	f006 f95e 	bl	801949c <_ZNK8touchgfx8Drawable10invalidateEv>
}
 80131e0:	bf00      	nop
 80131e2:	3714      	adds	r7, #20
 80131e4:	46bd      	mov	sp, r7
 80131e6:	bd90      	pop	{r4, r7, pc}
 80131e8:	20000038 	.word	0x20000038
 80131ec:	20008664 	.word	0x20008664
 80131f0:	08026294 	.word	0x08026294
 80131f4:	08026298 	.word	0x08026298
 80131f8:	080262a0 	.word	0x080262a0

080131fc <_ZN5ModelC1Ev>:
{
	xQueueHandle messageQ;
	xQueueHandle settingsMessageQ;
}

Model::Model() : modelListener(0)
 80131fc:	b580      	push	{r7, lr}
 80131fe:	b082      	sub	sp, #8
 8013200:	af00      	add	r7, sp, #0
 8013202:	6078      	str	r0, [r7, #4]
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	2200      	movs	r2, #0
 8013208:	601a      	str	r2, [r3, #0]
{
	messageQ = xQueueGenericCreate(1, sizeof(display_values), 0);
 801320a:	2200      	movs	r2, #0
 801320c:	2130      	movs	r1, #48	; 0x30
 801320e:	2001      	movs	r0, #1
 8013210:	f7f9 fc3f 	bl	800ca92 <xQueueGenericCreate>
 8013214:	4602      	mov	r2, r0
 8013216:	4b07      	ldr	r3, [pc, #28]	; (8013234 <_ZN5ModelC1Ev+0x38>)
 8013218:	601a      	str	r2, [r3, #0]
	settingsMessageQ = xQueueGenericCreate(1, sizeof(settings_message), 0);
 801321a:	2200      	movs	r2, #0
 801321c:	2128      	movs	r1, #40	; 0x28
 801321e:	2001      	movs	r0, #1
 8013220:	f7f9 fc37 	bl	800ca92 <xQueueGenericCreate>
 8013224:	4602      	mov	r2, r0
 8013226:	4b04      	ldr	r3, [pc, #16]	; (8013238 <_ZN5ModelC1Ev+0x3c>)
 8013228:	601a      	str	r2, [r3, #0]
}
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	4618      	mov	r0, r3
 801322e:	3708      	adds	r7, #8
 8013230:	46bd      	mov	sp, r7
 8013232:	bd80      	pop	{r7, pc}
 8013234:	200086c0 	.word	0x200086c0
 8013238:	200086c4 	.word	0x200086c4

0801323c <_ZN5Model4tickEv>:

void Model::tick()
{
 801323c:	b580      	push	{r7, lr}
 801323e:	b082      	sub	sp, #8
 8013240:	af00      	add	r7, sp, #0
 8013242:	6078      	str	r0, [r7, #4]
	if(xQueueReceive(messageQ, &values , 0) == pdTRUE)
 8013244:	4b1a      	ldr	r3, [pc, #104]	; (80132b0 <_ZN5Model4tickEv+0x74>)
 8013246:	681b      	ldr	r3, [r3, #0]
 8013248:	2200      	movs	r2, #0
 801324a:	491a      	ldr	r1, [pc, #104]	; (80132b4 <_ZN5Model4tickEv+0x78>)
 801324c:	4618      	mov	r0, r3
 801324e:	f7f9 feb1 	bl	800cfb4 <xQueueReceive>
 8013252:	4603      	mov	r3, r0
 8013254:	2b01      	cmp	r3, #1
 8013256:	bf0c      	ite	eq
 8013258:	2301      	moveq	r3, #1
 801325a:	2300      	movne	r3, #0
 801325c:	b2db      	uxtb	r3, r3
 801325e:	2b00      	cmp	r3, #0
 8013260:	d009      	beq.n	8013276 <_ZN5Model4tickEv+0x3a>
	{
		modelListener->setNewValue(values);
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	681a      	ldr	r2, [r3, #0]
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	681b      	ldr	r3, [r3, #0]
 801326c:	3308      	adds	r3, #8
 801326e:	681b      	ldr	r3, [r3, #0]
 8013270:	4910      	ldr	r1, [pc, #64]	; (80132b4 <_ZN5Model4tickEv+0x78>)
 8013272:	4610      	mov	r0, r2
 8013274:	4798      	blx	r3
	}

	if(xQueueReceive(settingsMessageQ, &settings_value , 0) == pdTRUE)
 8013276:	4b10      	ldr	r3, [pc, #64]	; (80132b8 <_ZN5Model4tickEv+0x7c>)
 8013278:	681b      	ldr	r3, [r3, #0]
 801327a:	2200      	movs	r2, #0
 801327c:	490f      	ldr	r1, [pc, #60]	; (80132bc <_ZN5Model4tickEv+0x80>)
 801327e:	4618      	mov	r0, r3
 8013280:	f7f9 fe98 	bl	800cfb4 <xQueueReceive>
 8013284:	4603      	mov	r3, r0
 8013286:	2b01      	cmp	r3, #1
 8013288:	bf0c      	ite	eq
 801328a:	2301      	moveq	r3, #1
 801328c:	2300      	movne	r3, #0
 801328e:	b2db      	uxtb	r3, r3
 8013290:	2b00      	cmp	r3, #0
 8013292:	d009      	beq.n	80132a8 <_ZN5Model4tickEv+0x6c>
	{
		modelListener->updateDisplaySettings(settings_value);
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	681a      	ldr	r2, [r3, #0]
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	681b      	ldr	r3, [r3, #0]
 801329c:	681b      	ldr	r3, [r3, #0]
 801329e:	330c      	adds	r3, #12
 80132a0:	681b      	ldr	r3, [r3, #0]
 80132a2:	4906      	ldr	r1, [pc, #24]	; (80132bc <_ZN5Model4tickEv+0x80>)
 80132a4:	4610      	mov	r0, r2
 80132a6:	4798      	blx	r3
	}
}
 80132a8:	bf00      	nop
 80132aa:	3708      	adds	r7, #8
 80132ac:	46bd      	mov	sp, r7
 80132ae:	bd80      	pop	{r7, pc}
 80132b0:	200086c0 	.word	0x200086c0
 80132b4:	20008668 	.word	0x20008668
 80132b8:	200086c4 	.word	0x200086c4
 80132bc:	20008698 	.word	0x20008698

080132c0 <_ZN8touchgfx15TouchControllerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~TouchController()
 80132c0:	b480      	push	{r7}
 80132c2:	b083      	sub	sp, #12
 80132c4:	af00      	add	r7, sp, #0
 80132c6:	6078      	str	r0, [r7, #4]
    {
 80132c8:	4a04      	ldr	r2, [pc, #16]	; (80132dc <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	601a      	str	r2, [r3, #0]
    }
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	4618      	mov	r0, r3
 80132d2:	370c      	adds	r7, #12
 80132d4:	46bd      	mov	sp, r7
 80132d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132da:	4770      	bx	lr
 80132dc:	080269a0 	.word	0x080269a0

080132e0 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 80132e0:	b580      	push	{r7, lr}
 80132e2:	b082      	sub	sp, #8
 80132e4:	af00      	add	r7, sp, #0
 80132e6:	6078      	str	r0, [r7, #4]
    }
 80132e8:	6878      	ldr	r0, [r7, #4]
 80132ea:	f7ff ffe9 	bl	80132c0 <_ZN8touchgfx15TouchControllerD1Ev>
 80132ee:	2104      	movs	r1, #4
 80132f0:	6878      	ldr	r0, [r7, #4]
 80132f2:	f011 fc6e 	bl	8024bd2 <_ZdlPvj>
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	4618      	mov	r0, r3
 80132fa:	3708      	adds	r7, #8
 80132fc:	46bd      	mov	sp, r7
 80132fe:	bd80      	pop	{r7, pc}

08013300 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 8013300:	b480      	push	{r7}
 8013302:	b083      	sub	sp, #12
 8013304:	af00      	add	r7, sp, #0
 8013306:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 8013308:	bf00      	nop
 801330a:	370c      	adds	r7, #12
 801330c:	46bd      	mov	sp, r7
 801330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013312:	4770      	bx	lr

08013314 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8013314:	b480      	push	{r7}
 8013316:	b085      	sub	sp, #20
 8013318:	af00      	add	r7, sp, #0
 801331a:	60f8      	str	r0, [r7, #12]
 801331c:	60b9      	str	r1, [r7, #8]
 801331e:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 8013320:	2300      	movs	r3, #0
}
 8013322:	4618      	mov	r0, r3
 8013324:	3714      	adds	r7, #20
 8013326:	46bd      	mov	sp, r7
 8013328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801332c:	4770      	bx	lr
	...

08013330 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8013330:	b580      	push	{r7, lr}
 8013332:	b082      	sub	sp, #8
 8013334:	af00      	add	r7, sp, #0
 8013336:	6078      	str	r0, [r7, #4]
 8013338:	4a05      	ldr	r2, [pc, #20]	; (8013350 <_ZN20STM32TouchControllerD1Ev+0x20>)
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	601a      	str	r2, [r3, #0]
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	4618      	mov	r0, r3
 8013342:	f7ff ffbd 	bl	80132c0 <_ZN8touchgfx15TouchControllerD1Ev>
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	4618      	mov	r0, r3
 801334a:	3708      	adds	r7, #8
 801334c:	46bd      	mov	sp, r7
 801334e:	bd80      	pop	{r7, pc}
 8013350:	08026988 	.word	0x08026988

08013354 <_ZN20STM32TouchControllerD0Ev>:
 8013354:	b580      	push	{r7, lr}
 8013356:	b082      	sub	sp, #8
 8013358:	af00      	add	r7, sp, #0
 801335a:	6078      	str	r0, [r7, #4]
 801335c:	6878      	ldr	r0, [r7, #4]
 801335e:	f7ff ffe7 	bl	8013330 <_ZN20STM32TouchControllerD1Ev>
 8013362:	2104      	movs	r1, #4
 8013364:	6878      	ldr	r0, [r7, #4]
 8013366:	f011 fc34 	bl	8024bd2 <_ZdlPvj>
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	4618      	mov	r0, r3
 801336e:	3708      	adds	r7, #8
 8013370:	46bd      	mov	sp, r7
 8013372:	bd80      	pop	{r7, pc}

08013374 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8013374:	b480      	push	{r7}
 8013376:	b083      	sub	sp, #12
 8013378:	af00      	add	r7, sp, #0
 801337a:	4603      	mov	r3, r0
 801337c:	71fb      	strb	r3, [r7, #7]

}
 801337e:	bf00      	nop
 8013380:	370c      	adds	r7, #12
 8013382:	46bd      	mov	sp, r7
 8013384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013388:	4770      	bx	lr

0801338a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 801338a:	b480      	push	{r7}
 801338c:	b083      	sub	sp, #12
 801338e:	af00      	add	r7, sp, #0
 8013390:	4603      	mov	r3, r0
 8013392:	71fb      	strb	r3, [r7, #7]

}
 8013394:	bf00      	nop
 8013396:	370c      	adds	r7, #12
 8013398:	46bd      	mov	sp, r7
 801339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801339e:	4770      	bx	lr

080133a0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 80133a0:	b480      	push	{r7}
 80133a2:	b083      	sub	sp, #12
 80133a4:	af00      	add	r7, sp, #0
 80133a6:	4603      	mov	r3, r0
 80133a8:	71fb      	strb	r3, [r7, #7]

}
 80133aa:	bf00      	nop
 80133ac:	370c      	adds	r7, #12
 80133ae:	46bd      	mov	sp, r7
 80133b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133b4:	4770      	bx	lr
	...

080133b8 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 80133b8:	b480      	push	{r7}
 80133ba:	b083      	sub	sp, #12
 80133bc:	af00      	add	r7, sp, #0
 80133be:	6078      	str	r0, [r7, #4]
    {
 80133c0:	4a04      	ldr	r2, [pc, #16]	; (80133d4 <_ZN8touchgfx3HALD1Ev+0x1c>)
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	601a      	str	r2, [r3, #0]
    }
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	4618      	mov	r0, r3
 80133ca:	370c      	adds	r7, #12
 80133cc:	46bd      	mov	sp, r7
 80133ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133d2:	4770      	bx	lr
 80133d4:	08027758 	.word	0x08027758

080133d8 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 80133d8:	b580      	push	{r7, lr}
 80133da:	b082      	sub	sp, #8
 80133dc:	af00      	add	r7, sp, #0
 80133de:	6078      	str	r0, [r7, #4]
    }
 80133e0:	6878      	ldr	r0, [r7, #4]
 80133e2:	f7ff ffe9 	bl	80133b8 <_ZN8touchgfx3HALD1Ev>
 80133e6:	2178      	movs	r1, #120	; 0x78
 80133e8:	6878      	ldr	r0, [r7, #4]
 80133ea:	f011 fbf2 	bl	8024bd2 <_ZdlPvj>
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	4618      	mov	r0, r3
 80133f2:	3708      	adds	r7, #8
 80133f4:	46bd      	mov	sp, r7
 80133f6:	bd80      	pop	{r7, pc}

080133f8 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 80133f8:	b480      	push	{r7}
 80133fa:	b083      	sub	sp, #12
 80133fc:	af00      	add	r7, sp, #0
 80133fe:	6078      	str	r0, [r7, #4]
 8013400:	460b      	mov	r3, r1
 8013402:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	78fa      	ldrb	r2, [r7, #3]
 8013408:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	2201      	movs	r2, #1
 8013410:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8013414:	bf00      	nop
 8013416:	370c      	adds	r7, #12
 8013418:	46bd      	mov	sp, r7
 801341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801341e:	4770      	bx	lr

08013420 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *        As default, will return whatever blitcaps are reported by the associated DMA
     *        object.
     *
     * @return a bitmask of the supported blitcaps.
     */
    virtual BlitOperations getBlitCaps()
 8013420:	b580      	push	{r7, lr}
 8013422:	b082      	sub	sp, #8
 8013424:	af00      	add	r7, sp, #0
 8013426:	6078      	str	r0, [r7, #4]
    {
        return dma.getBlitCaps();
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	685a      	ldr	r2, [r3, #4]
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	685b      	ldr	r3, [r3, #4]
 8013430:	681b      	ldr	r3, [r3, #0]
 8013432:	681b      	ldr	r3, [r3, #0]
 8013434:	4610      	mov	r0, r2
 8013436:	4798      	blx	r3
 8013438:	4603      	mov	r3, r0
    }
 801343a:	4618      	mov	r0, r3
 801343c:	3708      	adds	r7, #8
 801343e:	46bd      	mov	sp, r7
 8013440:	bd80      	pop	{r7, pc}

08013442 <_ZN8touchgfx3HAL15backPorchExitedEv>:
     * @brief Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     *        Has to be called from within the LCD IRQ rutine when the Back Porch Exit is
     *        reached.
     */
    virtual void backPorchExited()
 8013442:	b580      	push	{r7, lr}
 8013444:	b082      	sub	sp, #8
 8013446:	af00      	add	r7, sp, #0
 8013448:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 801344a:	6878      	ldr	r0, [r7, #4]
 801344c:	f003 f91c 	bl	8016688 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	681b      	ldr	r3, [r3, #0]
 8013454:	3390      	adds	r3, #144	; 0x90
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	6878      	ldr	r0, [r7, #4]
 801345a:	4798      	blx	r3
    }
 801345c:	bf00      	nop
 801345e:	3708      	adds	r7, #8
 8013460:	46bd      	mov	sp, r7
 8013462:	bd80      	pop	{r7, pc}

08013464 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8013464:	b480      	push	{r7}
 8013466:	b083      	sub	sp, #12
 8013468:	af00      	add	r7, sp, #0
 801346a:	6078      	str	r0, [r7, #4]
 801346c:	6039      	str	r1, [r7, #0]
    {
        return false;
 801346e:	2300      	movs	r3, #0
    }
 8013470:	4618      	mov	r0, r3
 8013472:	370c      	adds	r7, #12
 8013474:	46bd      	mov	sp, r7
 8013476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801347a:	4770      	bx	lr

0801347c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
     * @param      useDoubleBuffering  (Optional) If true, reserve memory for an extra frame buffer.
     * @param      useAnimationStorage (Optional) If true, reserve memory for animation storage.
     *
     * @deprecated Use the setFramaBufferStartAddress with 'format' parameter instead of 'depth'
     */
    virtual void setFrameBufferStartAddress(void* adr, uint16_t depth = 16, bool useDoubleBuffering = true, bool useAnimationStorage = true)
 801347c:	b590      	push	{r4, r7, lr}
 801347e:	b08b      	sub	sp, #44	; 0x2c
 8013480:	af00      	add	r7, sp, #0
 8013482:	60f8      	str	r0, [r7, #12]
 8013484:	60b9      	str	r1, [r7, #8]
 8013486:	4611      	mov	r1, r2
 8013488:	461a      	mov	r2, r3
 801348a:	460b      	mov	r3, r1
 801348c:	80fb      	strh	r3, [r7, #6]
 801348e:	4613      	mov	r3, r2
 8013490:	717b      	strb	r3, [r7, #5]
    {
        uint16_t stride = lcd().framebufferStride();
 8013492:	f7fc fae9 	bl	800fa68 <_ZN8touchgfx3HAL3lcdEv>
 8013496:	4602      	mov	r2, r0
 8013498:	6813      	ldr	r3, [r2, #0]
 801349a:	3328      	adds	r3, #40	; 0x28
 801349c:	681b      	ldr	r3, [r3, #0]
 801349e:	4610      	mov	r0, r2
 80134a0:	4798      	blx	r3
 80134a2:	4603      	mov	r3, r0
 80134a4:	837b      	strh	r3, [r7, #26]
        uint32_t bufferSizeInBytes = stride * FRAME_BUFFER_HEIGHT;
 80134a6:	8b7b      	ldrh	r3, [r7, #26]
 80134a8:	4a3d      	ldr	r2, [pc, #244]	; (80135a0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x124>)
 80134aa:	8812      	ldrh	r2, [r2, #0]
 80134ac:	fb02 f303 	mul.w	r3, r2, r3
 80134b0:	617b      	str	r3, [r7, #20]
        uint8_t* ptr = (uint8_t*)adr;
 80134b2:	68bb      	ldr	r3, [r7, #8]
 80134b4:	627b      	str	r3, [r7, #36]	; 0x24
        void* double_buf = 0;
 80134b6:	2300      	movs	r3, #0
 80134b8:	623b      	str	r3, [r7, #32]
        void* anim_store = 0;
 80134ba:	2300      	movs	r3, #0
 80134bc:	61fb      	str	r3, [r7, #28]
        if (useDoubleBuffering)
 80134be:	797b      	ldrb	r3, [r7, #5]
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	d005      	beq.n	80134d0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x54>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer)
 80134c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80134c6:	697b      	ldr	r3, [r7, #20]
 80134c8:	4413      	add	r3, r2
 80134ca:	627b      	str	r3, [r7, #36]	; 0x24
            double_buf = (void*)ptr;
 80134cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134ce:	623b      	str	r3, [r7, #32]
        }
        if (useAnimationStorage)
 80134d0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d005      	beq.n	80134e4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x68>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer and possibly double buffer)
 80134d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80134da:	697b      	ldr	r3, [r7, #20]
 80134dc:	4413      	add	r3, r2
 80134de:	627b      	str	r3, [r7, #36]	; 0x24
            anim_store = (void*)ptr;
 80134e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134e2:	61fb      	str	r3, [r7, #28]
        }
        switch (depth)
 80134e4:	88fb      	ldrh	r3, [r7, #6]
 80134e6:	3b01      	subs	r3, #1
 80134e8:	2b1f      	cmp	r3, #31
 80134ea:	d84d      	bhi.n	8013588 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x10c>
 80134ec:	a201      	add	r2, pc, #4	; (adr r2, 80134f4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x78>)
 80134ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80134f2:	bf00      	nop
 80134f4:	08013575 	.word	0x08013575
 80134f8:	08013575 	.word	0x08013575
 80134fc:	08013589 	.word	0x08013589
 8013500:	08013575 	.word	0x08013575
 8013504:	08013589 	.word	0x08013589
 8013508:	08013589 	.word	0x08013589
 801350c:	08013589 	.word	0x08013589
 8013510:	08013575 	.word	0x08013575
 8013514:	08013589 	.word	0x08013589
 8013518:	08013589 	.word	0x08013589
 801351c:	08013589 	.word	0x08013589
 8013520:	08013589 	.word	0x08013589
 8013524:	08013589 	.word	0x08013589
 8013528:	08013589 	.word	0x08013589
 801352c:	08013589 	.word	0x08013589
 8013530:	08013575 	.word	0x08013575
 8013534:	08013589 	.word	0x08013589
 8013538:	08013589 	.word	0x08013589
 801353c:	08013589 	.word	0x08013589
 8013540:	08013589 	.word	0x08013589
 8013544:	08013589 	.word	0x08013589
 8013548:	08013589 	.word	0x08013589
 801354c:	08013589 	.word	0x08013589
 8013550:	08013575 	.word	0x08013575
 8013554:	08013589 	.word	0x08013589
 8013558:	08013589 	.word	0x08013589
 801355c:	08013589 	.word	0x08013589
 8013560:	08013589 	.word	0x08013589
 8013564:	08013589 	.word	0x08013589
 8013568:	08013589 	.word	0x08013589
 801356c:	08013589 	.word	0x08013589
 8013570:	08013575 	.word	0x08013575
        case 16:
        case 8:
        case 4:
        case 2:
        case 1:
            setFrameBufferStartAddresses(adr, double_buf, anim_store);
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	681b      	ldr	r3, [r3, #0]
 8013578:	3374      	adds	r3, #116	; 0x74
 801357a:	681c      	ldr	r4, [r3, #0]
 801357c:	69fb      	ldr	r3, [r7, #28]
 801357e:	6a3a      	ldr	r2, [r7, #32]
 8013580:	68b9      	ldr	r1, [r7, #8]
 8013582:	68f8      	ldr	r0, [r7, #12]
 8013584:	47a0      	blx	r4
            break;
 8013586:	e006      	b.n	8013596 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x11a>
        default:
            assert(0 && "Unsupported bit depth");
 8013588:	4b06      	ldr	r3, [pc, #24]	; (80135a4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x128>)
 801358a:	4a07      	ldr	r2, [pc, #28]	; (80135a8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x12c>)
 801358c:	f240 3125 	movw	r1, #805	; 0x325
 8013590:	4806      	ldr	r0, [pc, #24]	; (80135ac <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x130>)
 8013592:	f011 fb49 	bl	8024c28 <__assert_func>
            break;
        }
    }
 8013596:	bf00      	nop
 8013598:	372c      	adds	r7, #44	; 0x2c
 801359a:	46bd      	mov	sp, r7
 801359c:	bd90      	pop	{r4, r7, pc}
 801359e:	bf00      	nop
 80135a0:	2000bc78 	.word	0x2000bc78
 80135a4:	080262a8 	.word	0x080262a8
 80135a8:	08026ab4 	.word	0x08026ab4
 80135ac:	080262c8 	.word	0x080262c8

080135b0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     *
     * @param [in] frameBuffer      Buffer for frame buffer data, must be non-null.
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 80135b0:	b580      	push	{r7, lr}
 80135b2:	b084      	sub	sp, #16
 80135b4:	af00      	add	r7, sp, #0
 80135b6:	60f8      	str	r0, [r7, #12]
 80135b8:	60b9      	str	r1, [r7, #8]
 80135ba:	607a      	str	r2, [r7, #4]
 80135bc:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80135be:	68bb      	ldr	r3, [r7, #8]
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d106      	bne.n	80135d2 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 80135c4:	4b11      	ldr	r3, [pc, #68]	; (801360c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 80135c6:	4a12      	ldr	r2, [pc, #72]	; (8013610 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 80135c8:	f240 3137 	movw	r1, #823	; 0x337
 80135cc:	4811      	ldr	r0, [pc, #68]	; (8013614 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 80135ce:	f011 fb2b 	bl	8024c28 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 80135d2:	68fb      	ldr	r3, [r7, #12]
 80135d4:	68ba      	ldr	r2, [r7, #8]
 80135d6:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80135d8:	68fb      	ldr	r3, [r7, #12]
 80135da:	687a      	ldr	r2, [r7, #4]
 80135dc:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 80135de:	68fb      	ldr	r3, [r7, #12]
 80135e0:	683a      	ldr	r2, [r7, #0]
 80135e2:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	bf14      	ite	ne
 80135ea:	2301      	movne	r3, #1
 80135ec:	2300      	moveq	r3, #0
 80135ee:	b2da      	uxtb	r2, r3
 80135f0:	4b09      	ldr	r3, [pc, #36]	; (8013618 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 80135f2:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80135f4:	683b      	ldr	r3, [r7, #0]
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	bf14      	ite	ne
 80135fa:	2301      	movne	r3, #1
 80135fc:	2300      	moveq	r3, #0
 80135fe:	b2da      	uxtb	r2, r3
 8013600:	4b06      	ldr	r3, [pc, #24]	; (801361c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8013602:	701a      	strb	r2, [r3, #0]
    }
 8013604:	bf00      	nop
 8013606:	3710      	adds	r7, #16
 8013608:	46bd      	mov	sp, r7
 801360a:	bd80      	pop	{r7, pc}
 801360c:	0802630c 	.word	0x0802630c
 8013610:	08026a64 	.word	0x08026a64
 8013614:	080262c8 	.word	0x080262c8
 8013618:	2000bc7a 	.word	0x2000bc7a
 801361c:	2000bc7b 	.word	0x2000bc7b

08013620 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param ms Number of milliseconds to wait.
     *
     * @see void registerTaskDelayFunction(void (*delayF)(uint16_t))
     */
    virtual void taskDelay(uint16_t ms)
 8013620:	b580      	push	{r7, lr}
 8013622:	b082      	sub	sp, #8
 8013624:	af00      	add	r7, sp, #0
 8013626:	6078      	str	r0, [r7, #4]
 8013628:	460b      	mov	r3, r1
 801362a:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013630:	2b00      	cmp	r3, #0
 8013632:	d004      	beq.n	801363e <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013638:	887a      	ldrh	r2, [r7, #2]
 801363a:	4610      	mov	r0, r2
 801363c:	4798      	blx	r3
        }
    }
 801363e:	bf00      	nop
 8013640:	3708      	adds	r7, #8
 8013642:	46bd      	mov	sp, r7
 8013644:	bd80      	pop	{r7, pc}

08013646 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8013646:	b580      	push	{r7, lr}
 8013648:	b082      	sub	sp, #8
 801364a:	af00      	add	r7, sp, #0
 801364c:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	685a      	ldr	r2, [r3, #4]
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	685b      	ldr	r3, [r3, #4]
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	3318      	adds	r3, #24
 801365a:	681b      	ldr	r3, [r3, #0]
 801365c:	4610      	mov	r0, r2
 801365e:	4798      	blx	r3
 8013660:	4603      	mov	r3, r0
    }
 8013662:	4618      	mov	r0, r3
 8013664:	3708      	adds	r7, #8
 8013666:	46bd      	mov	sp, r7
 8013668:	bd80      	pop	{r7, pc}
	...

0801366c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
     *
     * @brief Perform the actual display orientation change.
     *
     *        Perform the actual display orientation change.
     */
    virtual void performDisplayOrientationChange()
 801366c:	b480      	push	{r7}
 801366e:	b083      	sub	sp, #12
 8013670:	af00      	add	r7, sp, #0
 8013672:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013680:	429a      	cmp	r2, r3
 8013682:	d017      	beq.n	80136b4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 8013684:	4b1a      	ldr	r3, [pc, #104]	; (80136f0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8013686:	781b      	ldrb	r3, [r3, #0]
 8013688:	2b00      	cmp	r3, #0
 801368a:	d12a      	bne.n	80136e2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 801368c:	4b19      	ldr	r3, [pc, #100]	; (80136f4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 801368e:	881a      	ldrh	r2, [r3, #0]
 8013690:	4b19      	ldr	r3, [pc, #100]	; (80136f8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8013692:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8013694:	4b19      	ldr	r3, [pc, #100]	; (80136fc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8013696:	881a      	ldrh	r2, [r3, #0]
 8013698:	4b19      	ldr	r3, [pc, #100]	; (8013700 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 801369a:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 801369c:	4b16      	ldr	r3, [pc, #88]	; (80136f8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 801369e:	881a      	ldrh	r2, [r3, #0]
 80136a0:	4b16      	ldr	r3, [pc, #88]	; (80136fc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80136a2:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 80136a4:	4b16      	ldr	r3, [pc, #88]	; (8013700 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80136a6:	881a      	ldrh	r2, [r3, #0]
 80136a8:	4b12      	ldr	r3, [pc, #72]	; (80136f4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80136aa:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 80136ac:	4b10      	ldr	r3, [pc, #64]	; (80136f0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80136ae:	2201      	movs	r2, #1
 80136b0:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 80136b2:	e016      	b.n	80136e2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 80136b4:	4b0e      	ldr	r3, [pc, #56]	; (80136f0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80136b6:	781b      	ldrb	r3, [r3, #0]
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d012      	beq.n	80136e2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 80136bc:	4b0f      	ldr	r3, [pc, #60]	; (80136fc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80136be:	881a      	ldrh	r2, [r3, #0]
 80136c0:	4b0d      	ldr	r3, [pc, #52]	; (80136f8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80136c2:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 80136c4:	4b0b      	ldr	r3, [pc, #44]	; (80136f4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80136c6:	881a      	ldrh	r2, [r3, #0]
 80136c8:	4b0d      	ldr	r3, [pc, #52]	; (8013700 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80136ca:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 80136cc:	4b0c      	ldr	r3, [pc, #48]	; (8013700 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80136ce:	881a      	ldrh	r2, [r3, #0]
 80136d0:	4b0a      	ldr	r3, [pc, #40]	; (80136fc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80136d2:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 80136d4:	4b08      	ldr	r3, [pc, #32]	; (80136f8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80136d6:	881a      	ldrh	r2, [r3, #0]
 80136d8:	4b06      	ldr	r3, [pc, #24]	; (80136f4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80136da:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 80136dc:	4b04      	ldr	r3, [pc, #16]	; (80136f0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80136de:	2200      	movs	r2, #0
 80136e0:	701a      	strb	r2, [r3, #0]
    }
 80136e2:	bf00      	nop
 80136e4:	370c      	adds	r7, #12
 80136e6:	46bd      	mov	sp, r7
 80136e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ec:	4770      	bx	lr
 80136ee:	bf00      	nop
 80136f0:	2000bc74 	.word	0x2000bc74
 80136f4:	2000bc70 	.word	0x2000bc70
 80136f8:	2000bc76 	.word	0x2000bc76
 80136fc:	2000bc72 	.word	0x2000bc72
 8013700:	2000bc78 	.word	0x2000bc78

08013704 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8013704:	b580      	push	{r7, lr}
 8013706:	b082      	sub	sp, #8
 8013708:	af00      	add	r7, sp, #0
 801370a:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	4618      	mov	r0, r3
 8013710:	f002 fa3c 	bl	8015b8c <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8013714:	bf00      	nop
 8013716:	3708      	adds	r7, #8
 8013718:	46bd      	mov	sp, r7
 801371a:	bd80      	pop	{r7, pc}

0801371c <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 801371c:	b580      	push	{r7, lr}
 801371e:	b082      	sub	sp, #8
 8013720:	af00      	add	r7, sp, #0
 8013722:	6078      	str	r0, [r7, #4]
 8013724:	4a05      	ldr	r2, [pc, #20]	; (801373c <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	601a      	str	r2, [r3, #0]
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	4618      	mov	r0, r3
 801372e:	f7ff fe43 	bl	80133b8 <_ZN8touchgfx3HALD1Ev>
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	4618      	mov	r0, r3
 8013736:	3708      	adds	r7, #8
 8013738:	46bd      	mov	sp, r7
 801373a:	bd80      	pop	{r7, pc}
 801373c:	08026c8c 	.word	0x08026c8c

08013740 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8013740:	b580      	push	{r7, lr}
 8013742:	b082      	sub	sp, #8
 8013744:	af00      	add	r7, sp, #0
 8013746:	6078      	str	r0, [r7, #4]
 8013748:	6878      	ldr	r0, [r7, #4]
 801374a:	f7ff ffe7 	bl	801371c <_ZN20TouchGFXGeneratedHALD1Ev>
 801374e:	2178      	movs	r1, #120	; 0x78
 8013750:	6878      	ldr	r0, [r7, #4]
 8013752:	f011 fa3e 	bl	8024bd2 <_ZdlPvj>
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	4618      	mov	r0, r3
 801375a:	3708      	adds	r7, #8
 801375c:	46bd      	mov	sp, r7
 801375e:	bd80      	pop	{r7, pc}

08013760 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8013760:	b580      	push	{r7, lr}
 8013762:	b082      	sub	sp, #8
 8013764:	af00      	add	r7, sp, #0
 8013766:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	4618      	mov	r0, r3
 801376c:	f7ff ffca 	bl	8013704 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8013770:	bf00      	nop
 8013772:	3708      	adds	r7, #8
 8013774:	46bd      	mov	sp, r7
 8013776:	bd80      	pop	{r7, pc}

08013778 <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32f7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8013778:	b580      	push	{r7, lr}
 801377a:	b082      	sub	sp, #8
 801377c:	af00      	add	r7, sp, #0
 801377e:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	4618      	mov	r0, r3
 8013784:	f001 fb0a 	bl	8014d9c <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8013788:	bf00      	nop
 801378a:	3708      	adds	r7, #8
 801378c:	46bd      	mov	sp, r7
 801378e:	bd80      	pop	{r7, pc}

08013790 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8013790:	b580      	push	{r7, lr}
 8013792:	b082      	sub	sp, #8
 8013794:	af00      	add	r7, sp, #0
 8013796:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	4618      	mov	r0, r3
 801379c:	f001 fb8a 	bl	8014eb4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 80137a0:	4603      	mov	r3, r0
}
 80137a2:	4618      	mov	r0, r3
 80137a4:	3708      	adds	r7, #8
 80137a6:	46bd      	mov	sp, r7
 80137a8:	bd80      	pop	{r7, pc}

080137aa <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 80137aa:	b580      	push	{r7, lr}
 80137ac:	b082      	sub	sp, #8
 80137ae:	af00      	add	r7, sp, #0
 80137b0:	6078      	str	r0, [r7, #4]
 80137b2:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	6839      	ldr	r1, [r7, #0]
 80137b8:	4618      	mov	r0, r3
 80137ba:	f001 fb89 	bl	8014ed0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 80137be:	bf00      	nop
 80137c0:	3708      	adds	r7, #8
 80137c2:	46bd      	mov	sp, r7
 80137c4:	bd80      	pop	{r7, pc}

080137c6 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80137c6:	b580      	push	{r7, lr}
 80137c8:	b082      	sub	sp, #8
 80137ca:	af00      	add	r7, sp, #0
 80137cc:	6078      	str	r0, [r7, #4]
 80137ce:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	6839      	ldr	r1, [r7, #0]
 80137d4:	4618      	mov	r0, r3
 80137d6:	f001 fb91 	bl	8014efc <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
}
 80137da:	bf00      	nop
 80137dc:	3708      	adds	r7, #8
 80137de:	46bd      	mov	sp, r7
 80137e0:	bd80      	pop	{r7, pc}

080137e2 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 80137e2:	b580      	push	{r7, lr}
 80137e4:	b082      	sub	sp, #8
 80137e6:	af00      	add	r7, sp, #0
 80137e8:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	4618      	mov	r0, r3
 80137ee:	f001 fb07 	bl	8014e00 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 80137f2:	bf00      	nop
 80137f4:	3708      	adds	r7, #8
 80137f6:	46bd      	mov	sp, r7
 80137f8:	bd80      	pop	{r7, pc}

080137fa <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 80137fa:	b580      	push	{r7, lr}
 80137fc:	b082      	sub	sp, #8
 80137fe:	af00      	add	r7, sp, #0
 8013800:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	4618      	mov	r0, r3
 8013806:	f001 fb0b 	bl	8014e20 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 801380a:	bf00      	nop
 801380c:	3708      	adds	r7, #8
 801380e:	46bd      	mov	sp, r7
 8013810:	bd80      	pop	{r7, pc}

08013812 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8013812:	b580      	push	{r7, lr}
 8013814:	b082      	sub	sp, #8
 8013816:	af00      	add	r7, sp, #0
 8013818:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	4618      	mov	r0, r3
 801381e:	f001 fb0d 	bl	8014e3c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8013822:	bf00      	nop
 8013824:	3708      	adds	r7, #8
 8013826:	46bd      	mov	sp, r7
 8013828:	bd80      	pop	{r7, pc}

0801382a <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 801382a:	b580      	push	{r7, lr}
 801382c:	b082      	sub	sp, #8
 801382e:	af00      	add	r7, sp, #0
 8013830:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	4618      	mov	r0, r3
 8013836:	f001 fb0f 	bl	8014e58 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 801383a:	bf00      	nop
 801383c:	3708      	adds	r7, #8
 801383e:	46bd      	mov	sp, r7
 8013840:	bd80      	pop	{r7, pc}
	...

08013844 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8013844:	b580      	push	{r7, lr}
 8013846:	b082      	sub	sp, #8
 8013848:	af00      	add	r7, sp, #0
 801384a:	6078      	str	r0, [r7, #4]
 801384c:	4a05      	ldr	r2, [pc, #20]	; (8013864 <_ZN11TouchGFXHALD1Ev+0x20>)
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	601a      	str	r2, [r3, #0]
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	4618      	mov	r0, r3
 8013856:	f7ff ff61 	bl	801371c <_ZN20TouchGFXGeneratedHALD1Ev>
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	4618      	mov	r0, r3
 801385e:	3708      	adds	r7, #8
 8013860:	46bd      	mov	sp, r7
 8013862:	bd80      	pop	{r7, pc}
 8013864:	080269b8 	.word	0x080269b8

08013868 <_ZN11TouchGFXHALD0Ev>:
 8013868:	b580      	push	{r7, lr}
 801386a:	b082      	sub	sp, #8
 801386c:	af00      	add	r7, sp, #0
 801386e:	6078      	str	r0, [r7, #4]
 8013870:	6878      	ldr	r0, [r7, #4]
 8013872:	f7ff ffe7 	bl	8013844 <_ZN11TouchGFXHALD1Ev>
 8013876:	2178      	movs	r1, #120	; 0x78
 8013878:	6878      	ldr	r0, [r7, #4]
 801387a:	f011 f9aa 	bl	8024bd2 <_ZdlPvj>
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	4618      	mov	r0, r3
 8013882:	3708      	adds	r7, #8
 8013884:	46bd      	mov	sp, r7
 8013886:	bd80      	pop	{r7, pc}

08013888 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8013888:	b580      	push	{r7, lr}
 801388a:	af00      	add	r7, sp, #0
    vSemaphoreCreateBinary(frame_buffer_sem);
 801388c:	2203      	movs	r2, #3
 801388e:	2100      	movs	r1, #0
 8013890:	2001      	movs	r0, #1
 8013892:	f7f9 f8fe 	bl	800ca92 <xQueueGenericCreate>
 8013896:	4602      	mov	r2, r0
 8013898:	4b0b      	ldr	r3, [pc, #44]	; (80138c8 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 801389a:	601a      	str	r2, [r3, #0]
 801389c:	4b0a      	ldr	r3, [pc, #40]	; (80138c8 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 801389e:	681b      	ldr	r3, [r3, #0]
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d006      	beq.n	80138b2 <_ZN8touchgfx10OSWrappers10initializeEv+0x2a>
 80138a4:	4b08      	ldr	r3, [pc, #32]	; (80138c8 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 80138a6:	6818      	ldr	r0, [r3, #0]
 80138a8:	2300      	movs	r3, #0
 80138aa:	2200      	movs	r2, #0
 80138ac:	2100      	movs	r1, #0
 80138ae:	f7f9 f951 	bl	800cb54 <xQueueGenericSend>
    // Create a queue of length 1
    vsync_q = xQueueGenericCreate(1, 1, 0);
 80138b2:	2200      	movs	r2, #0
 80138b4:	2101      	movs	r1, #1
 80138b6:	2001      	movs	r0, #1
 80138b8:	f7f9 f8eb 	bl	800ca92 <xQueueGenericCreate>
 80138bc:	4602      	mov	r2, r0
 80138be:	4b03      	ldr	r3, [pc, #12]	; (80138cc <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 80138c0:	601a      	str	r2, [r3, #0]
}
 80138c2:	bf00      	nop
 80138c4:	bd80      	pop	{r7, pc}
 80138c6:	bf00      	nop
 80138c8:	200086c8 	.word	0x200086c8
 80138cc:	200086cc 	.word	0x200086cc

080138d0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 80138d0:	b580      	push	{r7, lr}
 80138d2:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, portMAX_DELAY);
 80138d4:	4b04      	ldr	r3, [pc, #16]	; (80138e8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 80138d6:	681b      	ldr	r3, [r3, #0]
 80138d8:	f04f 31ff 	mov.w	r1, #4294967295
 80138dc:	4618      	mov	r0, r3
 80138de:	f7f9 fc4b 	bl	800d178 <xQueueSemaphoreTake>
}
 80138e2:	bf00      	nop
 80138e4:	bd80      	pop	{r7, pc}
 80138e6:	bf00      	nop
 80138e8:	200086c8 	.word	0x200086c8

080138ec <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 80138ec:	b580      	push	{r7, lr}
 80138ee:	af00      	add	r7, sp, #0
    xSemaphoreGive(frame_buffer_sem);
 80138f0:	4b04      	ldr	r3, [pc, #16]	; (8013904 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x18>)
 80138f2:	6818      	ldr	r0, [r3, #0]
 80138f4:	2300      	movs	r3, #0
 80138f6:	2200      	movs	r2, #0
 80138f8:	2100      	movs	r1, #0
 80138fa:	f7f9 f92b 	bl	800cb54 <xQueueGenericSend>
}
 80138fe:	bf00      	nop
 8013900:	bd80      	pop	{r7, pc}
 8013902:	bf00      	nop
 8013904:	200086c8 	.word	0x200086c8

08013908 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8013908:	b580      	push	{r7, lr}
 801390a:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, 0);
 801390c:	4b03      	ldr	r3, [pc, #12]	; (801391c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 801390e:	681b      	ldr	r3, [r3, #0]
 8013910:	2100      	movs	r1, #0
 8013912:	4618      	mov	r0, r3
 8013914:	f7f9 fc30 	bl	800d178 <xQueueSemaphoreTake>
}
 8013918:	bf00      	nop
 801391a:	bd80      	pop	{r7, pc}
 801391c:	200086c8 	.word	0x200086c8

08013920 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8013920:	b580      	push	{r7, lr}
 8013922:	b082      	sub	sp, #8
 8013924:	af00      	add	r7, sp, #0
    // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
    // re-scheduling. May be applicable for other OSes as well.
    portBASE_TYPE px = pdFALSE;
 8013926:	2300      	movs	r3, #0
 8013928:	607b      	str	r3, [r7, #4]
    xSemaphoreGiveFromISR(frame_buffer_sem, &px);
 801392a:	4b0b      	ldr	r3, [pc, #44]	; (8013958 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x38>)
 801392c:	681b      	ldr	r3, [r3, #0]
 801392e:	1d3a      	adds	r2, r7, #4
 8013930:	4611      	mov	r1, r2
 8013932:	4618      	mov	r0, r3
 8013934:	f7f9 faac 	bl	800ce90 <xQueueGiveFromISR>
    portEND_SWITCHING_ISR(px);
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	2b00      	cmp	r3, #0
 801393c:	d007      	beq.n	801394e <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x2e>
 801393e:	4b07      	ldr	r3, [pc, #28]	; (801395c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x3c>)
 8013940:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013944:	601a      	str	r2, [r3, #0]
 8013946:	f3bf 8f4f 	dsb	sy
 801394a:	f3bf 8f6f 	isb	sy
}
 801394e:	bf00      	nop
 8013950:	3708      	adds	r7, #8
 8013952:	46bd      	mov	sp, r7
 8013954:	bd80      	pop	{r7, pc}
 8013956:	bf00      	nop
 8013958:	200086c8 	.word	0x200086c8
 801395c:	e000ed04 	.word	0xe000ed04

08013960 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8013960:	b580      	push	{r7, lr}
 8013962:	b082      	sub	sp, #8
 8013964:	af00      	add	r7, sp, #0
    if (vsync_q)
 8013966:	4b0e      	ldr	r3, [pc, #56]	; (80139a0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 8013968:	681b      	ldr	r3, [r3, #0]
 801396a:	2b00      	cmp	r3, #0
 801396c:	d013      	beq.n	8013996 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
    {
        // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
        // re-scheduling. May be applicable for other OSes as well.
        portBASE_TYPE px = pdFALSE;
 801396e:	2300      	movs	r3, #0
 8013970:	607b      	str	r3, [r7, #4]
        xQueueSendFromISR(vsync_q, &dummy, &px);
 8013972:	4b0b      	ldr	r3, [pc, #44]	; (80139a0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 8013974:	6818      	ldr	r0, [r3, #0]
 8013976:	1d3a      	adds	r2, r7, #4
 8013978:	2300      	movs	r3, #0
 801397a:	490a      	ldr	r1, [pc, #40]	; (80139a4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x44>)
 801397c:	f7f9 f9ec 	bl	800cd58 <xQueueGenericSendFromISR>
        portEND_SWITCHING_ISR(px);
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	2b00      	cmp	r3, #0
 8013984:	d007      	beq.n	8013996 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
 8013986:	4b08      	ldr	r3, [pc, #32]	; (80139a8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x48>)
 8013988:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801398c:	601a      	str	r2, [r3, #0]
 801398e:	f3bf 8f4f 	dsb	sy
 8013992:	f3bf 8f6f 	isb	sy
    }
}
 8013996:	bf00      	nop
 8013998:	3708      	adds	r7, #8
 801399a:	46bd      	mov	sp, r7
 801399c:	bd80      	pop	{r7, pc}
 801399e:	bf00      	nop
 80139a0:	200086cc 	.word	0x200086cc
 80139a4:	2000003c 	.word	0x2000003c
 80139a8:	e000ed04 	.word	0xe000ed04

080139ac <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 80139ac:	b580      	push	{r7, lr}
 80139ae:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    xQueueReceive(vsync_q, &dummy, 0);
 80139b0:	4b08      	ldr	r3, [pc, #32]	; (80139d4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 80139b2:	681b      	ldr	r3, [r3, #0]
 80139b4:	2200      	movs	r2, #0
 80139b6:	4908      	ldr	r1, [pc, #32]	; (80139d8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 80139b8:	4618      	mov	r0, r3
 80139ba:	f7f9 fafb 	bl	800cfb4 <xQueueReceive>

    // Then, wait for next VSYNC to occur.
    xQueueReceive(vsync_q, &dummy, portMAX_DELAY);
 80139be:	4b05      	ldr	r3, [pc, #20]	; (80139d4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 80139c0:	681b      	ldr	r3, [r3, #0]
 80139c2:	f04f 32ff 	mov.w	r2, #4294967295
 80139c6:	4904      	ldr	r1, [pc, #16]	; (80139d8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 80139c8:	4618      	mov	r0, r3
 80139ca:	f7f9 faf3 	bl	800cfb4 <xQueueReceive>
}
 80139ce:	bf00      	nop
 80139d0:	bd80      	pop	{r7, pc}
 80139d2:	bf00      	nop
 80139d4:	200086cc 	.word	0x200086cc
 80139d8:	2000003c 	.word	0x2000003c

080139dc <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 80139dc:	b580      	push	{r7, lr}
 80139de:	b082      	sub	sp, #8
 80139e0:	af00      	add	r7, sp, #0
 80139e2:	4603      	mov	r3, r0
 80139e4:	80fb      	strh	r3, [r7, #6]
    vTaskDelay(ms);
 80139e6:	88fb      	ldrh	r3, [r7, #6]
 80139e8:	4618      	mov	r0, r3
 80139ea:	f7fa f823 	bl	800da34 <vTaskDelay>
}
 80139ee:	bf00      	nop
 80139f0:	3708      	adds	r7, #8
 80139f2:	46bd      	mov	sp, r7
 80139f4:	bd80      	pop	{r7, pc}
	...

080139f8 <__NVIC_EnableIRQ>:
{
 80139f8:	b480      	push	{r7}
 80139fa:	b083      	sub	sp, #12
 80139fc:	af00      	add	r7, sp, #0
 80139fe:	4603      	mov	r3, r0
 8013a00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	db0d      	blt.n	8013a26 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013a0e:	b2db      	uxtb	r3, r3
 8013a10:	f003 021f 	and.w	r2, r3, #31
 8013a14:	4907      	ldr	r1, [pc, #28]	; (8013a34 <__NVIC_EnableIRQ+0x3c>)
 8013a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013a1a:	095b      	lsrs	r3, r3, #5
 8013a1c:	2001      	movs	r0, #1
 8013a1e:	fa00 f202 	lsl.w	r2, r0, r2
 8013a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8013a26:	bf00      	nop
 8013a28:	370c      	adds	r7, #12
 8013a2a:	46bd      	mov	sp, r7
 8013a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a30:	4770      	bx	lr
 8013a32:	bf00      	nop
 8013a34:	e000e100 	.word	0xe000e100

08013a38 <__NVIC_DisableIRQ>:
{
 8013a38:	b480      	push	{r7}
 8013a3a:	b083      	sub	sp, #12
 8013a3c:	af00      	add	r7, sp, #0
 8013a3e:	4603      	mov	r3, r0
 8013a40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	db12      	blt.n	8013a70 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013a4e:	b2db      	uxtb	r3, r3
 8013a50:	f003 021f 	and.w	r2, r3, #31
 8013a54:	4909      	ldr	r1, [pc, #36]	; (8013a7c <__NVIC_DisableIRQ+0x44>)
 8013a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013a5a:	095b      	lsrs	r3, r3, #5
 8013a5c:	2001      	movs	r0, #1
 8013a5e:	fa00 f202 	lsl.w	r2, r0, r2
 8013a62:	3320      	adds	r3, #32
 8013a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8013a68:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8013a6c:	f3bf 8f6f 	isb	sy
}
 8013a70:	bf00      	nop
 8013a72:	370c      	adds	r7, #12
 8013a74:	46bd      	mov	sp, r7
 8013a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a7a:	4770      	bx	lr
 8013a7c:	e000e100 	.word	0xe000e100

08013a80 <_ZNK8touchgfx9colortype10getColor32Ev>:
    inline uint32_t getColor32() const
 8013a80:	b480      	push	{r7}
 8013a82:	b083      	sub	sp, #12
 8013a84:	af00      	add	r7, sp, #0
 8013a86:	6078      	str	r0, [r7, #4]
        return color;
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	681b      	ldr	r3, [r3, #0]
    }
 8013a8c:	4618      	mov	r0, r3
 8013a8e:	370c      	adds	r7, #12
 8013a90:	46bd      	mov	sp, r7
 8013a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a96:	4770      	bx	lr

08013a98 <_ZNK8touchgfx9colortypecvtEv>:
    operator uint16_t() const
 8013a98:	b480      	push	{r7}
 8013a9a:	b083      	sub	sp, #12
 8013a9c:	af00      	add	r7, sp, #0
 8013a9e:	6078      	str	r0, [r7, #4]
        return (uint16_t)color;
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	681b      	ldr	r3, [r3, #0]
 8013aa4:	b29b      	uxth	r3, r3
    }
 8013aa6:	4618      	mov	r0, r3
 8013aa8:	370c      	adds	r7, #12
 8013aaa:	46bd      	mov	sp, r7
 8013aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ab0:	4770      	bx	lr
	...

08013ab4 <_ZN8touchgfx9DMA_QueueD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Queue()
 8013ab4:	b480      	push	{r7}
 8013ab6:	b083      	sub	sp, #12
 8013ab8:	af00      	add	r7, sp, #0
 8013aba:	6078      	str	r0, [r7, #4]
    {
 8013abc:	4a04      	ldr	r2, [pc, #16]	; (8013ad0 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	601a      	str	r2, [r3, #0]
    }
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	4618      	mov	r0, r3
 8013ac6:	370c      	adds	r7, #12
 8013ac8:	46bd      	mov	sp, r7
 8013aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ace:	4770      	bx	lr
 8013ad0:	08026b60 	.word	0x08026b60

08013ad4 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8013ad4:	b580      	push	{r7, lr}
 8013ad6:	b082      	sub	sp, #8
 8013ad8:	af00      	add	r7, sp, #0
 8013ada:	6078      	str	r0, [r7, #4]
    }
 8013adc:	6878      	ldr	r0, [r7, #4]
 8013ade:	f7ff ffe9 	bl	8013ab4 <_ZN8touchgfx9DMA_QueueD1Ev>
 8013ae2:	2104      	movs	r1, #4
 8013ae4:	6878      	ldr	r0, [r7, #4]
 8013ae6:	f011 f874 	bl	8024bd2 <_ZdlPvj>
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	4618      	mov	r0, r3
 8013aee:	3708      	adds	r7, #8
 8013af0:	46bd      	mov	sp, r7
 8013af2:	bd80      	pop	{r7, pc}

08013af4 <_ZN8touchgfx13DMA_Interface5flushEv>:
     *
     * @brief This function blocks until all DMA transfers in the queue have been completed.
     *
     *        This function blocks until all DMA transfers in the queue have been completed.
     */
    virtual void flush()
 8013af4:	b580      	push	{r7, lr}
 8013af6:	b082      	sub	sp, #8
 8013af8:	af00      	add	r7, sp, #0
 8013afa:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	681b      	ldr	r3, [r3, #0]
 8013b00:	3344      	adds	r3, #68	; 0x44
 8013b02:	681b      	ldr	r3, [r3, #0]
 8013b04:	6878      	ldr	r0, [r7, #4]
 8013b06:	4798      	blx	r3
    }
 8013b08:	bf00      	nop
 8013b0a:	3708      	adds	r7, #8
 8013b0c:	46bd      	mov	sp, r7
 8013b0e:	bd80      	pop	{r7, pc}

08013b10 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType(void)
 8013b10:	b480      	push	{r7}
 8013b12:	b083      	sub	sp, #12
 8013b14:	af00      	add	r7, sp, #0
 8013b16:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 8013b18:	2300      	movs	r3, #0
    }
 8013b1a:	4618      	mov	r0, r3
 8013b1c:	370c      	adds	r7, #12
 8013b1e:	46bd      	mov	sp, r7
 8013b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b24:	4770      	bx	lr
	...

08013b28 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Interface()
 8013b28:	b480      	push	{r7}
 8013b2a:	b083      	sub	sp, #12
 8013b2c:	af00      	add	r7, sp, #0
 8013b2e:	6078      	str	r0, [r7, #4]
    {
 8013b30:	4a04      	ldr	r2, [pc, #16]	; (8013b44 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	601a      	str	r2, [r3, #0]
    }
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	4618      	mov	r0, r3
 8013b3a:	370c      	adds	r7, #12
 8013b3c:	46bd      	mov	sp, r7
 8013b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b42:	4770      	bx	lr
 8013b44:	08027b9c 	.word	0x08027b9c

08013b48 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8013b48:	b580      	push	{r7, lr}
 8013b4a:	b082      	sub	sp, #8
 8013b4c:	af00      	add	r7, sp, #0
 8013b4e:	6078      	str	r0, [r7, #4]
    }
 8013b50:	6878      	ldr	r0, [r7, #4]
 8013b52:	f7ff ffe9 	bl	8013b28 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8013b56:	210c      	movs	r1, #12
 8013b58:	6878      	ldr	r0, [r7, #4]
 8013b5a:	f011 f83a 	bl	8024bd2 <_ZdlPvj>
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	4618      	mov	r0, r3
 8013b62:	3708      	adds	r7, #8
 8013b64:	46bd      	mov	sp, r7
 8013b66:	bd80      	pop	{r7, pc}

08013b68 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
     *
     *        Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8013b68:	b480      	push	{r7}
 8013b6a:	b083      	sub	sp, #12
 8013b6c:	af00      	add	r7, sp, #0
 8013b6e:	6078      	str	r0, [r7, #4]
 8013b70:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8013b72:	4a09      	ldr	r2, [pc, #36]	; (8013b98 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	601a      	str	r2, [r3, #0]
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	683a      	ldr	r2, [r7, #0]
 8013b7c:	605a      	str	r2, [r3, #4]
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	2200      	movs	r2, #0
 8013b82:	721a      	strb	r2, [r3, #8]
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	2200      	movs	r2, #0
 8013b88:	725a      	strb	r2, [r3, #9]
    {
    }
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	4618      	mov	r0, r3
 8013b8e:	370c      	adds	r7, #12
 8013b90:	46bd      	mov	sp, r7
 8013b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b96:	4770      	bx	lr
 8013b98:	08027b9c 	.word	0x08027b9c

08013b9c <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8013b9c:	b580      	push	{r7, lr}
 8013b9e:	b082      	sub	sp, #8
 8013ba0:	af00      	add	r7, sp, #0
 8013ba2:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	685a      	ldr	r2, [r3, #4]
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	685b      	ldr	r3, [r3, #4]
 8013bac:	681b      	ldr	r3, [r3, #0]
 8013bae:	3314      	adds	r3, #20
 8013bb0:	681b      	ldr	r3, [r3, #0]
 8013bb2:	4610      	mov	r0, r2
 8013bb4:	4798      	blx	r3
    }
 8013bb6:	bf00      	nop
 8013bb8:	3708      	adds	r7, #8
 8013bba:	46bd      	mov	sp, r7
 8013bbc:	bd80      	pop	{r7, pc}

08013bbe <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8013bbe:	b580      	push	{r7, lr}
 8013bc0:	b082      	sub	sp, #8
 8013bc2:	af00      	add	r7, sp, #0
 8013bc4:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8013bc6:	687a      	ldr	r2, [r7, #4]
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	681b      	ldr	r3, [r3, #0]
 8013bcc:	3328      	adds	r3, #40	; 0x28
 8013bce:	681b      	ldr	r3, [r3, #0]
 8013bd0:	4610      	mov	r0, r2
 8013bd2:	4798      	blx	r3
    }
 8013bd4:	bf00      	nop
 8013bd6:	3708      	adds	r7, #8
 8013bd8:	46bd      	mov	sp, r7
 8013bda:	bd80      	pop	{r7, pc}

08013bdc <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 8013bdc:	b480      	push	{r7}
 8013bde:	b085      	sub	sp, #20
 8013be0:	af00      	add	r7, sp, #0
 8013be2:	60f8      	str	r0, [r7, #12]
 8013be4:	60b9      	str	r1, [r7, #8]
 8013be6:	607a      	str	r2, [r7, #4]
 8013be8:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 8013bea:	68fb      	ldr	r3, [r7, #12]
 8013bec:	681b      	ldr	r3, [r3, #0]
 8013bee:	681b      	ldr	r3, [r3, #0]
 8013bf0:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8013bf4:	68ba      	ldr	r2, [r7, #8]
 8013bf6:	68fb      	ldr	r3, [r7, #12]
 8013bf8:	681b      	ldr	r3, [r3, #0]
 8013bfa:	430a      	orrs	r2, r1
 8013bfc:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	681b      	ldr	r3, [r3, #0]
 8013c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013c04:	f023 0107 	bic.w	r1, r3, #7
 8013c08:	687a      	ldr	r2, [r7, #4]
 8013c0a:	68fb      	ldr	r3, [r7, #12]
 8013c0c:	681b      	ldr	r3, [r3, #0]
 8013c0e:	430a      	orrs	r2, r1
 8013c10:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 8013c12:	68fb      	ldr	r3, [r7, #12]
 8013c14:	681b      	ldr	r3, [r3, #0]
 8013c16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013c18:	4b06      	ldr	r3, [pc, #24]	; (8013c34 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm+0x58>)
 8013c1a:	4013      	ands	r3, r2
 8013c1c:	6839      	ldr	r1, [r7, #0]
 8013c1e:	68fa      	ldr	r2, [r7, #12]
 8013c20:	6812      	ldr	r2, [r2, #0]
 8013c22:	430b      	orrs	r3, r1
 8013c24:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 8013c26:	2300      	movs	r3, #0
}
 8013c28:	4618      	mov	r0, r3
 8013c2a:	3714      	adds	r7, #20
 8013c2c:	46bd      	mov	sp, r7
 8013c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c32:	4770      	bx	lr
 8013c34:	ffffc000 	.word	0xffffc000

08013c38 <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 8013c38:	b580      	push	{r7, lr}
 8013c3a:	b082      	sub	sp, #8
 8013c3c:	af00      	add	r7, sp, #0
 8013c3e:	6078      	str	r0, [r7, #4]
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END DMA2D_XferCpltCallback */

    touchgfx::HAL::getInstance()->signalDMAInterrupt();
 8013c40:	f7fb ff06 	bl	800fa50 <_ZN8touchgfx3HAL11getInstanceEv>
 8013c44:	4603      	mov	r3, r0
 8013c46:	4618      	mov	r0, r3
 8013c48:	f7ff ffa8 	bl	8013b9c <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 8013c4c:	bf00      	nop
 8013c4e:	3708      	adds	r7, #8
 8013c50:	46bd      	mov	sp, r7
 8013c52:	bd80      	pop	{r7, pc}

08013c54 <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
{
 8013c54:	b580      	push	{r7, lr}
 8013c56:	b082      	sub	sp, #8
 8013c58:	af00      	add	r7, sp, #0
 8013c5a:	6078      	str	r0, [r7, #4]
    assert(0);
 8013c5c:	4b02      	ldr	r3, [pc, #8]	; (8013c68 <DMA2D_XferErrorCallback+0x14>)
 8013c5e:	4a03      	ldr	r2, [pc, #12]	; (8013c6c <DMA2D_XferErrorCallback+0x18>)
 8013c60:	213e      	movs	r1, #62	; 0x3e
 8013c62:	4803      	ldr	r0, [pc, #12]	; (8013c70 <DMA2D_XferErrorCallback+0x1c>)
 8013c64:	f010 ffe0 	bl	8024c28 <__assert_func>
 8013c68:	08026344 	.word	0x08026344
 8013c6c:	08026b7c 	.word	0x08026b7c
 8013c70:	08026348 	.word	0x08026348

08013c74 <_ZN8touchgfx6BlitOpC1Ev>:
 *        (frame buffer) using DMA.
 *
 *        BlitOp instances carry the required information for performing operations on the LCD
 *        (frame buffer) using DMA.
 */
struct BlitOp
 8013c74:	b580      	push	{r7, lr}
 8013c76:	b082      	sub	sp, #8
 8013c78:	af00      	add	r7, sp, #0
 8013c7a:	6078      	str	r0, [r7, #4]
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	3318      	adds	r3, #24
 8013c80:	4618      	mov	r0, r3
 8013c82:	f7fe ffc3 	bl	8012c0c <_ZN8touchgfx9colortypeC1Ev>
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	4618      	mov	r0, r3
 8013c8a:	3708      	adds	r7, #8
 8013c8c:	46bd      	mov	sp, r7
 8013c8e:	bd80      	pop	{r7, pc}

08013c90 <_ZN10STM32F7DMAC1Ev>:
}

}

STM32F7DMA::STM32F7DMA()
 8013c90:	b5b0      	push	{r4, r5, r7, lr}
 8013c92:	b082      	sub	sp, #8
 8013c94:	af00      	add	r7, sp, #0
 8013c96:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8013c98:	687a      	ldr	r2, [r7, #4]
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	330c      	adds	r3, #12
 8013c9e:	4619      	mov	r1, r3
 8013ca0:	4610      	mov	r0, r2
 8013ca2:	f7ff ff61 	bl	8013b68 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8013ca6:	4a0e      	ldr	r2, [pc, #56]	; (8013ce0 <_ZN10STM32F7DMAC1Ev+0x50>)
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	601a      	str	r2, [r3, #0]
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	f103 000c 	add.w	r0, r3, #12
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	3320      	adds	r3, #32
 8013cb6:	2260      	movs	r2, #96	; 0x60
 8013cb8:	4619      	mov	r1, r3
 8013cba:	f002 fe0b 	bl	80168d4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	3320      	adds	r3, #32
 8013cc2:	245f      	movs	r4, #95	; 0x5f
 8013cc4:	461d      	mov	r5, r3
 8013cc6:	2c00      	cmp	r4, #0
 8013cc8:	db05      	blt.n	8013cd6 <_ZN10STM32F7DMAC1Ev+0x46>
 8013cca:	4628      	mov	r0, r5
 8013ccc:	f7ff ffd2 	bl	8013c74 <_ZN8touchgfx6BlitOpC1Ev>
 8013cd0:	3520      	adds	r5, #32
 8013cd2:	3c01      	subs	r4, #1
 8013cd4:	e7f7      	b.n	8013cc6 <_ZN10STM32F7DMAC1Ev+0x36>
{}
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	4618      	mov	r0, r3
 8013cda:	3708      	adds	r7, #8
 8013cdc:	46bd      	mov	sp, r7
 8013cde:	bdb0      	pop	{r4, r5, r7, pc}
 8013ce0:	08026b10 	.word	0x08026b10

08013ce4 <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 8013ce4:	b580      	push	{r7, lr}
 8013ce6:	b082      	sub	sp, #8
 8013ce8:	af00      	add	r7, sp, #0
 8013cea:	6078      	str	r0, [r7, #4]
 8013cec:	4a0b      	ldr	r2, [pc, #44]	; (8013d1c <_ZN10STM32F7DMAD1Ev+0x38>)
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 8013cf2:	480b      	ldr	r0, [pc, #44]	; (8013d20 <_ZN10STM32F7DMAD1Ev+0x3c>)
 8013cf4:	f7f1 fa8e 	bl	8005214 <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 8013cf8:	205a      	movs	r0, #90	; 0x5a
 8013cfa:	f7ff fe9d 	bl	8013a38 <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	330c      	adds	r3, #12
 8013d02:	4618      	mov	r0, r3
 8013d04:	f000 faa0 	bl	8014248 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	4618      	mov	r0, r3
 8013d0c:	f7ff ff0c 	bl	8013b28 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	4618      	mov	r0, r3
 8013d14:	3708      	adds	r7, #8
 8013d16:	46bd      	mov	sp, r7
 8013d18:	bd80      	pop	{r7, pc}
 8013d1a:	bf00      	nop
 8013d1c:	08026b10 	.word	0x08026b10
 8013d20:	2000c500 	.word	0x2000c500

08013d24 <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 8013d24:	b580      	push	{r7, lr}
 8013d26:	b082      	sub	sp, #8
 8013d28:	af00      	add	r7, sp, #0
 8013d2a:	6078      	str	r0, [r7, #4]
}
 8013d2c:	6878      	ldr	r0, [r7, #4]
 8013d2e:	f7ff ffd9 	bl	8013ce4 <_ZN10STM32F7DMAD1Ev>
 8013d32:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8013d36:	6878      	ldr	r0, [r7, #4]
 8013d38:	f010 ff4b 	bl	8024bd2 <_ZdlPvj>
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	4618      	mov	r0, r3
 8013d40:	3708      	adds	r7, #8
 8013d42:	46bd      	mov	sp, r7
 8013d44:	bd80      	pop	{r7, pc}
	...

08013d48 <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 8013d48:	b580      	push	{r7, lr}
 8013d4a:	b082      	sub	sp, #8
 8013d4c:	af00      	add	r7, sp, #0
 8013d4e:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 8013d50:	4b09      	ldr	r3, [pc, #36]	; (8013d78 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8013d52:	4a0a      	ldr	r2, [pc, #40]	; (8013d7c <_ZN10STM32F7DMA10initializeEv+0x34>)
 8013d54:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 8013d56:	4808      	ldr	r0, [pc, #32]	; (8013d78 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8013d58:	f7f1 fa12 	bl	8005180 <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8013d5c:	4b06      	ldr	r3, [pc, #24]	; (8013d78 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8013d5e:	4a08      	ldr	r2, [pc, #32]	; (8013d80 <_ZN10STM32F7DMA10initializeEv+0x38>)
 8013d60:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8013d62:	4b05      	ldr	r3, [pc, #20]	; (8013d78 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8013d64:	4a07      	ldr	r2, [pc, #28]	; (8013d84 <_ZN10STM32F7DMA10initializeEv+0x3c>)
 8013d66:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 8013d68:	205a      	movs	r0, #90	; 0x5a
 8013d6a:	f7ff fe45 	bl	80139f8 <__NVIC_EnableIRQ>
}
 8013d6e:	bf00      	nop
 8013d70:	3708      	adds	r7, #8
 8013d72:	46bd      	mov	sp, r7
 8013d74:	bd80      	pop	{r7, pc}
 8013d76:	bf00      	nop
 8013d78:	2000c500 	.word	0x2000c500
 8013d7c:	4002b000 	.word	0x4002b000
 8013d80:	08013c39 	.word	0x08013c39
 8013d84:	08013c55 	.word	0x08013c55

08013d88 <_ZN10STM32F7DMA11getBlitCapsEv>:

BlitOperations STM32F7DMA::getBlitCaps()
{
 8013d88:	b480      	push	{r7}
 8013d8a:	b083      	sub	sp, #12
 8013d8c:	af00      	add	r7, sp, #0
 8013d8e:	6078      	str	r0, [r7, #4]
                                        | BLIT_OP_COPY
                                        | BLIT_OP_COPY_WITH_ALPHA
                                        | BLIT_OP_COPY_ARGB8888
                                        | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                        | BLIT_OP_COPY_A4
                                        | BLIT_OP_COPY_A8);
 8013d90:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 8013d94:	4618      	mov	r0, r3
 8013d96:	370c      	adds	r7, #12
 8013d98:	46bd      	mov	sp, r7
 8013d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d9e:	4770      	bx	lr

08013da0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 8013da0:	b590      	push	{r4, r7, lr}
 8013da2:	b08d      	sub	sp, #52	; 0x34
 8013da4:	af02      	add	r7, sp, #8
 8013da6:	6078      	str	r0, [r7, #4]
 8013da8:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 8013daa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8013dae:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 8013db0:	2300      	movs	r3, #0
 8013db2:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8013db4:	683b      	ldr	r3, [r7, #0]
 8013db6:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8013db8:	2b20      	cmp	r3, #32
 8013dba:	d007      	beq.n	8013dcc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 8013dbc:	683b      	ldr	r3, [r7, #0]
 8013dbe:	681b      	ldr	r3, [r3, #0]
 8013dc0:	2b40      	cmp	r3, #64	; 0x40
 8013dc2:	d003      	beq.n	8013dcc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8013dc4:	683b      	ldr	r3, [r7, #0]
 8013dc6:	681b      	ldr	r3, [r3, #0]
 8013dc8:	2b04      	cmp	r3, #4
 8013dca:	d101      	bne.n	8013dd0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 8013dcc:	2301      	movs	r3, #1
 8013dce:	e000      	b.n	8013dd2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 8013dd0:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8013dd2:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8013dd4:	683b      	ldr	r3, [r7, #0]
 8013dd6:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 8013dd8:	2b80      	cmp	r3, #128	; 0x80
 8013dda:	d004      	beq.n	8013de6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 8013ddc:	683b      	ldr	r3, [r7, #0]
 8013dde:	681b      	ldr	r3, [r3, #0]
 8013de0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013de4:	d101      	bne.n	8013dea <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 8013de6:	2301      	movs	r3, #1
 8013de8:	e000      	b.n	8013dec <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 8013dea:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8013dec:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 8013dee:	f7fb fe3b 	bl	800fa68 <_ZN8touchgfx3HAL3lcdEv>
 8013df2:	4602      	mov	r2, r0
 8013df4:	6813      	ldr	r3, [r2, #0]
 8013df6:	3320      	adds	r3, #32
 8013df8:	681b      	ldr	r3, [r3, #0]
 8013dfa:	4610      	mov	r0, r2
 8013dfc:	4798      	blx	r3
 8013dfe:	4603      	mov	r3, r0
 8013e00:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 8013e02:	683b      	ldr	r3, [r7, #0]
 8013e04:	681b      	ldr	r3, [r3, #0]
 8013e06:	2b40      	cmp	r3, #64	; 0x40
 8013e08:	d01d      	beq.n	8013e46 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8013e0a:	2b40      	cmp	r3, #64	; 0x40
 8013e0c:	d804      	bhi.n	8013e18 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
 8013e0e:	2b04      	cmp	r3, #4
 8013e10:	d00e      	beq.n	8013e30 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 8013e12:	2b20      	cmp	r3, #32
 8013e14:	d017      	beq.n	8013e46 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8013e16:	e019      	b.n	8013e4c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
 8013e18:	2b80      	cmp	r3, #128	; 0x80
 8013e1a:	d003      	beq.n	8013e24 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 8013e1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013e20:	d003      	beq.n	8013e2a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8a>
 8013e22:	e013      	b.n	8013e4c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 8013e24:	230a      	movs	r3, #10
 8013e26:	623b      	str	r3, [r7, #32]
        break;
 8013e28:	e01a      	b.n	8013e60 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 8013e2a:	2309      	movs	r3, #9
 8013e2c:	623b      	str	r3, [r7, #32]
        break;
 8013e2e:	e017      	b.n	8013e60 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8013e30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8013e34:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8013e36:	7f7b      	ldrb	r3, [r7, #29]
 8013e38:	2b10      	cmp	r3, #16
 8013e3a:	d101      	bne.n	8013e40 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa0>
 8013e3c:	2302      	movs	r3, #2
 8013e3e:	e000      	b.n	8013e42 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
 8013e40:	2301      	movs	r3, #1
 8013e42:	623b      	str	r3, [r7, #32]
        break;
 8013e44:	e00c      	b.n	8013e60 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 8013e46:	2300      	movs	r3, #0
 8013e48:	623b      	str	r3, [r7, #32]
        break;
 8013e4a:	e009      	b.n	8013e60 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    default:
        dma2dTransferMode = DMA2D_M2M;
 8013e4c:	2300      	movs	r3, #0
 8013e4e:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8013e50:	7f7b      	ldrb	r3, [r7, #29]
 8013e52:	2b10      	cmp	r3, #16
 8013e54:	d101      	bne.n	8013e5a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xba>
 8013e56:	2302      	movs	r3, #2
 8013e58:	e000      	b.n	8013e5c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbc>
 8013e5a:	2301      	movs	r3, #1
 8013e5c:	623b      	str	r3, [r7, #32]
        break;
 8013e5e:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8013e60:	4a76      	ldr	r2, [pc, #472]	; (801403c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e64:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8013e66:	7f7b      	ldrb	r3, [r7, #29]
 8013e68:	2b10      	cmp	r3, #16
 8013e6a:	d101      	bne.n	8013e70 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8013e6c:	2302      	movs	r3, #2
 8013e6e:	e000      	b.n	8013e72 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd2>
 8013e70:	2301      	movs	r3, #1
 8013e72:	4a72      	ldr	r2, [pc, #456]	; (801403c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013e74:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8013e76:	683b      	ldr	r3, [r7, #0]
 8013e78:	8adb      	ldrh	r3, [r3, #22]
 8013e7a:	461a      	mov	r2, r3
 8013e7c:	683b      	ldr	r3, [r7, #0]
 8013e7e:	8a1b      	ldrh	r3, [r3, #16]
 8013e80:	1ad3      	subs	r3, r2, r3
 8013e82:	461a      	mov	r2, r3
 8013e84:	4b6d      	ldr	r3, [pc, #436]	; (801403c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013e86:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8013e88:	7f7b      	ldrb	r3, [r7, #29]
 8013e8a:	2b10      	cmp	r3, #16
 8013e8c:	d101      	bne.n	8013e92 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
 8013e8e:	2202      	movs	r2, #2
 8013e90:	e000      	b.n	8013e94 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 8013e92:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8013e94:	683b      	ldr	r3, [r7, #0]
 8013e96:	8adb      	ldrh	r3, [r3, #22]
 8013e98:	4619      	mov	r1, r3
 8013e9a:	683b      	ldr	r3, [r7, #0]
 8013e9c:	8a1b      	ldrh	r3, [r3, #16]
 8013e9e:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8013ea0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013ea2:	4866      	ldr	r0, [pc, #408]	; (801403c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013ea4:	f7ff fe9a 	bl	8013bdc <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8013ea8:	4a64      	ldr	r2, [pc, #400]	; (801403c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013eaa:	6a3b      	ldr	r3, [r7, #32]
 8013eac:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 8013eae:	683b      	ldr	r3, [r7, #0]
 8013eb0:	8a9b      	ldrh	r3, [r3, #20]
 8013eb2:	461a      	mov	r2, r3
 8013eb4:	683b      	ldr	r3, [r7, #0]
 8013eb6:	8a1b      	ldrh	r3, [r3, #16]
 8013eb8:	1ad3      	subs	r3, r2, r3
 8013eba:	461a      	mov	r2, r3
 8013ebc:	4b5f      	ldr	r3, [pc, #380]	; (801403c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013ebe:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 8013ec0:	7ffb      	ldrb	r3, [r7, #31]
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d103      	bne.n	8013ece <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
 8013ec6:	7fbb      	ldrb	r3, [r7, #30]
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	f000 8082 	beq.w	8013fd2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x232>
    {
        if (blitOp.alpha < 255)
 8013ece:	683b      	ldr	r3, [r7, #0]
 8013ed0:	7f1b      	ldrb	r3, [r3, #28]
 8013ed2:	2bff      	cmp	r3, #255	; 0xff
 8013ed4:	d008      	beq.n	8013ee8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 8013ed6:	4b59      	ldr	r3, [pc, #356]	; (801403c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013ed8:	2202      	movs	r2, #2
 8013eda:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 8013edc:	683b      	ldr	r3, [r7, #0]
 8013ede:	7f1b      	ldrb	r3, [r3, #28]
 8013ee0:	461a      	mov	r2, r3
 8013ee2:	4b56      	ldr	r3, [pc, #344]	; (801403c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013ee4:	635a      	str	r2, [r3, #52]	; 0x34
 8013ee6:	e002      	b.n	8013eee <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14e>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8013ee8:	4b54      	ldr	r3, [pc, #336]	; (801403c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013eea:	2200      	movs	r2, #0
 8013eec:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 8013eee:	7fbb      	ldrb	r3, [r7, #30]
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d059      	beq.n	8013fa8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
        {
            if (bitDepth == 16)
 8013ef4:	7f7b      	ldrb	r3, [r7, #29]
 8013ef6:	2b10      	cmp	r3, #16
 8013ef8:	d14a      	bne.n	8013f90 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8013efa:	683b      	ldr	r3, [r7, #0]
 8013efc:	3318      	adds	r3, #24
 8013efe:	4618      	mov	r0, r3
 8013f00:	f7ff fdca 	bl	8013a98 <_ZNK8touchgfx9colortypecvtEv>
 8013f04:	4603      	mov	r3, r0
 8013f06:	12db      	asrs	r3, r3, #11
 8013f08:	f003 021f 	and.w	r2, r3, #31
 8013f0c:	4613      	mov	r3, r2
 8013f0e:	021b      	lsls	r3, r3, #8
 8013f10:	1a9b      	subs	r3, r3, r2
 8013f12:	4a4b      	ldr	r2, [pc, #300]	; (8014040 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8013f14:	fb82 1203 	smull	r1, r2, r2, r3
 8013f18:	441a      	add	r2, r3
 8013f1a:	1112      	asrs	r2, r2, #4
 8013f1c:	17db      	asrs	r3, r3, #31
 8013f1e:	1ad3      	subs	r3, r2, r3
 8013f20:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8013f22:	683b      	ldr	r3, [r7, #0]
 8013f24:	3318      	adds	r3, #24
 8013f26:	4618      	mov	r0, r3
 8013f28:	f7ff fdb6 	bl	8013a98 <_ZNK8touchgfx9colortypecvtEv>
 8013f2c:	4603      	mov	r3, r0
 8013f2e:	115b      	asrs	r3, r3, #5
 8013f30:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8013f34:	4613      	mov	r3, r2
 8013f36:	021b      	lsls	r3, r3, #8
 8013f38:	1a9b      	subs	r3, r3, r2
 8013f3a:	4a42      	ldr	r2, [pc, #264]	; (8014044 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8013f3c:	fb82 1203 	smull	r1, r2, r2, r3
 8013f40:	441a      	add	r2, r3
 8013f42:	1152      	asrs	r2, r2, #5
 8013f44:	17db      	asrs	r3, r3, #31
 8013f46:	1ad3      	subs	r3, r2, r3
 8013f48:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8013f4a:	683b      	ldr	r3, [r7, #0]
 8013f4c:	3318      	adds	r3, #24
 8013f4e:	4618      	mov	r0, r3
 8013f50:	f7ff fda2 	bl	8013a98 <_ZNK8touchgfx9colortypecvtEv>
 8013f54:	4603      	mov	r3, r0
 8013f56:	f003 021f 	and.w	r2, r3, #31
 8013f5a:	4613      	mov	r3, r2
 8013f5c:	021b      	lsls	r3, r3, #8
 8013f5e:	1a9b      	subs	r3, r3, r2
 8013f60:	4a37      	ldr	r2, [pc, #220]	; (8014040 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8013f62:	fb82 1203 	smull	r1, r2, r2, r3
 8013f66:	441a      	add	r2, r3
 8013f68:	1112      	asrs	r2, r2, #4
 8013f6a:	17db      	asrs	r3, r3, #31
 8013f6c:	1ad3      	subs	r3, r2, r3
 8013f6e:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 8013f70:	683b      	ldr	r3, [r7, #0]
 8013f72:	7f1b      	ldrb	r3, [r3, #28]
 8013f74:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	061a      	lsls	r2, r3, #24
 8013f7a:	69bb      	ldr	r3, [r7, #24]
 8013f7c:	041b      	lsls	r3, r3, #16
 8013f7e:	431a      	orrs	r2, r3
 8013f80:	697b      	ldr	r3, [r7, #20]
 8013f82:	021b      	lsls	r3, r3, #8
 8013f84:	431a      	orrs	r2, r3
 8013f86:	693b      	ldr	r3, [r7, #16]
 8013f88:	4313      	orrs	r3, r2
 8013f8a:	4a2c      	ldr	r2, [pc, #176]	; (801403c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013f8c:	6353      	str	r3, [r2, #52]	; 0x34
 8013f8e:	e00b      	b.n	8013fa8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 8013f90:	683b      	ldr	r3, [r7, #0]
 8013f92:	3318      	adds	r3, #24
 8013f94:	4618      	mov	r0, r3
 8013f96:	f7ff fd73 	bl	8013a80 <_ZNK8touchgfx9colortype10getColor32Ev>
 8013f9a:	4602      	mov	r2, r0
 8013f9c:	683b      	ldr	r3, [r7, #0]
 8013f9e:	7f1b      	ldrb	r3, [r3, #28]
 8013fa0:	061b      	lsls	r3, r3, #24
 8013fa2:	4313      	orrs	r3, r2
 8013fa4:	4a25      	ldr	r2, [pc, #148]	; (801403c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013fa6:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8013fa8:	683b      	ldr	r3, [r7, #0]
 8013faa:	8adb      	ldrh	r3, [r3, #22]
 8013fac:	461a      	mov	r2, r3
 8013fae:	683b      	ldr	r3, [r7, #0]
 8013fb0:	8a1b      	ldrh	r3, [r3, #16]
 8013fb2:	1ad3      	subs	r3, r2, r3
 8013fb4:	461a      	mov	r2, r3
 8013fb6:	4b21      	ldr	r3, [pc, #132]	; (801403c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013fb8:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8013fba:	7f7b      	ldrb	r3, [r7, #29]
 8013fbc:	2b10      	cmp	r3, #16
 8013fbe:	d101      	bne.n	8013fc4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>
 8013fc0:	2302      	movs	r3, #2
 8013fc2:	e000      	b.n	8013fc6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x226>
 8013fc4:	2301      	movs	r3, #1
 8013fc6:	4a1d      	ldr	r2, [pc, #116]	; (801403c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013fc8:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8013fca:	2100      	movs	r1, #0
 8013fcc:	481b      	ldr	r0, [pc, #108]	; (801403c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013fce:	f7f1 fba1 	bl	8005714 <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8013fd2:	2101      	movs	r1, #1
 8013fd4:	4819      	ldr	r0, [pc, #100]	; (801403c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013fd6:	f7f1 fb9d 	bl	8005714 <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataCopy cache invalidation */

    if (blendingImage || blendingText)
 8013fda:	7ffb      	ldrb	r3, [r7, #31]
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d102      	bne.n	8013fe6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x246>
 8013fe0:	7fbb      	ldrb	r3, [r7, #30]
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d015      	beq.n	8014012 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x272>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 8013fe6:	683b      	ldr	r3, [r7, #0]
 8013fe8:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013fea:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8013fec:	683b      	ldr	r3, [r7, #0]
 8013fee:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013ff0:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8013ff2:	683b      	ldr	r3, [r7, #0]
 8013ff4:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013ff6:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8013ff8:	683b      	ldr	r3, [r7, #0]
 8013ffa:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013ffc:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8013ffe:	683b      	ldr	r3, [r7, #0]
 8014000:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014002:	9301      	str	r3, [sp, #4]
 8014004:	9200      	str	r2, [sp, #0]
 8014006:	4623      	mov	r3, r4
 8014008:	4602      	mov	r2, r0
 801400a:	480c      	ldr	r0, [pc, #48]	; (801403c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801400c:	f7f1 f9a5 	bl	800535a <HAL_DMA2D_BlendingStart_IT>
 8014010:	e00f      	b.n	8014032 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x292>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 8014012:	683b      	ldr	r3, [r7, #0]
 8014014:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 8014016:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 8014018:	683b      	ldr	r3, [r7, #0]
 801401a:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 801401c:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 801401e:	683b      	ldr	r3, [r7, #0]
 8014020:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d,
 8014022:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 8014024:	683b      	ldr	r3, [r7, #0]
 8014026:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d,
 8014028:	9300      	str	r3, [sp, #0]
 801402a:	4603      	mov	r3, r0
 801402c:	4803      	ldr	r0, [pc, #12]	; (801403c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801402e:	f7f1 f961 	bl	80052f4 <HAL_DMA2D_Start_IT>
    }
}
 8014032:	bf00      	nop
 8014034:	372c      	adds	r7, #44	; 0x2c
 8014036:	46bd      	mov	sp, r7
 8014038:	bd90      	pop	{r4, r7, pc}
 801403a:	bf00      	nop
 801403c:	2000c500 	.word	0x2000c500
 8014040:	84210843 	.word	0x84210843
 8014044:	82082083 	.word	0x82082083

08014048 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 8014048:	b590      	push	{r4, r7, lr}
 801404a:	b08d      	sub	sp, #52	; 0x34
 801404c:	af02      	add	r7, sp, #8
 801404e:	6078      	str	r0, [r7, #4]
 8014050:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 8014052:	f7fb fd09 	bl	800fa68 <_ZN8touchgfx3HAL3lcdEv>
 8014056:	4602      	mov	r2, r0
 8014058:	6813      	ldr	r3, [r2, #0]
 801405a:	3320      	adds	r3, #32
 801405c:	681b      	ldr	r3, [r3, #0]
 801405e:	4610      	mov	r0, r2
 8014060:	4798      	blx	r3
 8014062:	4603      	mov	r3, r0
 8014064:	77fb      	strb	r3, [r7, #31]
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8014066:	7ffb      	ldrb	r3, [r7, #31]
 8014068:	2b10      	cmp	r3, #16
 801406a:	d101      	bne.n	8014070 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x28>
 801406c:	2302      	movs	r3, #2
 801406e:	e000      	b.n	8014072 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2a>
 8014070:	2301      	movs	r3, #1
 8014072:	61bb      	str	r3, [r7, #24]

    uint32_t color = 0;
 8014074:	2300      	movs	r3, #0
 8014076:	623b      	str	r3, [r7, #32]
    if (bitDepth == 16)
 8014078:	7ffb      	ldrb	r3, [r7, #31]
 801407a:	2b10      	cmp	r3, #16
 801407c:	d149      	bne.n	8014112 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xca>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 801407e:	683b      	ldr	r3, [r7, #0]
 8014080:	3318      	adds	r3, #24
 8014082:	4618      	mov	r0, r3
 8014084:	f7ff fd08 	bl	8013a98 <_ZNK8touchgfx9colortypecvtEv>
 8014088:	4603      	mov	r3, r0
 801408a:	12db      	asrs	r3, r3, #11
 801408c:	f003 021f 	and.w	r2, r3, #31
 8014090:	4613      	mov	r3, r2
 8014092:	021b      	lsls	r3, r3, #8
 8014094:	1a9b      	subs	r3, r3, r2
 8014096:	4a69      	ldr	r2, [pc, #420]	; (801423c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 8014098:	fb82 1203 	smull	r1, r2, r2, r3
 801409c:	441a      	add	r2, r3
 801409e:	1112      	asrs	r2, r2, #4
 80140a0:	17db      	asrs	r3, r3, #31
 80140a2:	1ad3      	subs	r3, r2, r3
 80140a4:	617b      	str	r3, [r7, #20]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 80140a6:	683b      	ldr	r3, [r7, #0]
 80140a8:	3318      	adds	r3, #24
 80140aa:	4618      	mov	r0, r3
 80140ac:	f7ff fcf4 	bl	8013a98 <_ZNK8touchgfx9colortypecvtEv>
 80140b0:	4603      	mov	r3, r0
 80140b2:	115b      	asrs	r3, r3, #5
 80140b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80140b8:	4613      	mov	r3, r2
 80140ba:	021b      	lsls	r3, r3, #8
 80140bc:	1a9b      	subs	r3, r3, r2
 80140be:	4a60      	ldr	r2, [pc, #384]	; (8014240 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f8>)
 80140c0:	fb82 1203 	smull	r1, r2, r2, r3
 80140c4:	441a      	add	r2, r3
 80140c6:	1152      	asrs	r2, r2, #5
 80140c8:	17db      	asrs	r3, r3, #31
 80140ca:	1ad3      	subs	r3, r2, r3
 80140cc:	613b      	str	r3, [r7, #16]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 80140ce:	683b      	ldr	r3, [r7, #0]
 80140d0:	3318      	adds	r3, #24
 80140d2:	4618      	mov	r0, r3
 80140d4:	f7ff fce0 	bl	8013a98 <_ZNK8touchgfx9colortypecvtEv>
 80140d8:	4603      	mov	r3, r0
 80140da:	f003 021f 	and.w	r2, r3, #31
 80140de:	4613      	mov	r3, r2
 80140e0:	021b      	lsls	r3, r3, #8
 80140e2:	1a9b      	subs	r3, r3, r2
 80140e4:	4a55      	ldr	r2, [pc, #340]	; (801423c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 80140e6:	fb82 1203 	smull	r1, r2, r2, r3
 80140ea:	441a      	add	r2, r3
 80140ec:	1112      	asrs	r2, r2, #4
 80140ee:	17db      	asrs	r3, r3, #31
 80140f0:	1ad3      	subs	r3, r2, r3
 80140f2:	60fb      	str	r3, [r7, #12]
        uint32_t alpha = blitOp.alpha;
 80140f4:	683b      	ldr	r3, [r7, #0]
 80140f6:	7f1b      	ldrb	r3, [r3, #28]
 80140f8:	60bb      	str	r3, [r7, #8]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 80140fa:	68bb      	ldr	r3, [r7, #8]
 80140fc:	061a      	lsls	r2, r3, #24
 80140fe:	697b      	ldr	r3, [r7, #20]
 8014100:	041b      	lsls	r3, r3, #16
 8014102:	431a      	orrs	r2, r3
 8014104:	693b      	ldr	r3, [r7, #16]
 8014106:	021b      	lsls	r3, r3, #8
 8014108:	4313      	orrs	r3, r2
 801410a:	68fa      	ldr	r2, [r7, #12]
 801410c:	4313      	orrs	r3, r2
 801410e:	623b      	str	r3, [r7, #32]
 8014110:	e00b      	b.n	801412a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe2>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 8014112:	683b      	ldr	r3, [r7, #0]
 8014114:	7f1b      	ldrb	r3, [r3, #28]
 8014116:	061b      	lsls	r3, r3, #24
 8014118:	461c      	mov	r4, r3
 801411a:	683b      	ldr	r3, [r7, #0]
 801411c:	3318      	adds	r3, #24
 801411e:	4618      	mov	r0, r3
 8014120:	f7ff fcae 	bl	8013a80 <_ZNK8touchgfx9colortype10getColor32Ev>
 8014124:	4603      	mov	r3, r0
 8014126:	4323      	orrs	r3, r4
 8014128:	623b      	str	r3, [r7, #32]
    }

    switch (blitOp.operation)
 801412a:	683b      	ldr	r3, [r7, #0]
 801412c:	681b      	ldr	r3, [r3, #0]
 801412e:	2b08      	cmp	r3, #8
 8014130:	d103      	bne.n	801413a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf2>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8014132:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8014136:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8014138:	e003      	b.n	8014142 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfa>
    default:
        dma2dTransferMode = DMA2D_R2M;
 801413a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 801413e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8014140:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8014142:	4a40      	ldr	r2, [pc, #256]	; (8014244 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8014144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014146:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8014148:	7ffb      	ldrb	r3, [r7, #31]
 801414a:	2b10      	cmp	r3, #16
 801414c:	d101      	bne.n	8014152 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10a>
 801414e:	2302      	movs	r3, #2
 8014150:	e000      	b.n	8014154 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>
 8014152:	2301      	movs	r3, #1
 8014154:	4a3b      	ldr	r2, [pc, #236]	; (8014244 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8014156:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8014158:	683b      	ldr	r3, [r7, #0]
 801415a:	8adb      	ldrh	r3, [r3, #22]
 801415c:	461a      	mov	r2, r3
 801415e:	683b      	ldr	r3, [r7, #0]
 8014160:	8a1b      	ldrh	r3, [r3, #16]
 8014162:	1ad3      	subs	r3, r2, r3
 8014164:	461a      	mov	r2, r3
 8014166:	4b37      	ldr	r3, [pc, #220]	; (8014244 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8014168:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 801416a:	7ffb      	ldrb	r3, [r7, #31]
 801416c:	2b10      	cmp	r3, #16
 801416e:	d101      	bne.n	8014174 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12c>
 8014170:	2202      	movs	r2, #2
 8014172:	e000      	b.n	8014176 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12e>
 8014174:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8014176:	683b      	ldr	r3, [r7, #0]
 8014178:	8adb      	ldrh	r3, [r3, #22]
 801417a:	4619      	mov	r1, r3
 801417c:	683b      	ldr	r3, [r7, #0]
 801417e:	8a1b      	ldrh	r3, [r3, #16]
 8014180:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8014182:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014184:	482f      	ldr	r0, [pc, #188]	; (8014244 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8014186:	f7ff fd29 	bl	8013bdc <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 801418a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801418c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8014190:	d11e      	bne.n	80141d0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x188>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8014192:	4b2c      	ldr	r3, [pc, #176]	; (8014244 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8014194:	2201      	movs	r2, #1
 8014196:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 8014198:	4a2a      	ldr	r2, [pc, #168]	; (8014244 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801419a:	6a3b      	ldr	r3, [r7, #32]
 801419c:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 801419e:	4b29      	ldr	r3, [pc, #164]	; (8014244 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80141a0:	2209      	movs	r2, #9
 80141a2:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 80141a4:	683b      	ldr	r3, [r7, #0]
 80141a6:	8adb      	ldrh	r3, [r3, #22]
 80141a8:	461a      	mov	r2, r3
 80141aa:	683b      	ldr	r3, [r7, #0]
 80141ac:	8a1b      	ldrh	r3, [r3, #16]
 80141ae:	1ad3      	subs	r3, r2, r3
 80141b0:	461a      	mov	r2, r3
 80141b2:	4b24      	ldr	r3, [pc, #144]	; (8014244 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80141b4:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80141b6:	7ffb      	ldrb	r3, [r7, #31]
 80141b8:	2b10      	cmp	r3, #16
 80141ba:	d101      	bne.n	80141c0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x178>
 80141bc:	2302      	movs	r3, #2
 80141be:	e000      	b.n	80141c2 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x17a>
 80141c0:	2301      	movs	r3, #1
 80141c2:	4a20      	ldr	r2, [pc, #128]	; (8014244 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80141c4:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 80141c6:	2100      	movs	r1, #0
 80141c8:	481e      	ldr	r0, [pc, #120]	; (8014244 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80141ca:	f7f1 faa3 	bl	8005714 <HAL_DMA2D_ConfigLayer>
 80141ce:	e005      	b.n	80141dc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x194>
    } else {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 80141d0:	4a1c      	ldr	r2, [pc, #112]	; (8014244 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80141d2:	69bb      	ldr	r3, [r7, #24]
 80141d4:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 80141d6:	4b1b      	ldr	r3, [pc, #108]	; (8014244 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80141d8:	2200      	movs	r2, #0
 80141da:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 80141dc:	2101      	movs	r1, #1
 80141de:	4819      	ldr	r0, [pc, #100]	; (8014244 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80141e0:	f7f1 fa98 	bl	8005714 <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataFill cache invalidation */

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 80141e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80141ea:	d115      	bne.n	8014218 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1d0>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 80141ec:	683b      	ldr	r3, [r7, #0]
 80141ee:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80141f0:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 80141f2:	683b      	ldr	r3, [r7, #0]
 80141f4:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80141f6:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 80141f8:	683b      	ldr	r3, [r7, #0]
 80141fa:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80141fc:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 80141fe:	683b      	ldr	r3, [r7, #0]
 8014200:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014202:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8014204:	683b      	ldr	r3, [r7, #0]
 8014206:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014208:	9301      	str	r3, [sp, #4]
 801420a:	9200      	str	r2, [sp, #0]
 801420c:	4623      	mov	r3, r4
 801420e:	4602      	mov	r2, r0
 8014210:	480c      	ldr	r0, [pc, #48]	; (8014244 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8014212:	f7f1 f8a2 	bl	800535a <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 8014216:	e00d      	b.n	8014234 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1ec>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8014218:	683b      	ldr	r3, [r7, #0]
 801421a:	68db      	ldr	r3, [r3, #12]
 801421c:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 801421e:	683b      	ldr	r3, [r7, #0]
 8014220:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8014222:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 8014224:	683b      	ldr	r3, [r7, #0]
 8014226:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8014228:	9300      	str	r3, [sp, #0]
 801422a:	460b      	mov	r3, r1
 801422c:	6a39      	ldr	r1, [r7, #32]
 801422e:	4805      	ldr	r0, [pc, #20]	; (8014244 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8014230:	f7f1 f860 	bl	80052f4 <HAL_DMA2D_Start_IT>
}
 8014234:	bf00      	nop
 8014236:	372c      	adds	r7, #44	; 0x2c
 8014238:	46bd      	mov	sp, r7
 801423a:	bd90      	pop	{r4, r7, pc}
 801423c:	84210843 	.word	0x84210843
 8014240:	82082083 	.word	0x82082083
 8014244:	2000c500 	.word	0x2000c500

08014248 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8014248:	b580      	push	{r7, lr}
 801424a:	b082      	sub	sp, #8
 801424c:	af00      	add	r7, sp, #0
 801424e:	6078      	str	r0, [r7, #4]
 8014250:	4a05      	ldr	r2, [pc, #20]	; (8014268 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	601a      	str	r2, [r3, #0]
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	4618      	mov	r0, r3
 801425a:	f7ff fc2b 	bl	8013ab4 <_ZN8touchgfx9DMA_QueueD1Ev>
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	4618      	mov	r0, r3
 8014262:	3708      	adds	r7, #8
 8014264:	46bd      	mov	sp, r7
 8014266:	bd80      	pop	{r7, pc}
 8014268:	08027bec 	.word	0x08027bec

0801426c <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 801426c:	b580      	push	{r7, lr}
 801426e:	b082      	sub	sp, #8
 8014270:	af00      	add	r7, sp, #0
 8014272:	6078      	str	r0, [r7, #4]
 8014274:	6878      	ldr	r0, [r7, #4]
 8014276:	f7ff ffe7 	bl	8014248 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 801427a:	2114      	movs	r1, #20
 801427c:	6878      	ldr	r0, [r7, #4]
 801427e:	f010 fca8 	bl	8024bd2 <_ZdlPvj>
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	4618      	mov	r0, r3
 8014286:	3708      	adds	r7, #8
 8014288:	46bd      	mov	sp, r7
 801428a:	bd80      	pop	{r7, pc}

0801428c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 801428c:	b480      	push	{r7}
 801428e:	b083      	sub	sp, #12
 8014290:	af00      	add	r7, sp, #0
 8014292:	6078      	str	r0, [r7, #4]
        texts = t;
 8014294:	4a04      	ldr	r2, [pc, #16]	; (80142a8 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	6013      	str	r3, [r2, #0]
    }
 801429a:	bf00      	nop
 801429c:	370c      	adds	r7, #12
 801429e:	46bd      	mov	sp, r7
 80142a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142a4:	4770      	bx	lr
 80142a6:	bf00      	nop
 80142a8:	2000bd18 	.word	0x2000bd18

080142ac <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 80142ac:	b480      	push	{r7}
 80142ae:	b085      	sub	sp, #20
 80142b0:	af00      	add	r7, sp, #0
 80142b2:	60f8      	str	r0, [r7, #12]
 80142b4:	60b9      	str	r1, [r7, #8]
 80142b6:	607a      	str	r2, [r7, #4]
 80142b8:	603b      	str	r3, [r7, #0]
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app) : presenterStorage(pres),
        screenStorage(scr),
        transitionStorage(tra),
        frontendApplication(app)
 80142ba:	4a0b      	ldr	r2, [pc, #44]	; (80142e8 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 80142bc:	68fb      	ldr	r3, [r7, #12]
 80142be:	601a      	str	r2, [r3, #0]
 80142c0:	68fb      	ldr	r3, [r7, #12]
 80142c2:	68ba      	ldr	r2, [r7, #8]
 80142c4:	605a      	str	r2, [r3, #4]
 80142c6:	68fb      	ldr	r3, [r7, #12]
 80142c8:	687a      	ldr	r2, [r7, #4]
 80142ca:	609a      	str	r2, [r3, #8]
 80142cc:	68fb      	ldr	r3, [r7, #12]
 80142ce:	683a      	ldr	r2, [r7, #0]
 80142d0:	60da      	str	r2, [r3, #12]
 80142d2:	68fb      	ldr	r3, [r7, #12]
 80142d4:	69ba      	ldr	r2, [r7, #24]
 80142d6:	611a      	str	r2, [r3, #16]
    {
    }
 80142d8:	68fb      	ldr	r3, [r7, #12]
 80142da:	4618      	mov	r0, r3
 80142dc:	3714      	adds	r7, #20
 80142de:	46bd      	mov	sp, r7
 80142e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142e4:	4770      	bx	lr
 80142e6:	bf00      	nop
 80142e8:	08026c7c 	.word	0x08026c7c

080142ec <_ZN8touchgfx7MVPHeapD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPHeap()
 80142ec:	b480      	push	{r7}
 80142ee:	b083      	sub	sp, #12
 80142f0:	af00      	add	r7, sp, #0
 80142f2:	6078      	str	r0, [r7, #4]
    {
 80142f4:	4a04      	ldr	r2, [pc, #16]	; (8014308 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	601a      	str	r2, [r3, #0]
    }
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	4618      	mov	r0, r3
 80142fe:	370c      	adds	r7, #12
 8014300:	46bd      	mov	sp, r7
 8014302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014306:	4770      	bx	lr
 8014308:	08026c7c 	.word	0x08026c7c

0801430c <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 801430c:	b580      	push	{r7, lr}
 801430e:	b082      	sub	sp, #8
 8014310:	af00      	add	r7, sp, #0
 8014312:	6078      	str	r0, [r7, #4]
    }
 8014314:	6878      	ldr	r0, [r7, #4]
 8014316:	f7ff ffe9 	bl	80142ec <_ZN8touchgfx7MVPHeapD1Ev>
 801431a:	2114      	movs	r1, #20
 801431c:	6878      	ldr	r0, [r7, #4]
 801431e:	f010 fc58 	bl	8024bd2 <_ZdlPvj>
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	4618      	mov	r0, r3
 8014326:	3708      	adds	r7, #8
 8014328:	46bd      	mov	sp, r7
 801432a:	bd80      	pop	{r7, pc}

0801432c <_ZN8touchgfx3LCDD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~LCD()
 801432c:	b480      	push	{r7}
 801432e:	b083      	sub	sp, #12
 8014330:	af00      	add	r7, sp, #0
 8014332:	6078      	str	r0, [r7, #4]
    {
 8014334:	4a04      	ldr	r2, [pc, #16]	; (8014348 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	601a      	str	r2, [r3, #0]
    }
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	4618      	mov	r0, r3
 801433e:	370c      	adds	r7, #12
 8014340:	46bd      	mov	sp, r7
 8014342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014346:	4770      	bx	lr
 8014348:	080284d0 	.word	0x080284d0

0801434c <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 801434c:	b580      	push	{r7, lr}
 801434e:	b082      	sub	sp, #8
 8014350:	af00      	add	r7, sp, #0
 8014352:	6078      	str	r0, [r7, #4]
    }
 8014354:	6878      	ldr	r0, [r7, #4]
 8014356:	f7ff ffe9 	bl	801432c <_ZN8touchgfx3LCDD1Ev>
 801435a:	2108      	movs	r1, #8
 801435c:	6878      	ldr	r0, [r7, #4]
 801435e:	f010 fc38 	bl	8024bd2 <_ZdlPvj>
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	4618      	mov	r0, r3
 8014366:	3708      	adds	r7, #8
 8014368:	46bd      	mov	sp, r7
 801436a:	bd80      	pop	{r7, pc}

0801436c <_ZN8touchgfx8Gestures9DragStateC1Ev>:
     *
     *        Defines the state of a drag.
     */
    struct DragState
    {
        DragState() : startX(0),
 801436c:	b480      	push	{r7}
 801436e:	b083      	sub	sp, #12
 8014370:	af00      	add	r7, sp, #0
 8014372:	6078      	str	r0, [r7, #4]
            downX(0),
            downY(0),
            tickCount(0),
            velocityX(0),
            velocityY(0),
            inProgress(false)
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	2200      	movs	r2, #0
 8014378:	801a      	strh	r2, [r3, #0]
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	2200      	movs	r2, #0
 801437e:	805a      	strh	r2, [r3, #2]
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	2200      	movs	r2, #0
 8014384:	809a      	strh	r2, [r3, #4]
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	2200      	movs	r2, #0
 801438a:	80da      	strh	r2, [r3, #6]
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	2200      	movs	r2, #0
 8014390:	811a      	strh	r2, [r3, #8]
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	2200      	movs	r2, #0
 8014396:	815a      	strh	r2, [r3, #10]
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	2200      	movs	r2, #0
 801439c:	819a      	strh	r2, [r3, #12]
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	2200      	movs	r2, #0
 80143a2:	739a      	strb	r2, [r3, #14]
        {
        }
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	4618      	mov	r0, r3
 80143a8:	370c      	adds	r7, #12
 80143aa:	46bd      	mov	sp, r7
 80143ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143b0:	4770      	bx	lr

080143b2 <_ZN8touchgfx8GesturesC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Does nothing.
     */
    Gestures() : listener(0), dragThresholdValue(0) { }
 80143b2:	b580      	push	{r7, lr}
 80143b4:	b082      	sub	sp, #8
 80143b6:	af00      	add	r7, sp, #0
 80143b8:	6078      	str	r0, [r7, #4]
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	4618      	mov	r0, r3
 80143be:	f7ff ffd5 	bl	801436c <_ZN8touchgfx8Gestures9DragStateC1Ev>
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	2200      	movs	r2, #0
 80143c6:	611a      	str	r2, [r3, #16]
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	2200      	movs	r2, #0
 80143cc:	829a      	strh	r2, [r3, #20]
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	4618      	mov	r0, r3
 80143d2:	3708      	adds	r7, #8
 80143d4:	46bd      	mov	sp, r7
 80143d6:	bd80      	pop	{r7, pc}

080143d8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height) :
 80143d8:	b580      	push	{r7, lr}
 80143da:	b084      	sub	sp, #16
 80143dc:	af00      	add	r7, sp, #0
 80143de:	60f8      	str	r0, [r7, #12]
 80143e0:	60b9      	str	r1, [r7, #8]
 80143e2:	607a      	str	r2, [r7, #4]
 80143e4:	603b      	str	r3, [r7, #0]
        displayOrientationChangeRequested(false)
 80143e6:	4a44      	ldr	r2, [pc, #272]	; (80144f8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x120>)
 80143e8:	68fb      	ldr	r3, [r7, #12]
 80143ea:	601a      	str	r2, [r3, #0]
 80143ec:	68fb      	ldr	r3, [r7, #12]
 80143ee:	68ba      	ldr	r2, [r7, #8]
 80143f0:	605a      	str	r2, [r3, #4]
 80143f2:	68fb      	ldr	r3, [r7, #12]
 80143f4:	687a      	ldr	r2, [r7, #4]
 80143f6:	609a      	str	r2, [r3, #8]
 80143f8:	68fb      	ldr	r3, [r7, #12]
 80143fa:	683a      	ldr	r2, [r7, #0]
 80143fc:	60da      	str	r2, [r3, #12]
 80143fe:	68fb      	ldr	r3, [r7, #12]
 8014400:	2200      	movs	r2, #0
 8014402:	611a      	str	r2, [r3, #16]
 8014404:	68fb      	ldr	r3, [r7, #12]
 8014406:	2200      	movs	r2, #0
 8014408:	615a      	str	r2, [r3, #20]
 801440a:	68fb      	ldr	r3, [r7, #12]
 801440c:	2200      	movs	r2, #0
 801440e:	619a      	str	r2, [r3, #24]
 8014410:	68fb      	ldr	r3, [r7, #12]
 8014412:	331c      	adds	r3, #28
 8014414:	4618      	mov	r0, r3
 8014416:	f7ff ffcc 	bl	80143b2 <_ZN8touchgfx8GesturesC1Ev>
 801441a:	68fb      	ldr	r3, [r7, #12]
 801441c:	2200      	movs	r2, #0
 801441e:	639a      	str	r2, [r3, #56]	; 0x38
 8014420:	68fb      	ldr	r3, [r7, #12]
 8014422:	2200      	movs	r2, #0
 8014424:	63da      	str	r2, [r3, #60]	; 0x3c
 8014426:	68fb      	ldr	r3, [r7, #12]
 8014428:	2200      	movs	r2, #0
 801442a:	641a      	str	r2, [r3, #64]	; 0x40
 801442c:	68fb      	ldr	r3, [r7, #12]
 801442e:	2200      	movs	r2, #0
 8014430:	645a      	str	r2, [r3, #68]	; 0x44
 8014432:	68fb      	ldr	r3, [r7, #12]
 8014434:	2200      	movs	r2, #0
 8014436:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 801443a:	68fb      	ldr	r3, [r7, #12]
 801443c:	2201      	movs	r2, #1
 801443e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8014442:	68fb      	ldr	r3, [r7, #12]
 8014444:	2201      	movs	r2, #1
 8014446:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801444a:	68fb      	ldr	r3, [r7, #12]
 801444c:	2200      	movs	r2, #0
 801444e:	64da      	str	r2, [r3, #76]	; 0x4c
 8014450:	68fb      	ldr	r3, [r7, #12]
 8014452:	3350      	adds	r3, #80	; 0x50
 8014454:	4618      	mov	r0, r3
 8014456:	f7fb ff36 	bl	80102c6 <_ZN8touchgfx4RectC1Ev>
 801445a:	68fb      	ldr	r3, [r7, #12]
 801445c:	2201      	movs	r2, #1
 801445e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8014462:	68fb      	ldr	r3, [r7, #12]
 8014464:	2200      	movs	r2, #0
 8014466:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 801446a:	68fb      	ldr	r3, [r7, #12]
 801446c:	2200      	movs	r2, #0
 801446e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8014472:	68fb      	ldr	r3, [r7, #12]
 8014474:	2201      	movs	r2, #1
 8014476:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 801447a:	68fb      	ldr	r3, [r7, #12]
 801447c:	2200      	movs	r2, #0
 801447e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8014482:	68fb      	ldr	r3, [r7, #12]
 8014484:	2200      	movs	r2, #0
 8014486:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 801448a:	68fb      	ldr	r3, [r7, #12]
 801448c:	2200      	movs	r2, #0
 801448e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8014492:	68fb      	ldr	r3, [r7, #12]
 8014494:	2200      	movs	r2, #0
 8014496:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 801449a:	68fb      	ldr	r3, [r7, #12]
 801449c:	2200      	movs	r2, #0
 801449e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 80144a2:	68fb      	ldr	r3, [r7, #12]
 80144a4:	2200      	movs	r2, #0
 80144a6:	671a      	str	r2, [r3, #112]	; 0x70
 80144a8:	68fb      	ldr	r3, [r7, #12]
 80144aa:	2200      	movs	r2, #0
 80144ac:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        instance = this;
 80144b0:	4a12      	ldr	r2, [pc, #72]	; (80144fc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x124>)
 80144b2:	68fb      	ldr	r3, [r7, #12]
 80144b4:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 80144b6:	4a12      	ldr	r2, [pc, #72]	; (8014500 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 80144b8:	8b3b      	ldrh	r3, [r7, #24]
 80144ba:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 80144bc:	4a11      	ldr	r2, [pc, #68]	; (8014504 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 80144be:	8bbb      	ldrh	r3, [r7, #28]
 80144c0:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 80144c2:	4b11      	ldr	r3, [pc, #68]	; (8014508 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x130>)
 80144c4:	2200      	movs	r2, #0
 80144c6:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 80144c8:	4b0d      	ldr	r3, [pc, #52]	; (8014500 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 80144ca:	881a      	ldrh	r2, [r3, #0]
 80144cc:	4b0f      	ldr	r3, [pc, #60]	; (801450c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x134>)
 80144ce:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 80144d0:	4b0c      	ldr	r3, [pc, #48]	; (8014504 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 80144d2:	881a      	ldrh	r2, [r3, #0]
 80144d4:	4b0e      	ldr	r3, [pc, #56]	; (8014510 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 80144d6:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80144d8:	8b3a      	ldrh	r2, [r7, #24]
 80144da:	8bbb      	ldrh	r3, [r7, #28]
 80144dc:	429a      	cmp	r2, r3
 80144de:	d301      	bcc.n	80144e4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10c>
 80144e0:	2200      	movs	r2, #0
 80144e2:	e000      	b.n	80144e6 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10e>
 80144e4:	2201      	movs	r2, #1
 80144e6:	68fb      	ldr	r3, [r7, #12]
 80144e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 80144ec:	68fb      	ldr	r3, [r7, #12]
 80144ee:	4618      	mov	r0, r3
 80144f0:	3710      	adds	r7, #16
 80144f2:	46bd      	mov	sp, r7
 80144f4:	bd80      	pop	{r7, pc}
 80144f6:	bf00      	nop
 80144f8:	08027758 	.word	0x08027758
 80144fc:	2000bc7c 	.word	0x2000bc7c
 8014500:	2000bc70 	.word	0x2000bc70
 8014504:	2000bc72 	.word	0x2000bc72
 8014508:	2000bc74 	.word	0x2000bc74
 801450c:	2000bc76 	.word	0x2000bc76
 8014510:	2000bc78 	.word	0x2000bc78

08014514 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8014514:	b580      	push	{r7, lr}
 8014516:	b082      	sub	sp, #8
 8014518:	af00      	add	r7, sp, #0
 801451a:	6078      	str	r0, [r7, #4]
 801451c:	6039      	str	r1, [r7, #0]
    {
        app.gotoMainScreenNoTransition();
 801451e:	683b      	ldr	r3, [r7, #0]
 8014520:	4618      	mov	r0, r3
 8014522:	f7fb fcc5 	bl	800feb0 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>
    }
 8014526:	bf00      	nop
 8014528:	3708      	adds	r7, #8
 801452a:	46bd      	mov	sp, r7
 801452c:	bd80      	pop	{r7, pc}
	...

08014530 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8014530:	b580      	push	{r7, lr}
 8014532:	b086      	sub	sp, #24
 8014534:	af02      	add	r7, sp, #8
 8014536:	60f8      	str	r0, [r7, #12]
 8014538:	60b9      	str	r1, [r7, #8]
 801453a:	607a      	str	r2, [r7, #4]
 801453c:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 801453e:	68f8      	ldr	r0, [r7, #12]
 8014540:	69bb      	ldr	r3, [r7, #24]
 8014542:	9300      	str	r3, [sp, #0]
 8014544:	683b      	ldr	r3, [r7, #0]
 8014546:	687a      	ldr	r2, [r7, #4]
 8014548:	68b9      	ldr	r1, [r7, #8]
 801454a:	f7ff feaf 	bl	80142ac <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 801454e:	4a04      	ldr	r2, [pc, #16]	; (8014560 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8014550:	68fb      	ldr	r3, [r7, #12]
 8014552:	601a      	str	r2, [r3, #0]
    {

    }
 8014554:	68fb      	ldr	r3, [r7, #12]
 8014556:	4618      	mov	r0, r3
 8014558:	3710      	adds	r7, #16
 801455a:	46bd      	mov	sp, r7
 801455c:	bd80      	pop	{r7, pc}
 801455e:	bf00      	nop
 8014560:	08026c68 	.word	0x08026c68

08014564 <__tcf_0>:
            > > CombinedTransitionTypes;
    typedef meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8014564:	b580      	push	{r7, lr}
 8014566:	af00      	add	r7, sp, #0
 8014568:	4801      	ldr	r0, [pc, #4]	; (8014570 <__tcf_0+0xc>)
 801456a:	f000 f9dd 	bl	8014928 <_ZN12FrontendHeapD1Ev>
 801456e:	bd80      	pop	{r7, pc}
 8014570:	200086d0 	.word	0x200086d0

08014574 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8014574:	b580      	push	{r7, lr}
 8014576:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8014578:	4b08      	ldr	r3, [pc, #32]	; (801459c <_ZN12FrontendHeap11getInstanceEv+0x28>)
 801457a:	681b      	ldr	r3, [r3, #0]
 801457c:	f003 0301 	and.w	r3, r3, #1
 8014580:	2b00      	cmp	r3, #0
 8014582:	d108      	bne.n	8014596 <_ZN12FrontendHeap11getInstanceEv+0x22>
 8014584:	4806      	ldr	r0, [pc, #24]	; (80145a0 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
 8014586:	f000 f831 	bl	80145ec <_ZN12FrontendHeapC1Ev>
 801458a:	4b04      	ldr	r3, [pc, #16]	; (801459c <_ZN12FrontendHeap11getInstanceEv+0x28>)
 801458c:	2201      	movs	r2, #1
 801458e:	601a      	str	r2, [r3, #0]
 8014590:	4804      	ldr	r0, [pc, #16]	; (80145a4 <_ZN12FrontendHeap11getInstanceEv+0x30>)
 8014592:	f010 fb67 	bl	8024c64 <atexit>
        return instance;
 8014596:	4b02      	ldr	r3, [pc, #8]	; (80145a0 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
    }
 8014598:	4618      	mov	r0, r3
 801459a:	bd80      	pop	{r7, pc}
 801459c:	2000af70 	.word	0x2000af70
 80145a0:	200086d0 	.word	0x200086d0
 80145a4:	08014565 	.word	0x08014565

080145a8 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 80145a8:	b580      	push	{r7, lr}
 80145aa:	b082      	sub	sp, #8
 80145ac:	af00      	add	r7, sp, #0
 80145ae:	6078      	str	r0, [r7, #4]
 80145b0:	4a05      	ldr	r2, [pc, #20]	; (80145c8 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	601a      	str	r2, [r3, #0]
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	4618      	mov	r0, r3
 80145ba:	f7ff fe97 	bl	80142ec <_ZN8touchgfx7MVPHeapD1Ev>
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	4618      	mov	r0, r3
 80145c2:	3708      	adds	r7, #8
 80145c4:	46bd      	mov	sp, r7
 80145c6:	bd80      	pop	{r7, pc}
 80145c8:	08026c68 	.word	0x08026c68

080145cc <_ZN16FrontendHeapBaseD0Ev>:
 80145cc:	b580      	push	{r7, lr}
 80145ce:	b082      	sub	sp, #8
 80145d0:	af00      	add	r7, sp, #0
 80145d2:	6078      	str	r0, [r7, #4]
 80145d4:	6878      	ldr	r0, [r7, #4]
 80145d6:	f7ff ffe7 	bl	80145a8 <_ZN16FrontendHeapBaseD1Ev>
 80145da:	2114      	movs	r1, #20
 80145dc:	6878      	ldr	r0, [r7, #4]
 80145de:	f010 faf8 	bl	8024bd2 <_ZdlPvj>
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	4618      	mov	r0, r3
 80145e6:	3708      	adds	r7, #8
 80145e8:	46bd      	mov	sp, r7
 80145ea:	bd80      	pop	{r7, pc}

080145ec <_ZN12FrontendHeapC1Ev>:
    Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80145ec:	b5b0      	push	{r4, r5, r7, lr}
 80145ee:	b084      	sub	sp, #16
 80145f0:	af02      	add	r7, sp, #8
 80145f2:	6078      	str	r0, [r7, #4]
        app(model, *this)
 80145f4:	6878      	ldr	r0, [r7, #4]
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	f103 0414 	add.w	r4, r3, #20
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	f242 7238 	movw	r2, #10040	; 0x2738
 8014608:	441a      	add	r2, r3
 801460a:	6879      	ldr	r1, [r7, #4]
 801460c:	f242 734c 	movw	r3, #10060	; 0x274c
 8014610:	440b      	add	r3, r1
 8014612:	9300      	str	r3, [sp, #0]
 8014614:	4613      	mov	r3, r2
 8014616:	462a      	mov	r2, r5
 8014618:	4621      	mov	r1, r4
 801461a:	f7ff ff89 	bl	8014530 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 801461e:	4a1a      	ldr	r2, [pc, #104]	; (8014688 <_ZN12FrontendHeapC1Ev+0x9c>)
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	601a      	str	r2, [r3, #0]
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	3314      	adds	r3, #20
 8014628:	4618      	mov	r0, r3
 801462a:	f000 f8df 	bl	80147ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	332c      	adds	r3, #44	; 0x2c
 8014632:	4618      	mov	r0, r3
 8014634:	f000 f90e 	bl	8014854 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8014638:	687a      	ldr	r2, [r7, #4]
 801463a:	f242 7338 	movw	r3, #10040	; 0x2738
 801463e:	4413      	add	r3, r2
 8014640:	4618      	mov	r0, r3
 8014642:	f000 f93d 	bl	80148c0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8014646:	687a      	ldr	r2, [r7, #4]
 8014648:	f242 734c 	movw	r3, #10060	; 0x274c
 801464c:	4413      	add	r3, r2
 801464e:	687a      	ldr	r2, [r7, #4]
 8014650:	f642 019c 	movw	r1, #10396	; 0x289c
 8014654:	4411      	add	r1, r2
 8014656:	687a      	ldr	r2, [r7, #4]
 8014658:	4618      	mov	r0, r3
 801465a:	f7fe f9a5 	bl	80129a8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 801465e:	687a      	ldr	r2, [r7, #4]
 8014660:	f642 039c 	movw	r3, #10396	; 0x289c
 8014664:	4413      	add	r3, r2
 8014666:	4618      	mov	r0, r3
 8014668:	f7fe fdc8 	bl	80131fc <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 801466c:	6878      	ldr	r0, [r7, #4]
 801466e:	687a      	ldr	r2, [r7, #4]
 8014670:	f242 734c 	movw	r3, #10060	; 0x274c
 8014674:	4413      	add	r3, r2
 8014676:	4619      	mov	r1, r3
 8014678:	f7ff ff4c 	bl	8014514 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	4618      	mov	r0, r3
 8014680:	3708      	adds	r7, #8
 8014682:	46bd      	mov	sp, r7
 8014684:	bdb0      	pop	{r4, r5, r7, pc}
 8014686:	bf00      	nop
 8014688:	08026bb8 	.word	0x08026bb8

0801468c <_ZN8touchgfx8LCD24bppD1Ev>:
class LCD24bpp : public LCD
{
public:
    LCD24bpp();

    virtual ~LCD24bpp()
 801468c:	b580      	push	{r7, lr}
 801468e:	b082      	sub	sp, #8
 8014690:	af00      	add	r7, sp, #0
 8014692:	6078      	str	r0, [r7, #4]
    {
 8014694:	4a05      	ldr	r2, [pc, #20]	; (80146ac <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	601a      	str	r2, [r3, #0]
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	4618      	mov	r0, r3
 801469e:	f7ff fe45 	bl	801432c <_ZN8touchgfx3LCDD1Ev>
    }
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	4618      	mov	r0, r3
 80146a6:	3708      	adds	r7, #8
 80146a8:	46bd      	mov	sp, r7
 80146aa:	bd80      	pop	{r7, pc}
 80146ac:	080298ac 	.word	0x080298ac

080146b0 <_ZN8touchgfx8LCD24bppD0Ev>:
    virtual ~LCD24bpp()
 80146b0:	b580      	push	{r7, lr}
 80146b2:	b082      	sub	sp, #8
 80146b4:	af00      	add	r7, sp, #0
 80146b6:	6078      	str	r0, [r7, #4]
    }
 80146b8:	6878      	ldr	r0, [r7, #4]
 80146ba:	f7ff ffe7 	bl	801468c <_ZN8touchgfx8LCD24bppD1Ev>
 80146be:	2158      	movs	r1, #88	; 0x58
 80146c0:	6878      	ldr	r0, [r7, #4]
 80146c2:	f010 fa86 	bl	8024bd2 <_ZdlPvj>
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	4618      	mov	r0, r3
 80146ca:	3708      	adds	r7, #8
 80146cc:	46bd      	mov	sp, r7
 80146ce:	bd80      	pop	{r7, pc}

080146d0 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 80146d0:	b580      	push	{r7, lr}
 80146d2:	b086      	sub	sp, #24
 80146d4:	af02      	add	r7, sp, #8
 80146d6:	60f8      	str	r0, [r7, #12]
 80146d8:	60b9      	str	r1, [r7, #8]
 80146da:	607a      	str	r2, [r7, #4]
 80146dc:	603b      	str	r3, [r7, #0]
 80146de:	68f8      	ldr	r0, [r7, #12]
 80146e0:	8bbb      	ldrh	r3, [r7, #28]
 80146e2:	9301      	str	r3, [sp, #4]
 80146e4:	8b3b      	ldrh	r3, [r7, #24]
 80146e6:	9300      	str	r3, [sp, #0]
 80146e8:	683b      	ldr	r3, [r7, #0]
 80146ea:	687a      	ldr	r2, [r7, #4]
 80146ec:	68b9      	ldr	r1, [r7, #8]
 80146ee:	f7ff fe73 	bl	80143d8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 80146f2:	4a04      	ldr	r2, [pc, #16]	; (8014704 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80146f4:	68fb      	ldr	r3, [r7, #12]
 80146f6:	601a      	str	r2, [r3, #0]
    }
 80146f8:	68fb      	ldr	r3, [r7, #12]
 80146fa:	4618      	mov	r0, r3
 80146fc:	3710      	adds	r7, #16
 80146fe:	46bd      	mov	sp, r7
 8014700:	bd80      	pop	{r7, pc}
 8014702:	bf00      	nop
 8014704:	08026c8c 	.word	0x08026c8c

08014708 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8014708:	b580      	push	{r7, lr}
 801470a:	b086      	sub	sp, #24
 801470c:	af02      	add	r7, sp, #8
 801470e:	60f8      	str	r0, [r7, #12]
 8014710:	60b9      	str	r1, [r7, #8]
 8014712:	607a      	str	r2, [r7, #4]
 8014714:	603b      	str	r3, [r7, #0]
 8014716:	68f8      	ldr	r0, [r7, #12]
 8014718:	8bbb      	ldrh	r3, [r7, #28]
 801471a:	9301      	str	r3, [sp, #4]
 801471c:	8b3b      	ldrh	r3, [r7, #24]
 801471e:	9300      	str	r3, [sp, #0]
 8014720:	683b      	ldr	r3, [r7, #0]
 8014722:	687a      	ldr	r2, [r7, #4]
 8014724:	68b9      	ldr	r1, [r7, #8]
 8014726:	f7ff ffd3 	bl	80146d0 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 801472a:	4a04      	ldr	r2, [pc, #16]	; (801473c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 801472c:	68fb      	ldr	r3, [r7, #12]
 801472e:	601a      	str	r2, [r3, #0]
    }
 8014730:	68fb      	ldr	r3, [r7, #12]
 8014732:	4618      	mov	r0, r3
 8014734:	3710      	adds	r7, #16
 8014736:	46bd      	mov	sp, r7
 8014738:	bd80      	pop	{r7, pc}
 801473a:	bf00      	nop
 801473c:	080269b8 	.word	0x080269b8

08014740 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8014740:	b480      	push	{r7}
 8014742:	b083      	sub	sp, #12
 8014744:	af00      	add	r7, sp, #0
 8014746:	6078      	str	r0, [r7, #4]
 8014748:	4a04      	ldr	r2, [pc, #16]	; (801475c <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	601a      	str	r2, [r3, #0]
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	4618      	mov	r0, r3
 8014752:	370c      	adds	r7, #12
 8014754:	46bd      	mov	sp, r7
 8014756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801475a:	4770      	bx	lr
 801475c:	080269a0 	.word	0x080269a0

08014760 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8014760:	b580      	push	{r7, lr}
 8014762:	b082      	sub	sp, #8
 8014764:	af00      	add	r7, sp, #0
 8014766:	6078      	str	r0, [r7, #4]
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	4618      	mov	r0, r3
 801476c:	f7ff ffe8 	bl	8014740 <_ZN8touchgfx15TouchControllerC1Ev>
 8014770:	4a03      	ldr	r2, [pc, #12]	; (8014780 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	601a      	str	r2, [r3, #0]
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	4618      	mov	r0, r3
 801477a:	3708      	adds	r7, #8
 801477c:	46bd      	mov	sp, r7
 801477e:	bd80      	pop	{r7, pc}
 8014780:	08026988 	.word	0x08026988

08014784 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8014784:	b590      	push	{r4, r7, lr}
 8014786:	b085      	sub	sp, #20
 8014788:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 801478a:	f7fd ffe9 	bl	8012760 <_ZN14BitmapDatabase11getInstanceEv>
 801478e:	4604      	mov	r4, r0
 8014790:	f7fd fff0 	bl	8012774 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8014794:	4603      	mov	r3, r0
 8014796:	4619      	mov	r1, r3
 8014798:	2300      	movs	r3, #0
 801479a:	9300      	str	r3, [sp, #0]
 801479c:	2300      	movs	r3, #0
 801479e:	2200      	movs	r2, #0
 80147a0:	4620      	mov	r0, r4
 80147a2:	f006 fcdb 	bl	801b15c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 80147a6:	4809      	ldr	r0, [pc, #36]	; (80147cc <touchgfx_init+0x48>)
 80147a8:	f7ff fd70 	bl	801428c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 80147ac:	2000      	movs	r0, #0
 80147ae:	f7fe f805 	bl	80127bc <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 80147b2:	4807      	ldr	r0, [pc, #28]	; (80147d0 <touchgfx_init+0x4c>)
 80147b4:	f006 fc20 	bl	801aff8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 80147b8:	f7ff fedc 	bl	8014574 <_ZN12FrontendHeap11getInstanceEv>
 80147bc:	6078      	str	r0, [r7, #4]
  (void)heap; // we need to obtain the reference above to initialize the frontend heap.

  hal.initialize();
 80147be:	4805      	ldr	r0, [pc, #20]	; (80147d4 <touchgfx_init+0x50>)
 80147c0:	f7fe ffda 	bl	8013778 <_ZN11TouchGFXHAL10initializeEv>
}
 80147c4:	bf00      	nop
 80147c6:	370c      	adds	r7, #12
 80147c8:	46bd      	mov	sp, r7
 80147ca:	bd90      	pop	{r4, r7, pc}
 80147cc:	2000bbf0 	.word	0x2000bbf0
 80147d0:	20000040 	.word	0x20000040
 80147d4:	2000bbf4 	.word	0x2000bbf4

080147d8 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 80147d8:	b580      	push	{r7, lr}
 80147da:	af00      	add	r7, sp, #0
  * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
 80147dc:	4802      	ldr	r0, [pc, #8]	; (80147e8 <touchgfx_taskEntry+0x10>)
 80147de:	f001 fa06 	bl	8015bee <_ZN8touchgfx3HAL9taskEntryEv>
}
 80147e2:	bf00      	nop
 80147e4:	bd80      	pop	{r7, pc}
 80147e6:	bf00      	nop
 80147e8:	2000bbf4 	.word	0x2000bbf4

080147ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs an empty Partition.
     */
    Partition() : AbstractPartition()
 80147ec:	b580      	push	{r7, lr}
 80147ee:	b082      	sub	sp, #8
 80147f0:	af00      	add	r7, sp, #0
 80147f2:	6078      	str	r0, [r7, #4]
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	4618      	mov	r0, r3
 80147f8:	f000 fc76 	bl	80150e8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80147fc:	4a03      	ldr	r2, [pc, #12]	; (801480c <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	601a      	str	r2, [r3, #0]
    {
    }
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	4618      	mov	r0, r3
 8014806:	3708      	adds	r7, #8
 8014808:	46bd      	mov	sp, r7
 801480a:	bd80      	pop	{r7, pc}
 801480c:	08026c34 	.word	0x08026c34

08014810 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    /**
     * @fn virtual Partition::~Partition()
     *
     * @brief Destructor.
     */
    virtual ~Partition()
 8014810:	b580      	push	{r7, lr}
 8014812:	b082      	sub	sp, #8
 8014814:	af00      	add	r7, sp, #0
 8014816:	6078      	str	r0, [r7, #4]
    {
    }
 8014818:	4a05      	ldr	r2, [pc, #20]	; (8014830 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	601a      	str	r2, [r3, #0]
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	4618      	mov	r0, r3
 8014822:	f000 fc5f 	bl	80150e4 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	4618      	mov	r0, r3
 801482a:	3708      	adds	r7, #8
 801482c:	46bd      	mov	sp, r7
 801482e:	bd80      	pop	{r7, pc}
 8014830:	08026c34 	.word	0x08026c34

08014834 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8014834:	b580      	push	{r7, lr}
 8014836:	b082      	sub	sp, #8
 8014838:	af00      	add	r7, sp, #0
 801483a:	6078      	str	r0, [r7, #4]
    }
 801483c:	6878      	ldr	r0, [r7, #4]
 801483e:	f7ff ffe7 	bl	8014810 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8014842:	2118      	movs	r1, #24
 8014844:	6878      	ldr	r0, [r7, #4]
 8014846:	f010 f9c4 	bl	8024bd2 <_ZdlPvj>
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	4618      	mov	r0, r3
 801484e:	3708      	adds	r7, #8
 8014850:	46bd      	mov	sp, r7
 8014852:	bd80      	pop	{r7, pc}

08014854 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 8014854:	b580      	push	{r7, lr}
 8014856:	b082      	sub	sp, #8
 8014858:	af00      	add	r7, sp, #0
 801485a:	6078      	str	r0, [r7, #4]
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	4618      	mov	r0, r3
 8014860:	f000 fc42 	bl	80150e8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8014864:	4a03      	ldr	r2, [pc, #12]	; (8014874 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	601a      	str	r2, [r3, #0]
    }
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	4618      	mov	r0, r3
 801486e:	3708      	adds	r7, #8
 8014870:	46bd      	mov	sp, r7
 8014872:	bd80      	pop	{r7, pc}
 8014874:	08026c00 	.word	0x08026c00

08014878 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 8014878:	b580      	push	{r7, lr}
 801487a:	b082      	sub	sp, #8
 801487c:	af00      	add	r7, sp, #0
 801487e:	6078      	str	r0, [r7, #4]
    }
 8014880:	4a05      	ldr	r2, [pc, #20]	; (8014898 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	601a      	str	r2, [r3, #0]
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	4618      	mov	r0, r3
 801488a:	f000 fc2b 	bl	80150e4 <_ZN8touchgfx17AbstractPartitionD1Ev>
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	4618      	mov	r0, r3
 8014892:	3708      	adds	r7, #8
 8014894:	46bd      	mov	sp, r7
 8014896:	bd80      	pop	{r7, pc}
 8014898:	08026c00 	.word	0x08026c00

0801489c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 801489c:	b580      	push	{r7, lr}
 801489e:	b082      	sub	sp, #8
 80148a0:	af00      	add	r7, sp, #0
 80148a2:	6078      	str	r0, [r7, #4]
    }
 80148a4:	6878      	ldr	r0, [r7, #4]
 80148a6:	f7ff ffe7 	bl	8014878 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80148aa:	f242 710c 	movw	r1, #9996	; 0x270c
 80148ae:	6878      	ldr	r0, [r7, #4]
 80148b0:	f010 f98f 	bl	8024bd2 <_ZdlPvj>
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	4618      	mov	r0, r3
 80148b8:	3708      	adds	r7, #8
 80148ba:	46bd      	mov	sp, r7
 80148bc:	bd80      	pop	{r7, pc}
	...

080148c0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 80148c0:	b580      	push	{r7, lr}
 80148c2:	b082      	sub	sp, #8
 80148c4:	af00      	add	r7, sp, #0
 80148c6:	6078      	str	r0, [r7, #4]
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	4618      	mov	r0, r3
 80148cc:	f000 fc0c 	bl	80150e8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80148d0:	4a03      	ldr	r2, [pc, #12]	; (80148e0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	601a      	str	r2, [r3, #0]
    }
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	4618      	mov	r0, r3
 80148da:	3708      	adds	r7, #8
 80148dc:	46bd      	mov	sp, r7
 80148de:	bd80      	pop	{r7, pc}
 80148e0:	08026bcc 	.word	0x08026bcc

080148e4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 80148e4:	b580      	push	{r7, lr}
 80148e6:	b082      	sub	sp, #8
 80148e8:	af00      	add	r7, sp, #0
 80148ea:	6078      	str	r0, [r7, #4]
    }
 80148ec:	4a05      	ldr	r2, [pc, #20]	; (8014904 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	601a      	str	r2, [r3, #0]
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	4618      	mov	r0, r3
 80148f6:	f000 fbf5 	bl	80150e4 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	4618      	mov	r0, r3
 80148fe:	3708      	adds	r7, #8
 8014900:	46bd      	mov	sp, r7
 8014902:	bd80      	pop	{r7, pc}
 8014904:	08026bcc 	.word	0x08026bcc

08014908 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8014908:	b580      	push	{r7, lr}
 801490a:	b082      	sub	sp, #8
 801490c:	af00      	add	r7, sp, #0
 801490e:	6078      	str	r0, [r7, #4]
    }
 8014910:	6878      	ldr	r0, [r7, #4]
 8014912:	f7ff ffe7 	bl	80148e4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8014916:	2114      	movs	r1, #20
 8014918:	6878      	ldr	r0, [r7, #4]
 801491a:	f010 f95a 	bl	8024bd2 <_ZdlPvj>
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	4618      	mov	r0, r3
 8014922:	3708      	adds	r7, #8
 8014924:	46bd      	mov	sp, r7
 8014926:	bd80      	pop	{r7, pc}

08014928 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8014928:	b580      	push	{r7, lr}
 801492a:	b082      	sub	sp, #8
 801492c:	af00      	add	r7, sp, #0
 801492e:	6078      	str	r0, [r7, #4]
 8014930:	4a11      	ldr	r2, [pc, #68]	; (8014978 <_ZN12FrontendHeapD1Ev+0x50>)
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	601a      	str	r2, [r3, #0]
 8014936:	687a      	ldr	r2, [r7, #4]
 8014938:	f242 734c 	movw	r3, #10060	; 0x274c
 801493c:	4413      	add	r3, r2
 801493e:	4618      	mov	r0, r3
 8014940:	f7fd fffc 	bl	801293c <_ZN19FrontendApplicationD1Ev>
 8014944:	687a      	ldr	r2, [r7, #4]
 8014946:	f242 7338 	movw	r3, #10040	; 0x2738
 801494a:	4413      	add	r3, r2
 801494c:	4618      	mov	r0, r3
 801494e:	f7ff ffc9 	bl	80148e4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	332c      	adds	r3, #44	; 0x2c
 8014956:	4618      	mov	r0, r3
 8014958:	f7ff ff8e 	bl	8014878 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	3314      	adds	r3, #20
 8014960:	4618      	mov	r0, r3
 8014962:	f7ff ff55 	bl	8014810 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	4618      	mov	r0, r3
 801496a:	f7ff fe1d 	bl	80145a8 <_ZN16FrontendHeapBaseD1Ev>
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	4618      	mov	r0, r3
 8014972:	3708      	adds	r7, #8
 8014974:	46bd      	mov	sp, r7
 8014976:	bd80      	pop	{r7, pc}
 8014978:	08026bb8 	.word	0x08026bb8

0801497c <_ZN12FrontendHeapD0Ev>:
 801497c:	b580      	push	{r7, lr}
 801497e:	b082      	sub	sp, #8
 8014980:	af00      	add	r7, sp, #0
 8014982:	6078      	str	r0, [r7, #4]
 8014984:	6878      	ldr	r0, [r7, #4]
 8014986:	f7ff ffcf 	bl	8014928 <_ZN12FrontendHeapD1Ev>
 801498a:	f642 01a0 	movw	r1, #10400	; 0x28a0
 801498e:	6878      	ldr	r0, [r7, #4]
 8014990:	f010 f91f 	bl	8024bd2 <_ZdlPvj>
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	4618      	mov	r0, r3
 8014998:	3708      	adds	r7, #8
 801499a:	46bd      	mov	sp, r7
 801499c:	bd80      	pop	{r7, pc}
	...

080149a0 <_Z41__static_initialization_and_destruction_0ii>:
 80149a0:	b580      	push	{r7, lr}
 80149a2:	b084      	sub	sp, #16
 80149a4:	af02      	add	r7, sp, #8
 80149a6:	6078      	str	r0, [r7, #4]
 80149a8:	6039      	str	r1, [r7, #0]
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	2b01      	cmp	r3, #1
 80149ae:	d119      	bne.n	80149e4 <_Z41__static_initialization_and_destruction_0ii+0x44>
 80149b0:	683b      	ldr	r3, [r7, #0]
 80149b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80149b6:	4293      	cmp	r3, r2
 80149b8:	d114      	bne.n	80149e4 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 80149ba:	4818      	ldr	r0, [pc, #96]	; (8014a1c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80149bc:	f7ff fed0 	bl	8014760 <_ZN20STM32TouchControllerC1Ev>
static STM32F7DMA dma;
 80149c0:	4817      	ldr	r0, [pc, #92]	; (8014a20 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80149c2:	f7ff f965 	bl	8013c90 <_ZN10STM32F7DMAC1Ev>
static LCD24bpp display;
 80149c6:	4817      	ldr	r0, [pc, #92]	; (8014a24 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80149c8:	f008 fdee 	bl	801d5a8 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 80149cc:	f44f 7388 	mov.w	r3, #272	; 0x110
 80149d0:	9301      	str	r3, [sp, #4]
 80149d2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80149d6:	9300      	str	r3, [sp, #0]
 80149d8:	4b10      	ldr	r3, [pc, #64]	; (8014a1c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80149da:	4a12      	ldr	r2, [pc, #72]	; (8014a24 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80149dc:	4910      	ldr	r1, [pc, #64]	; (8014a20 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80149de:	4812      	ldr	r0, [pc, #72]	; (8014a28 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80149e0:	f7ff fe92 	bl	8014708 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d113      	bne.n	8014a12 <_Z41__static_initialization_and_destruction_0ii+0x72>
 80149ea:	683b      	ldr	r3, [r7, #0]
 80149ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80149f0:	4293      	cmp	r3, r2
 80149f2:	d10e      	bne.n	8014a12 <_Z41__static_initialization_and_destruction_0ii+0x72>
 80149f4:	480c      	ldr	r0, [pc, #48]	; (8014a28 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80149f6:	f7fe ff25 	bl	8013844 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 80149fa:	480c      	ldr	r0, [pc, #48]	; (8014a2c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80149fc:	f7fa fb60 	bl	800f0c0 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 8014a00:	4808      	ldr	r0, [pc, #32]	; (8014a24 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8014a02:	f7ff fe43 	bl	801468c <_ZN8touchgfx8LCD24bppD1Ev>
static STM32F7DMA dma;
 8014a06:	4806      	ldr	r0, [pc, #24]	; (8014a20 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8014a08:	f7ff f96c 	bl	8013ce4 <_ZN10STM32F7DMAD1Ev>
static STM32TouchController tc;
 8014a0c:	4803      	ldr	r0, [pc, #12]	; (8014a1c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8014a0e:	f7fe fc8f 	bl	8013330 <_ZN20STM32TouchControllerD1Ev>
}
 8014a12:	bf00      	nop
 8014a14:	3708      	adds	r7, #8
 8014a16:	46bd      	mov	sp, r7
 8014a18:	bd80      	pop	{r7, pc}
 8014a1a:	bf00      	nop
 8014a1c:	2000af74 	.word	0x2000af74
 8014a20:	2000af78 	.word	0x2000af78
 8014a24:	2000bb98 	.word	0x2000bb98
 8014a28:	2000bbf4 	.word	0x2000bbf4
 8014a2c:	20000040 	.word	0x20000040

08014a30 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity()
     */
    virtual uint16_t capacity() const
 8014a30:	b480      	push	{r7}
 8014a32:	b083      	sub	sp, #12
 8014a34:	af00      	add	r7, sp, #0
 8014a36:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8014a38:	2301      	movs	r3, #1
    }
 8014a3a:	4618      	mov	r0, r3
 8014a3c:	370c      	adds	r7, #12
 8014a3e:	46bd      	mov	sp, r7
 8014a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a44:	4770      	bx	lr

08014a46 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size()
     */
    virtual uint32_t element_size()
 8014a46:	b480      	push	{r7}
 8014a48:	b083      	sub	sp, #12
 8014a4a:	af00      	add	r7, sp, #0
 8014a4c:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8014a4e:	230c      	movs	r3, #12
    }
 8014a50:	4618      	mov	r0, r3
 8014a52:	370c      	adds	r7, #12
 8014a54:	46bd      	mov	sp, r7
 8014a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a5a:	4770      	bx	lr

08014a5c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual void* element(uint16_t index)
 8014a5c:	b480      	push	{r7}
 8014a5e:	b083      	sub	sp, #12
 8014a60:	af00      	add	r7, sp, #0
 8014a62:	6078      	str	r0, [r7, #4]
 8014a64:	460b      	mov	r3, r1
 8014a66:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8014a68:	887a      	ldrh	r2, [r7, #2]
 8014a6a:	4613      	mov	r3, r2
 8014a6c:	005b      	lsls	r3, r3, #1
 8014a6e:	4413      	add	r3, r2
 8014a70:	009b      	lsls	r3, r3, #2
 8014a72:	3308      	adds	r3, #8
 8014a74:	687a      	ldr	r2, [r7, #4]
 8014a76:	4413      	add	r3, r2
    }
 8014a78:	4618      	mov	r0, r3
 8014a7a:	370c      	adds	r7, #12
 8014a7c:	46bd      	mov	sp, r7
 8014a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a82:	4770      	bx	lr

08014a84 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual const void* element(uint16_t index) const
 8014a84:	b480      	push	{r7}
 8014a86:	b083      	sub	sp, #12
 8014a88:	af00      	add	r7, sp, #0
 8014a8a:	6078      	str	r0, [r7, #4]
 8014a8c:	460b      	mov	r3, r1
 8014a8e:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8014a90:	887a      	ldrh	r2, [r7, #2]
 8014a92:	4613      	mov	r3, r2
 8014a94:	005b      	lsls	r3, r3, #1
 8014a96:	4413      	add	r3, r2
 8014a98:	009b      	lsls	r3, r3, #2
 8014a9a:	3308      	adds	r3, #8
 8014a9c:	687a      	ldr	r2, [r7, #4]
 8014a9e:	4413      	add	r3, r2
    }
 8014aa0:	4618      	mov	r0, r3
 8014aa2:	370c      	adds	r7, #12
 8014aa4:	46bd      	mov	sp, r7
 8014aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aaa:	4770      	bx	lr

08014aac <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8014aac:	b480      	push	{r7}
 8014aae:	b083      	sub	sp, #12
 8014ab0:	af00      	add	r7, sp, #0
 8014ab2:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8014ab4:	2301      	movs	r3, #1
    }
 8014ab6:	4618      	mov	r0, r3
 8014ab8:	370c      	adds	r7, #12
 8014aba:	46bd      	mov	sp, r7
 8014abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ac0:	4770      	bx	lr

08014ac2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8014ac2:	b480      	push	{r7}
 8014ac4:	b083      	sub	sp, #12
 8014ac6:	af00      	add	r7, sp, #0
 8014ac8:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8014aca:	f242 7304 	movw	r3, #9988	; 0x2704
    }
 8014ace:	4618      	mov	r0, r3
 8014ad0:	370c      	adds	r7, #12
 8014ad2:	46bd      	mov	sp, r7
 8014ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ad8:	4770      	bx	lr

08014ada <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8014ada:	b480      	push	{r7}
 8014adc:	b083      	sub	sp, #12
 8014ade:	af00      	add	r7, sp, #0
 8014ae0:	6078      	str	r0, [r7, #4]
 8014ae2:	460b      	mov	r3, r1
 8014ae4:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8014ae6:	887b      	ldrh	r3, [r7, #2]
 8014ae8:	f242 7204 	movw	r2, #9988	; 0x2704
 8014aec:	fb02 f303 	mul.w	r3, r2, r3
 8014af0:	3308      	adds	r3, #8
 8014af2:	687a      	ldr	r2, [r7, #4]
 8014af4:	4413      	add	r3, r2
    }
 8014af6:	4618      	mov	r0, r3
 8014af8:	370c      	adds	r7, #12
 8014afa:	46bd      	mov	sp, r7
 8014afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b00:	4770      	bx	lr

08014b02 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8014b02:	b480      	push	{r7}
 8014b04:	b083      	sub	sp, #12
 8014b06:	af00      	add	r7, sp, #0
 8014b08:	6078      	str	r0, [r7, #4]
 8014b0a:	460b      	mov	r3, r1
 8014b0c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8014b0e:	887b      	ldrh	r3, [r7, #2]
 8014b10:	f242 7204 	movw	r2, #9988	; 0x2704
 8014b14:	fb02 f303 	mul.w	r3, r2, r3
 8014b18:	3308      	adds	r3, #8
 8014b1a:	687a      	ldr	r2, [r7, #4]
 8014b1c:	4413      	add	r3, r2
    }
 8014b1e:	4618      	mov	r0, r3
 8014b20:	370c      	adds	r7, #12
 8014b22:	46bd      	mov	sp, r7
 8014b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b28:	4770      	bx	lr

08014b2a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8014b2a:	b480      	push	{r7}
 8014b2c:	b083      	sub	sp, #12
 8014b2e:	af00      	add	r7, sp, #0
 8014b30:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8014b32:	2301      	movs	r3, #1
    }
 8014b34:	4618      	mov	r0, r3
 8014b36:	370c      	adds	r7, #12
 8014b38:	46bd      	mov	sp, r7
 8014b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b3e:	4770      	bx	lr

08014b40 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8014b40:	b480      	push	{r7}
 8014b42:	b083      	sub	sp, #12
 8014b44:	af00      	add	r7, sp, #0
 8014b46:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8014b48:	2310      	movs	r3, #16
    }
 8014b4a:	4618      	mov	r0, r3
 8014b4c:	370c      	adds	r7, #12
 8014b4e:	46bd      	mov	sp, r7
 8014b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b54:	4770      	bx	lr

08014b56 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8014b56:	b480      	push	{r7}
 8014b58:	b083      	sub	sp, #12
 8014b5a:	af00      	add	r7, sp, #0
 8014b5c:	6078      	str	r0, [r7, #4]
 8014b5e:	460b      	mov	r3, r1
 8014b60:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8014b62:	887b      	ldrh	r3, [r7, #2]
 8014b64:	011b      	lsls	r3, r3, #4
 8014b66:	3308      	adds	r3, #8
 8014b68:	687a      	ldr	r2, [r7, #4]
 8014b6a:	4413      	add	r3, r2
    }
 8014b6c:	4618      	mov	r0, r3
 8014b6e:	370c      	adds	r7, #12
 8014b70:	46bd      	mov	sp, r7
 8014b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b76:	4770      	bx	lr

08014b78 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8014b78:	b480      	push	{r7}
 8014b7a:	b083      	sub	sp, #12
 8014b7c:	af00      	add	r7, sp, #0
 8014b7e:	6078      	str	r0, [r7, #4]
 8014b80:	460b      	mov	r3, r1
 8014b82:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8014b84:	887b      	ldrh	r3, [r7, #2]
 8014b86:	011b      	lsls	r3, r3, #4
 8014b88:	3308      	adds	r3, #8
 8014b8a:	687a      	ldr	r2, [r7, #4]
 8014b8c:	4413      	add	r3, r2
    }
 8014b8e:	4618      	mov	r0, r3
 8014b90:	370c      	adds	r7, #12
 8014b92:	46bd      	mov	sp, r7
 8014b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b98:	4770      	bx	lr

08014b9a <_GLOBAL__sub_I_touchgfx_init>:
 8014b9a:	b580      	push	{r7, lr}
 8014b9c:	af00      	add	r7, sp, #0
 8014b9e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014ba2:	2001      	movs	r0, #1
 8014ba4:	f7ff fefc 	bl	80149a0 <_Z41__static_initialization_and_destruction_0ii>
 8014ba8:	bd80      	pop	{r7, pc}

08014baa <_GLOBAL__sub_D_touchgfx_init>:
 8014baa:	b580      	push	{r7, lr}
 8014bac:	af00      	add	r7, sp, #0
 8014bae:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014bb2:	2000      	movs	r0, #0
 8014bb4:	f7ff fef4 	bl	80149a0 <_Z41__static_initialization_and_destruction_0ii>
 8014bb8:	bd80      	pop	{r7, pc}

08014bba <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8014bba:	b580      	push	{r7, lr}
 8014bbc:	b082      	sub	sp, #8
 8014bbe:	af00      	add	r7, sp, #0
 8014bc0:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	681b      	ldr	r3, [r3, #0]
 8014bc6:	3318      	adds	r3, #24
 8014bc8:	681b      	ldr	r3, [r3, #0]
 8014bca:	6878      	ldr	r0, [r7, #4]
 8014bcc:	4798      	blx	r3
    }
 8014bce:	bf00      	nop
 8014bd0:	3708      	adds	r7, #8
 8014bd2:	46bd      	mov	sp, r7
 8014bd4:	bd80      	pop	{r7, pc}

08014bd6 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 8014bd6:	b480      	push	{r7}
 8014bd8:	b083      	sub	sp, #12
 8014bda:	af00      	add	r7, sp, #0
 8014bdc:	6078      	str	r0, [r7, #4]
 8014bde:	460b      	mov	r3, r1
 8014be0:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	78fa      	ldrb	r2, [r7, #3]
 8014be6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 8014bea:	bf00      	nop
 8014bec:	370c      	adds	r7, #12
 8014bee:	46bd      	mov	sp, r7
 8014bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bf4:	4770      	bx	lr

08014bf6 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8014bf6:	b480      	push	{r7}
 8014bf8:	b083      	sub	sp, #12
 8014bfa:	af00      	add	r7, sp, #0
 8014bfc:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8014c04:	3301      	adds	r3, #1
 8014c06:	b2da      	uxtb	r2, r3
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 8014c0e:	bf00      	nop
 8014c10:	370c      	adds	r7, #12
 8014c12:	46bd      	mov	sp, r7
 8014c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c18:	4770      	bx	lr
	...

08014c1c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 8014c1c:	b580      	push	{r7, lr}
 8014c1e:	b082      	sub	sp, #8
 8014c20:	af00      	add	r7, sp, #0
 8014c22:	6078      	str	r0, [r7, #4]
 8014c24:	460b      	mov	r3, r1
 8014c26:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 8014c28:	78fb      	ldrb	r3, [r7, #3]
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	d002      	beq.n	8014c34 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 8014c2e:	78fb      	ldrb	r3, [r7, #3]
 8014c30:	2b02      	cmp	r3, #2
 8014c32:	d105      	bne.n	8014c40 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	78fa      	ldrb	r2, [r7, #3]
 8014c38:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 8014c3c:	2301      	movs	r3, #1
 8014c3e:	e027      	b.n	8014c90 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 8014c40:	78fb      	ldrb	r3, [r7, #3]
 8014c42:	2b01      	cmp	r3, #1
 8014c44:	d123      	bne.n	8014c8e <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	d014      	beq.n	8014c78 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	681b      	ldr	r3, [r3, #0]
 8014c52:	3380      	adds	r3, #128	; 0x80
 8014c54:	681b      	ldr	r3, [r3, #0]
 8014c56:	6878      	ldr	r0, [r7, #4]
 8014c58:	4798      	blx	r3
 8014c5a:	4603      	mov	r3, r0
 8014c5c:	461a      	mov	r2, r3
 8014c5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014c62:	429a      	cmp	r2, r3
 8014c64:	d008      	beq.n	8014c78 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8014c66:	4b0c      	ldr	r3, [pc, #48]	; (8014c98 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 8014c68:	781b      	ldrb	r3, [r3, #0]
 8014c6a:	f083 0301 	eor.w	r3, r3, #1
 8014c6e:	b2db      	uxtb	r3, r3
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	d001      	beq.n	8014c78 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8014c74:	2301      	movs	r3, #1
 8014c76:	e000      	b.n	8014c7a <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 8014c78:	2300      	movs	r3, #0
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	d005      	beq.n	8014c8a <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	78fa      	ldrb	r2, [r7, #3]
 8014c82:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 8014c86:	2301      	movs	r3, #1
 8014c88:	e002      	b.n	8014c90 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 8014c8a:	2300      	movs	r3, #0
 8014c8c:	e000      	b.n	8014c90 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 8014c8e:	2300      	movs	r3, #0
    }
 8014c90:	4618      	mov	r0, r3
 8014c92:	3708      	adds	r7, #8
 8014c94:	46bd      	mov	sp, r7
 8014c96:	bd80      	pop	{r7, pc}
 8014c98:	2000bc7a 	.word	0x2000bc7a

08014c9c <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void(*delayF)(uint16_t))
 8014c9c:	b480      	push	{r7}
 8014c9e:	b083      	sub	sp, #12
 8014ca0:	af00      	add	r7, sp, #0
 8014ca2:	6078      	str	r0, [r7, #4]
 8014ca4:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	683a      	ldr	r2, [r7, #0]
 8014caa:	639a      	str	r2, [r3, #56]	; 0x38
    }
 8014cac:	bf00      	nop
 8014cae:	370c      	adds	r7, #12
 8014cb0:	46bd      	mov	sp, r7
 8014cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cb6:	4770      	bx	lr

08014cb8 <__NVIC_EnableIRQ>:
{
 8014cb8:	b480      	push	{r7}
 8014cba:	b083      	sub	sp, #12
 8014cbc:	af00      	add	r7, sp, #0
 8014cbe:	4603      	mov	r3, r0
 8014cc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8014cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014cc6:	2b00      	cmp	r3, #0
 8014cc8:	db0d      	blt.n	8014ce6 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8014cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014cce:	b2db      	uxtb	r3, r3
 8014cd0:	f003 021f 	and.w	r2, r3, #31
 8014cd4:	4907      	ldr	r1, [pc, #28]	; (8014cf4 <__NVIC_EnableIRQ+0x3c>)
 8014cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014cda:	095b      	lsrs	r3, r3, #5
 8014cdc:	2001      	movs	r0, #1
 8014cde:	fa00 f202 	lsl.w	r2, r0, r2
 8014ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8014ce6:	bf00      	nop
 8014ce8:	370c      	adds	r7, #12
 8014cea:	46bd      	mov	sp, r7
 8014cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cf0:	4770      	bx	lr
 8014cf2:	bf00      	nop
 8014cf4:	e000e100 	.word	0xe000e100

08014cf8 <__NVIC_DisableIRQ>:
{
 8014cf8:	b480      	push	{r7}
 8014cfa:	b083      	sub	sp, #12
 8014cfc:	af00      	add	r7, sp, #0
 8014cfe:	4603      	mov	r3, r0
 8014d00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8014d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	db12      	blt.n	8014d30 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8014d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014d0e:	b2db      	uxtb	r3, r3
 8014d10:	f003 021f 	and.w	r2, r3, #31
 8014d14:	4909      	ldr	r1, [pc, #36]	; (8014d3c <__NVIC_DisableIRQ+0x44>)
 8014d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014d1a:	095b      	lsrs	r3, r3, #5
 8014d1c:	2001      	movs	r0, #1
 8014d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8014d22:	3320      	adds	r3, #32
 8014d24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8014d28:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8014d2c:	f3bf 8f6f 	isb	sy
}
 8014d30:	bf00      	nop
 8014d32:	370c      	adds	r7, #12
 8014d34:	46bd      	mov	sp, r7
 8014d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d3a:	4770      	bx	lr
 8014d3c:	e000e100 	.word	0xe000e100

08014d40 <__NVIC_SetPriority>:
{
 8014d40:	b480      	push	{r7}
 8014d42:	b083      	sub	sp, #12
 8014d44:	af00      	add	r7, sp, #0
 8014d46:	4603      	mov	r3, r0
 8014d48:	6039      	str	r1, [r7, #0]
 8014d4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8014d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	db0c      	blt.n	8014d6e <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014d54:	683b      	ldr	r3, [r7, #0]
 8014d56:	b2db      	uxtb	r3, r3
 8014d58:	4a0e      	ldr	r2, [pc, #56]	; (8014d94 <__NVIC_SetPriority+0x54>)
 8014d5a:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8014d5e:	4608      	mov	r0, r1
 8014d60:	011b      	lsls	r3, r3, #4
 8014d62:	b2d9      	uxtb	r1, r3
 8014d64:	1813      	adds	r3, r2, r0
 8014d66:	460a      	mov	r2, r1
 8014d68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8014d6c:	e00c      	b.n	8014d88 <__NVIC_SetPriority+0x48>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014d6e:	683b      	ldr	r3, [r7, #0]
 8014d70:	b2da      	uxtb	r2, r3
 8014d72:	4909      	ldr	r1, [pc, #36]	; (8014d98 <__NVIC_SetPriority+0x58>)
 8014d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014d78:	b2db      	uxtb	r3, r3
 8014d7a:	f003 030f 	and.w	r3, r3, #15
 8014d7e:	3b04      	subs	r3, #4
 8014d80:	0112      	lsls	r2, r2, #4
 8014d82:	b2d2      	uxtb	r2, r2
 8014d84:	440b      	add	r3, r1
 8014d86:	761a      	strb	r2, [r3, #24]
}
 8014d88:	bf00      	nop
 8014d8a:	370c      	adds	r7, #12
 8014d8c:	46bd      	mov	sp, r7
 8014d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d92:	4770      	bx	lr
 8014d94:	e000e100 	.word	0xe000e100
 8014d98:	e000ed00 	.word	0xe000ed00

08014d9c <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8014d9c:	b5b0      	push	{r4, r5, r7, lr}
 8014d9e:	b082      	sub	sp, #8
 8014da0:	af00      	add	r7, sp, #0
 8014da2:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	4618      	mov	r0, r3
 8014da8:	f001 f9e6 	bl	8016178 <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(touchgfx::Application::getInstance()));
 8014dac:	687d      	ldr	r5, [r7, #4]
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	681b      	ldr	r3, [r3, #0]
 8014db2:	334c      	adds	r3, #76	; 0x4c
 8014db4:	681c      	ldr	r4, [r3, #0]
 8014db6:	f003 ff43 	bl	8018c40 <_ZN8touchgfx11Application11getInstanceEv>
 8014dba:	4603      	mov	r3, r0
 8014dbc:	4619      	mov	r1, r3
 8014dbe:	4628      	mov	r0, r5
 8014dc0:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	490d      	ldr	r1, [pc, #52]	; (8014dfc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 8014dc6:	4618      	mov	r0, r3
 8014dc8:	f7ff ff68 	bl	8014c9c <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	2101      	movs	r1, #1
 8014dd0:	4618      	mov	r0, r3
 8014dd2:	f7ff ff23 	bl	8014c1c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>

    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 8014dd6:	6878      	ldr	r0, [r7, #4]
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	681b      	ldr	r3, [r3, #0]
 8014ddc:	3374      	adds	r3, #116	; 0x74
 8014dde:	681c      	ldr	r4, [r3, #0]
 8014de0:	2300      	movs	r3, #0
 8014de2:	2200      	movs	r2, #0
 8014de4:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8014de8:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	2101      	movs	r1, #1
 8014dee:	4618      	mov	r0, r3
 8014df0:	f7ff fef1 	bl	8014bd6 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 8014df4:	bf00      	nop
 8014df6:	3708      	adds	r7, #8
 8014df8:	46bd      	mov	sp, r7
 8014dfa:	bdb0      	pop	{r4, r5, r7, pc}
 8014dfc:	080139dd 	.word	0x080139dd

08014e00 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8014e00:	b580      	push	{r7, lr}
 8014e02:	b082      	sub	sp, #8
 8014e04:	af00      	add	r7, sp, #0
 8014e06:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8014e08:	2109      	movs	r1, #9
 8014e0a:	205a      	movs	r0, #90	; 0x5a
 8014e0c:	f7ff ff98 	bl	8014d40 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8014e10:	2109      	movs	r1, #9
 8014e12:	2058      	movs	r0, #88	; 0x58
 8014e14:	f7ff ff94 	bl	8014d40 <__NVIC_SetPriority>
}
 8014e18:	bf00      	nop
 8014e1a:	3708      	adds	r7, #8
 8014e1c:	46bd      	mov	sp, r7
 8014e1e:	bd80      	pop	{r7, pc}

08014e20 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8014e20:	b580      	push	{r7, lr}
 8014e22:	b082      	sub	sp, #8
 8014e24:	af00      	add	r7, sp, #0
 8014e26:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8014e28:	205a      	movs	r0, #90	; 0x5a
 8014e2a:	f7ff ff45 	bl	8014cb8 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8014e2e:	2058      	movs	r0, #88	; 0x58
 8014e30:	f7ff ff42 	bl	8014cb8 <__NVIC_EnableIRQ>
}
 8014e34:	bf00      	nop
 8014e36:	3708      	adds	r7, #8
 8014e38:	46bd      	mov	sp, r7
 8014e3a:	bd80      	pop	{r7, pc}

08014e3c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8014e3c:	b580      	push	{r7, lr}
 8014e3e:	b082      	sub	sp, #8
 8014e40:	af00      	add	r7, sp, #0
 8014e42:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8014e44:	205a      	movs	r0, #90	; 0x5a
 8014e46:	f7ff ff57 	bl	8014cf8 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8014e4a:	2058      	movs	r0, #88	; 0x58
 8014e4c:	f7ff ff54 	bl	8014cf8 <__NVIC_DisableIRQ>
}
 8014e50:	bf00      	nop
 8014e52:	3708      	adds	r7, #8
 8014e54:	46bd      	mov	sp, r7
 8014e56:	bd80      	pop	{r7, pc}

08014e58 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8014e58:	b480      	push	{r7}
 8014e5a:	b083      	sub	sp, #12
 8014e5c:	af00      	add	r7, sp, #0
 8014e5e:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8014e60:	4b11      	ldr	r3, [pc, #68]	; (8014ea8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8014e62:	68db      	ldr	r3, [r3, #12]
 8014e64:	b29b      	uxth	r3, r3
 8014e66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014e6a:	b29b      	uxth	r3, r3
 8014e6c:	3b01      	subs	r3, #1
 8014e6e:	b29a      	uxth	r2, r3
 8014e70:	4b0e      	ldr	r3, [pc, #56]	; (8014eac <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8014e72:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8014e74:	4b0c      	ldr	r3, [pc, #48]	; (8014ea8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8014e76:	691b      	ldr	r3, [r3, #16]
 8014e78:	b29b      	uxth	r3, r3
 8014e7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014e7e:	b29b      	uxth	r3, r3
 8014e80:	3b01      	subs	r3, #1
 8014e82:	b29a      	uxth	r2, r3
 8014e84:	4b0a      	ldr	r3, [pc, #40]	; (8014eb0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8014e86:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8014e88:	4b08      	ldr	r3, [pc, #32]	; (8014eac <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8014e8a:	881a      	ldrh	r2, [r3, #0]
 8014e8c:	4b06      	ldr	r3, [pc, #24]	; (8014ea8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8014e8e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8014e90:	4b05      	ldr	r3, [pc, #20]	; (8014ea8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8014e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014e94:	4a04      	ldr	r2, [pc, #16]	; (8014ea8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8014e96:	f043 0301 	orr.w	r3, r3, #1
 8014e9a:	6353      	str	r3, [r2, #52]	; 0x34
}
 8014e9c:	bf00      	nop
 8014e9e:	370c      	adds	r7, #12
 8014ea0:	46bd      	mov	sp, r7
 8014ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ea6:	4770      	bx	lr
 8014ea8:	40016800 	.word	0x40016800
 8014eac:	2000bc6c 	.word	0x2000bc6c
 8014eb0:	2000bc6e 	.word	0x2000bc6e

08014eb4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8014eb4:	b480      	push	{r7}
 8014eb6:	b083      	sub	sp, #12
 8014eb8:	af00      	add	r7, sp, #0
 8014eba:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8014ebc:	4b03      	ldr	r3, [pc, #12]	; (8014ecc <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8014ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8014ec0:	4618      	mov	r0, r3
 8014ec2:	370c      	adds	r7, #12
 8014ec4:	46bd      	mov	sp, r7
 8014ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eca:	4770      	bx	lr
 8014ecc:	40016884 	.word	0x40016884

08014ed0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8014ed0:	b480      	push	{r7}
 8014ed2:	b083      	sub	sp, #12
 8014ed4:	af00      	add	r7, sp, #0
 8014ed6:	6078      	str	r0, [r7, #4]
 8014ed8:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8014eda:	4a06      	ldr	r2, [pc, #24]	; (8014ef4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8014edc:	683b      	ldr	r3, [r7, #0]
 8014ede:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8014ee0:	4b05      	ldr	r3, [pc, #20]	; (8014ef8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8014ee2:	2201      	movs	r2, #1
 8014ee4:	625a      	str	r2, [r3, #36]	; 0x24
}
 8014ee6:	bf00      	nop
 8014ee8:	370c      	adds	r7, #12
 8014eea:	46bd      	mov	sp, r7
 8014eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ef0:	4770      	bx	lr
 8014ef2:	bf00      	nop
 8014ef4:	40016884 	.word	0x40016884
 8014ef8:	40016800 	.word	0x40016800

08014efc <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8014efc:	b580      	push	{r7, lr}
 8014efe:	b082      	sub	sp, #8
 8014f00:	af00      	add	r7, sp, #0
 8014f02:	6078      	str	r0, [r7, #4]
 8014f04:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	6839      	ldr	r1, [r7, #0]
 8014f0a:	4618      	mov	r0, r3
 8014f0c:	f000 fe44 	bl	8015b98 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8014f10:	bf00      	nop
 8014f12:	3708      	adds	r7, #8
 8014f14:	46bd      	mov	sp, r7
 8014f16:	bd80      	pop	{r7, pc}

08014f18 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 8014f18:	b480      	push	{r7}
 8014f1a:	b085      	sub	sp, #20
 8014f1c:	af00      	add	r7, sp, #0
 8014f1e:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 8014f20:	4b0d      	ldr	r3, [pc, #52]	; (8014f58 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8014f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014f24:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 8014f26:	4b0c      	ldr	r3, [pc, #48]	; (8014f58 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8014f28:	68db      	ldr	r3, [r3, #12]
 8014f2a:	b29b      	uxth	r3, r3
 8014f2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014f30:	b29b      	uxth	r3, r3
 8014f32:	3301      	adds	r3, #1
 8014f34:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    if (curr < backPorchY)
 8014f36:	89fa      	ldrh	r2, [r7, #14]
 8014f38:	89bb      	ldrh	r3, [r7, #12]
 8014f3a:	429a      	cmp	r2, r3
 8014f3c:	d201      	bcs.n	8014f42 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x2a>
    {
        return 0;
 8014f3e:	2300      	movs	r3, #0
 8014f40:	e003      	b.n	8014f4a <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
    }
    else
    {
        return curr - backPorchY;
 8014f42:	89fa      	ldrh	r2, [r7, #14]
 8014f44:	89bb      	ldrh	r3, [r7, #12]
 8014f46:	1ad3      	subs	r3, r2, r3
 8014f48:	b29b      	uxth	r3, r3
    }
}
 8014f4a:	4618      	mov	r0, r3
 8014f4c:	3714      	adds	r7, #20
 8014f4e:	46bd      	mov	sp, r7
 8014f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f54:	4770      	bx	lr
 8014f56:	bf00      	nop
 8014f58:	40016800 	.word	0x40016800

08014f5c <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
 8014f5c:	b580      	push	{r7, lr}
 8014f5e:	b082      	sub	sp, #8
 8014f60:	af00      	add	r7, sp, #0
 8014f62:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 8014f64:	4b1a      	ldr	r3, [pc, #104]	; (8014fd0 <HAL_LTDC_LineEventCallback+0x74>)
 8014f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014f68:	4a1a      	ldr	r2, [pc, #104]	; (8014fd4 <HAL_LTDC_LineEventCallback+0x78>)
 8014f6a:	8812      	ldrh	r2, [r2, #0]
 8014f6c:	4293      	cmp	r3, r2
 8014f6e:	bf0c      	ite	eq
 8014f70:	2301      	moveq	r3, #1
 8014f72:	2300      	movne	r3, #0
 8014f74:	b2db      	uxtb	r3, r3
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	d017      	beq.n	8014faa <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8014f7a:	4b17      	ldr	r3, [pc, #92]	; (8014fd8 <HAL_LTDC_LineEventCallback+0x7c>)
 8014f7c:	881b      	ldrh	r3, [r3, #0]
 8014f7e:	4619      	mov	r1, r3
 8014f80:	6878      	ldr	r0, [r7, #4]
 8014f82:	f7f1 f897 	bl	80060b4 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8014f86:	f7fa fd63 	bl	800fa50 <_ZN8touchgfx3HAL11getInstanceEv>
 8014f8a:	4603      	mov	r3, r0
 8014f8c:	4618      	mov	r0, r3
 8014f8e:	f7ff fe32 	bl	8014bf6 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8014f92:	f7fe fce5 	bl	8013960 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8014f96:	f7fa fd5b 	bl	800fa50 <_ZN8touchgfx3HAL11getInstanceEv>
 8014f9a:	4603      	mov	r3, r0
 8014f9c:	4618      	mov	r0, r3
 8014f9e:	f001 fb73 	bl	8016688 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8014fa2:	2000      	movs	r0, #0
 8014fa4:	f7fe f9e6 	bl	8013374 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8014fa8:	e00e      	b.n	8014fc8 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8014faa:	4b0a      	ldr	r3, [pc, #40]	; (8014fd4 <HAL_LTDC_LineEventCallback+0x78>)
 8014fac:	881b      	ldrh	r3, [r3, #0]
 8014fae:	4619      	mov	r1, r3
 8014fb0:	6878      	ldr	r0, [r7, #4]
 8014fb2:	f7f1 f87f 	bl	80060b4 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8014fb6:	2000      	movs	r0, #0
 8014fb8:	f7fe f9e7 	bl	801338a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8014fbc:	f7fa fd48 	bl	800fa50 <_ZN8touchgfx3HAL11getInstanceEv>
 8014fc0:	4603      	mov	r3, r0
 8014fc2:	4618      	mov	r0, r3
 8014fc4:	f7ff fdf9 	bl	8014bba <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8014fc8:	bf00      	nop
 8014fca:	3708      	adds	r7, #8
 8014fcc:	46bd      	mov	sp, r7
 8014fce:	bd80      	pop	{r7, pc}
 8014fd0:	40016800 	.word	0x40016800
 8014fd4:	2000bc6c 	.word	0x2000bc6c
 8014fd8:	2000bc6e 	.word	0x2000bc6e

08014fdc <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8014fdc:	8880      	ldrh	r0, [r0, #4]
 8014fde:	4770      	bx	lr

08014fe0 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8014fe0:	2300      	movs	r3, #0
 8014fe2:	8083      	strh	r3, [r0, #4]
 8014fe4:	4770      	bx	lr
	...

08014fe8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8014fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014fea:	6803      	ldr	r3, [r0, #0]
 8014fec:	460e      	mov	r6, r1
 8014fee:	2100      	movs	r1, #0
 8014ff0:	4605      	mov	r5, r0
 8014ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ff4:	4798      	blx	r3
 8014ff6:	4604      	mov	r4, r0
 8014ff8:	682b      	ldr	r3, [r5, #0]
 8014ffa:	4628      	mov	r0, r5
 8014ffc:	1b34      	subs	r4, r6, r4
 8014ffe:	6a1b      	ldr	r3, [r3, #32]
 8015000:	b2a4      	uxth	r4, r4
 8015002:	4798      	blx	r3
 8015004:	88ab      	ldrh	r3, [r5, #4]
 8015006:	fbb4 f4f0 	udiv	r4, r4, r0
 801500a:	42a3      	cmp	r3, r4
 801500c:	d805      	bhi.n	801501a <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 801500e:	4b0e      	ldr	r3, [pc, #56]	; (8015048 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 8015010:	211e      	movs	r1, #30
 8015012:	4a0e      	ldr	r2, [pc, #56]	; (801504c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8015014:	480e      	ldr	r0, [pc, #56]	; (8015050 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 8015016:	f00f fe07 	bl	8024c28 <__assert_func>
 801501a:	682b      	ldr	r3, [r5, #0]
 801501c:	2100      	movs	r1, #0
 801501e:	4628      	mov	r0, r5
 8015020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015022:	4798      	blx	r3
 8015024:	682b      	ldr	r3, [r5, #0]
 8015026:	4607      	mov	r7, r0
 8015028:	4628      	mov	r0, r5
 801502a:	6a1b      	ldr	r3, [r3, #32]
 801502c:	4798      	blx	r3
 801502e:	1bf3      	subs	r3, r6, r7
 8015030:	b29b      	uxth	r3, r3
 8015032:	fbb3 f2f0 	udiv	r2, r3, r0
 8015036:	fb02 3010 	mls	r0, r2, r0, r3
 801503a:	b118      	cbz	r0, 8015044 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 801503c:	4b05      	ldr	r3, [pc, #20]	; (8015054 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 801503e:	211f      	movs	r1, #31
 8015040:	4a02      	ldr	r2, [pc, #8]	; (801504c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8015042:	e7e7      	b.n	8015014 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 8015044:	4620      	mov	r0, r4
 8015046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015048:	08026d38 	.word	0x08026d38
 801504c:	08026ea6 	.word	0x08026ea6
 8015050:	08026d4d 	.word	0x08026d4d
 8015054:	08026d7b 	.word	0x08026d7b

08015058 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8015058:	b538      	push	{r3, r4, r5, lr}
 801505a:	6803      	ldr	r3, [r0, #0]
 801505c:	460d      	mov	r5, r1
 801505e:	4604      	mov	r4, r0
 8015060:	6a1b      	ldr	r3, [r3, #32]
 8015062:	4798      	blx	r3
 8015064:	4285      	cmp	r5, r0
 8015066:	d905      	bls.n	8015074 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8015068:	4b0c      	ldr	r3, [pc, #48]	; (801509c <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 801506a:	212f      	movs	r1, #47	; 0x2f
 801506c:	4a0c      	ldr	r2, [pc, #48]	; (80150a0 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 801506e:	480d      	ldr	r0, [pc, #52]	; (80150a4 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8015070:	f00f fdda 	bl	8024c28 <__assert_func>
 8015074:	6823      	ldr	r3, [r4, #0]
 8015076:	4620      	mov	r0, r4
 8015078:	88a5      	ldrh	r5, [r4, #4]
 801507a:	69db      	ldr	r3, [r3, #28]
 801507c:	4798      	blx	r3
 801507e:	4285      	cmp	r5, r0
 8015080:	d303      	bcc.n	801508a <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 8015082:	4b09      	ldr	r3, [pc, #36]	; (80150a8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8015084:	2130      	movs	r1, #48	; 0x30
 8015086:	4a06      	ldr	r2, [pc, #24]	; (80150a0 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8015088:	e7f1      	b.n	801506e <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 801508a:	6823      	ldr	r3, [r4, #0]
 801508c:	4620      	mov	r0, r4
 801508e:	88a1      	ldrh	r1, [r4, #4]
 8015090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015092:	4798      	blx	r3
 8015094:	88a3      	ldrh	r3, [r4, #4]
 8015096:	3301      	adds	r3, #1
 8015098:	80a3      	strh	r3, [r4, #4]
 801509a:	bd38      	pop	{r3, r4, r5, pc}
 801509c:	08026df5 	.word	0x08026df5
 80150a0:	08026ee9 	.word	0x08026ee9
 80150a4:	08026d4d 	.word	0x08026d4d
 80150a8:	08026e0c 	.word	0x08026e0c

080150ac <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 80150ac:	b570      	push	{r4, r5, r6, lr}
 80150ae:	6803      	ldr	r3, [r0, #0]
 80150b0:	4616      	mov	r6, r2
 80150b2:	4604      	mov	r4, r0
 80150b4:	460d      	mov	r5, r1
 80150b6:	6a1b      	ldr	r3, [r3, #32]
 80150b8:	4798      	blx	r3
 80150ba:	4286      	cmp	r6, r0
 80150bc:	d905      	bls.n	80150ca <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 80150be:	4b06      	ldr	r3, [pc, #24]	; (80150d8 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 80150c0:	2139      	movs	r1, #57	; 0x39
 80150c2:	4a06      	ldr	r2, [pc, #24]	; (80150dc <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 80150c4:	4806      	ldr	r0, [pc, #24]	; (80150e0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 80150c6:	f00f fdaf 	bl	8024c28 <__assert_func>
 80150ca:	6823      	ldr	r3, [r4, #0]
 80150cc:	4629      	mov	r1, r5
 80150ce:	4620      	mov	r0, r4
 80150d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80150d6:	4718      	bx	r3
 80150d8:	08026df5 	.word	0x08026df5
 80150dc:	08026e5c 	.word	0x08026e5c
 80150e0:	08026d4d 	.word	0x08026d4d

080150e4 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 80150e4:	4770      	bx	lr
	...

080150e8 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 80150e8:	4a02      	ldr	r2, [pc, #8]	; (80150f4 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 80150ea:	6002      	str	r2, [r0, #0]
 80150ec:	2200      	movs	r2, #0
 80150ee:	8082      	strh	r2, [r0, #4]
 80150f0:	4770      	bx	lr
 80150f2:	bf00      	nop
 80150f4:	08026e30 	.word	0x08026e30

080150f8 <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>:
 80150f8:	f8c0 10b8 	str.w	r1, [r0, #184]	; 0xb8
 80150fc:	4770      	bx	lr

080150fe <_ZNK8touchgfx11BoxProgress8getColorEv>:
 80150fe:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
 8015102:	4770      	bx	lr

08015104 <_ZN8touchgfx11BoxProgress8setAlphaEh>:
 8015104:	f880 10b6 	strb.w	r1, [r0, #182]	; 0xb6
 8015108:	4770      	bx	lr

0801510a <_ZNK8touchgfx11BoxProgress8getAlphaEv>:
 801510a:	f890 00b6 	ldrb.w	r0, [r0, #182]	; 0xb6
 801510e:	4770      	bx	lr

08015110 <_ZN8touchgfx11BoxProgressD1Ev>:
 8015110:	4b03      	ldr	r3, [pc, #12]	; (8015120 <_ZN8touchgfx11BoxProgressD1Ev+0x10>)
 8015112:	b510      	push	{r4, lr}
 8015114:	4604      	mov	r4, r0
 8015116:	6003      	str	r3, [r0, #0]
 8015118:	f000 f8b6 	bl	8015288 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 801511c:	4620      	mov	r0, r4
 801511e:	bd10      	pop	{r4, pc}
 8015120:	08026f30 	.word	0x08026f30

08015124 <_ZN8touchgfx11BoxProgressD0Ev>:
 8015124:	b510      	push	{r4, lr}
 8015126:	4604      	mov	r4, r0
 8015128:	f7ff fff2 	bl	8015110 <_ZN8touchgfx11BoxProgressD1Ev>
 801512c:	21c0      	movs	r1, #192	; 0xc0
 801512e:	4620      	mov	r0, r4
 8015130:	f00f fd4f 	bl	8024bd2 <_ZdlPvj>
 8015134:	4620      	mov	r0, r4
 8015136:	bd10      	pop	{r4, pc}

08015138 <_ZN8touchgfx11BoxProgressC1Ev>:
 8015138:	b510      	push	{r4, lr}
 801513a:	4604      	mov	r4, r0
 801513c:	f000 f8b8 	bl	80152b0 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 8015140:	2201      	movs	r2, #1
 8015142:	4b16      	ldr	r3, [pc, #88]	; (801519c <_ZN8touchgfx11BoxProgressC1Ev+0x64>)
 8015144:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015148:	f104 0190 	add.w	r1, r4, #144	; 0x90
 801514c:	f884 20b5 	strb.w	r2, [r4, #181]	; 0xb5
 8015150:	4a13      	ldr	r2, [pc, #76]	; (80151a0 <_ZN8touchgfx11BoxProgressC1Ev+0x68>)
 8015152:	6023      	str	r3, [r4, #0]
 8015154:	2300      	movs	r3, #0
 8015156:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 801515a:	22ff      	movs	r2, #255	; 0xff
 801515c:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
 8015160:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
 8015164:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
 8015168:	f8a4 309a 	strh.w	r3, [r4, #154]	; 0x9a
 801516c:	f8a4 309c 	strh.w	r3, [r4, #156]	; 0x9c
 8015170:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 8015174:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 8015178:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 801517c:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 8015180:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 8015184:	f884 20b6 	strb.w	r2, [r4, #182]	; 0xb6
 8015188:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 801518c:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
 8015190:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
 8015194:	f000 fbb8 	bl	8015908 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8015198:	4620      	mov	r0, r4
 801519a:	bd10      	pop	{r4, pc}
 801519c:	08026f30 	.word	0x08026f30
 80151a0:	080281e8 	.word	0x080281e8

080151a4 <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>:
 80151a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80151a8:	4617      	mov	r7, r2
 80151aa:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 80151ae:	2200      	movs	r2, #0
 80151b0:	4604      	mov	r4, r0
 80151b2:	460e      	mov	r6, r1
 80151b4:	4698      	mov	r8, r3
 80151b6:	4611      	mov	r1, r2
 80151b8:	9500      	str	r5, [sp, #0]
 80151ba:	3090      	adds	r0, #144	; 0x90
 80151bc:	f7fb f918 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
 80151c0:	4643      	mov	r3, r8
 80151c2:	463a      	mov	r2, r7
 80151c4:	4631      	mov	r1, r6
 80151c6:	4620      	mov	r0, r4
 80151c8:	9508      	str	r5, [sp, #32]
 80151ca:	b002      	add	sp, #8
 80151cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80151d0:	f000 b9fa 	b.w	80155c8 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

080151d4 <_ZN8touchgfx11BoxProgress8setValueEi>:
 80151d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80151d6:	4604      	mov	r4, r0
 80151d8:	f000 fa40 	bl	801565c <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 80151dc:	f104 0590 	add.w	r5, r4, #144	; 0x90
 80151e0:	4628      	mov	r0, r5
 80151e2:	f004 f95b 	bl	801949c <_ZNK8touchgfx8Drawable10invalidateEv>
 80151e6:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 80151ea:	2b03      	cmp	r3, #3
 80151ec:	d814      	bhi.n	8015218 <_ZN8touchgfx11BoxProgress8setValueEi+0x44>
 80151ee:	e8df f003 	tbb	[pc, r3]
 80151f2:	0202      	.short	0x0202
 80151f4:	1010      	.short	0x1010
 80151f6:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 80151fa:	4620      	mov	r0, r4
 80151fc:	f000 fa88 	bl	8015710 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 8015200:	b200      	sxth	r0, r0
 8015202:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8015206:	2b03      	cmp	r3, #3
 8015208:	d81a      	bhi.n	8015240 <_ZN8touchgfx11BoxProgress8setValueEi+0x6c>
 801520a:	e8df f003 	tbb	[pc, r3]
 801520e:	0e07      	.short	0x0e07
 8015210:	231f      	.short	0x231f
 8015212:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 8015216:	e7f0      	b.n	80151fa <_ZN8touchgfx11BoxProgress8setValueEi+0x26>
 8015218:	2000      	movs	r0, #0
 801521a:	e7f2      	b.n	8015202 <_ZN8touchgfx11BoxProgress8setValueEi+0x2e>
 801521c:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8015220:	9300      	str	r3, [sp, #0]
 8015222:	4603      	mov	r3, r0
 8015224:	2200      	movs	r2, #0
 8015226:	2100      	movs	r1, #0
 8015228:	e007      	b.n	801523a <_ZN8touchgfx11BoxProgress8setValueEi+0x66>
 801522a:	8921      	ldrh	r1, [r4, #8]
 801522c:	2200      	movs	r2, #0
 801522e:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8015232:	1a09      	subs	r1, r1, r0
 8015234:	9300      	str	r3, [sp, #0]
 8015236:	4603      	mov	r3, r0
 8015238:	b209      	sxth	r1, r1
 801523a:	4628      	mov	r0, r5
 801523c:	f7fb f8d8 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
 8015240:	4628      	mov	r0, r5
 8015242:	b003      	add	sp, #12
 8015244:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015248:	f004 b928 	b.w	801949c <_ZNK8touchgfx8Drawable10invalidateEv>
 801524c:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8015250:	9000      	str	r0, [sp, #0]
 8015252:	e7e7      	b.n	8015224 <_ZN8touchgfx11BoxProgress8setValueEi+0x50>
 8015254:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8015258:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801525c:	1a12      	subs	r2, r2, r0
 801525e:	9000      	str	r0, [sp, #0]
 8015260:	b212      	sxth	r2, r2
 8015262:	e7e0      	b.n	8015226 <_ZN8touchgfx11BoxProgress8setValueEi+0x52>

08015264 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>:
 8015264:	b570      	push	{r4, r5, r6, lr}
 8015266:	6803      	ldr	r3, [r0, #0]
 8015268:	4604      	mov	r4, r0
 801526a:	f880 108e 	strb.w	r1, [r0, #142]	; 0x8e
 801526e:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	; 0xac
 8015272:	4798      	blx	r3
 8015274:	4601      	mov	r1, r0
 8015276:	462b      	mov	r3, r5
 8015278:	4620      	mov	r0, r4
 801527a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801527e:	4718      	bx	r3

08015280 <_ZNK8touchgfx25AbstractDirectionProgress12getDirectionEv>:
 8015280:	f890 008e 	ldrb.w	r0, [r0, #142]	; 0x8e
 8015284:	4770      	bx	lr
	...

08015288 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>:
 8015288:	4b03      	ldr	r3, [pc, #12]	; (8015298 <_ZN8touchgfx25AbstractDirectionProgressD1Ev+0x10>)
 801528a:	b510      	push	{r4, lr}
 801528c:	4604      	mov	r4, r0
 801528e:	6003      	str	r3, [r0, #0]
 8015290:	f000 f999 	bl	80155c6 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 8015294:	4620      	mov	r0, r4
 8015296:	bd10      	pop	{r4, pc}
 8015298:	08027008 	.word	0x08027008

0801529c <_ZN8touchgfx25AbstractDirectionProgressD0Ev>:
 801529c:	b510      	push	{r4, lr}
 801529e:	4604      	mov	r4, r0
 80152a0:	f7ff fff2 	bl	8015288 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 80152a4:	2190      	movs	r1, #144	; 0x90
 80152a6:	4620      	mov	r0, r4
 80152a8:	f00f fc93 	bl	8024bd2 <_ZdlPvj>
 80152ac:	4620      	mov	r0, r4
 80152ae:	bd10      	pop	{r4, pc}

080152b0 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>:
 80152b0:	b510      	push	{r4, lr}
 80152b2:	4604      	mov	r4, r0
 80152b4:	f000 fa4c 	bl	8015750 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 80152b8:	4b03      	ldr	r3, [pc, #12]	; (80152c8 <_ZN8touchgfx25AbstractDirectionProgressC1Ev+0x18>)
 80152ba:	2100      	movs	r1, #0
 80152bc:	4620      	mov	r0, r4
 80152be:	6023      	str	r3, [r4, #0]
 80152c0:	f7ff ffd0 	bl	8015264 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
 80152c4:	4620      	mov	r0, r4
 80152c6:	bd10      	pop	{r4, pc}
 80152c8:	08027008 	.word	0x08027008

080152cc <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>:
 80152cc:	b570      	push	{r4, r5, r6, lr}
 80152ce:	6803      	ldr	r3, [r0, #0]
 80152d0:	4604      	mov	r4, r0
 80152d2:	f880 10ec 	strb.w	r1, [r0, #236]	; 0xec
 80152d6:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	; 0xac
 80152da:	4798      	blx	r3
 80152dc:	4601      	mov	r1, r0
 80152de:	462b      	mov	r3, r5
 80152e0:	4620      	mov	r0, r4
 80152e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80152e6:	4718      	bx	r3

080152e8 <_ZNK8touchgfx13ImageProgress15getAnchorAtZeroEv>:
 80152e8:	f890 00ec 	ldrb.w	r0, [r0, #236]	; 0xec
 80152ec:	4770      	bx	lr

080152ee <_ZN8touchgfx13ImageProgress8setAlphaEh>:
 80152ee:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
 80152f2:	4770      	bx	lr

080152f4 <_ZNK8touchgfx13ImageProgress8getAlphaEv>:
 80152f4:	f890 00e4 	ldrb.w	r0, [r0, #228]	; 0xe4
 80152f8:	4770      	bx	lr

080152fa <_ZN8touchgfx13ImageProgress9setBitmapEt>:
 80152fa:	b507      	push	{r0, r1, r2, lr}
 80152fc:	ab02      	add	r3, sp, #8
 80152fe:	30bc      	adds	r0, #188	; 0xbc
 8015300:	f823 1d04 	strh.w	r1, [r3, #-4]!
 8015304:	4619      	mov	r1, r3
 8015306:	f002 f9a9 	bl	801765c <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>
 801530a:	b003      	add	sp, #12
 801530c:	f85d fb04 	ldr.w	pc, [sp], #4

08015310 <_ZN8touchgfx13ImageProgressD1Ev>:
 8015310:	4b03      	ldr	r3, [pc, #12]	; (8015320 <_ZN8touchgfx13ImageProgressD1Ev+0x10>)
 8015312:	b510      	push	{r4, lr}
 8015314:	4604      	mov	r4, r0
 8015316:	6003      	str	r3, [r0, #0]
 8015318:	f7ff ffb6 	bl	8015288 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 801531c:	4620      	mov	r0, r4
 801531e:	bd10      	pop	{r4, pc}
 8015320:	08027134 	.word	0x08027134

08015324 <_ZN8touchgfx13ImageProgressD0Ev>:
 8015324:	b510      	push	{r4, lr}
 8015326:	4604      	mov	r4, r0
 8015328:	f7ff fff2 	bl	8015310 <_ZN8touchgfx13ImageProgressD1Ev>
 801532c:	21f0      	movs	r1, #240	; 0xf0
 801532e:	4620      	mov	r0, r4
 8015330:	f00f fc4f 	bl	8024bd2 <_ZdlPvj>
 8015334:	4620      	mov	r0, r4
 8015336:	bd10      	pop	{r4, pc}

08015338 <_ZNK8touchgfx13ImageProgress9getBitmapEv>:
 8015338:	b508      	push	{r3, lr}
 801533a:	4b06      	ldr	r3, [pc, #24]	; (8015354 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x1c>)
 801533c:	681b      	ldr	r3, [r3, #0]
 801533e:	b92b      	cbnz	r3, 801534c <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x14>
 8015340:	4b05      	ldr	r3, [pc, #20]	; (8015358 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x20>)
 8015342:	21b8      	movs	r1, #184	; 0xb8
 8015344:	4a05      	ldr	r2, [pc, #20]	; (801535c <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x24>)
 8015346:	4806      	ldr	r0, [pc, #24]	; (8015360 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x28>)
 8015348:	f00f fc6e 	bl	8024c28 <__assert_func>
 801534c:	f8b0 00e2 	ldrh.w	r0, [r0, #226]	; 0xe2
 8015350:	bd08      	pop	{r3, pc}
 8015352:	bf00      	nop
 8015354:	2000bd44 	.word	0x2000bd44
 8015358:	080270c8 	.word	0x080270c8
 801535c:	0802720c 	.word	0x0802720c
 8015360:	08027104 	.word	0x08027104

08015364 <_ZN8touchgfx13ImageProgressC1Ev>:
 8015364:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015368:	4604      	mov	r4, r0
 801536a:	f7ff ffa1 	bl	80152b0 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 801536e:	4b31      	ldr	r3, [pc, #196]	; (8015434 <_ZN8touchgfx13ImageProgressC1Ev+0xd0>)
 8015370:	a902      	add	r1, sp, #8
 8015372:	4626      	mov	r6, r4
 8015374:	f104 08bc 	add.w	r8, r4, #188	; 0xbc
 8015378:	2500      	movs	r5, #0
 801537a:	4a2f      	ldr	r2, [pc, #188]	; (8015438 <_ZN8touchgfx13ImageProgressC1Ev+0xd4>)
 801537c:	f846 3b90 	str.w	r3, [r6], #144
 8015380:	2701      	movs	r7, #1
 8015382:	4b2e      	ldr	r3, [pc, #184]	; (801543c <_ZN8touchgfx13ImageProgressC1Ev+0xd8>)
 8015384:	4640      	mov	r0, r8
 8015386:	f8c4 20bc 	str.w	r2, [r4, #188]	; 0xbc
 801538a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 801538e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015392:	f8a4 5094 	strh.w	r5, [r4, #148]	; 0x94
 8015396:	f821 3d04 	strh.w	r3, [r1, #-4]!
 801539a:	f8a4 30e2 	strh.w	r3, [r4, #226]	; 0xe2
 801539e:	f8a4 5096 	strh.w	r5, [r4, #150]	; 0x96
 80153a2:	f8a4 5098 	strh.w	r5, [r4, #152]	; 0x98
 80153a6:	f8a4 509a 	strh.w	r5, [r4, #154]	; 0x9a
 80153aa:	f8a4 509c 	strh.w	r5, [r4, #156]	; 0x9c
 80153ae:	f8a4 509e 	strh.w	r5, [r4, #158]	; 0x9e
 80153b2:	f8a4 50a0 	strh.w	r5, [r4, #160]	; 0xa0
 80153b6:	f8a4 50a2 	strh.w	r5, [r4, #162]	; 0xa2
 80153ba:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
 80153be:	f884 50b4 	strb.w	r5, [r4, #180]	; 0xb4
 80153c2:	f884 70b5 	strb.w	r7, [r4, #181]	; 0xb5
 80153c6:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
 80153ca:	f8a4 50c0 	strh.w	r5, [r4, #192]	; 0xc0
 80153ce:	f8a4 50c2 	strh.w	r5, [r4, #194]	; 0xc2
 80153d2:	f8a4 50c4 	strh.w	r5, [r4, #196]	; 0xc4
 80153d6:	f8a4 50c6 	strh.w	r5, [r4, #198]	; 0xc6
 80153da:	f8a4 50c8 	strh.w	r5, [r4, #200]	; 0xc8
 80153de:	f8a4 50ca 	strh.w	r5, [r4, #202]	; 0xca
 80153e2:	f8a4 50cc 	strh.w	r5, [r4, #204]	; 0xcc
 80153e6:	f8a4 50ce 	strh.w	r5, [r4, #206]	; 0xce
 80153ea:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
 80153ee:	f884 50e0 	strb.w	r5, [r4, #224]	; 0xe0
 80153f2:	f884 70e1 	strb.w	r7, [r4, #225]	; 0xe1
 80153f6:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 80153fa:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
 80153fe:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
 8015402:	f002 fb6f 	bl	8017ae4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8015406:	4b0e      	ldr	r3, [pc, #56]	; (8015440 <_ZN8touchgfx13ImageProgressC1Ev+0xdc>)
 8015408:	4641      	mov	r1, r8
 801540a:	4630      	mov	r0, r6
 801540c:	f8a4 50e6 	strh.w	r5, [r4, #230]	; 0xe6
 8015410:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
 8015414:	f8a4 50e8 	strh.w	r5, [r4, #232]	; 0xe8
 8015418:	f884 70ec 	strb.w	r7, [r4, #236]	; 0xec
 801541c:	f000 fa74 	bl	8015908 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8015420:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015424:	4631      	mov	r1, r6
 8015426:	f000 fa6f 	bl	8015908 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801542a:	4620      	mov	r0, r4
 801542c:	b002      	add	sp, #8
 801542e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015432:	bf00      	nop
 8015434:	08027134 	.word	0x08027134
 8015438:	08028350 	.word	0x08028350
 801543c:	080274b0 	.word	0x080274b0
 8015440:	08028250 	.word	0x08028250

08015444 <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>:
 8015444:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015448:	4617      	mov	r7, r2
 801544a:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 801544e:	2200      	movs	r2, #0
 8015450:	4604      	mov	r4, r0
 8015452:	460e      	mov	r6, r1
 8015454:	4698      	mov	r8, r3
 8015456:	4611      	mov	r1, r2
 8015458:	9500      	str	r5, [sp, #0]
 801545a:	3090      	adds	r0, #144	; 0x90
 801545c:	f7fa ffc8 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
 8015460:	4643      	mov	r3, r8
 8015462:	463a      	mov	r2, r7
 8015464:	4631      	mov	r1, r6
 8015466:	4620      	mov	r0, r4
 8015468:	9508      	str	r5, [sp, #32]
 801546a:	b002      	add	sp, #8
 801546c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015470:	f000 b8aa 	b.w	80155c8 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

08015474 <_ZN8touchgfx13ImageProgress8setValueEi>:
 8015474:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015476:	4604      	mov	r4, r0
 8015478:	f000 f8f0 	bl	801565c <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 801547c:	f104 0790 	add.w	r7, r4, #144	; 0x90
 8015480:	4638      	mov	r0, r7
 8015482:	f004 f80b 	bl	801949c <_ZNK8touchgfx8Drawable10invalidateEv>
 8015486:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 801548a:	4620      	mov	r0, r4
 801548c:	2b01      	cmp	r3, #1
 801548e:	bf94      	ite	ls
 8015490:	f8b4 1060 	ldrhls.w	r1, [r4, #96]	; 0x60
 8015494:	f8b4 1062 	ldrhhi.w	r1, [r4, #98]	; 0x62
 8015498:	f000 f93a 	bl	8015710 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 801549c:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
 80154a0:	4606      	mov	r6, r0
 80154a2:	b205      	sxth	r5, r0
 80154a4:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 80154a8:	2a00      	cmp	r2, #0
 80154aa:	d056      	beq.n	801555a <_ZN8touchgfx13ImageProgress8setValueEi+0xe6>
 80154ac:	2b03      	cmp	r3, #3
 80154ae:	d82c      	bhi.n	801550a <_ZN8touchgfx13ImageProgress8setValueEi+0x96>
 80154b0:	e8df f003 	tbb	[pc, r3]
 80154b4:	3d311202 	.word	0x3d311202
 80154b8:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 80154bc:	2200      	movs	r2, #0
 80154be:	9300      	str	r3, [sp, #0]
 80154c0:	4611      	mov	r1, r2
 80154c2:	462b      	mov	r3, r5
 80154c4:	4638      	mov	r0, r7
 80154c6:	f7fa ff93 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
 80154ca:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 80154ce:	9300      	str	r3, [sp, #0]
 80154d0:	462b      	mov	r3, r5
 80154d2:	2200      	movs	r2, #0
 80154d4:	4611      	mov	r1, r2
 80154d6:	e014      	b.n	8015502 <_ZN8touchgfx13ImageProgress8setValueEi+0x8e>
 80154d8:	8921      	ldrh	r1, [r4, #8]
 80154da:	2200      	movs	r2, #0
 80154dc:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 80154e0:	1a09      	subs	r1, r1, r0
 80154e2:	4638      	mov	r0, r7
 80154e4:	9300      	str	r3, [sp, #0]
 80154e6:	462b      	mov	r3, r5
 80154e8:	b209      	sxth	r1, r1
 80154ea:	f7fa ff81 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
 80154ee:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
 80154f2:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 80154f6:	4249      	negs	r1, r1
 80154f8:	f9b4 2062 	ldrsh.w	r2, [r4, #98]	; 0x62
 80154fc:	9200      	str	r2, [sp, #0]
 80154fe:	b209      	sxth	r1, r1
 8015500:	2200      	movs	r2, #0
 8015502:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 8015506:	f7fa ff73 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
 801550a:	4638      	mov	r0, r7
 801550c:	b003      	add	sp, #12
 801550e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015512:	f003 bfc3 	b.w	801949c <_ZNK8touchgfx8Drawable10invalidateEv>
 8015516:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801551a:	2200      	movs	r2, #0
 801551c:	9500      	str	r5, [sp, #0]
 801551e:	2100      	movs	r1, #0
 8015520:	4638      	mov	r0, r7
 8015522:	f7fa ff65 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
 8015526:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801552a:	9500      	str	r5, [sp, #0]
 801552c:	e7d1      	b.n	80154d2 <_ZN8touchgfx13ImageProgress8setValueEi+0x5e>
 801552e:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8015532:	2100      	movs	r1, #0
 8015534:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8015538:	1a12      	subs	r2, r2, r0
 801553a:	9500      	str	r5, [sp, #0]
 801553c:	4638      	mov	r0, r7
 801553e:	b212      	sxth	r2, r2
 8015540:	f7fa ff56 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
 8015544:	f8b4 2096 	ldrh.w	r2, [r4, #150]	; 0x96
 8015548:	f9b4 1062 	ldrsh.w	r1, [r4, #98]	; 0x62
 801554c:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8015550:	4252      	negs	r2, r2
 8015552:	9100      	str	r1, [sp, #0]
 8015554:	b212      	sxth	r2, r2
 8015556:	2100      	movs	r1, #0
 8015558:	e7d3      	b.n	8015502 <_ZN8touchgfx13ImageProgress8setValueEi+0x8e>
 801555a:	2b03      	cmp	r3, #3
 801555c:	d8d5      	bhi.n	801550a <_ZN8touchgfx13ImageProgress8setValueEi+0x96>
 801555e:	e8df f003 	tbb	[pc, r3]
 8015562:	1102      	.short	0x1102
 8015564:	2a1b      	.short	0x2a1b
 8015566:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801556a:	2200      	movs	r2, #0
 801556c:	4638      	mov	r0, r7
 801556e:	4611      	mov	r1, r2
 8015570:	9300      	str	r3, [sp, #0]
 8015572:	462b      	mov	r3, r5
 8015574:	f7fa ff3c 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
 8015578:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801557c:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8015580:	1af1      	subs	r1, r6, r3
 8015582:	e7bb      	b.n	80154fc <_ZN8touchgfx13ImageProgress8setValueEi+0x88>
 8015584:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 8015588:	2200      	movs	r2, #0
 801558a:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 801558e:	1a09      	subs	r1, r1, r0
 8015590:	9300      	str	r3, [sp, #0]
 8015592:	462b      	mov	r3, r5
 8015594:	b209      	sxth	r1, r1
 8015596:	e795      	b.n	80154c4 <_ZN8touchgfx13ImageProgress8setValueEi+0x50>
 8015598:	2200      	movs	r2, #0
 801559a:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801559e:	4638      	mov	r0, r7
 80155a0:	9500      	str	r5, [sp, #0]
 80155a2:	4611      	mov	r1, r2
 80155a4:	f7fa ff24 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
 80155a8:	f9b4 0062 	ldrsh.w	r0, [r4, #98]	; 0x62
 80155ac:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 80155b0:	1a32      	subs	r2, r6, r0
 80155b2:	9000      	str	r0, [sp, #0]
 80155b4:	e7ce      	b.n	8015554 <_ZN8touchgfx13ImageProgress8setValueEi+0xe0>
 80155b6:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 80155ba:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 80155be:	1a12      	subs	r2, r2, r0
 80155c0:	9500      	str	r5, [sp, #0]
 80155c2:	b212      	sxth	r2, r2
 80155c4:	e7ab      	b.n	801551e <_ZN8touchgfx13ImageProgress8setValueEi+0xaa>

080155c6 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 80155c6:	4770      	bx	lr

080155c8 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 80155c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80155cc:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
 80155d0:	4604      	mov	r4, r0
 80155d2:	460e      	mov	r6, r1
 80155d4:	4698      	mov	r8, r3
 80155d6:	9700      	str	r7, [sp, #0]
 80155d8:	3058      	adds	r0, #88	; 0x58
 80155da:	4615      	mov	r5, r2
 80155dc:	f7fa ff08 	bl	80103f0 <_ZN8touchgfx8Drawable11setPositionEssss>
 80155e0:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80155e4:	eb06 0308 	add.w	r3, r6, r8
 80155e8:	429a      	cmp	r2, r3
 80155ea:	eb05 0207 	add.w	r2, r5, r7
 80155ee:	bfb8      	it	lt
 80155f0:	8123      	strhlt	r3, [r4, #8]
 80155f2:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80155f6:	4293      	cmp	r3, r2
 80155f8:	bfb8      	it	lt
 80155fa:	8162      	strhlt	r2, [r4, #10]
 80155fc:	b002      	add	sp, #8
 80155fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015602 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 8015602:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	; 0x5c
 8015606:	4770      	bx	lr

08015608 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 8015608:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	; 0x5e
 801560c:	4770      	bx	lr

0801560e <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 801560e:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	; 0x60
 8015612:	4770      	bx	lr

08015614 <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 8015614:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	; 0x62
 8015618:	4770      	bx	lr

0801561a <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_RtS2_>:
 801561a:	b510      	push	{r4, lr}
 801561c:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 8015620:	800c      	strh	r4, [r1, #0]
 8015622:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 8015626:	8011      	strh	r1, [r2, #0]
 8015628:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 801562c:	801a      	strh	r2, [r3, #0]
 801562e:	9b02      	ldr	r3, [sp, #8]
 8015630:	f8b0 208c 	ldrh.w	r2, [r0, #140]	; 0x8c
 8015634:	801a      	strh	r2, [r3, #0]
 8015636:	bd10      	pop	{r4, pc}

08015638 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_Rt>:
 8015638:	b510      	push	{r4, lr}
 801563a:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 801563e:	800c      	strh	r4, [r1, #0]
 8015640:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 8015644:	8011      	strh	r1, [r2, #0]
 8015646:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 801564a:	801a      	strh	r2, [r3, #0]
 801564c:	bd10      	pop	{r4, pc}

0801564e <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_>:
 801564e:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 8015652:	800b      	strh	r3, [r1, #0]
 8015654:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 8015658:	8013      	strh	r3, [r2, #0]
 801565a:	4770      	bx	lr

0801565c <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 801565c:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 8015660:	4299      	cmp	r1, r3
 8015662:	bfb8      	it	lt
 8015664:	4619      	movlt	r1, r3
 8015666:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 801566a:	4299      	cmp	r1, r3
 801566c:	bfa8      	it	ge
 801566e:	4619      	movge	r1, r3
 8015670:	f8a0 1088 	strh.w	r1, [r0, #136]	; 0x88
 8015674:	4770      	bx	lr

08015676 <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 8015676:	f8b0 0088 	ldrh.w	r0, [r0, #136]	; 0x88
 801567a:	4770      	bx	lr

0801567c <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 801567c:	b510      	push	{r4, lr}
 801567e:	4604      	mov	r4, r0
 8015680:	2190      	movs	r1, #144	; 0x90
 8015682:	f00f faa6 	bl	8024bd2 <_ZdlPvj>
 8015686:	4620      	mov	r0, r4
 8015688:	bd10      	pop	{r4, pc}

0801568a <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 801568a:	b510      	push	{r4, lr}
 801568c:	4604      	mov	r4, r0
 801568e:	302c      	adds	r0, #44	; 0x2c
 8015690:	f002 fa28 	bl	8017ae4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8015694:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8015696:	8123      	strh	r3, [r4, #8]
 8015698:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801569a:	8163      	strh	r3, [r4, #10]
 801569c:	bd10      	pop	{r4, pc}
	...

080156a0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>:
 80156a0:	4291      	cmp	r1, r2
 80156a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156a6:	4604      	mov	r4, r0
 80156a8:	460e      	mov	r6, r1
 80156aa:	4615      	mov	r5, r2
 80156ac:	4698      	mov	r8, r3
 80156ae:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 80156b2:	db05      	blt.n	80156c0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x20>
 80156b4:	4b12      	ldr	r3, [pc, #72]	; (8015700 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x60>)
 80156b6:	214d      	movs	r1, #77	; 0x4d
 80156b8:	4a12      	ldr	r2, [pc, #72]	; (8015704 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x64>)
 80156ba:	4813      	ldr	r0, [pc, #76]	; (8015708 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x68>)
 80156bc:	f00f fab4 	bl	8024c28 <__assert_func>
 80156c0:	f8a4 1084 	strh.w	r1, [r4, #132]	; 0x84
 80156c4:	f8a4 2086 	strh.w	r2, [r4, #134]	; 0x86
 80156c8:	6803      	ldr	r3, [r0, #0]
 80156ca:	f8b0 1088 	ldrh.w	r1, [r0, #136]	; 0x88
 80156ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80156d2:	4798      	blx	r3
 80156d4:	f1b8 0f00 	cmp.w	r8, #0
 80156d8:	d10c      	bne.n	80156f4 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x54>
 80156da:	1bad      	subs	r5, r5, r6
 80156dc:	f8a4 508a 	strh.w	r5, [r4, #138]	; 0x8a
 80156e0:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
 80156e4:	f8a4 708c 	strh.w	r7, [r4, #140]	; 0x8c
 80156e8:	42bb      	cmp	r3, r7
 80156ea:	d806      	bhi.n	80156fa <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x5a>
 80156ec:	4b07      	ldr	r3, [pc, #28]	; (801570c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x6c>)
 80156ee:	215a      	movs	r1, #90	; 0x5a
 80156f0:	4a04      	ldr	r2, [pc, #16]	; (8015704 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x64>)
 80156f2:	e7e2      	b.n	80156ba <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x1a>
 80156f4:	f8a4 808a 	strh.w	r8, [r4, #138]	; 0x8a
 80156f8:	e7f2      	b.n	80156e0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x40>
 80156fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156fe:	bf00      	nop
 8015700:	0802723f 	.word	0x0802723f
 8015704:	0802737c 	.word	0x0802737c
 8015708:	08027249 	.word	0x08027249
 801570c:	080272a0 	.word	0x080272a0

08015710 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 8015710:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015712:	4604      	mov	r4, r0
 8015714:	460d      	mov	r5, r1
 8015716:	b1b9      	cbz	r1, 8015748 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x38>
 8015718:	f8b0 608c 	ldrh.w	r6, [r0, #140]	; 0x8c
 801571c:	ab01      	add	r3, sp, #4
 801571e:	f9b0 0084 	ldrsh.w	r0, [r0, #132]	; 0x84
 8015722:	f9b4 2086 	ldrsh.w	r2, [r4, #134]	; 0x86
 8015726:	f8b4 108a 	ldrh.w	r1, [r4, #138]	; 0x8a
 801572a:	f8b4 7088 	ldrh.w	r7, [r4, #136]	; 0x88
 801572e:	1a12      	subs	r2, r2, r0
 8015730:	1b89      	subs	r1, r1, r6
 8015732:	1a38      	subs	r0, r7, r0
 8015734:	f003 fff3 	bl	801971e <_ZN8touchgfx6muldivElllRl>
 8015738:	4629      	mov	r1, r5
 801573a:	ab01      	add	r3, sp, #4
 801573c:	f8b4 208a 	ldrh.w	r2, [r4, #138]	; 0x8a
 8015740:	4430      	add	r0, r6
 8015742:	f003 ffec 	bl	801971e <_ZN8touchgfx6muldivElllRl>
 8015746:	b285      	uxth	r5, r0
 8015748:	4628      	mov	r0, r5
 801574a:	b003      	add	sp, #12
 801574c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08015750 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 8015750:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015754:	4604      	mov	r4, r0
 8015756:	2600      	movs	r6, #0
 8015758:	f7fa fdfc 	bl	8010354 <_ZN8touchgfx8DrawableC1Ev>
 801575c:	4b1b      	ldr	r3, [pc, #108]	; (80157cc <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x7c>)
 801575e:	4625      	mov	r5, r4
 8015760:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8015764:	af02      	add	r7, sp, #8
 8015766:	62a6      	str	r6, [r4, #40]	; 0x28
 8015768:	f845 3b2c 	str.w	r3, [r5], #44
 801576c:	4628      	mov	r0, r5
 801576e:	f827 8d04 	strh.w	r8, [r7, #-4]!
 8015772:	f7fa fdef 	bl	8010354 <_ZN8touchgfx8DrawableC1Ev>
 8015776:	4b16      	ldr	r3, [pc, #88]	; (80157d0 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x80>)
 8015778:	4639      	mov	r1, r7
 801577a:	f104 0758 	add.w	r7, r4, #88	; 0x58
 801577e:	4628      	mov	r0, r5
 8015780:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015782:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
 8015786:	f884 8054 	strb.w	r8, [r4, #84]	; 0x54
 801578a:	f002 f9ab 	bl	8017ae4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801578e:	4638      	mov	r0, r7
 8015790:	f7fa fde0 	bl	8010354 <_ZN8touchgfx8DrawableC1Ev>
 8015794:	4b0f      	ldr	r3, [pc, #60]	; (80157d4 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x84>)
 8015796:	4632      	mov	r2, r6
 8015798:	4631      	mov	r1, r6
 801579a:	65a3      	str	r3, [r4, #88]	; 0x58
 801579c:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 80157a0:	4628      	mov	r0, r5
 80157a2:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
 80157a6:	f8a4 608c 	strh.w	r6, [r4, #140]	; 0x8c
 80157aa:	e9c4 3321 	strd	r3, r3, [r4, #132]	; 0x84
 80157ae:	f7fa fe6a 	bl	8010486 <_ZN8touchgfx8Drawable5setXYEss>
 80157b2:	4629      	mov	r1, r5
 80157b4:	4620      	mov	r0, r4
 80157b6:	f000 f8a7 	bl	8015908 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80157ba:	4620      	mov	r0, r4
 80157bc:	4639      	mov	r1, r7
 80157be:	f000 f8a3 	bl	8015908 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80157c2:	4620      	mov	r0, r4
 80157c4:	b002      	add	sp, #8
 80157c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157ca:	bf00      	nop
 80157cc:	080272c4 	.word	0x080272c4
 80157d0:	08028350 	.word	0x08028350
 80157d4:	080274b0 	.word	0x080274b0

080157d8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 80157d8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80157da:	2000      	movs	r0, #0
 80157dc:	b12b      	cbz	r3, 80157ea <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80157de:	b920      	cbnz	r0, 80157ea <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80157e0:	1a5a      	subs	r2, r3, r1
 80157e2:	699b      	ldr	r3, [r3, #24]
 80157e4:	4250      	negs	r0, r2
 80157e6:	4150      	adcs	r0, r2
 80157e8:	e7f8      	b.n	80157dc <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 80157ea:	4770      	bx	lr

080157ec <_ZN8touchgfx9Container9removeAllEv>:
 80157ec:	2200      	movs	r2, #0
 80157ee:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80157f0:	b123      	cbz	r3, 80157fc <_ZN8touchgfx9Container9removeAllEv+0x10>
 80157f2:	6999      	ldr	r1, [r3, #24]
 80157f4:	6281      	str	r1, [r0, #40]	; 0x28
 80157f6:	e9c3 2205 	strd	r2, r2, [r3, #20]
 80157fa:	e7f8      	b.n	80157ee <_ZN8touchgfx9Container9removeAllEv+0x2>
 80157fc:	4770      	bx	lr

080157fe <_ZN8touchgfx9Container6unlinkEv>:
 80157fe:	2300      	movs	r3, #0
 8015800:	6283      	str	r3, [r0, #40]	; 0x28
 8015802:	4770      	bx	lr

08015804 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8015804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015808:	461f      	mov	r7, r3
 801580a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 801580e:	460d      	mov	r5, r1
 8015810:	4616      	mov	r6, r2
 8015812:	b103      	cbz	r3, 8015816 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8015814:	6038      	str	r0, [r7, #0]
 8015816:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015818:	b314      	cbz	r4, 8015860 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 801581a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801581e:	b1eb      	cbz	r3, 801585c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015820:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8015824:	428d      	cmp	r5, r1
 8015826:	db19      	blt.n	801585c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015828:	b289      	uxth	r1, r1
 801582a:	8923      	ldrh	r3, [r4, #8]
 801582c:	440b      	add	r3, r1
 801582e:	b21b      	sxth	r3, r3
 8015830:	429d      	cmp	r5, r3
 8015832:	da13      	bge.n	801585c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015834:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8015838:	4296      	cmp	r6, r2
 801583a:	db0f      	blt.n	801585c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801583c:	b292      	uxth	r2, r2
 801583e:	8963      	ldrh	r3, [r4, #10]
 8015840:	4413      	add	r3, r2
 8015842:	b21b      	sxth	r3, r3
 8015844:	429e      	cmp	r6, r3
 8015846:	da09      	bge.n	801585c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015848:	6823      	ldr	r3, [r4, #0]
 801584a:	1ab2      	subs	r2, r6, r2
 801584c:	1a69      	subs	r1, r5, r1
 801584e:	4620      	mov	r0, r4
 8015850:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8015854:	b212      	sxth	r2, r2
 8015856:	463b      	mov	r3, r7
 8015858:	b209      	sxth	r1, r1
 801585a:	47c0      	blx	r8
 801585c:	69a4      	ldr	r4, [r4, #24]
 801585e:	e7db      	b.n	8015818 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8015860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015864 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8015864:	2200      	movs	r2, #0
 8015866:	8002      	strh	r2, [r0, #0]
 8015868:	8042      	strh	r2, [r0, #2]
 801586a:	8082      	strh	r2, [r0, #4]
 801586c:	80c2      	strh	r2, [r0, #6]
 801586e:	4770      	bx	lr

08015870 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8015870:	b570      	push	{r4, r5, r6, lr}
 8015872:	460d      	mov	r5, r1
 8015874:	4616      	mov	r6, r2
 8015876:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015878:	b13c      	cbz	r4, 801588a <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 801587a:	6823      	ldr	r3, [r4, #0]
 801587c:	4620      	mov	r0, r4
 801587e:	4632      	mov	r2, r6
 8015880:	4629      	mov	r1, r5
 8015882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015884:	4798      	blx	r3
 8015886:	69a4      	ldr	r4, [r4, #24]
 8015888:	e7f6      	b.n	8015878 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 801588a:	bd70      	pop	{r4, r5, r6, pc}

0801588c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 801588c:	b538      	push	{r3, r4, r5, lr}
 801588e:	460d      	mov	r5, r1
 8015890:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015892:	b134      	cbz	r4, 80158a2 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8015894:	682b      	ldr	r3, [r5, #0]
 8015896:	4621      	mov	r1, r4
 8015898:	4628      	mov	r0, r5
 801589a:	689b      	ldr	r3, [r3, #8]
 801589c:	4798      	blx	r3
 801589e:	69a4      	ldr	r4, [r4, #24]
 80158a0:	e7f7      	b.n	8015892 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 80158a2:	bd38      	pop	{r3, r4, r5, pc}

080158a4 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 80158a4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80158a6:	b19b      	cbz	r3, 80158d0 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80158a8:	428b      	cmp	r3, r1
 80158aa:	d109      	bne.n	80158c0 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 80158ac:	699a      	ldr	r2, [r3, #24]
 80158ae:	2100      	movs	r1, #0
 80158b0:	6159      	str	r1, [r3, #20]
 80158b2:	6282      	str	r2, [r0, #40]	; 0x28
 80158b4:	b902      	cbnz	r2, 80158b8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 80158b6:	4770      	bx	lr
 80158b8:	6199      	str	r1, [r3, #24]
 80158ba:	4770      	bx	lr
 80158bc:	4613      	mov	r3, r2
 80158be:	b13a      	cbz	r2, 80158d0 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80158c0:	699a      	ldr	r2, [r3, #24]
 80158c2:	428a      	cmp	r2, r1
 80158c4:	d1fa      	bne.n	80158bc <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 80158c6:	698a      	ldr	r2, [r1, #24]
 80158c8:	619a      	str	r2, [r3, #24]
 80158ca:	2300      	movs	r3, #0
 80158cc:	e9c1 3305 	strd	r3, r3, [r1, #20]
 80158d0:	4770      	bx	lr

080158d2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 80158d2:	b410      	push	{r4}
 80158d4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80158d6:	4604      	mov	r4, r0
 80158d8:	b92b      	cbnz	r3, 80158e6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 80158da:	6803      	ldr	r3, [r0, #0]
 80158dc:	4611      	mov	r1, r2
 80158de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80158e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80158e4:	4718      	bx	r3
 80158e6:	b941      	cbnz	r1, 80158fa <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 80158e8:	6193      	str	r3, [r2, #24]
 80158ea:	6282      	str	r2, [r0, #40]	; 0x28
 80158ec:	6154      	str	r4, [r2, #20]
 80158ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80158f2:	4770      	bx	lr
 80158f4:	4603      	mov	r3, r0
 80158f6:	2800      	cmp	r0, #0
 80158f8:	d0f9      	beq.n	80158ee <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 80158fa:	4299      	cmp	r1, r3
 80158fc:	6998      	ldr	r0, [r3, #24]
 80158fe:	d1f9      	bne.n	80158f4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8015900:	6190      	str	r0, [r2, #24]
 8015902:	618a      	str	r2, [r1, #24]
 8015904:	e7f2      	b.n	80158ec <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

08015908 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8015908:	4288      	cmp	r0, r1
 801590a:	b508      	push	{r3, lr}
 801590c:	d105      	bne.n	801591a <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 801590e:	4b11      	ldr	r3, [pc, #68]	; (8015954 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 8015910:	2123      	movs	r1, #35	; 0x23
 8015912:	4a11      	ldr	r2, [pc, #68]	; (8015958 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8015914:	4811      	ldr	r0, [pc, #68]	; (801595c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 8015916:	f00f f987 	bl	8024c28 <__assert_func>
 801591a:	694b      	ldr	r3, [r1, #20]
 801591c:	b11b      	cbz	r3, 8015926 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 801591e:	4b10      	ldr	r3, [pc, #64]	; (8015960 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 8015920:	2124      	movs	r1, #36	; 0x24
 8015922:	4a0d      	ldr	r2, [pc, #52]	; (8015958 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8015924:	e7f6      	b.n	8015914 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8015926:	e9c1 0305 	strd	r0, r3, [r1, #20]
 801592a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801592c:	b913      	cbnz	r3, 8015934 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 801592e:	6281      	str	r1, [r0, #40]	; 0x28
 8015930:	bd08      	pop	{r3, pc}
 8015932:	4613      	mov	r3, r2
 8015934:	699a      	ldr	r2, [r3, #24]
 8015936:	b12a      	cbz	r2, 8015944 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 8015938:	428b      	cmp	r3, r1
 801593a:	d1fa      	bne.n	8015932 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 801593c:	4b09      	ldr	r3, [pc, #36]	; (8015964 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 801593e:	2135      	movs	r1, #53	; 0x35
 8015940:	4a05      	ldr	r2, [pc, #20]	; (8015958 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8015942:	e7e7      	b.n	8015914 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8015944:	428b      	cmp	r3, r1
 8015946:	d103      	bne.n	8015950 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 8015948:	4b06      	ldr	r3, [pc, #24]	; (8015964 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 801594a:	2138      	movs	r1, #56	; 0x38
 801594c:	4a02      	ldr	r2, [pc, #8]	; (8015958 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801594e:	e7e1      	b.n	8015914 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8015950:	6199      	str	r1, [r3, #24]
 8015952:	e7ed      	b.n	8015930 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 8015954:	080273dd 	.word	0x080273dd
 8015958:	08027534 	.word	0x08027534
 801595c:	08027409 	.word	0x08027409
 8015960:	0802743c 	.word	0x0802743c
 8015964:	08027472 	.word	0x08027472

08015968 <_ZN8touchgfx4RectaNERKS0_>:
 8015968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801596c:	888b      	ldrh	r3, [r1, #4]
 801596e:	f9b1 9000 	ldrsh.w	r9, [r1]
 8015972:	f9b0 a000 	ldrsh.w	sl, [r0]
 8015976:	444b      	add	r3, r9
 8015978:	b29b      	uxth	r3, r3
 801597a:	fa0f f883 	sxth.w	r8, r3
 801597e:	45c2      	cmp	sl, r8
 8015980:	da30      	bge.n	80159e4 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8015982:	8882      	ldrh	r2, [r0, #4]
 8015984:	4452      	add	r2, sl
 8015986:	b292      	uxth	r2, r2
 8015988:	fa0f fe82 	sxth.w	lr, r2
 801598c:	45f1      	cmp	r9, lr
 801598e:	da29      	bge.n	80159e4 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8015990:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8015994:	88cc      	ldrh	r4, [r1, #6]
 8015996:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801599a:	442c      	add	r4, r5
 801599c:	b224      	sxth	r4, r4
 801599e:	42a6      	cmp	r6, r4
 80159a0:	da20      	bge.n	80159e4 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 80159a2:	88c7      	ldrh	r7, [r0, #6]
 80159a4:	4437      	add	r7, r6
 80159a6:	b2bf      	uxth	r7, r7
 80159a8:	fa0f fc87 	sxth.w	ip, r7
 80159ac:	4565      	cmp	r5, ip
 80159ae:	da19      	bge.n	80159e4 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 80159b0:	45ca      	cmp	sl, r9
 80159b2:	4654      	mov	r4, sl
 80159b4:	bfb8      	it	lt
 80159b6:	464c      	movlt	r4, r9
 80159b8:	42b5      	cmp	r5, r6
 80159ba:	bfb8      	it	lt
 80159bc:	4635      	movlt	r5, r6
 80159be:	45f0      	cmp	r8, lr
 80159c0:	bfc8      	it	gt
 80159c2:	4613      	movgt	r3, r2
 80159c4:	1b1b      	subs	r3, r3, r4
 80159c6:	8083      	strh	r3, [r0, #4]
 80159c8:	88ca      	ldrh	r2, [r1, #6]
 80159ca:	884b      	ldrh	r3, [r1, #2]
 80159cc:	8004      	strh	r4, [r0, #0]
 80159ce:	4413      	add	r3, r2
 80159d0:	8045      	strh	r5, [r0, #2]
 80159d2:	b29b      	uxth	r3, r3
 80159d4:	b21a      	sxth	r2, r3
 80159d6:	4594      	cmp	ip, r2
 80159d8:	bfb8      	it	lt
 80159da:	463b      	movlt	r3, r7
 80159dc:	1b5b      	subs	r3, r3, r5
 80159de:	80c3      	strh	r3, [r0, #6]
 80159e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80159e4:	2300      	movs	r3, #0
 80159e6:	8003      	strh	r3, [r0, #0]
 80159e8:	8043      	strh	r3, [r0, #2]
 80159ea:	8083      	strh	r3, [r0, #4]
 80159ec:	80c3      	strh	r3, [r0, #6]
 80159ee:	e7f7      	b.n	80159e0 <_ZN8touchgfx4RectaNERKS0_+0x78>

080159f0 <_ZNK8touchgfx4Rect7isEmptyEv>:
 80159f0:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80159f4:	b12b      	cbz	r3, 8015a02 <_ZNK8touchgfx4Rect7isEmptyEv+0x12>
 80159f6:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80159fa:	fab0 f080 	clz	r0, r0
 80159fe:	0940      	lsrs	r0, r0, #5
 8015a00:	4770      	bx	lr
 8015a02:	2001      	movs	r0, #1
 8015a04:	4770      	bx	lr

08015a06 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8015a06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a0a:	2300      	movs	r3, #0
 8015a0c:	4604      	mov	r4, r0
 8015a0e:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8015a10:	8003      	strh	r3, [r0, #0]
 8015a12:	8043      	strh	r3, [r0, #2]
 8015a14:	8083      	strh	r3, [r0, #4]
 8015a16:	80c3      	strh	r3, [r0, #6]
 8015a18:	2d00      	cmp	r5, #0
 8015a1a:	d040      	beq.n	8015a9e <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8015a1c:	1d28      	adds	r0, r5, #4
 8015a1e:	f7ff ffe7 	bl	80159f0 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015a22:	b988      	cbnz	r0, 8015a48 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8015a24:	4620      	mov	r0, r4
 8015a26:	f7ff ffe3 	bl	80159f0 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015a2a:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8015a2e:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8015a32:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8015a36:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8015a3a:	b138      	cbz	r0, 8015a4c <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8015a3c:	8022      	strh	r2, [r4, #0]
 8015a3e:	8063      	strh	r3, [r4, #2]
 8015a40:	f8a4 e004 	strh.w	lr, [r4, #4]
 8015a44:	f8a4 c006 	strh.w	ip, [r4, #6]
 8015a48:	69ad      	ldr	r5, [r5, #24]
 8015a4a:	e7e5      	b.n	8015a18 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8015a4c:	f9b4 0000 	ldrsh.w	r0, [r4]
 8015a50:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8015a54:	4290      	cmp	r0, r2
 8015a56:	4607      	mov	r7, r0
 8015a58:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8015a5c:	460e      	mov	r6, r1
 8015a5e:	bfa8      	it	ge
 8015a60:	4617      	movge	r7, r2
 8015a62:	4299      	cmp	r1, r3
 8015a64:	4472      	add	r2, lr
 8015a66:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8015a6a:	bfa8      	it	ge
 8015a6c:	461e      	movge	r6, r3
 8015a6e:	4440      	add	r0, r8
 8015a70:	4471      	add	r1, lr
 8015a72:	4463      	add	r3, ip
 8015a74:	b200      	sxth	r0, r0
 8015a76:	8027      	strh	r7, [r4, #0]
 8015a78:	b212      	sxth	r2, r2
 8015a7a:	8066      	strh	r6, [r4, #2]
 8015a7c:	b209      	sxth	r1, r1
 8015a7e:	b21b      	sxth	r3, r3
 8015a80:	4290      	cmp	r0, r2
 8015a82:	bfac      	ite	ge
 8015a84:	ebc7 0200 	rsbge	r2, r7, r0
 8015a88:	ebc7 0202 	rsblt	r2, r7, r2
 8015a8c:	4299      	cmp	r1, r3
 8015a8e:	bfac      	ite	ge
 8015a90:	ebc6 0301 	rsbge	r3, r6, r1
 8015a94:	ebc6 0303 	rsblt	r3, r6, r3
 8015a98:	80a2      	strh	r2, [r4, #4]
 8015a9a:	80e3      	strh	r3, [r4, #6]
 8015a9c:	e7d4      	b.n	8015a48 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8015a9e:	4620      	mov	r0, r4
 8015aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015aa4 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8015aa4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015aa8:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8015aac:	b383      	cbz	r3, 8015b10 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8015aae:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015ab0:	b374      	cbz	r4, 8015b10 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8015ab2:	f9b1 5000 	ldrsh.w	r5, [r1]
 8015ab6:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8015aba:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8015abe:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8015ac2:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8015ac6:	b303      	cbz	r3, 8015b0a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8015ac8:	4668      	mov	r0, sp
 8015aca:	1d21      	adds	r1, r4, #4
 8015acc:	f8ad 5000 	strh.w	r5, [sp]
 8015ad0:	f8ad 6002 	strh.w	r6, [sp, #2]
 8015ad4:	f8ad 7004 	strh.w	r7, [sp, #4]
 8015ad8:	f8ad 8006 	strh.w	r8, [sp, #6]
 8015adc:	f7ff ff44 	bl	8015968 <_ZN8touchgfx4RectaNERKS0_>
 8015ae0:	4668      	mov	r0, sp
 8015ae2:	f7ff ff85 	bl	80159f0 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015ae6:	b980      	cbnz	r0, 8015b0a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8015ae8:	f8bd 3000 	ldrh.w	r3, [sp]
 8015aec:	4669      	mov	r1, sp
 8015aee:	88a2      	ldrh	r2, [r4, #4]
 8015af0:	4620      	mov	r0, r4
 8015af2:	1a9b      	subs	r3, r3, r2
 8015af4:	88e2      	ldrh	r2, [r4, #6]
 8015af6:	f8ad 3000 	strh.w	r3, [sp]
 8015afa:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015afe:	1a9b      	subs	r3, r3, r2
 8015b00:	f8ad 3002 	strh.w	r3, [sp, #2]
 8015b04:	6823      	ldr	r3, [r4, #0]
 8015b06:	689b      	ldr	r3, [r3, #8]
 8015b08:	4798      	blx	r3
 8015b0a:	69a4      	ldr	r4, [r4, #24]
 8015b0c:	2c00      	cmp	r4, #0
 8015b0e:	d1d8      	bne.n	8015ac2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8015b10:	b002      	add	sp, #8
 8015b12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015b16 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8015b16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015b18:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8015b1c:	460d      	mov	r5, r1
 8015b1e:	4616      	mov	r6, r2
 8015b20:	b323      	cbz	r3, 8015b6c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8015b22:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015b24:	b314      	cbz	r4, 8015b6c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8015b26:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8015b2a:	b1eb      	cbz	r3, 8015b68 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8015b2c:	6828      	ldr	r0, [r5, #0]
 8015b2e:	466b      	mov	r3, sp
 8015b30:	6869      	ldr	r1, [r5, #4]
 8015b32:	c303      	stmia	r3!, {r0, r1}
 8015b34:	4668      	mov	r0, sp
 8015b36:	1d21      	adds	r1, r4, #4
 8015b38:	f7ff ff16 	bl	8015968 <_ZN8touchgfx4RectaNERKS0_>
 8015b3c:	4668      	mov	r0, sp
 8015b3e:	f7ff ff57 	bl	80159f0 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015b42:	b988      	cbnz	r0, 8015b68 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8015b44:	f8bd 3000 	ldrh.w	r3, [sp]
 8015b48:	4669      	mov	r1, sp
 8015b4a:	88a2      	ldrh	r2, [r4, #4]
 8015b4c:	4620      	mov	r0, r4
 8015b4e:	1a9b      	subs	r3, r3, r2
 8015b50:	88e2      	ldrh	r2, [r4, #6]
 8015b52:	f8ad 3000 	strh.w	r3, [sp]
 8015b56:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015b5a:	1a9b      	subs	r3, r3, r2
 8015b5c:	4632      	mov	r2, r6
 8015b5e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8015b62:	6823      	ldr	r3, [r4, #0]
 8015b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015b66:	4798      	blx	r3
 8015b68:	69a4      	ldr	r4, [r4, #24]
 8015b6a:	e7db      	b.n	8015b24 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8015b6c:	b002      	add	sp, #8
 8015b6e:	bd70      	pop	{r4, r5, r6, pc}

08015b70 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 8015b70:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015b74:	4770      	bx	lr

08015b76 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8015b76:	6803      	ldr	r3, [r0, #0]
 8015b78:	b513      	push	{r0, r1, r4, lr}
 8015b7a:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8015b7e:	2300      	movs	r3, #0
 8015b80:	e9cd 3300 	strd	r3, r3, [sp]
 8015b84:	466b      	mov	r3, sp
 8015b86:	47a0      	blx	r4
 8015b88:	b002      	add	sp, #8
 8015b8a:	bd10      	pop	{r4, pc}

08015b8c <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8015b8c:	2301      	movs	r3, #1
 8015b8e:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8015b92:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8015b96:	4770      	bx	lr

08015b98 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8015b98:	2301      	movs	r3, #1
 8015b9a:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8015b9e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8015ba2:	4770      	bx	lr

08015ba4 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8015ba4:	6843      	ldr	r3, [r0, #4]
 8015ba6:	2201      	movs	r2, #1
 8015ba8:	725a      	strb	r2, [r3, #9]
 8015baa:	6840      	ldr	r0, [r0, #4]
 8015bac:	6803      	ldr	r3, [r0, #0]
 8015bae:	691b      	ldr	r3, [r3, #16]
 8015bb0:	4718      	bx	r3

08015bb2 <_ZN8touchgfx3HAL8flushDMAEv>:
 8015bb2:	6840      	ldr	r0, [r0, #4]
 8015bb4:	6803      	ldr	r3, [r0, #0]
 8015bb6:	689b      	ldr	r3, [r3, #8]
 8015bb8:	4718      	bx	r3
	...

08015bbc <_ZN8touchgfx3HAL10beginFrameEv>:
 8015bbc:	4b04      	ldr	r3, [pc, #16]	; (8015bd0 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8015bbe:	781b      	ldrb	r3, [r3, #0]
 8015bc0:	b123      	cbz	r3, 8015bcc <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8015bc2:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8015bc6:	f080 0001 	eor.w	r0, r0, #1
 8015bca:	4770      	bx	lr
 8015bcc:	2001      	movs	r0, #1
 8015bce:	4770      	bx	lr
 8015bd0:	2000bc7a 	.word	0x2000bc7a

08015bd4 <_ZN8touchgfx3HAL8endFrameEv>:
 8015bd4:	b510      	push	{r4, lr}
 8015bd6:	4604      	mov	r4, r0
 8015bd8:	6840      	ldr	r0, [r0, #4]
 8015bda:	6803      	ldr	r3, [r0, #0]
 8015bdc:	689b      	ldr	r3, [r3, #8]
 8015bde:	4798      	blx	r3
 8015be0:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8015be4:	b113      	cbz	r3, 8015bec <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8015be6:	2301      	movs	r3, #1
 8015be8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8015bec:	bd10      	pop	{r4, pc}

08015bee <_ZN8touchgfx3HAL9taskEntryEv>:
 8015bee:	b508      	push	{r3, lr}
 8015bf0:	6803      	ldr	r3, [r0, #0]
 8015bf2:	4604      	mov	r4, r0
 8015bf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015bf6:	4798      	blx	r3
 8015bf8:	6823      	ldr	r3, [r4, #0]
 8015bfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015bfc:	4620      	mov	r0, r4
 8015bfe:	4798      	blx	r3
 8015c00:	f7fd fed4 	bl	80139ac <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8015c04:	6823      	ldr	r3, [r4, #0]
 8015c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015c08:	e7f8      	b.n	8015bfc <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

08015c0c <_ZN8touchgfx3HAL4tickEv>:
 8015c0c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8015c0e:	6803      	ldr	r3, [r0, #0]
 8015c10:	4604      	mov	r4, r0
 8015c12:	4d5c      	ldr	r5, [pc, #368]	; (8015d84 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8015c14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8015c18:	4798      	blx	r3
 8015c1a:	2800      	cmp	r0, #0
 8015c1c:	f000 8097 	beq.w	8015d4e <_ZN8touchgfx3HAL4tickEv+0x142>
 8015c20:	2001      	movs	r0, #1
 8015c22:	2600      	movs	r6, #0
 8015c24:	f7fd fba6 	bl	8013374 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8015c28:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8015c2c:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8015c30:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8015c34:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8015c38:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8015c3c:	b133      	cbz	r3, 8015c4c <_ZN8touchgfx3HAL4tickEv+0x40>
 8015c3e:	6823      	ldr	r3, [r4, #0]
 8015c40:	4620      	mov	r0, r4
 8015c42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8015c46:	4798      	blx	r3
 8015c48:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8015c4c:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8015c50:	2601      	movs	r6, #1
 8015c52:	6862      	ldr	r2, [r4, #4]
 8015c54:	f083 0301 	eor.w	r3, r3, #1
 8015c58:	702e      	strb	r6, [r5, #0]
 8015c5a:	7253      	strb	r3, [r2, #9]
 8015c5c:	f002 fff0 	bl	8018c40 <_ZN8touchgfx11Application11getInstanceEv>
 8015c60:	6803      	ldr	r3, [r0, #0]
 8015c62:	4631      	mov	r1, r6
 8015c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c66:	4798      	blx	r3
 8015c68:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8015c6c:	b90b      	cbnz	r3, 8015c72 <_ZN8touchgfx3HAL4tickEv+0x66>
 8015c6e:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8015c72:	f002 ffe5 	bl	8018c40 <_ZN8touchgfx11Application11getInstanceEv>
 8015c76:	6803      	ldr	r3, [r0, #0]
 8015c78:	695b      	ldr	r3, [r3, #20]
 8015c7a:	4798      	blx	r3
 8015c7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015c7e:	6803      	ldr	r3, [r0, #0]
 8015c80:	691b      	ldr	r3, [r3, #16]
 8015c82:	4798      	blx	r3
 8015c84:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8015c88:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8015c8c:	3b01      	subs	r3, #1
 8015c8e:	b2db      	uxtb	r3, r3
 8015c90:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8015c94:	b10a      	cbz	r2, 8015c9a <_ZN8touchgfx3HAL4tickEv+0x8e>
 8015c96:	2b00      	cmp	r3, #0
 8015c98:	d1eb      	bne.n	8015c72 <_ZN8touchgfx3HAL4tickEv+0x66>
 8015c9a:	4a3b      	ldr	r2, [pc, #236]	; (8015d88 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8015c9c:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8015ca0:	7813      	ldrb	r3, [r2, #0]
 8015ca2:	3301      	adds	r3, #1
 8015ca4:	b25b      	sxtb	r3, r3
 8015ca6:	4299      	cmp	r1, r3
 8015ca8:	7013      	strb	r3, [r2, #0]
 8015caa:	dc10      	bgt.n	8015cce <_ZN8touchgfx3HAL4tickEv+0xc2>
 8015cac:	2300      	movs	r3, #0
 8015cae:	68e0      	ldr	r0, [r4, #12]
 8015cb0:	a902      	add	r1, sp, #8
 8015cb2:	7013      	strb	r3, [r2, #0]
 8015cb4:	aa03      	add	r2, sp, #12
 8015cb6:	6803      	ldr	r3, [r0, #0]
 8015cb8:	68db      	ldr	r3, [r3, #12]
 8015cba:	4798      	blx	r3
 8015cbc:	6823      	ldr	r3, [r4, #0]
 8015cbe:	2800      	cmp	r0, #0
 8015cc0:	d051      	beq.n	8015d66 <_ZN8touchgfx3HAL4tickEv+0x15a>
 8015cc2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015cc6:	4620      	mov	r0, r4
 8015cc8:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8015ccc:	4798      	blx	r3
 8015cce:	2300      	movs	r3, #0
 8015cd0:	6960      	ldr	r0, [r4, #20]
 8015cd2:	f88d 3007 	strb.w	r3, [sp, #7]
 8015cd6:	b158      	cbz	r0, 8015cf0 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8015cd8:	6803      	ldr	r3, [r0, #0]
 8015cda:	f10d 0107 	add.w	r1, sp, #7
 8015cde:	68db      	ldr	r3, [r3, #12]
 8015ce0:	4798      	blx	r3
 8015ce2:	b128      	cbz	r0, 8015cf0 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8015ce4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015ce6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8015cea:	6803      	ldr	r3, [r0, #0]
 8015cec:	68db      	ldr	r3, [r3, #12]
 8015cee:	4798      	blx	r3
 8015cf0:	f104 001c 	add.w	r0, r4, #28
 8015cf4:	f00d facc 	bl	8023290 <_ZN8touchgfx8Gestures4tickEv>
 8015cf8:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8015cfc:	b30b      	cbz	r3, 8015d42 <_ZN8touchgfx3HAL4tickEv+0x136>
 8015cfe:	6920      	ldr	r0, [r4, #16]
 8015d00:	6803      	ldr	r3, [r0, #0]
 8015d02:	691b      	ldr	r3, [r3, #16]
 8015d04:	4798      	blx	r3
 8015d06:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015d08:	4606      	mov	r6, r0
 8015d0a:	b903      	cbnz	r3, 8015d0e <_ZN8touchgfx3HAL4tickEv+0x102>
 8015d0c:	6720      	str	r0, [r4, #112]	; 0x70
 8015d0e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015d10:	4a1e      	ldr	r2, [pc, #120]	; (8015d8c <_ZN8touchgfx3HAL4tickEv+0x180>)
 8015d12:	1af3      	subs	r3, r6, r3
 8015d14:	4293      	cmp	r3, r2
 8015d16:	d914      	bls.n	8015d42 <_ZN8touchgfx3HAL4tickEv+0x136>
 8015d18:	6920      	ldr	r0, [r4, #16]
 8015d1a:	6803      	ldr	r3, [r0, #0]
 8015d1c:	699b      	ldr	r3, [r3, #24]
 8015d1e:	4798      	blx	r3
 8015d20:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015d22:	2264      	movs	r2, #100	; 0x64
 8015d24:	1af3      	subs	r3, r6, r3
 8015d26:	fbb3 f3f2 	udiv	r3, r3, r2
 8015d2a:	fbb0 f0f3 	udiv	r0, r0, r3
 8015d2e:	2800      	cmp	r0, #0
 8015d30:	dc1e      	bgt.n	8015d70 <_ZN8touchgfx3HAL4tickEv+0x164>
 8015d32:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8015d36:	6920      	ldr	r0, [r4, #16]
 8015d38:	2100      	movs	r1, #0
 8015d3a:	6803      	ldr	r3, [r0, #0]
 8015d3c:	69db      	ldr	r3, [r3, #28]
 8015d3e:	4798      	blx	r3
 8015d40:	6726      	str	r6, [r4, #112]	; 0x70
 8015d42:	f002 ff7d 	bl	8018c40 <_ZN8touchgfx11Application11getInstanceEv>
 8015d46:	6803      	ldr	r3, [r0, #0]
 8015d48:	2100      	movs	r1, #0
 8015d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d4c:	4798      	blx	r3
 8015d4e:	6823      	ldr	r3, [r4, #0]
 8015d50:	4620      	mov	r0, r4
 8015d52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015d56:	4798      	blx	r3
 8015d58:	2001      	movs	r0, #1
 8015d5a:	f7fd fb16 	bl	801338a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8015d5e:	2300      	movs	r3, #0
 8015d60:	702b      	strb	r3, [r5, #0]
 8015d62:	b004      	add	sp, #16
 8015d64:	bd70      	pop	{r4, r5, r6, pc}
 8015d66:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8015d6a:	4620      	mov	r0, r4
 8015d6c:	4798      	blx	r3
 8015d6e:	e7ae      	b.n	8015cce <_ZN8touchgfx3HAL4tickEv+0xc2>
 8015d70:	2863      	cmp	r0, #99	; 0x63
 8015d72:	bfcb      	itete	gt
 8015d74:	2300      	movgt	r3, #0
 8015d76:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8015d7a:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8015d7e:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8015d82:	e7d8      	b.n	8015d36 <_ZN8touchgfx3HAL4tickEv+0x12a>
 8015d84:	2000bc80 	.word	0x2000bc80
 8015d88:	2000bc81 	.word	0x2000bc81
 8015d8c:	05f5e100 	.word	0x05f5e100

08015d90 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8015d90:	f7fd bdac 	b.w	80138ec <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08015d94 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8015d94:	6581      	str	r1, [r0, #88]	; 0x58
 8015d96:	301c      	adds	r0, #28
 8015d98:	f00d ba78 	b.w	802328c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08015d9c <_ZN8touchgfx3HAL5touchEll>:
 8015d9c:	b530      	push	{r4, r5, lr}
 8015d9e:	b087      	sub	sp, #28
 8015da0:	4604      	mov	r4, r0
 8015da2:	a804      	add	r0, sp, #16
 8015da4:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8015da8:	f002 fd4e 	bl	8018848 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8015dac:	9b04      	ldr	r3, [sp, #16]
 8015dae:	a906      	add	r1, sp, #24
 8015db0:	a803      	add	r0, sp, #12
 8015db2:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015db6:	9b05      	ldr	r3, [sp, #20]
 8015db8:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8015dbc:	f002 fd92 	bl	80188e4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8015dc0:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8015dc4:	f104 001c 	add.w	r0, r4, #28
 8015dc8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8015dcc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8015dd0:	b189      	cbz	r1, 8015df6 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8015dd2:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8015dd6:	9300      	str	r3, [sp, #0]
 8015dd8:	4613      	mov	r3, r2
 8015dda:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8015dde:	462a      	mov	r2, r5
 8015de0:	f00d fa64 	bl	80232ac <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8015de4:	b128      	cbz	r0, 8015df2 <_ZN8touchgfx3HAL5touchEll+0x56>
 8015de6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8015dea:	65e3      	str	r3, [r4, #92]	; 0x5c
 8015dec:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8015df0:	6623      	str	r3, [r4, #96]	; 0x60
 8015df2:	b007      	add	sp, #28
 8015df4:	bd30      	pop	{r4, r5, pc}
 8015df6:	f00d fa9d 	bl	8023334 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8015dfa:	2301      	movs	r3, #1
 8015dfc:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8015e00:	e7f1      	b.n	8015de6 <_ZN8touchgfx3HAL5touchEll+0x4a>

08015e02 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8015e02:	b570      	push	{r4, r5, r6, lr}
 8015e04:	2b00      	cmp	r3, #0
 8015e06:	d050      	beq.n	8015eaa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8015e08:	ea81 0002 	eor.w	r0, r1, r2
 8015e0c:	07c6      	lsls	r6, r0, #31
 8015e0e:	d508      	bpl.n	8015e22 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8015e10:	3a01      	subs	r2, #1
 8015e12:	18cc      	adds	r4, r1, r3
 8015e14:	42a1      	cmp	r1, r4
 8015e16:	d048      	beq.n	8015eaa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8015e18:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8015e1c:	f801 0b01 	strb.w	r0, [r1], #1
 8015e20:	e7f8      	b.n	8015e14 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8015e22:	07d5      	lsls	r5, r2, #31
 8015e24:	bf42      	ittt	mi
 8015e26:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8015e2a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8015e2e:	f801 0b01 	strbmi.w	r0, [r1], #1
 8015e32:	2b01      	cmp	r3, #1
 8015e34:	d915      	bls.n	8015e62 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8015e36:	ea82 0001 	eor.w	r0, r2, r1
 8015e3a:	0784      	lsls	r4, r0, #30
 8015e3c:	d02d      	beq.n	8015e9a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 8015e3e:	1e94      	subs	r4, r2, #2
 8015e40:	4608      	mov	r0, r1
 8015e42:	18ce      	adds	r6, r1, r3
 8015e44:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 8015e48:	f820 5b02 	strh.w	r5, [r0], #2
 8015e4c:	1a35      	subs	r5, r6, r0
 8015e4e:	2d01      	cmp	r5, #1
 8015e50:	d8f8      	bhi.n	8015e44 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 8015e52:	1e98      	subs	r0, r3, #2
 8015e54:	f003 0301 	and.w	r3, r3, #1
 8015e58:	f020 0001 	bic.w	r0, r0, #1
 8015e5c:	3002      	adds	r0, #2
 8015e5e:	4401      	add	r1, r0
 8015e60:	4402      	add	r2, r0
 8015e62:	1f14      	subs	r4, r2, #4
 8015e64:	4608      	mov	r0, r1
 8015e66:	18ce      	adds	r6, r1, r3
 8015e68:	1a35      	subs	r5, r6, r0
 8015e6a:	2d03      	cmp	r5, #3
 8015e6c:	d810      	bhi.n	8015e90 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 8015e6e:	089c      	lsrs	r4, r3, #2
 8015e70:	00a0      	lsls	r0, r4, #2
 8015e72:	4401      	add	r1, r0
 8015e74:	3801      	subs	r0, #1
 8015e76:	4402      	add	r2, r0
 8015e78:	f06f 0003 	mvn.w	r0, #3
 8015e7c:	fb00 3404 	mla	r4, r0, r4, r3
 8015e80:	440c      	add	r4, r1
 8015e82:	42a1      	cmp	r1, r4
 8015e84:	d011      	beq.n	8015eaa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8015e86:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8015e8a:	f801 3b01 	strb.w	r3, [r1], #1
 8015e8e:	e7f8      	b.n	8015e82 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 8015e90:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8015e94:	f840 5b04 	str.w	r5, [r0], #4
 8015e98:	e7e6      	b.n	8015e68 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 8015e9a:	0790      	lsls	r0, r2, #30
 8015e9c:	d0e1      	beq.n	8015e62 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8015e9e:	f832 0b02 	ldrh.w	r0, [r2], #2
 8015ea2:	3b02      	subs	r3, #2
 8015ea4:	f821 0b02 	strh.w	r0, [r1], #2
 8015ea8:	e7db      	b.n	8015e62 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8015eaa:	2001      	movs	r0, #1
 8015eac:	bd70      	pop	{r4, r5, r6, pc}

08015eae <_ZN8touchgfx3HAL7noTouchEv>:
 8015eae:	b510      	push	{r4, lr}
 8015eb0:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8015eb4:	4604      	mov	r4, r0
 8015eb6:	b153      	cbz	r3, 8015ece <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8015eb8:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8015ebc:	2101      	movs	r1, #1
 8015ebe:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8015ec2:	301c      	adds	r0, #28
 8015ec4:	f00d fa36 	bl	8023334 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8015ec8:	2300      	movs	r3, #0
 8015eca:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8015ece:	bd10      	pop	{r4, pc}

08015ed0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8015ed0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015ed4:	4605      	mov	r5, r0
 8015ed6:	6980      	ldr	r0, [r0, #24]
 8015ed8:	b085      	sub	sp, #20
 8015eda:	460f      	mov	r7, r1
 8015edc:	4690      	mov	r8, r2
 8015ede:	4699      	mov	r9, r3
 8015ee0:	b930      	cbnz	r0, 8015ef0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 8015ee2:	4b1f      	ldr	r3, [pc, #124]	; (8015f60 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8015ee4:	f44f 7198 	mov.w	r1, #304	; 0x130
 8015ee8:	4a1e      	ldr	r2, [pc, #120]	; (8015f64 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8015eea:	481f      	ldr	r0, [pc, #124]	; (8015f68 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x98>)
 8015eec:	f00e fe9c 	bl	8024c28 <__assert_func>
 8015ef0:	ac04      	add	r4, sp, #16
 8015ef2:	2600      	movs	r6, #0
 8015ef4:	f844 6d04 	str.w	r6, [r4, #-4]!
 8015ef8:	6806      	ldr	r6, [r0, #0]
 8015efa:	9401      	str	r4, [sp, #4]
 8015efc:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8015f00:	9400      	str	r4, [sp, #0]
 8015f02:	6834      	ldr	r4, [r6, #0]
 8015f04:	47a0      	blx	r4
 8015f06:	4c19      	ldr	r4, [pc, #100]	; (8015f6c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x9c>)
 8015f08:	4606      	mov	r6, r0
 8015f0a:	f8a4 9000 	strh.w	r9, [r4]
 8015f0e:	f7f9 fdab 	bl	800fa68 <_ZN8touchgfx3HAL3lcdEv>
 8015f12:	6803      	ldr	r3, [r0, #0]
 8015f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f16:	4798      	blx	r3
 8015f18:	280c      	cmp	r0, #12
 8015f1a:	d80f      	bhi.n	8015f3c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 8015f1c:	e8df f000 	tbb	[pc, r0]
 8015f20:	1b1b1207 	.word	0x1b1b1207
 8015f24:	1b1b1b1b 	.word	0x1b1b1b1b
 8015f28:	1b1b1b1b 	.word	0x1b1b1b1b
 8015f2c:	1b          	.byte	0x1b
 8015f2d:	00          	.byte	0x00
 8015f2e:	8823      	ldrh	r3, [r4, #0]
 8015f30:	fb08 7203 	mla	r2, r8, r3, r7
 8015f34:	9b03      	ldr	r3, [sp, #12]
 8015f36:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8015f3a:	63eb      	str	r3, [r5, #60]	; 0x3c
 8015f3c:	4630      	mov	r0, r6
 8015f3e:	b005      	add	sp, #20
 8015f40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015f44:	8822      	ldrh	r2, [r4, #0]
 8015f46:	9b03      	ldr	r3, [sp, #12]
 8015f48:	fb08 7202 	mla	r2, r8, r2, r7
 8015f4c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015f50:	1a9a      	subs	r2, r3, r2
 8015f52:	63ea      	str	r2, [r5, #60]	; 0x3c
 8015f54:	e7f2      	b.n	8015f3c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 8015f56:	4b06      	ldr	r3, [pc, #24]	; (8015f70 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0xa0>)
 8015f58:	f240 114d 	movw	r1, #333	; 0x14d
 8015f5c:	4a01      	ldr	r2, [pc, #4]	; (8015f64 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8015f5e:	e7c4      	b.n	8015eea <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8015f60:	080275dd 	.word	0x080275dd
 8015f64:	080278ee 	.word	0x080278ee
 8015f68:	08027622 	.word	0x08027622
 8015f6c:	2000bc76 	.word	0x2000bc76
 8015f70:	08027648 	.word	0x08027648

08015f74 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 8015f74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015f78:	4698      	mov	r8, r3
 8015f7a:	6803      	ldr	r3, [r0, #0]
 8015f7c:	b087      	sub	sp, #28
 8015f7e:	460e      	mov	r6, r1
 8015f80:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8015f82:	4617      	mov	r7, r2
 8015f84:	4b0d      	ldr	r3, [pc, #52]	; (8015fbc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 8015f86:	4604      	mov	r4, r0
 8015f88:	f8b3 9000 	ldrh.w	r9, [r3]
 8015f8c:	f7f9 fd6c 	bl	800fa68 <_ZN8touchgfx3HAL3lcdEv>
 8015f90:	6803      	ldr	r3, [r0, #0]
 8015f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f94:	4798      	blx	r3
 8015f96:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8015f9a:	463a      	mov	r2, r7
 8015f9c:	4631      	mov	r1, r6
 8015f9e:	9302      	str	r3, [sp, #8]
 8015fa0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8015fa4:	9301      	str	r3, [sp, #4]
 8015fa6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8015faa:	e9cd 9003 	strd	r9, r0, [sp, #12]
 8015fae:	9300      	str	r3, [sp, #0]
 8015fb0:	4620      	mov	r0, r4
 8015fb2:	4643      	mov	r3, r8
 8015fb4:	47a8      	blx	r5
 8015fb6:	b007      	add	sp, #28
 8015fb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015fbc:	2000bc76 	.word	0x2000bc76

08015fc0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8015fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fc4:	4606      	mov	r6, r0
 8015fc6:	b089      	sub	sp, #36	; 0x24
 8015fc8:	4610      	mov	r0, r2
 8015fca:	460c      	mov	r4, r1
 8015fcc:	4691      	mov	r9, r2
 8015fce:	4698      	mov	r8, r3
 8015fd0:	f005 f818 	bl	801b004 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8015fd4:	2800      	cmp	r0, #0
 8015fd6:	f000 8092 	beq.w	80160fe <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x13e>
 8015fda:	f8df a13c 	ldr.w	sl, [pc, #316]	; 8016118 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 8015fde:	ad08      	add	r5, sp, #32
 8015fe0:	f8df b138 	ldr.w	fp, [pc, #312]	; 801611c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>
 8015fe4:	f8da 0000 	ldr.w	r0, [sl]
 8015fe8:	4f4a      	ldr	r7, [pc, #296]	; (8016114 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 8015fea:	6802      	ldr	r2, [r0, #0]
 8015fec:	6a12      	ldr	r2, [r2, #32]
 8015fee:	4790      	blx	r2
 8015ff0:	f8da 0000 	ldr.w	r0, [sl]
 8015ff4:	6802      	ldr	r2, [r0, #0]
 8015ff6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8015ff8:	4790      	blx	r2
 8015ffa:	f8bb 3000 	ldrh.w	r3, [fp]
 8015ffe:	f825 9d0c 	strh.w	r9, [r5, #-12]!
 8016002:	4628      	mov	r0, r5
 8016004:	9300      	str	r3, [sp, #0]
 8016006:	883b      	ldrh	r3, [r7, #0]
 8016008:	9301      	str	r3, [sp, #4]
 801600a:	f005 f8bb 	bl	801b184 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801600e:	f8ab 0000 	strh.w	r0, [fp]
 8016012:	4628      	mov	r0, r5
 8016014:	f005 f8f0 	bl	801b1f8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016018:	f8da b000 	ldr.w	fp, [sl]
 801601c:	8038      	strh	r0, [r7, #0]
 801601e:	4648      	mov	r0, r9
 8016020:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 8016024:	f8db 7040 	ldr.w	r7, [fp, #64]	; 0x40
 8016028:	9302      	str	r3, [sp, #8]
 801602a:	f004 ffeb 	bl	801b004 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801602e:	f8da 2000 	ldr.w	r2, [sl]
 8016032:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 8016036:	63d0      	str	r0, [r2, #60]	; 0x3c
 8016038:	4620      	mov	r0, r4
 801603a:	6822      	ldr	r2, [r4, #0]
 801603c:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
 8016040:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8016042:	2200      	movs	r2, #0
 8016044:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 8016048:	4611      	mov	r1, r2
 801604a:	4798      	blx	r3
 801604c:	2201      	movs	r2, #1
 801604e:	f894 b025 	ldrb.w	fp, [r4, #37]	; 0x25
 8016052:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 8016056:	1d22      	adds	r2, r4, #4
 8016058:	f9b8 1004 	ldrsh.w	r1, [r8, #4]
 801605c:	2900      	cmp	r1, #0
 801605e:	d051      	beq.n	8016104 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 8016060:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
 8016064:	2900      	cmp	r1, #0
 8016066:	d04d      	beq.n	8016104 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 8016068:	6810      	ldr	r0, [r2, #0]
 801606a:	f10d 0c18 	add.w	ip, sp, #24
 801606e:	6851      	ldr	r1, [r2, #4]
 8016070:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8016074:	4641      	mov	r1, r8
 8016076:	a806      	add	r0, sp, #24
 8016078:	f7ff fc76 	bl	8015968 <_ZN8touchgfx4RectaNERKS0_>
 801607c:	4628      	mov	r0, r5
 801607e:	f005 fa0d 	bl	801b49c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8016082:	4680      	mov	r8, r0
 8016084:	f7f9 fcf0 	bl	800fa68 <_ZN8touchgfx3HAL3lcdEv>
 8016088:	6802      	ldr	r2, [r0, #0]
 801608a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801608c:	4790      	blx	r2
 801608e:	4580      	cmp	r8, r0
 8016090:	d03d      	beq.n	801610e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x14e>
 8016092:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8016094:	b150      	cbz	r0, 80160ac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 8016096:	4628      	mov	r0, r5
 8016098:	f005 fa00 	bl	801b49c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801609c:	4605      	mov	r5, r0
 801609e:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 80160a0:	6803      	ldr	r3, [r0, #0]
 80160a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160a4:	4798      	blx	r3
 80160a6:	1a2b      	subs	r3, r5, r0
 80160a8:	4258      	negs	r0, r3
 80160aa:	4158      	adcs	r0, r3
 80160ac:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
 80160b0:	2500      	movs	r5, #0
 80160b2:	6963      	ldr	r3, [r4, #20]
 80160b4:	4620      	mov	r0, r4
 80160b6:	6822      	ldr	r2, [r4, #0]
 80160b8:	a906      	add	r1, sp, #24
 80160ba:	6165      	str	r5, [r4, #20]
 80160bc:	9303      	str	r3, [sp, #12]
 80160be:	6892      	ldr	r2, [r2, #8]
 80160c0:	4790      	blx	r2
 80160c2:	9b03      	ldr	r3, [sp, #12]
 80160c4:	4620      	mov	r0, r4
 80160c6:	4652      	mov	r2, sl
 80160c8:	6163      	str	r3, [r4, #20]
 80160ca:	4649      	mov	r1, r9
 80160cc:	f886 5076 	strb.w	r5, [r6, #118]	; 0x76
 80160d0:	6823      	ldr	r3, [r4, #0]
 80160d2:	f884 b025 	strb.w	fp, [r4, #37]	; 0x25
 80160d6:	4c10      	ldr	r4, [pc, #64]	; (8016118 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>)
 80160d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80160da:	4798      	blx	r3
 80160dc:	6820      	ldr	r0, [r4, #0]
 80160de:	9b02      	ldr	r3, [sp, #8]
 80160e0:	9a00      	ldr	r2, [sp, #0]
 80160e2:	e9c0 370f 	strd	r3, r7, [r0, #60]	; 0x3c
 80160e6:	4b0d      	ldr	r3, [pc, #52]	; (801611c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>)
 80160e8:	801a      	strh	r2, [r3, #0]
 80160ea:	4b0a      	ldr	r3, [pc, #40]	; (8016114 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 80160ec:	9a01      	ldr	r2, [sp, #4]
 80160ee:	801a      	strh	r2, [r3, #0]
 80160f0:	6803      	ldr	r3, [r0, #0]
 80160f2:	6a1b      	ldr	r3, [r3, #32]
 80160f4:	4798      	blx	r3
 80160f6:	6820      	ldr	r0, [r4, #0]
 80160f8:	6803      	ldr	r3, [r0, #0]
 80160fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160fc:	4798      	blx	r3
 80160fe:	b009      	add	sp, #36	; 0x24
 8016100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016104:	ab06      	add	r3, sp, #24
 8016106:	6810      	ldr	r0, [r2, #0]
 8016108:	6851      	ldr	r1, [r2, #4]
 801610a:	c303      	stmia	r3!, {r0, r1}
 801610c:	e7b6      	b.n	801607c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xbc>
 801610e:	2000      	movs	r0, #0
 8016110:	e7cc      	b.n	80160ac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 8016112:	bf00      	nop
 8016114:	2000bc78 	.word	0x2000bc78
 8016118:	2000bc7c 	.word	0x2000bc7c
 801611c:	2000bc76 	.word	0x2000bc76

08016120 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8016120:	4b07      	ldr	r3, [pc, #28]	; (8016140 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8016122:	b510      	push	{r4, lr}
 8016124:	781b      	ldrb	r3, [r3, #0]
 8016126:	4604      	mov	r4, r0
 8016128:	b13b      	cbz	r3, 801613a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801612a:	6803      	ldr	r3, [r0, #0]
 801612c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801612e:	4798      	blx	r3
 8016130:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016132:	4283      	cmp	r3, r0
 8016134:	d101      	bne.n	801613a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8016136:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8016138:	bd10      	pop	{r4, pc}
 801613a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801613c:	e7fc      	b.n	8016138 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 801613e:	bf00      	nop
 8016140:	2000bc7a 	.word	0x2000bc7a

08016144 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8016144:	4b0b      	ldr	r3, [pc, #44]	; (8016174 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 8016146:	b510      	push	{r4, lr}
 8016148:	781b      	ldrb	r3, [r3, #0]
 801614a:	4604      	mov	r4, r0
 801614c:	b95b      	cbnz	r3, 8016166 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801614e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8016152:	2b02      	cmp	r3, #2
 8016154:	d007      	beq.n	8016166 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8016156:	6840      	ldr	r0, [r0, #4]
 8016158:	f000 fbc8 	bl	80168ec <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 801615c:	b118      	cbz	r0, 8016166 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801615e:	6862      	ldr	r2, [r4, #4]
 8016160:	7a53      	ldrb	r3, [r2, #9]
 8016162:	2b00      	cmp	r3, #0
 8016164:	d0fc      	beq.n	8016160 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8016166:	f7fd fbb3 	bl	80138d0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801616a:	4620      	mov	r0, r4
 801616c:	f7ff ffd8 	bl	8016120 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016170:	bd10      	pop	{r4, pc}
 8016172:	bf00      	nop
 8016174:	2000bc7a 	.word	0x2000bc7a

08016178 <_ZN8touchgfx3HAL10initializeEv>:
 8016178:	b510      	push	{r4, lr}
 801617a:	4604      	mov	r4, r0
 801617c:	f7fd fb84 	bl	8013888 <_ZN8touchgfx10OSWrappers10initializeEv>
 8016180:	6860      	ldr	r0, [r4, #4]
 8016182:	6803      	ldr	r3, [r0, #0]
 8016184:	68db      	ldr	r3, [r3, #12]
 8016186:	4798      	blx	r3
 8016188:	68e0      	ldr	r0, [r4, #12]
 801618a:	6803      	ldr	r3, [r0, #0]
 801618c:	689b      	ldr	r3, [r3, #8]
 801618e:	4798      	blx	r3
 8016190:	6823      	ldr	r3, [r4, #0]
 8016192:	4620      	mov	r0, r4
 8016194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016196:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801619a:	4718      	bx	r3

0801619c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 801619c:	b508      	push	{r3, lr}
 801619e:	290c      	cmp	r1, #12
 80161a0:	d817      	bhi.n	80161d2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 80161a2:	e8df f001 	tbb	[pc, r1]
 80161a6:	090b      	.short	0x090b
 80161a8:	0d0d0d07 	.word	0x0d0d0d07
 80161ac:	1414140d 	.word	0x1414140d
 80161b0:	1414      	.short	0x1414
 80161b2:	0d          	.byte	0x0d
 80161b3:	00          	.byte	0x00
 80161b4:	2020      	movs	r0, #32
 80161b6:	bd08      	pop	{r3, pc}
 80161b8:	2018      	movs	r0, #24
 80161ba:	e7fc      	b.n	80161b6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80161bc:	2010      	movs	r0, #16
 80161be:	e7fa      	b.n	80161b6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80161c0:	4b05      	ldr	r3, [pc, #20]	; (80161d8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 80161c2:	f44f 710c 	mov.w	r1, #560	; 0x230
 80161c6:	4a05      	ldr	r2, [pc, #20]	; (80161dc <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 80161c8:	4805      	ldr	r0, [pc, #20]	; (80161e0 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 80161ca:	f00e fd2d 	bl	8024c28 <__assert_func>
 80161ce:	2008      	movs	r0, #8
 80161d0:	e7f1      	b.n	80161b6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80161d2:	2000      	movs	r0, #0
 80161d4:	e7ef      	b.n	80161b6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80161d6:	bf00      	nop
 80161d8:	0802771b 	.word	0x0802771b
 80161dc:	08027ab0 	.word	0x08027ab0
 80161e0:	08027622 	.word	0x08027622

080161e4 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 80161e4:	b570      	push	{r4, r5, r6, lr}
 80161e6:	460d      	mov	r5, r1
 80161e8:	f89d 1014 	ldrb.w	r1, [sp, #20]
 80161ec:	4616      	mov	r6, r2
 80161ee:	461c      	mov	r4, r3
 80161f0:	f7ff ffd4 	bl	801619c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 80161f4:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80161f8:	10c0      	asrs	r0, r0, #3
 80161fa:	fb06 5101 	mla	r1, r6, r1, r5
 80161fe:	fb00 4001 	mla	r0, r0, r1, r4
 8016202:	bd70      	pop	{r4, r5, r6, pc}

08016204 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 8016204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016208:	b08a      	sub	sp, #40	; 0x28
 801620a:	f04f 0c00 	mov.w	ip, #0
 801620e:	4604      	mov	r4, r0
 8016210:	469a      	mov	sl, r3
 8016212:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 8016216:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 801621a:	f1b8 0f02 	cmp.w	r8, #2
 801621e:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 8016222:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8016226:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 801622a:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 801622e:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8016232:	f8cd c020 	str.w	ip, [sp, #32]
 8016236:	d030      	beq.n	801629a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 8016238:	2bff      	cmp	r3, #255	; 0xff
 801623a:	d12c      	bne.n	8016296 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 801623c:	4560      	cmp	r0, ip
 801623e:	bf14      	ite	ne
 8016240:	2004      	movne	r0, #4
 8016242:	2001      	moveq	r0, #1
 8016244:	9204      	str	r2, [sp, #16]
 8016246:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 801624a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801624e:	f8ad 201c 	strh.w	r2, [sp, #28]
 8016252:	f8ad 6018 	strh.w	r6, [sp, #24]
 8016256:	f8ad 501a 	strh.w	r5, [sp, #26]
 801625a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801625e:	4620      	mov	r0, r4
 8016260:	f7ff ff5e 	bl	8016120 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016264:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8016268:	4603      	mov	r3, r0
 801626a:	4651      	mov	r1, sl
 801626c:	4620      	mov	r0, r4
 801626e:	e9cd 9700 	strd	r9, r7, [sp]
 8016272:	f7ff ffb7 	bl	80161e4 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8016276:	f8ad 901e 	strh.w	r9, [sp, #30]
 801627a:	9005      	str	r0, [sp, #20]
 801627c:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 8016280:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 8016284:	b106      	cbz	r6, 8016288 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 8016286:	b98d      	cbnz	r5, 80162ac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 8016288:	4b12      	ldr	r3, [pc, #72]	; (80162d4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 801628a:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 801628e:	4a12      	ldr	r2, [pc, #72]	; (80162d8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8016290:	4812      	ldr	r0, [pc, #72]	; (80162dc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 8016292:	f00e fcc9 	bl	8024c28 <__assert_func>
 8016296:	2004      	movs	r0, #4
 8016298:	e7d4      	b.n	8016244 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 801629a:	2bff      	cmp	r3, #255	; 0xff
 801629c:	d104      	bne.n	80162a8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 801629e:	2800      	cmp	r0, #0
 80162a0:	bf14      	ite	ne
 80162a2:	2040      	movne	r0, #64	; 0x40
 80162a4:	2020      	moveq	r0, #32
 80162a6:	e7cd      	b.n	8016244 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 80162a8:	2040      	movs	r0, #64	; 0x40
 80162aa:	e7cb      	b.n	8016244 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 80162ac:	6823      	ldr	r3, [r4, #0]
 80162ae:	4620      	mov	r0, r4
 80162b0:	9d02      	ldr	r5, [sp, #8]
 80162b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80162b4:	4798      	blx	r3
 80162b6:	4228      	tst	r0, r5
 80162b8:	d104      	bne.n	80162c4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 80162ba:	4b09      	ldr	r3, [pc, #36]	; (80162e0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 80162bc:	f240 11b1 	movw	r1, #433	; 0x1b1
 80162c0:	4a05      	ldr	r2, [pc, #20]	; (80162d8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 80162c2:	e7e5      	b.n	8016290 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 80162c4:	6860      	ldr	r0, [r4, #4]
 80162c6:	a902      	add	r1, sp, #8
 80162c8:	6803      	ldr	r3, [r0, #0]
 80162ca:	685b      	ldr	r3, [r3, #4]
 80162cc:	4798      	blx	r3
 80162ce:	b00a      	add	sp, #40	; 0x28
 80162d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80162d4:	0802769e 	.word	0x0802769e
 80162d8:	08027952 	.word	0x08027952
 80162dc:	08027622 	.word	0x08027622
 80162e0:	080276d6 	.word	0x080276d6

080162e4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 80162e4:	b510      	push	{r4, lr}
 80162e6:	b08a      	sub	sp, #40	; 0x28
 80162e8:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 80162ec:	9408      	str	r4, [sp, #32]
 80162ee:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 80162f2:	9407      	str	r4, [sp, #28]
 80162f4:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 80162f8:	9406      	str	r4, [sp, #24]
 80162fa:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 80162fe:	9405      	str	r4, [sp, #20]
 8016300:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 8016304:	9404      	str	r4, [sp, #16]
 8016306:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 801630a:	9403      	str	r4, [sp, #12]
 801630c:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 8016310:	9402      	str	r4, [sp, #8]
 8016312:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8016316:	e9cd 3400 	strd	r3, r4, [sp]
 801631a:	4613      	mov	r3, r2
 801631c:	2200      	movs	r2, #0
 801631e:	f7ff ff71 	bl	8016204 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8016322:	b00a      	add	sp, #40	; 0x28
 8016324:	bd10      	pop	{r4, pc}
	...

08016328 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 8016328:	b5f0      	push	{r4, r5, r6, r7, lr}
 801632a:	b08b      	sub	sp, #44	; 0x2c
 801632c:	4616      	mov	r6, r2
 801632e:	460d      	mov	r5, r1
 8016330:	461f      	mov	r7, r3
 8016332:	4604      	mov	r4, r0
 8016334:	f7f9 fb98 	bl	800fa68 <_ZN8touchgfx3HAL3lcdEv>
 8016338:	6803      	ldr	r3, [r0, #0]
 801633a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801633c:	4798      	blx	r3
 801633e:	4b0e      	ldr	r3, [pc, #56]	; (8016378 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 8016340:	2200      	movs	r2, #0
 8016342:	4629      	mov	r1, r5
 8016344:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8016348:	881b      	ldrh	r3, [r3, #0]
 801634a:	4620      	mov	r0, r4
 801634c:	9306      	str	r3, [sp, #24]
 801634e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8016352:	9305      	str	r3, [sp, #20]
 8016354:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8016358:	9304      	str	r3, [sp, #16]
 801635a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801635e:	9303      	str	r3, [sp, #12]
 8016360:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8016364:	9302      	str	r3, [sp, #8]
 8016366:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801636a:	e9cd 7300 	strd	r7, r3, [sp]
 801636e:	4633      	mov	r3, r6
 8016370:	f7ff ff48 	bl	8016204 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8016374:	b00b      	add	sp, #44	; 0x2c
 8016376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016378:	2000bc76 	.word	0x2000bc76

0801637c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 801637c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016380:	461f      	mov	r7, r3
 8016382:	4b14      	ldr	r3, [pc, #80]	; (80163d4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 8016384:	b08a      	sub	sp, #40	; 0x28
 8016386:	4616      	mov	r6, r2
 8016388:	f8b3 8000 	ldrh.w	r8, [r3]
 801638c:	460d      	mov	r5, r1
 801638e:	4604      	mov	r4, r0
 8016390:	f7f9 fb6a 	bl	800fa68 <_ZN8touchgfx3HAL3lcdEv>
 8016394:	6803      	ldr	r3, [r0, #0]
 8016396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016398:	4798      	blx	r3
 801639a:	2302      	movs	r3, #2
 801639c:	9008      	str	r0, [sp, #32]
 801639e:	2200      	movs	r2, #0
 80163a0:	4629      	mov	r1, r5
 80163a2:	4620      	mov	r0, r4
 80163a4:	e9cd 8306 	strd	r8, r3, [sp, #24]
 80163a8:	2301      	movs	r3, #1
 80163aa:	9305      	str	r3, [sp, #20]
 80163ac:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80163b0:	9304      	str	r3, [sp, #16]
 80163b2:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80163b6:	9303      	str	r3, [sp, #12]
 80163b8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80163bc:	9302      	str	r3, [sp, #8]
 80163be:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80163c2:	e9cd 7300 	strd	r7, r3, [sp]
 80163c6:	4633      	mov	r3, r6
 80163c8:	f7ff ff1c 	bl	8016204 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80163cc:	b00a      	add	sp, #40	; 0x28
 80163ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80163d2:	bf00      	nop
 80163d4:	2000bc76 	.word	0x2000bc76

080163d8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 80163d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163dc:	b08b      	sub	sp, #44	; 0x2c
 80163de:	469b      	mov	fp, r3
 80163e0:	4604      	mov	r4, r0
 80163e2:	4692      	mov	sl, r2
 80163e4:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 80163e8:	2600      	movs	r6, #0
 80163ea:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 80163ee:	4689      	mov	r9, r1
 80163f0:	2fff      	cmp	r7, #255	; 0xff
 80163f2:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 80163f6:	9608      	str	r6, [sp, #32]
 80163f8:	bf14      	ite	ne
 80163fa:	2308      	movne	r3, #8
 80163fc:	2302      	moveq	r3, #2
 80163fe:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8016402:	f7ff fe8d 	bl	8016120 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016406:	465a      	mov	r2, fp
 8016408:	4603      	mov	r3, r0
 801640a:	4651      	mov	r1, sl
 801640c:	4620      	mov	r0, r4
 801640e:	e9cd 8500 	strd	r8, r5, [sp]
 8016412:	f7ff fee7 	bl	80161e4 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8016416:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801641a:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 801641e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016422:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8016426:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 801642a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801642e:	6823      	ldr	r3, [r4, #0]
 8016430:	9d02      	ldr	r5, [sp, #8]
 8016432:	9005      	str	r0, [sp, #20]
 8016434:	4620      	mov	r0, r4
 8016436:	f8ad 601c 	strh.w	r6, [sp, #28]
 801643a:	f8ad 801e 	strh.w	r8, [sp, #30]
 801643e:	f8cd 9020 	str.w	r9, [sp, #32]
 8016442:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8016446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016448:	4798      	blx	r3
 801644a:	4228      	tst	r0, r5
 801644c:	d106      	bne.n	801645c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 801644e:	4b07      	ldr	r3, [pc, #28]	; (801646c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 8016450:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8016454:	4a06      	ldr	r2, [pc, #24]	; (8016470 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 8016456:	4807      	ldr	r0, [pc, #28]	; (8016474 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 8016458:	f00e fbe6 	bl	8024c28 <__assert_func>
 801645c:	6860      	ldr	r0, [r4, #4]
 801645e:	a902      	add	r1, sp, #8
 8016460:	6803      	ldr	r3, [r0, #0]
 8016462:	685b      	ldr	r3, [r3, #4]
 8016464:	4798      	blx	r3
 8016466:	b00b      	add	sp, #44	; 0x2c
 8016468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801646c:	080276d6 	.word	0x080276d6
 8016470:	08027a1b 	.word	0x08027a1b
 8016474:	08027622 	.word	0x08027622

08016478 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8016478:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801647c:	461f      	mov	r7, r3
 801647e:	4b0b      	ldr	r3, [pc, #44]	; (80164ac <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8016480:	460d      	mov	r5, r1
 8016482:	4616      	mov	r6, r2
 8016484:	f8b3 8000 	ldrh.w	r8, [r3]
 8016488:	4604      	mov	r4, r0
 801648a:	f7f9 faed 	bl	800fa68 <_ZN8touchgfx3HAL3lcdEv>
 801648e:	6803      	ldr	r3, [r0, #0]
 8016490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016492:	4798      	blx	r3
 8016494:	463b      	mov	r3, r7
 8016496:	4632      	mov	r2, r6
 8016498:	4629      	mov	r1, r5
 801649a:	e9cd 8000 	strd	r8, r0, [sp]
 801649e:	4620      	mov	r0, r4
 80164a0:	f7ff fea0 	bl	80161e4 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80164a4:	b002      	add	sp, #8
 80164a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80164aa:	bf00      	nop
 80164ac:	2000bc76 	.word	0x2000bc76

080164b0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 80164b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80164b4:	4698      	mov	r8, r3
 80164b6:	b088      	sub	sp, #32
 80164b8:	2300      	movs	r3, #0
 80164ba:	4617      	mov	r7, r2
 80164bc:	4604      	mov	r4, r0
 80164be:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 80164c2:	9306      	str	r3, [sp, #24]
 80164c4:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80164c8:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 80164cc:	f8ad 6010 	strh.w	r6, [sp, #16]
 80164d0:	f8ad 5012 	strh.w	r5, [sp, #18]
 80164d4:	e9cd 3100 	strd	r3, r1, [sp]
 80164d8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80164dc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80164e0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80164e4:	f88d 301c 	strb.w	r3, [sp, #28]
 80164e8:	f7ff fe1a 	bl	8016120 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80164ec:	4642      	mov	r2, r8
 80164ee:	4603      	mov	r3, r0
 80164f0:	4639      	mov	r1, r7
 80164f2:	4620      	mov	r0, r4
 80164f4:	f7ff ffc0 	bl	8016478 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80164f8:	4b16      	ldr	r3, [pc, #88]	; (8016554 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 80164fa:	9003      	str	r0, [sp, #12]
 80164fc:	881b      	ldrh	r3, [r3, #0]
 80164fe:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016502:	f7f9 fab1 	bl	800fa68 <_ZN8touchgfx3HAL3lcdEv>
 8016506:	6803      	ldr	r3, [r0, #0]
 8016508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801650a:	4798      	blx	r3
 801650c:	f88d 001e 	strb.w	r0, [sp, #30]
 8016510:	f88d 001d 	strb.w	r0, [sp, #29]
 8016514:	b106      	cbz	r6, 8016518 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 8016516:	b935      	cbnz	r5, 8016526 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 8016518:	4b0f      	ldr	r3, [pc, #60]	; (8016558 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 801651a:	f240 11cd 	movw	r1, #461	; 0x1cd
 801651e:	4a0f      	ldr	r2, [pc, #60]	; (801655c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8016520:	480f      	ldr	r0, [pc, #60]	; (8016560 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 8016522:	f00e fb81 	bl	8024c28 <__assert_func>
 8016526:	6823      	ldr	r3, [r4, #0]
 8016528:	4620      	mov	r0, r4
 801652a:	9d00      	ldr	r5, [sp, #0]
 801652c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801652e:	4798      	blx	r3
 8016530:	4228      	tst	r0, r5
 8016532:	d104      	bne.n	801653e <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 8016534:	4b0b      	ldr	r3, [pc, #44]	; (8016564 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 8016536:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 801653a:	4a08      	ldr	r2, [pc, #32]	; (801655c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 801653c:	e7f0      	b.n	8016520 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 801653e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016540:	4669      	mov	r1, sp
 8016542:	6860      	ldr	r0, [r4, #4]
 8016544:	9306      	str	r3, [sp, #24]
 8016546:	6803      	ldr	r3, [r0, #0]
 8016548:	685b      	ldr	r3, [r3, #4]
 801654a:	4798      	blx	r3
 801654c:	b008      	add	sp, #32
 801654e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016552:	bf00      	nop
 8016554:	2000bc76 	.word	0x2000bc76
 8016558:	0802769e 	.word	0x0802769e
 801655c:	08027804 	.word	0x08027804
 8016560:	08027622 	.word	0x08027622
 8016564:	080276d6 	.word	0x080276d6

08016568 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8016568:	b570      	push	{r4, r5, r6, lr}
 801656a:	b08a      	sub	sp, #40	; 0x28
 801656c:	4604      	mov	r4, r0
 801656e:	466b      	mov	r3, sp
 8016570:	e883 0006 	stmia.w	r3, {r1, r2}
 8016574:	4b1f      	ldr	r3, [pc, #124]	; (80165f4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 8016576:	781b      	ldrb	r3, [r3, #0]
 8016578:	b933      	cbnz	r3, 8016588 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 801657a:	4b1f      	ldr	r3, [pc, #124]	; (80165f8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 801657c:	f240 11f9 	movw	r1, #505	; 0x1f9
 8016580:	4a1e      	ldr	r2, [pc, #120]	; (80165fc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 8016582:	481f      	ldr	r0, [pc, #124]	; (8016600 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 8016584:	f00e fb50 	bl	8024c28 <__assert_func>
 8016588:	2300      	movs	r3, #0
 801658a:	f8bd 5000 	ldrh.w	r5, [sp]
 801658e:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 8016592:	9308      	str	r3, [sp, #32]
 8016594:	2301      	movs	r3, #1
 8016596:	9302      	str	r3, [sp, #8]
 8016598:	6803      	ldr	r3, [r0, #0]
 801659a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801659c:	4798      	blx	r3
 801659e:	4632      	mov	r2, r6
 80165a0:	4629      	mov	r1, r5
 80165a2:	4603      	mov	r3, r0
 80165a4:	4620      	mov	r0, r4
 80165a6:	f7ff ff67 	bl	8016478 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80165aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80165ac:	9003      	str	r0, [sp, #12]
 80165ae:	9305      	str	r3, [sp, #20]
 80165b0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80165b4:	f8ad 3018 	strh.w	r3, [sp, #24]
 80165b8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80165bc:	f8ad 301a 	strh.w	r3, [sp, #26]
 80165c0:	4b10      	ldr	r3, [pc, #64]	; (8016604 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 80165c2:	881b      	ldrh	r3, [r3, #0]
 80165c4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80165c8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80165cc:	f7f9 fa4c 	bl	800fa68 <_ZN8touchgfx3HAL3lcdEv>
 80165d0:	6803      	ldr	r3, [r0, #0]
 80165d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80165d4:	4798      	blx	r3
 80165d6:	23ff      	movs	r3, #255	; 0xff
 80165d8:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 80165dc:	a902      	add	r1, sp, #8
 80165de:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 80165e2:	6860      	ldr	r0, [r4, #4]
 80165e4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80165e8:	6803      	ldr	r3, [r0, #0]
 80165ea:	685b      	ldr	r3, [r3, #4]
 80165ec:	4798      	blx	r3
 80165ee:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80165f0:	b00a      	add	sp, #40	; 0x28
 80165f2:	bd70      	pop	{r4, r5, r6, pc}
 80165f4:	2000bc7b 	.word	0x2000bc7b
 80165f8:	0802756f 	.word	0x0802756f
 80165fc:	080278a8 	.word	0x080278a8
 8016600:	08027622 	.word	0x08027622
 8016604:	2000bc76 	.word	0x2000bc76

08016608 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8016608:	b5f0      	push	{r4, r5, r6, r7, lr}
 801660a:	b08b      	sub	sp, #44	; 0x2c
 801660c:	4604      	mov	r4, r0
 801660e:	466d      	mov	r5, sp
 8016610:	e885 0006 	stmia.w	r5, {r1, r2}
 8016614:	461d      	mov	r5, r3
 8016616:	2300      	movs	r3, #0
 8016618:	f8bd 6000 	ldrh.w	r6, [sp]
 801661c:	9308      	str	r3, [sp, #32]
 801661e:	2301      	movs	r3, #1
 8016620:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8016624:	9302      	str	r3, [sp, #8]
 8016626:	6803      	ldr	r3, [r0, #0]
 8016628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801662a:	4798      	blx	r3
 801662c:	463a      	mov	r2, r7
 801662e:	4631      	mov	r1, r6
 8016630:	4603      	mov	r3, r0
 8016632:	4620      	mov	r0, r4
 8016634:	f7ff ff20 	bl	8016478 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8016638:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801663c:	9003      	str	r0, [sp, #12]
 801663e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016642:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8016646:	9505      	str	r5, [sp, #20]
 8016648:	f8ad 301a 	strh.w	r3, [sp, #26]
 801664c:	4b0d      	ldr	r3, [pc, #52]	; (8016684 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 801664e:	881b      	ldrh	r3, [r3, #0]
 8016650:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016654:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016656:	f8ad 301e 	strh.w	r3, [sp, #30]
 801665a:	f7f9 fa05 	bl	800fa68 <_ZN8touchgfx3HAL3lcdEv>
 801665e:	6803      	ldr	r3, [r0, #0]
 8016660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016662:	4798      	blx	r3
 8016664:	23ff      	movs	r3, #255	; 0xff
 8016666:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 801666a:	a902      	add	r1, sp, #8
 801666c:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8016670:	6860      	ldr	r0, [r4, #4]
 8016672:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8016676:	6803      	ldr	r3, [r0, #0]
 8016678:	685b      	ldr	r3, [r3, #4]
 801667a:	4798      	blx	r3
 801667c:	4628      	mov	r0, r5
 801667e:	b00b      	add	sp, #44	; 0x2c
 8016680:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016682:	bf00      	nop
 8016684:	2000bc76 	.word	0x2000bc76

08016688 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8016688:	b570      	push	{r4, r5, r6, lr}
 801668a:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 801668e:	4604      	mov	r4, r0
 8016690:	b19b      	cbz	r3, 80166ba <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8016692:	2002      	movs	r0, #2
 8016694:	f7fc fe84 	bl	80133a0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8016698:	2300      	movs	r3, #0
 801669a:	4620      	mov	r0, r4
 801669c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80166a0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 80166a4:	6823      	ldr	r3, [r4, #0]
 80166a6:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 80166aa:	f7ff fd39 	bl	8016120 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80166ae:	4601      	mov	r1, r0
 80166b0:	4620      	mov	r0, r4
 80166b2:	462b      	mov	r3, r5
 80166b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80166b8:	4718      	bx	r3
 80166ba:	bd70      	pop	{r4, r5, r6, pc}

080166bc <_ZN8touchgfx13DMA_Interface10initializeEv>:
 80166bc:	4770      	bx	lr

080166be <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 80166be:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 80166c2:	1a13      	subs	r3, r2, r0
 80166c4:	4258      	negs	r0, r3
 80166c6:	4158      	adcs	r0, r3
 80166c8:	4770      	bx	lr

080166ca <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 80166ca:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80166ce:	1a9b      	subs	r3, r3, r2
 80166d0:	2b00      	cmp	r3, #0
 80166d2:	bfdc      	itt	le
 80166d4:	6882      	ldrle	r2, [r0, #8]
 80166d6:	189b      	addle	r3, r3, r2
 80166d8:	2b01      	cmp	r3, #1
 80166da:	bfcc      	ite	gt
 80166dc:	2000      	movgt	r0, #0
 80166de:	2001      	movle	r0, #1
 80166e0:	4770      	bx	lr

080166e2 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 80166e2:	6902      	ldr	r2, [r0, #16]
 80166e4:	6840      	ldr	r0, [r0, #4]
 80166e6:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 80166ea:	4770      	bx	lr

080166ec <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 80166ec:	6803      	ldr	r3, [r0, #0]
 80166ee:	691b      	ldr	r3, [r3, #16]
 80166f0:	4718      	bx	r3

080166f2 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 80166f2:	4770      	bx	lr

080166f4 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 80166f4:	4770      	bx	lr
	...

080166f8 <_ZN8touchgfx13DMA_Interface7executeEv>:
 80166f8:	2301      	movs	r3, #1
 80166fa:	b570      	push	{r4, r5, r6, lr}
 80166fc:	7203      	strb	r3, [r0, #8]
 80166fe:	4604      	mov	r4, r0
 8016700:	6840      	ldr	r0, [r0, #4]
 8016702:	6803      	ldr	r3, [r0, #0]
 8016704:	699b      	ldr	r3, [r3, #24]
 8016706:	4798      	blx	r3
 8016708:	6803      	ldr	r3, [r0, #0]
 801670a:	4605      	mov	r5, r0
 801670c:	2b08      	cmp	r3, #8
 801670e:	d01e      	beq.n	801674e <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 8016710:	d80b      	bhi.n	801672a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8016712:	2b02      	cmp	r3, #2
 8016714:	d027      	beq.n	8016766 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 8016716:	2b04      	cmp	r3, #4
 8016718:	d011      	beq.n	801673e <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 801671a:	2b01      	cmp	r3, #1
 801671c:	d028      	beq.n	8016770 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801671e:	4b17      	ldr	r3, [pc, #92]	; (801677c <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 8016720:	218b      	movs	r1, #139	; 0x8b
 8016722:	4a17      	ldr	r2, [pc, #92]	; (8016780 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 8016724:	4817      	ldr	r0, [pc, #92]	; (8016784 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 8016726:	f00e fa7f 	bl	8024c28 <__assert_func>
 801672a:	2b40      	cmp	r3, #64	; 0x40
 801672c:	d020      	beq.n	8016770 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801672e:	d801      	bhi.n	8016734 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8016730:	2b20      	cmp	r3, #32
 8016732:	e7f3      	b.n	801671c <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8016734:	2b80      	cmp	r3, #128	; 0x80
 8016736:	d01b      	beq.n	8016770 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8016738:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801673c:	e7ee      	b.n	801671c <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 801673e:	6823      	ldr	r3, [r4, #0]
 8016740:	7f01      	ldrb	r1, [r0, #28]
 8016742:	4620      	mov	r0, r4
 8016744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016746:	4798      	blx	r3
 8016748:	6823      	ldr	r3, [r4, #0]
 801674a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801674c:	e006      	b.n	801675c <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801674e:	6823      	ldr	r3, [r4, #0]
 8016750:	7f01      	ldrb	r1, [r0, #28]
 8016752:	4620      	mov	r0, r4
 8016754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016756:	4798      	blx	r3
 8016758:	6823      	ldr	r3, [r4, #0]
 801675a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801675c:	4629      	mov	r1, r5
 801675e:	4620      	mov	r0, r4
 8016760:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016764:	4718      	bx	r3
 8016766:	6823      	ldr	r3, [r4, #0]
 8016768:	4620      	mov	r0, r4
 801676a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801676c:	4798      	blx	r3
 801676e:	e7f3      	b.n	8016758 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 8016770:	6823      	ldr	r3, [r4, #0]
 8016772:	4620      	mov	r0, r4
 8016774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016776:	4798      	blx	r3
 8016778:	e7e6      	b.n	8016748 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 801677a:	bf00      	nop
 801677c:	08027af9 	.word	0x08027af9
 8016780:	08027c08 	.word	0x08027c08
 8016784:	08027b1e 	.word	0x08027b1e

08016788 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8016788:	b570      	push	{r4, r5, r6, lr}
 801678a:	4604      	mov	r4, r0
 801678c:	460e      	mov	r6, r1
 801678e:	6860      	ldr	r0, [r4, #4]
 8016790:	6803      	ldr	r3, [r0, #0]
 8016792:	685b      	ldr	r3, [r3, #4]
 8016794:	4798      	blx	r3
 8016796:	2800      	cmp	r0, #0
 8016798:	d1f9      	bne.n	801678e <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801679a:	4d0b      	ldr	r5, [pc, #44]	; (80167c8 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 801679c:	6828      	ldr	r0, [r5, #0]
 801679e:	6803      	ldr	r3, [r0, #0]
 80167a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80167a2:	4798      	blx	r3
 80167a4:	f7fd f8b0 	bl	8013908 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 80167a8:	6860      	ldr	r0, [r4, #4]
 80167aa:	4631      	mov	r1, r6
 80167ac:	6803      	ldr	r3, [r0, #0]
 80167ae:	689b      	ldr	r3, [r3, #8]
 80167b0:	4798      	blx	r3
 80167b2:	6823      	ldr	r3, [r4, #0]
 80167b4:	4620      	mov	r0, r4
 80167b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80167b8:	4798      	blx	r3
 80167ba:	6828      	ldr	r0, [r5, #0]
 80167bc:	6803      	ldr	r3, [r0, #0]
 80167be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80167c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80167c4:	4718      	bx	r3
 80167c6:	bf00      	nop
 80167c8:	2000bc7c 	.word	0x2000bc7c

080167cc <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 80167cc:	b508      	push	{r3, lr}
 80167ce:	f7fd f87f 	bl	80138d0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80167d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80167d6:	f7fd b889 	b.w	80138ec <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080167da <_ZN8touchgfx13DMA_Interface5startEv>:
 80167da:	b510      	push	{r4, lr}
 80167dc:	4604      	mov	r4, r0
 80167de:	6840      	ldr	r0, [r0, #4]
 80167e0:	6803      	ldr	r3, [r0, #0]
 80167e2:	681b      	ldr	r3, [r3, #0]
 80167e4:	4798      	blx	r3
 80167e6:	b948      	cbnz	r0, 80167fc <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80167e8:	7a63      	ldrb	r3, [r4, #9]
 80167ea:	b13b      	cbz	r3, 80167fc <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80167ec:	7a23      	ldrb	r3, [r4, #8]
 80167ee:	b92b      	cbnz	r3, 80167fc <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80167f0:	6823      	ldr	r3, [r4, #0]
 80167f2:	4620      	mov	r0, r4
 80167f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80167f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80167fa:	4718      	bx	r3
 80167fc:	bd10      	pop	{r4, pc}
	...

08016800 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8016800:	b510      	push	{r4, lr}
 8016802:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 8016806:	1b12      	subs	r2, r2, r4
 8016808:	2a00      	cmp	r2, #0
 801680a:	bfdc      	itt	le
 801680c:	6883      	ldrle	r3, [r0, #8]
 801680e:	18d2      	addle	r2, r2, r3
 8016810:	2a01      	cmp	r2, #1
 8016812:	dd18      	ble.n	8016846 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 8016814:	6843      	ldr	r3, [r0, #4]
 8016816:	f101 021c 	add.w	r2, r1, #28
 801681a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 801681e:	f851 4b04 	ldr.w	r4, [r1], #4
 8016822:	4291      	cmp	r1, r2
 8016824:	f843 4b04 	str.w	r4, [r3], #4
 8016828:	d1f9      	bne.n	801681e <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 801682a:	880a      	ldrh	r2, [r1, #0]
 801682c:	801a      	strh	r2, [r3, #0]
 801682e:	788a      	ldrb	r2, [r1, #2]
 8016830:	709a      	strb	r2, [r3, #2]
 8016832:	68c3      	ldr	r3, [r0, #12]
 8016834:	6882      	ldr	r2, [r0, #8]
 8016836:	f3bf 8f5b 	dmb	ish
 801683a:	3301      	adds	r3, #1
 801683c:	429a      	cmp	r2, r3
 801683e:	bfd8      	it	le
 8016840:	1a9b      	suble	r3, r3, r2
 8016842:	60c3      	str	r3, [r0, #12]
 8016844:	bd10      	pop	{r4, pc}
 8016846:	4b03      	ldr	r3, [pc, #12]	; (8016854 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 8016848:	2139      	movs	r1, #57	; 0x39
 801684a:	4a03      	ldr	r2, [pc, #12]	; (8016858 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 801684c:	4803      	ldr	r0, [pc, #12]	; (801685c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 801684e:	f00e f9eb 	bl	8024c28 <__assert_func>
 8016852:	bf00      	nop
 8016854:	08027b44 	.word	0x08027b44
 8016858:	08027c38 	.word	0x08027c38
 801685c:	08027b1e 	.word	0x08027b1e

08016860 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8016860:	b510      	push	{r4, lr}
 8016862:	6803      	ldr	r3, [r0, #0]
 8016864:	4604      	mov	r4, r0
 8016866:	681b      	ldr	r3, [r3, #0]
 8016868:	4798      	blx	r3
 801686a:	b128      	cbz	r0, 8016878 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 801686c:	4b07      	ldr	r3, [pc, #28]	; (801688c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 801686e:	213f      	movs	r1, #63	; 0x3f
 8016870:	4a07      	ldr	r2, [pc, #28]	; (8016890 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 8016872:	4808      	ldr	r0, [pc, #32]	; (8016894 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 8016874:	f00e f9d8 	bl	8024c28 <__assert_func>
 8016878:	6923      	ldr	r3, [r4, #16]
 801687a:	68a2      	ldr	r2, [r4, #8]
 801687c:	f3bf 8f5b 	dmb	ish
 8016880:	3301      	adds	r3, #1
 8016882:	429a      	cmp	r2, r3
 8016884:	bfd8      	it	le
 8016886:	1a9b      	suble	r3, r3, r2
 8016888:	6123      	str	r3, [r4, #16]
 801688a:	bd10      	pop	{r4, pc}
 801688c:	08027b67 	.word	0x08027b67
 8016890:	08027c86 	.word	0x08027c86
 8016894:	08027b1e 	.word	0x08027b1e

08016898 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8016898:	b570      	push	{r4, r5, r6, lr}
 801689a:	4604      	mov	r4, r0
 801689c:	6840      	ldr	r0, [r0, #4]
 801689e:	6803      	ldr	r3, [r0, #0]
 80168a0:	681b      	ldr	r3, [r3, #0]
 80168a2:	4798      	blx	r3
 80168a4:	4605      	mov	r5, r0
 80168a6:	b930      	cbnz	r0, 80168b6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80168a8:	7a23      	ldrb	r3, [r4, #8]
 80168aa:	b123      	cbz	r3, 80168b6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80168ac:	6860      	ldr	r0, [r4, #4]
 80168ae:	6803      	ldr	r3, [r0, #0]
 80168b0:	695b      	ldr	r3, [r3, #20]
 80168b2:	4798      	blx	r3
 80168b4:	7225      	strb	r5, [r4, #8]
 80168b6:	6860      	ldr	r0, [r4, #4]
 80168b8:	6803      	ldr	r3, [r0, #0]
 80168ba:	681b      	ldr	r3, [r3, #0]
 80168bc:	4798      	blx	r3
 80168be:	b928      	cbnz	r0, 80168cc <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 80168c0:	6823      	ldr	r3, [r4, #0]
 80168c2:	4620      	mov	r0, r4
 80168c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80168c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80168ca:	4718      	bx	r3
 80168cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80168d0:	f7fd b826 	b.w	8013920 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

080168d4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 80168d4:	b510      	push	{r4, lr}
 80168d6:	6082      	str	r2, [r0, #8]
 80168d8:	2200      	movs	r2, #0
 80168da:	4c03      	ldr	r4, [pc, #12]	; (80168e8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 80168dc:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80168e0:	e9c0 4100 	strd	r4, r1, [r0]
 80168e4:	bd10      	pop	{r4, pc}
 80168e6:	bf00      	nop
 80168e8:	08027bec 	.word	0x08027bec

080168ec <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 80168ec:	6840      	ldr	r0, [r0, #4]
 80168ee:	6803      	ldr	r3, [r0, #0]
 80168f0:	681b      	ldr	r3, [r3, #0]
 80168f2:	4718      	bx	r3

080168f4 <_ZN8touchgfx21AbstractPainterRGB88810renderInitEv>:
 80168f4:	2001      	movs	r0, #1
 80168f6:	4770      	bx	lr

080168f8 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh>:
 80168f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80168fc:	460d      	mov	r5, r1
 80168fe:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8016902:	b085      	sub	sp, #20
 8016904:	4690      	mov	r8, r2
 8016906:	4411      	add	r1, r2
 8016908:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801690c:	4699      	mov	r9, r3
 801690e:	6803      	ldr	r3, [r0, #0]
 8016910:	60c1      	str	r1, [r0, #12]
 8016912:	4604      	mov	r4, r0
 8016914:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016916:	440a      	add	r2, r1
 8016918:	6102      	str	r2, [r0, #16]
 801691a:	68db      	ldr	r3, [r3, #12]
 801691c:	e9dd 670d 	ldrd	r6, r7, [sp, #52]	; 0x34
 8016920:	4798      	blx	r3
 8016922:	2800      	cmp	r0, #0
 8016924:	d039      	beq.n	801699a <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa2>
 8016926:	44c8      	add	r8, r9
 8016928:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801692c:	4445      	add	r5, r8
 801692e:	6823      	ldr	r3, [r4, #0]
 8016930:	f10d 020f 	add.w	r2, sp, #15
 8016934:	a903      	add	r1, sp, #12
 8016936:	4620      	mov	r0, r4
 8016938:	9200      	str	r2, [sp, #0]
 801693a:	f10d 020d 	add.w	r2, sp, #13
 801693e:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8016942:	f10d 030e 	add.w	r3, sp, #14
 8016946:	47c0      	blx	r8
 8016948:	b1f8      	cbz	r0, 801698a <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x92>
 801694a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 801694e:	7a20      	ldrb	r0, [r4, #8]
 8016950:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8016954:	4358      	muls	r0, r3
 8016956:	f89d 100e 	ldrb.w	r1, [sp, #14]
 801695a:	1c43      	adds	r3, r0, #1
 801695c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8016960:	f817 0b01 	ldrb.w	r0, [r7], #1
 8016964:	121b      	asrs	r3, r3, #8
 8016966:	fb10 f003 	smulbb	r0, r0, r3
 801696a:	b283      	uxth	r3, r0
 801696c:	1c58      	adds	r0, r3, #1
 801696e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8016972:	6823      	ldr	r3, [r4, #0]
 8016974:	1200      	asrs	r0, r0, #8
 8016976:	f8d3 8014 	ldr.w	r8, [r3, #20]
 801697a:	f89d 300d 	ldrb.w	r3, [sp, #13]
 801697e:	28ff      	cmp	r0, #255	; 0xff
 8016980:	d10e      	bne.n	80169a0 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa8>
 8016982:	9100      	str	r1, [sp, #0]
 8016984:	4629      	mov	r1, r5
 8016986:	4620      	mov	r0, r4
 8016988:	47c0      	blx	r8
 801698a:	68e3      	ldr	r3, [r4, #12]
 801698c:	3e01      	subs	r6, #1
 801698e:	f105 0503 	add.w	r5, r5, #3
 8016992:	f103 0301 	add.w	r3, r3, #1
 8016996:	60e3      	str	r3, [r4, #12]
 8016998:	d1c9      	bne.n	801692e <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x36>
 801699a:	b005      	add	sp, #20
 801699c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80169a0:	fa1f fc80 	uxth.w	ip, r0
 80169a4:	43c0      	mvns	r0, r0
 80169a6:	f895 e002 	ldrb.w	lr, [r5, #2]
 80169aa:	fb12 f20c 	smulbb	r2, r2, ip
 80169ae:	b2c0      	uxtb	r0, r0
 80169b0:	fb13 f30c 	smulbb	r3, r3, ip
 80169b4:	fb0e 2200 	mla	r2, lr, r0, r2
 80169b8:	f895 e001 	ldrb.w	lr, [r5, #1]
 80169bc:	fb11 f10c 	smulbb	r1, r1, ip
 80169c0:	fb0e 3300 	mla	r3, lr, r0, r3
 80169c4:	f895 e000 	ldrb.w	lr, [r5]
 80169c8:	b292      	uxth	r2, r2
 80169ca:	b29b      	uxth	r3, r3
 80169cc:	fb0e 1000 	mla	r0, lr, r0, r1
 80169d0:	1c59      	adds	r1, r3, #1
 80169d2:	b280      	uxth	r0, r0
 80169d4:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80169d8:	1c51      	adds	r1, r2, #1
 80169da:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80169de:	1c41      	adds	r1, r0, #1
 80169e0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80169e4:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80169e8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80169ec:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80169f0:	9000      	str	r0, [sp, #0]
 80169f2:	e7c7      	b.n	8016984 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x8c>

080169f4 <_ZN8touchgfx21AbstractPainterRGB88811renderPixelEPthhh>:
 80169f4:	f89d 0000 	ldrb.w	r0, [sp]
 80169f8:	704b      	strb	r3, [r1, #1]
 80169fa:	7008      	strb	r0, [r1, #0]
 80169fc:	708a      	strb	r2, [r1, #2]
 80169fe:	4770      	bx	lr

08016a00 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh>:
 8016a00:	4413      	add	r3, r2
 8016a02:	7dc2      	ldrb	r2, [r0, #23]
 8016a04:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016a08:	4419      	add	r1, r3
 8016a0a:	7a03      	ldrb	r3, [r0, #8]
 8016a0c:	435a      	muls	r2, r3
 8016a0e:	1c53      	adds	r3, r2, #1
 8016a10:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8016a14:	121b      	asrs	r3, r3, #8
 8016a16:	2bff      	cmp	r3, #255	; 0xff
 8016a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016a1a:	e9dd 7406 	ldrd	r7, r4, [sp, #24]
 8016a1e:	d13e      	bne.n	8016a9e <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x9e>
 8016a20:	4427      	add	r7, r4
 8016a22:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016a26:	3103      	adds	r1, #3
 8016a28:	7d86      	ldrb	r6, [r0, #22]
 8016a2a:	2bff      	cmp	r3, #255	; 0xff
 8016a2c:	d10a      	bne.n	8016a44 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x44>
 8016a2e:	f801 6c03 	strb.w	r6, [r1, #-3]
 8016a32:	7d43      	ldrb	r3, [r0, #21]
 8016a34:	f801 3c02 	strb.w	r3, [r1, #-2]
 8016a38:	7d03      	ldrb	r3, [r0, #20]
 8016a3a:	f801 3c01 	strb.w	r3, [r1, #-1]
 8016a3e:	42a7      	cmp	r7, r4
 8016a40:	d1ef      	bne.n	8016a22 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x22>
 8016a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016a44:	b29a      	uxth	r2, r3
 8016a46:	43db      	mvns	r3, r3
 8016a48:	f811 5c03 	ldrb.w	r5, [r1, #-3]
 8016a4c:	fb16 f602 	smulbb	r6, r6, r2
 8016a50:	b2db      	uxtb	r3, r3
 8016a52:	fb05 6503 	mla	r5, r5, r3, r6
 8016a56:	b2ad      	uxth	r5, r5
 8016a58:	1c6e      	adds	r6, r5, #1
 8016a5a:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8016a5e:	f811 6c02 	ldrb.w	r6, [r1, #-2]
 8016a62:	fb16 f603 	smulbb	r6, r6, r3
 8016a66:	122d      	asrs	r5, r5, #8
 8016a68:	f801 5c03 	strb.w	r5, [r1, #-3]
 8016a6c:	7d45      	ldrb	r5, [r0, #21]
 8016a6e:	fb05 6502 	mla	r5, r5, r2, r6
 8016a72:	b2ad      	uxth	r5, r5
 8016a74:	1c6e      	adds	r6, r5, #1
 8016a76:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8016a7a:	122d      	asrs	r5, r5, #8
 8016a7c:	f801 5c02 	strb.w	r5, [r1, #-2]
 8016a80:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8016a84:	7d06      	ldrb	r6, [r0, #20]
 8016a86:	fb15 f303 	smulbb	r3, r5, r3
 8016a8a:	fb06 3202 	mla	r2, r6, r2, r3
 8016a8e:	b292      	uxth	r2, r2
 8016a90:	1c53      	adds	r3, r2, #1
 8016a92:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8016a96:	1212      	asrs	r2, r2, #8
 8016a98:	f801 2c01 	strb.w	r2, [r1, #-1]
 8016a9c:	e7cf      	b.n	8016a3e <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3e>
 8016a9e:	b2de      	uxtb	r6, r3
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	d0ce      	beq.n	8016a42 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>
 8016aa4:	3103      	adds	r1, #3
 8016aa6:	4427      	add	r7, r4
 8016aa8:	f814 2b01 	ldrb.w	r2, [r4], #1
 8016aac:	3103      	adds	r1, #3
 8016aae:	f811 cc06 	ldrb.w	ip, [r1, #-6]
 8016ab2:	fb02 f306 	mul.w	r3, r2, r6
 8016ab6:	42bc      	cmp	r4, r7
 8016ab8:	f103 0201 	add.w	r2, r3, #1
 8016abc:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8016ac0:	ea4f 2222 	mov.w	r2, r2, asr #8
 8016ac4:	b295      	uxth	r5, r2
 8016ac6:	ea6f 0202 	mvn.w	r2, r2
 8016aca:	b2d3      	uxtb	r3, r2
 8016acc:	7d82      	ldrb	r2, [r0, #22]
 8016ace:	fb1c fc03 	smulbb	ip, ip, r3
 8016ad2:	fb02 c205 	mla	r2, r2, r5, ip
 8016ad6:	b292      	uxth	r2, r2
 8016ad8:	f102 0c01 	add.w	ip, r2, #1
 8016adc:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8016ae0:	f811 cc05 	ldrb.w	ip, [r1, #-5]
 8016ae4:	fb1c fc03 	smulbb	ip, ip, r3
 8016ae8:	ea4f 2222 	mov.w	r2, r2, asr #8
 8016aec:	f801 2c06 	strb.w	r2, [r1, #-6]
 8016af0:	7d42      	ldrb	r2, [r0, #21]
 8016af2:	fb02 c205 	mla	r2, r2, r5, ip
 8016af6:	b292      	uxth	r2, r2
 8016af8:	f102 0c01 	add.w	ip, r2, #1
 8016afc:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8016b00:	ea4f 2222 	mov.w	r2, r2, asr #8
 8016b04:	f801 2c05 	strb.w	r2, [r1, #-5]
 8016b08:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 8016b0c:	f890 c014 	ldrb.w	ip, [r0, #20]
 8016b10:	fb12 f303 	smulbb	r3, r2, r3
 8016b14:	fb0c 3305 	mla	r3, ip, r5, r3
 8016b18:	b29b      	uxth	r3, r3
 8016b1a:	f103 0201 	add.w	r2, r3, #1
 8016b1e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8016b22:	ea4f 2323 	mov.w	r3, r3, asr #8
 8016b26:	f801 3c04 	strb.w	r3, [r1, #-4]
 8016b2a:	d1bd      	bne.n	8016aa8 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0xa8>
 8016b2c:	e789      	b.n	8016a42 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>

08016b2e <_ZN8touchgfx13PainterRGB88810renderNextERhS1_S1_S1_>:
 8016b2e:	b510      	push	{r4, lr}
 8016b30:	7d04      	ldrb	r4, [r0, #20]
 8016b32:	700c      	strb	r4, [r1, #0]
 8016b34:	7d41      	ldrb	r1, [r0, #21]
 8016b36:	7011      	strb	r1, [r2, #0]
 8016b38:	7d82      	ldrb	r2, [r0, #22]
 8016b3a:	701a      	strb	r2, [r3, #0]
 8016b3c:	9b02      	ldr	r3, [sp, #8]
 8016b3e:	7dc2      	ldrb	r2, [r0, #23]
 8016b40:	2001      	movs	r0, #1
 8016b42:	701a      	strb	r2, [r3, #0]
 8016b44:	bd10      	pop	{r4, pc}

08016b46 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>:
 8016b46:	b570      	push	{r4, r5, r6, lr}
 8016b48:	4616      	mov	r6, r2
 8016b4a:	4604      	mov	r4, r0
 8016b4c:	460d      	mov	r5, r1
 8016b4e:	f7f8 ff8b 	bl	800fa68 <_ZN8touchgfx3HAL3lcdEv>
 8016b52:	6803      	ldr	r3, [r0, #0]
 8016b54:	4629      	mov	r1, r5
 8016b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016b58:	4798      	blx	r3
 8016b5a:	7520      	strb	r0, [r4, #20]
 8016b5c:	f7f8 ff84 	bl	800fa68 <_ZN8touchgfx3HAL3lcdEv>
 8016b60:	6803      	ldr	r3, [r0, #0]
 8016b62:	4629      	mov	r1, r5
 8016b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016b66:	4798      	blx	r3
 8016b68:	7560      	strb	r0, [r4, #21]
 8016b6a:	f7f8 ff7d 	bl	800fa68 <_ZN8touchgfx3HAL3lcdEv>
 8016b6e:	6803      	ldr	r3, [r0, #0]
 8016b70:	4629      	mov	r1, r5
 8016b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016b74:	4798      	blx	r3
 8016b76:	75e6      	strb	r6, [r4, #23]
 8016b78:	75a0      	strb	r0, [r4, #22]
 8016b7a:	bd70      	pop	{r4, r5, r6, pc}

08016b7c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>:
 8016b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b7e:	460e      	mov	r6, r1
 8016b80:	4617      	mov	r7, r2
 8016b82:	4604      	mov	r4, r0
 8016b84:	f000 f832 	bl	8016bec <_ZN8touchgfx15AbstractPainterC1Ev>
 8016b88:	4b12      	ldr	r3, [pc, #72]	; (8016bd4 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x58>)
 8016b8a:	6023      	str	r3, [r4, #0]
 8016b8c:	f7f8 ff6c 	bl	800fa68 <_ZN8touchgfx3HAL3lcdEv>
 8016b90:	6803      	ldr	r3, [r0, #0]
 8016b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b94:	4798      	blx	r3
 8016b96:	1e43      	subs	r3, r0, #1
 8016b98:	425d      	negs	r5, r3
 8016b9a:	415d      	adcs	r5, r3
 8016b9c:	4b0e      	ldr	r3, [pc, #56]	; (8016bd8 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x5c>)
 8016b9e:	681b      	ldr	r3, [r3, #0]
 8016ba0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8016ba2:	b130      	cbz	r0, 8016bb2 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x36>
 8016ba4:	6803      	ldr	r3, [r0, #0]
 8016ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ba8:	4798      	blx	r3
 8016baa:	2801      	cmp	r0, #1
 8016bac:	bf08      	it	eq
 8016bae:	f045 0501 	orreq.w	r5, r5, #1
 8016bb2:	b92d      	cbnz	r5, 8016bc0 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x44>
 8016bb4:	4b09      	ldr	r3, [pc, #36]	; (8016bdc <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x60>)
 8016bb6:	2129      	movs	r1, #41	; 0x29
 8016bb8:	4a09      	ldr	r2, [pc, #36]	; (8016be0 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x64>)
 8016bba:	480a      	ldr	r0, [pc, #40]	; (8016be4 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x68>)
 8016bbc:	f00e f834 	bl	8024c28 <__assert_func>
 8016bc0:	4b09      	ldr	r3, [pc, #36]	; (8016be8 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x6c>)
 8016bc2:	4620      	mov	r0, r4
 8016bc4:	463a      	mov	r2, r7
 8016bc6:	4631      	mov	r1, r6
 8016bc8:	6023      	str	r3, [r4, #0]
 8016bca:	f7ff ffbc 	bl	8016b46 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
 8016bce:	4620      	mov	r0, r4
 8016bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016bd2:	bf00      	nop
 8016bd4:	08027cc0 	.word	0x08027cc0
 8016bd8:	2000bc7c 	.word	0x2000bc7c
 8016bdc:	08027cd8 	.word	0x08027cd8
 8016be0:	08027d9c 	.word	0x08027d9c
 8016be4:	08027d36 	.word	0x08027d36
 8016be8:	08027d84 	.word	0x08027d84

08016bec <_ZN8touchgfx15AbstractPainterC1Ev>:
 8016bec:	4a03      	ldr	r2, [pc, #12]	; (8016bfc <_ZN8touchgfx15AbstractPainterC1Ev+0x10>)
 8016bee:	6002      	str	r2, [r0, #0]
 8016bf0:	2200      	movs	r2, #0
 8016bf2:	6042      	str	r2, [r0, #4]
 8016bf4:	22ff      	movs	r2, #255	; 0xff
 8016bf6:	7202      	strb	r2, [r0, #8]
 8016bf8:	4770      	bx	lr
 8016bfa:	bf00      	nop
 8016bfc:	08027de0 	.word	0x08027de0

08016c00 <_ZN8touchgfx15AbstractPainterD1Ev>:
 8016c00:	4770      	bx	lr

08016c02 <_ZN8touchgfx15AbstractPainter9setOffsetEtt>:
 8016c02:	8081      	strh	r1, [r0, #4]
 8016c04:	80c2      	strh	r2, [r0, #6]
 8016c06:	4770      	bx	lr

08016c08 <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>:
 8016c08:	7201      	strb	r1, [r0, #8]
 8016c0a:	4770      	bx	lr

08016c0c <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
 8016c0c:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
 8016c10:	4770      	bx	lr

08016c12 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
 8016c12:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 8016c16:	4770      	bx	lr

08016c18 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 8016c18:	6281      	str	r1, [r0, #40]	; 0x28
 8016c1a:	4770      	bx	lr

08016c1c <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8016c1c:	b513      	push	{r0, r1, r4, lr}
 8016c1e:	6803      	ldr	r3, [r0, #0]
 8016c20:	4604      	mov	r4, r0
 8016c22:	4601      	mov	r1, r0
 8016c24:	4668      	mov	r0, sp
 8016c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016c28:	4798      	blx	r3
 8016c2a:	6823      	ldr	r3, [r4, #0]
 8016c2c:	4669      	mov	r1, sp
 8016c2e:	4620      	mov	r0, r4
 8016c30:	691b      	ldr	r3, [r3, #16]
 8016c32:	4798      	blx	r3
 8016c34:	b002      	add	sp, #8
 8016c36:	bd10      	pop	{r4, pc}

08016c38 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 8016c38:	b510      	push	{r4, lr}
 8016c3a:	2200      	movs	r2, #0
 8016c3c:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8016c40:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8016c44:	8002      	strh	r2, [r0, #0]
 8016c46:	8042      	strh	r2, [r0, #2]
 8016c48:	8084      	strh	r4, [r0, #4]
 8016c4a:	80c1      	strh	r1, [r0, #6]
 8016c4c:	bd10      	pop	{r4, pc}

08016c4e <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 8016c4e:	2200      	movs	r2, #0
 8016c50:	8002      	strh	r2, [r0, #0]
 8016c52:	8042      	strh	r2, [r0, #2]
 8016c54:	8082      	strh	r2, [r0, #4]
 8016c56:	80c2      	strh	r2, [r0, #6]
 8016c58:	4770      	bx	lr
	...

08016c5c <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 8016c5c:	b508      	push	{r3, lr}
 8016c5e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8016c60:	b928      	cbnz	r0, 8016c6e <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 8016c62:	4b03      	ldr	r3, [pc, #12]	; (8016c70 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 8016c64:	2127      	movs	r1, #39	; 0x27
 8016c66:	4a03      	ldr	r2, [pc, #12]	; (8016c74 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 8016c68:	4803      	ldr	r0, [pc, #12]	; (8016c78 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 8016c6a:	f00d ffdd 	bl	8024c28 <__assert_func>
 8016c6e:	bd08      	pop	{r3, pc}
 8016c70:	08027dec 	.word	0x08027dec
 8016c74:	08027ed0 	.word	0x08027ed0
 8016c78:	08027e13 	.word	0x08027e13

08016c7c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8016c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c80:	b089      	sub	sp, #36	; 0x24
 8016c82:	4604      	mov	r4, r0
 8016c84:	6808      	ldr	r0, [r1, #0]
 8016c86:	f04f 0a00 	mov.w	sl, #0
 8016c8a:	6849      	ldr	r1, [r1, #4]
 8016c8c:	ab02      	add	r3, sp, #8
 8016c8e:	f04f 0b01 	mov.w	fp, #1
 8016c92:	c303      	stmia	r3!, {r0, r1}
 8016c94:	4b3f      	ldr	r3, [pc, #252]	; (8016d94 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x118>)
 8016c96:	4621      	mov	r1, r4
 8016c98:	a804      	add	r0, sp, #16
 8016c9a:	781b      	ldrb	r3, [r3, #0]
 8016c9c:	2b01      	cmp	r3, #1
 8016c9e:	6823      	ldr	r3, [r4, #0]
 8016ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016ca2:	bf1f      	itttt	ne
 8016ca4:	f10d 0906 	addne.w	r9, sp, #6
 8016ca8:	ae03      	addne	r6, sp, #12
 8016caa:	f10d 050e 	addne.w	r5, sp, #14
 8016cae:	f10d 080a 	addne.w	r8, sp, #10
 8016cb2:	bf01      	itttt	eq
 8016cb4:	f10d 090e 	addeq.w	r9, sp, #14
 8016cb8:	f10d 0606 	addeq.w	r6, sp, #6
 8016cbc:	ad03      	addeq	r5, sp, #12
 8016cbe:	f10d 0808 	addeq.w	r8, sp, #8
 8016cc2:	4798      	blx	r3
 8016cc4:	f9b5 3000 	ldrsh.w	r3, [r5]
 8016cc8:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8016ccc:	2b00      	cmp	r3, #0
 8016cce:	d056      	beq.n	8016d7e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x102>
 8016cd0:	4293      	cmp	r3, r2
 8016cd2:	bfa8      	it	ge
 8016cd4:	4613      	movge	r3, r2
 8016cd6:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016cda:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 8016cde:	2f00      	cmp	r7, #0
 8016ce0:	dd34      	ble.n	8016d4c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd0>
 8016ce2:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8016ce6:	f8bd c014 	ldrh.w	ip, [sp, #20]
 8016cea:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8016cee:	4484      	add	ip, r0
 8016cf0:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8016cf4:	f9b6 e000 	ldrsh.w	lr, [r6]
 8016cf8:	fa0f fc8c 	sxth.w	ip, ip
 8016cfc:	f9b9 1000 	ldrsh.w	r1, [r9]
 8016d00:	f8ad 2018 	strh.w	r2, [sp, #24]
 8016d04:	4562      	cmp	r2, ip
 8016d06:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016d0a:	f8ad e01c 	strh.w	lr, [sp, #28]
 8016d0e:	f8ad 101e 	strh.w	r1, [sp, #30]
 8016d12:	da29      	bge.n	8016d68 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016d14:	4472      	add	r2, lr
 8016d16:	b212      	sxth	r2, r2
 8016d18:	4290      	cmp	r0, r2
 8016d1a:	da25      	bge.n	8016d68 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016d1c:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8016d20:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8016d24:	4402      	add	r2, r0
 8016d26:	b212      	sxth	r2, r2
 8016d28:	4293      	cmp	r3, r2
 8016d2a:	da1d      	bge.n	8016d68 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016d2c:	440b      	add	r3, r1
 8016d2e:	b21b      	sxth	r3, r3
 8016d30:	4298      	cmp	r0, r3
 8016d32:	da19      	bge.n	8016d68 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016d34:	6823      	ldr	r3, [r4, #0]
 8016d36:	a906      	add	r1, sp, #24
 8016d38:	4620      	mov	r0, r4
 8016d3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016d3c:	4798      	blx	r3
 8016d3e:	b998      	cbnz	r0, 8016d68 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016d40:	107f      	asrs	r7, r7, #1
 8016d42:	f04f 0a01 	mov.w	sl, #1
 8016d46:	f8ad 7006 	strh.w	r7, [sp, #6]
 8016d4a:	e7c6      	b.n	8016cda <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8016d4c:	d10c      	bne.n	8016d68 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016d4e:	f8ad b006 	strh.w	fp, [sp, #6]
 8016d52:	f8b8 2000 	ldrh.w	r2, [r8]
 8016d56:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8016d5a:	440a      	add	r2, r1
 8016d5c:	f8a8 2000 	strh.w	r2, [r8]
 8016d60:	882b      	ldrh	r3, [r5, #0]
 8016d62:	1a5b      	subs	r3, r3, r1
 8016d64:	802b      	strh	r3, [r5, #0]
 8016d66:	e7ad      	b.n	8016cc4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8016d68:	f1ba 0f00 	cmp.w	sl, #0
 8016d6c:	d0f1      	beq.n	8016d52 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 8016d6e:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8016d72:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8016d76:	429a      	cmp	r2, r3
 8016d78:	bf08      	it	eq
 8016d7a:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 8016d7c:	e7e9      	b.n	8016d52 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 8016d7e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8016d82:	429a      	cmp	r2, r3
 8016d84:	bf04      	itt	eq
 8016d86:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 8016d8a:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 8016d8c:	b009      	add	sp, #36	; 0x24
 8016d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d92:	bf00      	nop
 8016d94:	2000bc74 	.word	0x2000bc74

08016d98 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8016d98:	2200      	movs	r2, #0
 8016d9a:	2101      	movs	r1, #1
 8016d9c:	8082      	strh	r2, [r0, #4]
 8016d9e:	80c2      	strh	r2, [r0, #6]
 8016da0:	8102      	strh	r2, [r0, #8]
 8016da2:	8142      	strh	r2, [r0, #10]
 8016da4:	8182      	strh	r2, [r0, #12]
 8016da6:	81c2      	strh	r2, [r0, #14]
 8016da8:	8202      	strh	r2, [r0, #16]
 8016daa:	8242      	strh	r2, [r0, #18]
 8016dac:	61c2      	str	r2, [r0, #28]
 8016dae:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8016db2:	6282      	str	r2, [r0, #40]	; 0x28
 8016db4:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8016db8:	4905      	ldr	r1, [pc, #20]	; (8016dd0 <_ZN8touchgfx12CanvasWidgetC1Ev+0x38>)
 8016dba:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8016dbe:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8016dc2:	6001      	str	r1, [r0, #0]
 8016dc4:	8582      	strh	r2, [r0, #44]	; 0x2c
 8016dc6:	22ff      	movs	r2, #255	; 0xff
 8016dc8:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 8016dcc:	4770      	bx	lr
 8016dce:	bf00      	nop
 8016dd0:	08027e58 	.word	0x08027e58

08016dd4 <_ZN8touchgfx12CanvasWidgetD1Ev>:
 8016dd4:	4770      	bx	lr

08016dd6 <_ZNK8touchgfx4Line14getMinimalRectEv>:
 8016dd6:	f101 0368 	add.w	r3, r1, #104	; 0x68
 8016dda:	4602      	mov	r2, r0
 8016ddc:	cb03      	ldmia	r3!, {r0, r1}
 8016dde:	6010      	str	r0, [r2, #0]
 8016de0:	4610      	mov	r0, r2
 8016de2:	6051      	str	r1, [r2, #4]
 8016de4:	4770      	bx	lr

08016de6 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8016de6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016dea:	f9b1 5004 	ldrsh.w	r5, [r1, #4]
 8016dee:	b395      	cbz	r5, 8016e56 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 8016df0:	f9b1 c006 	ldrsh.w	ip, [r1, #6]
 8016df4:	f1bc 0f00 	cmp.w	ip, #0
 8016df8:	d02d      	beq.n	8016e56 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 8016dfa:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8016dfe:	f9b1 e000 	ldrsh.w	lr, [r1]
 8016e02:	b354      	cbz	r4, 8016e5a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x74>
 8016e04:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 8016e08:	b33f      	cbz	r7, 8016e5a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x74>
 8016e0a:	f9b0 8000 	ldrsh.w	r8, [r0]
 8016e0e:	4475      	add	r5, lr
 8016e10:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8016e14:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8016e18:	45f0      	cmp	r8, lr
 8016e1a:	4646      	mov	r6, r8
 8016e1c:	4444      	add	r4, r8
 8016e1e:	bfa8      	it	ge
 8016e20:	4676      	movge	r6, lr
 8016e22:	4293      	cmp	r3, r2
 8016e24:	4619      	mov	r1, r3
 8016e26:	443b      	add	r3, r7
 8016e28:	bfa8      	it	ge
 8016e2a:	4611      	movge	r1, r2
 8016e2c:	4462      	add	r2, ip
 8016e2e:	b22d      	sxth	r5, r5
 8016e30:	8006      	strh	r6, [r0, #0]
 8016e32:	b224      	sxth	r4, r4
 8016e34:	8041      	strh	r1, [r0, #2]
 8016e36:	b212      	sxth	r2, r2
 8016e38:	b21b      	sxth	r3, r3
 8016e3a:	42a5      	cmp	r5, r4
 8016e3c:	bfac      	ite	ge
 8016e3e:	ebc6 0405 	rsbge	r4, r6, r5
 8016e42:	ebc6 0404 	rsblt	r4, r6, r4
 8016e46:	429a      	cmp	r2, r3
 8016e48:	bfac      	ite	ge
 8016e4a:	ebc1 0302 	rsbge	r3, r1, r2
 8016e4e:	ebc1 0303 	rsblt	r3, r1, r3
 8016e52:	8084      	strh	r4, [r0, #4]
 8016e54:	80c3      	strh	r3, [r0, #6]
 8016e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e5a:	f8a0 e000 	strh.w	lr, [r0]
 8016e5e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8016e62:	8043      	strh	r3, [r0, #2]
 8016e64:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8016e68:	8083      	strh	r3, [r0, #4]
 8016e6a:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8016e6e:	e7f1      	b.n	8016e54 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x6e>

08016e70 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 8016e70:	b507      	push	{r0, r1, r2, lr}
 8016e72:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8016e76:	ab01      	add	r3, sp, #4
 8016e78:	6809      	ldr	r1, [r1, #0]
 8016e7a:	6800      	ldr	r0, [r0, #0]
 8016e7c:	f002 fc4f 	bl	801971e <_ZN8touchgfx6muldivElllRl>
 8016e80:	b003      	add	sp, #12
 8016e82:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08016e88 <_ZN8touchgfx7CWRUtil4sineEi>:
 8016e88:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8016e8c:	fb90 f3f2 	sdiv	r3, r0, r2
 8016e90:	fb03 0312 	mls	r3, r3, r2, r0
 8016e94:	4413      	add	r3, r2
 8016e96:	fb93 f0f2 	sdiv	r0, r3, r2
 8016e9a:	fb02 3010 	mls	r0, r2, r0, r3
 8016e9e:	4b0a      	ldr	r3, [pc, #40]	; (8016ec8 <_ZN8touchgfx7CWRUtil4sineEi+0x40>)
 8016ea0:	285a      	cmp	r0, #90	; 0x5a
 8016ea2:	dc02      	bgt.n	8016eaa <_ZN8touchgfx7CWRUtil4sineEi+0x22>
 8016ea4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8016ea8:	4770      	bx	lr
 8016eaa:	28b4      	cmp	r0, #180	; 0xb4
 8016eac:	dc02      	bgt.n	8016eb4 <_ZN8touchgfx7CWRUtil4sineEi+0x2c>
 8016eae:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 8016eb2:	e7f7      	b.n	8016ea4 <_ZN8touchgfx7CWRUtil4sineEi+0x1c>
 8016eb4:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 8016eb8:	bfd4      	ite	le
 8016eba:	38b4      	suble	r0, #180	; 0xb4
 8016ebc:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 8016ec0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8016ec4:	4240      	negs	r0, r0
 8016ec6:	4770      	bx	lr
 8016ec8:	08027f7a 	.word	0x08027f7a

08016ecc <_ZN8touchgfx7CWRUtil5isqrtEm>:
 8016ecc:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8016ed0:	f04f 0300 	mov.w	r3, #0
 8016ed4:	bf2c      	ite	cs
 8016ed6:	f04f 4280 	movcs.w	r2, #1073741824	; 0x40000000
 8016eda:	f44f 4280 	movcc.w	r2, #16384	; 0x4000
 8016ede:	1899      	adds	r1, r3, r2
 8016ee0:	4288      	cmp	r0, r1
 8016ee2:	bf24      	itt	cs
 8016ee4:	1853      	addcs	r3, r2, r1
 8016ee6:	1a40      	subcs	r0, r0, r1
 8016ee8:	0892      	lsrs	r2, r2, #2
 8016eea:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8016eee:	d1f6      	bne.n	8016ede <_ZN8touchgfx7CWRUtil5isqrtEm+0x12>
 8016ef0:	4618      	mov	r0, r3
 8016ef2:	4770      	bx	lr

08016ef4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>:
 8016ef4:	2800      	cmp	r0, #0
 8016ef6:	b508      	push	{r3, lr}
 8016ef8:	da05      	bge.n	8016f06 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x12>
 8016efa:	4240      	negs	r0, r0
 8016efc:	f7ff fffa 	bl	8016ef4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8016f00:	4240      	negs	r0, r0
 8016f02:	b240      	sxtb	r0, r0
 8016f04:	bd08      	pop	{r3, pc}
 8016f06:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8016f0a:	dc11      	bgt.n	8016f30 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x3c>
 8016f0c:	f5b0 7f35 	cmp.w	r0, #724	; 0x2d4
 8016f10:	dd09      	ble.n	8016f26 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x32>
 8016f12:	4340      	muls	r0, r0
 8016f14:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
 8016f18:	f7ff ffd8 	bl	8016ecc <_ZN8touchgfx7CWRUtil5isqrtEm>
 8016f1c:	f7ff ffea 	bl	8016ef4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8016f20:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8016f24:	e7ed      	b.n	8016f02 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0xe>
 8016f26:	3003      	adds	r0, #3
 8016f28:	4b02      	ldr	r3, [pc, #8]	; (8016f34 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x40>)
 8016f2a:	10c0      	asrs	r0, r0, #3
 8016f2c:	5618      	ldrsb	r0, [r3, r0]
 8016f2e:	e7e9      	b.n	8016f04 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8016f30:	2000      	movs	r0, #0
 8016f32:	e7e7      	b.n	8016f04 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8016f34:	08027f1e 	.word	0x08027f1e

08016f38 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>:
 8016f38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016f3a:	460c      	mov	r4, r1
 8016f3c:	1e01      	subs	r1, r0, #0
 8016f3e:	4615      	mov	r5, r2
 8016f40:	db01      	blt.n	8016f46 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0xe>
 8016f42:	2c00      	cmp	r4, #0
 8016f44:	da06      	bge.n	8016f54 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x1c>
 8016f46:	4b11      	ldr	r3, [pc, #68]	; (8016f8c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x54>)
 8016f48:	f240 3197 	movw	r1, #919	; 0x397
 8016f4c:	4a10      	ldr	r2, [pc, #64]	; (8016f90 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x58>)
 8016f4e:	4811      	ldr	r0, [pc, #68]	; (8016f94 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x5c>)
 8016f50:	f00d fe6a 	bl	8024c28 <__assert_func>
 8016f54:	428c      	cmp	r4, r1
 8016f56:	dd06      	ble.n	8016f66 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2e>
 8016f58:	4620      	mov	r0, r4
 8016f5a:	f7ff ffed 	bl	8016f38 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8016f5e:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8016f62:	b003      	add	sp, #12
 8016f64:	bd30      	pop	{r4, r5, pc}
 8016f66:	4349      	muls	r1, r1
 8016f68:	fb04 1004 	mla	r0, r4, r4, r1
 8016f6c:	f7ff ffae 	bl	8016ecc <_ZN8touchgfx7CWRUtil5isqrtEm>
 8016f70:	6028      	str	r0, [r5, #0]
 8016f72:	2800      	cmp	r0, #0
 8016f74:	d0f5      	beq.n	8016f62 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2a>
 8016f76:	4602      	mov	r2, r0
 8016f78:	ab01      	add	r3, sp, #4
 8016f7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8016f7e:	4620      	mov	r0, r4
 8016f80:	f002 fbcd 	bl	801971e <_ZN8touchgfx6muldivElllRl>
 8016f84:	f7ff ffb6 	bl	8016ef4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8016f88:	e7eb      	b.n	8016f62 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2a>
 8016f8a:	bf00      	nop
 8016f8c:	08028030 	.word	0x08028030
 8016f90:	080280f8 	.word	0x080280f8
 8016f94:	08028041 	.word	0x08028041

08016f98 <_ZN8touchgfx4LineC1Ev>:
 8016f98:	b510      	push	{r4, lr}
 8016f9a:	4604      	mov	r4, r0
 8016f9c:	f7ff fefc 	bl	8016d98 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8016fa0:	4b0c      	ldr	r3, [pc, #48]	; (8016fd4 <_ZN8touchgfx4LineC1Ev+0x3c>)
 8016fa2:	2220      	movs	r2, #32
 8016fa4:	4620      	mov	r0, r4
 8016fa6:	6023      	str	r3, [r4, #0]
 8016fa8:	2300      	movs	r3, #0
 8016faa:	6422      	str	r2, [r4, #64]	; 0x40
 8016fac:	2212      	movs	r2, #18
 8016fae:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8016fb2:	6722      	str	r2, [r4, #112]	; 0x70
 8016fb4:	60a3      	str	r3, [r4, #8]
 8016fb6:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 8016fba:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 8016fbe:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016fc2:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
 8016fc6:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
 8016fca:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
 8016fce:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
 8016fd2:	bd10      	pop	{r4, pc}
 8016fd4:	08028080 	.word	0x08028080

08016fd8 <_ZN8touchgfx4Line17updateCachedShapeEv>:
 8016fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fdc:	6b86      	ldr	r6, [r0, #56]	; 0x38
 8016fde:	b085      	sub	sp, #20
 8016fe0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8016fe2:	4604      	mov	r4, r0
 8016fe4:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8016fe6:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8016fe8:	1af6      	subs	r6, r6, r3
 8016fea:	eba5 0502 	sub.w	r5, r5, r2
 8016fee:	f040 809b 	bne.w	8017128 <_ZN8touchgfx4Line17updateCachedShapeEv+0x150>
 8016ff2:	b955      	cbnz	r5, 801700a <_ZN8touchgfx4Line17updateCachedShapeEv+0x32>
 8016ff4:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
 8016ff8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8016ffc:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8017000:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8017004:	b005      	add	sp, #20
 8017006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801700a:	ea85 77e5 	eor.w	r7, r5, r5, asr #31
 801700e:	eba7 77e5 	sub.w	r7, r7, r5, asr #31
 8017012:	f04f 0802 	mov.w	r8, #2
 8017016:	463a      	mov	r2, r7
 8017018:	4629      	mov	r1, r5
 801701a:	ab03      	add	r3, sp, #12
 801701c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801701e:	f002 fb7e 	bl	801971e <_ZN8touchgfx6muldivElllRl>
 8017022:	ab03      	add	r3, sp, #12
 8017024:	463a      	mov	r2, r7
 8017026:	4631      	mov	r1, r6
 8017028:	fb90 f5f8 	sdiv	r5, r0, r8
 801702c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801702e:	f002 fb76 	bl	801971e <_ZN8touchgfx6muldivElllRl>
 8017032:	f894 a044 	ldrb.w	sl, [r4, #68]	; 0x44
 8017036:	f8d4 e038 	ldr.w	lr, [r4, #56]	; 0x38
 801703a:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
 801703e:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8017040:	fb90 f0f8 	sdiv	r0, r0, r8
 8017044:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 8017048:	eba8 0305 	sub.w	r3, r8, r5
 801704c:	f1ba 0f00 	cmp.w	sl, #0
 8017050:	f040 80c3 	bne.w	80171da <_ZN8touchgfx4Line17updateCachedShapeEv+0x202>
 8017054:	64a3      	str	r3, [r4, #72]	; 0x48
 8017056:	19c3      	adds	r3, r0, r7
 8017058:	65a3      	str	r3, [r4, #88]	; 0x58
 801705a:	ebae 0305 	sub.w	r3, lr, r5
 801705e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8017060:	eb00 030c 	add.w	r3, r0, ip
 8017064:	65e3      	str	r3, [r4, #92]	; 0x5c
 8017066:	eb05 030e 	add.w	r3, r5, lr
 801706a:	6523      	str	r3, [r4, #80]	; 0x50
 801706c:	ebac 0300 	sub.w	r3, ip, r0
 8017070:	6623      	str	r3, [r4, #96]	; 0x60
 8017072:	eb05 0308 	add.w	r3, r5, r8
 8017076:	6563      	str	r3, [r4, #84]	; 0x54
 8017078:	1a3b      	subs	r3, r7, r0
 801707a:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 801707c:	f104 094c 	add.w	r9, r4, #76	; 0x4c
 8017080:	6663      	str	r3, [r4, #100]	; 0x64
 8017082:	f104 0358 	add.w	r3, r4, #88	; 0x58
 8017086:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8017088:	4632      	mov	r2, r6
 801708a:	9301      	str	r3, [sp, #4]
 801708c:	9100      	str	r1, [sp, #0]
 801708e:	f859 bb04 	ldr.w	fp, [r9], #4
 8017092:	9b00      	ldr	r3, [sp, #0]
 8017094:	455e      	cmp	r6, fp
 8017096:	bfa8      	it	ge
 8017098:	465e      	movge	r6, fp
 801709a:	455a      	cmp	r2, fp
 801709c:	bfb8      	it	lt
 801709e:	465a      	movlt	r2, fp
 80170a0:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 80170a4:	4559      	cmp	r1, fp
 80170a6:	bfa8      	it	ge
 80170a8:	4659      	movge	r1, fp
 80170aa:	455b      	cmp	r3, fp
 80170ac:	bfb8      	it	lt
 80170ae:	465b      	movlt	r3, fp
 80170b0:	9300      	str	r3, [sp, #0]
 80170b2:	9b01      	ldr	r3, [sp, #4]
 80170b4:	454b      	cmp	r3, r9
 80170b6:	d1ea      	bne.n	801708e <_ZN8touchgfx4Line17updateCachedShapeEv+0xb6>
 80170b8:	f04f 0b20 	mov.w	fp, #32
 80170bc:	b209      	sxth	r1, r1
 80170be:	b212      	sxth	r2, r2
 80170c0:	f1ba 0f01 	cmp.w	sl, #1
 80170c4:	b236      	sxth	r6, r6
 80170c6:	fb91 f9fb 	sdiv	r9, r1, fp
 80170ca:	f9bd 1000 	ldrsh.w	r1, [sp]
 80170ce:	f8a4 906a 	strh.w	r9, [r4, #106]	; 0x6a
 80170d2:	fb92 f2fb 	sdiv	r2, r2, fp
 80170d6:	fb91 f1fb 	sdiv	r1, r1, fp
 80170da:	fb96 f6fb 	sdiv	r6, r6, fp
 80170de:	f102 0201 	add.w	r2, r2, #1
 80170e2:	f101 0101 	add.w	r1, r1, #1
 80170e6:	f8a4 6068 	strh.w	r6, [r4, #104]	; 0x68
 80170ea:	eba1 0109 	sub.w	r1, r1, r9
 80170ee:	eba2 0606 	sub.w	r6, r2, r6
 80170f2:	f8a4 106e 	strh.w	r1, [r4, #110]	; 0x6e
 80170f6:	f8a4 606c 	strh.w	r6, [r4, #108]	; 0x6c
 80170fa:	d183      	bne.n	8017004 <_ZN8touchgfx4Line17updateCachedShapeEv+0x2c>
 80170fc:	eba8 0305 	sub.w	r3, r8, r5
 8017100:	64a3      	str	r3, [r4, #72]	; 0x48
 8017102:	19c3      	adds	r3, r0, r7
 8017104:	65a3      	str	r3, [r4, #88]	; 0x58
 8017106:	ebae 0305 	sub.w	r3, lr, r5
 801710a:	64e3      	str	r3, [r4, #76]	; 0x4c
 801710c:	eb00 030c 	add.w	r3, r0, ip
 8017110:	65e3      	str	r3, [r4, #92]	; 0x5c
 8017112:	eb05 030e 	add.w	r3, r5, lr
 8017116:	4445      	add	r5, r8
 8017118:	6523      	str	r3, [r4, #80]	; 0x50
 801711a:	ebac 0300 	sub.w	r3, ip, r0
 801711e:	1a38      	subs	r0, r7, r0
 8017120:	6565      	str	r5, [r4, #84]	; 0x54
 8017122:	6623      	str	r3, [r4, #96]	; 0x60
 8017124:	6660      	str	r0, [r4, #100]	; 0x64
 8017126:	e76d      	b.n	8017004 <_ZN8touchgfx4Line17updateCachedShapeEv+0x2c>
 8017128:	ea86 77e6 	eor.w	r7, r6, r6, asr #31
 801712c:	eba7 77e6 	sub.w	r7, r7, r6, asr #31
 8017130:	2d00      	cmp	r5, #0
 8017132:	f43f af6e 	beq.w	8017012 <_ZN8touchgfx4Line17updateCachedShapeEv+0x3a>
 8017136:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 801713a:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 801713e:	fb93 f2f7 	sdiv	r2, r3, r7
 8017142:	fb07 3312 	mls	r3, r7, r2, r3
 8017146:	b34b      	cbz	r3, 801719c <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c4>
 8017148:	fb97 f2f3 	sdiv	r2, r7, r3
 801714c:	fb03 7712 	mls	r7, r3, r2, r7
 8017150:	2f00      	cmp	r7, #0
 8017152:	d1f4      	bne.n	801713e <_ZN8touchgfx4Line17updateCachedShapeEv+0x166>
 8017154:	2b01      	cmp	r3, #1
 8017156:	f24b 5204 	movw	r2, #46340	; 0xb504
 801715a:	bf18      	it	ne
 801715c:	fb96 f6f3 	sdivne	r6, r6, r3
 8017160:	ea86 71e6 	eor.w	r1, r6, r6, asr #31
 8017164:	eba1 71e6 	sub.w	r1, r1, r6, asr #31
 8017168:	bf18      	it	ne
 801716a:	fb95 f5f3 	sdivne	r5, r5, r3
 801716e:	4291      	cmp	r1, r2
 8017170:	dd16      	ble.n	80171a0 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c8>
 8017172:	2d00      	cmp	r5, #0
 8017174:	da4d      	bge.n	8017212 <_ZN8touchgfx4Line17updateCachedShapeEv+0x23a>
 8017176:	4b29      	ldr	r3, [pc, #164]	; (801721c <_ZN8touchgfx4Line17updateCachedShapeEv+0x244>)
 8017178:	429d      	cmp	r5, r3
 801717a:	da27      	bge.n	80171cc <_ZN8touchgfx4Line17updateCachedShapeEv+0x1f4>
 801717c:	426a      	negs	r2, r5
 801717e:	f24b 5304 	movw	r3, #46340	; 0xb504
 8017182:	fb91 f1f3 	sdiv	r1, r1, r3
 8017186:	fb92 f3f3 	sdiv	r3, r2, r3
 801718a:	4299      	cmp	r1, r3
 801718c:	bfcc      	ite	gt
 801718e:	1c4b      	addgt	r3, r1, #1
 8017190:	3301      	addle	r3, #1
 8017192:	fb96 f6f3 	sdiv	r6, r6, r3
 8017196:	fb95 f5f3 	sdiv	r5, r5, r3
 801719a:	e00f      	b.n	80171bc <_ZN8touchgfx4Line17updateCachedShapeEv+0x1e4>
 801719c:	463b      	mov	r3, r7
 801719e:	e7d9      	b.n	8017154 <_ZN8touchgfx4Line17updateCachedShapeEv+0x17c>
 80171a0:	2d00      	cmp	r5, #0
 80171a2:	fb92 f2f1 	sdiv	r2, r2, r1
 80171a6:	da13      	bge.n	80171d0 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1f8>
 80171a8:	4269      	negs	r1, r5
 80171aa:	f24b 5304 	movw	r3, #46340	; 0xb504
 80171ae:	fb93 f3f1 	sdiv	r3, r3, r1
 80171b2:	429a      	cmp	r2, r3
 80171b4:	bfa8      	it	ge
 80171b6:	461a      	movge	r2, r3
 80171b8:	4356      	muls	r6, r2
 80171ba:	4355      	muls	r5, r2
 80171bc:	fb05 f005 	mul.w	r0, r5, r5
 80171c0:	fb06 0006 	mla	r0, r6, r6, r0
 80171c4:	f7ff fe82 	bl	8016ecc <_ZN8touchgfx7CWRUtil5isqrtEm>
 80171c8:	4607      	mov	r7, r0
 80171ca:	e722      	b.n	8017012 <_ZN8touchgfx4Line17updateCachedShapeEv+0x3a>
 80171cc:	2200      	movs	r2, #0
 80171ce:	e7eb      	b.n	80171a8 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d0>
 80171d0:	4629      	mov	r1, r5
 80171d2:	e7ea      	b.n	80171aa <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d2>
 80171d4:	4629      	mov	r1, r5
 80171d6:	2200      	movs	r2, #0
 80171d8:	e7e7      	b.n	80171aa <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d2>
 80171da:	1a1b      	subs	r3, r3, r0
 80171dc:	64a3      	str	r3, [r4, #72]	; 0x48
 80171de:	19c3      	adds	r3, r0, r7
 80171e0:	1b5b      	subs	r3, r3, r5
 80171e2:	65a3      	str	r3, [r4, #88]	; 0x58
 80171e4:	ebae 0305 	sub.w	r3, lr, r5
 80171e8:	4403      	add	r3, r0
 80171ea:	64e3      	str	r3, [r4, #76]	; 0x4c
 80171ec:	eb00 030c 	add.w	r3, r0, ip
 80171f0:	442b      	add	r3, r5
 80171f2:	65e3      	str	r3, [r4, #92]	; 0x5c
 80171f4:	eb05 030e 	add.w	r3, r5, lr
 80171f8:	4403      	add	r3, r0
 80171fa:	6523      	str	r3, [r4, #80]	; 0x50
 80171fc:	ebac 0300 	sub.w	r3, ip, r0
 8017200:	442b      	add	r3, r5
 8017202:	6623      	str	r3, [r4, #96]	; 0x60
 8017204:	eb05 0308 	add.w	r3, r5, r8
 8017208:	1a1b      	subs	r3, r3, r0
 801720a:	6563      	str	r3, [r4, #84]	; 0x54
 801720c:	1a3b      	subs	r3, r7, r0
 801720e:	1b5b      	subs	r3, r3, r5
 8017210:	e733      	b.n	801707a <_ZN8touchgfx4Line17updateCachedShapeEv+0xa2>
 8017212:	4295      	cmp	r5, r2
 8017214:	ddde      	ble.n	80171d4 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1fc>
 8017216:	462a      	mov	r2, r5
 8017218:	e7b1      	b.n	801717e <_ZN8touchgfx4Line17updateCachedShapeEv+0x1a6>
 801721a:	bf00      	nop
 801721c:	ffff4afc 	.word	0xffff4afc

08017220 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>:
 8017220:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8017222:	428b      	cmp	r3, r1
 8017224:	d102      	bne.n	801722c <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0xc>
 8017226:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8017228:	4293      	cmp	r3, r2
 801722a:	d003      	beq.n	8017234 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0x14>
 801722c:	e9c0 120c 	strd	r1, r2, [r0, #48]	; 0x30
 8017230:	f7ff bed2 	b.w	8016fd8 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8017234:	4770      	bx	lr

08017236 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>:
 8017236:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8017238:	428b      	cmp	r3, r1
 801723a:	d102      	bne.n	8017242 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0xc>
 801723c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 801723e:	4293      	cmp	r3, r2
 8017240:	d003      	beq.n	801724a <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0x14>
 8017242:	e9c0 120e 	strd	r1, r2, [r0, #56]	; 0x38
 8017246:	f7ff bec7 	b.w	8016fd8 <_ZN8touchgfx4Line17updateCachedShapeEv>
 801724a:	4770      	bx	lr

0801724c <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>:
 801724c:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
 8017250:	f7ff bec2 	b.w	8016fd8 <_ZN8touchgfx4Line17updateCachedShapeEv>

08017254 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE>:
 8017254:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017258:	b0b3      	sub	sp, #204	; 0xcc
 801725a:	4604      	mov	r4, r0
 801725c:	460a      	mov	r2, r1
 801725e:	4601      	mov	r1, r0
 8017260:	a804      	add	r0, sp, #16
 8017262:	ad32      	add	r5, sp, #200	; 0xc8
 8017264:	f00c f914 	bl	8023490 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8017268:	2300      	movs	r3, #0
 801726a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801726c:	f845 3dc4 	str.w	r3, [r5, #-196]!
 8017270:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017272:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8017274:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8017276:	1ac0      	subs	r0, r0, r3
 8017278:	eba1 0102 	sub.w	r1, r1, r2
 801727c:	d43c      	bmi.n	80172f8 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xa4>
 801727e:	2900      	cmp	r1, #0
 8017280:	462a      	mov	r2, r5
 8017282:	db33      	blt.n	80172ec <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x98>
 8017284:	f7ff fe58 	bl	8016f38 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8017288:	f100 075a 	add.w	r7, r0, #90	; 0x5a
 801728c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 801728e:	a804      	add	r0, sp, #16
 8017290:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8017292:	f00c fac6 	bl	8023822 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8017296:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8017298:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 801729a:	a804      	add	r0, sp, #16
 801729c:	f00c fa50 	bl	8023740 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80172a0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80172a4:	2b01      	cmp	r3, #1
 80172a6:	d137      	bne.n	8017318 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 80172a8:	6f26      	ldr	r6, [r4, #112]	; 0x70
 80172aa:	2eb3      	cmp	r6, #179	; 0xb3
 80172ac:	dc34      	bgt.n	8017318 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 80172ae:	eba7 0906 	sub.w	r9, r7, r6
 80172b2:	4648      	mov	r0, r9
 80172b4:	f7ff fde8 	bl	8016e88 <_ZN8touchgfx7CWRUtil4sineEi>
 80172b8:	a902      	add	r1, sp, #8
 80172ba:	9002      	str	r0, [sp, #8]
 80172bc:	4628      	mov	r0, r5
 80172be:	f7ff fdd7 	bl	8016e70 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80172c2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80172c4:	eb00 0801 	add.w	r8, r0, r1
 80172c8:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 80172cc:	f7ff fddc 	bl	8016e88 <_ZN8touchgfx7CWRUtil4sineEi>
 80172d0:	a903      	add	r1, sp, #12
 80172d2:	9003      	str	r0, [sp, #12]
 80172d4:	4628      	mov	r0, r5
 80172d6:	f7ff fdcb 	bl	8016e70 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80172da:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80172dc:	4641      	mov	r1, r8
 80172de:	1a12      	subs	r2, r2, r0
 80172e0:	a804      	add	r0, sp, #16
 80172e2:	f00c fa2d 	bl	8023740 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80172e6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80172e8:	441e      	add	r6, r3
 80172ea:	e7de      	b.n	80172aa <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x56>
 80172ec:	4249      	negs	r1, r1
 80172ee:	f7ff fe23 	bl	8016f38 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 80172f2:	f1c0 075a 	rsb	r7, r0, #90	; 0x5a
 80172f6:	e7c9      	b.n	801728c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 80172f8:	2900      	cmp	r1, #0
 80172fa:	f1c0 0000 	rsb	r0, r0, #0
 80172fe:	462a      	mov	r2, r5
 8017300:	db04      	blt.n	801730c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xb8>
 8017302:	f7ff fe19 	bl	8016f38 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8017306:	f5c0 7787 	rsb	r7, r0, #270	; 0x10e
 801730a:	e7bf      	b.n	801728c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 801730c:	4249      	negs	r1, r1
 801730e:	f7ff fe13 	bl	8016f38 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8017312:	f500 7787 	add.w	r7, r0, #270	; 0x10e
 8017316:	e7b9      	b.n	801728c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 8017318:	6e22      	ldr	r2, [r4, #96]	; 0x60
 801731a:	a804      	add	r0, sp, #16
 801731c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 801731e:	f00c fa0f 	bl	8023740 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8017322:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017324:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8017326:	a804      	add	r0, sp, #16
 8017328:	f00c fa0a 	bl	8023740 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801732c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8017330:	2b01      	cmp	r3, #1
 8017332:	d123      	bne.n	801737c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 8017334:	6f26      	ldr	r6, [r4, #112]	; 0x70
 8017336:	f1c6 06b4 	rsb	r6, r6, #180	; 0xb4
 801733a:	2e00      	cmp	r6, #0
 801733c:	dd1e      	ble.n	801737c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 801733e:	eb06 0907 	add.w	r9, r6, r7
 8017342:	4648      	mov	r0, r9
 8017344:	f7ff fda0 	bl	8016e88 <_ZN8touchgfx7CWRUtil4sineEi>
 8017348:	a902      	add	r1, sp, #8
 801734a:	9002      	str	r0, [sp, #8]
 801734c:	4628      	mov	r0, r5
 801734e:	f7ff fd8f 	bl	8016e70 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017352:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8017354:	eb00 0801 	add.w	r8, r0, r1
 8017358:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 801735c:	f7ff fd94 	bl	8016e88 <_ZN8touchgfx7CWRUtil4sineEi>
 8017360:	a903      	add	r1, sp, #12
 8017362:	9003      	str	r0, [sp, #12]
 8017364:	4628      	mov	r0, r5
 8017366:	f7ff fd83 	bl	8016e70 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801736a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801736c:	4641      	mov	r1, r8
 801736e:	1a12      	subs	r2, r2, r0
 8017370:	a804      	add	r0, sp, #16
 8017372:	f00c f9e5 	bl	8023740 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8017376:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017378:	1af6      	subs	r6, r6, r3
 801737a:	e7de      	b.n	801733a <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xe6>
 801737c:	a804      	add	r0, sp, #16
 801737e:	f00c fb54 	bl	8023a2a <_ZN8touchgfx6Canvas6renderEv>
 8017382:	4604      	mov	r4, r0
 8017384:	a804      	add	r0, sp, #16
 8017386:	f00c fb91 	bl	8023aac <_ZN8touchgfx6CanvasD1Ev>
 801738a:	4620      	mov	r0, r4
 801738c:	b033      	add	sp, #204	; 0xcc
 801738e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08017392 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 8017392:	b570      	push	{r4, r5, r6, lr}
 8017394:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017398:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801739a:	4604      	mov	r4, r0
 801739c:	429a      	cmp	r2, r3
 801739e:	d00c      	beq.n	80173ba <_ZN8touchgfx8TextArea13getTextHeightEv+0x28>
 80173a0:	f850 3b26 	ldr.w	r3, [r0], #38
 80173a4:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 80173a6:	f7f9 fa99 	bl	80108dc <_ZNK8touchgfx9TypedText7getTextEv>
 80173aa:	2300      	movs	r3, #0
 80173ac:	4601      	mov	r1, r0
 80173ae:	46ac      	mov	ip, r5
 80173b0:	4620      	mov	r0, r4
 80173b2:	461a      	mov	r2, r3
 80173b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80173b8:	4760      	bx	ip
 80173ba:	2000      	movs	r0, #0
 80173bc:	bd70      	pop	{r4, r5, r6, pc}

080173be <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 80173be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80173c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80173c4:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 80173c6:	429a      	cmp	r2, r3
 80173c8:	d016      	beq.n	80173f8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x3a>
 80173ca:	f100 0426 	add.w	r4, r0, #38	; 0x26
 80173ce:	4620      	mov	r0, r4
 80173d0:	f7f7 ff6a 	bl	800f2a8 <_ZNK8touchgfx9TypedText7getFontEv>
 80173d4:	6803      	ldr	r3, [r0, #0]
 80173d6:	4605      	mov	r5, r0
 80173d8:	4620      	mov	r0, r4
 80173da:	69de      	ldr	r6, [r3, #28]
 80173dc:	f7f7 ff80 	bl	800f2e0 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 80173e0:	4607      	mov	r7, r0
 80173e2:	4620      	mov	r0, r4
 80173e4:	f7f9 fa7a 	bl	80108dc <_ZNK8touchgfx9TypedText7getTextEv>
 80173e8:	2300      	movs	r3, #0
 80173ea:	4602      	mov	r2, r0
 80173ec:	4639      	mov	r1, r7
 80173ee:	9300      	str	r3, [sp, #0]
 80173f0:	4628      	mov	r0, r5
 80173f2:	47b0      	blx	r6
 80173f4:	b003      	add	sp, #12
 80173f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80173f8:	2000      	movs	r0, #0
 80173fa:	e7fb      	b.n	80173f4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x36>

080173fc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 80173fc:	b40e      	push	{r1, r2, r3}
 80173fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017402:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017406:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8017408:	b09b      	sub	sp, #108	; 0x6c
 801740a:	4604      	mov	r4, r0
 801740c:	429a      	cmp	r2, r3
 801740e:	d03f      	beq.n	8017490 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x94>
 8017410:	f100 0726 	add.w	r7, r0, #38	; 0x26
 8017414:	ab22      	add	r3, sp, #136	; 0x88
 8017416:	4638      	mov	r0, r7
 8017418:	9303      	str	r3, [sp, #12]
 801741a:	f7f7 ff45 	bl	800f2a8 <_ZNK8touchgfx9TypedText7getFontEv>
 801741e:	6803      	ldr	r3, [r0, #0]
 8017420:	4680      	mov	r8, r0
 8017422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017424:	4798      	blx	r3
 8017426:	4606      	mov	r6, r0
 8017428:	b205      	sxth	r5, r0
 801742a:	a804      	add	r0, sp, #16
 801742c:	f002 ff7e 	bl	801a32c <_ZN8touchgfx12TextProviderC1Ev>
 8017430:	f8d8 3000 	ldr.w	r3, [r8]
 8017434:	4640      	mov	r0, r8
 8017436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017438:	4798      	blx	r3
 801743a:	9a03      	ldr	r2, [sp, #12]
 801743c:	4603      	mov	r3, r0
 801743e:	9921      	ldr	r1, [sp, #132]	; 0x84
 8017440:	a804      	add	r0, sp, #16
 8017442:	f002 ff90 	bl	801a366 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8017446:	4638      	mov	r0, r7
 8017448:	f7f7 ff4a 	bl	800f2e0 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801744c:	4680      	mov	r8, r0
 801744e:	4638      	mov	r0, r7
 8017450:	f7f7 ff2a 	bl	800f2a8 <_ZNK8touchgfx9TypedText7getFontEv>
 8017454:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8017458:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
 801745c:	4642      	mov	r2, r8
 801745e:	9300      	str	r3, [sp, #0]
 8017460:	4603      	mov	r3, r0
 8017462:	a804      	add	r0, sp, #16
 8017464:	f001 f815 	bl	8018492 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8017468:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 801746c:	b203      	sxth	r3, r0
 801746e:	18a9      	adds	r1, r5, r2
 8017470:	2900      	cmp	r1, #0
 8017472:	dd0b      	ble.n	801748c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x90>
 8017474:	3b01      	subs	r3, #1
 8017476:	fb13 f302 	smulbb	r3, r3, r2
 801747a:	fb16 3300 	smlabb	r3, r6, r0, r3
 801747e:	b21d      	sxth	r5, r3
 8017480:	4628      	mov	r0, r5
 8017482:	b01b      	add	sp, #108	; 0x6c
 8017484:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017488:	b003      	add	sp, #12
 801748a:	4770      	bx	lr
 801748c:	2b00      	cmp	r3, #0
 801748e:	dcf7      	bgt.n	8017480 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>
 8017490:	2500      	movs	r5, #0
 8017492:	e7f5      	b.n	8017480 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>

08017494 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8017494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017498:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801749c:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 801749e:	b08d      	sub	sp, #52	; 0x34
 80174a0:	4604      	mov	r4, r0
 80174a2:	429e      	cmp	r6, r3
 80174a4:	4688      	mov	r8, r1
 80174a6:	d04b      	beq.n	8017540 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 80174a8:	f100 0526 	add.w	r5, r0, #38	; 0x26
 80174ac:	4628      	mov	r0, r5
 80174ae:	f7f7 fefb 	bl	800f2a8 <_ZNK8touchgfx9TypedText7getFontEv>
 80174b2:	4607      	mov	r7, r0
 80174b4:	2800      	cmp	r0, #0
 80174b6:	d043      	beq.n	8017540 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 80174b8:	4628      	mov	r0, r5
 80174ba:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 80174be:	f7f7 ff27 	bl	800f310 <_ZNK8touchgfx9TypedText11assertValidEv>
 80174c2:	4b21      	ldr	r3, [pc, #132]	; (8017548 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb4>)
 80174c4:	4628      	mov	r0, r5
 80174c6:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 80174ca:	681b      	ldr	r3, [r3, #0]
 80174cc:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 80174d0:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 80174d4:	785e      	ldrb	r6, [r3, #1]
 80174d6:	f7f7 ff03 	bl	800f2e0 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 80174da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80174dc:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 80174e0:	f3c6 0601 	ubfx	r6, r6, #0, #2
 80174e4:	9309      	str	r3, [sp, #36]	; 0x24
 80174e6:	4b19      	ldr	r3, [pc, #100]	; (801754c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb8>)
 80174e8:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 80174ec:	681b      	ldr	r3, [r3, #0]
 80174ee:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 80174f2:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80174f6:	9707      	str	r7, [sp, #28]
 80174f8:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 80174fc:	f88d 6020 	strb.w	r6, [sp, #32]
 8017500:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8017504:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 8017508:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801750c:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8017510:	b10a      	cbz	r2, 8017516 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x82>
 8017512:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 8017514:	b906      	cbnz	r6, 8017518 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x84>
 8017516:	689e      	ldr	r6, [r3, #8]
 8017518:	af05      	add	r7, sp, #20
 801751a:	4621      	mov	r1, r4
 801751c:	4638      	mov	r0, r7
 801751e:	f002 f864 	bl	80195ea <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017522:	4628      	mov	r0, r5
 8017524:	f7f9 f9da 	bl	80108dc <_ZNK8touchgfx9TypedText7getTextEv>
 8017528:	2300      	movs	r3, #0
 801752a:	9001      	str	r0, [sp, #4]
 801752c:	4630      	mov	r0, r6
 801752e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8017532:	ab07      	add	r3, sp, #28
 8017534:	9300      	str	r3, [sp, #0]
 8017536:	4643      	mov	r3, r8
 8017538:	e897 0006 	ldmia.w	r7, {r1, r2}
 801753c:	f000 fd76 	bl	801802c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8017540:	b00d      	add	sp, #52	; 0x34
 8017542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017546:	bf00      	nop
 8017548:	2000bd0c 	.word	0x2000bd0c
 801754c:	2000bc7c 	.word	0x2000bc7c

08017550 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8017550:	b570      	push	{r4, r5, r6, lr}
 8017552:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017556:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8017558:	4604      	mov	r4, r0
 801755a:	429a      	cmp	r2, r3
 801755c:	d021      	beq.n	80175a2 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x52>
 801755e:	6803      	ldr	r3, [r0, #0]
 8017560:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017562:	4798      	blx	r3
 8017564:	6823      	ldr	r3, [r4, #0]
 8017566:	4605      	mov	r5, r0
 8017568:	4620      	mov	r0, r4
 801756a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801756c:	4798      	blx	r3
 801756e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8017572:	4606      	mov	r6, r0
 8017574:	b22d      	sxth	r5, r5
 8017576:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801757a:	6823      	ldr	r3, [r4, #0]
 801757c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801757e:	d109      	bne.n	8017594 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x44>
 8017580:	4629      	mov	r1, r5
 8017582:	4620      	mov	r0, r4
 8017584:	4798      	blx	r3
 8017586:	6823      	ldr	r3, [r4, #0]
 8017588:	4631      	mov	r1, r6
 801758a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801758c:	4620      	mov	r0, r4
 801758e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017592:	4718      	bx	r3
 8017594:	4601      	mov	r1, r0
 8017596:	4620      	mov	r0, r4
 8017598:	4798      	blx	r3
 801759a:	6823      	ldr	r3, [r4, #0]
 801759c:	4629      	mov	r1, r5
 801759e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80175a0:	e7f4      	b.n	801758c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>
 80175a2:	bd70      	pop	{r4, r5, r6, pc}

080175a4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 80175a4:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 80175a8:	84c1      	strh	r1, [r0, #38]	; 0x26
 80175aa:	b922      	cbnz	r2, 80175b6 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 80175ac:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80175b0:	b90b      	cbnz	r3, 80175b6 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 80175b2:	f7ff bfcd 	b.w	8017550 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 80175b6:	4770      	bx	lr

080175b8 <_ZNK8touchgfx3Box12getSolidRectEv>:
 80175b8:	2300      	movs	r3, #0
 80175ba:	8003      	strh	r3, [r0, #0]
 80175bc:	8043      	strh	r3, [r0, #2]
 80175be:	8083      	strh	r3, [r0, #4]
 80175c0:	80c3      	strh	r3, [r0, #6]
 80175c2:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 80175c6:	b91b      	cbnz	r3, 80175d0 <_ZNK8touchgfx3Box12getSolidRectEv+0x18>
 80175c8:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 80175cc:	2bff      	cmp	r3, #255	; 0xff
 80175ce:	d103      	bne.n	80175d8 <_ZNK8touchgfx3Box12getSolidRectEv+0x20>
 80175d0:	890b      	ldrh	r3, [r1, #8]
 80175d2:	8083      	strh	r3, [r0, #4]
 80175d4:	894b      	ldrh	r3, [r1, #10]
 80175d6:	80c3      	strh	r3, [r0, #6]
 80175d8:	4770      	bx	lr
	...

080175dc <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 80175dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80175de:	4604      	mov	r4, r0
 80175e0:	466b      	mov	r3, sp
 80175e2:	6808      	ldr	r0, [r1, #0]
 80175e4:	6849      	ldr	r1, [r1, #4]
 80175e6:	c303      	stmia	r3!, {r0, r1}
 80175e8:	6823      	ldr	r3, [r4, #0]
 80175ea:	4669      	mov	r1, sp
 80175ec:	4620      	mov	r0, r4
 80175ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80175f0:	4798      	blx	r3
 80175f2:	4b08      	ldr	r3, [pc, #32]	; (8017614 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 80175f4:	681b      	ldr	r3, [r3, #0]
 80175f6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80175fa:	b10a      	cbz	r2, 8017600 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 80175fc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80175fe:	b900      	cbnz	r0, 8017602 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8017600:	6898      	ldr	r0, [r3, #8]
 8017602:	6803      	ldr	r3, [r0, #0]
 8017604:	4669      	mov	r1, sp
 8017606:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8017608:	69dd      	ldr	r5, [r3, #28]
 801760a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801760e:	47a8      	blx	r5
 8017610:	b003      	add	sp, #12
 8017612:	bd30      	pop	{r4, r5, pc}
 8017614:	2000bc7c 	.word	0x2000bc7c

08017618 <_ZN8touchgfx10TiledImage9setOffsetEss>:
 8017618:	b570      	push	{r4, r5, r6, lr}
 801761a:	6803      	ldr	r3, [r0, #0]
 801761c:	4604      	mov	r4, r0
 801761e:	4615      	mov	r5, r2
 8017620:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017622:	4798      	blx	r3
 8017624:	6823      	ldr	r3, [r4, #0]
 8017626:	4629      	mov	r1, r5
 8017628:	4620      	mov	r0, r4
 801762a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801762c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017630:	4718      	bx	r3

08017632 <_ZN8touchgfx10TiledImage9getOffsetERsS1_>:
 8017632:	b570      	push	{r4, r5, r6, lr}
 8017634:	6803      	ldr	r3, [r0, #0]
 8017636:	4604      	mov	r4, r0
 8017638:	460e      	mov	r6, r1
 801763a:	4615      	mov	r5, r2
 801763c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801763e:	4798      	blx	r3
 8017640:	8030      	strh	r0, [r6, #0]
 8017642:	6823      	ldr	r3, [r4, #0]
 8017644:	4620      	mov	r0, r4
 8017646:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017648:	4798      	blx	r3
 801764a:	8028      	strh	r0, [r5, #0]
 801764c:	bd70      	pop	{r4, r5, r6, pc}

0801764e <_ZN8touchgfx10TiledImage10getXOffsetEv>:
 801764e:	f9b0 002a 	ldrsh.w	r0, [r0, #42]	; 0x2a
 8017652:	4770      	bx	lr

08017654 <_ZN8touchgfx10TiledImage10getYOffsetEv>:
 8017654:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 8017658:	4770      	bx	lr

0801765a <_ZN8touchgfx10TiledImageD1Ev>:
 801765a:	4770      	bx	lr

0801765c <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>:
 801765c:	b510      	push	{r4, lr}
 801765e:	4604      	mov	r4, r0
 8017660:	f000 fa40 	bl	8017ae4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8017664:	6823      	ldr	r3, [r4, #0]
 8017666:	4620      	mov	r0, r4
 8017668:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 801766c:	f9b4 102a 	ldrsh.w	r1, [r4, #42]	; 0x2a
 8017670:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017676:	4718      	bx	r3

08017678 <_ZN8touchgfx10TiledImage10setXOffsetEs>:
 8017678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801767a:	f100 0626 	add.w	r6, r0, #38	; 0x26
 801767e:	4605      	mov	r5, r0
 8017680:	8541      	strh	r1, [r0, #42]	; 0x2a
 8017682:	4630      	mov	r0, r6
 8017684:	f003 fd7e 	bl	801b184 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017688:	b1a0      	cbz	r0, 80176b4 <_ZN8touchgfx10TiledImage10setXOffsetEs+0x3c>
 801768a:	f9b5 702a 	ldrsh.w	r7, [r5, #42]	; 0x2a
 801768e:	4630      	mov	r0, r6
 8017690:	f003 fd78 	bl	801b184 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017694:	fb97 f4f0 	sdiv	r4, r7, r0
 8017698:	fb04 7410 	mls	r4, r4, r0, r7
 801769c:	4630      	mov	r0, r6
 801769e:	f003 fd71 	bl	801b184 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80176a2:	4404      	add	r4, r0
 80176a4:	4630      	mov	r0, r6
 80176a6:	f003 fd6d 	bl	801b184 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80176aa:	fb94 f3f0 	sdiv	r3, r4, r0
 80176ae:	fb03 4010 	mls	r0, r3, r0, r4
 80176b2:	8568      	strh	r0, [r5, #42]	; 0x2a
 80176b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080176b6 <_ZN8touchgfx10TiledImage10setYOffsetEs>:
 80176b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176b8:	f100 0626 	add.w	r6, r0, #38	; 0x26
 80176bc:	4605      	mov	r5, r0
 80176be:	8581      	strh	r1, [r0, #44]	; 0x2c
 80176c0:	4630      	mov	r0, r6
 80176c2:	f003 fd99 	bl	801b1f8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80176c6:	b1a0      	cbz	r0, 80176f2 <_ZN8touchgfx10TiledImage10setYOffsetEs+0x3c>
 80176c8:	f9b5 702c 	ldrsh.w	r7, [r5, #44]	; 0x2c
 80176cc:	4630      	mov	r0, r6
 80176ce:	f003 fd93 	bl	801b1f8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80176d2:	fb97 f4f0 	sdiv	r4, r7, r0
 80176d6:	fb04 7410 	mls	r4, r4, r0, r7
 80176da:	4630      	mov	r0, r6
 80176dc:	f003 fd8c 	bl	801b1f8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80176e0:	4404      	add	r4, r0
 80176e2:	4630      	mov	r0, r6
 80176e4:	f003 fd88 	bl	801b1f8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80176e8:	fb94 f3f0 	sdiv	r3, r4, r0
 80176ec:	fb03 4010 	mls	r0, r3, r0, r4
 80176f0:	85a8      	strh	r0, [r5, #44]	; 0x2c
 80176f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080176f4 <_ZN8touchgfx10TiledImageD0Ev>:
 80176f4:	b510      	push	{r4, lr}
 80176f6:	4604      	mov	r4, r0
 80176f8:	2130      	movs	r1, #48	; 0x30
 80176fa:	f00d fa6a 	bl	8024bd2 <_ZdlPvj>
 80176fe:	4620      	mov	r0, r4
 8017700:	bd10      	pop	{r4, pc}
	...

08017704 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE>:
 8017704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017708:	f100 0b26 	add.w	fp, r0, #38	; 0x26
 801770c:	b093      	sub	sp, #76	; 0x4c
 801770e:	4607      	mov	r7, r0
 8017710:	460e      	mov	r6, r1
 8017712:	4658      	mov	r0, fp
 8017714:	f003 fd36 	bl	801b184 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017718:	4605      	mov	r5, r0
 801771a:	4658      	mov	r0, fp
 801771c:	f003 fd6c 	bl	801b1f8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017720:	4680      	mov	r8, r0
 8017722:	2d00      	cmp	r5, #0
 8017724:	f000 80c5 	beq.w	80178b2 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 8017728:	2800      	cmp	r0, #0
 801772a:	f000 80c2 	beq.w	80178b2 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 801772e:	2300      	movs	r3, #0
 8017730:	a90e      	add	r1, sp, #56	; 0x38
 8017732:	4638      	mov	r0, r7
 8017734:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 8017738:	683b      	ldr	r3, [r7, #0]
 801773a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801773c:	4798      	blx	r3
 801773e:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8017742:	f9b6 3000 	ldrsh.w	r3, [r6]
 8017746:	88b1      	ldrh	r1, [r6, #4]
 8017748:	189c      	adds	r4, r3, r2
 801774a:	440b      	add	r3, r1
 801774c:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8017750:	fa02 f383 	sxtah	r3, r2, r3
 8017754:	3b01      	subs	r3, #1
 8017756:	fb93 f3f5 	sdiv	r3, r3, r5
 801775a:	fb94 f4f5 	sdiv	r4, r4, r5
 801775e:	fb13 f305 	smulbb	r3, r3, r5
 8017762:	fb14 f405 	smulbb	r4, r4, r5
 8017766:	b21b      	sxth	r3, r3
 8017768:	1aa4      	subs	r4, r4, r2
 801776a:	930b      	str	r3, [sp, #44]	; 0x2c
 801776c:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8017770:	b2a4      	uxth	r4, r4
 8017772:	185a      	adds	r2, r3, r1
 8017774:	fb92 f2f8 	sdiv	r2, r2, r8
 8017778:	fb12 f208 	smulbb	r2, r2, r8
 801777c:	1a52      	subs	r2, r2, r1
 801777e:	b212      	sxth	r2, r2
 8017780:	920c      	str	r2, [sp, #48]	; 0x30
 8017782:	88f2      	ldrh	r2, [r6, #6]
 8017784:	4413      	add	r3, r2
 8017786:	fa01 f383 	sxtah	r3, r1, r3
 801778a:	3b01      	subs	r3, #1
 801778c:	fb93 f3f8 	sdiv	r3, r3, r8
 8017790:	fb13 f308 	smulbb	r3, r3, r8
 8017794:	b21b      	sxth	r3, r3
 8017796:	930d      	str	r3, [sp, #52]	; 0x34
 8017798:	1963      	adds	r3, r4, r5
 801779a:	fa1f fa83 	uxth.w	sl, r3
 801779e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80177a0:	b223      	sxth	r3, r4
 80177a2:	4293      	cmp	r3, r2
 80177a4:	9305      	str	r3, [sp, #20]
 80177a6:	f300 8084 	bgt.w	80178b2 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 80177aa:	fa0f f38a 	sxth.w	r3, sl
 80177ae:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80177b2:	9309      	str	r3, [sp, #36]	; 0x24
 80177b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80177b6:	4599      	cmp	r9, r3
 80177b8:	dd04      	ble.n	80177c4 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xc0>
 80177ba:	442c      	add	r4, r5
 80177bc:	eb05 030a 	add.w	r3, r5, sl
 80177c0:	b2a4      	uxth	r4, r4
 80177c2:	e7ea      	b.n	801779a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x96>
 80177c4:	f9b6 c000 	ldrsh.w	ip, [r6]
 80177c8:	88b2      	ldrh	r2, [r6, #4]
 80177ca:	4462      	add	r2, ip
 80177cc:	b292      	uxth	r2, r2
 80177ce:	b213      	sxth	r3, r2
 80177d0:	9308      	str	r3, [sp, #32]
 80177d2:	fa1f f389 	uxth.w	r3, r9
 80177d6:	eb08 0103 	add.w	r1, r8, r3
 80177da:	9307      	str	r3, [sp, #28]
 80177dc:	b289      	uxth	r1, r1
 80177de:	b208      	sxth	r0, r1
 80177e0:	9006      	str	r0, [sp, #24]
 80177e2:	9805      	ldr	r0, [sp, #20]
 80177e4:	4603      	mov	r3, r0
 80177e6:	9808      	ldr	r0, [sp, #32]
 80177e8:	4283      	cmp	r3, r0
 80177ea:	da5e      	bge.n	80178aa <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 80177ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80177ee:	4584      	cmp	ip, r0
 80177f0:	da5b      	bge.n	80178aa <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 80177f2:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 80177f6:	f8b6 e006 	ldrh.w	lr, [r6, #6]
 80177fa:	4486      	add	lr, r0
 80177fc:	fa1f fe8e 	uxth.w	lr, lr
 8017800:	fa0f f38e 	sxth.w	r3, lr
 8017804:	4599      	cmp	r9, r3
 8017806:	930a      	str	r3, [sp, #40]	; 0x28
 8017808:	da4f      	bge.n	80178aa <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 801780a:	9b06      	ldr	r3, [sp, #24]
 801780c:	4298      	cmp	r0, r3
 801780e:	da4c      	bge.n	80178aa <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 8017810:	9b05      	ldr	r3, [sp, #20]
 8017812:	459c      	cmp	ip, r3
 8017814:	bfb8      	it	lt
 8017816:	469c      	movlt	ip, r3
 8017818:	4548      	cmp	r0, r9
 801781a:	9b08      	ldr	r3, [sp, #32]
 801781c:	bfb8      	it	lt
 801781e:	4648      	movlt	r0, r9
 8017820:	f8ad c040 	strh.w	ip, [sp, #64]	; 0x40
 8017824:	4699      	mov	r9, r3
 8017826:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017828:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
 801782c:	4599      	cmp	r9, r3
 801782e:	bfc8      	it	gt
 8017830:	4652      	movgt	r2, sl
 8017832:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017834:	eba2 020c 	sub.w	r2, r2, ip
 8017838:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
 801783c:	9a06      	ldr	r2, [sp, #24]
 801783e:	4293      	cmp	r3, r2
 8017840:	bfd8      	it	le
 8017842:	4671      	movle	r1, lr
 8017844:	1a09      	subs	r1, r1, r0
 8017846:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46
 801784a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801784e:	9b07      	ldr	r3, [sp, #28]
 8017850:	1b12      	subs	r2, r2, r4
 8017852:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8017856:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801785a:	1ad2      	subs	r2, r2, r3
 801785c:	4b16      	ldr	r3, [pc, #88]	; (80178b8 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1b4>)
 801785e:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 8017862:	681a      	ldr	r2, [r3, #0]
 8017864:	f892 1076 	ldrb.w	r1, [r2, #118]	; 0x76
 8017868:	b109      	cbz	r1, 801786e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16a>
 801786a:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 801786c:	b900      	cbnz	r0, 8017870 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16c>
 801786e:	6890      	ldr	r0, [r2, #8]
 8017870:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8017874:	f04f 0c01 	mov.w	ip, #1
 8017878:	9b07      	ldr	r3, [sp, #28]
 801787a:	6801      	ldr	r1, [r0, #0]
 801787c:	4413      	add	r3, r2
 801787e:	f8cd c008 	str.w	ip, [sp, #8]
 8017882:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8017886:	f897 c028 	ldrb.w	ip, [r7, #40]	; 0x28
 801788a:	b21b      	sxth	r3, r3
 801788c:	4422      	add	r2, r4
 801788e:	f8cd c004 	str.w	ip, [sp, #4]
 8017892:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 8017896:	b212      	sxth	r2, r2
 8017898:	f8cd c000 	str.w	ip, [sp]
 801789c:	f8d1 900c 	ldr.w	r9, [r1, #12]
 80178a0:	4659      	mov	r1, fp
 80178a2:	47c8      	blx	r9
 80178a4:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80178a8:	e784      	b.n	80177b4 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xb0>
 80178aa:	2300      	movs	r3, #0
 80178ac:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 80178b0:	e7cb      	b.n	801784a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x146>
 80178b2:	b013      	add	sp, #76	; 0x4c
 80178b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178b8:	2000bc7c 	.word	0x2000bc7c

080178bc <_ZNK8touchgfx10TiledImage12getSolidRectEv>:
 80178bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178c0:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 80178c4:	4606      	mov	r6, r0
 80178c6:	4689      	mov	r9, r1
 80178c8:	2bff      	cmp	r3, #255	; 0xff
 80178ca:	d008      	beq.n	80178de <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x22>
 80178cc:	2300      	movs	r3, #0
 80178ce:	8003      	strh	r3, [r0, #0]
 80178d0:	8043      	strh	r3, [r0, #2]
 80178d2:	8083      	strh	r3, [r0, #4]
 80178d4:	4630      	mov	r0, r6
 80178d6:	80f3      	strh	r3, [r6, #6]
 80178d8:	b003      	add	sp, #12
 80178da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178de:	f101 0b26 	add.w	fp, r1, #38	; 0x26
 80178e2:	4668      	mov	r0, sp
 80178e4:	4659      	mov	r1, fp
 80178e6:	f003 fcc1 	bl	801b26c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80178ea:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 80178ee:	4658      	mov	r0, fp
 80178f0:	f9bd 7000 	ldrsh.w	r7, [sp]
 80178f4:	f9bd a002 	ldrsh.w	sl, [sp, #2]
 80178f8:	f9bd 8006 	ldrsh.w	r8, [sp, #6]
 80178fc:	f003 fc42 	bl	801b184 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017900:	4284      	cmp	r4, r0
 8017902:	d10d      	bne.n	8017920 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x64>
 8017904:	f9b9 5008 	ldrsh.w	r5, [r9, #8]
 8017908:	4658      	mov	r0, fp
 801790a:	f003 fc75 	bl	801b1f8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801790e:	4580      	cmp	r8, r0
 8017910:	d12a      	bne.n	8017968 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0xac>
 8017912:	f9b9 300a 	ldrsh.w	r3, [r9, #10]
 8017916:	8037      	strh	r7, [r6, #0]
 8017918:	f8a6 a002 	strh.w	sl, [r6, #2]
 801791c:	80b5      	strh	r5, [r6, #4]
 801791e:	e7d9      	b.n	80178d4 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x18>
 8017920:	f8b9 502a 	ldrh.w	r5, [r9, #42]	; 0x2a
 8017924:	4658      	mov	r0, fp
 8017926:	f003 fc2d 	bl	801b184 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801792a:	f9b9 2008 	ldrsh.w	r2, [r9, #8]
 801792e:	1b7f      	subs	r7, r7, r5
 8017930:	b2a3      	uxth	r3, r4
 8017932:	b2bd      	uxth	r5, r7
 8017934:	b22f      	sxth	r7, r5
 8017936:	4428      	add	r0, r5
 8017938:	2f00      	cmp	r7, #0
 801793a:	b280      	uxth	r0, r0
 801793c:	bfb8      	it	lt
 801793e:	18ed      	addlt	r5, r5, r3
 8017940:	4403      	add	r3, r0
 8017942:	bfac      	ite	ge
 8017944:	4625      	movge	r5, r4
 8017946:	2700      	movlt	r7, #0
 8017948:	b29b      	uxth	r3, r3
 801794a:	bfb8      	it	lt
 801794c:	b22d      	sxthlt	r5, r5
 801794e:	b219      	sxth	r1, r3
 8017950:	bfb8      	it	lt
 8017952:	ea25 75e5 	biclt.w	r5, r5, r5, asr #31
 8017956:	4291      	cmp	r1, r2
 8017958:	bfc4      	itt	gt
 801795a:	1a9c      	subgt	r4, r3, r2
 801795c:	b224      	sxthgt	r4, r4
 801795e:	42ac      	cmp	r4, r5
 8017960:	bfc4      	itt	gt
 8017962:	b207      	sxthgt	r7, r0
 8017964:	4625      	movgt	r5, r4
 8017966:	e7cf      	b.n	8017908 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x4c>
 8017968:	f8b9 402c 	ldrh.w	r4, [r9, #44]	; 0x2c
 801796c:	4658      	mov	r0, fp
 801796e:	f003 fc43 	bl	801b1f8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017972:	f9b9 100a 	ldrsh.w	r1, [r9, #10]
 8017976:	ebaa 0404 	sub.w	r4, sl, r4
 801797a:	fa1f f288 	uxth.w	r2, r8
 801797e:	b2a4      	uxth	r4, r4
 8017980:	fa0f fa84 	sxth.w	sl, r4
 8017984:	4420      	add	r0, r4
 8017986:	f1ba 0f00 	cmp.w	sl, #0
 801798a:	b280      	uxth	r0, r0
 801798c:	bfb8      	it	lt
 801798e:	18a3      	addlt	r3, r4, r2
 8017990:	4402      	add	r2, r0
 8017992:	bfac      	ite	ge
 8017994:	4643      	movge	r3, r8
 8017996:	f04f 0a00 	movlt.w	sl, #0
 801799a:	b292      	uxth	r2, r2
 801799c:	bfb8      	it	lt
 801799e:	b21b      	sxthlt	r3, r3
 80179a0:	b214      	sxth	r4, r2
 80179a2:	bfb8      	it	lt
 80179a4:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 80179a8:	428c      	cmp	r4, r1
 80179aa:	bfc4      	itt	gt
 80179ac:	eba2 0801 	subgt.w	r8, r2, r1
 80179b0:	fa0f f888 	sxthgt.w	r8, r8
 80179b4:	4543      	cmp	r3, r8
 80179b6:	bfbc      	itt	lt
 80179b8:	fa0f fa80 	sxthlt.w	sl, r0
 80179bc:	4643      	movlt	r3, r8
 80179be:	e7aa      	b.n	8017916 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x5a>

080179c0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 80179c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80179c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80179c8:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 80179ca:	4604      	mov	r4, r0
 80179cc:	429a      	cmp	r2, r3
 80179ce:	d018      	beq.n	8017a02 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x42>
 80179d0:	f100 0526 	add.w	r5, r0, #38	; 0x26
 80179d4:	4628      	mov	r0, r5
 80179d6:	f7f7 fc67 	bl	800f2a8 <_ZNK8touchgfx9TypedText7getFontEv>
 80179da:	6803      	ldr	r3, [r0, #0]
 80179dc:	4606      	mov	r6, r0
 80179de:	4628      	mov	r0, r5
 80179e0:	69df      	ldr	r7, [r3, #28]
 80179e2:	f7f7 fc7d 	bl	800f2e0 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 80179e6:	4680      	mov	r8, r0
 80179e8:	4628      	mov	r0, r5
 80179ea:	f7f8 ff77 	bl	80108dc <_ZNK8touchgfx9TypedText7getTextEv>
 80179ee:	2300      	movs	r3, #0
 80179f0:	4602      	mov	r2, r0
 80179f2:	4641      	mov	r1, r8
 80179f4:	9300      	str	r3, [sp, #0]
 80179f6:	4630      	mov	r0, r6
 80179f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80179fa:	47b8      	blx	r7
 80179fc:	b002      	add	sp, #8
 80179fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a02:	2000      	movs	r0, #0
 8017a04:	e7fa      	b.n	80179fc <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x3c>

08017a06 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 8017a06:	b570      	push	{r4, r5, r6, lr}
 8017a08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017a0c:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8017a0e:	4604      	mov	r4, r0
 8017a10:	429a      	cmp	r2, r3
 8017a12:	d00c      	beq.n	8017a2e <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x28>
 8017a14:	f850 3b26 	ldr.w	r3, [r0], #38
 8017a18:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 8017a1a:	f7f8 ff5f 	bl	80108dc <_ZNK8touchgfx9TypedText7getTextEv>
 8017a1e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8017a20:	4601      	mov	r1, r0
 8017a22:	46ac      	mov	ip, r5
 8017a24:	4620      	mov	r0, r4
 8017a26:	2300      	movs	r3, #0
 8017a28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017a2c:	4760      	bx	ip
 8017a2e:	2000      	movs	r0, #0
 8017a30:	bd70      	pop	{r4, r5, r6, pc}
	...

08017a34 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 8017a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017a3c:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 8017a3e:	b08d      	sub	sp, #52	; 0x34
 8017a40:	4604      	mov	r4, r0
 8017a42:	429e      	cmp	r6, r3
 8017a44:	460f      	mov	r7, r1
 8017a46:	d048      	beq.n	8017ada <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 8017a48:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8017a4c:	4628      	mov	r0, r5
 8017a4e:	f7f7 fc2b 	bl	800f2a8 <_ZNK8touchgfx9TypedText7getFontEv>
 8017a52:	4680      	mov	r8, r0
 8017a54:	2800      	cmp	r0, #0
 8017a56:	d040      	beq.n	8017ada <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 8017a58:	4628      	mov	r0, r5
 8017a5a:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 8017a5e:	f7f7 fc57 	bl	800f310 <_ZNK8touchgfx9TypedText11assertValidEv>
 8017a62:	4b1f      	ldr	r3, [pc, #124]	; (8017ae0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xac>)
 8017a64:	4628      	mov	r0, r5
 8017a66:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 8017a6a:	681b      	ldr	r3, [r3, #0]
 8017a6c:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 8017a70:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8017a74:	785e      	ldrb	r6, [r3, #1]
 8017a76:	f7f7 fc33 	bl	800f2e0 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8017a7a:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8017a7e:	f3c6 0601 	ubfx	r6, r6, #0, #2
 8017a82:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8017a84:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 8017a88:	f88d 6020 	strb.w	r6, [sp, #32]
 8017a8c:	ae05      	add	r6, sp, #20
 8017a8e:	9309      	str	r3, [sp, #36]	; 0x24
 8017a90:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 8017a94:	f8cd 801c 	str.w	r8, [sp, #28]
 8017a98:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8017a9c:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 8017aa0:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8017aa4:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 8017aa8:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8017aac:	f7f7 ffdc 	bl	800fa68 <_ZN8touchgfx3HAL3lcdEv>
 8017ab0:	4621      	mov	r1, r4
 8017ab2:	4680      	mov	r8, r0
 8017ab4:	4630      	mov	r0, r6
 8017ab6:	f001 fd98 	bl	80195ea <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017aba:	4628      	mov	r0, r5
 8017abc:	f7f8 ff0e 	bl	80108dc <_ZNK8touchgfx9TypedText7getTextEv>
 8017ac0:	2300      	movs	r3, #0
 8017ac2:	9303      	str	r3, [sp, #12]
 8017ac4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017ac6:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8017aca:	ab07      	add	r3, sp, #28
 8017acc:	4640      	mov	r0, r8
 8017ace:	9300      	str	r3, [sp, #0]
 8017ad0:	463b      	mov	r3, r7
 8017ad2:	e896 0006 	ldmia.w	r6, {r1, r2}
 8017ad6:	f000 faa9 	bl	801802c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8017ada:	b00d      	add	sp, #52	; 0x34
 8017adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ae0:	2000bd0c 	.word	0x2000bd0c

08017ae4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8017ae4:	b570      	push	{r4, r5, r6, lr}
 8017ae6:	4605      	mov	r5, r0
 8017ae8:	880b      	ldrh	r3, [r1, #0]
 8017aea:	4604      	mov	r4, r0
 8017aec:	84c3      	strh	r3, [r0, #38]	; 0x26
 8017aee:	f855 3b26 	ldr.w	r3, [r5], #38
 8017af2:	4628      	mov	r0, r5
 8017af4:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 8017af6:	f003 fb45 	bl	801b184 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017afa:	b201      	sxth	r1, r0
 8017afc:	4620      	mov	r0, r4
 8017afe:	47b0      	blx	r6
 8017b00:	6823      	ldr	r3, [r4, #0]
 8017b02:	4628      	mov	r0, r5
 8017b04:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 8017b06:	f003 fb77 	bl	801b1f8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017b0a:	b201      	sxth	r1, r0
 8017b0c:	4620      	mov	r0, r4
 8017b0e:	47b0      	blx	r6
 8017b10:	4628      	mov	r0, r5
 8017b12:	f003 fc05 	bl	801b320 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8017b16:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
 8017b1a:	bd70      	pop	{r4, r5, r6, pc}

08017b1c <_ZNK8touchgfx5Image12getSolidRectEv>:
 8017b1c:	b510      	push	{r4, lr}
 8017b1e:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8017b22:	4604      	mov	r4, r0
 8017b24:	2bff      	cmp	r3, #255	; 0xff
 8017b26:	d006      	beq.n	8017b36 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8017b28:	2300      	movs	r3, #0
 8017b2a:	8003      	strh	r3, [r0, #0]
 8017b2c:	8043      	strh	r3, [r0, #2]
 8017b2e:	8083      	strh	r3, [r0, #4]
 8017b30:	80c3      	strh	r3, [r0, #6]
 8017b32:	4620      	mov	r0, r4
 8017b34:	bd10      	pop	{r4, pc}
 8017b36:	3126      	adds	r1, #38	; 0x26
 8017b38:	f003 fb98 	bl	801b26c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8017b3c:	e7f9      	b.n	8017b32 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>
	...

08017b40 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8017b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b44:	4604      	mov	r4, r0
 8017b46:	b088      	sub	sp, #32
 8017b48:	2500      	movs	r5, #0
 8017b4a:	460f      	mov	r7, r1
 8017b4c:	f854 3b26 	ldr.w	r3, [r4], #38
 8017b50:	a904      	add	r1, sp, #16
 8017b52:	4606      	mov	r6, r0
 8017b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b56:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8017b5a:	4798      	blx	r3
 8017b5c:	4620      	mov	r0, r4
 8017b5e:	f003 fb11 	bl	801b184 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017b62:	4680      	mov	r8, r0
 8017b64:	4620      	mov	r0, r4
 8017b66:	f003 fb47 	bl	801b1f8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017b6a:	9506      	str	r5, [sp, #24]
 8017b6c:	ad06      	add	r5, sp, #24
 8017b6e:	f8ad 001e 	strh.w	r0, [sp, #30]
 8017b72:	4639      	mov	r1, r7
 8017b74:	f8ad 801c 	strh.w	r8, [sp, #28]
 8017b78:	4628      	mov	r0, r5
 8017b7a:	f7fd fef5 	bl	8015968 <_ZN8touchgfx4RectaNERKS0_>
 8017b7e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8017b82:	b1c3      	cbz	r3, 8017bb6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 8017b84:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8017b88:	b1ab      	cbz	r3, 8017bb6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 8017b8a:	4b0c      	ldr	r3, [pc, #48]	; (8017bbc <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7c>)
 8017b8c:	681b      	ldr	r3, [r3, #0]
 8017b8e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8017b92:	b10a      	cbz	r2, 8017b98 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x58>
 8017b94:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8017b96:	b900      	cbnz	r0, 8017b9a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5a>
 8017b98:	6898      	ldr	r0, [r3, #8]
 8017b9a:	2701      	movs	r7, #1
 8017b9c:	6801      	ldr	r1, [r0, #0]
 8017b9e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8017ba2:	9702      	str	r7, [sp, #8]
 8017ba4:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 8017ba8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8017bac:	e9cd 5600 	strd	r5, r6, [sp]
 8017bb0:	68cd      	ldr	r5, [r1, #12]
 8017bb2:	4621      	mov	r1, r4
 8017bb4:	47a8      	blx	r5
 8017bb6:	b008      	add	sp, #32
 8017bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017bbc:	2000bc7c 	.word	0x2000bc7c

08017bc0 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 8017bc0:	4b02      	ldr	r3, [pc, #8]	; (8017bcc <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 8017bc2:	6018      	str	r0, [r3, #0]
 8017bc4:	4b02      	ldr	r3, [pc, #8]	; (8017bd0 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 8017bc6:	6019      	str	r1, [r3, #0]
 8017bc8:	4770      	bx	lr
 8017bca:	bf00      	nop
 8017bcc:	2000bc84 	.word	0x2000bc84
 8017bd0:	2000bc98 	.word	0x2000bc98

08017bd4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 8017bd4:	b538      	push	{r3, r4, r5, lr}
 8017bd6:	4c2b      	ldr	r4, [pc, #172]	; (8017c84 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 8017bd8:	4b2b      	ldr	r3, [pc, #172]	; (8017c88 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 8017bda:	6821      	ldr	r1, [r4, #0]
 8017bdc:	681a      	ldr	r2, [r3, #0]
 8017bde:	4281      	cmp	r1, r0
 8017be0:	4d2a      	ldr	r5, [pc, #168]	; (8017c8c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 8017be2:	492b      	ldr	r1, [pc, #172]	; (8017c90 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 8017be4:	d108      	bne.n	8017bf8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 8017be6:	682b      	ldr	r3, [r5, #0]
 8017be8:	4293      	cmp	r3, r2
 8017bea:	d105      	bne.n	8017bf8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 8017bec:	6808      	ldr	r0, [r1, #0]
 8017bee:	280f      	cmp	r0, #15
 8017bf0:	bf94      	ite	ls
 8017bf2:	2000      	movls	r0, #0
 8017bf4:	2001      	movhi	r0, #1
 8017bf6:	bd38      	pop	{r3, r4, r5, pc}
 8017bf8:	4b26      	ldr	r3, [pc, #152]	; (8017c94 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 8017bfa:	6020      	str	r0, [r4, #0]
 8017bfc:	681b      	ldr	r3, [r3, #0]
 8017bfe:	602a      	str	r2, [r5, #0]
 8017c00:	4298      	cmp	r0, r3
 8017c02:	d905      	bls.n	8017c10 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 8017c04:	4b24      	ldr	r3, [pc, #144]	; (8017c98 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8017c06:	2137      	movs	r1, #55	; 0x37
 8017c08:	4a24      	ldr	r2, [pc, #144]	; (8017c9c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8017c0a:	4825      	ldr	r0, [pc, #148]	; (8017ca0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 8017c0c:	f00d f80c 	bl	8024c28 <__assert_func>
 8017c10:	f010 0403 	ands.w	r4, r0, #3
 8017c14:	bf1f      	itttt	ne
 8017c16:	f1c4 0504 	rsbne	r5, r4, #4
 8017c1a:	3b04      	subne	r3, #4
 8017c1c:	1952      	addne	r2, r2, r5
 8017c1e:	191b      	addne	r3, r3, r4
 8017c20:	4d20      	ldr	r5, [pc, #128]	; (8017ca4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 8017c22:	4402      	add	r2, r0
 8017c24:	1a1b      	subs	r3, r3, r0
 8017c26:	3001      	adds	r0, #1
 8017c28:	602a      	str	r2, [r5, #0]
 8017c2a:	f020 0401 	bic.w	r4, r0, #1
 8017c2e:	42a3      	cmp	r3, r4
 8017c30:	d203      	bcs.n	8017c3a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 8017c32:	4b19      	ldr	r3, [pc, #100]	; (8017c98 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8017c34:	214a      	movs	r1, #74	; 0x4a
 8017c36:	4a19      	ldr	r2, [pc, #100]	; (8017c9c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8017c38:	e7e7      	b.n	8017c0a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8017c3a:	f010 0002 	ands.w	r0, r0, #2
 8017c3e:	bf1f      	itttt	ne
 8017c40:	f1c0 0504 	rsbne	r5, r0, #4
 8017c44:	1952      	addne	r2, r2, r5
 8017c46:	1f05      	subne	r5, r0, #4
 8017c48:	195b      	addne	r3, r3, r5
 8017c4a:	4422      	add	r2, r4
 8017c4c:	4d16      	ldr	r5, [pc, #88]	; (8017ca8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 8017c4e:	1b1b      	subs	r3, r3, r4
 8017c50:	602a      	str	r2, [r5, #0]
 8017c52:	429c      	cmp	r4, r3
 8017c54:	d903      	bls.n	8017c5e <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 8017c56:	4b10      	ldr	r3, [pc, #64]	; (8017c98 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8017c58:	215d      	movs	r1, #93	; 0x5d
 8017c5a:	4a10      	ldr	r2, [pc, #64]	; (8017c9c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8017c5c:	e7d5      	b.n	8017c0a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8017c5e:	b120      	cbz	r0, 8017c6a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 8017c60:	f1c0 0504 	rsb	r5, r0, #4
 8017c64:	3804      	subs	r0, #4
 8017c66:	442a      	add	r2, r5
 8017c68:	4403      	add	r3, r0
 8017c6a:	1b1b      	subs	r3, r3, r4
 8017c6c:	4422      	add	r2, r4
 8017c6e:	480f      	ldr	r0, [pc, #60]	; (8017cac <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 8017c70:	2b0f      	cmp	r3, #15
 8017c72:	600b      	str	r3, [r1, #0]
 8017c74:	6002      	str	r2, [r0, #0]
 8017c76:	d803      	bhi.n	8017c80 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 8017c78:	4b0d      	ldr	r3, [pc, #52]	; (8017cb0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 8017c7a:	2170      	movs	r1, #112	; 0x70
 8017c7c:	4a07      	ldr	r2, [pc, #28]	; (8017c9c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8017c7e:	e7c4      	b.n	8017c0a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8017c80:	2001      	movs	r0, #1
 8017c82:	e7b8      	b.n	8017bf6 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 8017c84:	2000bc8c 	.word	0x2000bc8c
 8017c88:	2000bc84 	.word	0x2000bc84
 8017c8c:	2000bc94 	.word	0x2000bc94
 8017c90:	2000bc9c 	.word	0x2000bc9c
 8017c94:	2000bc98 	.word	0x2000bc98
 8017c98:	080283b4 	.word	0x080283b4
 8017c9c:	0802847c 	.word	0x0802847c
 8017ca0:	080283ed 	.word	0x080283ed
 8017ca4:	2000bca0 	.word	0x2000bca0
 8017ca8:	2000bc90 	.word	0x2000bc90
 8017cac:	2000bc88 	.word	0x2000bc88
 8017cb0:	08028437 	.word	0x08028437

08017cb4 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 8017cb4:	4b04      	ldr	r3, [pc, #16]	; (8017cc8 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 8017cb6:	6818      	ldr	r0, [r3, #0]
 8017cb8:	b120      	cbz	r0, 8017cc4 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 8017cba:	4b04      	ldr	r3, [pc, #16]	; (8017ccc <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 8017cbc:	6818      	ldr	r0, [r3, #0]
 8017cbe:	3000      	adds	r0, #0
 8017cc0:	bf18      	it	ne
 8017cc2:	2001      	movne	r0, #1
 8017cc4:	4770      	bx	lr
 8017cc6:	bf00      	nop
 8017cc8:	2000bc84 	.word	0x2000bc84
 8017ccc:	2000bc98 	.word	0x2000bc98

08017cd0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 8017cd0:	4b01      	ldr	r3, [pc, #4]	; (8017cd8 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 8017cd2:	6818      	ldr	r0, [r3, #0]
 8017cd4:	4770      	bx	lr
 8017cd6:	bf00      	nop
 8017cd8:	2000bc8c 	.word	0x2000bc8c

08017cdc <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 8017cdc:	4b01      	ldr	r3, [pc, #4]	; (8017ce4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 8017cde:	6818      	ldr	r0, [r3, #0]
 8017ce0:	4770      	bx	lr
 8017ce2:	bf00      	nop
 8017ce4:	2000bc94 	.word	0x2000bc94

08017ce8 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 8017ce8:	4b01      	ldr	r3, [pc, #4]	; (8017cf0 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 8017cea:	6818      	ldr	r0, [r3, #0]
 8017cec:	4770      	bx	lr
 8017cee:	bf00      	nop
 8017cf0:	2000bca0 	.word	0x2000bca0

08017cf4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 8017cf4:	4b01      	ldr	r3, [pc, #4]	; (8017cfc <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 8017cf6:	6818      	ldr	r0, [r3, #0]
 8017cf8:	4770      	bx	lr
 8017cfa:	bf00      	nop
 8017cfc:	2000bc90 	.word	0x2000bc90

08017d00 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8017d00:	4b01      	ldr	r3, [pc, #4]	; (8017d08 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8017d02:	6818      	ldr	r0, [r3, #0]
 8017d04:	4770      	bx	lr
 8017d06:	bf00      	nop
 8017d08:	2000bc88 	.word	0x2000bc88

08017d0c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8017d0c:	4b01      	ldr	r3, [pc, #4]	; (8017d14 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 8017d0e:	6818      	ldr	r0, [r3, #0]
 8017d10:	4770      	bx	lr
 8017d12:	bf00      	nop
 8017d14:	2000bc9c 	.word	0x2000bc9c

08017d18 <_ZN8touchgfx3LCD4initEv>:
 8017d18:	4770      	bx	lr

08017d1a <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8017d1a:	2000      	movs	r0, #0
 8017d1c:	4770      	bx	lr

08017d1e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8017d1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d22:	b091      	sub	sp, #68	; 0x44
 8017d24:	4699      	mov	r9, r3
 8017d26:	4617      	mov	r7, r2
 8017d28:	2500      	movs	r5, #0
 8017d2a:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
 8017d2e:	4680      	mov	r8, r0
 8017d30:	a80e      	add	r0, sp, #56	; 0x38
 8017d32:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8017d34:	f9ba 2008 	ldrsh.w	r2, [sl, #8]
 8017d38:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 8017d3c:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8017d40:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8017d44:	910d      	str	r1, [sp, #52]	; 0x34
 8017d46:	950e      	str	r5, [sp, #56]	; 0x38
 8017d48:	f000 fe3a 	bl	80189c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017d4c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017d4e:	f8d9 6000 	ldr.w	r6, [r9]
 8017d52:	6818      	ldr	r0, [r3, #0]
 8017d54:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8017d56:	f9b4 b000 	ldrsh.w	fp, [r4]
 8017d5a:	1b80      	subs	r0, r0, r6
 8017d5c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017d60:	eb02 0c06 	add.w	ip, r2, r6
 8017d64:	ebab 0e0c 	sub.w	lr, fp, ip
 8017d68:	4570      	cmp	r0, lr
 8017d6a:	f340 80bc 	ble.w	8017ee6 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 8017d6e:	88a1      	ldrh	r1, [r4, #4]
 8017d70:	4459      	add	r1, fp
 8017d72:	b209      	sxth	r1, r1
 8017d74:	458c      	cmp	ip, r1
 8017d76:	f300 80b6 	bgt.w	8017ee6 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 8017d7a:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 8017d7e:	ed97 4a09 	vldr	s8, [r7, #36]	; 0x24
 8017d82:	4283      	cmp	r3, r0
 8017d84:	edd7 4a0b 	vldr	s9, [r7, #44]	; 0x2c
 8017d88:	edd9 6a07 	vldr	s13, [r9, #28]
 8017d8c:	bfa8      	it	ge
 8017d8e:	4603      	movge	r3, r0
 8017d90:	edd9 1a0a 	vldr	s3, [r9, #40]	; 0x28
 8017d94:	ed99 2a0d 	vldr	s4, [r9, #52]	; 0x34
 8017d98:	45e3      	cmp	fp, ip
 8017d9a:	ee07 3a90 	vmov	s15, r3
 8017d9e:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8017da2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8017da6:	ee25 4a04 	vmul.f32	s8, s10, s8
 8017daa:	ee65 4a24 	vmul.f32	s9, s10, s9
 8017dae:	ee25 5a27 	vmul.f32	s10, s10, s15
 8017db2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8017db6:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8017dba:	ee32 1a05 	vadd.f32	s2, s4, s10
 8017dbe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8017dc2:	ee36 0a84 	vadd.f32	s0, s13, s8
 8017dc6:	ee61 1a87 	vmul.f32	s3, s3, s14
 8017dca:	ee22 2a07 	vmul.f32	s4, s4, s14
 8017dce:	f340 808d 	ble.w	8017eec <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ce>
 8017dd2:	fb9e f5f3 	sdiv	r5, lr, r3
 8017dd6:	ee07 5a10 	vmov	s14, r5
 8017dda:	2d00      	cmp	r5, #0
 8017ddc:	fb03 e415 	mls	r4, r3, r5, lr
 8017de0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017de4:	eea7 0a04 	vfma.f32	s0, s14, s8
 8017de8:	eee7 0a24 	vfma.f32	s1, s14, s9
 8017dec:	eea7 1a05 	vfma.f32	s2, s14, s10
 8017df0:	dd12      	ble.n	8017e18 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfa>
 8017df2:	ee70 6a44 	vsub.f32	s13, s0, s8
 8017df6:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8017dfa:	ee31 2a45 	vsub.f32	s4, s2, s10
 8017dfe:	eef5 6a40 	vcmp.f32	s13, #0.0
 8017e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e06:	bf14      	ite	ne
 8017e08:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8017e0c:	eeb0 7a67 	vmoveq.f32	s14, s15
 8017e10:	ee61 1a87 	vmul.f32	s3, s3, s14
 8017e14:	ee22 2a07 	vmul.f32	s4, s4, s14
 8017e18:	fb05 f703 	mul.w	r7, r5, r3
 8017e1c:	1bc0      	subs	r0, r0, r7
 8017e1e:	443e      	add	r6, r7
 8017e20:	1997      	adds	r7, r2, r6
 8017e22:	4407      	add	r7, r0
 8017e24:	42b9      	cmp	r1, r7
 8017e26:	bfbc      	itt	lt
 8017e28:	1a88      	sublt	r0, r1, r2
 8017e2a:	1b80      	sublt	r0, r0, r6
 8017e2c:	2800      	cmp	r0, #0
 8017e2e:	dd5a      	ble.n	8017ee6 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 8017e30:	fb90 f1f3 	sdiv	r1, r0, r3
 8017e34:	fb03 0211 	mls	r2, r3, r1, r0
 8017e38:	b90a      	cbnz	r2, 8017e3e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x120>
 8017e3a:	3901      	subs	r1, #1
 8017e3c:	461a      	mov	r2, r3
 8017e3e:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8017e42:	f89d b07c 	ldrb.w	fp, [sp, #124]	; 0x7c
 8017e46:	44a4      	add	ip, r4
 8017e48:	2900      	cmp	r1, #0
 8017e4a:	bfcc      	ite	gt
 8017e4c:	469e      	movgt	lr, r3
 8017e4e:	4696      	movle	lr, r2
 8017e50:	fb03 c505 	mla	r5, r3, r5, ip
 8017e54:	eef0 6a42 	vmov.f32	s13, s4
 8017e58:	eeb0 7a61 	vmov.f32	s14, s3
 8017e5c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017e60:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8017e64:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8017e68:	ee21 3a23 	vmul.f32	s6, s2, s7
 8017e6c:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8017e70:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8017e74:	ee17 0a90 	vmov	r0, s15
 8017e78:	ee73 7a42 	vsub.f32	s15, s6, s4
 8017e7c:	fb90 f6f3 	sdiv	r6, r0, r3
 8017e80:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8017e84:	ee17 0a90 	vmov	r0, s15
 8017e88:	fb90 f7f3 	sdiv	r7, r0, r3
 8017e8c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8017e90:	f8d0 8000 	ldr.w	r8, [r0]
 8017e94:	900c      	str	r0, [sp, #48]	; 0x30
 8017e96:	981c      	ldr	r0, [sp, #112]	; 0x70
 8017e98:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8017e9c:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 8017ea0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8017ea4:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8017ea8:	f8cd a020 	str.w	sl, [sp, #32]
 8017eac:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 8017eb0:	980d      	ldr	r0, [sp, #52]	; 0x34
 8017eb2:	f8d9 9014 	ldr.w	r9, [r9, #20]
 8017eb6:	9603      	str	r6, [sp, #12]
 8017eb8:	44ca      	add	sl, r9
 8017eba:	9506      	str	r5, [sp, #24]
 8017ebc:	e9cd 7004 	strd	r7, r0, [sp, #16]
 8017ec0:	ee16 0a90 	vmov	r0, s13
 8017ec4:	f8cd a01c 	str.w	sl, [sp, #28]
 8017ec8:	fb07 0704 	mla	r7, r7, r4, r0
 8017ecc:	ee17 0a10 	vmov	r0, s14
 8017ed0:	fb06 0604 	mla	r6, r6, r4, r0
 8017ed4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8017ed6:	9702      	str	r7, [sp, #8]
 8017ed8:	e9cd 3600 	strd	r3, r6, [sp]
 8017edc:	ebae 0304 	sub.w	r3, lr, r4
 8017ee0:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8017ee4:	47a8      	blx	r5
 8017ee6:	b011      	add	sp, #68	; 0x44
 8017ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017eec:	462c      	mov	r4, r5
 8017eee:	e797      	b.n	8017e20 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x102>

08017ef0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 8017ef0:	b570      	push	{r4, r5, r6, lr}
 8017ef2:	4604      	mov	r4, r0
 8017ef4:	2500      	movs	r5, #0
 8017ef6:	9804      	ldr	r0, [sp, #16]
 8017ef8:	7223      	strb	r3, [r4, #8]
 8017efa:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8017efe:	8025      	strh	r5, [r4, #0]
 8017f00:	6061      	str	r1, [r4, #4]
 8017f02:	7263      	strb	r3, [r4, #9]
 8017f04:	60e0      	str	r0, [r4, #12]
 8017f06:	8222      	strh	r2, [r4, #16]
 8017f08:	8265      	strh	r5, [r4, #18]
 8017f0a:	82a5      	strh	r5, [r4, #20]
 8017f0c:	82e5      	strh	r5, [r4, #22]
 8017f0e:	8325      	strh	r5, [r4, #24]
 8017f10:	8365      	strh	r5, [r4, #26]
 8017f12:	83a5      	strh	r5, [r4, #28]
 8017f14:	77a5      	strb	r5, [r4, #30]
 8017f16:	6803      	ldr	r3, [r0, #0]
 8017f18:	695b      	ldr	r3, [r3, #20]
 8017f1a:	4798      	blx	r3
 8017f1c:	4606      	mov	r6, r0
 8017f1e:	b1f8      	cbz	r0, 8017f60 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8017f20:	68e0      	ldr	r0, [r4, #12]
 8017f22:	4631      	mov	r1, r6
 8017f24:	6803      	ldr	r3, [r0, #0]
 8017f26:	68db      	ldr	r3, [r3, #12]
 8017f28:	4798      	blx	r3
 8017f2a:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8017f2e:	4605      	mov	r5, r0
 8017f30:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017f34:	7a83      	ldrb	r3, [r0, #10]
 8017f36:	4313      	orrs	r3, r2
 8017f38:	83a3      	strh	r3, [r4, #28]
 8017f3a:	7a63      	ldrb	r3, [r4, #9]
 8017f3c:	2b04      	cmp	r3, #4
 8017f3e:	d10f      	bne.n	8017f60 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8017f40:	68e0      	ldr	r0, [r4, #12]
 8017f42:	462a      	mov	r2, r5
 8017f44:	4631      	mov	r1, r6
 8017f46:	6803      	ldr	r3, [r0, #0]
 8017f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017f4a:	4798      	blx	r3
 8017f4c:	f995 300d 	ldrsb.w	r3, [r5, #13]
 8017f50:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017f54:	7aab      	ldrb	r3, [r5, #10]
 8017f56:	4313      	orrs	r3, r2
 8017f58:	4418      	add	r0, r3
 8017f5a:	8ba3      	ldrh	r3, [r4, #28]
 8017f5c:	4418      	add	r0, r3
 8017f5e:	83a0      	strh	r0, [r4, #28]
 8017f60:	4620      	mov	r0, r4
 8017f62:	bd70      	pop	{r4, r5, r6, pc}

08017f64 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8017f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f68:	2400      	movs	r4, #0
 8017f6a:	b085      	sub	sp, #20
 8017f6c:	4681      	mov	r9, r0
 8017f6e:	460f      	mov	r7, r1
 8017f70:	4692      	mov	sl, r2
 8017f72:	469b      	mov	fp, r3
 8017f74:	46a0      	mov	r8, r4
 8017f76:	4626      	mov	r6, r4
 8017f78:	4554      	cmp	r4, sl
 8017f7a:	da21      	bge.n	8017fc0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 8017f7c:	2300      	movs	r3, #0
 8017f7e:	463a      	mov	r2, r7
 8017f80:	4659      	mov	r1, fp
 8017f82:	4648      	mov	r0, r9
 8017f84:	9303      	str	r3, [sp, #12]
 8017f86:	ab03      	add	r3, sp, #12
 8017f88:	f002 fb52 	bl	801a630 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017f8c:	4605      	mov	r5, r0
 8017f8e:	b1b8      	cbz	r0, 8017fc0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 8017f90:	280a      	cmp	r0, #10
 8017f92:	d015      	beq.n	8017fc0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 8017f94:	9a03      	ldr	r2, [sp, #12]
 8017f96:	b182      	cbz	r2, 8017fba <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x56>
 8017f98:	f992 000d 	ldrsb.w	r0, [r2, #13]
 8017f9c:	4641      	mov	r1, r8
 8017f9e:	7a93      	ldrb	r3, [r2, #10]
 8017fa0:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8017fa4:	8895      	ldrh	r5, [r2, #4]
 8017fa6:	4303      	orrs	r3, r0
 8017fa8:	4638      	mov	r0, r7
 8017faa:	9301      	str	r3, [sp, #4]
 8017fac:	683b      	ldr	r3, [r7, #0]
 8017fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017fb0:	4798      	blx	r3
 8017fb2:	9b01      	ldr	r3, [sp, #4]
 8017fb4:	4418      	add	r0, r3
 8017fb6:	4406      	add	r6, r0
 8017fb8:	b2b6      	uxth	r6, r6
 8017fba:	3401      	adds	r4, #1
 8017fbc:	46a8      	mov	r8, r5
 8017fbe:	e7db      	b.n	8017f78 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x14>
 8017fc0:	4630      	mov	r0, r6
 8017fc2:	b005      	add	sp, #20
 8017fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017fc8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8017fc8:	2a02      	cmp	r2, #2
 8017fca:	b530      	push	{r4, r5, lr}
 8017fcc:	d011      	beq.n	8017ff2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8017fce:	2a03      	cmp	r2, #3
 8017fd0:	d01c      	beq.n	801800c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8017fd2:	2a01      	cmp	r2, #1
 8017fd4:	d10c      	bne.n	8017ff0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8017fd6:	888b      	ldrh	r3, [r1, #4]
 8017fd8:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8017fdc:	8801      	ldrh	r1, [r0, #0]
 8017fde:	1a9b      	subs	r3, r3, r2
 8017fe0:	8844      	ldrh	r4, [r0, #2]
 8017fe2:	1a5b      	subs	r3, r3, r1
 8017fe4:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8017fe8:	8004      	strh	r4, [r0, #0]
 8017fea:	8043      	strh	r3, [r0, #2]
 8017fec:	8081      	strh	r1, [r0, #4]
 8017fee:	80c2      	strh	r2, [r0, #6]
 8017ff0:	bd30      	pop	{r4, r5, pc}
 8017ff2:	88cb      	ldrh	r3, [r1, #6]
 8017ff4:	88c2      	ldrh	r2, [r0, #6]
 8017ff6:	1a9b      	subs	r3, r3, r2
 8017ff8:	8842      	ldrh	r2, [r0, #2]
 8017ffa:	1a9b      	subs	r3, r3, r2
 8017ffc:	888a      	ldrh	r2, [r1, #4]
 8017ffe:	8881      	ldrh	r1, [r0, #4]
 8018000:	8043      	strh	r3, [r0, #2]
 8018002:	1a52      	subs	r2, r2, r1
 8018004:	8801      	ldrh	r1, [r0, #0]
 8018006:	1a52      	subs	r2, r2, r1
 8018008:	8002      	strh	r2, [r0, #0]
 801800a:	e7f1      	b.n	8017ff0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801800c:	88cb      	ldrh	r3, [r1, #6]
 801800e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8018012:	8841      	ldrh	r1, [r0, #2]
 8018014:	1a9b      	subs	r3, r3, r2
 8018016:	f9b0 5000 	ldrsh.w	r5, [r0]
 801801a:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801801e:	1a5b      	subs	r3, r3, r1
 8018020:	8045      	strh	r5, [r0, #2]
 8018022:	8082      	strh	r2, [r0, #4]
 8018024:	8003      	strh	r3, [r0, #0]
 8018026:	80c4      	strh	r4, [r0, #6]
 8018028:	e7e2      	b.n	8017ff0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
	...

0801802c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
 801802c:	b570      	push	{r4, r5, r6, lr}
 801802e:	b086      	sub	sp, #24
 8018030:	ac02      	add	r4, sp, #8
 8018032:	e884 0006 	stmia.w	r4, {r1, r2}
 8018036:	461a      	mov	r2, r3
 8018038:	ab0c      	add	r3, sp, #48	; 0x30
 801803a:	9305      	str	r3, [sp, #20]
 801803c:	4b0a      	ldr	r3, [pc, #40]	; (8018068 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz+0x3c>)
 801803e:	685d      	ldr	r5, [r3, #4]
 8018040:	1069      	asrs	r1, r5, #1
 8018042:	07ed      	lsls	r5, r5, #31
 8018044:	eb00 0601 	add.w	r6, r0, r1
 8018048:	bf46      	itte	mi
 801804a:	681b      	ldrmi	r3, [r3, #0]
 801804c:	5841      	ldrmi	r1, [r0, r1]
 801804e:	681d      	ldrpl	r5, [r3, #0]
 8018050:	4630      	mov	r0, r6
 8018052:	bf48      	it	mi
 8018054:	58cd      	ldrmi	r5, [r1, r3]
 8018056:	4621      	mov	r1, r4
 8018058:	9b05      	ldr	r3, [sp, #20]
 801805a:	9301      	str	r3, [sp, #4]
 801805c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801805e:	9300      	str	r3, [sp, #0]
 8018060:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018062:	47a8      	blx	r5
 8018064:	b006      	add	sp, #24
 8018066:	bd70      	pop	{r4, r5, r6, pc}
 8018068:	20000030 	.word	0x20000030

0801806c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801806c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018070:	b09d      	sub	sp, #116	; 0x74
 8018072:	9114      	str	r1, [sp, #80]	; 0x50
 8018074:	9315      	str	r3, [sp, #84]	; 0x54
 8018076:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8018078:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801807a:	8809      	ldrh	r1, [r1, #0]
 801807c:	889b      	ldrh	r3, [r3, #4]
 801807e:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8018080:	440b      	add	r3, r1
 8018082:	9210      	str	r2, [sp, #64]	; 0x40
 8018084:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 8018088:	b21b      	sxth	r3, r3
 801808a:	900f      	str	r0, [sp, #60]	; 0x3c
 801808c:	f89d b0a4 	ldrb.w	fp, [sp, #164]	; 0xa4
 8018090:	930e      	str	r3, [sp, #56]	; 0x38
 8018092:	6833      	ldr	r3, [r6, #0]
 8018094:	7a59      	ldrb	r1, [r3, #9]
 8018096:	7a1b      	ldrb	r3, [r3, #8]
 8018098:	9113      	str	r1, [sp, #76]	; 0x4c
 801809a:	9312      	str	r3, [sp, #72]	; 0x48
 801809c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801809e:	f9b3 4000 	ldrsh.w	r4, [r3]
 80180a2:	2a00      	cmp	r2, #0
 80180a4:	d059      	beq.n	801815a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xee>
 80180a6:	7c33      	ldrb	r3, [r6, #16]
 80180a8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80180aa:	2b04      	cmp	r3, #4
 80180ac:	bf14      	ite	ne
 80180ae:	2301      	movne	r3, #1
 80180b0:	2302      	moveq	r3, #2
 80180b2:	4413      	add	r3, r2
 80180b4:	f04f 0800 	mov.w	r8, #0
 80180b8:	930d      	str	r3, [sp, #52]	; 0x34
 80180ba:	4645      	mov	r5, r8
 80180bc:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80180c0:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 80180c4:	4293      	cmp	r3, r2
 80180c6:	da75      	bge.n	80181b4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x148>
 80180c8:	2300      	movs	r3, #0
 80180ca:	992b      	ldr	r1, [sp, #172]	; 0xac
 80180cc:	6832      	ldr	r2, [r6, #0]
 80180ce:	931a      	str	r3, [sp, #104]	; 0x68
 80180d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80180d2:	428b      	cmp	r3, r1
 80180d4:	db43      	blt.n	801815e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xf2>
 80180d6:	6813      	ldr	r3, [r2, #0]
 80180d8:	4610      	mov	r0, r2
 80180da:	695b      	ldr	r3, [r3, #20]
 80180dc:	4798      	blx	r3
 80180de:	4681      	mov	r9, r0
 80180e0:	6830      	ldr	r0, [r6, #0]
 80180e2:	aa1b      	add	r2, sp, #108	; 0x6c
 80180e4:	4649      	mov	r1, r9
 80180e6:	6803      	ldr	r3, [r0, #0]
 80180e8:	689f      	ldr	r7, [r3, #8]
 80180ea:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 80180ee:	47b8      	blx	r7
 80180f0:	901a      	str	r0, [sp, #104]	; 0x68
 80180f2:	f64f 6aff 	movw	sl, #65279	; 0xfeff
 80180f6:	45d1      	cmp	r9, sl
 80180f8:	d045      	beq.n	8018186 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 80180fa:	f242 070b 	movw	r7, #8203	; 0x200b
 80180fe:	45b9      	cmp	r9, r7
 8018100:	d041      	beq.n	8018186 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8018102:	f1b9 0f00 	cmp.w	r9, #0
 8018106:	f000 80ee 	beq.w	80182e6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 801810a:	f1b9 0f0a 	cmp.w	r9, #10
 801810e:	d057      	beq.n	80181c0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 8018110:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8018112:	b383      	cbz	r3, 8018176 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10a>
 8018114:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 8018118:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801811a:	2a00      	cmp	r2, #0
 801811c:	f000 80d2 	beq.w	80182c4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x258>
 8018120:	f1bb 0f00 	cmp.w	fp, #0
 8018124:	d100      	bne.n	8018128 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xbc>
 8018126:	4444      	add	r4, r8
 8018128:	f992 800d 	ldrsb.w	r8, [r2, #13]
 801812c:	f1bb 0f01 	cmp.w	fp, #1
 8018130:	f408 7380 	and.w	r3, r8, #256	; 0x100
 8018134:	f892 800a 	ldrb.w	r8, [r2, #10]
 8018138:	ea48 0803 	orr.w	r8, r8, r3
 801813c:	d128      	bne.n	8018190 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x124>
 801813e:	eba4 0408 	sub.w	r4, r4, r8
 8018142:	2d00      	cmp	r5, #0
 8018144:	d143      	bne.n	80181ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 8018146:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018148:	eb08 0304 	add.w	r3, r8, r4
 801814c:	4413      	add	r3, r2
 801814e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8018150:	f9b2 2000 	ldrsh.w	r2, [r2]
 8018154:	4293      	cmp	r3, r2
 8018156:	da44      	bge.n	80181e2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8018158:	e02b      	b.n	80181b2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x146>
 801815a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801815c:	e7aa      	b.n	80180b4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x48>
 801815e:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 8018162:	4659      	mov	r1, fp
 8018164:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8018166:	9301      	str	r3, [sp, #4]
 8018168:	ab1b      	add	r3, sp, #108	; 0x6c
 801816a:	9300      	str	r3, [sp, #0]
 801816c:	ab1a      	add	r3, sp, #104	; 0x68
 801816e:	f002 fa93 	bl	801a698 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8018172:	4681      	mov	r9, r0
 8018174:	e7bd      	b.n	80180f2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 8018176:	6830      	ldr	r0, [r6, #0]
 8018178:	6803      	ldr	r3, [r0, #0]
 801817a:	691b      	ldr	r3, [r3, #16]
 801817c:	4798      	blx	r3
 801817e:	4550      	cmp	r0, sl
 8018180:	d001      	beq.n	8018186 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8018182:	42b8      	cmp	r0, r7
 8018184:	d1c8      	bne.n	8018118 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 8018186:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018188:	464d      	mov	r5, r9
 801818a:	3301      	adds	r3, #1
 801818c:	930c      	str	r3, [sp, #48]	; 0x30
 801818e:	e797      	b.n	80180c0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x54>
 8018190:	2d00      	cmp	r5, #0
 8018192:	f000 80aa 	beq.w	80182ea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27e>
 8018196:	f1bb 0f00 	cmp.w	fp, #0
 801819a:	d118      	bne.n	80181ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 801819c:	6830      	ldr	r0, [r6, #0]
 801819e:	4629      	mov	r1, r5
 80181a0:	6803      	ldr	r3, [r0, #0]
 80181a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80181a4:	4798      	blx	r3
 80181a6:	4404      	add	r4, r0
 80181a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80181aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80181ac:	1ae3      	subs	r3, r4, r3
 80181ae:	4293      	cmp	r3, r2
 80181b0:	dd17      	ble.n	80181e2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 80181b2:	464d      	mov	r5, r9
 80181b4:	2d00      	cmp	r5, #0
 80181b6:	f000 8096 	beq.w	80182e6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 80181ba:	2d0a      	cmp	r5, #10
 80181bc:	f040 8084 	bne.w	80182c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25c>
 80181c0:	250a      	movs	r5, #10
 80181c2:	fab5 f085 	clz	r0, r5
 80181c6:	0940      	lsrs	r0, r0, #5
 80181c8:	b01d      	add	sp, #116	; 0x74
 80181ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181ce:	6830      	ldr	r0, [r6, #0]
 80181d0:	4629      	mov	r1, r5
 80181d2:	6803      	ldr	r3, [r0, #0]
 80181d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80181d6:	4798      	blx	r3
 80181d8:	f1bb 0f01 	cmp.w	fp, #1
 80181dc:	eba4 0400 	sub.w	r4, r4, r0
 80181e0:	d0b1      	beq.n	8018146 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 80181e2:	981a      	ldr	r0, [sp, #104]	; 0x68
 80181e4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80181e6:	f990 1009 	ldrsb.w	r1, [r0, #9]
 80181ea:	f9b3 5000 	ldrsh.w	r5, [r3]
 80181ee:	7b43      	ldrb	r3, [r0, #13]
 80181f0:	4421      	add	r1, r4
 80181f2:	015b      	lsls	r3, r3, #5
 80181f4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80181f8:	7983      	ldrb	r3, [r0, #6]
 80181fa:	4313      	orrs	r3, r2
 80181fc:	440b      	add	r3, r1
 80181fe:	42ab      	cmp	r3, r5
 8018200:	dbc1      	blt.n	8018186 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8018202:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018204:	4299      	cmp	r1, r3
 8018206:	dabe      	bge.n	8018186 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8018208:	6830      	ldr	r0, [r6, #0]
 801820a:	42a5      	cmp	r5, r4
 801820c:	6803      	ldr	r3, [r0, #0]
 801820e:	bfcc      	ite	gt
 8018210:	1b2d      	subgt	r5, r5, r4
 8018212:	2500      	movle	r5, #0
 8018214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018216:	bfc8      	it	gt
 8018218:	b2ad      	uxthgt	r5, r5
 801821a:	4798      	blx	r3
 801821c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801821e:	4935      	ldr	r1, [pc, #212]	; (80182f4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>)
 8018220:	7b5a      	ldrb	r2, [r3, #13]
 8018222:	f893 e008 	ldrb.w	lr, [r3, #8]
 8018226:	f012 0f40 	tst.w	r2, #64	; 0x40
 801822a:	bf18      	it	ne
 801822c:	468c      	movne	ip, r1
 801822e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8018230:	bf08      	it	eq
 8018232:	f04f 0c00 	moveq.w	ip, #0
 8018236:	4408      	add	r0, r1
 8018238:	00d1      	lsls	r1, r2, #3
 801823a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801823e:	ea41 070e 	orr.w	r7, r1, lr
 8018242:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8018244:	ea4c 0707 	orr.w	r7, ip, r7
 8018248:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801824c:	1bc7      	subs	r7, r0, r7
 801824e:	b2bf      	uxth	r7, r7
 8018250:	fa0f fa87 	sxth.w	sl, r7
 8018254:	4551      	cmp	r1, sl
 8018256:	dd33      	ble.n	80182c0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x254>
 8018258:	0112      	lsls	r2, r2, #4
 801825a:	79d8      	ldrb	r0, [r3, #7]
 801825c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8018260:	4302      	orrs	r2, r0
 8018262:	4492      	add	sl, r2
 8018264:	4551      	cmp	r1, sl
 8018266:	dc8e      	bgt.n	8018186 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8018268:	1bcf      	subs	r7, r1, r7
 801826a:	468a      	mov	sl, r1
 801826c:	b2bf      	uxth	r7, r7
 801826e:	9317      	str	r3, [sp, #92]	; 0x5c
 8018270:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018272:	6830      	ldr	r0, [r6, #0]
 8018274:	681a      	ldr	r2, [r3, #0]
 8018276:	6801      	ldr	r1, [r0, #0]
 8018278:	6c53      	ldr	r3, [r2, #68]	; 0x44
 801827a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801827c:	9311      	str	r3, [sp, #68]	; 0x44
 801827e:	9216      	str	r2, [sp, #88]	; 0x58
 8018280:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8018282:	4788      	blx	r1
 8018284:	79b1      	ldrb	r1, [r6, #6]
 8018286:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018288:	910b      	str	r1, [sp, #44]	; 0x2c
 801828a:	7bb1      	ldrb	r1, [r6, #14]
 801828c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801828e:	910a      	str	r1, [sp, #40]	; 0x28
 8018290:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
 8018294:	9109      	str	r1, [sp, #36]	; 0x24
 8018296:	68b1      	ldr	r1, [r6, #8]
 8018298:	9305      	str	r3, [sp, #20]
 801829a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801829c:	9206      	str	r2, [sp, #24]
 801829e:	e9cd a501 	strd	sl, r5, [sp, #4]
 80182a2:	4425      	add	r5, r4
 80182a4:	e9cd 7303 	strd	r7, r3, [sp, #12]
 80182a8:	b22d      	sxth	r5, r5
 80182aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80182ac:	e9cd 0107 	strd	r0, r1, [sp, #28]
 80182b0:	9500      	str	r5, [sp, #0]
 80182b2:	9914      	ldr	r1, [sp, #80]	; 0x50
 80182b4:	681a      	ldr	r2, [r3, #0]
 80182b6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80182b8:	685b      	ldr	r3, [r3, #4]
 80182ba:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80182bc:	47a8      	blx	r5
 80182be:	e762      	b.n	8018186 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 80182c0:	2700      	movs	r7, #0
 80182c2:	e7d4      	b.n	801826e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x202>
 80182c4:	4690      	mov	r8, r2
 80182c6:	e75e      	b.n	8018186 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 80182c8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80182ca:	3401      	adds	r4, #1
 80182cc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80182ce:	429c      	cmp	r4, r3
 80182d0:	f6bf af77 	bge.w	80181c2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 80182d4:	4659      	mov	r1, fp
 80182d6:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80182d8:	f002 f96a 	bl	801a5b0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80182dc:	4605      	mov	r5, r0
 80182de:	b110      	cbz	r0, 80182e6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 80182e0:	280a      	cmp	r0, #10
 80182e2:	d1f2      	bne.n	80182ca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25e>
 80182e4:	e76c      	b.n	80181c0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 80182e6:	2500      	movs	r5, #0
 80182e8:	e76b      	b.n	80181c2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 80182ea:	f1bb 0f00 	cmp.w	fp, #0
 80182ee:	f43f af5b 	beq.w	80181a8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x13c>
 80182f2:	e776      	b.n	80181e2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 80182f4:	fffffe00 	.word	0xfffffe00

080182f8 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 80182f8:	b530      	push	{r4, r5, lr}
 80182fa:	8a44      	ldrh	r4, [r0, #18]
 80182fc:	8ac5      	ldrh	r5, [r0, #22]
 80182fe:	82c3      	strh	r3, [r0, #22]
 8018300:	442c      	add	r4, r5
 8018302:	1ae4      	subs	r4, r4, r3
 8018304:	8b03      	ldrh	r3, [r0, #24]
 8018306:	8244      	strh	r4, [r0, #18]
 8018308:	8a84      	ldrh	r4, [r0, #20]
 801830a:	4422      	add	r2, r4
 801830c:	440c      	add	r4, r1
 801830e:	1a59      	subs	r1, r3, r1
 8018310:	8342      	strh	r2, [r0, #26]
 8018312:	8284      	strh	r4, [r0, #20]
 8018314:	8301      	strh	r1, [r0, #24]
 8018316:	bd30      	pop	{r4, r5, pc}

08018318 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 8018318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801831c:	7a45      	ldrb	r5, [r0, #9]
 801831e:	b085      	sub	sp, #20
 8018320:	4604      	mov	r4, r0
 8018322:	4689      	mov	r9, r1
 8018324:	1eeb      	subs	r3, r5, #3
 8018326:	b2db      	uxtb	r3, r3
 8018328:	b329      	cbz	r1, 8018376 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5e>
 801832a:	2b01      	cmp	r3, #1
 801832c:	d921      	bls.n	8018372 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5a>
 801832e:	1e69      	subs	r1, r5, #1
 8018330:	f1d1 0b00 	rsbs	fp, r1, #0
 8018334:	eb4b 0b01 	adc.w	fp, fp, r1
 8018338:	1eaa      	subs	r2, r5, #2
 801833a:	2500      	movs	r5, #0
 801833c:	4253      	negs	r3, r2
 801833e:	9500      	str	r5, [sp, #0]
 8018340:	4153      	adcs	r3, r2
 8018342:	9301      	str	r3, [sp, #4]
 8018344:	2600      	movs	r6, #0
 8018346:	f242 080b 	movw	r8, #8203	; 0x200b
 801834a:	8266      	strh	r6, [r4, #18]
 801834c:	82a6      	strh	r6, [r4, #20]
 801834e:	2300      	movs	r3, #0
 8018350:	68e2      	ldr	r2, [r4, #12]
 8018352:	7a21      	ldrb	r1, [r4, #8]
 8018354:	9303      	str	r3, [sp, #12]
 8018356:	ab03      	add	r3, sp, #12
 8018358:	6860      	ldr	r0, [r4, #4]
 801835a:	8827      	ldrh	r7, [r4, #0]
 801835c:	f002 f968 	bl	801a630 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018360:	8020      	strh	r0, [r4, #0]
 8018362:	b9b0      	cbnz	r0, 8018392 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7a>
 8018364:	8b22      	ldrh	r2, [r4, #24]
 8018366:	2300      	movs	r3, #0
 8018368:	4611      	mov	r1, r2
 801836a:	4620      	mov	r0, r4
 801836c:	f7ff ffc4 	bl	80182f8 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8018370:	e062      	b.n	8018438 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 8018372:	468b      	mov	fp, r1
 8018374:	e7e0      	b.n	8018338 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x20>
 8018376:	2b01      	cmp	r3, #1
 8018378:	f105 35ff 	add.w	r5, r5, #4294967295
 801837c:	9101      	str	r1, [sp, #4]
 801837e:	468b      	mov	fp, r1
 8018380:	bf8c      	ite	hi
 8018382:	2300      	movhi	r3, #0
 8018384:	2301      	movls	r3, #1
 8018386:	2d01      	cmp	r5, #1
 8018388:	9300      	str	r3, [sp, #0]
 801838a:	bf8c      	ite	hi
 801838c:	2500      	movhi	r5, #0
 801838e:	2501      	movls	r5, #1
 8018390:	e7d8      	b.n	8018344 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x2c>
 8018392:	8ae3      	ldrh	r3, [r4, #22]
 8018394:	280a      	cmp	r0, #10
 8018396:	f103 0301 	add.w	r3, r3, #1
 801839a:	82e3      	strh	r3, [r4, #22]
 801839c:	d0e2      	beq.n	8018364 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x4c>
 801839e:	9a03      	ldr	r2, [sp, #12]
 80183a0:	b972      	cbnz	r2, 80183c0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa8>
 80183a2:	4540      	cmp	r0, r8
 80183a4:	d1d3      	bne.n	801834e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 80183a6:	8823      	ldrh	r3, [r4, #0]
 80183a8:	8b21      	ldrh	r1, [r4, #24]
 80183aa:	2b20      	cmp	r3, #32
 80183ac:	d001      	beq.n	80183b2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9a>
 80183ae:	4543      	cmp	r3, r8
 80183b0:	d11d      	bne.n	80183ee <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 80183b2:	2f20      	cmp	r7, #32
 80183b4:	d002      	beq.n	80183bc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 80183b6:	4547      	cmp	r7, r8
 80183b8:	bf18      	it	ne
 80183ba:	460e      	movne	r6, r1
 80183bc:	2001      	movs	r0, #1
 80183be:	e017      	b.n	80183f0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd8>
 80183c0:	4540      	cmp	r0, r8
 80183c2:	d012      	beq.n	80183ea <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd2>
 80183c4:	8893      	ldrh	r3, [r2, #4]
 80183c6:	4639      	mov	r1, r7
 80183c8:	8023      	strh	r3, [r4, #0]
 80183ca:	f992 a00d 	ldrsb.w	sl, [r2, #13]
 80183ce:	f40a 7080 	and.w	r0, sl, #256	; 0x100
 80183d2:	f892 a00a 	ldrb.w	sl, [r2, #10]
 80183d6:	ea4a 0a00 	orr.w	sl, sl, r0
 80183da:	68e0      	ldr	r0, [r4, #12]
 80183dc:	6803      	ldr	r3, [r0, #0]
 80183de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80183e0:	4798      	blx	r3
 80183e2:	eb0a 0200 	add.w	r2, sl, r0
 80183e6:	b292      	uxth	r2, r2
 80183e8:	e7dd      	b.n	80183a6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 80183ea:	2200      	movs	r2, #0
 80183ec:	e7db      	b.n	80183a6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 80183ee:	2000      	movs	r0, #0
 80183f0:	440a      	add	r2, r1
 80183f2:	8aa3      	ldrh	r3, [r4, #20]
 80183f4:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 80183f8:	b292      	uxth	r2, r2
 80183fa:	8322      	strh	r2, [r4, #24]
 80183fc:	4413      	add	r3, r2
 80183fe:	f1b9 0f00 	cmp.w	r9, #0
 8018402:	d022      	beq.n	801844a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x132>
 8018404:	f1bb 0f00 	cmp.w	fp, #0
 8018408:	d102      	bne.n	8018410 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf8>
 801840a:	9901      	ldr	r1, [sp, #4]
 801840c:	b149      	cbz	r1, 8018422 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 801840e:	b140      	cbz	r0, 8018422 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 8018410:	8ba1      	ldrh	r1, [r4, #28]
 8018412:	4419      	add	r1, r3
 8018414:	458c      	cmp	ip, r1
 8018416:	da12      	bge.n	801843e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 8018418:	8a61      	ldrh	r1, [r4, #18]
 801841a:	b181      	cbz	r1, 801843e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 801841c:	4563      	cmp	r3, ip
 801841e:	dd96      	ble.n	801834e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8018420:	e004      	b.n	801842c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x114>
 8018422:	4563      	cmp	r3, ip
 8018424:	dd93      	ble.n	801834e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8018426:	8a63      	ldrh	r3, [r4, #18]
 8018428:	2b00      	cmp	r3, #0
 801842a:	d090      	beq.n	801834e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801842c:	2301      	movs	r3, #1
 801842e:	8ba2      	ldrh	r2, [r4, #28]
 8018430:	77a3      	strb	r3, [r4, #30]
 8018432:	8b63      	ldrh	r3, [r4, #26]
 8018434:	4413      	add	r3, r2
 8018436:	8363      	strh	r3, [r4, #26]
 8018438:	b005      	add	sp, #20
 801843a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801843e:	2300      	movs	r3, #0
 8018440:	4611      	mov	r1, r2
 8018442:	4620      	mov	r0, r4
 8018444:	f7ff ff58 	bl	80182f8 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8018448:	e781      	b.n	801834e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801844a:	4563      	cmp	r3, ip
 801844c:	dd16      	ble.n	801847c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x164>
 801844e:	9b00      	ldr	r3, [sp, #0]
 8018450:	b113      	cbz	r3, 8018458 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 8018452:	2301      	movs	r3, #1
 8018454:	460a      	mov	r2, r1
 8018456:	e787      	b.n	8018368 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x50>
 8018458:	2d00      	cmp	r5, #0
 801845a:	f43f af78 	beq.w	801834e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801845e:	2800      	cmp	r0, #0
 8018460:	f47f af75 	bne.w	801834e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8018464:	2f20      	cmp	r7, #32
 8018466:	d001      	beq.n	801846c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x154>
 8018468:	4547      	cmp	r7, r8
 801846a:	d102      	bne.n	8018472 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15a>
 801846c:	2301      	movs	r3, #1
 801846e:	4632      	mov	r2, r6
 8018470:	e77b      	b.n	801836a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x52>
 8018472:	8a63      	ldrh	r3, [r4, #18]
 8018474:	2b00      	cmp	r3, #0
 8018476:	f43f af6a 	beq.w	801834e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801847a:	e7dd      	b.n	8018438 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 801847c:	2800      	cmp	r0, #0
 801847e:	f47f af66 	bne.w	801834e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8018482:	2f20      	cmp	r7, #32
 8018484:	d002      	beq.n	801848c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x174>
 8018486:	4547      	cmp	r7, r8
 8018488:	f47f af61 	bne.w	801834e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801848c:	2301      	movs	r3, #1
 801848e:	4632      	mov	r2, r6
 8018490:	e7d7      	b.n	8018442 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x12a>

08018492 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8018492:	b570      	push	{r4, r5, r6, lr}
 8018494:	4606      	mov	r6, r0
 8018496:	b08a      	sub	sp, #40	; 0x28
 8018498:	4615      	mov	r5, r2
 801849a:	b191      	cbz	r1, 80184c2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x30>
 801849c:	2401      	movs	r4, #1
 801849e:	e9cd 3100 	strd	r3, r1, [sp]
 80184a2:	4613      	mov	r3, r2
 80184a4:	4601      	mov	r1, r0
 80184a6:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 80184aa:	a802      	add	r0, sp, #8
 80184ac:	f7ff fd20 	bl	8017ef0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 80184b0:	2100      	movs	r1, #0
 80184b2:	a802      	add	r0, sp, #8
 80184b4:	f7ff ff30 	bl	8018318 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80184b8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80184bc:	b173      	cbz	r3, 80184dc <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 80184be:	3401      	adds	r4, #1
 80184c0:	e7f6      	b.n	80184b0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1e>
 80184c2:	2401      	movs	r4, #1
 80184c4:	4611      	mov	r1, r2
 80184c6:	f002 f873 	bl	801a5b0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80184ca:	280a      	cmp	r0, #10
 80184cc:	4629      	mov	r1, r5
 80184ce:	4630      	mov	r0, r6
 80184d0:	bf08      	it	eq
 80184d2:	3401      	addeq	r4, #1
 80184d4:	f002 f86c 	bl	801a5b0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80184d8:	2800      	cmp	r0, #0
 80184da:	d1f6      	bne.n	80184ca <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x38>
 80184dc:	b2a0      	uxth	r0, r4
 80184de:	b00a      	add	sp, #40	; 0x28
 80184e0:	bd70      	pop	{r4, r5, r6, pc}

080184e2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 80184e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184e6:	b0db      	sub	sp, #364	; 0x16c
 80184e8:	468a      	mov	sl, r1
 80184ea:	461c      	mov	r4, r3
 80184ec:	f8dd b190 	ldr.w	fp, [sp, #400]	; 0x190
 80184f0:	9009      	str	r0, [sp, #36]	; 0x24
 80184f2:	f1bb 0f00 	cmp.w	fp, #0
 80184f6:	f000 80c7 	beq.w	8018688 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 80184fa:	681b      	ldr	r3, [r3, #0]
 80184fc:	2b00      	cmp	r3, #0
 80184fe:	f000 80c3 	beq.w	8018688 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8018502:	7ba3      	ldrb	r3, [r4, #14]
 8018504:	2b00      	cmp	r3, #0
 8018506:	f000 80bf 	beq.w	8018688 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801850a:	af0c      	add	r7, sp, #48	; 0x30
 801850c:	6810      	ldr	r0, [r2, #0]
 801850e:	6851      	ldr	r1, [r2, #4]
 8018510:	f10d 0960 	add.w	r9, sp, #96	; 0x60
 8018514:	463b      	mov	r3, r7
 8018516:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
 801851a:	c303      	stmia	r3!, {r0, r1}
 801851c:	2100      	movs	r1, #0
 801851e:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 8018522:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8018526:	4638      	mov	r0, r7
 8018528:	910e      	str	r1, [sp, #56]	; 0x38
 801852a:	a90e      	add	r1, sp, #56	; 0x38
 801852c:	79a2      	ldrb	r2, [r4, #6]
 801852e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8018532:	f7ff fd49 	bl	8017fc8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8018536:	a90e      	add	r1, sp, #56	; 0x38
 8018538:	79a2      	ldrb	r2, [r4, #6]
 801853a:	4608      	mov	r0, r1
 801853c:	f7ff fd44 	bl	8017fc8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8018540:	4648      	mov	r0, r9
 8018542:	f001 fef3 	bl	801a32c <_ZN8touchgfx12TextProviderC1Ev>
 8018546:	6820      	ldr	r0, [r4, #0]
 8018548:	6803      	ldr	r3, [r0, #0]
 801854a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801854c:	4798      	blx	r3
 801854e:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8018550:	4603      	mov	r3, r0
 8018552:	4659      	mov	r1, fp
 8018554:	4648      	mov	r0, r9
 8018556:	f001 ff06 	bl	801a366 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801855a:	a82e      	add	r0, sp, #184	; 0xb8
 801855c:	f001 fee6 	bl	801a32c <_ZN8touchgfx12TextProviderC1Ev>
 8018560:	f894 8004 	ldrb.w	r8, [r4, #4]
 8018564:	f1b8 0f00 	cmp.w	r8, #0
 8018568:	d009      	beq.n	801857e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x9c>
 801856a:	6820      	ldr	r0, [r4, #0]
 801856c:	6803      	ldr	r3, [r0, #0]
 801856e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018570:	4798      	blx	r3
 8018572:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8018574:	4603      	mov	r3, r0
 8018576:	4659      	mov	r1, fp
 8018578:	a82e      	add	r0, sp, #184	; 0xb8
 801857a:	f001 fef4 	bl	801a366 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801857e:	6820      	ldr	r0, [r4, #0]
 8018580:	6803      	ldr	r3, [r0, #0]
 8018582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018584:	4798      	blx	r3
 8018586:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801858a:	182e      	adds	r6, r5, r0
 801858c:	2e00      	cmp	r6, #0
 801858e:	dd45      	ble.n	801861c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 8018590:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018594:	4283      	cmp	r3, r0
 8018596:	db41      	blt.n	801861c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 8018598:	441d      	add	r5, r3
 801859a:	fb95 f5f6 	sdiv	r5, r5, r6
 801859e:	a844      	add	r0, sp, #272	; 0x110
 80185a0:	f001 fec4 	bl	801a32c <_ZN8touchgfx12TextProviderC1Ev>
 80185a4:	7c23      	ldrb	r3, [r4, #16]
 80185a6:	b14b      	cbz	r3, 80185bc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xda>
 80185a8:	6820      	ldr	r0, [r4, #0]
 80185aa:	6803      	ldr	r3, [r0, #0]
 80185ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80185ae:	4798      	blx	r3
 80185b0:	9a65      	ldr	r2, [sp, #404]	; 0x194
 80185b2:	4603      	mov	r3, r0
 80185b4:	4659      	mov	r1, fp
 80185b6:	a844      	add	r0, sp, #272	; 0x110
 80185b8:	f001 fed5 	bl	801a366 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80185bc:	7c21      	ldrb	r1, [r4, #16]
 80185be:	a810      	add	r0, sp, #64	; 0x40
 80185c0:	7963      	ldrb	r3, [r4, #5]
 80185c2:	9101      	str	r1, [sp, #4]
 80185c4:	6821      	ldr	r1, [r4, #0]
 80185c6:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 80185ca:	9100      	str	r1, [sp, #0]
 80185cc:	a944      	add	r1, sp, #272	; 0x110
 80185ce:	f7ff fc8f 	bl	8017ef0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 80185d2:	7c23      	ldrb	r3, [r4, #16]
 80185d4:	bb23      	cbnz	r3, 8018620 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13e>
 80185d6:	fa1f fb86 	uxth.w	fp, r6
 80185da:	2d00      	cmp	r5, #0
 80185dc:	dd57      	ble.n	801868e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 80185de:	7961      	ldrb	r1, [r4, #5]
 80185e0:	4648      	mov	r0, r9
 80185e2:	f001 ffe5 	bl	801a5b0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80185e6:	4603      	mov	r3, r0
 80185e8:	f1b8 0f00 	cmp.w	r8, #0
 80185ec:	d005      	beq.n	80185fa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x118>
 80185ee:	9008      	str	r0, [sp, #32]
 80185f0:	a82e      	add	r0, sp, #184	; 0xb8
 80185f2:	7961      	ldrb	r1, [r4, #5]
 80185f4:	f001 ffdc 	bl	801a5b0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80185f8:	9b08      	ldr	r3, [sp, #32]
 80185fa:	2b00      	cmp	r3, #0
 80185fc:	d044      	beq.n	8018688 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 80185fe:	2b0a      	cmp	r3, #10
 8018600:	d1eb      	bne.n	80185da <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 8018602:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8018606:	3d01      	subs	r5, #1
 8018608:	445b      	add	r3, fp
 801860a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801860e:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8018612:	eba3 030b 	sub.w	r3, r3, fp
 8018616:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801861a:	e7de      	b.n	80185da <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 801861c:	2500      	movs	r5, #0
 801861e:	e7be      	b.n	801859e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xbc>
 8018620:	0073      	lsls	r3, r6, #1
 8018622:	9308      	str	r3, [sp, #32]
 8018624:	2d00      	cmp	r5, #0
 8018626:	dd32      	ble.n	801868e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 8018628:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 801862c:	a810      	add	r0, sp, #64	; 0x40
 801862e:	9b08      	ldr	r3, [sp, #32]
 8018630:	428b      	cmp	r3, r1
 8018632:	bfd4      	ite	le
 8018634:	2100      	movle	r1, #0
 8018636:	2101      	movgt	r1, #1
 8018638:	f7ff fe6e 	bl	8018318 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801863c:	f8bd b052 	ldrh.w	fp, [sp, #82]	; 0x52
 8018640:	f10b 33ff 	add.w	r3, fp, #4294967295
 8018644:	fa1f fb83 	uxth.w	fp, r3
 8018648:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801864c:	459b      	cmp	fp, r3
 801864e:	d00b      	beq.n	8018668 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 8018650:	7961      	ldrb	r1, [r4, #5]
 8018652:	4648      	mov	r0, r9
 8018654:	f001 ffac 	bl	801a5b0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018658:	f1b8 0f00 	cmp.w	r8, #0
 801865c:	d0f0      	beq.n	8018640 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 801865e:	7961      	ldrb	r1, [r4, #5]
 8018660:	a82e      	add	r0, sp, #184	; 0xb8
 8018662:	f001 ffa5 	bl	801a5b0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018666:	e7eb      	b.n	8018640 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 8018668:	b2b3      	uxth	r3, r6
 801866a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801866e:	3d01      	subs	r5, #1
 8018670:	441a      	add	r2, r3
 8018672:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 8018676:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 801867a:	1ad3      	subs	r3, r2, r3
 801867c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8018680:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8018684:	2b00      	cmp	r3, #0
 8018686:	d1cd      	bne.n	8018624 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 8018688:	b05b      	add	sp, #364	; 0x16c
 801868a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801868e:	ea4f 0b46 	mov.w	fp, r6, lsl #1
 8018692:	f10d 052e 	add.w	r5, sp, #46	; 0x2e
 8018696:	7c23      	ldrb	r3, [r4, #16]
 8018698:	2b00      	cmp	r3, #0
 801869a:	d05f      	beq.n	801875c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x27a>
 801869c:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 80186a0:	a810      	add	r0, sp, #64	; 0x40
 80186a2:	458b      	cmp	fp, r1
 80186a4:	bfd4      	ite	le
 80186a6:	2100      	movle	r1, #0
 80186a8:	2101      	movgt	r1, #1
 80186aa:	f7ff fe35 	bl	8018318 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80186ae:	f1b8 0f00 	cmp.w	r8, #0
 80186b2:	d04c      	beq.n	801874e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 80186b4:	7c23      	ldrb	r3, [r4, #16]
 80186b6:	2b00      	cmp	r3, #0
 80186b8:	d053      	beq.n	8018762 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x280>
 80186ba:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 80186be:	7922      	ldrb	r2, [r4, #4]
 80186c0:	2a01      	cmp	r2, #1
 80186c2:	d13c      	bne.n	801873e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 80186c4:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 80186c8:	1ac0      	subs	r0, r0, r3
 80186ca:	2302      	movs	r3, #2
 80186cc:	fb90 f0f3 	sdiv	r0, r0, r3
 80186d0:	b200      	sxth	r0, r0
 80186d2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80186d6:	4418      	add	r0, r3
 80186d8:	7c23      	ldrb	r3, [r4, #16]
 80186da:	8028      	strh	r0, [r5, #0]
 80186dc:	2b00      	cmp	r3, #0
 80186de:	d03a      	beq.n	8018756 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x274>
 80186e0:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 80186e4:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
 80186e8:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80186ec:	f8cd 9010 	str.w	r9, [sp, #16]
 80186f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80186f2:	e9cd 2105 	strd	r2, r1, [sp, #20]
 80186f6:	2200      	movs	r2, #0
 80186f8:	2100      	movs	r1, #0
 80186fa:	e9cd 4202 	strd	r4, r2, [sp, #8]
 80186fe:	e9cd 5700 	strd	r5, r7, [sp]
 8018702:	4652      	mov	r2, sl
 8018704:	f7ff fcb2 	bl	801806c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8018708:	2800      	cmp	r0, #0
 801870a:	d1bd      	bne.n	8018688 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801870c:	b2b2      	uxth	r2, r6
 801870e:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8018712:	4611      	mov	r1, r2
 8018714:	4413      	add	r3, r2
 8018716:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 801871a:	b21b      	sxth	r3, r3
 801871c:	1a52      	subs	r2, r2, r1
 801871e:	7c21      	ldrb	r1, [r4, #16]
 8018720:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8018724:	b212      	sxth	r2, r2
 8018726:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801872a:	b109      	cbz	r1, 8018730 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 801872c:	42b2      	cmp	r2, r6
 801872e:	dbab      	blt.n	8018688 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8018730:	887a      	ldrh	r2, [r7, #2]
 8018732:	88f9      	ldrh	r1, [r7, #6]
 8018734:	440a      	add	r2, r1
 8018736:	b212      	sxth	r2, r2
 8018738:	4293      	cmp	r3, r2
 801873a:	ddac      	ble.n	8018696 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1b4>
 801873c:	e7a4      	b.n	8018688 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801873e:	2a02      	cmp	r2, #2
 8018740:	d107      	bne.n	8018752 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 8018742:	7be2      	ldrb	r2, [r4, #15]
 8018744:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 8018748:	1a80      	subs	r0, r0, r2
 801874a:	1ac0      	subs	r0, r0, r3
 801874c:	e7c0      	b.n	80186d0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 801874e:	7be0      	ldrb	r0, [r4, #15]
 8018750:	e7bf      	b.n	80186d2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 8018752:	2000      	movs	r0, #0
 8018754:	e7bd      	b.n	80186d2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 8018756:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801875a:	e7c3      	b.n	80186e4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x202>
 801875c:	f1b8 0f00 	cmp.w	r8, #0
 8018760:	d0f5      	beq.n	801874e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 8018762:	2300      	movs	r3, #0
 8018764:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8018768:	6821      	ldr	r1, [r4, #0]
 801876a:	a82e      	add	r0, sp, #184	; 0xb8
 801876c:	f7ff fbfa 	bl	8017f64 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8018770:	b203      	sxth	r3, r0
 8018772:	e7a4      	b.n	80186be <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>

08018774 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8018774:	2b02      	cmp	r3, #2
 8018776:	b510      	push	{r4, lr}
 8018778:	f9b0 4000 	ldrsh.w	r4, [r0]
 801877c:	d00b      	beq.n	8018796 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801877e:	2b03      	cmp	r3, #3
 8018780:	d00e      	beq.n	80187a0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 8018782:	2b01      	cmp	r3, #1
 8018784:	d001      	beq.n	801878a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 8018786:	1860      	adds	r0, r4, r1
 8018788:	bd10      	pop	{r4, pc}
 801878a:	8880      	ldrh	r0, [r0, #4]
 801878c:	4420      	add	r0, r4
 801878e:	b200      	sxth	r0, r0
 8018790:	1a80      	subs	r0, r0, r2
 8018792:	3801      	subs	r0, #1
 8018794:	e7f8      	b.n	8018788 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 8018796:	8880      	ldrh	r0, [r0, #4]
 8018798:	4420      	add	r0, r4
 801879a:	b200      	sxth	r0, r0
 801879c:	1a40      	subs	r0, r0, r1
 801879e:	e7f8      	b.n	8018792 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 80187a0:	18a0      	adds	r0, r4, r2
 80187a2:	e7f1      	b.n	8018788 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

080187a4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 80187a4:	2b02      	cmp	r3, #2
 80187a6:	b510      	push	{r4, lr}
 80187a8:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 80187ac:	d006      	beq.n	80187bc <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 80187ae:	2b03      	cmp	r3, #3
 80187b0:	d00a      	beq.n	80187c8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 80187b2:	2b01      	cmp	r3, #1
 80187b4:	bf14      	ite	ne
 80187b6:	18a0      	addne	r0, r4, r2
 80187b8:	1860      	addeq	r0, r4, r1
 80187ba:	bd10      	pop	{r4, pc}
 80187bc:	88c0      	ldrh	r0, [r0, #6]
 80187be:	4420      	add	r0, r4
 80187c0:	b200      	sxth	r0, r0
 80187c2:	1a80      	subs	r0, r0, r2
 80187c4:	3801      	subs	r0, #1
 80187c6:	e7f8      	b.n	80187ba <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 80187c8:	88c0      	ldrh	r0, [r0, #6]
 80187ca:	4420      	add	r0, r4
 80187cc:	b200      	sxth	r0, r0
 80187ce:	1a40      	subs	r0, r0, r1
 80187d0:	e7f8      	b.n	80187c4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

080187d4 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 80187d4:	4b01      	ldr	r3, [pc, #4]	; (80187dc <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 80187d6:	2200      	movs	r2, #0
 80187d8:	601a      	str	r2, [r3, #0]
 80187da:	4770      	bx	lr
 80187dc:	2000bca4 	.word	0x2000bca4

080187e0 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 80187e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80187e2:	1e05      	subs	r5, r0, #0
 80187e4:	f04f 0601 	mov.w	r6, #1
 80187e8:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80187ec:	bfba      	itte	lt
 80187ee:	f04f 37ff 	movlt.w	r7, #4294967295
 80187f2:	426d      	neglt	r5, r5
 80187f4:	2701      	movge	r7, #1
 80187f6:	e9dd e405 	ldrd	lr, r4, [sp, #20]
 80187fa:	f1be 0f00 	cmp.w	lr, #0
 80187fe:	bfbc      	itt	lt
 8018800:	f1ce 0e00 	rsblt	lr, lr, #0
 8018804:	427f      	neglt	r7, r7
 8018806:	2c00      	cmp	r4, #0
 8018808:	fa4e f001 	asr.w	r0, lr, r1
 801880c:	fa06 f101 	lsl.w	r1, r6, r1
 8018810:	bfbc      	itt	lt
 8018812:	4264      	neglt	r4, r4
 8018814:	427f      	neglt	r7, r7
 8018816:	3901      	subs	r1, #1
 8018818:	ea01 010e 	and.w	r1, r1, lr
 801881c:	434d      	muls	r5, r1
 801881e:	f8dc 1000 	ldr.w	r1, [ip]
 8018822:	fb03 1300 	mla	r3, r3, r0, r1
 8018826:	fb95 f1f4 	sdiv	r1, r5, r4
 801882a:	fb04 5511 	mls	r5, r4, r1, r5
 801882e:	441d      	add	r5, r3
 8018830:	fb95 f3f4 	sdiv	r3, r5, r4
 8018834:	4419      	add	r1, r3
 8018836:	fb04 5413 	mls	r4, r4, r3, r5
 801883a:	fb02 1000 	mla	r0, r2, r0, r1
 801883e:	f8cc 4000 	str.w	r4, [ip]
 8018842:	4378      	muls	r0, r7
 8018844:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08018848 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8018848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801884c:	4c24      	ldr	r4, [pc, #144]	; (80188e0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 801884e:	b086      	sub	sp, #24
 8018850:	4605      	mov	r5, r0
 8018852:	6807      	ldr	r7, [r0, #0]
 8018854:	69a3      	ldr	r3, [r4, #24]
 8018856:	b92b      	cbnz	r3, 8018864 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 8018858:	6840      	ldr	r0, [r0, #4]
 801885a:	e9c5 7000 	strd	r7, r0, [r5]
 801885e:	b006      	add	sp, #24
 8018860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018864:	f04f 0802 	mov.w	r8, #2
 8018868:	68a2      	ldr	r2, [r4, #8]
 801886a:	ae06      	add	r6, sp, #24
 801886c:	6820      	ldr	r0, [r4, #0]
 801886e:	fb93 f1f8 	sdiv	r1, r3, r8
 8018872:	440a      	add	r2, r1
 8018874:	69e1      	ldr	r1, [r4, #28]
 8018876:	f846 2d04 	str.w	r2, [r6, #-4]!
 801887a:	9700      	str	r7, [sp, #0]
 801887c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801887e:	e9cd 3601 	strd	r3, r6, [sp, #4]
 8018882:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018884:	f7ff ffac 	bl	80187e0 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8018888:	69a3      	ldr	r3, [r4, #24]
 801888a:	4607      	mov	r7, r0
 801888c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801888e:	9301      	str	r3, [sp, #4]
 8018890:	686b      	ldr	r3, [r5, #4]
 8018892:	6a21      	ldr	r1, [r4, #32]
 8018894:	9300      	str	r3, [sp, #0]
 8018896:	9602      	str	r6, [sp, #8]
 8018898:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801889a:	6860      	ldr	r0, [r4, #4]
 801889c:	f7ff ffa0 	bl	80187e0 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 80188a0:	69a2      	ldr	r2, [r4, #24]
 80188a2:	6963      	ldr	r3, [r4, #20]
 80188a4:	4407      	add	r7, r0
 80188a6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80188a8:	68e0      	ldr	r0, [r4, #12]
 80188aa:	fb92 f8f8 	sdiv	r8, r2, r8
 80188ae:	4443      	add	r3, r8
 80188b0:	9305      	str	r3, [sp, #20]
 80188b2:	682b      	ldr	r3, [r5, #0]
 80188b4:	e9cd 2601 	strd	r2, r6, [sp, #4]
 80188b8:	9300      	str	r3, [sp, #0]
 80188ba:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80188bc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80188be:	f7ff ff8f 	bl	80187e0 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 80188c2:	69a3      	ldr	r3, [r4, #24]
 80188c4:	4680      	mov	r8, r0
 80188c6:	9602      	str	r6, [sp, #8]
 80188c8:	9301      	str	r3, [sp, #4]
 80188ca:	686b      	ldr	r3, [r5, #4]
 80188cc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80188ce:	9300      	str	r3, [sp, #0]
 80188d0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80188d2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80188d4:	6920      	ldr	r0, [r4, #16]
 80188d6:	f7ff ff83 	bl	80187e0 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 80188da:	4440      	add	r0, r8
 80188dc:	e7bd      	b.n	801885a <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 80188de:	bf00      	nop
 80188e0:	2000bca8 	.word	0x2000bca8

080188e4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 80188e4:	4b07      	ldr	r3, [pc, #28]	; (8018904 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 80188e6:	b510      	push	{r4, lr}
 80188e8:	781b      	ldrb	r3, [r3, #0]
 80188ea:	2b01      	cmp	r3, #1
 80188ec:	d108      	bne.n	8018900 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 80188ee:	4b06      	ldr	r3, [pc, #24]	; (8018908 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 80188f0:	880c      	ldrh	r4, [r1, #0]
 80188f2:	881b      	ldrh	r3, [r3, #0]
 80188f4:	f9b0 2000 	ldrsh.w	r2, [r0]
 80188f8:	3b01      	subs	r3, #1
 80188fa:	1b1b      	subs	r3, r3, r4
 80188fc:	8003      	strh	r3, [r0, #0]
 80188fe:	800a      	strh	r2, [r1, #0]
 8018900:	bd10      	pop	{r4, pc}
 8018902:	bf00      	nop
 8018904:	2000bc74 	.word	0x2000bc74
 8018908:	2000bc78 	.word	0x2000bc78

0801890c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801890c:	4b0a      	ldr	r3, [pc, #40]	; (8018938 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801890e:	b510      	push	{r4, lr}
 8018910:	781b      	ldrb	r3, [r3, #0]
 8018912:	2b01      	cmp	r3, #1
 8018914:	d10e      	bne.n	8018934 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8018916:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801891a:	8843      	ldrh	r3, [r0, #2]
 801891c:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018920:	18ca      	adds	r2, r1, r3
 8018922:	4b06      	ldr	r3, [pc, #24]	; (801893c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8018924:	8044      	strh	r4, [r0, #2]
 8018926:	881b      	ldrh	r3, [r3, #0]
 8018928:	1a9b      	subs	r3, r3, r2
 801892a:	8003      	strh	r3, [r0, #0]
 801892c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8018930:	8081      	strh	r1, [r0, #4]
 8018932:	80c3      	strh	r3, [r0, #6]
 8018934:	bd10      	pop	{r4, pc}
 8018936:	bf00      	nop
 8018938:	2000bc74 	.word	0x2000bc74
 801893c:	2000bc70 	.word	0x2000bc70

08018940 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8018940:	4b07      	ldr	r3, [pc, #28]	; (8018960 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8018942:	b510      	push	{r4, lr}
 8018944:	781b      	ldrb	r3, [r3, #0]
 8018946:	2b01      	cmp	r3, #1
 8018948:	d108      	bne.n	801895c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801894a:	f9b1 3000 	ldrsh.w	r3, [r1]
 801894e:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018952:	8003      	strh	r3, [r0, #0]
 8018954:	8893      	ldrh	r3, [r2, #4]
 8018956:	3b01      	subs	r3, #1
 8018958:	1b1b      	subs	r3, r3, r4
 801895a:	800b      	strh	r3, [r1, #0]
 801895c:	bd10      	pop	{r4, pc}
 801895e:	bf00      	nop
 8018960:	2000bc74 	.word	0x2000bc74

08018964 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8018964:	4b08      	ldr	r3, [pc, #32]	; (8018988 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8018966:	b513      	push	{r0, r1, r4, lr}
 8018968:	f9b3 2000 	ldrsh.w	r2, [r3]
 801896c:	2400      	movs	r4, #0
 801896e:	4b07      	ldr	r3, [pc, #28]	; (801898c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 8018970:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018974:	466a      	mov	r2, sp
 8018976:	f9b3 3000 	ldrsh.w	r3, [r3]
 801897a:	9400      	str	r4, [sp, #0]
 801897c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018980:	f7ff ffde 	bl	8018940 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8018984:	b002      	add	sp, #8
 8018986:	bd10      	pop	{r4, pc}
 8018988:	2000bc70 	.word	0x2000bc70
 801898c:	2000bc72 	.word	0x2000bc72

08018990 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8018990:	4b0a      	ldr	r3, [pc, #40]	; (80189bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8018992:	460a      	mov	r2, r1
 8018994:	b510      	push	{r4, lr}
 8018996:	781b      	ldrb	r3, [r3, #0]
 8018998:	2b01      	cmp	r3, #1
 801899a:	d10d      	bne.n	80189b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801899c:	8881      	ldrh	r1, [r0, #4]
 801899e:	8803      	ldrh	r3, [r0, #0]
 80189a0:	440b      	add	r3, r1
 80189a2:	4601      	mov	r1, r0
 80189a4:	3b01      	subs	r3, #1
 80189a6:	f821 3b02 	strh.w	r3, [r1], #2
 80189aa:	f7ff ffc9 	bl	8018940 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 80189ae:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80189b2:	88c2      	ldrh	r2, [r0, #6]
 80189b4:	80c3      	strh	r3, [r0, #6]
 80189b6:	8082      	strh	r2, [r0, #4]
 80189b8:	bd10      	pop	{r4, pc}
 80189ba:	bf00      	nop
 80189bc:	2000bc74 	.word	0x2000bc74

080189c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 80189c0:	4b09      	ldr	r3, [pc, #36]	; (80189e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 80189c2:	b507      	push	{r0, r1, r2, lr}
 80189c4:	2100      	movs	r1, #0
 80189c6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80189ca:	4b08      	ldr	r3, [pc, #32]	; (80189ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 80189cc:	9100      	str	r1, [sp, #0]
 80189ce:	4669      	mov	r1, sp
 80189d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80189d4:	f8ad 2004 	strh.w	r2, [sp, #4]
 80189d8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80189dc:	f7ff ffd8 	bl	8018990 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80189e0:	b003      	add	sp, #12
 80189e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80189e6:	bf00      	nop
 80189e8:	2000bc70 	.word	0x2000bc70
 80189ec:	2000bc72 	.word	0x2000bc72

080189f0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 80189f0:	4b03      	ldr	r3, [pc, #12]	; (8018a00 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 80189f2:	6818      	ldr	r0, [r3, #0]
 80189f4:	b110      	cbz	r0, 80189fc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 80189f6:	6803      	ldr	r3, [r0, #0]
 80189f8:	699b      	ldr	r3, [r3, #24]
 80189fa:	4718      	bx	r3
 80189fc:	4770      	bx	lr
 80189fe:	bf00      	nop
 8018a00:	2000bcf8 	.word	0x2000bcf8

08018a04 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8018a04:	4770      	bx	lr
	...

08018a08 <_ZN8touchgfx11Application4drawEv>:
 8018a08:	4b09      	ldr	r3, [pc, #36]	; (8018a30 <_ZN8touchgfx11Application4drawEv+0x28>)
 8018a0a:	b507      	push	{r0, r1, r2, lr}
 8018a0c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018a10:	2100      	movs	r1, #0
 8018a12:	4b08      	ldr	r3, [pc, #32]	; (8018a34 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8018a14:	9100      	str	r1, [sp, #0]
 8018a16:	4669      	mov	r1, sp
 8018a18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018a1c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018a20:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018a24:	6803      	ldr	r3, [r0, #0]
 8018a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a28:	4798      	blx	r3
 8018a2a:	b003      	add	sp, #12
 8018a2c:	f85d fb04 	ldr.w	pc, [sp], #4
 8018a30:	2000bc70 	.word	0x2000bc70
 8018a34:	2000bc72 	.word	0x2000bc72

08018a38 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8018a38:	4b03      	ldr	r3, [pc, #12]	; (8018a48 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8018a3a:	6818      	ldr	r0, [r3, #0]
 8018a3c:	b110      	cbz	r0, 8018a44 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8018a3e:	6803      	ldr	r3, [r0, #0]
 8018a40:	69db      	ldr	r3, [r3, #28]
 8018a42:	4718      	bx	r3
 8018a44:	4770      	bx	lr
 8018a46:	bf00      	nop
 8018a48:	2000bcf8 	.word	0x2000bcf8

08018a4c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8018a4c:	4b03      	ldr	r3, [pc, #12]	; (8018a5c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8018a4e:	6818      	ldr	r0, [r3, #0]
 8018a50:	b110      	cbz	r0, 8018a58 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8018a52:	6803      	ldr	r3, [r0, #0]
 8018a54:	6a1b      	ldr	r3, [r3, #32]
 8018a56:	4718      	bx	r3
 8018a58:	4770      	bx	lr
 8018a5a:	bf00      	nop
 8018a5c:	2000bcf8 	.word	0x2000bcf8

08018a60 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8018a60:	4b03      	ldr	r3, [pc, #12]	; (8018a70 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8018a62:	6818      	ldr	r0, [r3, #0]
 8018a64:	b110      	cbz	r0, 8018a6c <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8018a66:	6803      	ldr	r3, [r0, #0]
 8018a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018a6a:	4718      	bx	r3
 8018a6c:	4770      	bx	lr
 8018a6e:	bf00      	nop
 8018a70:	2000bcf8 	.word	0x2000bcf8

08018a74 <_ZN8touchgfx11Application15handleTickEventEv>:
 8018a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018a78:	4d3a      	ldr	r5, [pc, #232]	; (8018b64 <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 8018a7a:	4604      	mov	r4, r0
 8018a7c:	6828      	ldr	r0, [r5, #0]
 8018a7e:	b140      	cbz	r0, 8018a92 <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 8018a80:	7a03      	ldrb	r3, [r0, #8]
 8018a82:	b933      	cbnz	r3, 8018a92 <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 8018a84:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 8018a88:	6803      	ldr	r3, [r0, #0]
 8018a8a:	689b      	ldr	r3, [r3, #8]
 8018a8c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018a90:	4718      	bx	r3
 8018a92:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 8018a96:	b97b      	cbnz	r3, 8018ab8 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8018a98:	b170      	cbz	r0, 8018ab8 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8018a9a:	7a03      	ldrb	r3, [r0, #8]
 8018a9c:	b163      	cbz	r3, 8018ab8 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8018a9e:	4b32      	ldr	r3, [pc, #200]	; (8018b68 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 8018aa0:	6818      	ldr	r0, [r3, #0]
 8018aa2:	b110      	cbz	r0, 8018aaa <_ZN8touchgfx11Application15handleTickEventEv+0x36>
 8018aa4:	6803      	ldr	r3, [r0, #0]
 8018aa6:	691b      	ldr	r3, [r3, #16]
 8018aa8:	4798      	blx	r3
 8018aaa:	6828      	ldr	r0, [r5, #0]
 8018aac:	6803      	ldr	r3, [r0, #0]
 8018aae:	68db      	ldr	r3, [r3, #12]
 8018ab0:	4798      	blx	r3
 8018ab2:	2301      	movs	r3, #1
 8018ab4:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 8018ab8:	2500      	movs	r5, #0
 8018aba:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 8018abe:	42a8      	cmp	r0, r5
 8018ac0:	dd0c      	ble.n	8018adc <_ZN8touchgfx11Application15handleTickEventEv+0x68>
 8018ac2:	1963      	adds	r3, r4, r5
 8018ac4:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8018ac8:	b132      	cbz	r2, 8018ad8 <_ZN8touchgfx11Application15handleTickEventEv+0x64>
 8018aca:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8018ace:	4413      	add	r3, r2
 8018ad0:	6858      	ldr	r0, [r3, #4]
 8018ad2:	6803      	ldr	r3, [r0, #0]
 8018ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018ad6:	4798      	blx	r3
 8018ad8:	3501      	adds	r5, #1
 8018ada:	e7ee      	b.n	8018aba <_ZN8touchgfx11Application15handleTickEventEv+0x46>
 8018adc:	f5c4 467f 	rsb	r6, r4, #65280	; 0xff00
 8018ae0:	3801      	subs	r0, #1
 8018ae2:	f04f 0c00 	mov.w	ip, #0
 8018ae6:	3678      	adds	r6, #120	; 0x78
 8018ae8:	1c43      	adds	r3, r0, #1
 8018aea:	d033      	beq.n	8018b54 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 8018aec:	1823      	adds	r3, r4, r0
 8018aee:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8018af2:	bb6a      	cbnz	r2, 8018b50 <_ZN8touchgfx11Application15handleTickEventEv+0xdc>
 8018af4:	b281      	uxth	r1, r0
 8018af6:	1d25      	adds	r5, r4, #4
 8018af8:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8018afc:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8018b00:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 8018b04:	4293      	cmp	r3, r2
 8018b06:	dc0a      	bgt.n	8018b1e <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 8018b08:	f101 0288 	add.w	r2, r1, #136	; 0x88
 8018b0c:	4422      	add	r2, r4
 8018b0e:	18b1      	adds	r1, r6, r2
 8018b10:	b289      	uxth	r1, r1
 8018b12:	428b      	cmp	r3, r1
 8018b14:	d919      	bls.n	8018b4a <_ZN8touchgfx11Application15handleTickEventEv+0xd6>
 8018b16:	7851      	ldrb	r1, [r2, #1]
 8018b18:	f802 1b01 	strb.w	r1, [r2], #1
 8018b1c:	e7f7      	b.n	8018b0e <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 8018b1e:	682f      	ldr	r7, [r5, #0]
 8018b20:	f105 0804 	add.w	r8, r5, #4
 8018b24:	45b9      	cmp	r9, r7
 8018b26:	d10d      	bne.n	8018b44 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>
 8018b28:	4696      	mov	lr, r2
 8018b2a:	f1be 0f1e 	cmp.w	lr, #30
 8018b2e:	dc06      	bgt.n	8018b3e <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 8018b30:	f10e 0e01 	add.w	lr, lr, #1
 8018b34:	686f      	ldr	r7, [r5, #4]
 8018b36:	4573      	cmp	r3, lr
 8018b38:	f845 7b04 	str.w	r7, [r5], #4
 8018b3c:	dcf5      	bgt.n	8018b2a <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 8018b3e:	3b01      	subs	r3, #1
 8018b40:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 8018b44:	3201      	adds	r2, #1
 8018b46:	4645      	mov	r5, r8
 8018b48:	e7da      	b.n	8018b00 <_ZN8touchgfx11Application15handleTickEventEv+0x8c>
 8018b4a:	4423      	add	r3, r4
 8018b4c:	f883 c088 	strb.w	ip, [r3, #136]	; 0x88
 8018b50:	3801      	subs	r0, #1
 8018b52:	e7c9      	b.n	8018ae8 <_ZN8touchgfx11Application15handleTickEventEv+0x74>
 8018b54:	4b04      	ldr	r3, [pc, #16]	; (8018b68 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 8018b56:	6818      	ldr	r0, [r3, #0]
 8018b58:	b110      	cbz	r0, 8018b60 <_ZN8touchgfx11Application15handleTickEventEv+0xec>
 8018b5a:	6803      	ldr	r3, [r0, #0]
 8018b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b5e:	e795      	b.n	8018a8c <_ZN8touchgfx11Application15handleTickEventEv+0x18>
 8018b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018b64:	2000bcfc 	.word	0x2000bcfc
 8018b68:	2000bcf8 	.word	0x2000bcf8

08018b6c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8018b6c:	b570      	push	{r4, r5, r6, lr}
 8018b6e:	4606      	mov	r6, r0
 8018b70:	460c      	mov	r4, r1
 8018b72:	b929      	cbnz	r1, 8018b80 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 8018b74:	4b0c      	ldr	r3, [pc, #48]	; (8018ba8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 8018b76:	2164      	movs	r1, #100	; 0x64
 8018b78:	4a0c      	ldr	r2, [pc, #48]	; (8018bac <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 8018b7a:	480d      	ldr	r0, [pc, #52]	; (8018bb0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 8018b7c:	f00c f854 	bl	8024c28 <__assert_func>
 8018b80:	2300      	movs	r3, #0
 8018b82:	4d0c      	ldr	r5, [pc, #48]	; (8018bb4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 8018b84:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8018b88:	6828      	ldr	r0, [r5, #0]
 8018b8a:	b110      	cbz	r0, 8018b92 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 8018b8c:	6803      	ldr	r3, [r0, #0]
 8018b8e:	695b      	ldr	r3, [r3, #20]
 8018b90:	4798      	blx	r3
 8018b92:	602c      	str	r4, [r5, #0]
 8018b94:	4620      	mov	r0, r4
 8018b96:	6823      	ldr	r3, [r4, #0]
 8018b98:	68db      	ldr	r3, [r3, #12]
 8018b9a:	4798      	blx	r3
 8018b9c:	6833      	ldr	r3, [r6, #0]
 8018b9e:	4630      	mov	r0, r6
 8018ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018ba2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018ba6:	4718      	bx	r3
 8018ba8:	08028518 	.word	0x08028518
 8018bac:	080285e0 	.word	0x080285e0
 8018bb0:	08028522 	.word	0x08028522
 8018bb4:	2000bcf8 	.word	0x2000bcf8

08018bb8 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8018bb8:	b510      	push	{r4, lr}
 8018bba:	f9b1 4000 	ldrsh.w	r4, [r1]
 8018bbe:	888a      	ldrh	r2, [r1, #4]
 8018bc0:	f9b0 3000 	ldrsh.w	r3, [r0]
 8018bc4:	4422      	add	r2, r4
 8018bc6:	b212      	sxth	r2, r2
 8018bc8:	4293      	cmp	r3, r2
 8018bca:	da15      	bge.n	8018bf8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8018bcc:	8882      	ldrh	r2, [r0, #4]
 8018bce:	4413      	add	r3, r2
 8018bd0:	b21b      	sxth	r3, r3
 8018bd2:	429c      	cmp	r4, r3
 8018bd4:	da10      	bge.n	8018bf8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8018bd6:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8018bda:	88c9      	ldrh	r1, [r1, #6]
 8018bdc:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8018be0:	4419      	add	r1, r3
 8018be2:	b209      	sxth	r1, r1
 8018be4:	428a      	cmp	r2, r1
 8018be6:	da07      	bge.n	8018bf8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8018be8:	88c0      	ldrh	r0, [r0, #6]
 8018bea:	4410      	add	r0, r2
 8018bec:	b200      	sxth	r0, r0
 8018bee:	4283      	cmp	r3, r0
 8018bf0:	bfac      	ite	ge
 8018bf2:	2000      	movge	r0, #0
 8018bf4:	2001      	movlt	r0, #1
 8018bf6:	bd10      	pop	{r4, pc}
 8018bf8:	2000      	movs	r0, #0
 8018bfa:	e7fc      	b.n	8018bf6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08018bfc <_ZNK8touchgfx4Rect8includesERKS0_>:
 8018bfc:	b570      	push	{r4, r5, r6, lr}
 8018bfe:	f9b1 4000 	ldrsh.w	r4, [r1]
 8018c02:	f9b0 5000 	ldrsh.w	r5, [r0]
 8018c06:	42ac      	cmp	r4, r5
 8018c08:	db18      	blt.n	8018c3c <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8018c0a:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8018c0e:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8018c12:	429a      	cmp	r2, r3
 8018c14:	db12      	blt.n	8018c3c <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8018c16:	8886      	ldrh	r6, [r0, #4]
 8018c18:	4435      	add	r5, r6
 8018c1a:	888e      	ldrh	r6, [r1, #4]
 8018c1c:	4434      	add	r4, r6
 8018c1e:	b22d      	sxth	r5, r5
 8018c20:	b224      	sxth	r4, r4
 8018c22:	42a5      	cmp	r5, r4
 8018c24:	db0a      	blt.n	8018c3c <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8018c26:	88c0      	ldrh	r0, [r0, #6]
 8018c28:	4418      	add	r0, r3
 8018c2a:	88cb      	ldrh	r3, [r1, #6]
 8018c2c:	441a      	add	r2, r3
 8018c2e:	b200      	sxth	r0, r0
 8018c30:	b212      	sxth	r2, r2
 8018c32:	4290      	cmp	r0, r2
 8018c34:	bfb4      	ite	lt
 8018c36:	2000      	movlt	r0, #0
 8018c38:	2001      	movge	r0, #1
 8018c3a:	bd70      	pop	{r4, r5, r6, pc}
 8018c3c:	2000      	movs	r0, #0
 8018c3e:	e7fc      	b.n	8018c3a <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

08018c40 <_ZN8touchgfx11Application11getInstanceEv>:
 8018c40:	4b01      	ldr	r3, [pc, #4]	; (8018c48 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8018c42:	6818      	ldr	r0, [r3, #0]
 8018c44:	4770      	bx	lr
 8018c46:	bf00      	nop
 8018c48:	2000bd08 	.word	0x2000bd08

08018c4c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8018c4c:	2300      	movs	r3, #0
 8018c4e:	f100 0288 	add.w	r2, r0, #136	; 0x88
 8018c52:	30a8      	adds	r0, #168	; 0xa8
 8018c54:	f820 3c24 	strh.w	r3, [r0, #-36]
 8018c58:	f802 3b01 	strb.w	r3, [r2], #1
 8018c5c:	4282      	cmp	r2, r0
 8018c5e:	d1fb      	bne.n	8018c58 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8018c60:	4770      	bx	lr

08018c62 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8018c62:	4603      	mov	r3, r0
 8018c64:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8018c68:	2200      	movs	r2, #0
 8018c6a:	801a      	strh	r2, [r3, #0]
 8018c6c:	3308      	adds	r3, #8
 8018c6e:	f823 2c06 	strh.w	r2, [r3, #-6]
 8018c72:	f823 2c04 	strh.w	r2, [r3, #-4]
 8018c76:	f823 2c02 	strh.w	r2, [r3, #-2]
 8018c7a:	428b      	cmp	r3, r1
 8018c7c:	d1f5      	bne.n	8018c6a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8018c7e:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8018c82:	4770      	bx	lr

08018c84 <_ZN8touchgfx11ApplicationC1Ev>:
 8018c84:	b570      	push	{r4, r5, r6, lr}
 8018c86:	4b16      	ldr	r3, [pc, #88]	; (8018ce0 <_ZN8touchgfx11ApplicationC1Ev+0x5c>)
 8018c88:	2500      	movs	r5, #0
 8018c8a:	4604      	mov	r4, r0
 8018c8c:	30a8      	adds	r0, #168	; 0xa8
 8018c8e:	f840 3ca8 	str.w	r3, [r0, #-168]
 8018c92:	f820 5c24 	strh.w	r5, [r0, #-36]
 8018c96:	f7ff ffe4 	bl	8018c62 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8018c9a:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8018c9e:	f7ff ffe0 	bl	8018c62 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8018ca2:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
 8018ca6:	f884 512d 	strb.w	r5, [r4, #301]	; 0x12d
 8018caa:	490e      	ldr	r1, [pc, #56]	; (8018ce4 <_ZN8touchgfx11ApplicationC1Ev+0x60>)
 8018cac:	480e      	ldr	r0, [pc, #56]	; (8018ce8 <_ZN8touchgfx11ApplicationC1Ev+0x64>)
 8018cae:	f00a faa1 	bl	80231f4 <CRC_Lock>
 8018cb2:	4e0e      	ldr	r6, [pc, #56]	; (8018cec <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 8018cb4:	4b0e      	ldr	r3, [pc, #56]	; (8018cf0 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 8018cb6:	b158      	cbz	r0, 8018cd0 <_ZN8touchgfx11ApplicationC1Ev+0x4c>
 8018cb8:	801d      	strh	r5, [r3, #0]
 8018cba:	2300      	movs	r3, #0
 8018cbc:	4a0d      	ldr	r2, [pc, #52]	; (8018cf4 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 8018cbe:	4620      	mov	r0, r4
 8018cc0:	6013      	str	r3, [r2, #0]
 8018cc2:	4a0d      	ldr	r2, [pc, #52]	; (8018cf8 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 8018cc4:	6033      	str	r3, [r6, #0]
 8018cc6:	6013      	str	r3, [r2, #0]
 8018cc8:	f7ff ffc0 	bl	8018c4c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 8018ccc:	4620      	mov	r0, r4
 8018cce:	bd70      	pop	{r4, r5, r6, pc}
 8018cd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018cd4:	2002      	movs	r0, #2
 8018cd6:	801a      	strh	r2, [r3, #0]
 8018cd8:	6030      	str	r0, [r6, #0]
 8018cda:	f000 ff81 	bl	8019be0 <_ZN8touchgfx6Screen4drawEv>
 8018cde:	e7ec      	b.n	8018cba <_ZN8touchgfx11ApplicationC1Ev+0x36>
 8018ce0:	080285ac 	.word	0x080285ac
 8018ce4:	b5e8b5cd 	.word	0xb5e8b5cd
 8018ce8:	f407a5c2 	.word	0xf407a5c2
 8018cec:	2000bcf8 	.word	0x2000bcf8
 8018cf0:	20000044 	.word	0x20000044
 8018cf4:	2000bd08 	.word	0x2000bd08
 8018cf8:	2000bcfc 	.word	0x2000bcfc

08018cfc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8018cfc:	2300      	movs	r3, #0
 8018cfe:	8003      	strh	r3, [r0, #0]
 8018d00:	8043      	strh	r3, [r0, #2]
 8018d02:	8083      	strh	r3, [r0, #4]
 8018d04:	80c3      	strh	r3, [r0, #6]
 8018d06:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 8018d0a:	4293      	cmp	r3, r2
 8018d0c:	b530      	push	{r4, r5, lr}
 8018d0e:	d912      	bls.n	8018d36 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 8018d10:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 8018d14:	3b01      	subs	r3, #1
 8018d16:	6825      	ldr	r5, [r4, #0]
 8018d18:	b29b      	uxth	r3, r3
 8018d1a:	6005      	str	r5, [r0, #0]
 8018d1c:	4293      	cmp	r3, r2
 8018d1e:	6865      	ldr	r5, [r4, #4]
 8018d20:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 8018d24:	6045      	str	r5, [r0, #4]
 8018d26:	d906      	bls.n	8018d36 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 8018d28:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8018d2c:	681d      	ldr	r5, [r3, #0]
 8018d2e:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 8018d32:	685d      	ldr	r5, [r3, #4]
 8018d34:	6065      	str	r5, [r4, #4]
 8018d36:	bd30      	pop	{r4, r5, pc}

08018d38 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 8018d38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018d3a:	466b      	mov	r3, sp
 8018d3c:	4604      	mov	r4, r0
 8018d3e:	e883 0006 	stmia.w	r3, {r1, r2}
 8018d42:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 8018d46:	2a07      	cmp	r2, #7
 8018d48:	d906      	bls.n	8018d58 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 8018d4a:	4b09      	ldr	r3, [pc, #36]	; (8018d70 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 8018d4c:	f44f 7102 	mov.w	r1, #520	; 0x208
 8018d50:	4a08      	ldr	r2, [pc, #32]	; (8018d74 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 8018d52:	4809      	ldr	r0, [pc, #36]	; (8018d78 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 8018d54:	f00b ff68 	bl	8024c28 <__assert_func>
 8018d58:	1c51      	adds	r1, r2, #1
 8018d5a:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 8018d5e:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8018d62:	cb03      	ldmia	r3!, {r0, r1}
 8018d64:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 8018d68:	6069      	str	r1, [r5, #4]
 8018d6a:	b003      	add	sp, #12
 8018d6c:	bd30      	pop	{r4, r5, pc}
 8018d6e:	bf00      	nop
 8018d70:	0802854c 	.word	0x0802854c
 8018d74:	08028624 	.word	0x08028624
 8018d78:	0802857b 	.word	0x0802857b

08018d7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8018d7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018d80:	b089      	sub	sp, #36	; 0x24
 8018d82:	4606      	mov	r6, r0
 8018d84:	466c      	mov	r4, sp
 8018d86:	4620      	mov	r0, r4
 8018d88:	e884 0006 	stmia.w	r4, {r1, r2}
 8018d8c:	f7fc fe30 	bl	80159f0 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018d90:	bbb0      	cbnz	r0, 8018e00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 8018d92:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 8018d96:	b1fd      	cbz	r5, 8018dd8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 8018d98:	3d01      	subs	r5, #1
 8018d9a:	af04      	add	r7, sp, #16
 8018d9c:	f04f 090a 	mov.w	r9, #10
 8018da0:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 8018da4:	ab02      	add	r3, sp, #8
 8018da6:	fa1f f885 	uxth.w	r8, r5
 8018daa:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8018dae:	6851      	ldr	r1, [r2, #4]
 8018db0:	c303      	stmia	r3!, {r0, r1}
 8018db2:	4621      	mov	r1, r4
 8018db4:	a802      	add	r0, sp, #8
 8018db6:	f7ff ff21 	bl	8018bfc <_ZNK8touchgfx4Rect8includesERKS0_>
 8018dba:	bb08      	cbnz	r0, 8018e00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 8018dbc:	a902      	add	r1, sp, #8
 8018dbe:	4620      	mov	r0, r4
 8018dc0:	f7ff ff1c 	bl	8018bfc <_ZNK8touchgfx4Rect8includesERKS0_>
 8018dc4:	b1f8      	cbz	r0, 8018e06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 8018dc6:	4642      	mov	r2, r8
 8018dc8:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 8018dcc:	a806      	add	r0, sp, #24
 8018dce:	f7ff ff95 	bl	8018cfc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018dd2:	f115 35ff 	adds.w	r5, r5, #4294967295
 8018dd6:	d2e3      	bcs.n	8018da0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 8018dd8:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 8018ddc:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 8018de0:	2b08      	cmp	r3, #8
 8018de2:	d108      	bne.n	8018df6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8018de4:	4629      	mov	r1, r5
 8018de6:	a806      	add	r0, sp, #24
 8018de8:	2207      	movs	r2, #7
 8018dea:	f7ff ff87 	bl	8018cfc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018dee:	a906      	add	r1, sp, #24
 8018df0:	4620      	mov	r0, r4
 8018df2:	f7fd fff8 	bl	8016de6 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8018df6:	4628      	mov	r0, r5
 8018df8:	e894 0006 	ldmia.w	r4, {r1, r2}
 8018dfc:	f7ff ff9c 	bl	8018d38 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8018e00:	b009      	add	sp, #36	; 0x24
 8018e02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018e06:	4621      	mov	r1, r4
 8018e08:	a802      	add	r0, sp, #8
 8018e0a:	f7ff fed5 	bl	8018bb8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018e0e:	b150      	cbz	r0, 8018e26 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 8018e10:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 8018e14:	a806      	add	r0, sp, #24
 8018e16:	4642      	mov	r2, r8
 8018e18:	f7ff ff70 	bl	8018cfc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018e1c:	a902      	add	r1, sp, #8
 8018e1e:	4620      	mov	r0, r4
 8018e20:	f7fd ffe1 	bl	8016de6 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8018e24:	e7d5      	b.n	8018dd2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8018e26:	e894 0003 	ldmia.w	r4, {r0, r1}
 8018e2a:	e887 0003 	stmia.w	r7, {r0, r1}
 8018e2e:	a902      	add	r1, sp, #8
 8018e30:	4638      	mov	r0, r7
 8018e32:	f7fd ffd8 	bl	8016de6 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8018e36:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8018e3a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8018e3e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8018e42:	fb13 f302 	smulbb	r3, r3, r2
 8018e46:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8018e4a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8018e4e:	fb11 f102 	smulbb	r1, r1, r2
 8018e52:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8018e56:	fb09 f303 	mul.w	r3, r9, r3
 8018e5a:	fb12 1100 	smlabb	r1, r2, r0, r1
 8018e5e:	220b      	movs	r2, #11
 8018e60:	434a      	muls	r2, r1
 8018e62:	4293      	cmp	r3, r2
 8018e64:	dab5      	bge.n	8018dd2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8018e66:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 8018e6a:	a806      	add	r0, sp, #24
 8018e6c:	4642      	mov	r2, r8
 8018e6e:	f7ff ff45 	bl	8018cfc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018e72:	e897 0003 	ldmia.w	r7, {r0, r1}
 8018e76:	e884 0003 	stmia.w	r4, {r0, r1}
 8018e7a:	e7aa      	b.n	8018dd2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

08018e7c <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8018e7c:	4b1d      	ldr	r3, [pc, #116]	; (8018ef4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 8018e7e:	b530      	push	{r4, r5, lr}
 8018e80:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018e84:	b085      	sub	sp, #20
 8018e86:	4b1c      	ldr	r3, [pc, #112]	; (8018ef8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 8018e88:	460c      	mov	r4, r1
 8018e8a:	2100      	movs	r1, #0
 8018e8c:	4605      	mov	r5, r0
 8018e8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018e92:	6820      	ldr	r0, [r4, #0]
 8018e94:	9100      	str	r1, [sp, #0]
 8018e96:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018e9a:	ab02      	add	r3, sp, #8
 8018e9c:	6861      	ldr	r1, [r4, #4]
 8018e9e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018ea2:	c303      	stmia	r3!, {r0, r1}
 8018ea4:	4669      	mov	r1, sp
 8018ea6:	a802      	add	r0, sp, #8
 8018ea8:	f7fc fd5e 	bl	8015968 <_ZN8touchgfx4RectaNERKS0_>
 8018eac:	ab02      	add	r3, sp, #8
 8018eae:	cb03      	ldmia	r3!, {r0, r1}
 8018eb0:	4b12      	ldr	r3, [pc, #72]	; (8018efc <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 8018eb2:	6020      	str	r0, [r4, #0]
 8018eb4:	6818      	ldr	r0, [r3, #0]
 8018eb6:	6061      	str	r1, [r4, #4]
 8018eb8:	b138      	cbz	r0, 8018eca <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 8018eba:	f895 312c 	ldrb.w	r3, [r5, #300]	; 0x12c
 8018ebe:	b133      	cbz	r3, 8018ece <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 8018ec0:	6821      	ldr	r1, [r4, #0]
 8018ec2:	4628      	mov	r0, r5
 8018ec4:	6862      	ldr	r2, [r4, #4]
 8018ec6:	f7ff ff59 	bl	8018d7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8018eca:	b005      	add	sp, #20
 8018ecc:	bd30      	pop	{r4, r5, pc}
 8018ece:	6803      	ldr	r3, [r0, #0]
 8018ed0:	4621      	mov	r1, r4
 8018ed2:	689b      	ldr	r3, [r3, #8]
 8018ed4:	4798      	blx	r3
 8018ed6:	4b0a      	ldr	r3, [pc, #40]	; (8018f00 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 8018ed8:	6818      	ldr	r0, [r3, #0]
 8018eda:	b118      	cbz	r0, 8018ee4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 8018edc:	6803      	ldr	r3, [r0, #0]
 8018ede:	4621      	mov	r1, r4
 8018ee0:	689b      	ldr	r3, [r3, #8]
 8018ee2:	4798      	blx	r3
 8018ee4:	4b07      	ldr	r3, [pc, #28]	; (8018f04 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 8018ee6:	4621      	mov	r1, r4
 8018ee8:	6818      	ldr	r0, [r3, #0]
 8018eea:	6803      	ldr	r3, [r0, #0]
 8018eec:	695b      	ldr	r3, [r3, #20]
 8018eee:	4798      	blx	r3
 8018ef0:	e7eb      	b.n	8018eca <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 8018ef2:	bf00      	nop
 8018ef4:	2000bc70 	.word	0x2000bc70
 8018ef8:	2000bc72 	.word	0x2000bc72
 8018efc:	2000bcf8 	.word	0x2000bcf8
 8018f00:	2000bcf4 	.word	0x2000bcf4
 8018f04:	2000bc7c 	.word	0x2000bc7c

08018f08 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 8018f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f0c:	4604      	mov	r4, r0
 8018f0e:	b09b      	sub	sp, #108	; 0x6c
 8018f10:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
 8018f14:	b129      	cbz	r1, 8018f22 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 8018f16:	2300      	movs	r3, #0
 8018f18:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 8018f1c:	b01b      	add	sp, #108	; 0x6c
 8018f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f22:	4baf      	ldr	r3, [pc, #700]	; (80191e0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 8018f24:	681b      	ldr	r3, [r3, #0]
 8018f26:	b33b      	cbz	r3, 8018f78 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 8018f28:	4dae      	ldr	r5, [pc, #696]	; (80191e4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 8018f2a:	4628      	mov	r0, r5
 8018f2c:	f7fc fd60 	bl	80159f0 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018f30:	4606      	mov	r6, r0
 8018f32:	bb08      	cbnz	r0, 8018f78 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 8018f34:	4628      	mov	r0, r5
 8018f36:	f7ff fce9 	bl	801890c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8018f3a:	6829      	ldr	r1, [r5, #0]
 8018f3c:	686a      	ldr	r2, [r5, #4]
 8018f3e:	4620      	mov	r0, r4
 8018f40:	f7ff ff1c 	bl	8018d7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8018f44:	802e      	strh	r6, [r5, #0]
 8018f46:	806e      	strh	r6, [r5, #2]
 8018f48:	80ae      	strh	r6, [r5, #4]
 8018f4a:	80ee      	strh	r6, [r5, #6]
 8018f4c:	4fa6      	ldr	r7, [pc, #664]	; (80191e8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 8018f4e:	a809      	add	r0, sp, #36	; 0x24
 8018f50:	f7ff fe87 	bl	8018c62 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8018f54:	883d      	ldrh	r5, [r7, #0]
 8018f56:	462e      	mov	r6, r5
 8018f58:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8018f5c:	42b3      	cmp	r3, r6
 8018f5e:	d910      	bls.n	8018f82 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7a>
 8018f60:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8018f64:	3601      	adds	r6, #1
 8018f66:	a809      	add	r0, sp, #36	; 0x24
 8018f68:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 8018f6c:	b2b6      	uxth	r6, r6
 8018f6e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8018f72:	f7ff fee1 	bl	8018d38 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8018f76:	e7ef      	b.n	8018f58 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x50>
 8018f78:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8018f7c:	2b00      	cmp	r3, #0
 8018f7e:	d1e5      	bne.n	8018f4c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x44>
 8018f80:	e7cc      	b.n	8018f1c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8018f82:	462e      	mov	r6, r5
 8018f84:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 8018f88:	42b3      	cmp	r3, r6
 8018f8a:	d90b      	bls.n	8018fa4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 8018f8c:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8018f90:	3601      	adds	r6, #1
 8018f92:	4620      	mov	r0, r4
 8018f94:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 8018f98:	b2b6      	uxth	r6, r6
 8018f9a:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 8018f9e:	f7ff feed 	bl	8018d7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8018fa2:	e7ef      	b.n	8018f84 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7c>
 8018fa4:	4e91      	ldr	r6, [pc, #580]	; (80191ec <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 8018fa6:	6833      	ldr	r3, [r6, #0]
 8018fa8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8018fac:	2b01      	cmp	r3, #1
 8018fae:	f040 8092 	bne.w	80190d6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ce>
 8018fb2:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8018fb6:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 8018fba:	f04f 0900 	mov.w	r9, #0
 8018fbe:	33aa      	adds	r3, #170	; 0xaa
 8018fc0:	42a8      	cmp	r0, r5
 8018fc2:	f103 0308 	add.w	r3, r3, #8
 8018fc6:	dd0a      	ble.n	8018fde <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xd6>
 8018fc8:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8018fcc:	3501      	adds	r5, #1
 8018fce:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 8018fd2:	440a      	add	r2, r1
 8018fd4:	b212      	sxth	r2, r2
 8018fd6:	4591      	cmp	r9, r2
 8018fd8:	bfb8      	it	lt
 8018fda:	4691      	movlt	r9, r2
 8018fdc:	e7f0      	b.n	8018fc0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xb8>
 8018fde:	4b84      	ldr	r3, [pc, #528]	; (80191f0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 8018fe0:	f8df 8214 	ldr.w	r8, [pc, #532]	; 80191f8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>
 8018fe4:	881d      	ldrh	r5, [r3, #0]
 8018fe6:	2300      	movs	r3, #0
 8018fe8:	2d0f      	cmp	r5, #15
 8018fea:	bf8c      	ite	hi
 8018fec:	08ed      	lsrhi	r5, r5, #3
 8018fee:	2501      	movls	r5, #1
 8018ff0:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8018ff4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8018ff8:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 8018ffc:	6830      	ldr	r0, [r6, #0]
 8018ffe:	440b      	add	r3, r1
 8019000:	6802      	ldr	r2, [r0, #0]
 8019002:	b21b      	sxth	r3, r3
 8019004:	4599      	cmp	r9, r3
 8019006:	dd49      	ble.n	801909c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x194>
 8019008:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 801900c:	4798      	blx	r3
 801900e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8019012:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8019016:	4413      	add	r3, r2
 8019018:	b21b      	sxth	r3, r3
 801901a:	195a      	adds	r2, r3, r5
 801901c:	4290      	cmp	r0, r2
 801901e:	da07      	bge.n	8019030 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 8019020:	4581      	cmp	r9, r0
 8019022:	dd05      	ble.n	8019030 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 8019024:	4298      	cmp	r0, r3
 8019026:	da33      	bge.n	8019090 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 8019028:	2b00      	cmp	r3, #0
 801902a:	dd31      	ble.n	8019090 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 801902c:	4648      	mov	r0, r9
 801902e:	e004      	b.n	801903a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x132>
 8019030:	4298      	cmp	r0, r3
 8019032:	dbfb      	blt.n	801902c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x124>
 8019034:	4548      	cmp	r0, r9
 8019036:	bfa8      	it	ge
 8019038:	4648      	movge	r0, r9
 801903a:	f9b8 2000 	ldrsh.w	r2, [r8]
 801903e:	2100      	movs	r1, #0
 8019040:	1ac0      	subs	r0, r0, r3
 8019042:	f8b7 a000 	ldrh.w	sl, [r7]
 8019046:	f8ad 1014 	strh.w	r1, [sp, #20]
 801904a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801904e:	f8ad 2018 	strh.w	r2, [sp, #24]
 8019052:	f8ad 001a 	strh.w	r0, [sp, #26]
 8019056:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801905a:	4553      	cmp	r3, sl
 801905c:	d9ca      	bls.n	8018ff4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 801905e:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 8019062:	ab07      	add	r3, sp, #28
 8019064:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8019068:	6851      	ldr	r1, [r2, #4]
 801906a:	c303      	stmia	r3!, {r0, r1}
 801906c:	a807      	add	r0, sp, #28
 801906e:	a905      	add	r1, sp, #20
 8019070:	f7fc fc7a 	bl	8015968 <_ZN8touchgfx4RectaNERKS0_>
 8019074:	a807      	add	r0, sp, #28
 8019076:	f7fc fcbb 	bl	80159f0 <_ZNK8touchgfx4Rect7isEmptyEv>
 801907a:	b920      	cbnz	r0, 8019086 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x17e>
 801907c:	6823      	ldr	r3, [r4, #0]
 801907e:	a907      	add	r1, sp, #28
 8019080:	4620      	mov	r0, r4
 8019082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019084:	4798      	blx	r3
 8019086:	f10a 0a01 	add.w	sl, sl, #1
 801908a:	fa1f fa8a 	uxth.w	sl, sl
 801908e:	e7e2      	b.n	8019056 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14e>
 8019090:	6830      	ldr	r0, [r6, #0]
 8019092:	2101      	movs	r1, #1
 8019094:	6803      	ldr	r3, [r0, #0]
 8019096:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019098:	4798      	blx	r3
 801909a:	e7ab      	b.n	8018ff4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 801909c:	69d3      	ldr	r3, [r2, #28]
 801909e:	4798      	blx	r3
 80190a0:	4b54      	ldr	r3, [pc, #336]	; (80191f4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 80190a2:	781b      	ldrb	r3, [r3, #0]
 80190a4:	2b00      	cmp	r3, #0
 80190a6:	f43f af39 	beq.w	8018f1c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 80190aa:	2300      	movs	r3, #0
 80190ac:	883d      	ldrh	r5, [r7, #0]
 80190ae:	34ea      	adds	r4, #234	; 0xea
 80190b0:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 80190b4:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 80190b8:	42ab      	cmp	r3, r5
 80190ba:	f67f af2f 	bls.w	8018f1c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 80190be:	ab1a      	add	r3, sp, #104	; 0x68
 80190c0:	4620      	mov	r0, r4
 80190c2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80190c6:	3501      	adds	r5, #1
 80190c8:	3b44      	subs	r3, #68	; 0x44
 80190ca:	b2ad      	uxth	r5, r5
 80190cc:	e893 0006 	ldmia.w	r3, {r1, r2}
 80190d0:	f7ff fe32 	bl	8018d38 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 80190d4:	e7ee      	b.n	80190b4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ac>
 80190d6:	2b02      	cmp	r3, #2
 80190d8:	d16a      	bne.n	80191b0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 80190da:	f8df a120 	ldr.w	sl, [pc, #288]	; 80191fc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 80190de:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80190e2:	42ab      	cmp	r3, r5
 80190e4:	d9dc      	bls.n	80190a0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 80190e6:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 80190ea:	ab03      	add	r3, sp, #12
 80190ec:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80190f0:	6851      	ldr	r1, [r2, #4]
 80190f2:	c303      	stmia	r3!, {r0, r1}
 80190f4:	f89a 3000 	ldrb.w	r3, [sl]
 80190f8:	2b01      	cmp	r3, #1
 80190fa:	d102      	bne.n	8019102 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1fa>
 80190fc:	a803      	add	r0, sp, #12
 80190fe:	f7ff fc5f 	bl	80189c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019102:	a803      	add	r0, sp, #12
 8019104:	f7fc fc74 	bl	80159f0 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019108:	2800      	cmp	r0, #0
 801910a:	d14a      	bne.n	80191a2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x29a>
 801910c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8019110:	f10d 0914 	add.w	r9, sp, #20
 8019114:	f10d 081c 	add.w	r8, sp, #28
 8019118:	f8ad 001a 	strh.w	r0, [sp, #26]
 801911c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019120:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8019124:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019128:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801912c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019130:	f8bd b012 	ldrh.w	fp, [sp, #18]
 8019134:	f8bd c00e 	ldrh.w	ip, [sp, #14]
 8019138:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801913c:	44dc      	add	ip, fp
 801913e:	6830      	ldr	r0, [r6, #0]
 8019140:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8019144:	ebac 0c02 	sub.w	ip, ip, r2
 8019148:	f8d0 e000 	ldr.w	lr, [r0]
 801914c:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8019150:	fa1f fc8c 	uxth.w	ip, ip
 8019154:	f8cd c000 	str.w	ip, [sp]
 8019158:	f8de b078 	ldr.w	fp, [lr, #120]	; 0x78
 801915c:	47d8      	blx	fp
 801915e:	f89a 3000 	ldrb.w	r3, [sl]
 8019162:	f8ad 001a 	strh.w	r0, [sp, #26]
 8019166:	2b01      	cmp	r3, #1
 8019168:	d11e      	bne.n	80191a8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a0>
 801916a:	e899 0003 	ldmia.w	r9, {r0, r1}
 801916e:	e888 0003 	stmia.w	r8, {r0, r1}
 8019172:	4640      	mov	r0, r8
 8019174:	f7ff fbca 	bl	801890c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8019178:	6823      	ldr	r3, [r4, #0]
 801917a:	4641      	mov	r1, r8
 801917c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801917e:	4620      	mov	r0, r4
 8019180:	4798      	blx	r3
 8019182:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8019186:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801918a:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 801918e:	4413      	add	r3, r2
 8019190:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8019194:	440a      	add	r2, r1
 8019196:	b21b      	sxth	r3, r3
 8019198:	b212      	sxth	r2, r2
 801919a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801919e:	4293      	cmp	r3, r2
 80191a0:	dbc6      	blt.n	8019130 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x228>
 80191a2:	3501      	adds	r5, #1
 80191a4:	b2ad      	uxth	r5, r5
 80191a6:	e79a      	b.n	80190de <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d6>
 80191a8:	6823      	ldr	r3, [r4, #0]
 80191aa:	4649      	mov	r1, r9
 80191ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80191ae:	e7e6      	b.n	801917e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 80191b0:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80191b4:	42ab      	cmp	r3, r5
 80191b6:	f67f af73 	bls.w	80190a0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 80191ba:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 80191be:	ab07      	add	r3, sp, #28
 80191c0:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80191c4:	6851      	ldr	r1, [r2, #4]
 80191c6:	c303      	stmia	r3!, {r0, r1}
 80191c8:	a807      	add	r0, sp, #28
 80191ca:	f7fc fc11 	bl	80159f0 <_ZNK8touchgfx4Rect7isEmptyEv>
 80191ce:	b920      	cbnz	r0, 80191da <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d2>
 80191d0:	6823      	ldr	r3, [r4, #0]
 80191d2:	a907      	add	r1, sp, #28
 80191d4:	4620      	mov	r0, r4
 80191d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80191d8:	4798      	blx	r3
 80191da:	3501      	adds	r5, #1
 80191dc:	b2ad      	uxth	r5, r5
 80191de:	e7e7      	b.n	80191b0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 80191e0:	2000bcf4 	.word	0x2000bcf4
 80191e4:	2000bd00 	.word	0x2000bd00
 80191e8:	20000044 	.word	0x20000044
 80191ec:	2000bc7c 	.word	0x2000bc7c
 80191f0:	2000bc72 	.word	0x2000bc72
 80191f4:	2000bc7a 	.word	0x2000bc7a
 80191f8:	2000bc70 	.word	0x2000bc70
 80191fc:	2000bc74 	.word	0x2000bc74

08019200 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8019200:	4b03      	ldr	r3, [pc, #12]	; (8019210 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8019202:	2200      	movs	r2, #0
 8019204:	801a      	strh	r2, [r3, #0]
 8019206:	805a      	strh	r2, [r3, #2]
 8019208:	809a      	strh	r2, [r3, #4]
 801920a:	80da      	strh	r2, [r3, #6]
 801920c:	4770      	bx	lr
 801920e:	bf00      	nop
 8019210:	2000bd00 	.word	0x2000bd00

08019214 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
 8019214:	2000      	movs	r0, #0
 8019216:	4770      	bx	lr

08019218 <_ZNK8touchgfx4Font12getGSUBTableEv>:
 8019218:	2000      	movs	r0, #0
 801921a:	4770      	bx	lr

0801921c <_ZNK8touchgfx4Font12getCharWidthEt>:
 801921c:	b508      	push	{r3, lr}
 801921e:	6803      	ldr	r3, [r0, #0]
 8019220:	68db      	ldr	r3, [r3, #12]
 8019222:	4798      	blx	r3
 8019224:	b128      	cbz	r0, 8019232 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8019226:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801922a:	7a80      	ldrb	r0, [r0, #10]
 801922c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019230:	4318      	orrs	r0, r3
 8019232:	bd08      	pop	{r3, pc}

08019234 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
 8019234:	b40e      	push	{r1, r2, r3}
 8019236:	b533      	push	{r0, r1, r4, r5, lr}
 8019238:	ab05      	add	r3, sp, #20
 801923a:	f853 2b04 	ldr.w	r2, [r3], #4
 801923e:	9301      	str	r3, [sp, #4]
 8019240:	4b0a      	ldr	r3, [pc, #40]	; (801926c <_ZNK8touchgfx4Font14getStringWidthEPKtz+0x38>)
 8019242:	685c      	ldr	r4, [r3, #4]
 8019244:	1061      	asrs	r1, r4, #1
 8019246:	07e4      	lsls	r4, r4, #31
 8019248:	eb00 0501 	add.w	r5, r0, r1
 801924c:	bf46      	itte	mi
 801924e:	681b      	ldrmi	r3, [r3, #0]
 8019250:	5841      	ldrmi	r1, [r0, r1]
 8019252:	681c      	ldrpl	r4, [r3, #0]
 8019254:	4628      	mov	r0, r5
 8019256:	bf48      	it	mi
 8019258:	58cc      	ldrmi	r4, [r1, r3]
 801925a:	2100      	movs	r1, #0
 801925c:	9b01      	ldr	r3, [sp, #4]
 801925e:	47a0      	blx	r4
 8019260:	b002      	add	sp, #8
 8019262:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019266:	b003      	add	sp, #12
 8019268:	4770      	bx	lr
 801926a:	bf00      	nop
 801926c:	20000028 	.word	0x20000028

08019270 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:
 8019270:	b40c      	push	{r2, r3}
 8019272:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019274:	ab06      	add	r3, sp, #24
 8019276:	f853 2b04 	ldr.w	r2, [r3], #4
 801927a:	9301      	str	r3, [sp, #4]
 801927c:	4b09      	ldr	r3, [pc, #36]	; (80192a4 <_ZNK8touchgfx4Font14getStringWidthEhPKtz+0x34>)
 801927e:	685d      	ldr	r5, [r3, #4]
 8019280:	106c      	asrs	r4, r5, #1
 8019282:	07ed      	lsls	r5, r5, #31
 8019284:	eb00 0604 	add.w	r6, r0, r4
 8019288:	bf45      	ittet	mi
 801928a:	681b      	ldrmi	r3, [r3, #0]
 801928c:	5900      	ldrmi	r0, [r0, r4]
 801928e:	681c      	ldrpl	r4, [r3, #0]
 8019290:	58c4      	ldrmi	r4, [r0, r3]
 8019292:	4630      	mov	r0, r6
 8019294:	9b01      	ldr	r3, [sp, #4]
 8019296:	47a0      	blx	r4
 8019298:	b002      	add	sp, #8
 801929a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801929e:	b002      	add	sp, #8
 80192a0:	4770      	bx	lr
 80192a2:	bf00      	nop
 80192a4:	20000028 	.word	0x20000028

080192a8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 80192a8:	b40e      	push	{r1, r2, r3}
 80192aa:	b530      	push	{r4, r5, lr}
 80192ac:	b098      	sub	sp, #96	; 0x60
 80192ae:	4604      	mov	r4, r0
 80192b0:	ab1b      	add	r3, sp, #108	; 0x6c
 80192b2:	a802      	add	r0, sp, #8
 80192b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80192b8:	9301      	str	r3, [sp, #4]
 80192ba:	f001 f837 	bl	801a32c <_ZN8touchgfx12TextProviderC1Ev>
 80192be:	6823      	ldr	r3, [r4, #0]
 80192c0:	4620      	mov	r0, r4
 80192c2:	2401      	movs	r4, #1
 80192c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80192c6:	4798      	blx	r3
 80192c8:	9a01      	ldr	r2, [sp, #4]
 80192ca:	4603      	mov	r3, r0
 80192cc:	4629      	mov	r1, r5
 80192ce:	a802      	add	r0, sp, #8
 80192d0:	f001 f849 	bl	801a366 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80192d4:	a802      	add	r0, sp, #8
 80192d6:	f001 f87f 	bl	801a3d8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80192da:	b2a3      	uxth	r3, r4
 80192dc:	b138      	cbz	r0, 80192ee <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x46>
 80192de:	280a      	cmp	r0, #10
 80192e0:	a802      	add	r0, sp, #8
 80192e2:	bf04      	itt	eq
 80192e4:	3301      	addeq	r3, #1
 80192e6:	b21c      	sxtheq	r4, r3
 80192e8:	f001 f876 	bl	801a3d8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80192ec:	e7f5      	b.n	80192da <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 80192ee:	4618      	mov	r0, r3
 80192f0:	b018      	add	sp, #96	; 0x60
 80192f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80192f6:	b003      	add	sp, #12
 80192f8:	4770      	bx	lr
	...

080192fc <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 80192fc:	b40e      	push	{r1, r2, r3}
 80192fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019300:	b098      	sub	sp, #96	; 0x60
 8019302:	4605      	mov	r5, r0
 8019304:	4f25      	ldr	r7, [pc, #148]	; (801939c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0xa0>)
 8019306:	ab1d      	add	r3, sp, #116	; 0x74
 8019308:	a802      	add	r0, sp, #8
 801930a:	ae18      	add	r6, sp, #96	; 0x60
 801930c:	f853 4b04 	ldr.w	r4, [r3], #4
 8019310:	9300      	str	r3, [sp, #0]
 8019312:	f001 f80b 	bl	801a32c <_ZN8touchgfx12TextProviderC1Ev>
 8019316:	682b      	ldr	r3, [r5, #0]
 8019318:	4628      	mov	r0, r5
 801931a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801931c:	4798      	blx	r3
 801931e:	4621      	mov	r1, r4
 8019320:	2400      	movs	r4, #0
 8019322:	4603      	mov	r3, r0
 8019324:	9a00      	ldr	r2, [sp, #0]
 8019326:	a802      	add	r0, sp, #8
 8019328:	f001 f81d 	bl	801a366 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801932c:	f846 4d5c 	str.w	r4, [r6, #-92]!
 8019330:	462a      	mov	r2, r5
 8019332:	4633      	mov	r3, r6
 8019334:	4621      	mov	r1, r4
 8019336:	a802      	add	r0, sp, #8
 8019338:	f001 f97a 	bl	801a630 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801933c:	b340      	cbz	r0, 8019390 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x94>
 801933e:	280a      	cmp	r0, #10
 8019340:	d01f      	beq.n	8019382 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8019342:	9901      	ldr	r1, [sp, #4]
 8019344:	b1e9      	cbz	r1, 8019382 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8019346:	7b4b      	ldrb	r3, [r1, #13]
 8019348:	f891 c008 	ldrb.w	ip, [r1, #8]
 801934c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8019350:	ea4f 1e03 	mov.w	lr, r3, lsl #4
 8019354:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8019358:	79c9      	ldrb	r1, [r1, #7]
 801935a:	f40e 7e80 	and.w	lr, lr, #256	; 0x100
 801935e:	bf18      	it	ne
 8019360:	4638      	movne	r0, r7
 8019362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019366:	bf08      	it	eq
 8019368:	2000      	moveq	r0, #0
 801936a:	88aa      	ldrh	r2, [r5, #4]
 801936c:	ea41 010e 	orr.w	r1, r1, lr
 8019370:	ea43 030c 	orr.w	r3, r3, ip
 8019374:	440a      	add	r2, r1
 8019376:	4303      	orrs	r3, r0
 8019378:	1ad3      	subs	r3, r2, r3
 801937a:	b29b      	uxth	r3, r3
 801937c:	42a3      	cmp	r3, r4
 801937e:	bfc8      	it	gt
 8019380:	b21c      	sxthgt	r4, r3
 8019382:	4633      	mov	r3, r6
 8019384:	462a      	mov	r2, r5
 8019386:	2100      	movs	r1, #0
 8019388:	a802      	add	r0, sp, #8
 801938a:	f001 f951 	bl	801a630 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801938e:	e7d5      	b.n	801933c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x40>
 8019390:	b2a0      	uxth	r0, r4
 8019392:	b018      	add	sp, #96	; 0x60
 8019394:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019398:	b003      	add	sp, #12
 801939a:	4770      	bx	lr
 801939c:	fffffe00 	.word	0xfffffe00

080193a0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 80193a0:	b40e      	push	{r1, r2, r3}
 80193a2:	b570      	push	{r4, r5, r6, lr}
 80193a4:	b099      	sub	sp, #100	; 0x64
 80193a6:	4604      	mov	r4, r0
 80193a8:	26ff      	movs	r6, #255	; 0xff
 80193aa:	ab1d      	add	r3, sp, #116	; 0x74
 80193ac:	a802      	add	r0, sp, #8
 80193ae:	f853 5b04 	ldr.w	r5, [r3], #4
 80193b2:	9300      	str	r3, [sp, #0]
 80193b4:	f000 ffba 	bl	801a32c <_ZN8touchgfx12TextProviderC1Ev>
 80193b8:	6823      	ldr	r3, [r4, #0]
 80193ba:	4620      	mov	r0, r4
 80193bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80193be:	4798      	blx	r3
 80193c0:	4629      	mov	r1, r5
 80193c2:	4603      	mov	r3, r0
 80193c4:	9a00      	ldr	r2, [sp, #0]
 80193c6:	a802      	add	r0, sp, #8
 80193c8:	ad18      	add	r5, sp, #96	; 0x60
 80193ca:	f000 ffcc 	bl	801a366 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80193ce:	2100      	movs	r1, #0
 80193d0:	4622      	mov	r2, r4
 80193d2:	a802      	add	r0, sp, #8
 80193d4:	f845 1d5c 	str.w	r1, [r5, #-92]!
 80193d8:	462b      	mov	r3, r5
 80193da:	f001 f929 	bl	801a630 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80193de:	b190      	cbz	r0, 8019406 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x66>
 80193e0:	280a      	cmp	r0, #10
 80193e2:	d009      	beq.n	80193f8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 80193e4:	9a01      	ldr	r2, [sp, #4]
 80193e6:	b13a      	cbz	r2, 80193f8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 80193e8:	7923      	ldrb	r3, [r4, #4]
 80193ea:	7a12      	ldrb	r2, [r2, #8]
 80193ec:	1a9b      	subs	r3, r3, r2
 80193ee:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 80193f2:	429e      	cmp	r6, r3
 80193f4:	bf28      	it	cs
 80193f6:	461e      	movcs	r6, r3
 80193f8:	462b      	mov	r3, r5
 80193fa:	4622      	mov	r2, r4
 80193fc:	2100      	movs	r1, #0
 80193fe:	a802      	add	r0, sp, #8
 8019400:	f001 f916 	bl	801a630 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019404:	e7eb      	b.n	80193de <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 8019406:	4630      	mov	r0, r6
 8019408:	b019      	add	sp, #100	; 0x64
 801940a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801940e:	b003      	add	sp, #12
 8019410:	4770      	bx	lr

08019412 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8019412:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019416:	b099      	sub	sp, #100	; 0x64
 8019418:	4606      	mov	r6, r0
 801941a:	4614      	mov	r4, r2
 801941c:	4688      	mov	r8, r1
 801941e:	a802      	add	r0, sp, #8
 8019420:	461d      	mov	r5, r3
 8019422:	f04f 0b00 	mov.w	fp, #0
 8019426:	f000 ff81 	bl	801a32c <_ZN8touchgfx12TextProviderC1Ev>
 801942a:	6833      	ldr	r3, [r6, #0]
 801942c:	4630      	mov	r0, r6
 801942e:	465f      	mov	r7, fp
 8019430:	46da      	mov	sl, fp
 8019432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019434:	46d9      	mov	r9, fp
 8019436:	4798      	blx	r3
 8019438:	462a      	mov	r2, r5
 801943a:	4603      	mov	r3, r0
 801943c:	4621      	mov	r1, r4
 801943e:	a802      	add	r0, sp, #8
 8019440:	f000 ff91 	bl	801a366 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8019444:	ab01      	add	r3, sp, #4
 8019446:	4632      	mov	r2, r6
 8019448:	4641      	mov	r1, r8
 801944a:	a802      	add	r0, sp, #8
 801944c:	f8cd 9004 	str.w	r9, [sp, #4]
 8019450:	f001 f8ee 	bl	801a630 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019454:	4605      	mov	r5, r0
 8019456:	b108      	cbz	r0, 801945c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x4a>
 8019458:	280a      	cmp	r0, #10
 801945a:	d10b      	bne.n	8019474 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x62>
 801945c:	4557      	cmp	r7, sl
 801945e:	bf38      	it	cc
 8019460:	4657      	movcc	r7, sl
 8019462:	f04f 0a00 	mov.w	sl, #0
 8019466:	b91d      	cbnz	r5, 8019470 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 8019468:	4638      	mov	r0, r7
 801946a:	b019      	add	sp, #100	; 0x64
 801946c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019470:	46ab      	mov	fp, r5
 8019472:	e7e7      	b.n	8019444 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x32>
 8019474:	9a01      	ldr	r2, [sp, #4]
 8019476:	2a00      	cmp	r2, #0
 8019478:	d0fa      	beq.n	8019470 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 801947a:	f992 400d 	ldrsb.w	r4, [r2, #13]
 801947e:	4659      	mov	r1, fp
 8019480:	6833      	ldr	r3, [r6, #0]
 8019482:	f404 7080 	and.w	r0, r4, #256	; 0x100
 8019486:	7a94      	ldrb	r4, [r2, #10]
 8019488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801948a:	4304      	orrs	r4, r0
 801948c:	4630      	mov	r0, r6
 801948e:	8895      	ldrh	r5, [r2, #4]
 8019490:	4798      	blx	r3
 8019492:	4420      	add	r0, r4
 8019494:	4450      	add	r0, sl
 8019496:	fa1f fa80 	uxth.w	sl, r0
 801949a:	e7e4      	b.n	8019466 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x54>

0801949c <_ZNK8touchgfx8Drawable10invalidateEv>:
 801949c:	b513      	push	{r0, r1, r4, lr}
 801949e:	1d01      	adds	r1, r0, #4
 80194a0:	4603      	mov	r3, r0
 80194a2:	466a      	mov	r2, sp
 80194a4:	c903      	ldmia	r1, {r0, r1}
 80194a6:	e882 0003 	stmia.w	r2, {r0, r1}
 80194aa:	2100      	movs	r1, #0
 80194ac:	4618      	mov	r0, r3
 80194ae:	9100      	str	r1, [sp, #0]
 80194b0:	6819      	ldr	r1, [r3, #0]
 80194b2:	690c      	ldr	r4, [r1, #16]
 80194b4:	4611      	mov	r1, r2
 80194b6:	47a0      	blx	r4
 80194b8:	b002      	add	sp, #8
 80194ba:	bd10      	pop	{r4, pc}

080194bc <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 80194bc:	b538      	push	{r3, r4, r5, lr}
 80194be:	680b      	ldr	r3, [r1, #0]
 80194c0:	460c      	mov	r4, r1
 80194c2:	4605      	mov	r5, r0
 80194c4:	68db      	ldr	r3, [r3, #12]
 80194c6:	4798      	blx	r3
 80194c8:	6823      	ldr	r3, [r4, #0]
 80194ca:	4620      	mov	r0, r4
 80194cc:	4629      	mov	r1, r5
 80194ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80194d0:	4798      	blx	r3
 80194d2:	4628      	mov	r0, r5
 80194d4:	bd38      	pop	{r3, r4, r5, pc}

080194d6 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 80194d6:	b410      	push	{r4}
 80194d8:	880a      	ldrh	r2, [r1, #0]
 80194da:	8884      	ldrh	r4, [r0, #4]
 80194dc:	4422      	add	r2, r4
 80194de:	800a      	strh	r2, [r1, #0]
 80194e0:	884a      	ldrh	r2, [r1, #2]
 80194e2:	88c4      	ldrh	r4, [r0, #6]
 80194e4:	4422      	add	r2, r4
 80194e6:	804a      	strh	r2, [r1, #2]
 80194e8:	6940      	ldr	r0, [r0, #20]
 80194ea:	b120      	cbz	r0, 80194f6 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 80194ec:	6803      	ldr	r3, [r0, #0]
 80194ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80194f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80194f4:	4718      	bx	r3
 80194f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80194fa:	4770      	bx	lr

080194fc <_ZN8touchgfx8Drawable12moveRelativeEss>:
 80194fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80194fe:	460b      	mov	r3, r1
 8019500:	b085      	sub	sp, #20
 8019502:	4604      	mov	r4, r0
 8019504:	b901      	cbnz	r1, 8019508 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8019506:	b1fa      	cbz	r2, 8019548 <_ZN8touchgfx8Drawable12moveRelativeEss+0x4c>
 8019508:	1d27      	adds	r7, r4, #4
 801950a:	466e      	mov	r6, sp
 801950c:	ad02      	add	r5, sp, #8
 801950e:	e897 0003 	ldmia.w	r7, {r0, r1}
 8019512:	e886 0003 	stmia.w	r6, {r0, r1}
 8019516:	88e1      	ldrh	r1, [r4, #6]
 8019518:	4620      	mov	r0, r4
 801951a:	440a      	add	r2, r1
 801951c:	88a1      	ldrh	r1, [r4, #4]
 801951e:	4419      	add	r1, r3
 8019520:	6823      	ldr	r3, [r4, #0]
 8019522:	b212      	sxth	r2, r2
 8019524:	b209      	sxth	r1, r1
 8019526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019528:	4798      	blx	r3
 801952a:	e897 0003 	ldmia.w	r7, {r0, r1}
 801952e:	e885 0003 	stmia.w	r5, {r0, r1}
 8019532:	6960      	ldr	r0, [r4, #20]
 8019534:	b150      	cbz	r0, 801954c <_ZN8touchgfx8Drawable12moveRelativeEss+0x50>
 8019536:	6803      	ldr	r3, [r0, #0]
 8019538:	4631      	mov	r1, r6
 801953a:	691b      	ldr	r3, [r3, #16]
 801953c:	4798      	blx	r3
 801953e:	6960      	ldr	r0, [r4, #20]
 8019540:	6803      	ldr	r3, [r0, #0]
 8019542:	691b      	ldr	r3, [r3, #16]
 8019544:	4629      	mov	r1, r5
 8019546:	4798      	blx	r3
 8019548:	b005      	add	sp, #20
 801954a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801954c:	f7ff fb78 	bl	8018c40 <_ZN8touchgfx11Application11getInstanceEv>
 8019550:	6803      	ldr	r3, [r0, #0]
 8019552:	4631      	mov	r1, r6
 8019554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019556:	4798      	blx	r3
 8019558:	f7ff fb72 	bl	8018c40 <_ZN8touchgfx11Application11getInstanceEv>
 801955c:	6803      	ldr	r3, [r0, #0]
 801955e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019560:	e7f0      	b.n	8019544 <_ZN8touchgfx8Drawable12moveRelativeEss+0x48>

08019562 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8019562:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019564:	8882      	ldrh	r2, [r0, #4]
 8019566:	4605      	mov	r5, r0
 8019568:	880b      	ldrh	r3, [r1, #0]
 801956a:	460c      	mov	r4, r1
 801956c:	4413      	add	r3, r2
 801956e:	800b      	strh	r3, [r1, #0]
 8019570:	884b      	ldrh	r3, [r1, #2]
 8019572:	88c2      	ldrh	r2, [r0, #6]
 8019574:	4413      	add	r3, r2
 8019576:	4602      	mov	r2, r0
 8019578:	804b      	strh	r3, [r1, #2]
 801957a:	466b      	mov	r3, sp
 801957c:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8019580:	6851      	ldr	r1, [r2, #4]
 8019582:	c303      	stmia	r3!, {r0, r1}
 8019584:	4621      	mov	r1, r4
 8019586:	4668      	mov	r0, sp
 8019588:	f7fc f9ee 	bl	8015968 <_ZN8touchgfx4RectaNERKS0_>
 801958c:	466b      	mov	r3, sp
 801958e:	cb03      	ldmia	r3!, {r0, r1}
 8019590:	6020      	str	r0, [r4, #0]
 8019592:	6061      	str	r1, [r4, #4]
 8019594:	6968      	ldr	r0, [r5, #20]
 8019596:	b128      	cbz	r0, 80195a4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 8019598:	6803      	ldr	r3, [r0, #0]
 801959a:	691b      	ldr	r3, [r3, #16]
 801959c:	4621      	mov	r1, r4
 801959e:	4798      	blx	r3
 80195a0:	b003      	add	sp, #12
 80195a2:	bd30      	pop	{r4, r5, pc}
 80195a4:	f7ff fb4c 	bl	8018c40 <_ZN8touchgfx11Application11getInstanceEv>
 80195a8:	6803      	ldr	r3, [r0, #0]
 80195aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80195ac:	e7f6      	b.n	801959c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

080195ae <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 80195ae:	b570      	push	{r4, r5, r6, lr}
 80195b0:	8882      	ldrh	r2, [r0, #4]
 80195b2:	460c      	mov	r4, r1
 80195b4:	880b      	ldrh	r3, [r1, #0]
 80195b6:	4605      	mov	r5, r0
 80195b8:	4413      	add	r3, r2
 80195ba:	800b      	strh	r3, [r1, #0]
 80195bc:	884b      	ldrh	r3, [r1, #2]
 80195be:	88c2      	ldrh	r2, [r0, #6]
 80195c0:	4413      	add	r3, r2
 80195c2:	804b      	strh	r3, [r1, #2]
 80195c4:	1d01      	adds	r1, r0, #4
 80195c6:	4620      	mov	r0, r4
 80195c8:	f7fc f9ce 	bl	8015968 <_ZN8touchgfx4RectaNERKS0_>
 80195cc:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80195d0:	b153      	cbz	r3, 80195e8 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 80195d2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80195d6:	b13b      	cbz	r3, 80195e8 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 80195d8:	6968      	ldr	r0, [r5, #20]
 80195da:	b128      	cbz	r0, 80195e8 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 80195dc:	6803      	ldr	r3, [r0, #0]
 80195de:	4621      	mov	r1, r4
 80195e0:	6a1b      	ldr	r3, [r3, #32]
 80195e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80195e6:	4718      	bx	r3
 80195e8:	bd70      	pop	{r4, r5, r6, pc}

080195ea <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 80195ea:	b510      	push	{r4, lr}
 80195ec:	2300      	movs	r3, #0
 80195ee:	4604      	mov	r4, r0
 80195f0:	4608      	mov	r0, r1
 80195f2:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 80195f6:	8023      	strh	r3, [r4, #0]
 80195f8:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80195fc:	8063      	strh	r3, [r4, #2]
 80195fe:	6803      	ldr	r3, [r0, #0]
 8019600:	80a1      	strh	r1, [r4, #4]
 8019602:	4621      	mov	r1, r4
 8019604:	80e2      	strh	r2, [r4, #6]
 8019606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019608:	4798      	blx	r3
 801960a:	4620      	mov	r0, r4
 801960c:	bd10      	pop	{r4, pc}
	...

08019610 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8019610:	b530      	push	{r4, r5, lr}
 8019612:	8083      	strh	r3, [r0, #4]
 8019614:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8019618:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801961c:	7183      	strb	r3, [r0, #6]
 801961e:	79c3      	ldrb	r3, [r0, #7]
 8019620:	6101      	str	r1, [r0, #16]
 8019622:	f365 0306 	bfi	r3, r5, #0, #7
 8019626:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801962a:	8282      	strh	r2, [r0, #20]
 801962c:	f365 13c7 	bfi	r3, r5, #7, #1
 8019630:	71c3      	strb	r3, [r0, #7]
 8019632:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8019636:	7203      	strb	r3, [r0, #8]
 8019638:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801963c:	7243      	strb	r3, [r0, #9]
 801963e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8019642:	8143      	strh	r3, [r0, #10]
 8019644:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8019648:	8183      	strh	r3, [r0, #12]
 801964a:	4b01      	ldr	r3, [pc, #4]	; (8019650 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801964c:	6003      	str	r3, [r0, #0]
 801964e:	bd30      	pop	{r4, r5, pc}
 8019650:	0802874c 	.word	0x0802874c

08019654 <_ZNK8touchgfx9ConstFont4findEt>:
 8019654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019656:	8a84      	ldrh	r4, [r0, #20]
 8019658:	2500      	movs	r5, #0
 801965a:	260e      	movs	r6, #14
 801965c:	3c01      	subs	r4, #1
 801965e:	42a5      	cmp	r5, r4
 8019660:	dc0c      	bgt.n	801967c <_ZNK8touchgfx9ConstFont4findEt+0x28>
 8019662:	192a      	adds	r2, r5, r4
 8019664:	6903      	ldr	r3, [r0, #16]
 8019666:	1052      	asrs	r2, r2, #1
 8019668:	fb06 3302 	mla	r3, r6, r2, r3
 801966c:	889f      	ldrh	r7, [r3, #4]
 801966e:	428f      	cmp	r7, r1
 8019670:	d901      	bls.n	8019676 <_ZNK8touchgfx9ConstFont4findEt+0x22>
 8019672:	1e54      	subs	r4, r2, #1
 8019674:	e7f3      	b.n	801965e <_ZNK8touchgfx9ConstFont4findEt+0xa>
 8019676:	d202      	bcs.n	801967e <_ZNK8touchgfx9ConstFont4findEt+0x2a>
 8019678:	1c55      	adds	r5, r2, #1
 801967a:	e7f0      	b.n	801965e <_ZNK8touchgfx9ConstFont4findEt+0xa>
 801967c:	2300      	movs	r3, #0
 801967e:	4618      	mov	r0, r3
 8019680:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019682 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8019682:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019684:	4605      	mov	r5, r0
 8019686:	4617      	mov	r7, r2
 8019688:	461e      	mov	r6, r3
 801968a:	f7ff ffe3 	bl	8019654 <_ZNK8touchgfx9ConstFont4findEt>
 801968e:	b9e0      	cbnz	r0, 80196ca <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x48>
 8019690:	b911      	cbnz	r1, 8019698 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x16>
 8019692:	2400      	movs	r4, #0
 8019694:	4620      	mov	r0, r4
 8019696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019698:	290a      	cmp	r1, #10
 801969a:	d0fa      	beq.n	8019692 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801969c:	682b      	ldr	r3, [r5, #0]
 801969e:	4628      	mov	r0, r5
 80196a0:	691b      	ldr	r3, [r3, #16]
 80196a2:	4798      	blx	r3
 80196a4:	4601      	mov	r1, r0
 80196a6:	4628      	mov	r0, r5
 80196a8:	f7ff ffd4 	bl	8019654 <_ZNK8touchgfx9ConstFont4findEt>
 80196ac:	4604      	mov	r4, r0
 80196ae:	2800      	cmp	r0, #0
 80196b0:	d0ef      	beq.n	8019692 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 80196b2:	682b      	ldr	r3, [r5, #0]
 80196b4:	4621      	mov	r1, r4
 80196b6:	4628      	mov	r0, r5
 80196b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80196ba:	4798      	blx	r3
 80196bc:	6038      	str	r0, [r7, #0]
 80196be:	682b      	ldr	r3, [r5, #0]
 80196c0:	4628      	mov	r0, r5
 80196c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80196c4:	4798      	blx	r3
 80196c6:	7030      	strb	r0, [r6, #0]
 80196c8:	e7e4      	b.n	8019694 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x12>
 80196ca:	4604      	mov	r4, r0
 80196cc:	e7f1      	b.n	80196b2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x30>

080196ce <_ZN8touchgfx6memsetEPvhm>:
 80196ce:	4402      	add	r2, r0
 80196d0:	4290      	cmp	r0, r2
 80196d2:	d002      	beq.n	80196da <_ZN8touchgfx6memsetEPvhm+0xc>
 80196d4:	f800 1b01 	strb.w	r1, [r0], #1
 80196d8:	e7fa      	b.n	80196d0 <_ZN8touchgfx6memsetEPvhm+0x2>
 80196da:	4770      	bx	lr

080196dc <_ZN8touchgfx3clzEl>:
 80196dc:	b1e8      	cbz	r0, 801971a <_ZN8touchgfx3clzEl+0x3e>
 80196de:	2800      	cmp	r0, #0
 80196e0:	bfb8      	it	lt
 80196e2:	4240      	neglt	r0, r0
 80196e4:	0c03      	lsrs	r3, r0, #16
 80196e6:	041b      	lsls	r3, r3, #16
 80196e8:	b9ab      	cbnz	r3, 8019716 <_ZN8touchgfx3clzEl+0x3a>
 80196ea:	0400      	lsls	r0, r0, #16
 80196ec:	2310      	movs	r3, #16
 80196ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80196f2:	bf04      	itt	eq
 80196f4:	0200      	lsleq	r0, r0, #8
 80196f6:	3308      	addeq	r3, #8
 80196f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80196fc:	bf04      	itt	eq
 80196fe:	0100      	lsleq	r0, r0, #4
 8019700:	3304      	addeq	r3, #4
 8019702:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8019706:	bf04      	itt	eq
 8019708:	0080      	lsleq	r0, r0, #2
 801970a:	3302      	addeq	r3, #2
 801970c:	2800      	cmp	r0, #0
 801970e:	bfa8      	it	ge
 8019710:	3301      	addge	r3, #1
 8019712:	1e58      	subs	r0, r3, #1
 8019714:	4770      	bx	lr
 8019716:	2300      	movs	r3, #0
 8019718:	e7e9      	b.n	80196ee <_ZN8touchgfx3clzEl+0x12>
 801971a:	201f      	movs	r0, #31
 801971c:	4770      	bx	lr

0801971e <_ZN8touchgfx6muldivElllRl>:
 801971e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019722:	4604      	mov	r4, r0
 8019724:	4698      	mov	r8, r3
 8019726:	2601      	movs	r6, #1
 8019728:	f7ff ffd8 	bl	80196dc <_ZN8touchgfx3clzEl>
 801972c:	2c00      	cmp	r4, #0
 801972e:	fa04 f500 	lsl.w	r5, r4, r0
 8019732:	fa06 f600 	lsl.w	r6, r6, r0
 8019736:	bfba      	itte	lt
 8019738:	f04f 37ff 	movlt.w	r7, #4294967295
 801973c:	4264      	neglt	r4, r4
 801973e:	2701      	movge	r7, #1
 8019740:	2900      	cmp	r1, #0
 8019742:	f106 36ff 	add.w	r6, r6, #4294967295
 8019746:	bfbc      	itt	lt
 8019748:	4249      	neglt	r1, r1
 801974a:	427f      	neglt	r7, r7
 801974c:	2a00      	cmp	r2, #0
 801974e:	fa41 fc00 	asr.w	ip, r1, r0
 8019752:	ea01 0106 	and.w	r1, r1, r6
 8019756:	bfb8      	it	lt
 8019758:	427f      	neglt	r7, r7
 801975a:	fb04 f401 	mul.w	r4, r4, r1
 801975e:	fb95 f3f2 	sdiv	r3, r5, r2
 8019762:	fb02 5513 	mls	r5, r2, r3, r5
 8019766:	bfb8      	it	lt
 8019768:	4252      	neglt	r2, r2
 801976a:	fb94 f0f2 	sdiv	r0, r4, r2
 801976e:	fb02 4410 	mls	r4, r2, r0, r4
 8019772:	fb0c 4405 	mla	r4, ip, r5, r4
 8019776:	fb94 f1f2 	sdiv	r1, r4, r2
 801977a:	4408      	add	r0, r1
 801977c:	fb02 4211 	mls	r2, r2, r1, r4
 8019780:	fb0c 0003 	mla	r0, ip, r3, r0
 8019784:	f8c8 2000 	str.w	r2, [r8]
 8019788:	4378      	muls	r0, r7
 801978a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801978e <_ZN8touchgfx10ClickEventD1Ev>:
 801978e:	4770      	bx	lr

08019790 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 8019790:	2000      	movs	r0, #0
 8019792:	4770      	bx	lr

08019794 <_ZN8touchgfx9DragEventD1Ev>:
 8019794:	4770      	bx	lr

08019796 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 8019796:	2001      	movs	r0, #1
 8019798:	4770      	bx	lr

0801979a <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801979a:	2002      	movs	r0, #2
 801979c:	4770      	bx	lr

0801979e <_ZN8touchgfx12GestureEventD1Ev>:
 801979e:	4770      	bx	lr

080197a0 <_ZN8touchgfx10ClickEventD0Ev>:
 80197a0:	b510      	push	{r4, lr}
 80197a2:	4604      	mov	r4, r0
 80197a4:	210c      	movs	r1, #12
 80197a6:	f00b fa14 	bl	8024bd2 <_ZdlPvj>
 80197aa:	4620      	mov	r0, r4
 80197ac:	bd10      	pop	{r4, pc}

080197ae <_ZN8touchgfx9DragEventD0Ev>:
 80197ae:	b510      	push	{r4, lr}
 80197b0:	4604      	mov	r4, r0
 80197b2:	2110      	movs	r1, #16
 80197b4:	f00b fa0d 	bl	8024bd2 <_ZdlPvj>
 80197b8:	4620      	mov	r0, r4
 80197ba:	bd10      	pop	{r4, pc}

080197bc <_ZN8touchgfx12GestureEventD0Ev>:
 80197bc:	b510      	push	{r4, lr}
 80197be:	4604      	mov	r4, r0
 80197c0:	210c      	movs	r1, #12
 80197c2:	f00b fa06 	bl	8024bd2 <_ZdlPvj>
 80197c6:	4620      	mov	r0, r4
 80197c8:	bd10      	pop	{r4, pc}
	...

080197cc <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 80197cc:	b530      	push	{r4, r5, lr}
 80197ce:	460d      	mov	r5, r1
 80197d0:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80197d2:	b087      	sub	sp, #28
 80197d4:	4604      	mov	r4, r0
 80197d6:	b301      	cbz	r1, 801981a <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 80197d8:	a801      	add	r0, sp, #4
 80197da:	f7ff ff06 	bl	80195ea <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80197de:	892a      	ldrh	r2, [r5, #8]
 80197e0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80197e4:	7928      	ldrb	r0, [r5, #4]
 80197e6:	1ad2      	subs	r2, r2, r3
 80197e8:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80197ea:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 80197ee:	441a      	add	r2, r3
 80197f0:	896b      	ldrh	r3, [r5, #10]
 80197f2:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 80197f6:	f88d 0010 	strb.w	r0, [sp, #16]
 80197fa:	1b5b      	subs	r3, r3, r5
 80197fc:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 80197fe:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8019800:	442b      	add	r3, r5
 8019802:	4d07      	ldr	r5, [pc, #28]	; (8019820 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8019804:	f8ad 1012 	strh.w	r1, [sp, #18]
 8019808:	a903      	add	r1, sp, #12
 801980a:	9503      	str	r5, [sp, #12]
 801980c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8019810:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019814:	6803      	ldr	r3, [r0, #0]
 8019816:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019818:	4798      	blx	r3
 801981a:	b007      	add	sp, #28
 801981c:	bd30      	pop	{r4, r5, pc}
 801981e:	bf00      	nop
 8019820:	080287c8 	.word	0x080287c8

08019824 <_ZNK8touchgfx4Rect9intersectEss>:
 8019824:	b510      	push	{r4, lr}
 8019826:	f9b0 3000 	ldrsh.w	r3, [r0]
 801982a:	428b      	cmp	r3, r1
 801982c:	dc10      	bgt.n	8019850 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801982e:	8884      	ldrh	r4, [r0, #4]
 8019830:	4423      	add	r3, r4
 8019832:	b21b      	sxth	r3, r3
 8019834:	4299      	cmp	r1, r3
 8019836:	da0b      	bge.n	8019850 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8019838:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801983c:	4293      	cmp	r3, r2
 801983e:	dc07      	bgt.n	8019850 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8019840:	88c0      	ldrh	r0, [r0, #6]
 8019842:	4418      	add	r0, r3
 8019844:	b200      	sxth	r0, r0
 8019846:	4282      	cmp	r2, r0
 8019848:	bfac      	ite	ge
 801984a:	2000      	movge	r0, #0
 801984c:	2001      	movlt	r0, #1
 801984e:	bd10      	pop	{r4, pc}
 8019850:	2000      	movs	r0, #0
 8019852:	e7fc      	b.n	801984e <_ZNK8touchgfx4Rect9intersectEss+0x2a>

08019854 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8019854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019856:	460c      	mov	r4, r1
 8019858:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801985a:	b089      	sub	sp, #36	; 0x24
 801985c:	4605      	mov	r5, r0
 801985e:	2900      	cmp	r1, #0
 8019860:	d054      	beq.n	801990c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 8019862:	4668      	mov	r0, sp
 8019864:	f7ff fec1 	bl	80195ea <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019868:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 801986a:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 801986c:	4668      	mov	r0, sp
 801986e:	8922      	ldrh	r2, [r4, #8]
 8019870:	88e1      	ldrh	r1, [r4, #6]
 8019872:	443a      	add	r2, r7
 8019874:	4431      	add	r1, r6
 8019876:	b212      	sxth	r2, r2
 8019878:	b209      	sxth	r1, r1
 801987a:	f7ff ffd3 	bl	8019824 <_ZNK8touchgfx4Rect9intersectEss>
 801987e:	b1d0      	cbz	r0, 80198b6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 8019880:	89a2      	ldrh	r2, [r4, #12]
 8019882:	4668      	mov	r0, sp
 8019884:	8961      	ldrh	r1, [r4, #10]
 8019886:	443a      	add	r2, r7
 8019888:	4431      	add	r1, r6
 801988a:	b212      	sxth	r2, r2
 801988c:	b209      	sxth	r1, r1
 801988e:	f7ff ffc9 	bl	8019824 <_ZNK8touchgfx4Rect9intersectEss>
 8019892:	4603      	mov	r3, r0
 8019894:	b978      	cbnz	r0, 80198b6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 8019896:	4a1e      	ldr	r2, [pc, #120]	; (8019910 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 8019898:	a904      	add	r1, sp, #16
 801989a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801989c:	9204      	str	r2, [sp, #16]
 801989e:	2202      	movs	r2, #2
 80198a0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80198a4:	f88d 2014 	strb.w	r2, [sp, #20]
 80198a8:	f8ad 3018 	strh.w	r3, [sp, #24]
 80198ac:	f8ad 301a 	strh.w	r3, [sp, #26]
 80198b0:	6803      	ldr	r3, [r0, #0]
 80198b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80198b4:	4798      	blx	r3
 80198b6:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80198b8:	a802      	add	r0, sp, #8
 80198ba:	f7ff fe96 	bl	80195ea <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80198be:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80198c2:	88e0      	ldrh	r0, [r4, #6]
 80198c4:	8961      	ldrh	r1, [r4, #10]
 80198c6:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 80198ca:	1a80      	subs	r0, r0, r2
 80198cc:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 80198d0:	1a89      	subs	r1, r1, r2
 80198d2:	8923      	ldrh	r3, [r4, #8]
 80198d4:	4460      	add	r0, ip
 80198d6:	89a2      	ldrh	r2, [r4, #12]
 80198d8:	4461      	add	r1, ip
 80198da:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 80198dc:	eba3 030e 	sub.w	r3, r3, lr
 80198e0:	eba2 020e 	sub.w	r2, r2, lr
 80198e4:	f8ad 0016 	strh.w	r0, [sp, #22]
 80198e8:	7927      	ldrb	r7, [r4, #4]
 80198ea:	4433      	add	r3, r6
 80198ec:	4432      	add	r2, r6
 80198ee:	4c09      	ldr	r4, [pc, #36]	; (8019914 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 80198f0:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80198f2:	f8ad 101a 	strh.w	r1, [sp, #26]
 80198f6:	a904      	add	r1, sp, #16
 80198f8:	9404      	str	r4, [sp, #16]
 80198fa:	f88d 7014 	strb.w	r7, [sp, #20]
 80198fe:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019902:	f8ad 201c 	strh.w	r2, [sp, #28]
 8019906:	6803      	ldr	r3, [r0, #0]
 8019908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801990a:	4798      	blx	r3
 801990c:	b009      	add	sp, #36	; 0x24
 801990e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019910:	080287a0 	.word	0x080287a0
 8019914:	080287b4 	.word	0x080287b4

08019918 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8019918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801991c:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 8019920:	b0a1      	sub	sp, #132	; 0x84
 8019922:	4604      	mov	r4, r0
 8019924:	460d      	mov	r5, r1
 8019926:	790b      	ldrb	r3, [r1, #4]
 8019928:	f1b9 0f00 	cmp.w	r9, #0
 801992c:	d00f      	beq.n	801994e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 801992e:	2b00      	cmp	r3, #0
 8019930:	f040 80a2 	bne.w	8019a78 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 8019934:	b021      	add	sp, #132	; 0x84
 8019936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801993a:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801993e:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8019942:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8019946:	1d20      	adds	r0, r4, #4
 8019948:	f7fb ff5c 	bl	8015804 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801994c:	e094      	b.n	8019a78 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801994e:	2b00      	cmp	r3, #0
 8019950:	d1f0      	bne.n	8019934 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8019952:	4b5f      	ldr	r3, [pc, #380]	; (8019ad0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 8019954:	681b      	ldr	r3, [r3, #0]
 8019956:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 801995a:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 801995e:	f1ba 0f03 	cmp.w	sl, #3
 8019962:	ddea      	ble.n	801993a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 8019964:	f1ba 0f0c 	cmp.w	sl, #12
 8019968:	f04f 0303 	mov.w	r3, #3
 801996c:	f04f 0600 	mov.w	r6, #0
 8019970:	4958      	ldr	r1, [pc, #352]	; (8019ad4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 8019972:	bfd8      	it	le
 8019974:	f10a 32ff 	addle.w	r2, sl, #4294967295
 8019978:	960a      	str	r6, [sp, #40]	; 0x28
 801997a:	bfd8      	it	le
 801997c:	fb92 f3f3 	sdivle	r3, r2, r3
 8019980:	9301      	str	r3, [sp, #4]
 8019982:	4b55      	ldr	r3, [pc, #340]	; (8019ad8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 8019984:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019988:	4b54      	ldr	r3, [pc, #336]	; (8019adc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 801998a:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801998e:	2248      	movs	r2, #72	; 0x48
 8019990:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019994:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8019998:	ab0e      	add	r3, sp, #56	; 0x38
 801999a:	4618      	mov	r0, r3
 801999c:	f00b f9c2 	bl	8024d24 <memcpy>
 80199a0:	f04f 32ff 	mov.w	r2, #4294967295
 80199a4:	f8cd a008 	str.w	sl, [sp, #8]
 80199a8:	e9cd 2006 	strd	r2, r0, [sp, #24]
 80199ac:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80199b0:	46b3      	mov	fp, r6
 80199b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80199b6:	b29b      	uxth	r3, r3
 80199b8:	9303      	str	r3, [sp, #12]
 80199ba:	2300      	movs	r3, #0
 80199bc:	9a03      	ldr	r2, [sp, #12]
 80199be:	88ef      	ldrh	r7, [r5, #6]
 80199c0:	a80a      	add	r0, sp, #40	; 0x28
 80199c2:	9309      	str	r3, [sp, #36]	; 0x24
 80199c4:	9b07      	ldr	r3, [sp, #28]
 80199c6:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 80199ca:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 80199ce:	fb13 f302 	smulbb	r3, r3, r2
 80199d2:	b29b      	uxth	r3, r3
 80199d4:	9304      	str	r3, [sp, #16]
 80199d6:	9b07      	ldr	r3, [sp, #28]
 80199d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80199dc:	685b      	ldr	r3, [r3, #4]
 80199de:	fb13 f302 	smulbb	r3, r3, r2
 80199e2:	b29b      	uxth	r3, r3
 80199e4:	9305      	str	r3, [sp, #20]
 80199e6:	9b04      	ldr	r3, [sp, #16]
 80199e8:	441f      	add	r7, r3
 80199ea:	9b05      	ldr	r3, [sp, #20]
 80199ec:	4498      	add	r8, r3
 80199ee:	b23f      	sxth	r7, r7
 80199f0:	fa0f f888 	sxth.w	r8, r8
 80199f4:	4639      	mov	r1, r7
 80199f6:	4642      	mov	r2, r8
 80199f8:	f7ff ff14 	bl	8019824 <_ZNK8touchgfx4Rect9intersectEss>
 80199fc:	b380      	cbz	r0, 8019a60 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 80199fe:	4639      	mov	r1, r7
 8019a00:	ab09      	add	r3, sp, #36	; 0x24
 8019a02:	4642      	mov	r2, r8
 8019a04:	1d20      	adds	r0, r4, #4
 8019a06:	f7fb fefd 	bl	8015804 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8019a0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019a0c:	b341      	cbz	r1, 8019a60 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 8019a0e:	4549      	cmp	r1, r9
 8019a10:	d026      	beq.n	8019a60 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 8019a12:	a80c      	add	r0, sp, #48	; 0x30
 8019a14:	f7ff fde9 	bl	80195ea <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019a18:	2002      	movs	r0, #2
 8019a1a:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8019a1e:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8019a22:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8019a26:	fb92 f2f0 	sdiv	r2, r2, r0
 8019a2a:	440a      	add	r2, r1
 8019a2c:	1a99      	subs	r1, r3, r2
 8019a2e:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8019a32:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8019a36:	fb93 f3f0 	sdiv	r3, r3, r0
 8019a3a:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 8019a3e:	4403      	add	r3, r0
 8019a40:	1ad3      	subs	r3, r2, r3
 8019a42:	9a06      	ldr	r2, [sp, #24]
 8019a44:	435b      	muls	r3, r3
 8019a46:	fb01 3301 	mla	r3, r1, r1, r3
 8019a4a:	4293      	cmp	r3, r2
 8019a4c:	d208      	bcs.n	8019a60 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 8019a4e:	9a04      	ldr	r2, [sp, #16]
 8019a50:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8019a54:	86a2      	strh	r2, [r4, #52]	; 0x34
 8019a56:	9a05      	ldr	r2, [sp, #20]
 8019a58:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 8019a5c:	86e2      	strh	r2, [r4, #54]	; 0x36
 8019a5e:	9306      	str	r3, [sp, #24]
 8019a60:	f10b 0b02 	add.w	fp, fp, #2
 8019a64:	f1bb 0f08 	cmp.w	fp, #8
 8019a68:	dda7      	ble.n	80199ba <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 8019a6a:	9b02      	ldr	r3, [sp, #8]
 8019a6c:	3601      	adds	r6, #1
 8019a6e:	4453      	add	r3, sl
 8019a70:	9302      	str	r3, [sp, #8]
 8019a72:	9b01      	ldr	r3, [sp, #4]
 8019a74:	42b3      	cmp	r3, r6
 8019a76:	d199      	bne.n	80199ac <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 8019a78:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8019a7a:	2900      	cmp	r1, #0
 8019a7c:	f43f af5a 	beq.w	8019934 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8019a80:	a80c      	add	r0, sp, #48	; 0x30
 8019a82:	2600      	movs	r6, #0
 8019a84:	f7ff fdb1 	bl	80195ea <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019a88:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8019a8c:	88ea      	ldrh	r2, [r5, #6]
 8019a8e:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 8019a92:	1ad2      	subs	r2, r2, r3
 8019a94:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8019a96:	7929      	ldrb	r1, [r5, #4]
 8019a98:	441a      	add	r2, r3
 8019a9a:	892b      	ldrh	r3, [r5, #8]
 8019a9c:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 8019aa0:	a90e      	add	r1, sp, #56	; 0x38
 8019aa2:	1a1b      	subs	r3, r3, r0
 8019aa4:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 8019aa6:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 8019aaa:	4403      	add	r3, r0
 8019aac:	480c      	ldr	r0, [pc, #48]	; (8019ae0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 8019aae:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 8019ab2:	900e      	str	r0, [sp, #56]	; 0x38
 8019ab4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8019ab6:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8019aba:	6803      	ldr	r3, [r0, #0]
 8019abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019abe:	4798      	blx	r3
 8019ac0:	792b      	ldrb	r3, [r5, #4]
 8019ac2:	2b00      	cmp	r3, #0
 8019ac4:	f43f af36 	beq.w	8019934 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8019ac8:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8019acc:	e732      	b.n	8019934 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8019ace:	bf00      	nop
 8019ad0:	2000bc7c 	.word	0x2000bc7c
 8019ad4:	08026374 	.word	0x08026374
 8019ad8:	2000bc70 	.word	0x2000bc70
 8019adc:	2000bc72 	.word	0x2000bc72
 8019ae0:	080287a0 	.word	0x080287a0

08019ae4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8019ae4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019ae6:	4604      	mov	r4, r0
 8019ae8:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8019aec:	3201      	adds	r2, #1
 8019aee:	d112      	bne.n	8019b16 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8019af0:	2500      	movs	r5, #0
 8019af2:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8019af6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8019afa:	6803      	ldr	r3, [r0, #0]
 8019afc:	9500      	str	r5, [sp, #0]
 8019afe:	466d      	mov	r5, sp
 8019b00:	f8ad 1004 	strh.w	r1, [sp, #4]
 8019b04:	f8ad 2006 	strh.w	r2, [sp, #6]
 8019b08:	4629      	mov	r1, r5
 8019b0a:	6a1b      	ldr	r3, [r3, #32]
 8019b0c:	4798      	blx	r3
 8019b0e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8019b12:	e884 0003 	stmia.w	r4, {r0, r1}
 8019b16:	4620      	mov	r0, r4
 8019b18:	b003      	add	sp, #12
 8019b1a:	bd30      	pop	{r4, r5, pc}

08019b1c <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8019b1c:	b513      	push	{r0, r1, r4, lr}
 8019b1e:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8019b22:	4604      	mov	r4, r0
 8019b24:	3301      	adds	r3, #1
 8019b26:	d109      	bne.n	8019b3c <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8019b28:	4601      	mov	r1, r0
 8019b2a:	4668      	mov	r0, sp
 8019b2c:	f7ff fd5d 	bl	80195ea <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019b30:	f8bd 3000 	ldrh.w	r3, [sp]
 8019b34:	8423      	strh	r3, [r4, #32]
 8019b36:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8019b3a:	8463      	strh	r3, [r4, #34]	; 0x22
 8019b3c:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8019b40:	b002      	add	sp, #8
 8019b42:	bd10      	pop	{r4, pc}

08019b44 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8019b44:	b513      	push	{r0, r1, r4, lr}
 8019b46:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8019b4a:	4604      	mov	r4, r0
 8019b4c:	3301      	adds	r3, #1
 8019b4e:	d109      	bne.n	8019b64 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8019b50:	4601      	mov	r1, r0
 8019b52:	4668      	mov	r0, sp
 8019b54:	f7ff fd49 	bl	80195ea <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019b58:	f8bd 3000 	ldrh.w	r3, [sp]
 8019b5c:	8423      	strh	r3, [r4, #32]
 8019b5e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8019b62:	8463      	strh	r3, [r4, #34]	; 0x22
 8019b64:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8019b68:	b002      	add	sp, #8
 8019b6a:	bd10      	pop	{r4, pc}

08019b6c <_ZN8touchgfx6ScreenC1Ev>:
 8019b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b6e:	4605      	mov	r5, r0
 8019b70:	4b17      	ldr	r3, [pc, #92]	; (8019bd0 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8019b72:	2200      	movs	r2, #0
 8019b74:	4917      	ldr	r1, [pc, #92]	; (8019bd4 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8019b76:	f845 3b04 	str.w	r3, [r5], #4
 8019b7a:	2301      	movs	r3, #1
 8019b7c:	8102      	strh	r2, [r0, #8]
 8019b7e:	4604      	mov	r4, r0
 8019b80:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 8019b84:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8019b88:	4b13      	ldr	r3, [pc, #76]	; (8019bd8 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8019b8a:	8142      	strh	r2, [r0, #10]
 8019b8c:	f9b3 7000 	ldrsh.w	r7, [r3]
 8019b90:	4b12      	ldr	r3, [pc, #72]	; (8019bdc <_ZN8touchgfx6ScreenC1Ev+0x70>)
 8019b92:	8182      	strh	r2, [r0, #12]
 8019b94:	81c2      	strh	r2, [r0, #14]
 8019b96:	8202      	strh	r2, [r0, #16]
 8019b98:	8242      	strh	r2, [r0, #18]
 8019b9a:	8282      	strh	r2, [r0, #20]
 8019b9c:	82c2      	strh	r2, [r0, #22]
 8019b9e:	6202      	str	r2, [r0, #32]
 8019ba0:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 8019ba4:	6342      	str	r2, [r0, #52]	; 0x34
 8019ba6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8019baa:	6041      	str	r1, [r0, #4]
 8019bac:	4611      	mov	r1, r2
 8019bae:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8019bb2:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 8019bb6:	4628      	mov	r0, r5
 8019bb8:	f7f6 fc65 	bl	8010486 <_ZN8touchgfx8Drawable5setXYEss>
 8019bbc:	4639      	mov	r1, r7
 8019bbe:	4628      	mov	r0, r5
 8019bc0:	f7f6 fc7f 	bl	80104c2 <_ZN8touchgfx8Drawable8setWidthEs>
 8019bc4:	4628      	mov	r0, r5
 8019bc6:	4631      	mov	r1, r6
 8019bc8:	f7f6 fc8a 	bl	80104e0 <_ZN8touchgfx8Drawable9setHeightEs>
 8019bcc:	4620      	mov	r0, r4
 8019bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019bd0:	080287dc 	.word	0x080287dc
 8019bd4:	080274b0 	.word	0x080274b0
 8019bd8:	2000bc70 	.word	0x2000bc70
 8019bdc:	2000bc72 	.word	0x2000bc72

08019be0 <_ZN8touchgfx6Screen4drawEv>:
 8019be0:	4b09      	ldr	r3, [pc, #36]	; (8019c08 <_ZN8touchgfx6Screen4drawEv+0x28>)
 8019be2:	b507      	push	{r0, r1, r2, lr}
 8019be4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019be8:	2100      	movs	r1, #0
 8019bea:	4b08      	ldr	r3, [pc, #32]	; (8019c0c <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8019bec:	9100      	str	r1, [sp, #0]
 8019bee:	4669      	mov	r1, sp
 8019bf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019bf4:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019bf8:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019bfc:	6803      	ldr	r3, [r0, #0]
 8019bfe:	689b      	ldr	r3, [r3, #8]
 8019c00:	4798      	blx	r3
 8019c02:	b003      	add	sp, #12
 8019c04:	f85d fb04 	ldr.w	pc, [sp], #4
 8019c08:	2000bc70 	.word	0x2000bc70
 8019c0c:	2000bc72 	.word	0x2000bc72

08019c10 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8019c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c14:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8019c18:	b089      	sub	sp, #36	; 0x24
 8019c1a:	4680      	mov	r8, r0
 8019c1c:	460c      	mov	r4, r1
 8019c1e:	4615      	mov	r5, r2
 8019c20:	b16b      	cbz	r3, 8019c3e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8019c22:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8019c26:	b153      	cbz	r3, 8019c3e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8019c28:	4628      	mov	r0, r5
 8019c2a:	f7ff ff5b 	bl	8019ae4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8019c2e:	4621      	mov	r1, r4
 8019c30:	f7fe ffc2 	bl	8018bb8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019c34:	69eb      	ldr	r3, [r5, #28]
 8019c36:	b928      	cbnz	r0, 8019c44 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x34>
 8019c38:	461d      	mov	r5, r3
 8019c3a:	2b00      	cmp	r3, #0
 8019c3c:	d1f4      	bne.n	8019c28 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18>
 8019c3e:	b009      	add	sp, #36	; 0x24
 8019c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c44:	ae04      	add	r6, sp, #16
 8019c46:	2b00      	cmp	r3, #0
 8019c48:	d051      	beq.n	8019cee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 8019c4a:	682b      	ldr	r3, [r5, #0]
 8019c4c:	4629      	mov	r1, r5
 8019c4e:	a802      	add	r0, sp, #8
 8019c50:	68db      	ldr	r3, [r3, #12]
 8019c52:	4798      	blx	r3
 8019c54:	4628      	mov	r0, r5
 8019c56:	f7ff ff61 	bl	8019b1c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8019c5a:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8019c5e:	4407      	add	r7, r0
 8019c60:	4628      	mov	r0, r5
 8019c62:	f7ff ff6f 	bl	8019b44 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8019c66:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8019c6a:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8019c6e:	b23f      	sxth	r7, r7
 8019c70:	4418      	add	r0, r3
 8019c72:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8019c76:	4621      	mov	r1, r4
 8019c78:	f8ad 2014 	strh.w	r2, [sp, #20]
 8019c7c:	f8ad 0012 	strh.w	r0, [sp, #18]
 8019c80:	4630      	mov	r0, r6
 8019c82:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019c86:	f8ad 7010 	strh.w	r7, [sp, #16]
 8019c8a:	f7fb fe6d 	bl	8015968 <_ZN8touchgfx4RectaNERKS0_>
 8019c8e:	4628      	mov	r0, r5
 8019c90:	f7ff ff28 	bl	8019ae4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8019c94:	ab06      	add	r3, sp, #24
 8019c96:	4602      	mov	r2, r0
 8019c98:	e896 0003 	ldmia.w	r6, {r0, r1}
 8019c9c:	e883 0003 	stmia.w	r3, {r0, r1}
 8019ca0:	4611      	mov	r1, r2
 8019ca2:	4618      	mov	r0, r3
 8019ca4:	f7fb fe60 	bl	8015968 <_ZN8touchgfx4RectaNERKS0_>
 8019ca8:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8019cac:	f9b4 1000 	ldrsh.w	r1, [r4]
 8019cb0:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8019cb4:	4299      	cmp	r1, r3
 8019cb6:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8019cba:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8019cbe:	d10b      	bne.n	8019cd8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 8019cc0:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8019cc4:	4552      	cmp	r2, sl
 8019cc6:	d107      	bne.n	8019cd8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 8019cc8:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8019ccc:	455a      	cmp	r2, fp
 8019cce:	d103      	bne.n	8019cd8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 8019cd0:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8019cd4:	454a      	cmp	r2, r9
 8019cd6:	d00a      	beq.n	8019cee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 8019cd8:	f1bb 0f00 	cmp.w	fp, #0
 8019cdc:	d002      	beq.n	8019ce4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd4>
 8019cde:	f1b9 0f00 	cmp.w	r9, #0
 8019ce2:	d12e      	bne.n	8019d42 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x132>
 8019ce4:	69ea      	ldr	r2, [r5, #28]
 8019ce6:	4621      	mov	r1, r4
 8019ce8:	4640      	mov	r0, r8
 8019cea:	f7ff ff91 	bl	8019c10 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019cee:	4628      	mov	r0, r5
 8019cf0:	f7ff fef8 	bl	8019ae4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8019cf4:	6861      	ldr	r1, [r4, #4]
 8019cf6:	4602      	mov	r2, r0
 8019cf8:	4633      	mov	r3, r6
 8019cfa:	6820      	ldr	r0, [r4, #0]
 8019cfc:	c303      	stmia	r3!, {r0, r1}
 8019cfe:	4611      	mov	r1, r2
 8019d00:	4630      	mov	r0, r6
 8019d02:	f7fb fe31 	bl	8015968 <_ZN8touchgfx4RectaNERKS0_>
 8019d06:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8019d0a:	2b00      	cmp	r3, #0
 8019d0c:	d097      	beq.n	8019c3e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8019d0e:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8019d12:	2b00      	cmp	r3, #0
 8019d14:	d093      	beq.n	8019c3e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8019d16:	4628      	mov	r0, r5
 8019d18:	f7ff ff00 	bl	8019b1c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8019d1c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8019d20:	1a18      	subs	r0, r3, r0
 8019d22:	f8ad 0010 	strh.w	r0, [sp, #16]
 8019d26:	4628      	mov	r0, r5
 8019d28:	f7ff ff0c 	bl	8019b44 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8019d2c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8019d30:	4631      	mov	r1, r6
 8019d32:	1a18      	subs	r0, r3, r0
 8019d34:	f8ad 0012 	strh.w	r0, [sp, #18]
 8019d38:	4628      	mov	r0, r5
 8019d3a:	682b      	ldr	r3, [r5, #0]
 8019d3c:	689b      	ldr	r3, [r3, #8]
 8019d3e:	4798      	blx	r3
 8019d40:	e77d      	b.n	8019c3e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8019d42:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8019d46:	fa1f f08a 	uxth.w	r0, sl
 8019d4a:	4552      	cmp	r2, sl
 8019d4c:	9000      	str	r0, [sp, #0]
 8019d4e:	da12      	bge.n	8019d76 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x166>
 8019d50:	9301      	str	r3, [sp, #4]
 8019d52:	9b00      	ldr	r3, [sp, #0]
 8019d54:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8019d58:	f8ad 2012 	strh.w	r2, [sp, #18]
 8019d5c:	1a9a      	subs	r2, r3, r2
 8019d5e:	f8ad 1010 	strh.w	r1, [sp, #16]
 8019d62:	4631      	mov	r1, r6
 8019d64:	f8ad 0014 	strh.w	r0, [sp, #20]
 8019d68:	4640      	mov	r0, r8
 8019d6a:	f8ad 2016 	strh.w	r2, [sp, #22]
 8019d6e:	69ea      	ldr	r2, [r5, #28]
 8019d70:	f7ff ff4e 	bl	8019c10 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019d74:	9b01      	ldr	r3, [sp, #4]
 8019d76:	f9b4 2000 	ldrsh.w	r2, [r4]
 8019d7a:	b29f      	uxth	r7, r3
 8019d7c:	429a      	cmp	r2, r3
 8019d7e:	da0d      	bge.n	8019d9c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18c>
 8019d80:	f8ad 2010 	strh.w	r2, [sp, #16]
 8019d84:	1aba      	subs	r2, r7, r2
 8019d86:	f8ad a012 	strh.w	sl, [sp, #18]
 8019d8a:	4631      	mov	r1, r6
 8019d8c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8019d90:	4640      	mov	r0, r8
 8019d92:	f8ad 9016 	strh.w	r9, [sp, #22]
 8019d96:	69ea      	ldr	r2, [r5, #28]
 8019d98:	f7ff ff3a 	bl	8019c10 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019d9c:	8822      	ldrh	r2, [r4, #0]
 8019d9e:	445f      	add	r7, fp
 8019da0:	88a3      	ldrh	r3, [r4, #4]
 8019da2:	b2bf      	uxth	r7, r7
 8019da4:	4413      	add	r3, r2
 8019da6:	b23a      	sxth	r2, r7
 8019da8:	b29b      	uxth	r3, r3
 8019daa:	b219      	sxth	r1, r3
 8019dac:	4291      	cmp	r1, r2
 8019dae:	dd0d      	ble.n	8019dcc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1bc>
 8019db0:	1bdb      	subs	r3, r3, r7
 8019db2:	f8ad 2010 	strh.w	r2, [sp, #16]
 8019db6:	f8ad a012 	strh.w	sl, [sp, #18]
 8019dba:	4631      	mov	r1, r6
 8019dbc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019dc0:	4640      	mov	r0, r8
 8019dc2:	f8ad 9016 	strh.w	r9, [sp, #22]
 8019dc6:	69ea      	ldr	r2, [r5, #28]
 8019dc8:	f7ff ff22 	bl	8019c10 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019dcc:	88e2      	ldrh	r2, [r4, #6]
 8019dce:	8863      	ldrh	r3, [r4, #2]
 8019dd0:	4413      	add	r3, r2
 8019dd2:	9a00      	ldr	r2, [sp, #0]
 8019dd4:	444a      	add	r2, r9
 8019dd6:	b29b      	uxth	r3, r3
 8019dd8:	fa1f f982 	uxth.w	r9, r2
 8019ddc:	b219      	sxth	r1, r3
 8019dde:	fa0f f289 	sxth.w	r2, r9
 8019de2:	428a      	cmp	r2, r1
 8019de4:	da83      	bge.n	8019cee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 8019de6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8019dea:	eba3 0309 	sub.w	r3, r3, r9
 8019dee:	f9b4 0000 	ldrsh.w	r0, [r4]
 8019df2:	f8ad 1014 	strh.w	r1, [sp, #20]
 8019df6:	4631      	mov	r1, r6
 8019df8:	f8ad 0010 	strh.w	r0, [sp, #16]
 8019dfc:	f8ad 2012 	strh.w	r2, [sp, #18]
 8019e00:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019e04:	69ea      	ldr	r2, [r5, #28]
 8019e06:	e76f      	b.n	8019ce8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd8>

08019e08 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8019e08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019e0a:	2300      	movs	r3, #0
 8019e0c:	aa02      	add	r2, sp, #8
 8019e0e:	4604      	mov	r4, r0
 8019e10:	3004      	adds	r0, #4
 8019e12:	f842 3d04 	str.w	r3, [r2, #-4]!
 8019e16:	460d      	mov	r5, r1
 8019e18:	f7fb fe7d 	bl	8015b16 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8019e1c:	9a01      	ldr	r2, [sp, #4]
 8019e1e:	b11a      	cbz	r2, 8019e28 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 8019e20:	4629      	mov	r1, r5
 8019e22:	4620      	mov	r0, r4
 8019e24:	f7ff fef4 	bl	8019c10 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019e28:	b003      	add	sp, #12
 8019e2a:	bd30      	pop	{r4, r5, pc}

08019e2c <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8019e2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019e2e:	4602      	mov	r2, r0
 8019e30:	4604      	mov	r4, r0
 8019e32:	460d      	mov	r5, r1
 8019e34:	466b      	mov	r3, sp
 8019e36:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8019e3a:	6851      	ldr	r1, [r2, #4]
 8019e3c:	c303      	stmia	r3!, {r0, r1}
 8019e3e:	4629      	mov	r1, r5
 8019e40:	4668      	mov	r0, sp
 8019e42:	f7fb fd91 	bl	8015968 <_ZN8touchgfx4RectaNERKS0_>
 8019e46:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8019e4a:	4669      	mov	r1, sp
 8019e4c:	b123      	cbz	r3, 8019e58 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 8019e4e:	4620      	mov	r0, r4
 8019e50:	f7ff ffda 	bl	8019e08 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8019e54:	b003      	add	sp, #12
 8019e56:	bd30      	pop	{r4, r5, pc}
 8019e58:	1d20      	adds	r0, r4, #4
 8019e5a:	f7fb fe23 	bl	8015aa4 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8019e5e:	e7f9      	b.n	8019e54 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

08019e60 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8019e60:	460b      	mov	r3, r1
 8019e62:	680a      	ldr	r2, [r1, #0]
 8019e64:	1d01      	adds	r1, r0, #4
 8019e66:	6952      	ldr	r2, [r2, #20]
 8019e68:	4618      	mov	r0, r3
 8019e6a:	4710      	bx	r2

08019e6c <_ZNK8touchgfx9GlyphNode3topEv.isra.2>:
 8019e6c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8019e70:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 8019e74:	4b03      	ldr	r3, [pc, #12]	; (8019e84 <_ZNK8touchgfx9GlyphNode3topEv.isra.2+0x18>)
 8019e76:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8019e7a:	bf08      	it	eq
 8019e7c:	2300      	moveq	r3, #0
 8019e7e:	4308      	orrs	r0, r1
 8019e80:	4318      	orrs	r0, r3
 8019e82:	4770      	bx	lr
 8019e84:	fffffe00 	.word	0xfffffe00

08019e88 <_ZN8touchgfx9GlyphNode6setTopEs>:
 8019e88:	7b43      	ldrb	r3, [r0, #13]
 8019e8a:	7201      	strb	r1, [r0, #8]
 8019e8c:	b289      	uxth	r1, r1
 8019e8e:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 8019e92:	05ca      	lsls	r2, r1, #23
 8019e94:	bf48      	it	mi
 8019e96:	f043 0320 	orrmi.w	r3, r3, #32
 8019e9a:	7343      	strb	r3, [r0, #13]
 8019e9c:	058b      	lsls	r3, r1, #22
 8019e9e:	bf42      	ittt	mi
 8019ea0:	7b43      	ldrbmi	r3, [r0, #13]
 8019ea2:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8019ea6:	7343      	strbmi	r3, [r0, #13]
 8019ea8:	4770      	bx	lr

08019eaa <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8019eaa:	b530      	push	{r4, r5, lr}
 8019eac:	2500      	movs	r5, #0
 8019eae:	2401      	movs	r4, #1
 8019eb0:	6843      	ldr	r3, [r0, #4]
 8019eb2:	b913      	cbnz	r3, 8019eba <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8019eb4:	6803      	ldr	r3, [r0, #0]
 8019eb6:	b1f3      	cbz	r3, 8019ef6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 8019eb8:	6043      	str	r3, [r0, #4]
 8019eba:	7c03      	ldrb	r3, [r0, #16]
 8019ebc:	b143      	cbz	r3, 8019ed0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8019ebe:	68c3      	ldr	r3, [r0, #12]
 8019ec0:	b12b      	cbz	r3, 8019ece <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8019ec2:	881a      	ldrh	r2, [r3, #0]
 8019ec4:	b11a      	cbz	r2, 8019ece <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8019ec6:	1c9a      	adds	r2, r3, #2
 8019ec8:	60c2      	str	r2, [r0, #12]
 8019eca:	8818      	ldrh	r0, [r3, #0]
 8019ecc:	bd30      	pop	{r4, r5, pc}
 8019ece:	7405      	strb	r5, [r0, #16]
 8019ed0:	6843      	ldr	r3, [r0, #4]
 8019ed2:	8819      	ldrh	r1, [r3, #0]
 8019ed4:	b179      	cbz	r1, 8019ef6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 8019ed6:	1c9a      	adds	r2, r3, #2
 8019ed8:	2902      	cmp	r1, #2
 8019eda:	6042      	str	r2, [r0, #4]
 8019edc:	d1f5      	bne.n	8019eca <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8019ede:	6883      	ldr	r3, [r0, #8]
 8019ee0:	1d1a      	adds	r2, r3, #4
 8019ee2:	6082      	str	r2, [r0, #8]
 8019ee4:	681b      	ldr	r3, [r3, #0]
 8019ee6:	60c3      	str	r3, [r0, #12]
 8019ee8:	2b00      	cmp	r3, #0
 8019eea:	d0e1      	beq.n	8019eb0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8019eec:	881b      	ldrh	r3, [r3, #0]
 8019eee:	2b00      	cmp	r3, #0
 8019ef0:	d0de      	beq.n	8019eb0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8019ef2:	7404      	strb	r4, [r0, #16]
 8019ef4:	e7dc      	b.n	8019eb0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8019ef6:	2000      	movs	r0, #0
 8019ef8:	e7e8      	b.n	8019ecc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08019efa <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8019efa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019efc:	4605      	mov	r5, r0
 8019efe:	4608      	mov	r0, r1
 8019f00:	b1f1      	cbz	r1, 8019f40 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8019f02:	f105 0440 	add.w	r4, r5, #64	; 0x40
 8019f06:	460b      	mov	r3, r1
 8019f08:	f101 0708 	add.w	r7, r1, #8
 8019f0c:	4622      	mov	r2, r4
 8019f0e:	6818      	ldr	r0, [r3, #0]
 8019f10:	3308      	adds	r3, #8
 8019f12:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8019f16:	4626      	mov	r6, r4
 8019f18:	42bb      	cmp	r3, r7
 8019f1a:	c603      	stmia	r6!, {r0, r1}
 8019f1c:	4634      	mov	r4, r6
 8019f1e:	d1f6      	bne.n	8019f0e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8019f20:	6818      	ldr	r0, [r3, #0]
 8019f22:	6030      	str	r0, [r6, #0]
 8019f24:	4610      	mov	r0, r2
 8019f26:	889b      	ldrh	r3, [r3, #4]
 8019f28:	80b3      	strh	r3, [r6, #4]
 8019f2a:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 8019f2e:	015b      	lsls	r3, r3, #5
 8019f30:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8019f34:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 8019f38:	430b      	orrs	r3, r1
 8019f3a:	425b      	negs	r3, r3
 8019f3c:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 8019f40:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019f42 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8019f42:	b538      	push	{r3, r4, r5, lr}
 8019f44:	460c      	mov	r4, r1
 8019f46:	6811      	ldr	r1, [r2, #0]
 8019f48:	4610      	mov	r0, r2
 8019f4a:	68cd      	ldr	r5, [r1, #12]
 8019f4c:	4619      	mov	r1, r3
 8019f4e:	47a8      	blx	r5
 8019f50:	2800      	cmp	r0, #0
 8019f52:	bf08      	it	eq
 8019f54:	4620      	moveq	r0, r4
 8019f56:	bd38      	pop	{r3, r4, r5, pc}

08019f58 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8019f58:	b570      	push	{r4, r5, r6, lr}
 8019f5a:	8810      	ldrh	r0, [r2, #0]
 8019f5c:	4298      	cmp	r0, r3
 8019f5e:	d817      	bhi.n	8019f90 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8019f60:	1e48      	subs	r0, r1, #1
 8019f62:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8019f66:	4298      	cmp	r0, r3
 8019f68:	d312      	bcc.n	8019f90 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8019f6a:	2400      	movs	r4, #0
 8019f6c:	428c      	cmp	r4, r1
 8019f6e:	d20f      	bcs.n	8019f90 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8019f70:	1860      	adds	r0, r4, r1
 8019f72:	1040      	asrs	r0, r0, #1
 8019f74:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8019f78:	0085      	lsls	r5, r0, #2
 8019f7a:	42b3      	cmp	r3, r6
 8019f7c:	d902      	bls.n	8019f84 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8019f7e:	3001      	adds	r0, #1
 8019f80:	b284      	uxth	r4, r0
 8019f82:	e7f3      	b.n	8019f6c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8019f84:	d102      	bne.n	8019f8c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x34>
 8019f86:	442a      	add	r2, r5
 8019f88:	8850      	ldrh	r0, [r2, #2]
 8019f8a:	bd70      	pop	{r4, r5, r6, pc}
 8019f8c:	b281      	uxth	r1, r0
 8019f8e:	e7ed      	b.n	8019f6c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8019f90:	2000      	movs	r0, #0
 8019f92:	e7fa      	b.n	8019f8a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>

08019f94 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>:
 8019f94:	b510      	push	{r4, lr}
 8019f96:	8ac3      	ldrh	r3, [r0, #22]
 8019f98:	428b      	cmp	r3, r1
 8019f9a:	d805      	bhi.n	8019fa8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x14>
 8019f9c:	4b07      	ldr	r3, [pc, #28]	; (8019fbc <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x28>)
 8019f9e:	21fd      	movs	r1, #253	; 0xfd
 8019fa0:	4a07      	ldr	r2, [pc, #28]	; (8019fc0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x2c>)
 8019fa2:	4808      	ldr	r0, [pc, #32]	; (8019fc4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x30>)
 8019fa4:	f00a fe40 	bl	8024c28 <__assert_func>
 8019fa8:	8a83      	ldrh	r3, [r0, #20]
 8019faa:	240a      	movs	r4, #10
 8019fac:	4419      	add	r1, r3
 8019fae:	fbb1 f3f4 	udiv	r3, r1, r4
 8019fb2:	fb04 1113 	mls	r1, r4, r3, r1
 8019fb6:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 8019fba:	bd10      	pop	{r4, pc}
 8019fbc:	08028829 	.word	0x08028829
 8019fc0:	08028c58 	.word	0x08028c58
 8019fc4:	08028837 	.word	0x08028837

08019fc8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>:
 8019fc8:	b508      	push	{r3, lr}
 8019fca:	8ac3      	ldrh	r3, [r0, #22]
 8019fcc:	428b      	cmp	r3, r1
 8019fce:	d805      	bhi.n	8019fdc <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x14>
 8019fd0:	4b07      	ldr	r3, [pc, #28]	; (8019ff0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x28>)
 8019fd2:	21d3      	movs	r1, #211	; 0xd3
 8019fd4:	4a07      	ldr	r2, [pc, #28]	; (8019ff4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x2c>)
 8019fd6:	4808      	ldr	r0, [pc, #32]	; (8019ff8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x30>)
 8019fd8:	f00a fe26 	bl	8024c28 <__assert_func>
 8019fdc:	8a83      	ldrh	r3, [r0, #20]
 8019fde:	220a      	movs	r2, #10
 8019fe0:	4419      	add	r1, r3
 8019fe2:	fbb1 f3f2 	udiv	r3, r1, r2
 8019fe6:	fb02 1113 	mls	r1, r2, r3, r1
 8019fea:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 8019fee:	bd08      	pop	{r3, pc}
 8019ff0:	08028829 	.word	0x08028829
 8019ff4:	080289a8 	.word	0x080289a8
 8019ff8:	08028837 	.word	0x08028837

08019ffc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8019ffc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a000:	4604      	mov	r4, r0
 801a002:	4688      	mov	r8, r1
 801a004:	4615      	mov	r5, r2
 801a006:	b94a      	cbnz	r2, 801a01c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20>
 801a008:	4691      	mov	r9, r2
 801a00a:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801a00e:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 801a012:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 801a016:	4648      	mov	r0, r9
 801a018:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a01c:	f100 0640 	add.w	r6, r0, #64	; 0x40
 801a020:	8892      	ldrh	r2, [r2, #4]
 801a022:	462b      	mov	r3, r5
 801a024:	f105 0c08 	add.w	ip, r5, #8
 801a028:	46b3      	mov	fp, r6
 801a02a:	6818      	ldr	r0, [r3, #0]
 801a02c:	3308      	adds	r3, #8
 801a02e:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801a032:	4637      	mov	r7, r6
 801a034:	4563      	cmp	r3, ip
 801a036:	c703      	stmia	r7!, {r0, r1}
 801a038:	463e      	mov	r6, r7
 801a03a:	d1f6      	bne.n	801a02a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x2e>
 801a03c:	6818      	ldr	r0, [r3, #0]
 801a03e:	46d9      	mov	r9, fp
 801a040:	6038      	str	r0, [r7, #0]
 801a042:	889b      	ldrh	r3, [r3, #4]
 801a044:	80bb      	strh	r3, [r7, #4]
 801a046:	f46f 6363 	mvn.w	r3, #3632	; 0xe30
 801a04a:	f894 704d 	ldrb.w	r7, [r4, #77]	; 0x4d
 801a04e:	18d3      	adds	r3, r2, r3
 801a050:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 801a054:	b298      	uxth	r0, r3
 801a056:	f40a 7180 	and.w	r1, sl, #256	; 0x100
 801a05a:	f894 a047 	ldrb.w	sl, [r4, #71]	; 0x47
 801a05e:	281d      	cmp	r0, #29
 801a060:	ea4a 0a01 	orr.w	sl, sl, r1
 801a064:	fa1f f68a 	uxth.w	r6, sl
 801a068:	d842      	bhi.n	801a0f0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf4>
 801a06a:	2301      	movs	r3, #1
 801a06c:	4950      	ldr	r1, [pc, #320]	; (801a1b0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b4>)
 801a06e:	ea4f 0aea 	mov.w	sl, sl, asr #3
 801a072:	4083      	lsls	r3, r0
 801a074:	420b      	tst	r3, r1
 801a076:	d114      	bne.n	801a0a2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801a078:	f413 7f60 	tst.w	r3, #896	; 0x380
 801a07c:	d03c      	beq.n	801a0f8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xfc>
 801a07e:	fa1f fa8a 	uxth.w	sl, sl
 801a082:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 801a086:	4658      	mov	r0, fp
 801a088:	eba1 010a 	sub.w	r1, r1, sl
 801a08c:	b209      	sxth	r1, r1
 801a08e:	f7ff fefb 	bl	8019e88 <_ZN8touchgfx9GlyphNode6setTopEs>
 801a092:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 801a096:	1b86      	subs	r6, r0, r6
 801a098:	eba6 0a0a 	sub.w	sl, r6, sl
 801a09c:	f8a4 a050 	strh.w	sl, [r4, #80]	; 0x50
 801a0a0:	e7b9      	b.n	801a016 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801a0a2:	2100      	movs	r1, #0
 801a0a4:	f104 001a 	add.w	r0, r4, #26
 801a0a8:	f7ff ff8e 	bl	8019fc8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801a0ac:	f640 6333 	movw	r3, #3635	; 0xe33
 801a0b0:	4601      	mov	r1, r0
 801a0b2:	4298      	cmp	r0, r3
 801a0b4:	d10a      	bne.n	801a0cc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd0>
 801a0b6:	f8d8 3000 	ldr.w	r3, [r8]
 801a0ba:	4640      	mov	r0, r8
 801a0bc:	68db      	ldr	r3, [r3, #12]
 801a0be:	4798      	blx	r3
 801a0c0:	7b41      	ldrb	r1, [r0, #13]
 801a0c2:	7a00      	ldrb	r0, [r0, #8]
 801a0c4:	f7ff fed2 	bl	8019e6c <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801a0c8:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801a0cc:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 801a0d0:	4658      	mov	r0, fp
 801a0d2:	4431      	add	r1, r6
 801a0d4:	4451      	add	r1, sl
 801a0d6:	b209      	sxth	r1, r1
 801a0d8:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
 801a0dc:	f7ff fed4 	bl	8019e88 <_ZN8touchgfx9GlyphNode6setTopEs>
 801a0e0:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 801a0e4:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 801a0e8:	1a9b      	subs	r3, r3, r2
 801a0ea:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 801a0ee:	e792      	b.n	801a016 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801a0f0:	f640 631b 	movw	r3, #3611	; 0xe1b
 801a0f4:	429a      	cmp	r2, r3
 801a0f6:	d005      	beq.n	801a104 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x108>
 801a0f8:	f022 0302 	bic.w	r3, r2, #2
 801a0fc:	f640 611d 	movw	r1, #3613	; 0xe1d
 801a100:	428b      	cmp	r3, r1
 801a102:	d119      	bne.n	801a138 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13c>
 801a104:	1e53      	subs	r3, r2, #1
 801a106:	4629      	mov	r1, r5
 801a108:	4642      	mov	r2, r8
 801a10a:	4620      	mov	r0, r4
 801a10c:	b29b      	uxth	r3, r3
 801a10e:	f7ff ff18 	bl	8019f42 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801a112:	7b41      	ldrb	r1, [r0, #13]
 801a114:	7a00      	ldrb	r0, [r0, #8]
 801a116:	f7ff fea9 	bl	8019e6c <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801a11a:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 801a11e:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801a122:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a126:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801a12a:	4313      	orrs	r3, r2
 801a12c:	115a      	asrs	r2, r3, #5
 801a12e:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801a132:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801a136:	e02e      	b.n	801a196 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 801a138:	4639      	mov	r1, r7
 801a13a:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 801a13e:	f7ff fe95 	bl	8019e6c <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801a142:	f640 6109 	movw	r1, #3593	; 0xe09
 801a146:	f022 0310 	bic.w	r3, r2, #16
 801a14a:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801a14e:	428b      	cmp	r3, r1
 801a150:	d003      	beq.n	801a15a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15e>
 801a152:	f640 6313 	movw	r3, #3603	; 0xe13
 801a156:	429a      	cmp	r2, r3
 801a158:	d127      	bne.n	801a1aa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ae>
 801a15a:	b27f      	sxtb	r7, r7
 801a15c:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801a160:	4629      	mov	r1, r5
 801a162:	4620      	mov	r0, r4
 801a164:	f407 7780 	and.w	r7, r7, #256	; 0x100
 801a168:	431f      	orrs	r7, r3
 801a16a:	f640 6313 	movw	r3, #3603	; 0xe13
 801a16e:	429a      	cmp	r2, r3
 801a170:	bf14      	ite	ne
 801a172:	f102 33ff 	addne.w	r3, r2, #4294967295
 801a176:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801a17a:	4642      	mov	r2, r8
 801a17c:	bf18      	it	ne
 801a17e:	b29b      	uxthne	r3, r3
 801a180:	f7ff fedf 	bl	8019f42 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801a184:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801a188:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a18c:	7a83      	ldrb	r3, [r0, #10]
 801a18e:	4313      	orrs	r3, r2
 801a190:	1aff      	subs	r7, r7, r3
 801a192:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
 801a196:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 801a19a:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 801a19e:	f7ff fe65 	bl	8019e6c <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801a1a2:	1b80      	subs	r0, r0, r6
 801a1a4:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
 801a1a8:	e735      	b.n	801a016 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801a1aa:	2300      	movs	r3, #0
 801a1ac:	e7c1      	b.n	801a132 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x136>
 801a1ae:	bf00      	nop
 801a1b0:	3fc00079 	.word	0x3fc00079

0801a1b4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801a1b4:	3a01      	subs	r2, #1
 801a1b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a1ba:	b292      	uxth	r2, r2
 801a1bc:	460c      	mov	r4, r1
 801a1be:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801a1c2:	42b2      	cmp	r2, r6
 801a1c4:	d018      	beq.n	801a1f8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x44>
 801a1c6:	8b01      	ldrh	r1, [r0, #24]
 801a1c8:	f834 5b02 	ldrh.w	r5, [r4], #2
 801a1cc:	4291      	cmp	r1, r2
 801a1ce:	d805      	bhi.n	801a1dc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x28>
 801a1d0:	4b13      	ldr	r3, [pc, #76]	; (801a220 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x6c>)
 801a1d2:	21d3      	movs	r1, #211	; 0xd3
 801a1d4:	4a13      	ldr	r2, [pc, #76]	; (801a224 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x70>)
 801a1d6:	4814      	ldr	r0, [pc, #80]	; (801a228 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x74>)
 801a1d8:	f00a fd26 	bl	8024c28 <__assert_func>
 801a1dc:	8ac1      	ldrh	r1, [r0, #22]
 801a1de:	4411      	add	r1, r2
 801a1e0:	3a01      	subs	r2, #1
 801a1e2:	f001 0101 	and.w	r1, r1, #1
 801a1e6:	b292      	uxth	r2, r2
 801a1e8:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801a1ec:	8a49      	ldrh	r1, [r1, #18]
 801a1ee:	428d      	cmp	r5, r1
 801a1f0:	d0e7      	beq.n	801a1c2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xe>
 801a1f2:	2000      	movs	r0, #0
 801a1f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a1f8:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 801a1fc:	2600      	movs	r6, #0
 801a1fe:	f100 051a 	add.w	r5, r0, #26
 801a202:	441f      	add	r7, r3
 801a204:	b2b1      	uxth	r1, r6
 801a206:	42b9      	cmp	r1, r7
 801a208:	da08      	bge.n	801a21c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x68>
 801a20a:	f834 8016 	ldrh.w	r8, [r4, r6, lsl #1]
 801a20e:	4628      	mov	r0, r5
 801a210:	f7ff feda 	bl	8019fc8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801a214:	3601      	adds	r6, #1
 801a216:	4540      	cmp	r0, r8
 801a218:	d0f4      	beq.n	801a204 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x50>
 801a21a:	e7ea      	b.n	801a1f2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801a21c:	2001      	movs	r0, #1
 801a21e:	e7e9      	b.n	801a1f4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801a220:	08028829 	.word	0x08028829
 801a224:	08028db8 	.word	0x08028db8
 801a228:	08028837 	.word	0x08028837

0801a22c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>:
 801a22c:	b538      	push	{r3, r4, r5, lr}
 801a22e:	8ac3      	ldrh	r3, [r0, #22]
 801a230:	428b      	cmp	r3, r1
 801a232:	d205      	bcs.n	801a240 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x14>
 801a234:	4b08      	ldr	r3, [pc, #32]	; (801a258 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x2c>)
 801a236:	21d8      	movs	r1, #216	; 0xd8
 801a238:	4a08      	ldr	r2, [pc, #32]	; (801a25c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x30>)
 801a23a:	4809      	ldr	r0, [pc, #36]	; (801a260 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x34>)
 801a23c:	f00a fcf4 	bl	8024c28 <__assert_func>
 801a240:	8a82      	ldrh	r2, [r0, #20]
 801a242:	250a      	movs	r5, #10
 801a244:	1a5b      	subs	r3, r3, r1
 801a246:	440a      	add	r2, r1
 801a248:	82c3      	strh	r3, [r0, #22]
 801a24a:	fbb2 f4f5 	udiv	r4, r2, r5
 801a24e:	fb05 2214 	mls	r2, r5, r4, r2
 801a252:	8282      	strh	r2, [r0, #20]
 801a254:	bd38      	pop	{r3, r4, r5, pc}
 801a256:	bf00      	nop
 801a258:	0802881d 	.word	0x0802881d
 801a25c:	08028bd4 	.word	0x08028bd4
 801a260:	08028837 	.word	0x08028837

0801a264 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>:
 801a264:	b538      	push	{r3, r4, r5, lr}
 801a266:	8ac3      	ldrh	r3, [r0, #22]
 801a268:	2b09      	cmp	r3, #9
 801a26a:	d905      	bls.n	801a278 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x14>
 801a26c:	4b08      	ldr	r3, [pc, #32]	; (801a290 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x2c>)
 801a26e:	21f7      	movs	r1, #247	; 0xf7
 801a270:	4a08      	ldr	r2, [pc, #32]	; (801a294 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x30>)
 801a272:	4809      	ldr	r0, [pc, #36]	; (801a298 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x34>)
 801a274:	f00a fcd8 	bl	8024c28 <__assert_func>
 801a278:	8a82      	ldrh	r2, [r0, #20]
 801a27a:	250a      	movs	r5, #10
 801a27c:	441a      	add	r2, r3
 801a27e:	3301      	adds	r3, #1
 801a280:	fbb2 f4f5 	udiv	r4, r2, r5
 801a284:	fb05 2214 	mls	r2, r5, r4, r2
 801a288:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
 801a28c:	82c3      	strh	r3, [r0, #22]
 801a28e:	bd38      	pop	{r3, r4, r5, pc}
 801a290:	08028811 	.word	0x08028811
 801a294:	08028b25 	.word	0x08028b25
 801a298:	08028837 	.word	0x08028837

0801a29c <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801a29c:	b538      	push	{r3, r4, r5, lr}
 801a29e:	4604      	mov	r4, r0
 801a2a0:	f100 051a 	add.w	r5, r0, #26
 801a2a4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801a2a6:	2b0a      	cmp	r3, #10
 801a2a8:	d01c      	beq.n	801a2e4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 801a2aa:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 801a2ac:	b962      	cbnz	r2, 801a2c8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 801a2ae:	f104 051a 	add.w	r5, r4, #26
 801a2b2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801a2b4:	2b0a      	cmp	r3, #10
 801a2b6:	d015      	beq.n	801a2e4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 801a2b8:	4620      	mov	r0, r4
 801a2ba:	f7ff fdf6 	bl	8019eaa <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801a2be:	4601      	mov	r1, r0
 801a2c0:	4628      	mov	r0, r5
 801a2c2:	f7ff ffcf 	bl	801a264 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 801a2c6:	e7f4      	b.n	801a2b2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x16>
 801a2c8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801a2ca:	3a01      	subs	r2, #1
 801a2cc:	4628      	mov	r0, r5
 801a2ce:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 801a2d2:	3301      	adds	r3, #1
 801a2d4:	f003 0301 	and.w	r3, r3, #1
 801a2d8:	8e49      	ldrh	r1, [r1, #50]	; 0x32
 801a2da:	8722      	strh	r2, [r4, #56]	; 0x38
 801a2dc:	86e3      	strh	r3, [r4, #54]	; 0x36
 801a2de:	f7ff ffc1 	bl	801a264 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 801a2e2:	e7df      	b.n	801a2a4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8>
 801a2e4:	bd38      	pop	{r3, r4, r5, pc}
	...

0801a2e8 <_ZN8touchgfx12TextProvider18initializeInternalEv>:
 801a2e8:	2300      	movs	r3, #0
 801a2ea:	b510      	push	{r4, lr}
 801a2ec:	6043      	str	r3, [r0, #4]
 801a2ee:	4604      	mov	r4, r0
 801a2f0:	60c3      	str	r3, [r0, #12]
 801a2f2:	7403      	strb	r3, [r0, #16]
 801a2f4:	8603      	strh	r3, [r0, #48]	; 0x30
 801a2f6:	8303      	strh	r3, [r0, #24]
 801a2f8:	8703      	strh	r3, [r0, #56]	; 0x38
 801a2fa:	f7ff ffcf 	bl	801a29c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801a2fe:	4a0a      	ldr	r2, [pc, #40]	; (801a328 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x40>)
 801a300:	6813      	ldr	r3, [r2, #0]
 801a302:	4611      	mov	r1, r2
 801a304:	b913      	cbnz	r3, 801a30c <_ZN8touchgfx12TextProvider18initializeInternalEv+0x24>
 801a306:	6852      	ldr	r2, [r2, #4]
 801a308:	07d0      	lsls	r0, r2, #31
 801a30a:	d50b      	bpl.n	801a324 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x3c>
 801a30c:	6849      	ldr	r1, [r1, #4]
 801a30e:	104a      	asrs	r2, r1, #1
 801a310:	07c9      	lsls	r1, r1, #31
 801a312:	eb04 0002 	add.w	r0, r4, r2
 801a316:	bf48      	it	mi
 801a318:	58a2      	ldrmi	r2, [r4, r2]
 801a31a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a31e:	bf48      	it	mi
 801a320:	58d3      	ldrmi	r3, [r2, r3]
 801a322:	4718      	bx	r3
 801a324:	bd10      	pop	{r4, pc}
 801a326:	bf00      	nop
 801a328:	20008624 	.word	0x20008624

0801a32c <_ZN8touchgfx12TextProviderC1Ev>:
 801a32c:	2300      	movs	r3, #0
 801a32e:	2201      	movs	r2, #1
 801a330:	b510      	push	{r4, lr}
 801a332:	4604      	mov	r4, r0
 801a334:	60c3      	str	r3, [r0, #12]
 801a336:	7403      	strb	r3, [r0, #16]
 801a338:	82c3      	strh	r3, [r0, #22]
 801a33a:	8303      	strh	r3, [r0, #24]
 801a33c:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801a33e:	8603      	strh	r3, [r0, #48]	; 0x30
 801a340:	86c3      	strh	r3, [r0, #54]	; 0x36
 801a342:	8703      	strh	r3, [r0, #56]	; 0x38
 801a344:	63c3      	str	r3, [r0, #60]	; 0x3c
 801a346:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801a34a:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801a34e:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 801a352:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 801a356:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 801a35a:	e9c0 3300 	strd	r3, r3, [r0]
 801a35e:	f7ff ffc3 	bl	801a2e8 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801a362:	4620      	mov	r0, r4
 801a364:	bd10      	pop	{r4, pc}

0801a366 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 801a366:	b410      	push	{r4}
 801a368:	6082      	str	r2, [r0, #8]
 801a36a:	6001      	str	r1, [r0, #0]
 801a36c:	63c3      	str	r3, [r0, #60]	; 0x3c
 801a36e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a372:	f7ff bfb9 	b.w	801a2e8 <_ZN8touchgfx12TextProvider18initializeInternalEv>
	...

0801a378 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>:
 801a378:	b508      	push	{r3, lr}
 801a37a:	88c2      	ldrh	r2, [r0, #6]
 801a37c:	440a      	add	r2, r1
 801a37e:	2a02      	cmp	r2, #2
 801a380:	dd05      	ble.n	801a38e <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x16>
 801a382:	4b06      	ldr	r3, [pc, #24]	; (801a39c <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x24>)
 801a384:	21ec      	movs	r1, #236	; 0xec
 801a386:	4a06      	ldr	r2, [pc, #24]	; (801a3a0 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x28>)
 801a388:	4806      	ldr	r0, [pc, #24]	; (801a3a4 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x2c>)
 801a38a:	f00a fc4d 	bl	8024c28 <__assert_func>
 801a38e:	8883      	ldrh	r3, [r0, #4]
 801a390:	80c2      	strh	r2, [r0, #6]
 801a392:	1a59      	subs	r1, r3, r1
 801a394:	f001 0101 	and.w	r1, r1, #1
 801a398:	8081      	strh	r1, [r0, #4]
 801a39a:	bd08      	pop	{r3, pc}
 801a39c:	08028863 	.word	0x08028863
 801a3a0:	08028d31 	.word	0x08028d31
 801a3a4:	08028837 	.word	0x08028837

0801a3a8 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>:
 801a3a8:	b508      	push	{r3, lr}
 801a3aa:	88c3      	ldrh	r3, [r0, #6]
 801a3ac:	428b      	cmp	r3, r1
 801a3ae:	d805      	bhi.n	801a3bc <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x14>
 801a3b0:	4b06      	ldr	r3, [pc, #24]	; (801a3cc <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x24>)
 801a3b2:	21fd      	movs	r1, #253	; 0xfd
 801a3b4:	4a06      	ldr	r2, [pc, #24]	; (801a3d0 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x28>)
 801a3b6:	4807      	ldr	r0, [pc, #28]	; (801a3d4 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x2c>)
 801a3b8:	f00a fc36 	bl	8024c28 <__assert_func>
 801a3bc:	8883      	ldrh	r3, [r0, #4]
 801a3be:	4419      	add	r1, r3
 801a3c0:	f001 0101 	and.w	r1, r1, #1
 801a3c4:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 801a3c8:	bd08      	pop	{r3, pc}
 801a3ca:	bf00      	nop
 801a3cc:	08028829 	.word	0x08028829
 801a3d0:	08028e89 	.word	0x08028e89
 801a3d4:	08028837 	.word	0x08028837

0801a3d8 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801a3d8:	b570      	push	{r4, r5, r6, lr}
 801a3da:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 801a3dc:	4604      	mov	r4, r0
 801a3de:	b92a      	cbnz	r2, 801a3ec <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801a3e0:	4b12      	ldr	r3, [pc, #72]	; (801a42c <_ZN8touchgfx12TextProvider11getNextCharEv+0x54>)
 801a3e2:	21de      	movs	r1, #222	; 0xde
 801a3e4:	4a12      	ldr	r2, [pc, #72]	; (801a430 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801a3e6:	4813      	ldr	r0, [pc, #76]	; (801a434 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801a3e8:	f00a fc1e 	bl	8024c28 <__assert_func>
 801a3ec:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801a3ee:	260a      	movs	r6, #10
 801a3f0:	3a01      	subs	r2, #1
 801a3f2:	3412      	adds	r4, #18
 801a3f4:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801a3f8:	3301      	adds	r3, #1
 801a3fa:	8b4d      	ldrh	r5, [r1, #26]
 801a3fc:	8602      	strh	r2, [r0, #48]	; 0x30
 801a3fe:	fbb3 f1f6 	udiv	r1, r3, r6
 801a402:	fb06 3311 	mls	r3, r6, r1, r3
 801a406:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801a408:	f7ff ff48 	bl	801a29c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801a40c:	88e3      	ldrh	r3, [r4, #6]
 801a40e:	2101      	movs	r1, #1
 801a410:	2b02      	cmp	r3, #2
 801a412:	bf04      	itt	eq
 801a414:	2301      	moveq	r3, #1
 801a416:	80e3      	strheq	r3, [r4, #6]
 801a418:	4620      	mov	r0, r4
 801a41a:	f7ff ffad 	bl	801a378 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 801a41e:	4620      	mov	r0, r4
 801a420:	462a      	mov	r2, r5
 801a422:	2100      	movs	r1, #0
 801a424:	f7ff ffc0 	bl	801a3a8 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 801a428:	4628      	mov	r0, r5
 801a42a:	bd70      	pop	{r4, r5, r6, pc}
 801a42c:	08028808 	.word	0x08028808
 801a430:	08028a7a 	.word	0x08028a7a
 801a434:	08028837 	.word	0x08028837

0801a438 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801a438:	428a      	cmp	r2, r1
 801a43a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a43e:	4604      	mov	r4, r0
 801a440:	460e      	mov	r6, r1
 801a442:	4615      	mov	r5, r2
 801a444:	469a      	mov	sl, r3
 801a446:	d92b      	bls.n	801a4a0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x68>
 801a448:	1a57      	subs	r7, r2, r1
 801a44a:	f04f 0800 	mov.w	r8, #0
 801a44e:	f100 0932 	add.w	r9, r0, #50	; 0x32
 801a452:	f04f 0b0a 	mov.w	fp, #10
 801a456:	b2bf      	uxth	r7, r7
 801a458:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801a45a:	b92b      	cbnz	r3, 801a468 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x30>
 801a45c:	4b24      	ldr	r3, [pc, #144]	; (801a4f0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xb8>)
 801a45e:	21e6      	movs	r1, #230	; 0xe6
 801a460:	4a24      	ldr	r2, [pc, #144]	; (801a4f4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xbc>)
 801a462:	4825      	ldr	r0, [pc, #148]	; (801a4f8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc0>)
 801a464:	f00a fbe0 	bl	8024c28 <__assert_func>
 801a468:	3b01      	subs	r3, #1
 801a46a:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801a46c:	2101      	movs	r1, #1
 801a46e:	4648      	mov	r0, r9
 801a470:	b29b      	uxth	r3, r3
 801a472:	f108 0801 	add.w	r8, r8, #1
 801a476:	441a      	add	r2, r3
 801a478:	8623      	strh	r3, [r4, #48]	; 0x30
 801a47a:	fbb2 f3fb 	udiv	r3, r2, fp
 801a47e:	fb0b 2313 	mls	r3, fp, r3, r2
 801a482:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801a486:	8b5a      	ldrh	r2, [r3, #26]
 801a488:	9201      	str	r2, [sp, #4]
 801a48a:	f7ff ff75 	bl	801a378 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 801a48e:	9a01      	ldr	r2, [sp, #4]
 801a490:	2100      	movs	r1, #0
 801a492:	4648      	mov	r0, r9
 801a494:	f7ff ff88 	bl	801a3a8 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 801a498:	fa1f f388 	uxth.w	r3, r8
 801a49c:	429f      	cmp	r7, r3
 801a49e:	d8db      	bhi.n	801a458 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x20>
 801a4a0:	f104 071a 	add.w	r7, r4, #26
 801a4a4:	4631      	mov	r1, r6
 801a4a6:	260a      	movs	r6, #10
 801a4a8:	4638      	mov	r0, r7
 801a4aa:	f7ff febf 	bl	801a22c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 801a4ae:	b1c5      	cbz	r5, 801a4e2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801a4b0:	3d01      	subs	r5, #1
 801a4b2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801a4b4:	b2ad      	uxth	r5, r5
 801a4b6:	2b09      	cmp	r3, #9
 801a4b8:	f83a 2015 	ldrh.w	r2, [sl, r5, lsl #1]
 801a4bc:	d903      	bls.n	801a4c6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8e>
 801a4be:	4b0f      	ldr	r3, [pc, #60]	; (801a4fc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc4>)
 801a4c0:	21ec      	movs	r1, #236	; 0xec
 801a4c2:	4a0f      	ldr	r2, [pc, #60]	; (801a500 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc8>)
 801a4c4:	e7cd      	b.n	801a462 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2a>
 801a4c6:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 801a4c8:	3301      	adds	r3, #1
 801a4ca:	3109      	adds	r1, #9
 801a4cc:	8623      	strh	r3, [r4, #48]	; 0x30
 801a4ce:	fbb1 f0f6 	udiv	r0, r1, r6
 801a4d2:	fb06 1110 	mls	r1, r6, r0, r1
 801a4d6:	4638      	mov	r0, r7
 801a4d8:	85e1      	strh	r1, [r4, #46]	; 0x2e
 801a4da:	2100      	movs	r1, #0
 801a4dc:	f7ff fd5a 	bl	8019f94 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801a4e0:	e7e5      	b.n	801a4ae <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x76>
 801a4e2:	4620      	mov	r0, r4
 801a4e4:	b003      	add	sp, #12
 801a4e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a4ea:	f7ff bed7 	b.w	801a29c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801a4ee:	bf00      	nop
 801a4f0:	08028808 	.word	0x08028808
 801a4f4:	080288fe 	.word	0x080288fe
 801a4f8:	08028837 	.word	0x08028837
 801a4fc:	08028863 	.word	0x08028863
 801a500:	08028876 	.word	0x08028876

0801a504 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801a504:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a508:	4605      	mov	r5, r0
 801a50a:	4616      	mov	r6, r2
 801a50c:	1c8c      	adds	r4, r1, #2
 801a50e:	8809      	ldrh	r1, [r1, #0]
 801a510:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801a514:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801a518:	42b3      	cmp	r3, r6
 801a51a:	d124      	bne.n	801a566 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801a51c:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801a520:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801a524:	f001 070f 	and.w	r7, r1, #15
 801a528:	4652      	mov	r2, sl
 801a52a:	f8cd 8000 	str.w	r8, [sp]
 801a52e:	464b      	mov	r3, r9
 801a530:	4621      	mov	r1, r4
 801a532:	4628      	mov	r0, r5
 801a534:	f7ff fe3e 	bl	801a1b4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801a538:	4683      	mov	fp, r0
 801a53a:	b168      	cbz	r0, 801a558 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801a53c:	eb0a 0109 	add.w	r1, sl, r9
 801a540:	463a      	mov	r2, r7
 801a542:	4628      	mov	r0, r5
 801a544:	4441      	add	r1, r8
 801a546:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801a54a:	4649      	mov	r1, r9
 801a54c:	f7ff ff74 	bl	801a438 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801a550:	4658      	mov	r0, fp
 801a552:	b003      	add	sp, #12
 801a554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a558:	eb07 010a 	add.w	r1, r7, sl
 801a55c:	4449      	add	r1, r9
 801a55e:	4441      	add	r1, r8
 801a560:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801a564:	e7d2      	b.n	801a50c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801a566:	f04f 0b00 	mov.w	fp, #0
 801a56a:	e7f1      	b.n	801a550 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801a56c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801a56c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a570:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801a572:	4604      	mov	r4, r0
 801a574:	260b      	movs	r6, #11
 801a576:	f100 091a 	add.w	r9, r0, #26
 801a57a:	886f      	ldrh	r7, [r5, #2]
 801a57c:	087f      	lsrs	r7, r7, #1
 801a57e:	3e01      	subs	r6, #1
 801a580:	d013      	beq.n	801a5aa <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 801a582:	2100      	movs	r1, #0
 801a584:	4648      	mov	r0, r9
 801a586:	f7ff fd1f 	bl	8019fc8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801a58a:	462a      	mov	r2, r5
 801a58c:	4680      	mov	r8, r0
 801a58e:	4603      	mov	r3, r0
 801a590:	4639      	mov	r1, r7
 801a592:	4620      	mov	r0, r4
 801a594:	f7ff fce0 	bl	8019f58 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801a598:	b138      	cbz	r0, 801a5aa <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 801a59a:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801a59e:	4642      	mov	r2, r8
 801a5a0:	4620      	mov	r0, r4
 801a5a2:	f7ff ffaf 	bl	801a504 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801a5a6:	2800      	cmp	r0, #0
 801a5a8:	d1e9      	bne.n	801a57e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x12>
 801a5aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0801a5b0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:
 801a5b0:	4b1e      	ldr	r3, [pc, #120]	; (801a62c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 801a5b2:	b570      	push	{r4, r5, r6, lr}
 801a5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5b8:	4604      	mov	r4, r0
 801a5ba:	f003 0501 	and.w	r5, r3, #1
 801a5be:	b902      	cbnz	r2, 801a5c2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
 801a5c0:	b165      	cbz	r5, 801a5dc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2c>
 801a5c2:	105b      	asrs	r3, r3, #1
 801a5c4:	f104 061a 	add.w	r6, r4, #26
 801a5c8:	18e0      	adds	r0, r4, r3
 801a5ca:	b10d      	cbz	r5, 801a5d0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x20>
 801a5cc:	58e3      	ldr	r3, [r4, r3]
 801a5ce:	589a      	ldr	r2, [r3, r2]
 801a5d0:	4790      	blx	r2
 801a5d2:	2100      	movs	r1, #0
 801a5d4:	4602      	mov	r2, r0
 801a5d6:	4630      	mov	r0, r6
 801a5d8:	f7ff fcdc 	bl	8019f94 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801a5dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801a5de:	b303      	cbz	r3, 801a622 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801a5e0:	f104 051a 	add.w	r5, r4, #26
 801a5e4:	2100      	movs	r1, #0
 801a5e6:	4628      	mov	r0, r5
 801a5e8:	f7ff fcee 	bl	8019fc8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801a5ec:	b1c8      	cbz	r0, 801a622 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801a5ee:	4620      	mov	r0, r4
 801a5f0:	f7ff ffbc 	bl	801a56c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
 801a5f4:	2101      	movs	r1, #1
 801a5f6:	4628      	mov	r0, r5
 801a5f8:	f7ff fce6 	bl	8019fc8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801a5fc:	f640 133f 	movw	r3, #2367	; 0x93f
 801a600:	4606      	mov	r6, r0
 801a602:	4298      	cmp	r0, r3
 801a604:	d10d      	bne.n	801a622 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801a606:	2100      	movs	r1, #0
 801a608:	4628      	mov	r0, r5
 801a60a:	f7ff fcdd 	bl	8019fc8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801a60e:	2101      	movs	r1, #1
 801a610:	4602      	mov	r2, r0
 801a612:	4628      	mov	r0, r5
 801a614:	f7ff fcbe 	bl	8019f94 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801a618:	4632      	mov	r2, r6
 801a61a:	2100      	movs	r1, #0
 801a61c:	4628      	mov	r0, r5
 801a61e:	f7ff fcb9 	bl	8019f94 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801a622:	4620      	mov	r0, r4
 801a624:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a628:	f7ff bed6 	b.w	801a3d8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a62c:	2000862c 	.word	0x2000862c

0801a630 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801a630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a632:	4617      	mov	r7, r2
 801a634:	461e      	mov	r6, r3
 801a636:	4605      	mov	r5, r0
 801a638:	f7ff ffba 	bl	801a5b0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a63c:	683b      	ldr	r3, [r7, #0]
 801a63e:	4604      	mov	r4, r0
 801a640:	4601      	mov	r1, r0
 801a642:	4638      	mov	r0, r7
 801a644:	68db      	ldr	r3, [r3, #12]
 801a646:	4798      	blx	r3
 801a648:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 801a64c:	4602      	mov	r2, r0
 801a64e:	6030      	str	r0, [r6, #0]
 801a650:	b29b      	uxth	r3, r3
 801a652:	2b7f      	cmp	r3, #127	; 0x7f
 801a654:	d813      	bhi.n	801a67e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4e>
 801a656:	4639      	mov	r1, r7
 801a658:	4628      	mov	r0, r5
 801a65a:	f7ff fccf 	bl	8019ffc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801a65e:	6030      	str	r0, [r6, #0]
 801a660:	6833      	ldr	r3, [r6, #0]
 801a662:	b143      	cbz	r3, 801a676 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801a664:	f993 200d 	ldrsb.w	r2, [r3, #13]
 801a668:	7a9b      	ldrb	r3, [r3, #10]
 801a66a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801a66e:	4313      	orrs	r3, r2
 801a670:	bf0c      	ite	eq
 801a672:	2301      	moveq	r3, #1
 801a674:	2300      	movne	r3, #0
 801a676:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801a67a:	4620      	mov	r0, r4
 801a67c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a67e:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 801a682:	2b00      	cmp	r3, #0
 801a684:	d0ec      	beq.n	801a660 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 801a686:	f640 1302 	movw	r3, #2306	; 0x902
 801a68a:	429c      	cmp	r4, r3
 801a68c:	d1e8      	bne.n	801a660 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 801a68e:	4601      	mov	r1, r0
 801a690:	4628      	mov	r0, r5
 801a692:	f7ff fc32 	bl	8019efa <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801a696:	e7e2      	b.n	801a65e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>

0801a698 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801a698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a69c:	4617      	mov	r7, r2
 801a69e:	461e      	mov	r6, r3
 801a6a0:	4605      	mov	r5, r0
 801a6a2:	f7ff ff85 	bl	801a5b0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a6a6:	683b      	ldr	r3, [r7, #0]
 801a6a8:	4604      	mov	r4, r0
 801a6aa:	4601      	mov	r1, r0
 801a6ac:	4638      	mov	r0, r7
 801a6ae:	f8d3 8008 	ldr.w	r8, [r3, #8]
 801a6b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a6b6:	47c0      	blx	r8
 801a6b8:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 801a6bc:	4602      	mov	r2, r0
 801a6be:	6030      	str	r0, [r6, #0]
 801a6c0:	b29b      	uxth	r3, r3
 801a6c2:	2b7f      	cmp	r3, #127	; 0x7f
 801a6c4:	d814      	bhi.n	801a6f0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x58>
 801a6c6:	4639      	mov	r1, r7
 801a6c8:	4628      	mov	r0, r5
 801a6ca:	f7ff fc97 	bl	8019ffc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801a6ce:	6030      	str	r0, [r6, #0]
 801a6d0:	6833      	ldr	r3, [r6, #0]
 801a6d2:	b143      	cbz	r3, 801a6e6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801a6d4:	f993 200d 	ldrsb.w	r2, [r3, #13]
 801a6d8:	7a9b      	ldrb	r3, [r3, #10]
 801a6da:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801a6de:	4313      	orrs	r3, r2
 801a6e0:	bf0c      	ite	eq
 801a6e2:	2301      	moveq	r3, #1
 801a6e4:	2300      	movne	r3, #0
 801a6e6:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801a6ea:	4620      	mov	r0, r4
 801a6ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a6f0:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 801a6f4:	2b00      	cmp	r3, #0
 801a6f6:	d0eb      	beq.n	801a6d0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 801a6f8:	f640 1302 	movw	r3, #2306	; 0x902
 801a6fc:	429c      	cmp	r4, r3
 801a6fe:	d1e7      	bne.n	801a6d0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 801a700:	4601      	mov	r1, r0
 801a702:	4628      	mov	r0, r5
 801a704:	f7ff fbf9 	bl	8019efa <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801a708:	e7e1      	b.n	801a6ce <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x36>

0801a70a <_ZN8touchgfx7Unicode6strlenEPKt>:
 801a70a:	4602      	mov	r2, r0
 801a70c:	b148      	cbz	r0, 801a722 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801a70e:	2300      	movs	r3, #0
 801a710:	b298      	uxth	r0, r3
 801a712:	3301      	adds	r3, #1
 801a714:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801a718:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801a71c:	2900      	cmp	r1, #0
 801a71e:	d1f7      	bne.n	801a710 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801a720:	4770      	bx	lr
 801a722:	4770      	bx	lr

0801a724 <_ZN8touchgfx7Unicode6strlenEPKc>:
 801a724:	b140      	cbz	r0, 801a738 <_ZN8touchgfx7Unicode6strlenEPKc+0x14>
 801a726:	4602      	mov	r2, r0
 801a728:	1a13      	subs	r3, r2, r0
 801a72a:	f812 1b01 	ldrb.w	r1, [r2], #1
 801a72e:	b29b      	uxth	r3, r3
 801a730:	2900      	cmp	r1, #0
 801a732:	d1f9      	bne.n	801a728 <_ZN8touchgfx7Unicode6strlenEPKc+0x4>
 801a734:	4618      	mov	r0, r3
 801a736:	4770      	bx	lr
 801a738:	4603      	mov	r3, r0
 801a73a:	e7fb      	b.n	801a734 <_ZN8touchgfx7Unicode6strlenEPKc+0x10>

0801a73c <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801a73c:	b530      	push	{r4, r5, lr}
 801a73e:	4604      	mov	r4, r0
 801a740:	b159      	cbz	r1, 801a75a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801a742:	b148      	cbz	r0, 801a758 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801a744:	2300      	movs	r3, #0
 801a746:	b298      	uxth	r0, r3
 801a748:	4282      	cmp	r2, r0
 801a74a:	d905      	bls.n	801a758 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801a74c:	5ccd      	ldrb	r5, [r1, r3]
 801a74e:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801a752:	3301      	adds	r3, #1
 801a754:	2d00      	cmp	r5, #0
 801a756:	d1f6      	bne.n	801a746 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801a758:	bd30      	pop	{r4, r5, pc}
 801a75a:	4608      	mov	r0, r1
 801a75c:	e7fc      	b.n	801a758 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801a75e <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 801a75e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a760:	468c      	mov	ip, r1
 801a762:	b08b      	sub	sp, #44	; 0x2c
 801a764:	2100      	movs	r1, #0
 801a766:	ae01      	add	r6, sp, #4
 801a768:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801a76c:	211f      	movs	r1, #31
 801a76e:	fbb0 f7f3 	udiv	r7, r0, r3
 801a772:	fb03 0517 	mls	r5, r3, r7, r0
 801a776:	4638      	mov	r0, r7
 801a778:	b2ec      	uxtb	r4, r5
 801a77a:	2d09      	cmp	r5, #9
 801a77c:	bfd4      	ite	le
 801a77e:	3430      	addle	r4, #48	; 0x30
 801a780:	3457      	addgt	r4, #87	; 0x57
 801a782:	b2e4      	uxtb	r4, r4
 801a784:	558c      	strb	r4, [r1, r6]
 801a786:	1e4c      	subs	r4, r1, #1
 801a788:	b92f      	cbnz	r7, 801a796 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 801a78a:	4431      	add	r1, r6
 801a78c:	4660      	mov	r0, ip
 801a78e:	f7ff ffd5 	bl	801a73c <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801a792:	b00b      	add	sp, #44	; 0x2c
 801a794:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a796:	4621      	mov	r1, r4
 801a798:	e7e9      	b.n	801a76e <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

0801a79a <_ZN8touchgfx7Unicode4itoaElPtti>:
 801a79a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a79c:	4607      	mov	r7, r0
 801a79e:	b08b      	sub	sp, #44	; 0x2c
 801a7a0:	4608      	mov	r0, r1
 801a7a2:	b341      	cbz	r1, 801a7f6 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801a7a4:	1e99      	subs	r1, r3, #2
 801a7a6:	290e      	cmp	r1, #14
 801a7a8:	d825      	bhi.n	801a7f6 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801a7aa:	2100      	movs	r1, #0
 801a7ac:	463c      	mov	r4, r7
 801a7ae:	261f      	movs	r6, #31
 801a7b0:	f10d 0c04 	add.w	ip, sp, #4
 801a7b4:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801a7b8:	1e71      	subs	r1, r6, #1
 801a7ba:	fb94 fef3 	sdiv	lr, r4, r3
 801a7be:	fb03 441e 	mls	r4, r3, lr, r4
 801a7c2:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801a7c6:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801a7ca:	b2ec      	uxtb	r4, r5
 801a7cc:	2d09      	cmp	r5, #9
 801a7ce:	bfd4      	ite	le
 801a7d0:	3430      	addle	r4, #48	; 0x30
 801a7d2:	3457      	addgt	r4, #87	; 0x57
 801a7d4:	b2e4      	uxtb	r4, r4
 801a7d6:	f80c 4006 	strb.w	r4, [ip, r6]
 801a7da:	4674      	mov	r4, lr
 801a7dc:	b96c      	cbnz	r4, 801a7fa <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801a7de:	2f00      	cmp	r7, #0
 801a7e0:	da05      	bge.n	801a7ee <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801a7e2:	ab0a      	add	r3, sp, #40	; 0x28
 801a7e4:	4419      	add	r1, r3
 801a7e6:	232d      	movs	r3, #45	; 0x2d
 801a7e8:	f801 3c24 	strb.w	r3, [r1, #-36]
 801a7ec:	1eb1      	subs	r1, r6, #2
 801a7ee:	3101      	adds	r1, #1
 801a7f0:	4461      	add	r1, ip
 801a7f2:	f7ff ffa3 	bl	801a73c <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801a7f6:	b00b      	add	sp, #44	; 0x2c
 801a7f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a7fa:	460e      	mov	r6, r1
 801a7fc:	e7dc      	b.n	801a7b8 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801a7fe <_ZN8touchgfx7Unicode4atoiEPKt>:
 801a7fe:	b510      	push	{r4, lr}
 801a800:	b158      	cbz	r0, 801a81a <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 801a802:	1e82      	subs	r2, r0, #2
 801a804:	210a      	movs	r1, #10
 801a806:	2000      	movs	r0, #0
 801a808:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801a80c:	3b30      	subs	r3, #48	; 0x30
 801a80e:	b29c      	uxth	r4, r3
 801a810:	2c09      	cmp	r4, #9
 801a812:	d802      	bhi.n	801a81a <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 801a814:	fb01 3000 	mla	r0, r1, r0, r3
 801a818:	e7f6      	b.n	801a808 <_ZN8touchgfx7Unicode4atoiEPKt+0xa>
 801a81a:	bd10      	pop	{r4, pc}

0801a81c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>:
 801a81c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a820:	b085      	sub	sp, #20
 801a822:	f8d0 8000 	ldr.w	r8, [r0]
 801a826:	468a      	mov	sl, r1
 801a828:	461c      	mov	r4, r3
 801a82a:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801a82e:	4681      	mov	r9, r0
 801a830:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801a834:	4640      	mov	r0, r8
 801a836:	9203      	str	r2, [sp, #12]
 801a838:	9102      	str	r1, [sp, #8]
 801a83a:	9301      	str	r3, [sp, #4]
 801a83c:	f7ff ff65 	bl	801a70a <_ZN8touchgfx7Unicode6strlenEPKt>
 801a840:	9a03      	ldr	r2, [sp, #12]
 801a842:	f1ba 0f00 	cmp.w	sl, #0
 801a846:	bf0c      	ite	eq
 801a848:	4684      	moveq	ip, r0
 801a84a:	f100 0c01 	addne.w	ip, r0, #1
 801a84e:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 801a852:	8812      	ldrh	r2, [r2, #0]
 801a854:	fa1f fc8c 	uxth.w	ip, ip
 801a858:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801a85a:	2a69      	cmp	r2, #105	; 0x69
 801a85c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801a85e:	9f15      	ldr	r7, [sp, #84]	; 0x54
 801a860:	e9dd 3101 	ldrd	r3, r1, [sp, #4]
 801a864:	d004      	beq.n	801a870 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801a866:	d844      	bhi.n	801a8f2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xd6>
 801a868:	2a58      	cmp	r2, #88	; 0x58
 801a86a:	d001      	beq.n	801a870 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801a86c:	2a64      	cmp	r2, #100	; 0x64
 801a86e:	d14b      	bne.n	801a908 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 801a870:	b1a4      	cbz	r4, 801a89c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801a872:	b956      	cbnz	r6, 801a88a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 801a874:	2801      	cmp	r0, #1
 801a876:	d108      	bne.n	801a88a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 801a878:	f8b8 2000 	ldrh.w	r2, [r8]
 801a87c:	2a30      	cmp	r2, #48	; 0x30
 801a87e:	bf02      	ittt	eq
 801a880:	f108 0202 	addeq.w	r2, r8, #2
 801a884:	4630      	moveq	r0, r6
 801a886:	f8c9 2000 	streq.w	r2, [r9]
 801a88a:	45b4      	cmp	ip, r6
 801a88c:	da3e      	bge.n	801a90c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf0>
 801a88e:	b2b6      	uxth	r6, r6
 801a890:	eba6 040c 	sub.w	r4, r6, ip
 801a894:	46b4      	mov	ip, r6
 801a896:	b2a4      	uxth	r4, r4
 801a898:	f04f 0b00 	mov.w	fp, #0
 801a89c:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801a8a0:	3a01      	subs	r2, #1
 801a8a2:	b169      	cbz	r1, 801a8c0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801a8a4:	9911      	ldr	r1, [sp, #68]	; 0x44
 801a8a6:	458c      	cmp	ip, r1
 801a8a8:	da09      	bge.n	801a8be <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 801a8aa:	eba1 010c 	sub.w	r1, r1, ip
 801a8ae:	b289      	uxth	r1, r1
 801a8b0:	b933      	cbnz	r3, 801a8c0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801a8b2:	f1bb 0f00 	cmp.w	fp, #0
 801a8b6:	d02b      	beq.n	801a910 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 801a8b8:	b350      	cbz	r0, 801a910 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 801a8ba:	440c      	add	r4, r1
 801a8bc:	b2a4      	uxth	r4, r4
 801a8be:	2100      	movs	r1, #0
 801a8c0:	682b      	ldr	r3, [r5, #0]
 801a8c2:	4293      	cmp	r3, r2
 801a8c4:	da07      	bge.n	801a8d6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 801a8c6:	f1ba 0f00 	cmp.w	sl, #0
 801a8ca:	d004      	beq.n	801a8d6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 801a8cc:	f827 a013 	strh.w	sl, [r7, r3, lsl #1]
 801a8d0:	682b      	ldr	r3, [r5, #0]
 801a8d2:	3301      	adds	r3, #1
 801a8d4:	602b      	str	r3, [r5, #0]
 801a8d6:	f04f 0c30 	mov.w	ip, #48	; 0x30
 801a8da:	b354      	cbz	r4, 801a932 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801a8dc:	682e      	ldr	r6, [r5, #0]
 801a8de:	3c01      	subs	r4, #1
 801a8e0:	42b2      	cmp	r2, r6
 801a8e2:	b2a4      	uxth	r4, r4
 801a8e4:	dd25      	ble.n	801a932 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801a8e6:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 801a8ea:	682b      	ldr	r3, [r5, #0]
 801a8ec:	3301      	adds	r3, #1
 801a8ee:	602b      	str	r3, [r5, #0]
 801a8f0:	e7f3      	b.n	801a8da <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xbe>
 801a8f2:	2a73      	cmp	r2, #115	; 0x73
 801a8f4:	d003      	beq.n	801a8fe <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xe2>
 801a8f6:	2a78      	cmp	r2, #120	; 0x78
 801a8f8:	d0ba      	beq.n	801a870 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801a8fa:	2a6f      	cmp	r2, #111	; 0x6f
 801a8fc:	e7b7      	b.n	801a86e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x52>
 801a8fe:	2c00      	cmp	r4, #0
 801a900:	d0cc      	beq.n	801a89c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801a902:	42b0      	cmp	r0, r6
 801a904:	dd00      	ble.n	801a908 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 801a906:	b2b0      	uxth	r0, r6
 801a908:	2400      	movs	r4, #0
 801a90a:	e7c7      	b.n	801a89c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801a90c:	2400      	movs	r4, #0
 801a90e:	e7c3      	b.n	801a898 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x7c>
 801a910:	2900      	cmp	r1, #0
 801a912:	d0d5      	beq.n	801a8c0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801a914:	f04f 0c20 	mov.w	ip, #32
 801a918:	682e      	ldr	r6, [r5, #0]
 801a91a:	2900      	cmp	r1, #0
 801a91c:	d0d0      	beq.n	801a8c0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801a91e:	3901      	subs	r1, #1
 801a920:	4296      	cmp	r6, r2
 801a922:	b289      	uxth	r1, r1
 801a924:	dacb      	bge.n	801a8be <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 801a926:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 801a92a:	682b      	ldr	r3, [r5, #0]
 801a92c:	3301      	adds	r3, #1
 801a92e:	602b      	str	r3, [r5, #0]
 801a930:	e7f2      	b.n	801a918 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xfc>
 801a932:	b198      	cbz	r0, 801a95c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801a934:	f8d9 3000 	ldr.w	r3, [r9]
 801a938:	881c      	ldrh	r4, [r3, #0]
 801a93a:	b17c      	cbz	r4, 801a95c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801a93c:	682c      	ldr	r4, [r5, #0]
 801a93e:	3801      	subs	r0, #1
 801a940:	42a2      	cmp	r2, r4
 801a942:	b280      	uxth	r0, r0
 801a944:	dd0a      	ble.n	801a95c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801a946:	1c9c      	adds	r4, r3, #2
 801a948:	f8c9 4000 	str.w	r4, [r9]
 801a94c:	881c      	ldrh	r4, [r3, #0]
 801a94e:	682b      	ldr	r3, [r5, #0]
 801a950:	f827 4013 	strh.w	r4, [r7, r3, lsl #1]
 801a954:	682b      	ldr	r3, [r5, #0]
 801a956:	3301      	adds	r3, #1
 801a958:	602b      	str	r3, [r5, #0]
 801a95a:	e7ea      	b.n	801a932 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801a95c:	2620      	movs	r6, #32
 801a95e:	b151      	cbz	r1, 801a976 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 801a960:	6828      	ldr	r0, [r5, #0]
 801a962:	3901      	subs	r1, #1
 801a964:	4282      	cmp	r2, r0
 801a966:	b289      	uxth	r1, r1
 801a968:	dd05      	ble.n	801a976 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 801a96a:	f827 6010 	strh.w	r6, [r7, r0, lsl #1]
 801a96e:	682b      	ldr	r3, [r5, #0]
 801a970:	3301      	adds	r3, #1
 801a972:	602b      	str	r3, [r5, #0]
 801a974:	e7f3      	b.n	801a95e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x142>
 801a976:	b005      	add	sp, #20
 801a978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a97c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>:
 801a97c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a980:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801a982:	4604      	mov	r4, r0
 801a984:	f04f 0801 	mov.w	r8, #1
 801a988:	2000      	movs	r0, #0
 801a98a:	e9dd ce06 	ldrd	ip, lr, [sp, #24]
 801a98e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 801a992:	8008      	strh	r0, [r1, #0]
 801a994:	7010      	strb	r0, [r2, #0]
 801a996:	7018      	strb	r0, [r3, #0]
 801a998:	f88c 0000 	strb.w	r0, [ip]
 801a99c:	f88e 0000 	strb.w	r0, [lr]
 801a9a0:	7030      	strb	r0, [r6, #0]
 801a9a2:	6820      	ldr	r0, [r4, #0]
 801a9a4:	8800      	ldrh	r0, [r0, #0]
 801a9a6:	b190      	cbz	r0, 801a9ce <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 801a9a8:	282b      	cmp	r0, #43	; 0x2b
 801a9aa:	d001      	beq.n	801a9b0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x34>
 801a9ac:	2820      	cmp	r0, #32
 801a9ae:	d104      	bne.n	801a9ba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x3e>
 801a9b0:	8008      	strh	r0, [r1, #0]
 801a9b2:	6820      	ldr	r0, [r4, #0]
 801a9b4:	3002      	adds	r0, #2
 801a9b6:	6020      	str	r0, [r4, #0]
 801a9b8:	e7f3      	b.n	801a9a2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x26>
 801a9ba:	282d      	cmp	r0, #45	; 0x2d
 801a9bc:	d102      	bne.n	801a9c4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x48>
 801a9be:	f882 8000 	strb.w	r8, [r2]
 801a9c2:	e7f6      	b.n	801a9b2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 801a9c4:	2823      	cmp	r0, #35	; 0x23
 801a9c6:	d102      	bne.n	801a9ce <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 801a9c8:	f883 8000 	strb.w	r8, [r3]
 801a9cc:	e7f1      	b.n	801a9b2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 801a9ce:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801a9d2:	2b09      	cmp	r3, #9
 801a9d4:	d901      	bls.n	801a9da <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x5e>
 801a9d6:	282a      	cmp	r0, #42	; 0x2a
 801a9d8:	d114      	bne.n	801aa04 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 801a9da:	2201      	movs	r2, #1
 801a9dc:	f88e 2000 	strb.w	r2, [lr]
 801a9e0:	6823      	ldr	r3, [r4, #0]
 801a9e2:	8819      	ldrh	r1, [r3, #0]
 801a9e4:	2930      	cmp	r1, #48	; 0x30
 801a9e6:	bf02      	ittt	eq
 801a9e8:	3302      	addeq	r3, #2
 801a9ea:	6023      	streq	r3, [r4, #0]
 801a9ec:	f88c 2000 	strbeq.w	r2, [ip]
 801a9f0:	6820      	ldr	r0, [r4, #0]
 801a9f2:	8803      	ldrh	r3, [r0, #0]
 801a9f4:	2b2a      	cmp	r3, #42	; 0x2a
 801a9f6:	d11e      	bne.n	801aa36 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xba>
 801a9f8:	f04f 33ff 	mov.w	r3, #4294967295
 801a9fc:	603b      	str	r3, [r7, #0]
 801a9fe:	6823      	ldr	r3, [r4, #0]
 801aa00:	3302      	adds	r3, #2
 801aa02:	6023      	str	r3, [r4, #0]
 801aa04:	6823      	ldr	r3, [r4, #0]
 801aa06:	881b      	ldrh	r3, [r3, #0]
 801aa08:	2b2e      	cmp	r3, #46	; 0x2e
 801aa0a:	d112      	bne.n	801aa32 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xb6>
 801aa0c:	2301      	movs	r3, #1
 801aa0e:	7033      	strb	r3, [r6, #0]
 801aa10:	6823      	ldr	r3, [r4, #0]
 801aa12:	1c98      	adds	r0, r3, #2
 801aa14:	6020      	str	r0, [r4, #0]
 801aa16:	885b      	ldrh	r3, [r3, #2]
 801aa18:	2b2a      	cmp	r3, #42	; 0x2a
 801aa1a:	d117      	bne.n	801aa4c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd0>
 801aa1c:	f04f 33ff 	mov.w	r3, #4294967295
 801aa20:	602b      	str	r3, [r5, #0]
 801aa22:	6823      	ldr	r3, [r4, #0]
 801aa24:	3302      	adds	r3, #2
 801aa26:	6023      	str	r3, [r4, #0]
 801aa28:	682b      	ldr	r3, [r5, #0]
 801aa2a:	2b06      	cmp	r3, #6
 801aa2c:	bfa8      	it	ge
 801aa2e:	2306      	movge	r3, #6
 801aa30:	602b      	str	r3, [r5, #0]
 801aa32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aa36:	f7ff fee2 	bl	801a7fe <_ZN8touchgfx7Unicode4atoiEPKt>
 801aa3a:	6038      	str	r0, [r7, #0]
 801aa3c:	6823      	ldr	r3, [r4, #0]
 801aa3e:	881a      	ldrh	r2, [r3, #0]
 801aa40:	3a30      	subs	r2, #48	; 0x30
 801aa42:	2a09      	cmp	r2, #9
 801aa44:	d8de      	bhi.n	801aa04 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 801aa46:	3302      	adds	r3, #2
 801aa48:	6023      	str	r3, [r4, #0]
 801aa4a:	e7f7      	b.n	801aa3c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xc0>
 801aa4c:	f7ff fed7 	bl	801a7fe <_ZN8touchgfx7Unicode4atoiEPKt>
 801aa50:	6028      	str	r0, [r5, #0]
 801aa52:	6823      	ldr	r3, [r4, #0]
 801aa54:	881a      	ldrh	r2, [r3, #0]
 801aa56:	3a30      	subs	r2, #48	; 0x30
 801aa58:	2a09      	cmp	r2, #9
 801aa5a:	d8e5      	bhi.n	801aa28 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xac>
 801aa5c:	3302      	adds	r3, #2
 801aa5e:	6023      	str	r3, [r4, #0]
 801aa60:	e7f7      	b.n	801aa52 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd6>

0801aa62 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>:
 801aa62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aa66:	b0a2      	sub	sp, #136	; 0x88
 801aa68:	2500      	movs	r5, #0
 801aa6a:	4606      	mov	r6, r0
 801aa6c:	460f      	mov	r7, r1
 801aa6e:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 801aa72:	9209      	str	r2, [sp, #36]	; 0x24
 801aa74:	4629      	mov	r1, r5
 801aa76:	2242      	movs	r2, #66	; 0x42
 801aa78:	4640      	mov	r0, r8
 801aa7a:	461c      	mov	r4, r3
 801aa7c:	950d      	str	r5, [sp, #52]	; 0x34
 801aa7e:	f7fe fe26 	bl	80196ce <_ZN8touchgfx6memsetEPvhm>
 801aa82:	b30e      	cbz	r6, 801aac8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 801aa84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aa86:	b1f3      	cbz	r3, 801aac6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x64>
 801aa88:	f107 3aff 	add.w	sl, r7, #4294967295
 801aa8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801aa8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801aa90:	8812      	ldrh	r2, [r2, #0]
 801aa92:	2a00      	cmp	r2, #0
 801aa94:	f000 80b3 	beq.w	801abfe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 801aa98:	459a      	cmp	sl, r3
 801aa9a:	f340 80b0 	ble.w	801abfe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 801aa9e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801aaa2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801aaa4:	f8b9 2000 	ldrh.w	r2, [r9]
 801aaa8:	2a00      	cmp	r2, #0
 801aaaa:	d0ef      	beq.n	801aa8c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801aaac:	2a25      	cmp	r2, #37	; 0x25
 801aaae:	f000 80aa 	beq.w	801ac06 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1a4>
 801aab2:	459a      	cmp	sl, r3
 801aab4:	ddea      	ble.n	801aa8c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801aab6:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801aaba:	f109 0202 	add.w	r2, r9, #2
 801aabe:	3301      	adds	r3, #1
 801aac0:	9209      	str	r2, [sp, #36]	; 0x24
 801aac2:	930d      	str	r3, [sp, #52]	; 0x34
 801aac4:	e7eb      	b.n	801aa9e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x3c>
 801aac6:	8033      	strh	r3, [r6, #0]
 801aac8:	4630      	mov	r0, r6
 801aaca:	b022      	add	sp, #136	; 0x88
 801aacc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aad0:	3b63      	subs	r3, #99	; 0x63
 801aad2:	2b01      	cmp	r3, #1
 801aad4:	f200 80df 	bhi.w	801ac96 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x234>
 801aad8:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801aadc:	8813      	ldrh	r3, [r2, #0]
 801aade:	2b69      	cmp	r3, #105	; 0x69
 801aae0:	d058      	beq.n	801ab94 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 801aae2:	d81b      	bhi.n	801ab1c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xba>
 801aae4:	2b63      	cmp	r3, #99	; 0x63
 801aae6:	d02e      	beq.n	801ab46 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xe4>
 801aae8:	2b64      	cmp	r3, #100	; 0x64
 801aaea:	d053      	beq.n	801ab94 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 801aaec:	2b58      	cmp	r3, #88	; 0x58
 801aaee:	d06f      	beq.n	801abd0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x16e>
 801aaf0:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 801aaf4:	46a1      	mov	r9, r4
 801aaf6:	e02d      	b.n	801ab54 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801aaf8:	2b73      	cmp	r3, #115	; 0x73
 801aafa:	d0ed      	beq.n	801aad8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801aafc:	d803      	bhi.n	801ab06 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xa4>
 801aafe:	2b6f      	cmp	r3, #111	; 0x6f
 801ab00:	f040 80c9 	bne.w	801ac96 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x234>
 801ab04:	e7e8      	b.n	801aad8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801ab06:	2b75      	cmp	r3, #117	; 0x75
 801ab08:	d0e6      	beq.n	801aad8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801ab0a:	2b78      	cmp	r3, #120	; 0x78
 801ab0c:	e7f8      	b.n	801ab00 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x9e>
 801ab0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ab10:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801ab14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ab16:	3302      	adds	r3, #2
 801ab18:	9309      	str	r3, [sp, #36]	; 0x24
 801ab1a:	e7b7      	b.n	801aa8c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801ab1c:	2b73      	cmp	r3, #115	; 0x73
 801ab1e:	d034      	beq.n	801ab8a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x128>
 801ab20:	d807      	bhi.n	801ab32 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xd0>
 801ab22:	2b6f      	cmp	r3, #111	; 0x6f
 801ab24:	d1e4      	bne.n	801aaf0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 801ab26:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ab28:	f104 0904 	add.w	r9, r4, #4
 801ab2c:	2308      	movs	r3, #8
 801ab2e:	1aba      	subs	r2, r7, r2
 801ab30:	e048      	b.n	801abc4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 801ab32:	2b75      	cmp	r3, #117	; 0x75
 801ab34:	d041      	beq.n	801abba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x158>
 801ab36:	2b78      	cmp	r3, #120	; 0x78
 801ab38:	d1da      	bne.n	801aaf0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 801ab3a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ab3c:	f104 0904 	add.w	r9, r4, #4
 801ab40:	2310      	movs	r3, #16
 801ab42:	1aba      	subs	r2, r7, r2
 801ab44:	e03e      	b.n	801abc4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 801ab46:	7823      	ldrb	r3, [r4, #0]
 801ab48:	f104 0904 	add.w	r9, r4, #4
 801ab4c:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 801ab50:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801ab54:	aa0d      	add	r2, sp, #52	; 0x34
 801ab56:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801ab5a:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801ab5e:	a810      	add	r0, sp, #64	; 0x40
 801ab60:	9205      	str	r2, [sp, #20]
 801ab62:	464c      	mov	r4, r9
 801ab64:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 801ab68:	9204      	str	r2, [sp, #16]
 801ab6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ab6c:	9203      	str	r2, [sp, #12]
 801ab6e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 801ab72:	9202      	str	r2, [sp, #8]
 801ab74:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ab76:	9201      	str	r2, [sp, #4]
 801ab78:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 801ab7c:	e9cd 7606 	strd	r7, r6, [sp, #24]
 801ab80:	9200      	str	r2, [sp, #0]
 801ab82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ab84:	f7ff fe4a 	bl	801a81c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 801ab88:	e7c4      	b.n	801ab14 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
 801ab8a:	f104 0904 	add.w	r9, r4, #4
 801ab8e:	6823      	ldr	r3, [r4, #0]
 801ab90:	9310      	str	r3, [sp, #64]	; 0x40
 801ab92:	e7df      	b.n	801ab54 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801ab94:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ab96:	230a      	movs	r3, #10
 801ab98:	4641      	mov	r1, r8
 801ab9a:	6820      	ldr	r0, [r4, #0]
 801ab9c:	1aba      	subs	r2, r7, r2
 801ab9e:	f104 0904 	add.w	r9, r4, #4
 801aba2:	b292      	uxth	r2, r2
 801aba4:	f7ff fdf9 	bl	801a79a <_ZN8touchgfx7Unicode4itoaElPtti>
 801aba8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801abac:	2b2d      	cmp	r3, #45	; 0x2d
 801abae:	d1d1      	bne.n	801ab54 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801abb0:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801abb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801abb6:	3302      	adds	r3, #2
 801abb8:	e7ea      	b.n	801ab90 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x12e>
 801abba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801abbc:	f104 0904 	add.w	r9, r4, #4
 801abc0:	230a      	movs	r3, #10
 801abc2:	1aba      	subs	r2, r7, r2
 801abc4:	b292      	uxth	r2, r2
 801abc6:	4641      	mov	r1, r8
 801abc8:	6820      	ldr	r0, [r4, #0]
 801abca:	f7ff fdc8 	bl	801a75e <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801abce:	e7c1      	b.n	801ab54 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801abd0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801abd2:	2310      	movs	r3, #16
 801abd4:	4641      	mov	r1, r8
 801abd6:	6820      	ldr	r0, [r4, #0]
 801abd8:	1aba      	subs	r2, r7, r2
 801abda:	f104 0904 	add.w	r9, r4, #4
 801abde:	b292      	uxth	r2, r2
 801abe0:	f7ff fdbd 	bl	801a75e <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801abe4:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801abe8:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801abec:	2b00      	cmp	r3, #0
 801abee:	d0b1      	beq.n	801ab54 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801abf0:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801abf4:	2919      	cmp	r1, #25
 801abf6:	d8f7      	bhi.n	801abe8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 801abf8:	3b20      	subs	r3, #32
 801abfa:	8013      	strh	r3, [r2, #0]
 801abfc:	e7f4      	b.n	801abe8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 801abfe:	2200      	movs	r2, #0
 801ac00:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801ac04:	e760      	b.n	801aac8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 801ac06:	459a      	cmp	sl, r3
 801ac08:	f77f af40 	ble.w	801aa8c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801ac0c:	f109 0302 	add.w	r3, r9, #2
 801ac10:	f10d 022d 	add.w	r2, sp, #45	; 0x2d
 801ac14:	f10d 0132 	add.w	r1, sp, #50	; 0x32
 801ac18:	a809      	add	r0, sp, #36	; 0x24
 801ac1a:	9309      	str	r3, [sp, #36]	; 0x24
 801ac1c:	ab0f      	add	r3, sp, #60	; 0x3c
 801ac1e:	f8ad 5032 	strh.w	r5, [sp, #50]	; 0x32
 801ac22:	9304      	str	r3, [sp, #16]
 801ac24:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801ac28:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
 801ac2c:	9303      	str	r3, [sp, #12]
 801ac2e:	ab0e      	add	r3, sp, #56	; 0x38
 801ac30:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
 801ac34:	9302      	str	r3, [sp, #8]
 801ac36:	ab0c      	add	r3, sp, #48	; 0x30
 801ac38:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
 801ac3c:	9301      	str	r3, [sp, #4]
 801ac3e:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801ac42:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
 801ac46:	9300      	str	r3, [sp, #0]
 801ac48:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801ac4c:	950e      	str	r5, [sp, #56]	; 0x38
 801ac4e:	f88d 5031 	strb.w	r5, [sp, #49]	; 0x31
 801ac52:	950f      	str	r5, [sp, #60]	; 0x3c
 801ac54:	f7ff fe92 	bl	801a97c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 801ac58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ac5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ac5c:	2b00      	cmp	r3, #0
 801ac5e:	bfbf      	itttt	lt
 801ac60:	6823      	ldrlt	r3, [r4, #0]
 801ac62:	3404      	addlt	r4, #4
 801ac64:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801ac68:	930e      	strlt	r3, [sp, #56]	; 0x38
 801ac6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ac6c:	2b00      	cmp	r3, #0
 801ac6e:	bfbf      	itttt	lt
 801ac70:	6823      	ldrlt	r3, [r4, #0]
 801ac72:	3404      	addlt	r4, #4
 801ac74:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801ac78:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801ac7a:	8813      	ldrh	r3, [r2, #0]
 801ac7c:	2b69      	cmp	r3, #105	; 0x69
 801ac7e:	f43f af2b 	beq.w	801aad8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801ac82:	f63f af39 	bhi.w	801aaf8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x96>
 801ac86:	2b58      	cmp	r3, #88	; 0x58
 801ac88:	f43f af26 	beq.w	801aad8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801ac8c:	f63f af20 	bhi.w	801aad0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x6e>
 801ac90:	2b25      	cmp	r3, #37	; 0x25
 801ac92:	f43f af3c 	beq.w	801ab0e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xac>
 801ac96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ac98:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801ac9c:	f8b9 2000 	ldrh.w	r2, [r9]
 801aca0:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801aca4:	3301      	adds	r3, #1
 801aca6:	930d      	str	r3, [sp, #52]	; 0x34
 801aca8:	e734      	b.n	801ab14 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
	...

0801acac <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801acac:	b5f0      	push	{r4, r5, r6, r7, lr}
 801acae:	4605      	mov	r5, r0
 801acb0:	b0a1      	sub	sp, #132	; 0x84
 801acb2:	4610      	mov	r0, r2
 801acb4:	460e      	mov	r6, r1
 801acb6:	4614      	mov	r4, r2
 801acb8:	461f      	mov	r7, r3
 801acba:	f7ff fd33 	bl	801a724 <_ZN8touchgfx7Unicode6strlenEPKc>
 801acbe:	283f      	cmp	r0, #63	; 0x3f
 801acc0:	d906      	bls.n	801acd0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x24>
 801acc2:	4b0a      	ldr	r3, [pc, #40]	; (801acec <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x40>)
 801acc4:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 801acc8:	4a09      	ldr	r2, [pc, #36]	; (801acf0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x44>)
 801acca:	480a      	ldr	r0, [pc, #40]	; (801acf4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x48>)
 801accc:	f009 ffac 	bl	8024c28 <__assert_func>
 801acd0:	4621      	mov	r1, r4
 801acd2:	2240      	movs	r2, #64	; 0x40
 801acd4:	4668      	mov	r0, sp
 801acd6:	f7ff fd31 	bl	801a73c <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801acda:	463b      	mov	r3, r7
 801acdc:	466a      	mov	r2, sp
 801acde:	4631      	mov	r1, r6
 801ace0:	4628      	mov	r0, r5
 801ace2:	f7ff febe 	bl	801aa62 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>
 801ace6:	b021      	add	sp, #132	; 0x84
 801ace8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801acea:	bf00      	nop
 801acec:	08028f61 	.word	0x08028f61
 801acf0:	08029033 	.word	0x08029033
 801acf4:	08028f7e 	.word	0x08028f7e

0801acf8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801acf8:	b40c      	push	{r2, r3}
 801acfa:	b507      	push	{r0, r1, r2, lr}
 801acfc:	ab04      	add	r3, sp, #16
 801acfe:	f853 2b04 	ldr.w	r2, [r3], #4
 801ad02:	9301      	str	r3, [sp, #4]
 801ad04:	f7ff ffd2 	bl	801acac <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801ad08:	b003      	add	sp, #12
 801ad0a:	f85d eb04 	ldr.w	lr, [sp], #4
 801ad0e:	b002      	add	sp, #8
 801ad10:	4770      	bx	lr
	...

0801ad14 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf>:
 801ad14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad18:	b0c3      	sub	sp, #268	; 0x10c
 801ad1a:	2400      	movs	r4, #0
 801ad1c:	4606      	mov	r6, r0
 801ad1e:	4689      	mov	r9, r1
 801ad20:	af10      	add	r7, sp, #64	; 0x40
 801ad22:	9209      	str	r2, [sp, #36]	; 0x24
 801ad24:	4621      	mov	r1, r4
 801ad26:	22c8      	movs	r2, #200	; 0xc8
 801ad28:	4638      	mov	r0, r7
 801ad2a:	469a      	mov	sl, r3
 801ad2c:	940c      	str	r4, [sp, #48]	; 0x30
 801ad2e:	f7fe fcce 	bl	80196ce <_ZN8touchgfx6memsetEPvhm>
 801ad32:	b116      	cbz	r6, 801ad3a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x26>
 801ad34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ad36:	b923      	cbnz	r3, 801ad42 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x2e>
 801ad38:	8033      	strh	r3, [r6, #0]
 801ad3a:	4630      	mov	r0, r6
 801ad3c:	b043      	add	sp, #268	; 0x10c
 801ad3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad42:	f109 3bff 	add.w	fp, r9, #4294967295
 801ad46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ad48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ad4a:	8812      	ldrh	r2, [r2, #0]
 801ad4c:	2a00      	cmp	r2, #0
 801ad4e:	f000 80d1 	beq.w	801aef4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e0>
 801ad52:	459b      	cmp	fp, r3
 801ad54:	f340 80ce 	ble.w	801aef4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e0>
 801ad58:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801ad5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ad5c:	882a      	ldrh	r2, [r5, #0]
 801ad5e:	2a00      	cmp	r2, #0
 801ad60:	d0f1      	beq.n	801ad46 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801ad62:	2a25      	cmp	r2, #37	; 0x25
 801ad64:	f000 80ca 	beq.w	801aefc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e8>
 801ad68:	459b      	cmp	fp, r3
 801ad6a:	ddec      	ble.n	801ad46 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801ad6c:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801ad70:	3502      	adds	r5, #2
 801ad72:	3301      	adds	r3, #1
 801ad74:	9509      	str	r5, [sp, #36]	; 0x24
 801ad76:	930c      	str	r3, [sp, #48]	; 0x30
 801ad78:	e7ee      	b.n	801ad58 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x44>
 801ad7a:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801ad7e:	3202      	adds	r2, #2
 801ad80:	920c      	str	r2, [sp, #48]	; 0x30
 801ad82:	e0ac      	b.n	801aede <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1ca>
 801ad84:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801ad88:	970f      	str	r7, [sp, #60]	; 0x3c
 801ad8a:	3401      	adds	r4, #1
 801ad8c:	edd3 7a00 	vldr	s15, [r3]
 801ad90:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801ad94:	b923      	cbnz	r3, 801ada0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x8c>
 801ad96:	2301      	movs	r3, #1
 801ad98:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 801ad9c:	2303      	movs	r3, #3
 801ad9e:	930e      	str	r3, [sp, #56]	; 0x38
 801ada0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801ada4:	980e      	ldr	r0, [sp, #56]	; 0x38
 801ada6:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 801adaa:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 801afa8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x294>
 801adae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801adb2:	bf42      	ittt	mi
 801adb4:	232d      	movmi	r3, #45	; 0x2d
 801adb6:	eef1 7a67 	vnegmi.f32	s15, s15
 801adba:	f8ad 302e 	strhmi.w	r3, [sp, #46]	; 0x2e
 801adbe:	2300      	movs	r3, #0
 801adc0:	4298      	cmp	r0, r3
 801adc2:	dd03      	ble.n	801adcc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xb8>
 801adc4:	ee87 7a06 	vdiv.f32	s14, s14, s12
 801adc8:	3301      	adds	r3, #1
 801adca:	e7f9      	b.n	801adc0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xac>
 801adcc:	ee77 7a87 	vadd.f32	s15, s15, s14
 801add0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801add4:	eeb0 7a67 	vmov.f32	s14, s15
 801add8:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801addc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ade0:	da26      	bge.n	801ae30 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x11c>
 801ade2:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801ade6:	eba9 0202 	sub.w	r2, r9, r2
 801adea:	2100      	movs	r1, #0
 801adec:	eef4 6ae5 	vcmpe.f32	s13, s11
 801adf0:	b28d      	uxth	r5, r1
 801adf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801adf6:	db21      	blt.n	801ae3c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x128>
 801adf8:	1a53      	subs	r3, r2, r1
 801adfa:	2b00      	cmp	r3, #0
 801adfc:	dd1e      	ble.n	801ae3c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x128>
 801adfe:	2963      	cmp	r1, #99	; 0x63
 801ae00:	d01b      	beq.n	801ae3a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x126>
 801ae02:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801ae06:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801ae0a:	ee17 3a10 	vmov	r3, s14
 801ae0e:	2b09      	cmp	r3, #9
 801ae10:	bfa8      	it	ge
 801ae12:	2309      	movge	r3, #9
 801ae14:	ee07 3a10 	vmov	s14, r3
 801ae18:	f103 0530 	add.w	r5, r3, #48	; 0x30
 801ae1c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ae20:	f827 5011 	strh.w	r5, [r7, r1, lsl #1]
 801ae24:	3101      	adds	r1, #1
 801ae26:	eee7 7a66 	vfms.f32	s15, s14, s13
 801ae2a:	eec6 6a86 	vdiv.f32	s13, s13, s12
 801ae2e:	e7dd      	b.n	801adec <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xd8>
 801ae30:	ee66 6a86 	vmul.f32	s13, s13, s12
 801ae34:	ee87 7a06 	vdiv.f32	s14, s14, s12
 801ae38:	e7ce      	b.n	801add8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xc4>
 801ae3a:	460d      	mov	r5, r1
 801ae3c:	2a63      	cmp	r2, #99	; 0x63
 801ae3e:	bfd4      	ite	le
 801ae40:	ebc5 0202 	rsble	r2, r5, r2
 801ae44:	f1c5 0263 	rsbgt	r2, r5, #99	; 0x63
 801ae48:	2a00      	cmp	r2, #0
 801ae4a:	dd4e      	ble.n	801aeea <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1d6>
 801ae4c:	4603      	mov	r3, r0
 801ae4e:	f04f 0801 	mov.w	r8, #1
 801ae52:	2b00      	cmp	r3, #0
 801ae54:	dd0e      	ble.n	801ae74 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x160>
 801ae56:	ee67 7a86 	vmul.f32	s15, s15, s12
 801ae5a:	210a      	movs	r1, #10
 801ae5c:	3b01      	subs	r3, #1
 801ae5e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801ae62:	ee17 ca10 	vmov	ip, s14
 801ae66:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ae6a:	fb01 c808 	mla	r8, r1, r8, ip
 801ae6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ae72:	e7ee      	b.n	801ae52 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x13e>
 801ae74:	2800      	cmp	r0, #0
 801ae76:	f100 33ff 	add.w	r3, r0, #4294967295
 801ae7a:	ea4f 0545 	mov.w	r5, r5, lsl #1
 801ae7e:	bfac      	ite	ge
 801ae80:	1a18      	subge	r0, r3, r0
 801ae82:	4618      	movlt	r0, r3
 801ae84:	b292      	uxth	r2, r2
 801ae86:	230a      	movs	r3, #10
 801ae88:	900e      	str	r0, [sp, #56]	; 0x38
 801ae8a:	1979      	adds	r1, r7, r5
 801ae8c:	4640      	mov	r0, r8
 801ae8e:	f7ff fc84 	bl	801a79a <_ZN8touchgfx7Unicode4itoaElPtti>
 801ae92:	f1b8 0f01 	cmp.w	r8, #1
 801ae96:	dc26      	bgt.n	801aee6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1d2>
 801ae98:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 801ae9c:	2b00      	cmp	r3, #0
 801ae9e:	bf0c      	ite	eq
 801aea0:	2300      	moveq	r3, #0
 801aea2:	232e      	movne	r3, #46	; 0x2e
 801aea4:	aa42      	add	r2, sp, #264	; 0x108
 801aea6:	4415      	add	r5, r2
 801aea8:	aa0c      	add	r2, sp, #48	; 0x30
 801aeaa:	f825 3cc8 	strh.w	r3, [r5, #-200]
 801aeae:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801aeb2:	a80f      	add	r0, sp, #60	; 0x3c
 801aeb4:	9205      	str	r2, [sp, #20]
 801aeb6:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 801aeba:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801aebe:	9204      	str	r2, [sp, #16]
 801aec0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801aec2:	9203      	str	r2, [sp, #12]
 801aec4:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 801aec8:	9202      	str	r2, [sp, #8]
 801aeca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801aecc:	9201      	str	r2, [sp, #4]
 801aece:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
 801aed2:	e9cd 9606 	strd	r9, r6, [sp, #24]
 801aed6:	9200      	str	r2, [sp, #0]
 801aed8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801aeda:	f7ff fc9f 	bl	801a81c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 801aede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aee0:	3302      	adds	r3, #2
 801aee2:	9309      	str	r3, [sp, #36]	; 0x24
 801aee4:	e72f      	b.n	801ad46 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801aee6:	232e      	movs	r3, #46	; 0x2e
 801aee8:	e7dc      	b.n	801aea4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x190>
 801aeea:	ab42      	add	r3, sp, #264	; 0x108
 801aeec:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 801aef0:	2300      	movs	r3, #0
 801aef2:	e7d9      	b.n	801aea8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x194>
 801aef4:	2200      	movs	r2, #0
 801aef6:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801aefa:	e71e      	b.n	801ad3a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x26>
 801aefc:	459b      	cmp	fp, r3
 801aefe:	f77f af22 	ble.w	801ad46 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801af02:	2300      	movs	r3, #0
 801af04:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 801af08:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 801af0c:	a809      	add	r0, sp, #36	; 0x24
 801af0e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801af12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801af16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801af1a:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 801af1e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801af22:	930d      	str	r3, [sp, #52]	; 0x34
 801af24:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 801af28:	930e      	str	r3, [sp, #56]	; 0x38
 801af2a:	1cab      	adds	r3, r5, #2
 801af2c:	9309      	str	r3, [sp, #36]	; 0x24
 801af2e:	ab0e      	add	r3, sp, #56	; 0x38
 801af30:	9304      	str	r3, [sp, #16]
 801af32:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801af36:	9303      	str	r3, [sp, #12]
 801af38:	ab0d      	add	r3, sp, #52	; 0x34
 801af3a:	9302      	str	r3, [sp, #8]
 801af3c:	ab0b      	add	r3, sp, #44	; 0x2c
 801af3e:	9301      	str	r3, [sp, #4]
 801af40:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 801af44:	9300      	str	r3, [sp, #0]
 801af46:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 801af4a:	f7ff fd17 	bl	801a97c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 801af4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801af50:	2b00      	cmp	r3, #0
 801af52:	da0b      	bge.n	801af6c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x258>
 801af54:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801af58:	3401      	adds	r4, #1
 801af5a:	edd3 7a00 	vldr	s15, [r3]
 801af5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801af62:	ee17 3a90 	vmov	r3, s15
 801af66:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801af6a:	930d      	str	r3, [sp, #52]	; 0x34
 801af6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801af6e:	2b00      	cmp	r3, #0
 801af70:	da0b      	bge.n	801af8a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x276>
 801af72:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801af76:	3401      	adds	r4, #1
 801af78:	edd3 7a00 	vldr	s15, [r3]
 801af7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801af80:	ee17 3a90 	vmov	r3, s15
 801af84:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801af88:	930e      	str	r3, [sp, #56]	; 0x38
 801af8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801af8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801af8e:	881b      	ldrh	r3, [r3, #0]
 801af90:	2b25      	cmp	r3, #37	; 0x25
 801af92:	f43f aef2 	beq.w	801ad7a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x66>
 801af96:	2b66      	cmp	r3, #102	; 0x66
 801af98:	f43f aef4 	beq.w	801ad84 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x70>
 801af9c:	9509      	str	r5, [sp, #36]	; 0x24
 801af9e:	882b      	ldrh	r3, [r5, #0]
 801afa0:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801afa4:	3201      	adds	r2, #1
 801afa6:	e6eb      	b.n	801ad80 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x6c>
 801afa8:	3f000002 	.word	0x3f000002

0801afac <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>:
 801afac:	b5f0      	push	{r4, r5, r6, r7, lr}
 801afae:	4605      	mov	r5, r0
 801afb0:	b0a1      	sub	sp, #132	; 0x84
 801afb2:	4610      	mov	r0, r2
 801afb4:	460e      	mov	r6, r1
 801afb6:	4614      	mov	r4, r2
 801afb8:	461f      	mov	r7, r3
 801afba:	f7ff fbb3 	bl	801a724 <_ZN8touchgfx7Unicode6strlenEPKc>
 801afbe:	283f      	cmp	r0, #63	; 0x3f
 801afc0:	d906      	bls.n	801afd0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x24>
 801afc2:	4b0a      	ldr	r3, [pc, #40]	; (801afec <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x40>)
 801afc4:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 801afc8:	4a09      	ldr	r2, [pc, #36]	; (801aff0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x44>)
 801afca:	480a      	ldr	r0, [pc, #40]	; (801aff4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x48>)
 801afcc:	f009 fe2c 	bl	8024c28 <__assert_func>
 801afd0:	4621      	mov	r1, r4
 801afd2:	2240      	movs	r2, #64	; 0x40
 801afd4:	4668      	mov	r0, sp
 801afd6:	f7ff fbb1 	bl	801a73c <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801afda:	463b      	mov	r3, r7
 801afdc:	466a      	mov	r2, sp
 801afde:	4631      	mov	r1, r6
 801afe0:	4628      	mov	r0, r5
 801afe2:	f7ff fe97 	bl	801ad14 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf>
 801afe6:	b021      	add	sp, #132	; 0x84
 801afe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801afea:	bf00      	nop
 801afec:	08028f61 	.word	0x08028f61
 801aff0:	08028fa4 	.word	0x08028fa4
 801aff4:	08028f7e 	.word	0x08028f7e

0801aff8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801aff8:	4b01      	ldr	r3, [pc, #4]	; (801b000 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801affa:	6018      	str	r0, [r3, #0]
 801affc:	4770      	bx	lr
 801affe:	bf00      	nop
 801b000:	2000bd1c 	.word	0x2000bd1c

0801b004 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801b004:	4b07      	ldr	r3, [pc, #28]	; (801b024 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x20>)
 801b006:	881a      	ldrh	r2, [r3, #0]
 801b008:	4282      	cmp	r2, r0
 801b00a:	d809      	bhi.n	801b020 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801b00c:	4b06      	ldr	r3, [pc, #24]	; (801b028 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x24>)
 801b00e:	881b      	ldrh	r3, [r3, #0]
 801b010:	4413      	add	r3, r2
 801b012:	4298      	cmp	r0, r3
 801b014:	da04      	bge.n	801b020 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801b016:	4b05      	ldr	r3, [pc, #20]	; (801b02c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x28>)
 801b018:	681b      	ldr	r3, [r3, #0]
 801b01a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801b01e:	4770      	bx	lr
 801b020:	2000      	movs	r0, #0
 801b022:	4770      	bx	lr
 801b024:	2000bd3c 	.word	0x2000bd3c
 801b028:	2000bd40 	.word	0x2000bd40
 801b02c:	2000bd20 	.word	0x2000bd20

0801b030 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801b030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b034:	4d26      	ldr	r5, [pc, #152]	; (801b0d0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801b036:	682b      	ldr	r3, [r5, #0]
 801b038:	2b00      	cmp	r3, #0
 801b03a:	d046      	beq.n	801b0ca <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 801b03c:	4a25      	ldr	r2, [pc, #148]	; (801b0d4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801b03e:	4f26      	ldr	r7, [pc, #152]	; (801b0d8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801b040:	8810      	ldrh	r0, [r2, #0]
 801b042:	883c      	ldrh	r4, [r7, #0]
 801b044:	4e25      	ldr	r6, [pc, #148]	; (801b0dc <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801b046:	4420      	add	r0, r4
 801b048:	1c42      	adds	r2, r0, #1
 801b04a:	ea4f 0880 	mov.w	r8, r0, lsl #2
 801b04e:	f022 0201 	bic.w	r2, r2, #1
 801b052:	0412      	lsls	r2, r2, #16
 801b054:	0c12      	lsrs	r2, r2, #16
 801b056:	0051      	lsls	r1, r2, #1
 801b058:	220e      	movs	r2, #14
 801b05a:	eb08 0e01 	add.w	lr, r8, r1
 801b05e:	fb02 fc04 	mul.w	ip, r2, r4
 801b062:	eb03 0208 	add.w	r2, r3, r8
 801b066:	4c1e      	ldr	r4, [pc, #120]	; (801b0e0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801b068:	6022      	str	r2, [r4, #0]
 801b06a:	eb03 020e 	add.w	r2, r3, lr
 801b06e:	44e6      	add	lr, ip
 801b070:	6032      	str	r2, [r6, #0]
 801b072:	4473      	add	r3, lr
 801b074:	4a1b      	ldr	r2, [pc, #108]	; (801b0e4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801b076:	6013      	str	r3, [r2, #0]
 801b078:	2300      	movs	r3, #0
 801b07a:	4a1b      	ldr	r2, [pc, #108]	; (801b0e8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801b07c:	8013      	strh	r3, [r2, #0]
 801b07e:	4a1b      	ldr	r2, [pc, #108]	; (801b0ec <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801b080:	6812      	ldr	r2, [r2, #0]
 801b082:	eba2 0208 	sub.w	r2, r2, r8
 801b086:	1a52      	subs	r2, r2, r1
 801b088:	4919      	ldr	r1, [pc, #100]	; (801b0f0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801b08a:	eba2 020c 	sub.w	r2, r2, ip
 801b08e:	469c      	mov	ip, r3
 801b090:	600a      	str	r2, [r1, #0]
 801b092:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801b096:	4a17      	ldr	r2, [pc, #92]	; (801b0f4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801b098:	8013      	strh	r3, [r2, #0]
 801b09a:	4283      	cmp	r3, r0
 801b09c:	d10d      	bne.n	801b0ba <_ZN8touchgfx6Bitmap10clearCacheEv+0x8a>
 801b09e:	883d      	ldrh	r5, [r7, #0]
 801b0a0:	2300      	movs	r3, #0
 801b0a2:	6830      	ldr	r0, [r6, #0]
 801b0a4:	240e      	movs	r4, #14
 801b0a6:	429d      	cmp	r5, r3
 801b0a8:	d90f      	bls.n	801b0ca <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 801b0aa:	fb04 0203 	mla	r2, r4, r3, r0
 801b0ae:	3301      	adds	r3, #1
 801b0b0:	7b11      	ldrb	r1, [r2, #12]
 801b0b2:	f36f 1145 	bfc	r1, #5, #1
 801b0b6:	7311      	strb	r1, [r2, #12]
 801b0b8:	e7f5      	b.n	801b0a6 <_ZN8touchgfx6Bitmap10clearCacheEv+0x76>
 801b0ba:	682a      	ldr	r2, [r5, #0]
 801b0bc:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801b0c0:	6822      	ldr	r2, [r4, #0]
 801b0c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801b0c6:	3301      	adds	r3, #1
 801b0c8:	e7e7      	b.n	801b09a <_ZN8touchgfx6Bitmap10clearCacheEv+0x6a>
 801b0ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b0ce:	bf00      	nop
 801b0d0:	2000bd20 	.word	0x2000bd20
 801b0d4:	2000bd3c 	.word	0x2000bd3c
 801b0d8:	2000bd40 	.word	0x2000bd40
 801b0dc:	2000bd24 	.word	0x2000bd24
 801b0e0:	2000bd34 	.word	0x2000bd34
 801b0e4:	2000bd2c 	.word	0x2000bd2c
 801b0e8:	2000bd3e 	.word	0x2000bd3e
 801b0ec:	2000bd28 	.word	0x2000bd28
 801b0f0:	2000bd38 	.word	0x2000bd38
 801b0f4:	2000bd30 	.word	0x2000bd30

0801b0f8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801b0f8:	4b10      	ldr	r3, [pc, #64]	; (801b13c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801b0fa:	b510      	push	{r4, lr}
 801b0fc:	681b      	ldr	r3, [r3, #0]
 801b0fe:	b9db      	cbnz	r3, 801b138 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801b100:	b1d1      	cbz	r1, 801b138 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801b102:	4b0f      	ldr	r3, [pc, #60]	; (801b140 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801b104:	240e      	movs	r4, #14
 801b106:	801a      	strh	r2, [r3, #0]
 801b108:	b292      	uxth	r2, r2
 801b10a:	4b0e      	ldr	r3, [pc, #56]	; (801b144 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801b10c:	881b      	ldrh	r3, [r3, #0]
 801b10e:	4413      	add	r3, r2
 801b110:	4362      	muls	r2, r4
 801b112:	2406      	movs	r4, #6
 801b114:	fb04 2203 	mla	r2, r4, r3, r2
 801b118:	428a      	cmp	r2, r1
 801b11a:	d305      	bcc.n	801b128 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801b11c:	4b0a      	ldr	r3, [pc, #40]	; (801b148 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801b11e:	2137      	movs	r1, #55	; 0x37
 801b120:	4a0a      	ldr	r2, [pc, #40]	; (801b14c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801b122:	480b      	ldr	r0, [pc, #44]	; (801b150 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801b124:	f009 fd80 	bl	8024c28 <__assert_func>
 801b128:	4b0a      	ldr	r3, [pc, #40]	; (801b154 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801b12a:	6019      	str	r1, [r3, #0]
 801b12c:	4b0a      	ldr	r3, [pc, #40]	; (801b158 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801b12e:	6018      	str	r0, [r3, #0]
 801b130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b134:	f7ff bf7c 	b.w	801b030 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801b138:	bd10      	pop	{r4, pc}
 801b13a:	bf00      	nop
 801b13c:	2000bd2c 	.word	0x2000bd2c
 801b140:	2000bd40 	.word	0x2000bd40
 801b144:	2000bd3c 	.word	0x2000bd3c
 801b148:	08029115 	.word	0x08029115
 801b14c:	0802916e 	.word	0x0802916e
 801b150:	080290f0 	.word	0x080290f0
 801b154:	2000bd28 	.word	0x2000bd28
 801b158:	2000bd20 	.word	0x2000bd20

0801b15c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801b15c:	b470      	push	{r4, r5, r6}
 801b15e:	4c07      	ldr	r4, [pc, #28]	; (801b17c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801b160:	4605      	mov	r5, r0
 801b162:	4610      	mov	r0, r2
 801b164:	9a03      	ldr	r2, [sp, #12]
 801b166:	6826      	ldr	r6, [r4, #0]
 801b168:	b936      	cbnz	r6, 801b178 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801b16a:	6025      	str	r5, [r4, #0]
 801b16c:	4c04      	ldr	r4, [pc, #16]	; (801b180 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801b16e:	8021      	strh	r1, [r4, #0]
 801b170:	4619      	mov	r1, r3
 801b172:	bc70      	pop	{r4, r5, r6}
 801b174:	f7ff bfc0 	b.w	801b0f8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801b178:	bc70      	pop	{r4, r5, r6}
 801b17a:	4770      	bx	lr
 801b17c:	2000bd44 	.word	0x2000bd44
 801b180:	2000bd3c 	.word	0x2000bd3c

0801b184 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801b184:	b508      	push	{r3, lr}
 801b186:	4b14      	ldr	r3, [pc, #80]	; (801b1d8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801b188:	6819      	ldr	r1, [r3, #0]
 801b18a:	b931      	cbnz	r1, 801b19a <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801b18c:	4b13      	ldr	r3, [pc, #76]	; (801b1dc <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801b18e:	f240 21e6 	movw	r1, #742	; 0x2e6
 801b192:	4a13      	ldr	r2, [pc, #76]	; (801b1e0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801b194:	4813      	ldr	r0, [pc, #76]	; (801b1e4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801b196:	f009 fd47 	bl	8024c28 <__assert_func>
 801b19a:	4a13      	ldr	r2, [pc, #76]	; (801b1e8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801b19c:	8803      	ldrh	r3, [r0, #0]
 801b19e:	8812      	ldrh	r2, [r2, #0]
 801b1a0:	4293      	cmp	r3, r2
 801b1a2:	d204      	bcs.n	801b1ae <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801b1a4:	2214      	movs	r2, #20
 801b1a6:	fb02 1303 	mla	r3, r2, r3, r1
 801b1aa:	8918      	ldrh	r0, [r3, #8]
 801b1ac:	bd08      	pop	{r3, pc}
 801b1ae:	490f      	ldr	r1, [pc, #60]	; (801b1ec <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801b1b0:	8809      	ldrh	r1, [r1, #0]
 801b1b2:	4411      	add	r1, r2
 801b1b4:	428b      	cmp	r3, r1
 801b1b6:	da06      	bge.n	801b1c6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801b1b8:	1a9b      	subs	r3, r3, r2
 801b1ba:	4a0d      	ldr	r2, [pc, #52]	; (801b1f0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801b1bc:	210e      	movs	r1, #14
 801b1be:	6812      	ldr	r2, [r2, #0]
 801b1c0:	fb01 2303 	mla	r3, r1, r3, r2
 801b1c4:	e7f1      	b.n	801b1aa <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801b1c6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b1ca:	4293      	cmp	r3, r2
 801b1cc:	bf0a      	itet	eq
 801b1ce:	4b09      	ldreq	r3, [pc, #36]	; (801b1f4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801b1d0:	2000      	movne	r0, #0
 801b1d2:	8818      	ldrheq	r0, [r3, #0]
 801b1d4:	e7ea      	b.n	801b1ac <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801b1d6:	bf00      	nop
 801b1d8:	2000bd44 	.word	0x2000bd44
 801b1dc:	080270c8 	.word	0x080270c8
 801b1e0:	0802921b 	.word	0x0802921b
 801b1e4:	080290f0 	.word	0x080290f0
 801b1e8:	2000bd3c 	.word	0x2000bd3c
 801b1ec:	2000bd40 	.word	0x2000bd40
 801b1f0:	2000bd24 	.word	0x2000bd24
 801b1f4:	2000bc70 	.word	0x2000bc70

0801b1f8 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801b1f8:	b508      	push	{r3, lr}
 801b1fa:	4b14      	ldr	r3, [pc, #80]	; (801b24c <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801b1fc:	6819      	ldr	r1, [r3, #0]
 801b1fe:	b931      	cbnz	r1, 801b20e <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801b200:	4b13      	ldr	r3, [pc, #76]	; (801b250 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801b202:	f240 21fa 	movw	r1, #762	; 0x2fa
 801b206:	4a13      	ldr	r2, [pc, #76]	; (801b254 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801b208:	4813      	ldr	r0, [pc, #76]	; (801b258 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801b20a:	f009 fd0d 	bl	8024c28 <__assert_func>
 801b20e:	4a13      	ldr	r2, [pc, #76]	; (801b25c <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801b210:	8803      	ldrh	r3, [r0, #0]
 801b212:	8812      	ldrh	r2, [r2, #0]
 801b214:	4293      	cmp	r3, r2
 801b216:	d204      	bcs.n	801b222 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801b218:	2214      	movs	r2, #20
 801b21a:	fb02 1303 	mla	r3, r2, r3, r1
 801b21e:	8958      	ldrh	r0, [r3, #10]
 801b220:	bd08      	pop	{r3, pc}
 801b222:	490f      	ldr	r1, [pc, #60]	; (801b260 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801b224:	8809      	ldrh	r1, [r1, #0]
 801b226:	4411      	add	r1, r2
 801b228:	428b      	cmp	r3, r1
 801b22a:	da06      	bge.n	801b23a <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801b22c:	1a9b      	subs	r3, r3, r2
 801b22e:	4a0d      	ldr	r2, [pc, #52]	; (801b264 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801b230:	210e      	movs	r1, #14
 801b232:	6812      	ldr	r2, [r2, #0]
 801b234:	fb01 2303 	mla	r3, r1, r3, r2
 801b238:	e7f1      	b.n	801b21e <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801b23a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b23e:	4293      	cmp	r3, r2
 801b240:	bf0a      	itet	eq
 801b242:	4b09      	ldreq	r3, [pc, #36]	; (801b268 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801b244:	2000      	movne	r0, #0
 801b246:	8818      	ldrheq	r0, [r3, #0]
 801b248:	e7ea      	b.n	801b220 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801b24a:	bf00      	nop
 801b24c:	2000bd44 	.word	0x2000bd44
 801b250:	080270c8 	.word	0x080270c8
 801b254:	08029247 	.word	0x08029247
 801b258:	080290f0 	.word	0x080290f0
 801b25c:	2000bd3c 	.word	0x2000bd3c
 801b260:	2000bd40 	.word	0x2000bd40
 801b264:	2000bd24 	.word	0x2000bd24
 801b268:	2000bc72 	.word	0x2000bc72

0801b26c <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801b26c:	4b23      	ldr	r3, [pc, #140]	; (801b2fc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801b26e:	b510      	push	{r4, lr}
 801b270:	681c      	ldr	r4, [r3, #0]
 801b272:	b934      	cbnz	r4, 801b282 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801b274:	4b22      	ldr	r3, [pc, #136]	; (801b300 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801b276:	f240 310e 	movw	r1, #782	; 0x30e
 801b27a:	4a22      	ldr	r2, [pc, #136]	; (801b304 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801b27c:	4822      	ldr	r0, [pc, #136]	; (801b308 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801b27e:	f009 fcd3 	bl	8024c28 <__assert_func>
 801b282:	4a22      	ldr	r2, [pc, #136]	; (801b30c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801b284:	880b      	ldrh	r3, [r1, #0]
 801b286:	8812      	ldrh	r2, [r2, #0]
 801b288:	4293      	cmp	r3, r2
 801b28a:	d211      	bcs.n	801b2b0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801b28c:	2214      	movs	r2, #20
 801b28e:	fb02 4303 	mla	r3, r2, r3, r4
 801b292:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801b296:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801b29a:	8a1a      	ldrh	r2, [r3, #16]
 801b29c:	8a5b      	ldrh	r3, [r3, #18]
 801b29e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801b2a2:	8004      	strh	r4, [r0, #0]
 801b2a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b2a8:	8041      	strh	r1, [r0, #2]
 801b2aa:	8082      	strh	r2, [r0, #4]
 801b2ac:	80c3      	strh	r3, [r0, #6]
 801b2ae:	e00e      	b.n	801b2ce <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801b2b0:	4917      	ldr	r1, [pc, #92]	; (801b310 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801b2b2:	8809      	ldrh	r1, [r1, #0]
 801b2b4:	4411      	add	r1, r2
 801b2b6:	428b      	cmp	r3, r1
 801b2b8:	da0a      	bge.n	801b2d0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801b2ba:	1a9b      	subs	r3, r3, r2
 801b2bc:	4a15      	ldr	r2, [pc, #84]	; (801b314 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801b2be:	210e      	movs	r1, #14
 801b2c0:	6812      	ldr	r2, [r2, #0]
 801b2c2:	fb01 2303 	mla	r3, r1, r3, r2
 801b2c6:	681a      	ldr	r2, [r3, #0]
 801b2c8:	6002      	str	r2, [r0, #0]
 801b2ca:	685a      	ldr	r2, [r3, #4]
 801b2cc:	6042      	str	r2, [r0, #4]
 801b2ce:	bd10      	pop	{r4, pc}
 801b2d0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b2d4:	4293      	cmp	r3, r2
 801b2d6:	d10b      	bne.n	801b2f0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801b2d8:	4b0f      	ldr	r3, [pc, #60]	; (801b318 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801b2da:	f9b3 1000 	ldrsh.w	r1, [r3]
 801b2de:	4b0f      	ldr	r3, [pc, #60]	; (801b31c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801b2e0:	8081      	strh	r1, [r0, #4]
 801b2e2:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b2e6:	2300      	movs	r3, #0
 801b2e8:	80c2      	strh	r2, [r0, #6]
 801b2ea:	8003      	strh	r3, [r0, #0]
 801b2ec:	8043      	strh	r3, [r0, #2]
 801b2ee:	e7ee      	b.n	801b2ce <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801b2f0:	2300      	movs	r3, #0
 801b2f2:	8003      	strh	r3, [r0, #0]
 801b2f4:	8043      	strh	r3, [r0, #2]
 801b2f6:	8083      	strh	r3, [r0, #4]
 801b2f8:	e7d8      	b.n	801b2ac <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801b2fa:	bf00      	nop
 801b2fc:	2000bd44 	.word	0x2000bd44
 801b300:	080270c8 	.word	0x080270c8
 801b304:	080291b4 	.word	0x080291b4
 801b308:	080290f0 	.word	0x080290f0
 801b30c:	2000bd3c 	.word	0x2000bd3c
 801b310:	2000bd40 	.word	0x2000bd40
 801b314:	2000bd24 	.word	0x2000bd24
 801b318:	2000bc70 	.word	0x2000bc70
 801b31c:	2000bc72 	.word	0x2000bc72

0801b320 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801b320:	4b18      	ldr	r3, [pc, #96]	; (801b384 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801b322:	681b      	ldr	r3, [r3, #0]
 801b324:	b34b      	cbz	r3, 801b37a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801b326:	4a18      	ldr	r2, [pc, #96]	; (801b388 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801b328:	8800      	ldrh	r0, [r0, #0]
 801b32a:	8812      	ldrh	r2, [r2, #0]
 801b32c:	4290      	cmp	r0, r2
 801b32e:	d211      	bcs.n	801b354 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 801b330:	2214      	movs	r2, #20
 801b332:	fb02 3300 	mla	r3, r2, r0, r3
 801b336:	8a1a      	ldrh	r2, [r3, #16]
 801b338:	8919      	ldrh	r1, [r3, #8]
 801b33a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801b33e:	428a      	cmp	r2, r1
 801b340:	db1d      	blt.n	801b37e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801b342:	8a58      	ldrh	r0, [r3, #18]
 801b344:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801b348:	895b      	ldrh	r3, [r3, #10]
 801b34a:	4298      	cmp	r0, r3
 801b34c:	bfac      	ite	ge
 801b34e:	2000      	movge	r0, #0
 801b350:	2001      	movlt	r0, #1
 801b352:	4770      	bx	lr
 801b354:	4b0d      	ldr	r3, [pc, #52]	; (801b38c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801b356:	881b      	ldrh	r3, [r3, #0]
 801b358:	4413      	add	r3, r2
 801b35a:	4298      	cmp	r0, r3
 801b35c:	da0d      	bge.n	801b37a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801b35e:	4b0c      	ldr	r3, [pc, #48]	; (801b390 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 801b360:	1a80      	subs	r0, r0, r2
 801b362:	220e      	movs	r2, #14
 801b364:	681b      	ldr	r3, [r3, #0]
 801b366:	fb02 3300 	mla	r3, r2, r0, r3
 801b36a:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801b36e:	891a      	ldrh	r2, [r3, #8]
 801b370:	4291      	cmp	r1, r2
 801b372:	db04      	blt.n	801b37e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801b374:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801b378:	e7e6      	b.n	801b348 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 801b37a:	2000      	movs	r0, #0
 801b37c:	4770      	bx	lr
 801b37e:	2001      	movs	r0, #1
 801b380:	4770      	bx	lr
 801b382:	bf00      	nop
 801b384:	2000bd44 	.word	0x2000bd44
 801b388:	2000bd3c 	.word	0x2000bd3c
 801b38c:	2000bd40 	.word	0x2000bd40
 801b390:	2000bd24 	.word	0x2000bd24

0801b394 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801b394:	b508      	push	{r3, lr}
 801b396:	4b12      	ldr	r3, [pc, #72]	; (801b3e0 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801b398:	6819      	ldr	r1, [r3, #0]
 801b39a:	b931      	cbnz	r1, 801b3aa <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801b39c:	4b11      	ldr	r3, [pc, #68]	; (801b3e4 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801b39e:	f240 3132 	movw	r1, #818	; 0x332
 801b3a2:	4a11      	ldr	r2, [pc, #68]	; (801b3e8 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801b3a4:	4811      	ldr	r0, [pc, #68]	; (801b3ec <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801b3a6:	f009 fc3f 	bl	8024c28 <__assert_func>
 801b3aa:	8803      	ldrh	r3, [r0, #0]
 801b3ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b3b0:	4293      	cmp	r3, r2
 801b3b2:	d012      	beq.n	801b3da <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801b3b4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b3b8:	4293      	cmp	r3, r2
 801b3ba:	d103      	bne.n	801b3c4 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801b3bc:	4b0c      	ldr	r3, [pc, #48]	; (801b3f0 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801b3be:	681b      	ldr	r3, [r3, #0]
 801b3c0:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801b3c2:	bd08      	pop	{r3, pc}
 801b3c4:	4a0b      	ldr	r2, [pc, #44]	; (801b3f4 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801b3c6:	6812      	ldr	r2, [r2, #0]
 801b3c8:	b11a      	cbz	r2, 801b3d2 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801b3ca:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801b3ce:	2800      	cmp	r0, #0
 801b3d0:	d1f7      	bne.n	801b3c2 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801b3d2:	2214      	movs	r2, #20
 801b3d4:	4353      	muls	r3, r2
 801b3d6:	58c8      	ldr	r0, [r1, r3]
 801b3d8:	e7f3      	b.n	801b3c2 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801b3da:	2000      	movs	r0, #0
 801b3dc:	e7f1      	b.n	801b3c2 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801b3de:	bf00      	nop
 801b3e0:	2000bd44 	.word	0x2000bd44
 801b3e4:	080270c8 	.word	0x080270c8
 801b3e8:	080291ea 	.word	0x080291ea
 801b3ec:	080290f0 	.word	0x080290f0
 801b3f0:	2000bc7c 	.word	0x2000bc7c
 801b3f4:	2000bd20 	.word	0x2000bd20

0801b3f8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801b3f8:	8802      	ldrh	r2, [r0, #0]
 801b3fa:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801b3fe:	429a      	cmp	r2, r3
 801b400:	d840      	bhi.n	801b484 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801b402:	4b21      	ldr	r3, [pc, #132]	; (801b488 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>)
 801b404:	881b      	ldrh	r3, [r3, #0]
 801b406:	429a      	cmp	r2, r3
 801b408:	d220      	bcs.n	801b44c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x54>
 801b40a:	4b20      	ldr	r3, [pc, #128]	; (801b48c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801b40c:	6819      	ldr	r1, [r3, #0]
 801b40e:	2314      	movs	r3, #20
 801b410:	fb03 1302 	mla	r3, r3, r2, r1
 801b414:	6858      	ldr	r0, [r3, #4]
 801b416:	2800      	cmp	r0, #0
 801b418:	d035      	beq.n	801b486 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801b41a:	491d      	ldr	r1, [pc, #116]	; (801b490 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801b41c:	6809      	ldr	r1, [r1, #0]
 801b41e:	2900      	cmp	r1, #0
 801b420:	d031      	beq.n	801b486 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801b422:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801b426:	b371      	cbz	r1, 801b486 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801b428:	895a      	ldrh	r2, [r3, #10]
 801b42a:	8918      	ldrh	r0, [r3, #8]
 801b42c:	4350      	muls	r0, r2
 801b42e:	7c5a      	ldrb	r2, [r3, #17]
 801b430:	7cdb      	ldrb	r3, [r3, #19]
 801b432:	0952      	lsrs	r2, r2, #5
 801b434:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801b438:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801b43c:	2b0b      	cmp	r3, #11
 801b43e:	bf18      	it	ne
 801b440:	0040      	lslne	r0, r0, #1
 801b442:	3003      	adds	r0, #3
 801b444:	f020 0003 	bic.w	r0, r0, #3
 801b448:	4408      	add	r0, r1
 801b44a:	4770      	bx	lr
 801b44c:	4911      	ldr	r1, [pc, #68]	; (801b494 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801b44e:	8809      	ldrh	r1, [r1, #0]
 801b450:	4419      	add	r1, r3
 801b452:	428a      	cmp	r2, r1
 801b454:	da16      	bge.n	801b484 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801b456:	4910      	ldr	r1, [pc, #64]	; (801b498 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801b458:	1ad3      	subs	r3, r2, r3
 801b45a:	200e      	movs	r0, #14
 801b45c:	6809      	ldr	r1, [r1, #0]
 801b45e:	fb00 1303 	mla	r3, r0, r3, r1
 801b462:	7b19      	ldrb	r1, [r3, #12]
 801b464:	f001 011f 	and.w	r1, r1, #31
 801b468:	290b      	cmp	r1, #11
 801b46a:	d10b      	bne.n	801b484 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801b46c:	8919      	ldrh	r1, [r3, #8]
 801b46e:	8958      	ldrh	r0, [r3, #10]
 801b470:	4b07      	ldr	r3, [pc, #28]	; (801b490 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801b472:	4348      	muls	r0, r1
 801b474:	6819      	ldr	r1, [r3, #0]
 801b476:	3003      	adds	r0, #3
 801b478:	f020 0303 	bic.w	r3, r0, #3
 801b47c:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801b480:	4418      	add	r0, r3
 801b482:	4770      	bx	lr
 801b484:	2000      	movs	r0, #0
 801b486:	4770      	bx	lr
 801b488:	2000bd3c 	.word	0x2000bd3c
 801b48c:	2000bd44 	.word	0x2000bd44
 801b490:	2000bd20 	.word	0x2000bd20
 801b494:	2000bd40 	.word	0x2000bd40
 801b498:	2000bd24 	.word	0x2000bd24

0801b49c <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801b49c:	4b19      	ldr	r3, [pc, #100]	; (801b504 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801b49e:	6819      	ldr	r1, [r3, #0]
 801b4a0:	8803      	ldrh	r3, [r0, #0]
 801b4a2:	b1e9      	cbz	r1, 801b4e0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801b4a4:	4a18      	ldr	r2, [pc, #96]	; (801b508 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801b4a6:	8812      	ldrh	r2, [r2, #0]
 801b4a8:	429a      	cmp	r2, r3
 801b4aa:	d90a      	bls.n	801b4c2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801b4ac:	2214      	movs	r2, #20
 801b4ae:	fb02 1303 	mla	r3, r2, r3, r1
 801b4b2:	7c58      	ldrb	r0, [r3, #17]
 801b4b4:	0942      	lsrs	r2, r0, #5
 801b4b6:	7cd8      	ldrb	r0, [r3, #19]
 801b4b8:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801b4bc:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801b4c0:	4770      	bx	lr
 801b4c2:	4912      	ldr	r1, [pc, #72]	; (801b50c <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 801b4c4:	8809      	ldrh	r1, [r1, #0]
 801b4c6:	4411      	add	r1, r2
 801b4c8:	428b      	cmp	r3, r1
 801b4ca:	da09      	bge.n	801b4e0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801b4cc:	1a9b      	subs	r3, r3, r2
 801b4ce:	4a10      	ldr	r2, [pc, #64]	; (801b510 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 801b4d0:	210e      	movs	r1, #14
 801b4d2:	6812      	ldr	r2, [r2, #0]
 801b4d4:	fb01 2303 	mla	r3, r1, r3, r2
 801b4d8:	7b18      	ldrb	r0, [r3, #12]
 801b4da:	f000 001f 	and.w	r0, r0, #31
 801b4de:	4770      	bx	lr
 801b4e0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b4e4:	4293      	cmp	r3, r2
 801b4e6:	d10a      	bne.n	801b4fe <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 801b4e8:	4b0a      	ldr	r3, [pc, #40]	; (801b514 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 801b4ea:	681b      	ldr	r3, [r3, #0]
 801b4ec:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801b4f0:	b10a      	cbz	r2, 801b4f6 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801b4f2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801b4f4:	b900      	cbnz	r0, 801b4f8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801b4f6:	6898      	ldr	r0, [r3, #8]
 801b4f8:	6803      	ldr	r3, [r0, #0]
 801b4fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b4fc:	4718      	bx	r3
 801b4fe:	2000      	movs	r0, #0
 801b500:	4770      	bx	lr
 801b502:	bf00      	nop
 801b504:	2000bd44 	.word	0x2000bd44
 801b508:	2000bd3c 	.word	0x2000bd3c
 801b50c:	2000bd40 	.word	0x2000bd40
 801b510:	2000bd24 	.word	0x2000bd24
 801b514:	2000bc7c 	.word	0x2000bc7c

0801b518 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801b518:	2018      	movs	r0, #24
 801b51a:	4770      	bx	lr

0801b51c <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801b51c:	2001      	movs	r0, #1
 801b51e:	4770      	bx	lr

0801b520 <_ZNK8touchgfx8LCD24bpp20getColorFrom24BitRGBEhhh>:
 801b520:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801b524:	ea43 4001 	orr.w	r0, r3, r1, lsl #16
 801b528:	4770      	bx	lr

0801b52a <_ZNK8touchgfx8LCD24bpp11getRedColorENS_9colortypeE>:
 801b52a:	f3c1 4007 	ubfx	r0, r1, #16, #8
 801b52e:	4770      	bx	lr

0801b530 <_ZNK8touchgfx8LCD24bpp13getGreenColorENS_9colortypeE>:
 801b530:	f3c1 2007 	ubfx	r0, r1, #8, #8
 801b534:	4770      	bx	lr

0801b536 <_ZNK8touchgfx8LCD24bpp12getBlueColorENS_9colortypeE>:
 801b536:	b2c8      	uxtb	r0, r1
 801b538:	4770      	bx	lr

0801b53a <_ZN8touchgfx8LCD24bpp4initEv>:
 801b53a:	4770      	bx	lr

0801b53c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801b53c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b540:	b085      	sub	sp, #20
 801b542:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801b544:	9203      	str	r2, [sp, #12]
 801b546:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801b54a:	6878      	ldr	r0, [r7, #4]
 801b54c:	9201      	str	r2, [sp, #4]
 801b54e:	9e18      	ldr	r6, [sp, #96]	; 0x60
 801b550:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
 801b554:	f9bd 8058 	ldrsh.w	r8, [sp, #88]	; 0x58
 801b558:	fa1f fc84 	uxth.w	ip, r4
 801b55c:	43e4      	mvns	r4, r4
 801b55e:	9100      	str	r1, [sp, #0]
 801b560:	b2e4      	uxtb	r4, r4
 801b562:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801b566:	fb00 2505 	mla	r5, r0, r5, r2
 801b56a:	683a      	ldr	r2, [r7, #0]
 801b56c:	6877      	ldr	r7, [r6, #4]
 801b56e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b572:	3704      	adds	r7, #4
 801b574:	4415      	add	r5, r2
 801b576:	6832      	ldr	r2, [r6, #0]
 801b578:	9202      	str	r2, [sp, #8]
 801b57a:	9a00      	ldr	r2, [sp, #0]
 801b57c:	2a00      	cmp	r2, #0
 801b57e:	dc03      	bgt.n	801b588 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801b580:	9a03      	ldr	r2, [sp, #12]
 801b582:	2a00      	cmp	r2, #0
 801b584:	f340 8116 	ble.w	801b7b4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801b588:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b58a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b58e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b590:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b594:	2b00      	cmp	r3, #0
 801b596:	dd0f      	ble.n	801b5b8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801b598:	1406      	asrs	r6, r0, #16
 801b59a:	d406      	bmi.n	801b5aa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801b59c:	4546      	cmp	r6, r8
 801b59e:	da04      	bge.n	801b5aa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801b5a0:	1416      	asrs	r6, r2, #16
 801b5a2:	d402      	bmi.n	801b5aa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801b5a4:	9901      	ldr	r1, [sp, #4]
 801b5a6:	428e      	cmp	r6, r1
 801b5a8:	db07      	blt.n	801b5ba <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801b5aa:	9911      	ldr	r1, [sp, #68]	; 0x44
 801b5ac:	3b01      	subs	r3, #1
 801b5ae:	3503      	adds	r5, #3
 801b5b0:	4408      	add	r0, r1
 801b5b2:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b5b4:	440a      	add	r2, r1
 801b5b6:	e7ed      	b.n	801b594 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 801b5b8:	d011      	beq.n	801b5de <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 801b5ba:	1e5e      	subs	r6, r3, #1
 801b5bc:	9911      	ldr	r1, [sp, #68]	; 0x44
 801b5be:	fb01 0e06 	mla	lr, r1, r6, r0
 801b5c2:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801b5c6:	d548      	bpl.n	801b65a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 801b5c8:	4699      	mov	r9, r3
 801b5ca:	462e      	mov	r6, r5
 801b5cc:	f1b9 0f00 	cmp.w	r9, #0
 801b5d0:	f300 809e 	bgt.w	801b710 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>
 801b5d4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b5d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b5dc:	441d      	add	r5, r3
 801b5de:	9b00      	ldr	r3, [sp, #0]
 801b5e0:	2b00      	cmp	r3, #0
 801b5e2:	f340 80e7 	ble.w	801b7b4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801b5e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b5ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b5ec:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b5f0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b5f4:	eef0 6a62 	vmov.f32	s13, s5
 801b5f8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b5fc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b600:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b604:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801b608:	eef0 6a43 	vmov.f32	s13, s6
 801b60c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b610:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801b614:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b618:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b61c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b620:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b624:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b628:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b62c:	ee12 2a90 	vmov	r2, s5
 801b630:	eef0 2a47 	vmov.f32	s5, s14
 801b634:	fb92 f3f3 	sdiv	r3, r2, r3
 801b638:	ee13 2a10 	vmov	r2, s6
 801b63c:	9311      	str	r3, [sp, #68]	; 0x44
 801b63e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b640:	eeb0 3a67 	vmov.f32	s6, s15
 801b644:	fb92 f3f3 	sdiv	r3, r2, r3
 801b648:	9312      	str	r3, [sp, #72]	; 0x48
 801b64a:	9b00      	ldr	r3, [sp, #0]
 801b64c:	9a03      	ldr	r2, [sp, #12]
 801b64e:	3b01      	subs	r3, #1
 801b650:	9300      	str	r3, [sp, #0]
 801b652:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b654:	bf08      	it	eq
 801b656:	4613      	moveq	r3, r2
 801b658:	e78f      	b.n	801b57a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 801b65a:	45c6      	cmp	lr, r8
 801b65c:	dab4      	bge.n	801b5c8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801b65e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b660:	fb01 2606 	mla	r6, r1, r6, r2
 801b664:	1436      	asrs	r6, r6, #16
 801b666:	d4af      	bmi.n	801b5c8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801b668:	9901      	ldr	r1, [sp, #4]
 801b66a:	428e      	cmp	r6, r1
 801b66c:	daac      	bge.n	801b5c8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801b66e:	1cee      	adds	r6, r5, #3
 801b670:	4699      	mov	r9, r3
 801b672:	f1b9 0f00 	cmp.w	r9, #0
 801b676:	f106 0603 	add.w	r6, r6, #3
 801b67a:	ddab      	ble.n	801b5d4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801b67c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801b680:	9902      	ldr	r1, [sp, #8]
 801b682:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801b686:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801b68a:	fb08 1e0e 	mla	lr, r8, lr, r1
 801b68e:	9911      	ldr	r1, [sp, #68]	; 0x44
 801b690:	fb1b fb04 	smulbb	fp, fp, r4
 801b694:	f109 39ff 	add.w	r9, r9, #4294967295
 801b698:	f81e e00a 	ldrb.w	lr, [lr, sl]
 801b69c:	4408      	add	r0, r1
 801b69e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b6a0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801b6a4:	440a      	add	r2, r1
 801b6a6:	eb07 0a0e 	add.w	sl, r7, lr
 801b6aa:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801b6ae:	fb0e be0c 	mla	lr, lr, ip, fp
 801b6b2:	fa1f fe8e 	uxth.w	lr, lr
 801b6b6:	f10e 0b01 	add.w	fp, lr, #1
 801b6ba:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801b6be:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801b6c2:	fb1b fb04 	smulbb	fp, fp, r4
 801b6c6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b6ca:	f806 ec06 	strb.w	lr, [r6, #-6]
 801b6ce:	f89a e001 	ldrb.w	lr, [sl, #1]
 801b6d2:	fb0e be0c 	mla	lr, lr, ip, fp
 801b6d6:	fa1f fe8e 	uxth.w	lr, lr
 801b6da:	f10e 0b01 	add.w	fp, lr, #1
 801b6de:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801b6e2:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b6e6:	f806 ec05 	strb.w	lr, [r6, #-5]
 801b6ea:	f89a e002 	ldrb.w	lr, [sl, #2]
 801b6ee:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801b6f2:	fb1a fa04 	smulbb	sl, sl, r4
 801b6f6:	fb0e ae0c 	mla	lr, lr, ip, sl
 801b6fa:	fa1f fe8e 	uxth.w	lr, lr
 801b6fe:	f10e 0a01 	add.w	sl, lr, #1
 801b702:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801b706:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b70a:	f806 ec04 	strb.w	lr, [r6, #-4]
 801b70e:	e7b0      	b.n	801b672 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801b710:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801b714:	d446      	bmi.n	801b7a4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801b716:	45c2      	cmp	sl, r8
 801b718:	da44      	bge.n	801b7a4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801b71a:	ea5f 4e22 	movs.w	lr, r2, asr #16
 801b71e:	d441      	bmi.n	801b7a4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801b720:	9901      	ldr	r1, [sp, #4]
 801b722:	458e      	cmp	lr, r1
 801b724:	da3e      	bge.n	801b7a4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801b726:	9902      	ldr	r1, [sp, #8]
 801b728:	f896 b000 	ldrb.w	fp, [r6]
 801b72c:	fb08 1e0e 	mla	lr, r8, lr, r1
 801b730:	fb1b fb04 	smulbb	fp, fp, r4
 801b734:	f81e e00a 	ldrb.w	lr, [lr, sl]
 801b738:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801b73c:	eb07 0a0e 	add.w	sl, r7, lr
 801b740:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801b744:	fb0e be0c 	mla	lr, lr, ip, fp
 801b748:	fa1f fe8e 	uxth.w	lr, lr
 801b74c:	f10e 0b01 	add.w	fp, lr, #1
 801b750:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801b754:	f896 b001 	ldrb.w	fp, [r6, #1]
 801b758:	fb1b fb04 	smulbb	fp, fp, r4
 801b75c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b760:	f886 e000 	strb.w	lr, [r6]
 801b764:	f89a e001 	ldrb.w	lr, [sl, #1]
 801b768:	fb0e be0c 	mla	lr, lr, ip, fp
 801b76c:	fa1f fe8e 	uxth.w	lr, lr
 801b770:	f10e 0b01 	add.w	fp, lr, #1
 801b774:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801b778:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b77c:	f886 e001 	strb.w	lr, [r6, #1]
 801b780:	f89a e002 	ldrb.w	lr, [sl, #2]
 801b784:	f896 a002 	ldrb.w	sl, [r6, #2]
 801b788:	fb1a fa04 	smulbb	sl, sl, r4
 801b78c:	fb0e ae0c 	mla	lr, lr, ip, sl
 801b790:	fa1f fe8e 	uxth.w	lr, lr
 801b794:	f10e 0a01 	add.w	sl, lr, #1
 801b798:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801b79c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b7a0:	f886 e002 	strb.w	lr, [r6, #2]
 801b7a4:	9911      	ldr	r1, [sp, #68]	; 0x44
 801b7a6:	3603      	adds	r6, #3
 801b7a8:	f109 39ff 	add.w	r9, r9, #4294967295
 801b7ac:	4408      	add	r0, r1
 801b7ae:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b7b0:	440a      	add	r2, r1
 801b7b2:	e70b      	b.n	801b5cc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 801b7b4:	b005      	add	sp, #20
 801b7b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b7ba <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801b7ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b7be:	b085      	sub	sp, #20
 801b7c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b7c4:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801b7c6:	9203      	str	r2, [sp, #12]
 801b7c8:	6870      	ldr	r0, [r6, #4]
 801b7ca:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801b7cc:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801b7d0:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801b7d4:	9101      	str	r1, [sp, #4]
 801b7d6:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801b7da:	e9dd c711 	ldrd	ip, r7, [sp, #68]	; 0x44
 801b7de:	fb00 2404 	mla	r4, r0, r4, r2
 801b7e2:	6832      	ldr	r2, [r6, #0]
 801b7e4:	686e      	ldr	r6, [r5, #4]
 801b7e6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b7ea:	3604      	adds	r6, #4
 801b7ec:	4414      	add	r4, r2
 801b7ee:	682a      	ldr	r2, [r5, #0]
 801b7f0:	9202      	str	r2, [sp, #8]
 801b7f2:	9a01      	ldr	r2, [sp, #4]
 801b7f4:	2a00      	cmp	r2, #0
 801b7f6:	dc03      	bgt.n	801b800 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46>
 801b7f8:	9a03      	ldr	r2, [sp, #12]
 801b7fa:	2a00      	cmp	r2, #0
 801b7fc:	f340 80b2 	ble.w	801b964 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801b800:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b802:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b806:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b808:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b80c:	2b00      	cmp	r3, #0
 801b80e:	dd0c      	ble.n	801b82a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801b810:	1405      	asrs	r5, r0, #16
 801b812:	d405      	bmi.n	801b820 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801b814:	4575      	cmp	r5, lr
 801b816:	da03      	bge.n	801b820 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801b818:	1415      	asrs	r5, r2, #16
 801b81a:	d401      	bmi.n	801b820 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801b81c:	4545      	cmp	r5, r8
 801b81e:	db05      	blt.n	801b82c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801b820:	4460      	add	r0, ip
 801b822:	443a      	add	r2, r7
 801b824:	3b01      	subs	r3, #1
 801b826:	3403      	adds	r4, #3
 801b828:	e7f0      	b.n	801b80c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52>
 801b82a:	d03d      	beq.n	801b8a8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 801b82c:	1e5d      	subs	r5, r3, #1
 801b82e:	fb0c 0905 	mla	r9, ip, r5, r0
 801b832:	ea5f 4929 	movs.w	r9, r9, asr #16
 801b836:	d42c      	bmi.n	801b892 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801b838:	45f1      	cmp	r9, lr
 801b83a:	da2a      	bge.n	801b892 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801b83c:	fb07 2505 	mla	r5, r7, r5, r2
 801b840:	142d      	asrs	r5, r5, #16
 801b842:	d426      	bmi.n	801b892 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801b844:	4545      	cmp	r5, r8
 801b846:	da24      	bge.n	801b892 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801b848:	1ce5      	adds	r5, r4, #3
 801b84a:	469a      	mov	sl, r3
 801b84c:	f1ba 0f00 	cmp.w	sl, #0
 801b850:	f105 0503 	add.w	r5, r5, #3
 801b854:	dd23      	ble.n	801b89e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801b856:	ea4f 4922 	mov.w	r9, r2, asr #16
 801b85a:	9902      	ldr	r1, [sp, #8]
 801b85c:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801b860:	443a      	add	r2, r7
 801b862:	fb0e 1909 	mla	r9, lr, r9, r1
 801b866:	4460      	add	r0, ip
 801b868:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b86c:	f819 900b 	ldrb.w	r9, [r9, fp]
 801b870:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801b874:	eb06 0b09 	add.w	fp, r6, r9
 801b878:	f816 9009 	ldrb.w	r9, [r6, r9]
 801b87c:	f805 9c06 	strb.w	r9, [r5, #-6]
 801b880:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801b884:	f805 9c05 	strb.w	r9, [r5, #-5]
 801b888:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801b88c:	f805 9c04 	strb.w	r9, [r5, #-4]
 801b890:	e7dc      	b.n	801b84c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801b892:	2500      	movs	r5, #0
 801b894:	eba3 0905 	sub.w	r9, r3, r5
 801b898:	f1b9 0f00 	cmp.w	r9, #0
 801b89c:	dc3c      	bgt.n	801b918 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15e>
 801b89e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b8a2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b8a6:	441c      	add	r4, r3
 801b8a8:	9b01      	ldr	r3, [sp, #4]
 801b8aa:	2b00      	cmp	r3, #0
 801b8ac:	dd5a      	ble.n	801b964 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801b8ae:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b8b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b8b4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b8b8:	eeb0 6a62 	vmov.f32	s12, s5
 801b8bc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b8c0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b8c4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b8c8:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801b8cc:	eeb0 6a43 	vmov.f32	s12, s6
 801b8d0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b8d4:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801b8d8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b8dc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b8e0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b8e4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b8e8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b8ec:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b8f0:	ee12 2a90 	vmov	r2, s5
 801b8f4:	eef0 2a47 	vmov.f32	s5, s14
 801b8f8:	fb92 fcf3 	sdiv	ip, r2, r3
 801b8fc:	ee13 2a10 	vmov	r2, s6
 801b900:	eeb0 3a67 	vmov.f32	s6, s15
 801b904:	fb92 f7f3 	sdiv	r7, r2, r3
 801b908:	9b01      	ldr	r3, [sp, #4]
 801b90a:	9a03      	ldr	r2, [sp, #12]
 801b90c:	3b01      	subs	r3, #1
 801b90e:	9301      	str	r3, [sp, #4]
 801b910:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b912:	bf08      	it	eq
 801b914:	4613      	moveq	r3, r2
 801b916:	e76c      	b.n	801b7f2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38>
 801b918:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801b91c:	d41e      	bmi.n	801b95c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801b91e:	45f2      	cmp	sl, lr
 801b920:	da1c      	bge.n	801b95c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801b922:	ea5f 4922 	movs.w	r9, r2, asr #16
 801b926:	d419      	bmi.n	801b95c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801b928:	45c1      	cmp	r9, r8
 801b92a:	da17      	bge.n	801b95c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801b92c:	9902      	ldr	r1, [sp, #8]
 801b92e:	fb0e 1909 	mla	r9, lr, r9, r1
 801b932:	f819 900a 	ldrb.w	r9, [r9, sl]
 801b936:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801b93a:	f816 b009 	ldrb.w	fp, [r6, r9]
 801b93e:	eb06 0a09 	add.w	sl, r6, r9
 801b942:	eb05 0945 	add.w	r9, r5, r5, lsl #1
 801b946:	f804 b009 	strb.w	fp, [r4, r9]
 801b94a:	44a1      	add	r9, r4
 801b94c:	f89a b001 	ldrb.w	fp, [sl, #1]
 801b950:	f889 b001 	strb.w	fp, [r9, #1]
 801b954:	f89a a002 	ldrb.w	sl, [sl, #2]
 801b958:	f889 a002 	strb.w	sl, [r9, #2]
 801b95c:	4460      	add	r0, ip
 801b95e:	443a      	add	r2, r7
 801b960:	3501      	adds	r5, #1
 801b962:	e797      	b.n	801b894 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 801b964:	b005      	add	sp, #20
 801b966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b96a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801b96a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b96e:	b087      	sub	sp, #28
 801b970:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b974:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801b976:	9204      	str	r2, [sp, #16]
 801b978:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801b97c:	6870      	ldr	r0, [r6, #4]
 801b97e:	9205      	str	r2, [sp, #20]
 801b980:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801b982:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801b986:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801b98a:	9101      	str	r1, [sp, #4]
 801b98c:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801b990:	fb00 2505 	mla	r5, r0, r5, r2
 801b994:	6832      	ldr	r2, [r6, #0]
 801b996:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b99a:	4415      	add	r5, r2
 801b99c:	6822      	ldr	r2, [r4, #0]
 801b99e:	9202      	str	r2, [sp, #8]
 801b9a0:	6862      	ldr	r2, [r4, #4]
 801b9a2:	3204      	adds	r2, #4
 801b9a4:	9203      	str	r2, [sp, #12]
 801b9a6:	9a01      	ldr	r2, [sp, #4]
 801b9a8:	2a00      	cmp	r2, #0
 801b9aa:	dc03      	bgt.n	801b9b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801b9ac:	9a04      	ldr	r2, [sp, #16]
 801b9ae:	2a00      	cmp	r2, #0
 801b9b0:	f340 8124 	ble.w	801bbfc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801b9b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b9b6:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801b9ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b9bc:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b9c0:	2b00      	cmp	r3, #0
 801b9c2:	dd0e      	ble.n	801b9e2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801b9c4:	1422      	asrs	r2, r4, #16
 801b9c6:	d405      	bmi.n	801b9d4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801b9c8:	4572      	cmp	r2, lr
 801b9ca:	da03      	bge.n	801b9d4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801b9cc:	1402      	asrs	r2, r0, #16
 801b9ce:	d401      	bmi.n	801b9d4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801b9d0:	4542      	cmp	r2, r8
 801b9d2:	db07      	blt.n	801b9e4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801b9d4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b9d6:	3b01      	subs	r3, #1
 801b9d8:	3503      	adds	r5, #3
 801b9da:	4414      	add	r4, r2
 801b9dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b9de:	4410      	add	r0, r2
 801b9e0:	e7ee      	b.n	801b9c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801b9e2:	d010      	beq.n	801ba06 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 801b9e4:	1e5a      	subs	r2, r3, #1
 801b9e6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801b9e8:	fb06 4602 	mla	r6, r6, r2, r4
 801b9ec:	1436      	asrs	r6, r6, #16
 801b9ee:	d546      	bpl.n	801ba7e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 801b9f0:	4699      	mov	r9, r3
 801b9f2:	462f      	mov	r7, r5
 801b9f4:	f1b9 0f00 	cmp.w	r9, #0
 801b9f8:	f300 80a5 	bgt.w	801bb46 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801b9fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ba00:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ba04:	441d      	add	r5, r3
 801ba06:	9b01      	ldr	r3, [sp, #4]
 801ba08:	2b00      	cmp	r3, #0
 801ba0a:	f340 80f7 	ble.w	801bbfc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801ba0e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ba12:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ba14:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ba18:	eeb0 6a62 	vmov.f32	s12, s5
 801ba1c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ba20:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ba24:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ba28:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801ba2c:	eeb0 6a43 	vmov.f32	s12, s6
 801ba30:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ba34:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801ba38:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ba3c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ba40:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ba44:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ba48:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ba4c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ba50:	ee12 2a90 	vmov	r2, s5
 801ba54:	eef0 2a47 	vmov.f32	s5, s14
 801ba58:	fb92 f3f3 	sdiv	r3, r2, r3
 801ba5c:	ee13 2a10 	vmov	r2, s6
 801ba60:	9313      	str	r3, [sp, #76]	; 0x4c
 801ba62:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ba64:	eeb0 3a67 	vmov.f32	s6, s15
 801ba68:	fb92 f3f3 	sdiv	r3, r2, r3
 801ba6c:	9314      	str	r3, [sp, #80]	; 0x50
 801ba6e:	9b01      	ldr	r3, [sp, #4]
 801ba70:	9a04      	ldr	r2, [sp, #16]
 801ba72:	3b01      	subs	r3, #1
 801ba74:	9301      	str	r3, [sp, #4]
 801ba76:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ba78:	bf08      	it	eq
 801ba7a:	4613      	moveq	r3, r2
 801ba7c:	e793      	b.n	801b9a6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801ba7e:	4576      	cmp	r6, lr
 801ba80:	dab6      	bge.n	801b9f0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801ba82:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801ba84:	fb06 0202 	mla	r2, r6, r2, r0
 801ba88:	1412      	asrs	r2, r2, #16
 801ba8a:	d4b1      	bmi.n	801b9f0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801ba8c:	4542      	cmp	r2, r8
 801ba8e:	daaf      	bge.n	801b9f0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801ba90:	1cef      	adds	r7, r5, #3
 801ba92:	4699      	mov	r9, r3
 801ba94:	f1b9 0f00 	cmp.w	r9, #0
 801ba98:	ddb0      	ble.n	801b9fc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801ba9a:	9902      	ldr	r1, [sp, #8]
 801ba9c:	1402      	asrs	r2, r0, #16
 801ba9e:	1426      	asrs	r6, r4, #16
 801baa0:	fb0e 1202 	mla	r2, lr, r2, r1
 801baa4:	9903      	ldr	r1, [sp, #12]
 801baa6:	5d92      	ldrb	r2, [r2, r6]
 801baa8:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801baac:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801bab0:	d041      	beq.n	801bb36 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801bab2:	9a05      	ldr	r2, [sp, #20]
 801bab4:	fa5f fb86 	uxtb.w	fp, r6
 801bab8:	fb02 fc0c 	mul.w	ip, r2, ip
 801babc:	f10c 0201 	add.w	r2, ip, #1
 801bac0:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801bac4:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801bac8:	1212      	asrs	r2, r2, #8
 801baca:	fa1f fa82 	uxth.w	sl, r2
 801bace:	43d2      	mvns	r2, r2
 801bad0:	fb1b fb0a 	smulbb	fp, fp, sl
 801bad4:	b2d2      	uxtb	r2, r2
 801bad6:	fb0c bc02 	mla	ip, ip, r2, fp
 801bada:	fa1f fc8c 	uxth.w	ip, ip
 801bade:	f10c 0b01 	add.w	fp, ip, #1
 801bae2:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801bae6:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801baea:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801baee:	fb1b fb0a 	smulbb	fp, fp, sl
 801baf2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801baf6:	fb16 fa0a 	smulbb	sl, r6, sl
 801bafa:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801bafe:	f807 cc03 	strb.w	ip, [r7, #-3]
 801bb02:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801bb06:	fb06 aa02 	mla	sl, r6, r2, sl
 801bb0a:	fb0c bc02 	mla	ip, ip, r2, fp
 801bb0e:	fa1f fa8a 	uxth.w	sl, sl
 801bb12:	fa1f fc8c 	uxth.w	ip, ip
 801bb16:	f10a 0601 	add.w	r6, sl, #1
 801bb1a:	f10c 0b01 	add.w	fp, ip, #1
 801bb1e:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801bb22:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801bb26:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801bb2a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801bb2e:	f807 ac01 	strb.w	sl, [r7, #-1]
 801bb32:	f807 cc02 	strb.w	ip, [r7, #-2]
 801bb36:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bb38:	3703      	adds	r7, #3
 801bb3a:	f109 39ff 	add.w	r9, r9, #4294967295
 801bb3e:	4414      	add	r4, r2
 801bb40:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bb42:	4410      	add	r0, r2
 801bb44:	e7a6      	b.n	801ba94 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801bb46:	1426      	asrs	r6, r4, #16
 801bb48:	d450      	bmi.n	801bbec <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801bb4a:	4576      	cmp	r6, lr
 801bb4c:	da4e      	bge.n	801bbec <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801bb4e:	1402      	asrs	r2, r0, #16
 801bb50:	d44c      	bmi.n	801bbec <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801bb52:	4542      	cmp	r2, r8
 801bb54:	da4a      	bge.n	801bbec <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801bb56:	9902      	ldr	r1, [sp, #8]
 801bb58:	fb0e 1202 	mla	r2, lr, r2, r1
 801bb5c:	9903      	ldr	r1, [sp, #12]
 801bb5e:	5d92      	ldrb	r2, [r2, r6]
 801bb60:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801bb64:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801bb68:	d040      	beq.n	801bbec <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801bb6a:	9a05      	ldr	r2, [sp, #20]
 801bb6c:	fa5f fb86 	uxtb.w	fp, r6
 801bb70:	fb02 fc0c 	mul.w	ip, r2, ip
 801bb74:	f10c 0201 	add.w	r2, ip, #1
 801bb78:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801bb7c:	f897 c000 	ldrb.w	ip, [r7]
 801bb80:	1212      	asrs	r2, r2, #8
 801bb82:	fa1f fa82 	uxth.w	sl, r2
 801bb86:	43d2      	mvns	r2, r2
 801bb88:	fb1b fb0a 	smulbb	fp, fp, sl
 801bb8c:	b2d2      	uxtb	r2, r2
 801bb8e:	fb0c bc02 	mla	ip, ip, r2, fp
 801bb92:	fa1f fc8c 	uxth.w	ip, ip
 801bb96:	f10c 0b01 	add.w	fp, ip, #1
 801bb9a:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801bb9e:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801bba2:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801bba6:	fb1b fb0a 	smulbb	fp, fp, sl
 801bbaa:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801bbae:	fb16 fa0a 	smulbb	sl, r6, sl
 801bbb2:	78be      	ldrb	r6, [r7, #2]
 801bbb4:	f887 c000 	strb.w	ip, [r7]
 801bbb8:	f897 c001 	ldrb.w	ip, [r7, #1]
 801bbbc:	fb06 aa02 	mla	sl, r6, r2, sl
 801bbc0:	fb0c bc02 	mla	ip, ip, r2, fp
 801bbc4:	fa1f fa8a 	uxth.w	sl, sl
 801bbc8:	fa1f fc8c 	uxth.w	ip, ip
 801bbcc:	f10a 0601 	add.w	r6, sl, #1
 801bbd0:	f10c 0b01 	add.w	fp, ip, #1
 801bbd4:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801bbd8:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801bbdc:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801bbe0:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801bbe4:	f887 a002 	strb.w	sl, [r7, #2]
 801bbe8:	f887 c001 	strb.w	ip, [r7, #1]
 801bbec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bbee:	3703      	adds	r7, #3
 801bbf0:	f109 39ff 	add.w	r9, r9, #4294967295
 801bbf4:	4414      	add	r4, r2
 801bbf6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bbf8:	4410      	add	r0, r2
 801bbfa:	e6fb      	b.n	801b9f4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801bbfc:	b007      	add	sp, #28
 801bbfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bc02 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801bc02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc06:	b085      	sub	sp, #20
 801bc08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bc0c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801bc0e:	9203      	str	r2, [sp, #12]
 801bc10:	6870      	ldr	r0, [r6, #4]
 801bc12:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801bc14:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801bc18:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801bc1c:	9100      	str	r1, [sp, #0]
 801bc1e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801bc22:	fb00 2404 	mla	r4, r0, r4, r2
 801bc26:	6832      	ldr	r2, [r6, #0]
 801bc28:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801bc2c:	4414      	add	r4, r2
 801bc2e:	682a      	ldr	r2, [r5, #0]
 801bc30:	9201      	str	r2, [sp, #4]
 801bc32:	686a      	ldr	r2, [r5, #4]
 801bc34:	3204      	adds	r2, #4
 801bc36:	9202      	str	r2, [sp, #8]
 801bc38:	9a00      	ldr	r2, [sp, #0]
 801bc3a:	2a00      	cmp	r2, #0
 801bc3c:	dc03      	bgt.n	801bc46 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 801bc3e:	9a03      	ldr	r2, [sp, #12]
 801bc40:	2a00      	cmp	r2, #0
 801bc42:	f340 8131 	ble.w	801bea8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801bc46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bc48:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801bc4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801bc4e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801bc52:	2b00      	cmp	r3, #0
 801bc54:	dd0e      	ble.n	801bc74 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801bc56:	1405      	asrs	r5, r0, #16
 801bc58:	d405      	bmi.n	801bc66 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801bc5a:	4575      	cmp	r5, lr
 801bc5c:	da03      	bge.n	801bc66 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801bc5e:	1415      	asrs	r5, r2, #16
 801bc60:	d401      	bmi.n	801bc66 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801bc62:	4545      	cmp	r5, r8
 801bc64:	db07      	blt.n	801bc76 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801bc66:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801bc68:	3b01      	subs	r3, #1
 801bc6a:	3403      	adds	r4, #3
 801bc6c:	4428      	add	r0, r5
 801bc6e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801bc70:	442a      	add	r2, r5
 801bc72:	e7ee      	b.n	801bc52 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 801bc74:	d06f      	beq.n	801bd56 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801bc76:	1e5d      	subs	r5, r3, #1
 801bc78:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801bc7a:	fb06 0605 	mla	r6, r6, r5, r0
 801bc7e:	1436      	asrs	r6, r6, #16
 801bc80:	d460      	bmi.n	801bd44 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801bc82:	4576      	cmp	r6, lr
 801bc84:	da5e      	bge.n	801bd44 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801bc86:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801bc88:	fb06 2505 	mla	r5, r6, r5, r2
 801bc8c:	142d      	asrs	r5, r5, #16
 801bc8e:	d459      	bmi.n	801bd44 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801bc90:	4545      	cmp	r5, r8
 801bc92:	da57      	bge.n	801bd44 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801bc94:	1ce5      	adds	r5, r4, #3
 801bc96:	469a      	mov	sl, r3
 801bc98:	f1ba 0f00 	cmp.w	sl, #0
 801bc9c:	dd56      	ble.n	801bd4c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14a>
 801bc9e:	9901      	ldr	r1, [sp, #4]
 801bca0:	1416      	asrs	r6, r2, #16
 801bca2:	1407      	asrs	r7, r0, #16
 801bca4:	fb0e 1606 	mla	r6, lr, r6, r1
 801bca8:	9902      	ldr	r1, [sp, #8]
 801bcaa:	5df6      	ldrb	r6, [r6, r7]
 801bcac:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 801bcb0:	0e37      	lsrs	r7, r6, #24
 801bcb2:	2fff      	cmp	r7, #255	; 0xff
 801bcb4:	f000 80ef 	beq.w	801be96 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 801bcb8:	fa5f fc87 	uxtb.w	ip, r7
 801bcbc:	b3d7      	cbz	r7, 801bd34 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801bcbe:	fa1f f78c 	uxth.w	r7, ip
 801bcc2:	ea6f 0c0c 	mvn.w	ip, ip
 801bcc6:	fa5f fb86 	uxtb.w	fp, r6
 801bcca:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801bcce:	fa5f fc8c 	uxtb.w	ip, ip
 801bcd2:	fb1b fb07 	smulbb	fp, fp, r7
 801bcd6:	fb09 b90c 	mla	r9, r9, ip, fp
 801bcda:	fa1f f989 	uxth.w	r9, r9
 801bcde:	f109 0b01 	add.w	fp, r9, #1
 801bce2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801bce6:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801bcea:	fb1b fb0c 	smulbb	fp, fp, ip
 801bcee:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bcf2:	f805 9c03 	strb.w	r9, [r5, #-3]
 801bcf6:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801bcfa:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801bcfe:	fb09 b907 	mla	r9, r9, r7, fp
 801bd02:	fa1f f989 	uxth.w	r9, r9
 801bd06:	f109 0b01 	add.w	fp, r9, #1
 801bd0a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801bd0e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bd12:	f805 9c02 	strb.w	r9, [r5, #-2]
 801bd16:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801bd1a:	fb19 fc0c 	smulbb	ip, r9, ip
 801bd1e:	fb06 c607 	mla	r6, r6, r7, ip
 801bd22:	b2b6      	uxth	r6, r6
 801bd24:	f106 0c01 	add.w	ip, r6, #1
 801bd28:	eb0c 2c16 	add.w	ip, ip, r6, lsr #8
 801bd2c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801bd30:	f805 cc01 	strb.w	ip, [r5, #-1]
 801bd34:	9911      	ldr	r1, [sp, #68]	; 0x44
 801bd36:	3503      	adds	r5, #3
 801bd38:	f10a 3aff 	add.w	sl, sl, #4294967295
 801bd3c:	4408      	add	r0, r1
 801bd3e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801bd40:	440a      	add	r2, r1
 801bd42:	e7a9      	b.n	801bc98 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801bd44:	2600      	movs	r6, #0
 801bd46:	1b9d      	subs	r5, r3, r6
 801bd48:	2d00      	cmp	r5, #0
 801bd4a:	dc40      	bgt.n	801bdce <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801bd4c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bd50:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bd54:	441c      	add	r4, r3
 801bd56:	9b00      	ldr	r3, [sp, #0]
 801bd58:	2b00      	cmp	r3, #0
 801bd5a:	f340 80a5 	ble.w	801bea8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801bd5e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bd62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bd64:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bd68:	eeb0 6a62 	vmov.f32	s12, s5
 801bd6c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801bd70:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bd74:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bd78:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801bd7c:	eeb0 6a43 	vmov.f32	s12, s6
 801bd80:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bd84:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801bd88:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bd8c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bd90:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bd94:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bd98:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bd9c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bda0:	ee12 2a90 	vmov	r2, s5
 801bda4:	eef0 2a47 	vmov.f32	s5, s14
 801bda8:	fb92 f3f3 	sdiv	r3, r2, r3
 801bdac:	ee13 2a10 	vmov	r2, s6
 801bdb0:	9311      	str	r3, [sp, #68]	; 0x44
 801bdb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bdb4:	eeb0 3a67 	vmov.f32	s6, s15
 801bdb8:	fb92 f3f3 	sdiv	r3, r2, r3
 801bdbc:	9312      	str	r3, [sp, #72]	; 0x48
 801bdbe:	9b00      	ldr	r3, [sp, #0]
 801bdc0:	9a03      	ldr	r2, [sp, #12]
 801bdc2:	3b01      	subs	r3, #1
 801bdc4:	9300      	str	r3, [sp, #0]
 801bdc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bdc8:	bf08      	it	eq
 801bdca:	4613      	moveq	r3, r2
 801bdcc:	e734      	b.n	801bc38 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801bdce:	1407      	asrs	r7, r0, #16
 801bdd0:	d450      	bmi.n	801be74 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801bdd2:	4577      	cmp	r7, lr
 801bdd4:	da4e      	bge.n	801be74 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801bdd6:	1415      	asrs	r5, r2, #16
 801bdd8:	d44c      	bmi.n	801be74 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801bdda:	4545      	cmp	r5, r8
 801bddc:	da4a      	bge.n	801be74 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801bdde:	9901      	ldr	r1, [sp, #4]
 801bde0:	fb0e 1505 	mla	r5, lr, r5, r1
 801bde4:	9902      	ldr	r1, [sp, #8]
 801bde6:	5ded      	ldrb	r5, [r5, r7]
 801bde8:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 801bdec:	0e2f      	lsrs	r7, r5, #24
 801bdee:	2fff      	cmp	r7, #255	; 0xff
 801bdf0:	d046      	beq.n	801be80 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27e>
 801bdf2:	fa5f f987 	uxtb.w	r9, r7
 801bdf6:	b3ef      	cbz	r7, 801be74 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801bdf8:	fa1f fc89 	uxth.w	ip, r9
 801bdfc:	ea6f 0909 	mvn.w	r9, r9
 801be00:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801be04:	fa5f fb85 	uxtb.w	fp, r5
 801be08:	f814 a007 	ldrb.w	sl, [r4, r7]
 801be0c:	fa5f f989 	uxtb.w	r9, r9
 801be10:	fb1b fb0c 	smulbb	fp, fp, ip
 801be14:	fb0a ba09 	mla	sl, sl, r9, fp
 801be18:	fa1f fa8a 	uxth.w	sl, sl
 801be1c:	f10a 0b01 	add.w	fp, sl, #1
 801be20:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801be24:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801be28:	f804 a007 	strb.w	sl, [r4, r7]
 801be2c:	4427      	add	r7, r4
 801be2e:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801be32:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801be36:	f897 b001 	ldrb.w	fp, [r7, #1]
 801be3a:	fb1b fb09 	smulbb	fp, fp, r9
 801be3e:	fb0a ba0c 	mla	sl, sl, ip, fp
 801be42:	fa1f fa8a 	uxth.w	sl, sl
 801be46:	f10a 0b01 	add.w	fp, sl, #1
 801be4a:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801be4e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801be52:	f887 a001 	strb.w	sl, [r7, #1]
 801be56:	f897 a002 	ldrb.w	sl, [r7, #2]
 801be5a:	fb1a f909 	smulbb	r9, sl, r9
 801be5e:	fb05 950c 	mla	r5, r5, ip, r9
 801be62:	b2ad      	uxth	r5, r5
 801be64:	f105 0901 	add.w	r9, r5, #1
 801be68:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801be6c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801be70:	f887 9002 	strb.w	r9, [r7, #2]
 801be74:	9911      	ldr	r1, [sp, #68]	; 0x44
 801be76:	3601      	adds	r6, #1
 801be78:	4408      	add	r0, r1
 801be7a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801be7c:	440a      	add	r2, r1
 801be7e:	e762      	b.n	801bd46 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801be80:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801be84:	ea4f 2c15 	mov.w	ip, r5, lsr #8
 801be88:	55e5      	strb	r5, [r4, r7]
 801be8a:	4427      	add	r7, r4
 801be8c:	0c2d      	lsrs	r5, r5, #16
 801be8e:	f887 c001 	strb.w	ip, [r7, #1]
 801be92:	70bd      	strb	r5, [r7, #2]
 801be94:	e7ee      	b.n	801be74 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801be96:	0a37      	lsrs	r7, r6, #8
 801be98:	f805 6c03 	strb.w	r6, [r5, #-3]
 801be9c:	0c36      	lsrs	r6, r6, #16
 801be9e:	f805 7c02 	strb.w	r7, [r5, #-2]
 801bea2:	f805 6c01 	strb.w	r6, [r5, #-1]
 801bea6:	e745      	b.n	801bd34 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801bea8:	b005      	add	sp, #20
 801beaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801beae <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801beae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801beb2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801beb4:	9201      	str	r2, [sp, #4]
 801beb6:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 801beba:	6870      	ldr	r0, [r6, #4]
 801bebc:	9200      	str	r2, [sp, #0]
 801bebe:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801bec2:	f9bd e050 	ldrsh.w	lr, [sp, #80]	; 0x50
 801bec6:	fa1f fc85 	uxth.w	ip, r5
 801beca:	43ed      	mvns	r5, r5
 801becc:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801bed0:	b2ed      	uxtb	r5, r5
 801bed2:	fb00 2404 	mla	r4, r0, r4, r2
 801bed6:	6832      	ldr	r2, [r6, #0]
 801bed8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801bedc:	4414      	add	r4, r2
 801bede:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801bee0:	f8d2 8000 	ldr.w	r8, [r2]
 801bee4:	2900      	cmp	r1, #0
 801bee6:	dc03      	bgt.n	801bef0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42>
 801bee8:	9a01      	ldr	r2, [sp, #4]
 801beea:	2a00      	cmp	r2, #0
 801beec:	f340 8104 	ble.w	801c0f8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801bef0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bef2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801bef6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bef8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801befc:	2b00      	cmp	r3, #0
 801befe:	dd0f      	ble.n	801bf20 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801bf00:	1406      	asrs	r6, r0, #16
 801bf02:	d406      	bmi.n	801bf12 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801bf04:	4576      	cmp	r6, lr
 801bf06:	da04      	bge.n	801bf12 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801bf08:	1416      	asrs	r6, r2, #16
 801bf0a:	d402      	bmi.n	801bf12 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801bf0c:	9f00      	ldr	r7, [sp, #0]
 801bf0e:	42be      	cmp	r6, r7
 801bf10:	db07      	blt.n	801bf22 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801bf12:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801bf14:	3b01      	subs	r3, #1
 801bf16:	3403      	adds	r4, #3
 801bf18:	4430      	add	r0, r6
 801bf1a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801bf1c:	4432      	add	r2, r6
 801bf1e:	e7ed      	b.n	801befc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801bf20:	d05f      	beq.n	801bfe2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x134>
 801bf22:	1e5e      	subs	r6, r3, #1
 801bf24:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801bf26:	fb07 0706 	mla	r7, r7, r6, r0
 801bf2a:	143f      	asrs	r7, r7, #16
 801bf2c:	d450      	bmi.n	801bfd0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801bf2e:	4577      	cmp	r7, lr
 801bf30:	da4e      	bge.n	801bfd0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801bf32:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801bf34:	fb07 2606 	mla	r6, r7, r6, r2
 801bf38:	1436      	asrs	r6, r6, #16
 801bf3a:	d449      	bmi.n	801bfd0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801bf3c:	9f00      	ldr	r7, [sp, #0]
 801bf3e:	42be      	cmp	r6, r7
 801bf40:	da46      	bge.n	801bfd0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801bf42:	1ce6      	adds	r6, r4, #3
 801bf44:	4699      	mov	r9, r3
 801bf46:	f1b9 0f00 	cmp.w	r9, #0
 801bf4a:	f106 0603 	add.w	r6, r6, #3
 801bf4e:	dd43      	ble.n	801bfd8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801bf50:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801bf54:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801bf58:	1417      	asrs	r7, r2, #16
 801bf5a:	f109 39ff 	add.w	r9, r9, #4294967295
 801bf5e:	fb1b fb05 	smulbb	fp, fp, r5
 801bf62:	fb0e a707 	mla	r7, lr, r7, sl
 801bf66:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801bf6a:	eb08 0a07 	add.w	sl, r8, r7
 801bf6e:	f818 7007 	ldrb.w	r7, [r8, r7]
 801bf72:	fb07 b70c 	mla	r7, r7, ip, fp
 801bf76:	b2bf      	uxth	r7, r7
 801bf78:	f107 0b01 	add.w	fp, r7, #1
 801bf7c:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801bf80:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801bf84:	fb1b fb05 	smulbb	fp, fp, r5
 801bf88:	123f      	asrs	r7, r7, #8
 801bf8a:	f806 7c06 	strb.w	r7, [r6, #-6]
 801bf8e:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801bf92:	fb07 b70c 	mla	r7, r7, ip, fp
 801bf96:	b2bf      	uxth	r7, r7
 801bf98:	f107 0b01 	add.w	fp, r7, #1
 801bf9c:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801bfa0:	123f      	asrs	r7, r7, #8
 801bfa2:	f806 7c05 	strb.w	r7, [r6, #-5]
 801bfa6:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801bfaa:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801bfae:	fb1a fa05 	smulbb	sl, sl, r5
 801bfb2:	fb07 a70c 	mla	r7, r7, ip, sl
 801bfb6:	b2bf      	uxth	r7, r7
 801bfb8:	f107 0a01 	add.w	sl, r7, #1
 801bfbc:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801bfc0:	123f      	asrs	r7, r7, #8
 801bfc2:	f806 7c04 	strb.w	r7, [r6, #-4]
 801bfc6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801bfc8:	4438      	add	r0, r7
 801bfca:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801bfcc:	443a      	add	r2, r7
 801bfce:	e7ba      	b.n	801bf46 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801bfd0:	2700      	movs	r7, #0
 801bfd2:	1bde      	subs	r6, r3, r7
 801bfd4:	2e00      	cmp	r6, #0
 801bfd6:	dc3f      	bgt.n	801c058 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801bfd8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bfdc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bfe0:	441c      	add	r4, r3
 801bfe2:	2900      	cmp	r1, #0
 801bfe4:	f340 8088 	ble.w	801c0f8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801bfe8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801bfec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bfee:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bff2:	3901      	subs	r1, #1
 801bff4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bff8:	eef0 6a62 	vmov.f32	s13, s5
 801bffc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c000:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c004:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c008:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801c00c:	eef0 6a43 	vmov.f32	s13, s6
 801c010:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c014:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 801c018:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c01c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c020:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c024:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c028:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c02c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c030:	ee12 2a90 	vmov	r2, s5
 801c034:	eef0 2a47 	vmov.f32	s5, s14
 801c038:	fb92 f3f3 	sdiv	r3, r2, r3
 801c03c:	ee13 2a10 	vmov	r2, s6
 801c040:	930f      	str	r3, [sp, #60]	; 0x3c
 801c042:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c044:	eeb0 3a67 	vmov.f32	s6, s15
 801c048:	fb92 f3f3 	sdiv	r3, r2, r3
 801c04c:	9a01      	ldr	r2, [sp, #4]
 801c04e:	9310      	str	r3, [sp, #64]	; 0x40
 801c050:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c052:	bf08      	it	eq
 801c054:	4613      	moveq	r3, r2
 801c056:	e745      	b.n	801bee4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801c058:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801c05c:	d446      	bmi.n	801c0ec <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801c05e:	45f2      	cmp	sl, lr
 801c060:	da44      	bge.n	801c0ec <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801c062:	ea5f 4922 	movs.w	r9, r2, asr #16
 801c066:	d441      	bmi.n	801c0ec <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801c068:	9e00      	ldr	r6, [sp, #0]
 801c06a:	45b1      	cmp	r9, r6
 801c06c:	da3e      	bge.n	801c0ec <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801c06e:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801c072:	fb0e a909 	mla	r9, lr, r9, sl
 801c076:	f814 b006 	ldrb.w	fp, [r4, r6]
 801c07a:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801c07e:	fb1b fb05 	smulbb	fp, fp, r5
 801c082:	eb08 0a09 	add.w	sl, r8, r9
 801c086:	f818 9009 	ldrb.w	r9, [r8, r9]
 801c08a:	fb09 b90c 	mla	r9, r9, ip, fp
 801c08e:	fa1f f989 	uxth.w	r9, r9
 801c092:	f109 0b01 	add.w	fp, r9, #1
 801c096:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c09a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c09e:	f804 9006 	strb.w	r9, [r4, r6]
 801c0a2:	4426      	add	r6, r4
 801c0a4:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801c0a8:	f896 b001 	ldrb.w	fp, [r6, #1]
 801c0ac:	fb1b fb05 	smulbb	fp, fp, r5
 801c0b0:	fb09 b90c 	mla	r9, r9, ip, fp
 801c0b4:	fa1f f989 	uxth.w	r9, r9
 801c0b8:	f109 0b01 	add.w	fp, r9, #1
 801c0bc:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c0c0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c0c4:	f886 9001 	strb.w	r9, [r6, #1]
 801c0c8:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801c0cc:	f896 a002 	ldrb.w	sl, [r6, #2]
 801c0d0:	fb1a fa05 	smulbb	sl, sl, r5
 801c0d4:	fb09 a90c 	mla	r9, r9, ip, sl
 801c0d8:	fa1f f989 	uxth.w	r9, r9
 801c0dc:	f109 0a01 	add.w	sl, r9, #1
 801c0e0:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801c0e4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c0e8:	f886 9002 	strb.w	r9, [r6, #2]
 801c0ec:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801c0ee:	3701      	adds	r7, #1
 801c0f0:	4430      	add	r0, r6
 801c0f2:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801c0f4:	4432      	add	r2, r6
 801c0f6:	e76c      	b.n	801bfd2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x124>
 801c0f8:	b003      	add	sp, #12
 801c0fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c0fe <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c0fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c102:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801c104:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c108:	9201      	str	r2, [sp, #4]
 801c10a:	6868      	ldr	r0, [r5, #4]
 801c10c:	f9bd c050 	ldrsh.w	ip, [sp, #80]	; 0x50
 801c110:	f9bd e054 	ldrsh.w	lr, [sp, #84]	; 0x54
 801c114:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801c118:	e9dd 760f 	ldrd	r7, r6, [sp, #60]	; 0x3c
 801c11c:	fb00 2404 	mla	r4, r0, r4, r2
 801c120:	682a      	ldr	r2, [r5, #0]
 801c122:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c126:	4414      	add	r4, r2
 801c128:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801c12a:	f8d2 9000 	ldr.w	r9, [r2]
 801c12e:	2900      	cmp	r1, #0
 801c130:	dc03      	bgt.n	801c13a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801c132:	9a01      	ldr	r2, [sp, #4]
 801c134:	2a00      	cmp	r2, #0
 801c136:	f340 80a8 	ble.w	801c28a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801c13a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c13c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c140:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c142:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c146:	2b00      	cmp	r3, #0
 801c148:	dd0c      	ble.n	801c164 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801c14a:	1405      	asrs	r5, r0, #16
 801c14c:	d405      	bmi.n	801c15a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801c14e:	4565      	cmp	r5, ip
 801c150:	da03      	bge.n	801c15a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801c152:	1415      	asrs	r5, r2, #16
 801c154:	d401      	bmi.n	801c15a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801c156:	4575      	cmp	r5, lr
 801c158:	db05      	blt.n	801c166 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801c15a:	4438      	add	r0, r7
 801c15c:	4432      	add	r2, r6
 801c15e:	3b01      	subs	r3, #1
 801c160:	3403      	adds	r4, #3
 801c162:	e7f0      	b.n	801c146 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801c164:	d03a      	beq.n	801c1dc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801c166:	1e5d      	subs	r5, r3, #1
 801c168:	fb07 0805 	mla	r8, r7, r5, r0
 801c16c:	ea5f 4828 	movs.w	r8, r8, asr #16
 801c170:	d429      	bmi.n	801c1c6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801c172:	45e0      	cmp	r8, ip
 801c174:	da27      	bge.n	801c1c6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801c176:	fb06 2505 	mla	r5, r6, r5, r2
 801c17a:	142d      	asrs	r5, r5, #16
 801c17c:	d423      	bmi.n	801c1c6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801c17e:	4575      	cmp	r5, lr
 801c180:	da21      	bge.n	801c1c6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801c182:	f104 0803 	add.w	r8, r4, #3
 801c186:	469a      	mov	sl, r3
 801c188:	f1ba 0f00 	cmp.w	sl, #0
 801c18c:	f108 0803 	add.w	r8, r8, #3
 801c190:	dd1f      	ble.n	801c1d2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 801c192:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801c196:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c19a:	1415      	asrs	r5, r2, #16
 801c19c:	4438      	add	r0, r7
 801c19e:	4432      	add	r2, r6
 801c1a0:	fb0c b505 	mla	r5, ip, r5, fp
 801c1a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c1a8:	eb09 0b05 	add.w	fp, r9, r5
 801c1ac:	f819 5005 	ldrb.w	r5, [r9, r5]
 801c1b0:	f808 5c06 	strb.w	r5, [r8, #-6]
 801c1b4:	f89b 5001 	ldrb.w	r5, [fp, #1]
 801c1b8:	f808 5c05 	strb.w	r5, [r8, #-5]
 801c1bc:	f89b 5002 	ldrb.w	r5, [fp, #2]
 801c1c0:	f808 5c04 	strb.w	r5, [r8, #-4]
 801c1c4:	e7e0      	b.n	801c188 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801c1c6:	2500      	movs	r5, #0
 801c1c8:	eba3 0805 	sub.w	r8, r3, r5
 801c1cc:	f1b8 0f00 	cmp.w	r8, #0
 801c1d0:	dc38      	bgt.n	801c244 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x146>
 801c1d2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c1d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c1da:	441c      	add	r4, r3
 801c1dc:	2900      	cmp	r1, #0
 801c1de:	dd54      	ble.n	801c28a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801c1e0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c1e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c1e6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c1ea:	3901      	subs	r1, #1
 801c1ec:	eeb0 6a62 	vmov.f32	s12, s5
 801c1f0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c1f4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c1f8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c1fc:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801c200:	eeb0 6a43 	vmov.f32	s12, s6
 801c204:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c208:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801c20c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c210:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c214:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c218:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c21c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c220:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c224:	ee12 2a90 	vmov	r2, s5
 801c228:	eef0 2a47 	vmov.f32	s5, s14
 801c22c:	fb92 f7f3 	sdiv	r7, r2, r3
 801c230:	ee13 2a10 	vmov	r2, s6
 801c234:	eeb0 3a67 	vmov.f32	s6, s15
 801c238:	fb92 f6f3 	sdiv	r6, r2, r3
 801c23c:	9a01      	ldr	r2, [sp, #4]
 801c23e:	bf08      	it	eq
 801c240:	4613      	moveq	r3, r2
 801c242:	e774      	b.n	801c12e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801c244:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801c248:	d41b      	bmi.n	801c282 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801c24a:	45e2      	cmp	sl, ip
 801c24c:	da19      	bge.n	801c282 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801c24e:	ea5f 4822 	movs.w	r8, r2, asr #16
 801c252:	d416      	bmi.n	801c282 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801c254:	45f0      	cmp	r8, lr
 801c256:	da14      	bge.n	801c282 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801c258:	fb0c a808 	mla	r8, ip, r8, sl
 801c25c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801c260:	f819 b008 	ldrb.w	fp, [r9, r8]
 801c264:	eb09 0a08 	add.w	sl, r9, r8
 801c268:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 801c26c:	f804 b008 	strb.w	fp, [r4, r8]
 801c270:	44a0      	add	r8, r4
 801c272:	f89a b001 	ldrb.w	fp, [sl, #1]
 801c276:	f888 b001 	strb.w	fp, [r8, #1]
 801c27a:	f89a a002 	ldrb.w	sl, [sl, #2]
 801c27e:	f888 a002 	strb.w	sl, [r8, #2]
 801c282:	4438      	add	r0, r7
 801c284:	4432      	add	r2, r6
 801c286:	3501      	adds	r5, #1
 801c288:	e79e      	b.n	801c1c8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 801c28a:	b003      	add	sp, #12
 801c28c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c290 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c294:	b085      	sub	sp, #20
 801c296:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c29a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c29c:	9202      	str	r2, [sp, #8]
 801c29e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801c2a2:	6860      	ldr	r0, [r4, #4]
 801c2a4:	9203      	str	r2, [sp, #12]
 801c2a6:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801c2aa:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801c2ae:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801c2b2:	fb00 2505 	mla	r5, r0, r5, r2
 801c2b6:	6822      	ldr	r2, [r4, #0]
 801c2b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c2bc:	4415      	add	r5, r2
 801c2be:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801c2c0:	6812      	ldr	r2, [r2, #0]
 801c2c2:	9201      	str	r2, [sp, #4]
 801c2c4:	2900      	cmp	r1, #0
 801c2c6:	dc03      	bgt.n	801c2d0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801c2c8:	9a02      	ldr	r2, [sp, #8]
 801c2ca:	2a00      	cmp	r2, #0
 801c2cc:	f340 811c 	ble.w	801c508 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801c2d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c2d2:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801c2d6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c2d8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c2dc:	2b00      	cmp	r3, #0
 801c2de:	dd0e      	ble.n	801c2fe <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801c2e0:	1422      	asrs	r2, r4, #16
 801c2e2:	d405      	bmi.n	801c2f0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801c2e4:	4572      	cmp	r2, lr
 801c2e6:	da03      	bge.n	801c2f0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801c2e8:	1402      	asrs	r2, r0, #16
 801c2ea:	d401      	bmi.n	801c2f0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801c2ec:	4542      	cmp	r2, r8
 801c2ee:	db07      	blt.n	801c300 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801c2f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c2f2:	3b01      	subs	r3, #1
 801c2f4:	3503      	adds	r5, #3
 801c2f6:	4414      	add	r4, r2
 801c2f8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c2fa:	4410      	add	r0, r2
 801c2fc:	e7ee      	b.n	801c2dc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801c2fe:	d072      	beq.n	801c3e6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x156>
 801c300:	1e5a      	subs	r2, r3, #1
 801c302:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801c304:	fb06 4602 	mla	r6, r6, r2, r4
 801c308:	1436      	asrs	r6, r6, #16
 801c30a:	d461      	bmi.n	801c3d0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801c30c:	4576      	cmp	r6, lr
 801c30e:	da5f      	bge.n	801c3d0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801c310:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801c312:	fb06 0202 	mla	r2, r6, r2, r0
 801c316:	1412      	asrs	r2, r2, #16
 801c318:	d45a      	bmi.n	801c3d0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801c31a:	4542      	cmp	r2, r8
 801c31c:	da58      	bge.n	801c3d0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801c31e:	1cef      	adds	r7, r5, #3
 801c320:	4699      	mov	r9, r3
 801c322:	f1b9 0f00 	cmp.w	r9, #0
 801c326:	dd59      	ble.n	801c3dc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801c328:	1426      	asrs	r6, r4, #16
 801c32a:	1402      	asrs	r2, r0, #16
 801c32c:	fb0e 6202 	mla	r2, lr, r2, r6
 801c330:	9e01      	ldr	r6, [sp, #4]
 801c332:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801c336:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801c33a:	d041      	beq.n	801c3c0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x130>
 801c33c:	9a03      	ldr	r2, [sp, #12]
 801c33e:	fa5f fb86 	uxtb.w	fp, r6
 801c342:	fb02 fc0c 	mul.w	ip, r2, ip
 801c346:	f10c 0201 	add.w	r2, ip, #1
 801c34a:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801c34e:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801c352:	1212      	asrs	r2, r2, #8
 801c354:	fa1f fa82 	uxth.w	sl, r2
 801c358:	43d2      	mvns	r2, r2
 801c35a:	fb1b fb0a 	smulbb	fp, fp, sl
 801c35e:	b2d2      	uxtb	r2, r2
 801c360:	fb0c bc02 	mla	ip, ip, r2, fp
 801c364:	fa1f fc8c 	uxth.w	ip, ip
 801c368:	f10c 0b01 	add.w	fp, ip, #1
 801c36c:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c370:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801c374:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801c378:	fb1b fb0a 	smulbb	fp, fp, sl
 801c37c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c380:	fb16 fa0a 	smulbb	sl, r6, sl
 801c384:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801c388:	f807 cc03 	strb.w	ip, [r7, #-3]
 801c38c:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801c390:	fb06 aa02 	mla	sl, r6, r2, sl
 801c394:	fb0c bc02 	mla	ip, ip, r2, fp
 801c398:	fa1f fa8a 	uxth.w	sl, sl
 801c39c:	fa1f fc8c 	uxth.w	ip, ip
 801c3a0:	f10a 0601 	add.w	r6, sl, #1
 801c3a4:	f10c 0b01 	add.w	fp, ip, #1
 801c3a8:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801c3ac:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c3b0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c3b4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c3b8:	f807 ac01 	strb.w	sl, [r7, #-1]
 801c3bc:	f807 cc02 	strb.w	ip, [r7, #-2]
 801c3c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c3c2:	3703      	adds	r7, #3
 801c3c4:	f109 39ff 	add.w	r9, r9, #4294967295
 801c3c8:	4414      	add	r4, r2
 801c3ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c3cc:	4410      	add	r0, r2
 801c3ce:	e7a8      	b.n	801c322 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801c3d0:	f04f 0c00 	mov.w	ip, #0
 801c3d4:	eba3 020c 	sub.w	r2, r3, ip
 801c3d8:	2a00      	cmp	r2, #0
 801c3da:	dc3d      	bgt.n	801c458 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c8>
 801c3dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c3e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c3e4:	441d      	add	r5, r3
 801c3e6:	2900      	cmp	r1, #0
 801c3e8:	f340 808e 	ble.w	801c508 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801c3ec:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c3f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c3f2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c3f6:	3901      	subs	r1, #1
 801c3f8:	eeb0 6a62 	vmov.f32	s12, s5
 801c3fc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c400:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c404:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c408:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c40c:	eeb0 6a43 	vmov.f32	s12, s6
 801c410:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c414:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c418:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c41c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c420:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c424:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c428:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c42c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c430:	ee12 2a90 	vmov	r2, s5
 801c434:	eef0 2a47 	vmov.f32	s5, s14
 801c438:	fb92 f3f3 	sdiv	r3, r2, r3
 801c43c:	ee13 2a10 	vmov	r2, s6
 801c440:	9311      	str	r3, [sp, #68]	; 0x44
 801c442:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c444:	eeb0 3a67 	vmov.f32	s6, s15
 801c448:	fb92 f3f3 	sdiv	r3, r2, r3
 801c44c:	9a02      	ldr	r2, [sp, #8]
 801c44e:	9312      	str	r3, [sp, #72]	; 0x48
 801c450:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c452:	bf08      	it	eq
 801c454:	4613      	moveq	r3, r2
 801c456:	e735      	b.n	801c2c4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34>
 801c458:	1426      	asrs	r6, r4, #16
 801c45a:	d44e      	bmi.n	801c4fa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801c45c:	4576      	cmp	r6, lr
 801c45e:	da4c      	bge.n	801c4fa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801c460:	1402      	asrs	r2, r0, #16
 801c462:	d44a      	bmi.n	801c4fa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801c464:	4542      	cmp	r2, r8
 801c466:	da48      	bge.n	801c4fa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801c468:	fb0e 6202 	mla	r2, lr, r2, r6
 801c46c:	9e01      	ldr	r6, [sp, #4]
 801c46e:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801c472:	0e3a      	lsrs	r2, r7, #24
 801c474:	d041      	beq.n	801c4fa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801c476:	9e03      	ldr	r6, [sp, #12]
 801c478:	fa5f fb87 	uxtb.w	fp, r7
 801c47c:	4372      	muls	r2, r6
 801c47e:	1c56      	adds	r6, r2, #1
 801c480:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801c484:	eb0c 064c 	add.w	r6, ip, ip, lsl #1
 801c488:	1212      	asrs	r2, r2, #8
 801c48a:	f815 9006 	ldrb.w	r9, [r5, r6]
 801c48e:	fa1f fa82 	uxth.w	sl, r2
 801c492:	43d2      	mvns	r2, r2
 801c494:	fb1b fb0a 	smulbb	fp, fp, sl
 801c498:	b2d2      	uxtb	r2, r2
 801c49a:	fb09 b902 	mla	r9, r9, r2, fp
 801c49e:	fa1f f989 	uxth.w	r9, r9
 801c4a2:	f109 0b01 	add.w	fp, r9, #1
 801c4a6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c4aa:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801c4ae:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801c4b2:	fb1b fb0a 	smulbb	fp, fp, sl
 801c4b6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c4ba:	fb17 fa0a 	smulbb	sl, r7, sl
 801c4be:	f805 9006 	strb.w	r9, [r5, r6]
 801c4c2:	442e      	add	r6, r5
 801c4c4:	78b7      	ldrb	r7, [r6, #2]
 801c4c6:	f896 9001 	ldrb.w	r9, [r6, #1]
 801c4ca:	fb07 aa02 	mla	sl, r7, r2, sl
 801c4ce:	fb09 b902 	mla	r9, r9, r2, fp
 801c4d2:	fa1f fa8a 	uxth.w	sl, sl
 801c4d6:	fa1f f989 	uxth.w	r9, r9
 801c4da:	f10a 0701 	add.w	r7, sl, #1
 801c4de:	f109 0b01 	add.w	fp, r9, #1
 801c4e2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c4e6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c4ea:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c4ee:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c4f2:	f886 a002 	strb.w	sl, [r6, #2]
 801c4f6:	f886 9001 	strb.w	r9, [r6, #1]
 801c4fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c4fc:	f10c 0c01 	add.w	ip, ip, #1
 801c500:	4414      	add	r4, r2
 801c502:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c504:	4410      	add	r0, r2
 801c506:	e765      	b.n	801c3d4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801c508:	b005      	add	sp, #20
 801c50a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c50e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c50e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c512:	b085      	sub	sp, #20
 801c514:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c518:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c51a:	9203      	str	r2, [sp, #12]
 801c51c:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801c520:	6860      	ldr	r0, [r4, #4]
 801c522:	9201      	str	r2, [sp, #4]
 801c524:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801c528:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801c52c:	fb00 2505 	mla	r5, r0, r5, r2
 801c530:	6822      	ldr	r2, [r4, #0]
 801c532:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c536:	4415      	add	r5, r2
 801c538:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801c53a:	6812      	ldr	r2, [r2, #0]
 801c53c:	9202      	str	r2, [sp, #8]
 801c53e:	2900      	cmp	r1, #0
 801c540:	dc03      	bgt.n	801c54a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801c542:	9a03      	ldr	r2, [sp, #12]
 801c544:	2a00      	cmp	r2, #0
 801c546:	f340 8122 	ble.w	801c78e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801c54a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c54c:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801c550:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c552:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c556:	2b00      	cmp	r3, #0
 801c558:	dd0f      	ble.n	801c57a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801c55a:	1422      	asrs	r2, r4, #16
 801c55c:	d406      	bmi.n	801c56c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801c55e:	4572      	cmp	r2, lr
 801c560:	da04      	bge.n	801c56c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801c562:	1402      	asrs	r2, r0, #16
 801c564:	d402      	bmi.n	801c56c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801c566:	9e01      	ldr	r6, [sp, #4]
 801c568:	42b2      	cmp	r2, r6
 801c56a:	db07      	blt.n	801c57c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801c56c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c56e:	3b01      	subs	r3, #1
 801c570:	3503      	adds	r5, #3
 801c572:	4414      	add	r4, r2
 801c574:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c576:	4410      	add	r0, r2
 801c578:	e7ed      	b.n	801c556 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801c57a:	d06e      	beq.n	801c65a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801c57c:	1e5a      	subs	r2, r3, #1
 801c57e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801c580:	fb06 4602 	mla	r6, r6, r2, r4
 801c584:	1436      	asrs	r6, r6, #16
 801c586:	d45d      	bmi.n	801c644 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801c588:	4576      	cmp	r6, lr
 801c58a:	da5b      	bge.n	801c644 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801c58c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801c58e:	fb06 0202 	mla	r2, r6, r2, r0
 801c592:	1412      	asrs	r2, r2, #16
 801c594:	d456      	bmi.n	801c644 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801c596:	9e01      	ldr	r6, [sp, #4]
 801c598:	42b2      	cmp	r2, r6
 801c59a:	da53      	bge.n	801c644 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801c59c:	1cee      	adds	r6, r5, #3
 801c59e:	469a      	mov	sl, r3
 801c5a0:	f1ba 0f00 	cmp.w	sl, #0
 801c5a4:	dd54      	ble.n	801c650 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801c5a6:	1427      	asrs	r7, r4, #16
 801c5a8:	1402      	asrs	r2, r0, #16
 801c5aa:	fb0e 7202 	mla	r2, lr, r2, r7
 801c5ae:	9f02      	ldr	r7, [sp, #8]
 801c5b0:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801c5b4:	ea5f 6c17 	movs.w	ip, r7, lsr #24
 801c5b8:	d03c      	beq.n	801c634 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801c5ba:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801c5be:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801c5c2:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801c5c6:	fa5f f28c 	uxtb.w	r2, ip
 801c5ca:	b2ff      	uxtb	r7, r7
 801c5cc:	f000 80d8 	beq.w	801c780 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801c5d0:	fa1f f882 	uxth.w	r8, r2
 801c5d4:	43d2      	mvns	r2, r2
 801c5d6:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801c5da:	fb17 f708 	smulbb	r7, r7, r8
 801c5de:	b2d2      	uxtb	r2, r2
 801c5e0:	fb19 f908 	smulbb	r9, r9, r8
 801c5e4:	fb0c 7702 	mla	r7, ip, r2, r7
 801c5e8:	fb1b f808 	smulbb	r8, fp, r8
 801c5ec:	b2bf      	uxth	r7, r7
 801c5ee:	f107 0c01 	add.w	ip, r7, #1
 801c5f2:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801c5f6:	123f      	asrs	r7, r7, #8
 801c5f8:	f806 7c03 	strb.w	r7, [r6, #-3]
 801c5fc:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801c600:	fb07 9902 	mla	r9, r7, r2, r9
 801c604:	fa1f f989 	uxth.w	r9, r9
 801c608:	f109 0701 	add.w	r7, r9, #1
 801c60c:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801c610:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801c614:	fb07 8802 	mla	r8, r7, r2, r8
 801c618:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c61c:	fa1f f888 	uxth.w	r8, r8
 801c620:	f806 9c02 	strb.w	r9, [r6, #-2]
 801c624:	f108 0201 	add.w	r2, r8, #1
 801c628:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801c62c:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c630:	f806 8c01 	strb.w	r8, [r6, #-1]
 801c634:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c636:	3603      	adds	r6, #3
 801c638:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c63c:	4414      	add	r4, r2
 801c63e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c640:	4410      	add	r0, r2
 801c642:	e7ad      	b.n	801c5a0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801c644:	f04f 0c00 	mov.w	ip, #0
 801c648:	eba3 020c 	sub.w	r2, r3, ip
 801c64c:	2a00      	cmp	r2, #0
 801c64e:	dc3d      	bgt.n	801c6cc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 801c650:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c654:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c658:	441d      	add	r5, r3
 801c65a:	2900      	cmp	r1, #0
 801c65c:	f340 8097 	ble.w	801c78e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801c660:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c664:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c666:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c66a:	3901      	subs	r1, #1
 801c66c:	eeb0 6a62 	vmov.f32	s12, s5
 801c670:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c674:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c678:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c67c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c680:	eeb0 6a43 	vmov.f32	s12, s6
 801c684:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c688:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c68c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c690:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c694:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c698:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c69c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c6a0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c6a4:	ee12 2a90 	vmov	r2, s5
 801c6a8:	eef0 2a47 	vmov.f32	s5, s14
 801c6ac:	fb92 f3f3 	sdiv	r3, r2, r3
 801c6b0:	ee13 2a10 	vmov	r2, s6
 801c6b4:	9311      	str	r3, [sp, #68]	; 0x44
 801c6b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c6b8:	eeb0 3a67 	vmov.f32	s6, s15
 801c6bc:	fb92 f3f3 	sdiv	r3, r2, r3
 801c6c0:	9a03      	ldr	r2, [sp, #12]
 801c6c2:	9312      	str	r3, [sp, #72]	; 0x48
 801c6c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c6c6:	bf08      	it	eq
 801c6c8:	4613      	moveq	r3, r2
 801c6ca:	e738      	b.n	801c53e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801c6cc:	1426      	asrs	r6, r4, #16
 801c6ce:	d448      	bmi.n	801c762 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801c6d0:	4576      	cmp	r6, lr
 801c6d2:	da46      	bge.n	801c762 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801c6d4:	1402      	asrs	r2, r0, #16
 801c6d6:	d444      	bmi.n	801c762 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801c6d8:	9f01      	ldr	r7, [sp, #4]
 801c6da:	42ba      	cmp	r2, r7
 801c6dc:	da41      	bge.n	801c762 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801c6de:	fb0e 6202 	mla	r2, lr, r2, r6
 801c6e2:	9e02      	ldr	r6, [sp, #8]
 801c6e4:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801c6e8:	0e3a      	lsrs	r2, r7, #24
 801c6ea:	d03a      	beq.n	801c762 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801c6ec:	2aff      	cmp	r2, #255	; 0xff
 801c6ee:	b2d6      	uxtb	r6, r2
 801c6f0:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801c6f4:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801c6f8:	ea4f 024c 	mov.w	r2, ip, lsl #1
 801c6fc:	b2ff      	uxtb	r7, r7
 801c6fe:	d037      	beq.n	801c770 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x262>
 801c700:	fa1f f986 	uxth.w	r9, r6
 801c704:	4462      	add	r2, ip
 801c706:	43f6      	mvns	r6, r6
 801c708:	f815 8002 	ldrb.w	r8, [r5, r2]
 801c70c:	fb17 f709 	smulbb	r7, r7, r9
 801c710:	fb1a fa09 	smulbb	sl, sl, r9
 801c714:	b2f6      	uxtb	r6, r6
 801c716:	fb1b f909 	smulbb	r9, fp, r9
 801c71a:	fb08 7706 	mla	r7, r8, r6, r7
 801c71e:	b2bf      	uxth	r7, r7
 801c720:	f107 0801 	add.w	r8, r7, #1
 801c724:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801c728:	123f      	asrs	r7, r7, #8
 801c72a:	54af      	strb	r7, [r5, r2]
 801c72c:	442a      	add	r2, r5
 801c72e:	7857      	ldrb	r7, [r2, #1]
 801c730:	fb07 aa06 	mla	sl, r7, r6, sl
 801c734:	fa1f fa8a 	uxth.w	sl, sl
 801c738:	f10a 0701 	add.w	r7, sl, #1
 801c73c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c740:	7897      	ldrb	r7, [r2, #2]
 801c742:	fb07 9906 	mla	r9, r7, r6, r9
 801c746:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c74a:	fa1f f989 	uxth.w	r9, r9
 801c74e:	f882 a001 	strb.w	sl, [r2, #1]
 801c752:	f109 0601 	add.w	r6, r9, #1
 801c756:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801c75a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c75e:	f882 9002 	strb.w	r9, [r2, #2]
 801c762:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c764:	f10c 0c01 	add.w	ip, ip, #1
 801c768:	4414      	add	r4, r2
 801c76a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c76c:	4410      	add	r0, r2
 801c76e:	e76b      	b.n	801c648 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x13a>
 801c770:	4462      	add	r2, ip
 801c772:	54af      	strb	r7, [r5, r2]
 801c774:	442a      	add	r2, r5
 801c776:	f882 a001 	strb.w	sl, [r2, #1]
 801c77a:	f882 b002 	strb.w	fp, [r2, #2]
 801c77e:	e7f0      	b.n	801c762 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801c780:	f806 7c03 	strb.w	r7, [r6, #-3]
 801c784:	f806 9c02 	strb.w	r9, [r6, #-2]
 801c788:	f806 bc01 	strb.w	fp, [r6, #-1]
 801c78c:	e752      	b.n	801c634 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801c78e:	b005      	add	sp, #20
 801c790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c794 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c798:	b087      	sub	sp, #28
 801c79a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c79e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801c7a0:	9204      	str	r2, [sp, #16]
 801c7a2:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801c7a6:	6860      	ldr	r0, [r4, #4]
 801c7a8:	9205      	str	r2, [sp, #20]
 801c7aa:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801c7ae:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801c7b2:	9101      	str	r1, [sp, #4]
 801c7b4:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801c7b8:	fb00 2505 	mla	r5, r0, r5, r2
 801c7bc:	6822      	ldr	r2, [r4, #0]
 801c7be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c7c2:	4415      	add	r5, r2
 801c7c4:	f10e 0201 	add.w	r2, lr, #1
 801c7c8:	f022 0201 	bic.w	r2, r2, #1
 801c7cc:	9202      	str	r2, [sp, #8]
 801c7ce:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801c7d0:	6812      	ldr	r2, [r2, #0]
 801c7d2:	9203      	str	r2, [sp, #12]
 801c7d4:	9a01      	ldr	r2, [sp, #4]
 801c7d6:	2a00      	cmp	r2, #0
 801c7d8:	dc03      	bgt.n	801c7e2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801c7da:	9a04      	ldr	r2, [sp, #16]
 801c7dc:	2a00      	cmp	r2, #0
 801c7de:	f340 8132 	ble.w	801ca46 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801c7e2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c7e4:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801c7e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c7ea:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c7ee:	2b00      	cmp	r3, #0
 801c7f0:	dd0e      	ble.n	801c810 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801c7f2:	1422      	asrs	r2, r4, #16
 801c7f4:	d405      	bmi.n	801c802 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801c7f6:	4596      	cmp	lr, r2
 801c7f8:	dd03      	ble.n	801c802 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801c7fa:	1402      	asrs	r2, r0, #16
 801c7fc:	d401      	bmi.n	801c802 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801c7fe:	4542      	cmp	r2, r8
 801c800:	db07      	blt.n	801c812 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801c802:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c804:	3b01      	subs	r3, #1
 801c806:	3503      	adds	r5, #3
 801c808:	4414      	add	r4, r2
 801c80a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c80c:	4410      	add	r0, r2
 801c80e:	e7ee      	b.n	801c7ee <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a>
 801c810:	d010      	beq.n	801c834 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801c812:	1e5a      	subs	r2, r3, #1
 801c814:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801c816:	fb06 4602 	mla	r6, r6, r2, r4
 801c81a:	1436      	asrs	r6, r6, #16
 801c81c:	d546      	bpl.n	801c8ac <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801c81e:	4699      	mov	r9, r3
 801c820:	462e      	mov	r6, r5
 801c822:	f1b9 0f00 	cmp.w	r9, #0
 801c826:	f300 80ac 	bgt.w	801c982 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ee>
 801c82a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c82e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c832:	441d      	add	r5, r3
 801c834:	9b01      	ldr	r3, [sp, #4]
 801c836:	2b00      	cmp	r3, #0
 801c838:	f340 8105 	ble.w	801ca46 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801c83c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c840:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c842:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c846:	eeb0 6a62 	vmov.f32	s12, s5
 801c84a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c84e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c852:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c856:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801c85a:	eeb0 6a43 	vmov.f32	s12, s6
 801c85e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c862:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801c866:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c86a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c86e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c872:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c876:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c87a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c87e:	ee12 2a90 	vmov	r2, s5
 801c882:	eef0 2a47 	vmov.f32	s5, s14
 801c886:	fb92 f3f3 	sdiv	r3, r2, r3
 801c88a:	ee13 2a10 	vmov	r2, s6
 801c88e:	9313      	str	r3, [sp, #76]	; 0x4c
 801c890:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c892:	eeb0 3a67 	vmov.f32	s6, s15
 801c896:	fb92 f3f3 	sdiv	r3, r2, r3
 801c89a:	9314      	str	r3, [sp, #80]	; 0x50
 801c89c:	9b01      	ldr	r3, [sp, #4]
 801c89e:	9a04      	ldr	r2, [sp, #16]
 801c8a0:	3b01      	subs	r3, #1
 801c8a2:	9301      	str	r3, [sp, #4]
 801c8a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c8a6:	bf08      	it	eq
 801c8a8:	4613      	moveq	r3, r2
 801c8aa:	e793      	b.n	801c7d4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801c8ac:	45b6      	cmp	lr, r6
 801c8ae:	ddb6      	ble.n	801c81e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801c8b0:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801c8b2:	fb06 0202 	mla	r2, r6, r2, r0
 801c8b6:	1412      	asrs	r2, r2, #16
 801c8b8:	d4b1      	bmi.n	801c81e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801c8ba:	4542      	cmp	r2, r8
 801c8bc:	daaf      	bge.n	801c81e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801c8be:	1cee      	adds	r6, r5, #3
 801c8c0:	4699      	mov	r9, r3
 801c8c2:	f1b9 0f00 	cmp.w	r9, #0
 801c8c6:	ddb0      	ble.n	801c82a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801c8c8:	1422      	asrs	r2, r4, #16
 801c8ca:	9902      	ldr	r1, [sp, #8]
 801c8cc:	1407      	asrs	r7, r0, #16
 801c8ce:	fb01 2707 	mla	r7, r1, r7, r2
 801c8d2:	9903      	ldr	r1, [sp, #12]
 801c8d4:	087a      	lsrs	r2, r7, #1
 801c8d6:	5c8a      	ldrb	r2, [r1, r2]
 801c8d8:	07f9      	lsls	r1, r7, #31
 801c8da:	bf54      	ite	pl
 801c8dc:	f002 020f 	andpl.w	r2, r2, #15
 801c8e0:	1112      	asrmi	r2, r2, #4
 801c8e2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c8e6:	b2d2      	uxtb	r2, r2
 801c8e8:	2a00      	cmp	r2, #0
 801c8ea:	d042      	beq.n	801c972 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1de>
 801c8ec:	4957      	ldr	r1, [pc, #348]	; (801ca4c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801c8ee:	680f      	ldr	r7, [r1, #0]
 801c8f0:	9905      	ldr	r1, [sp, #20]
 801c8f2:	fa5f fb87 	uxtb.w	fp, r7
 801c8f6:	434a      	muls	r2, r1
 801c8f8:	f102 0c01 	add.w	ip, r2, #1
 801c8fc:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801c900:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801c904:	1212      	asrs	r2, r2, #8
 801c906:	fa1f fa82 	uxth.w	sl, r2
 801c90a:	43d2      	mvns	r2, r2
 801c90c:	fb1b fb0a 	smulbb	fp, fp, sl
 801c910:	b2d2      	uxtb	r2, r2
 801c912:	fb0c bc02 	mla	ip, ip, r2, fp
 801c916:	fa1f fc8c 	uxth.w	ip, ip
 801c91a:	f10c 0b01 	add.w	fp, ip, #1
 801c91e:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c922:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801c926:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801c92a:	fb1b fb0a 	smulbb	fp, fp, sl
 801c92e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c932:	fb17 fa0a 	smulbb	sl, r7, sl
 801c936:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801c93a:	f806 cc03 	strb.w	ip, [r6, #-3]
 801c93e:	f816 cc02 	ldrb.w	ip, [r6, #-2]
 801c942:	fb07 aa02 	mla	sl, r7, r2, sl
 801c946:	fb0c bc02 	mla	ip, ip, r2, fp
 801c94a:	fa1f fa8a 	uxth.w	sl, sl
 801c94e:	fa1f fc8c 	uxth.w	ip, ip
 801c952:	f10a 0701 	add.w	r7, sl, #1
 801c956:	f10c 0b01 	add.w	fp, ip, #1
 801c95a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c95e:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c962:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c966:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c96a:	f806 ac01 	strb.w	sl, [r6, #-1]
 801c96e:	f806 cc02 	strb.w	ip, [r6, #-2]
 801c972:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c974:	3603      	adds	r6, #3
 801c976:	f109 39ff 	add.w	r9, r9, #4294967295
 801c97a:	4414      	add	r4, r2
 801c97c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c97e:	4410      	add	r0, r2
 801c980:	e79f      	b.n	801c8c2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12e>
 801c982:	1422      	asrs	r2, r4, #16
 801c984:	d457      	bmi.n	801ca36 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801c986:	4596      	cmp	lr, r2
 801c988:	dd55      	ble.n	801ca36 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801c98a:	1407      	asrs	r7, r0, #16
 801c98c:	d453      	bmi.n	801ca36 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801c98e:	4547      	cmp	r7, r8
 801c990:	da51      	bge.n	801ca36 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801c992:	9902      	ldr	r1, [sp, #8]
 801c994:	fb07 2701 	mla	r7, r7, r1, r2
 801c998:	9903      	ldr	r1, [sp, #12]
 801c99a:	087a      	lsrs	r2, r7, #1
 801c99c:	07ff      	lsls	r7, r7, #31
 801c99e:	5c8a      	ldrb	r2, [r1, r2]
 801c9a0:	bf54      	ite	pl
 801c9a2:	f002 020f 	andpl.w	r2, r2, #15
 801c9a6:	1112      	asrmi	r2, r2, #4
 801c9a8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c9ac:	b2d2      	uxtb	r2, r2
 801c9ae:	2a00      	cmp	r2, #0
 801c9b0:	d041      	beq.n	801ca36 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801c9b2:	4926      	ldr	r1, [pc, #152]	; (801ca4c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801c9b4:	680f      	ldr	r7, [r1, #0]
 801c9b6:	9905      	ldr	r1, [sp, #20]
 801c9b8:	fa5f fb87 	uxtb.w	fp, r7
 801c9bc:	434a      	muls	r2, r1
 801c9be:	f102 0c01 	add.w	ip, r2, #1
 801c9c2:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801c9c6:	f896 c000 	ldrb.w	ip, [r6]
 801c9ca:	1212      	asrs	r2, r2, #8
 801c9cc:	fa1f fa82 	uxth.w	sl, r2
 801c9d0:	43d2      	mvns	r2, r2
 801c9d2:	fb1b fb0a 	smulbb	fp, fp, sl
 801c9d6:	b2d2      	uxtb	r2, r2
 801c9d8:	fb0c bc02 	mla	ip, ip, r2, fp
 801c9dc:	fa1f fc8c 	uxth.w	ip, ip
 801c9e0:	f10c 0b01 	add.w	fp, ip, #1
 801c9e4:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c9e8:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801c9ec:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801c9f0:	fb1b fb0a 	smulbb	fp, fp, sl
 801c9f4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c9f8:	fb17 fa0a 	smulbb	sl, r7, sl
 801c9fc:	78b7      	ldrb	r7, [r6, #2]
 801c9fe:	f886 c000 	strb.w	ip, [r6]
 801ca02:	f896 c001 	ldrb.w	ip, [r6, #1]
 801ca06:	fb07 aa02 	mla	sl, r7, r2, sl
 801ca0a:	fb0c bc02 	mla	ip, ip, r2, fp
 801ca0e:	fa1f fa8a 	uxth.w	sl, sl
 801ca12:	fa1f fc8c 	uxth.w	ip, ip
 801ca16:	f10a 0701 	add.w	r7, sl, #1
 801ca1a:	f10c 0b01 	add.w	fp, ip, #1
 801ca1e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ca22:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801ca26:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ca2a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ca2e:	f886 a002 	strb.w	sl, [r6, #2]
 801ca32:	f886 c001 	strb.w	ip, [r6, #1]
 801ca36:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ca38:	3603      	adds	r6, #3
 801ca3a:	f109 39ff 	add.w	r9, r9, #4294967295
 801ca3e:	4414      	add	r4, r2
 801ca40:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ca42:	4410      	add	r0, r2
 801ca44:	e6ed      	b.n	801c822 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 801ca46:	b007      	add	sp, #28
 801ca48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca4c:	2000bca4 	.word	0x2000bca4

0801ca50 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801ca50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca54:	b087      	sub	sp, #28
 801ca56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ca5a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ca5c:	9205      	str	r2, [sp, #20]
 801ca5e:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 801ca62:	6860      	ldr	r0, [r4, #4]
 801ca64:	9202      	str	r2, [sp, #8]
 801ca66:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 801ca6a:	9101      	str	r1, [sp, #4]
 801ca6c:	e9dd 2616 	ldrd	r2, r6, [sp, #88]	; 0x58
 801ca70:	fb00 2606 	mla	r6, r0, r6, r2
 801ca74:	6822      	ldr	r2, [r4, #0]
 801ca76:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ca7a:	4416      	add	r6, r2
 801ca7c:	f108 0201 	add.w	r2, r8, #1
 801ca80:	f022 0201 	bic.w	r2, r2, #1
 801ca84:	9203      	str	r2, [sp, #12]
 801ca86:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801ca88:	6812      	ldr	r2, [r2, #0]
 801ca8a:	9204      	str	r2, [sp, #16]
 801ca8c:	9a01      	ldr	r2, [sp, #4]
 801ca8e:	2a00      	cmp	r2, #0
 801ca90:	dc03      	bgt.n	801ca9a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801ca92:	9a05      	ldr	r2, [sp, #20]
 801ca94:	2a00      	cmp	r2, #0
 801ca96:	f340 813a 	ble.w	801cd0e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801ca9a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ca9c:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 801caa0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801caa2:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801caa6:	2b00      	cmp	r3, #0
 801caa8:	dd0f      	ble.n	801caca <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801caaa:	142a      	asrs	r2, r5, #16
 801caac:	d406      	bmi.n	801cabc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801caae:	4590      	cmp	r8, r2
 801cab0:	dd04      	ble.n	801cabc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801cab2:	1422      	asrs	r2, r4, #16
 801cab4:	d402      	bmi.n	801cabc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801cab6:	9802      	ldr	r0, [sp, #8]
 801cab8:	4282      	cmp	r2, r0
 801caba:	db07      	blt.n	801cacc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801cabc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801cabe:	3b01      	subs	r3, #1
 801cac0:	3603      	adds	r6, #3
 801cac2:	4415      	add	r5, r2
 801cac4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801cac6:	4414      	add	r4, r2
 801cac8:	e7ed      	b.n	801caa6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801caca:	d073      	beq.n	801cbb4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x164>
 801cacc:	1e5a      	subs	r2, r3, #1
 801cace:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801cad0:	fb00 5002 	mla	r0, r0, r2, r5
 801cad4:	1400      	asrs	r0, r0, #16
 801cad6:	d464      	bmi.n	801cba2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801cad8:	4580      	cmp	r8, r0
 801cada:	dd62      	ble.n	801cba2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801cadc:	9814      	ldr	r0, [sp, #80]	; 0x50
 801cade:	fb00 4202 	mla	r2, r0, r2, r4
 801cae2:	1412      	asrs	r2, r2, #16
 801cae4:	d45d      	bmi.n	801cba2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801cae6:	9802      	ldr	r0, [sp, #8]
 801cae8:	4282      	cmp	r2, r0
 801caea:	da5a      	bge.n	801cba2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801caec:	1cf0      	adds	r0, r6, #3
 801caee:	469a      	mov	sl, r3
 801caf0:	f1ba 0f00 	cmp.w	sl, #0
 801caf4:	dd59      	ble.n	801cbaa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 801caf6:	142a      	asrs	r2, r5, #16
 801caf8:	9903      	ldr	r1, [sp, #12]
 801cafa:	1427      	asrs	r7, r4, #16
 801cafc:	fb01 2707 	mla	r7, r1, r7, r2
 801cb00:	9904      	ldr	r1, [sp, #16]
 801cb02:	087a      	lsrs	r2, r7, #1
 801cb04:	5c8a      	ldrb	r2, [r1, r2]
 801cb06:	07f9      	lsls	r1, r7, #31
 801cb08:	bf54      	ite	pl
 801cb0a:	f002 020f 	andpl.w	r2, r2, #15
 801cb0e:	1112      	asrmi	r2, r2, #4
 801cb10:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801cb14:	b2d2      	uxtb	r2, r2
 801cb16:	2a00      	cmp	r2, #0
 801cb18:	d03b      	beq.n	801cb92 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801cb1a:	497e      	ldr	r1, [pc, #504]	; (801cd14 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 801cb1c:	2aff      	cmp	r2, #255	; 0xff
 801cb1e:	680f      	ldr	r7, [r1, #0]
 801cb20:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801cb24:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801cb28:	b2ff      	uxtb	r7, r7
 801cb2a:	f000 80e9 	beq.w	801cd00 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801cb2e:	fa1f fe82 	uxth.w	lr, r2
 801cb32:	43d2      	mvns	r2, r2
 801cb34:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 801cb38:	fb17 f70e 	smulbb	r7, r7, lr
 801cb3c:	b2d2      	uxtb	r2, r2
 801cb3e:	fb19 f90e 	smulbb	r9, r9, lr
 801cb42:	fb0c 7702 	mla	r7, ip, r2, r7
 801cb46:	fb1b fe0e 	smulbb	lr, fp, lr
 801cb4a:	b2bf      	uxth	r7, r7
 801cb4c:	f107 0c01 	add.w	ip, r7, #1
 801cb50:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801cb54:	123f      	asrs	r7, r7, #8
 801cb56:	f800 7c03 	strb.w	r7, [r0, #-3]
 801cb5a:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801cb5e:	fb07 9902 	mla	r9, r7, r2, r9
 801cb62:	fa1f f989 	uxth.w	r9, r9
 801cb66:	f109 0701 	add.w	r7, r9, #1
 801cb6a:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801cb6e:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801cb72:	fb07 ee02 	mla	lr, r7, r2, lr
 801cb76:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cb7a:	fa1f fe8e 	uxth.w	lr, lr
 801cb7e:	f800 9c02 	strb.w	r9, [r0, #-2]
 801cb82:	f10e 0201 	add.w	r2, lr, #1
 801cb86:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801cb8a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801cb8e:	f800 ec01 	strb.w	lr, [r0, #-1]
 801cb92:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801cb94:	3003      	adds	r0, #3
 801cb96:	f10a 3aff 	add.w	sl, sl, #4294967295
 801cb9a:	4415      	add	r5, r2
 801cb9c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801cb9e:	4414      	add	r4, r2
 801cba0:	e7a6      	b.n	801caf0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801cba2:	2700      	movs	r7, #0
 801cba4:	1bda      	subs	r2, r3, r7
 801cba6:	2a00      	cmp	r2, #0
 801cba8:	dc40      	bgt.n	801cc2c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801cbaa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cbae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cbb2:	441e      	add	r6, r3
 801cbb4:	9b01      	ldr	r3, [sp, #4]
 801cbb6:	2b00      	cmp	r3, #0
 801cbb8:	f340 80a9 	ble.w	801cd0e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801cbbc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cbc0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cbc2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cbc6:	eeb0 6a62 	vmov.f32	s12, s5
 801cbca:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cbce:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cbd2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cbd6:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801cbda:	eeb0 6a43 	vmov.f32	s12, s6
 801cbde:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cbe2:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801cbe6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cbea:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cbee:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cbf2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cbf6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cbfa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cbfe:	ee12 2a90 	vmov	r2, s5
 801cc02:	eef0 2a47 	vmov.f32	s5, s14
 801cc06:	fb92 f3f3 	sdiv	r3, r2, r3
 801cc0a:	ee13 2a10 	vmov	r2, s6
 801cc0e:	9313      	str	r3, [sp, #76]	; 0x4c
 801cc10:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cc12:	eeb0 3a67 	vmov.f32	s6, s15
 801cc16:	fb92 f3f3 	sdiv	r3, r2, r3
 801cc1a:	9314      	str	r3, [sp, #80]	; 0x50
 801cc1c:	9b01      	ldr	r3, [sp, #4]
 801cc1e:	9a05      	ldr	r2, [sp, #20]
 801cc20:	3b01      	subs	r3, #1
 801cc22:	9301      	str	r3, [sp, #4]
 801cc24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cc26:	bf08      	it	eq
 801cc28:	4613      	moveq	r3, r2
 801cc2a:	e72f      	b.n	801ca8c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801cc2c:	142a      	asrs	r2, r5, #16
 801cc2e:	d458      	bmi.n	801cce2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801cc30:	4590      	cmp	r8, r2
 801cc32:	dd56      	ble.n	801cce2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801cc34:	1420      	asrs	r0, r4, #16
 801cc36:	d454      	bmi.n	801cce2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801cc38:	9902      	ldr	r1, [sp, #8]
 801cc3a:	4288      	cmp	r0, r1
 801cc3c:	da51      	bge.n	801cce2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801cc3e:	9903      	ldr	r1, [sp, #12]
 801cc40:	fb00 2001 	mla	r0, r0, r1, r2
 801cc44:	9904      	ldr	r1, [sp, #16]
 801cc46:	0842      	lsrs	r2, r0, #1
 801cc48:	07c0      	lsls	r0, r0, #31
 801cc4a:	5c8a      	ldrb	r2, [r1, r2]
 801cc4c:	bf54      	ite	pl
 801cc4e:	f002 020f 	andpl.w	r2, r2, #15
 801cc52:	1112      	asrmi	r2, r2, #4
 801cc54:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801cc58:	b2d2      	uxtb	r2, r2
 801cc5a:	2a00      	cmp	r2, #0
 801cc5c:	d041      	beq.n	801cce2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801cc5e:	492d      	ldr	r1, [pc, #180]	; (801cd14 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 801cc60:	2aff      	cmp	r2, #255	; 0xff
 801cc62:	6808      	ldr	r0, [r1, #0]
 801cc64:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801cc68:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801cc6c:	fa5f fc80 	uxtb.w	ip, r0
 801cc70:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801cc74:	d03b      	beq.n	801ccee <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29e>
 801cc76:	fa1f f982 	uxth.w	r9, r2
 801cc7a:	4438      	add	r0, r7
 801cc7c:	43d2      	mvns	r2, r2
 801cc7e:	f816 e000 	ldrb.w	lr, [r6, r0]
 801cc82:	fb1c fc09 	smulbb	ip, ip, r9
 801cc86:	fb1a fa09 	smulbb	sl, sl, r9
 801cc8a:	b2d2      	uxtb	r2, r2
 801cc8c:	fb1b f909 	smulbb	r9, fp, r9
 801cc90:	fb0e cc02 	mla	ip, lr, r2, ip
 801cc94:	fa1f fc8c 	uxth.w	ip, ip
 801cc98:	f10c 0e01 	add.w	lr, ip, #1
 801cc9c:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801cca0:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801cca4:	f806 c000 	strb.w	ip, [r6, r0]
 801cca8:	4430      	add	r0, r6
 801ccaa:	f890 c001 	ldrb.w	ip, [r0, #1]
 801ccae:	fb0c aa02 	mla	sl, ip, r2, sl
 801ccb2:	fa1f fa8a 	uxth.w	sl, sl
 801ccb6:	f10a 0c01 	add.w	ip, sl, #1
 801ccba:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801ccbe:	f890 c002 	ldrb.w	ip, [r0, #2]
 801ccc2:	fb0c 9902 	mla	r9, ip, r2, r9
 801ccc6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ccca:	fa1f f989 	uxth.w	r9, r9
 801ccce:	f880 a001 	strb.w	sl, [r0, #1]
 801ccd2:	f109 0201 	add.w	r2, r9, #1
 801ccd6:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801ccda:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ccde:	f880 9002 	strb.w	r9, [r0, #2]
 801cce2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801cce4:	3701      	adds	r7, #1
 801cce6:	4415      	add	r5, r2
 801cce8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ccea:	4414      	add	r4, r2
 801ccec:	e75a      	b.n	801cba4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801ccee:	4438      	add	r0, r7
 801ccf0:	f806 c000 	strb.w	ip, [r6, r0]
 801ccf4:	4430      	add	r0, r6
 801ccf6:	f880 a001 	strb.w	sl, [r0, #1]
 801ccfa:	f880 b002 	strb.w	fp, [r0, #2]
 801ccfe:	e7f0      	b.n	801cce2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801cd00:	f800 7c03 	strb.w	r7, [r0, #-3]
 801cd04:	f800 9c02 	strb.w	r9, [r0, #-2]
 801cd08:	f800 bc01 	strb.w	fp, [r0, #-1]
 801cd0c:	e741      	b.n	801cb92 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801cd0e:	b007      	add	sp, #28
 801cd10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd14:	2000bca4 	.word	0x2000bca4

0801cd18 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801cd18:	4770      	bx	lr

0801cd1a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801cd1a:	4770      	bx	lr

0801cd1c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801cd1c:	4770      	bx	lr

0801cd1e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801cd1e:	4770      	bx	lr

0801cd20 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801cd20:	4770      	bx	lr

0801cd22 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801cd22:	4770      	bx	lr

0801cd24 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801cd24:	4770      	bx	lr

0801cd26 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801cd26:	4770      	bx	lr

0801cd28 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801cd28:	4770      	bx	lr

0801cd2a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801cd2a:	4770      	bx	lr

0801cd2c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801cd2c:	4770      	bx	lr

0801cd2e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801cd2e:	4770      	bx	lr

0801cd30 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801cd30:	4770      	bx	lr

0801cd32 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801cd32:	4770      	bx	lr

0801cd34 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801cd34:	4770      	bx	lr

0801cd36 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801cd36:	4770      	bx	lr

0801cd38 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801cd38:	4770      	bx	lr

0801cd3a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801cd3a:	4770      	bx	lr

0801cd3c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801cd3c:	4770      	bx	lr

0801cd3e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801cd3e:	4770      	bx	lr

0801cd40 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801cd40:	2bff      	cmp	r3, #255	; 0xff
 801cd42:	b508      	push	{r3, lr}
 801cd44:	d04f      	beq.n	801cde6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801cd46:	2a2c      	cmp	r2, #44	; 0x2c
 801cd48:	d032      	beq.n	801cdb0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 801cd4a:	d80f      	bhi.n	801cd6c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 801cd4c:	2a08      	cmp	r2, #8
 801cd4e:	d046      	beq.n	801cdde <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801cd50:	d805      	bhi.n	801cd5e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 801cd52:	2a04      	cmp	r2, #4
 801cd54:	d041      	beq.n	801cdda <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801cd56:	2a05      	cmp	r2, #5
 801cd58:	d03d      	beq.n	801cdd6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801cd5a:	2000      	movs	r0, #0
 801cd5c:	e027      	b.n	801cdae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cd5e:	2a0a      	cmp	r2, #10
 801cd60:	d03d      	beq.n	801cdde <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801cd62:	d301      	bcc.n	801cd68 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801cd64:	2a0b      	cmp	r2, #11
 801cd66:	d1f8      	bne.n	801cd5a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801cd68:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801cd6a:	e020      	b.n	801cdae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cd6c:	2a30      	cmp	r2, #48	; 0x30
 801cd6e:	d038      	beq.n	801cde2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801cd70:	d808      	bhi.n	801cd84 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 801cd72:	2a2e      	cmp	r2, #46	; 0x2e
 801cd74:	684b      	ldr	r3, [r1, #4]
 801cd76:	d029      	beq.n	801cdcc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 801cd78:	d90b      	bls.n	801cd92 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 801cd7a:	781b      	ldrb	r3, [r3, #0]
 801cd7c:	2b00      	cmp	r3, #0
 801cd7e:	d1ec      	bne.n	801cd5a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801cd80:	6a00      	ldr	r0, [r0, #32]
 801cd82:	e014      	b.n	801cdae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cd84:	2a32      	cmp	r2, #50	; 0x32
 801cd86:	d02c      	beq.n	801cde2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801cd88:	d301      	bcc.n	801cd8e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 801cd8a:	2a33      	cmp	r2, #51	; 0x33
 801cd8c:	d1e5      	bne.n	801cd5a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801cd8e:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801cd90:	e00d      	b.n	801cdae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cd92:	781b      	ldrb	r3, [r3, #0]
 801cd94:	2b01      	cmp	r3, #1
 801cd96:	d009      	beq.n	801cdac <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801cd98:	d3f2      	bcc.n	801cd80 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 801cd9a:	2b02      	cmp	r3, #2
 801cd9c:	d1dd      	bne.n	801cd5a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801cd9e:	4b39      	ldr	r3, [pc, #228]	; (801ce84 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801cda0:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 801cda4:	4a38      	ldr	r2, [pc, #224]	; (801ce88 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801cda6:	4839      	ldr	r0, [pc, #228]	; (801ce8c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 801cda8:	f007 ff3e 	bl	8024c28 <__assert_func>
 801cdac:	6900      	ldr	r0, [r0, #16]
 801cdae:	bd08      	pop	{r3, pc}
 801cdb0:	684b      	ldr	r3, [r1, #4]
 801cdb2:	781b      	ldrb	r3, [r3, #0]
 801cdb4:	2b01      	cmp	r3, #1
 801cdb6:	d007      	beq.n	801cdc8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 801cdb8:	d30b      	bcc.n	801cdd2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801cdba:	2b02      	cmp	r3, #2
 801cdbc:	d1cd      	bne.n	801cd5a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801cdbe:	4b31      	ldr	r3, [pc, #196]	; (801ce84 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801cdc0:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 801cdc4:	4a30      	ldr	r2, [pc, #192]	; (801ce88 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801cdc6:	e7ee      	b.n	801cda6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801cdc8:	6880      	ldr	r0, [r0, #8]
 801cdca:	e7f0      	b.n	801cdae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cdcc:	781b      	ldrb	r3, [r3, #0]
 801cdce:	2b00      	cmp	r3, #0
 801cdd0:	d1c3      	bne.n	801cd5a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801cdd2:	6980      	ldr	r0, [r0, #24]
 801cdd4:	e7eb      	b.n	801cdae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cdd6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801cdd8:	e7e9      	b.n	801cdae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cdda:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801cddc:	e7e7      	b.n	801cdae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cdde:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801cde0:	e7e5      	b.n	801cdae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cde2:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801cde4:	e7e3      	b.n	801cdae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cde6:	2a2c      	cmp	r2, #44	; 0x2c
 801cde8:	d030      	beq.n	801ce4c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 801cdea:	d80f      	bhi.n	801ce0c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 801cdec:	2a08      	cmp	r2, #8
 801cdee:	d044      	beq.n	801ce7a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801cdf0:	d805      	bhi.n	801cdfe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801cdf2:	2a04      	cmp	r2, #4
 801cdf4:	d03f      	beq.n	801ce76 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801cdf6:	2a05      	cmp	r2, #5
 801cdf8:	d1af      	bne.n	801cd5a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801cdfa:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801cdfc:	e7d7      	b.n	801cdae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cdfe:	2a0a      	cmp	r2, #10
 801ce00:	d03b      	beq.n	801ce7a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801ce02:	d301      	bcc.n	801ce08 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 801ce04:	2a0b      	cmp	r2, #11
 801ce06:	d1a8      	bne.n	801cd5a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ce08:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801ce0a:	e7d0      	b.n	801cdae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ce0c:	2a30      	cmp	r2, #48	; 0x30
 801ce0e:	d036      	beq.n	801ce7e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801ce10:	d808      	bhi.n	801ce24 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 801ce12:	2a2e      	cmp	r2, #46	; 0x2e
 801ce14:	684b      	ldr	r3, [r1, #4]
 801ce16:	d028      	beq.n	801ce6a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 801ce18:	d90b      	bls.n	801ce32 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 801ce1a:	781b      	ldrb	r3, [r3, #0]
 801ce1c:	2b00      	cmp	r3, #0
 801ce1e:	d19c      	bne.n	801cd5a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ce20:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801ce22:	e7c4      	b.n	801cdae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ce24:	2a32      	cmp	r2, #50	; 0x32
 801ce26:	d02a      	beq.n	801ce7e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801ce28:	d301      	bcc.n	801ce2e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 801ce2a:	2a33      	cmp	r2, #51	; 0x33
 801ce2c:	d195      	bne.n	801cd5a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ce2e:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801ce30:	e7bd      	b.n	801cdae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ce32:	781b      	ldrb	r3, [r3, #0]
 801ce34:	2b01      	cmp	r3, #1
 801ce36:	d007      	beq.n	801ce48 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 801ce38:	d3f2      	bcc.n	801ce20 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801ce3a:	2b02      	cmp	r3, #2
 801ce3c:	d18d      	bne.n	801cd5a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ce3e:	4b11      	ldr	r3, [pc, #68]	; (801ce84 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801ce40:	f240 31e1 	movw	r1, #993	; 0x3e1
 801ce44:	4a10      	ldr	r2, [pc, #64]	; (801ce88 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801ce46:	e7ae      	b.n	801cda6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801ce48:	6940      	ldr	r0, [r0, #20]
 801ce4a:	e7b0      	b.n	801cdae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ce4c:	684b      	ldr	r3, [r1, #4]
 801ce4e:	781b      	ldrb	r3, [r3, #0]
 801ce50:	2b01      	cmp	r3, #1
 801ce52:	d008      	beq.n	801ce66 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 801ce54:	d30d      	bcc.n	801ce72 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801ce56:	2b02      	cmp	r3, #2
 801ce58:	f47f af7f 	bne.w	801cd5a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ce5c:	4b09      	ldr	r3, [pc, #36]	; (801ce84 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801ce5e:	f240 31ed 	movw	r1, #1005	; 0x3ed
 801ce62:	4a09      	ldr	r2, [pc, #36]	; (801ce88 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801ce64:	e79f      	b.n	801cda6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801ce66:	68c0      	ldr	r0, [r0, #12]
 801ce68:	e7a1      	b.n	801cdae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ce6a:	781b      	ldrb	r3, [r3, #0]
 801ce6c:	2b00      	cmp	r3, #0
 801ce6e:	f47f af74 	bne.w	801cd5a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ce72:	69c0      	ldr	r0, [r0, #28]
 801ce74:	e79b      	b.n	801cdae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ce76:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801ce78:	e799      	b.n	801cdae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ce7a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801ce7c:	e797      	b.n	801cdae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ce7e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801ce80:	e795      	b.n	801cdae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ce82:	bf00      	nop
 801ce84:	08029403 	.word	0x08029403
 801ce88:	08029bb7 	.word	0x08029bb7
 801ce8c:	0802944f 	.word	0x0802944f

0801ce90 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801ce90:	b508      	push	{r3, lr}
 801ce92:	4b06      	ldr	r3, [pc, #24]	; (801ceac <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 801ce94:	8818      	ldrh	r0, [r3, #0]
 801ce96:	b928      	cbnz	r0, 801cea4 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 801ce98:	4b05      	ldr	r3, [pc, #20]	; (801ceb0 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 801ce9a:	21d7      	movs	r1, #215	; 0xd7
 801ce9c:	4a05      	ldr	r2, [pc, #20]	; (801ceb4 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 801ce9e:	4806      	ldr	r0, [pc, #24]	; (801ceb8 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 801cea0:	f007 fec2 	bl	8024c28 <__assert_func>
 801cea4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801cea8:	b280      	uxth	r0, r0
 801ceaa:	bd08      	pop	{r3, pc}
 801ceac:	2000bc76 	.word	0x2000bc76
 801ceb0:	0802969e 	.word	0x0802969e
 801ceb4:	08029b7c 	.word	0x08029b7c
 801ceb8:	080296e0 	.word	0x080296e0

0801cebc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801cebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cec0:	4616      	mov	r6, r2
 801cec2:	b087      	sub	sp, #28
 801cec4:	461f      	mov	r7, r3
 801cec6:	b33b      	cbz	r3, 801cf18 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801cec8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801cecc:	b323      	cbz	r3, 801cf18 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801cece:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801ced2:	b30b      	cbz	r3, 801cf18 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801ced4:	6808      	ldr	r0, [r1, #0]
 801ced6:	ab04      	add	r3, sp, #16
 801ced8:	6849      	ldr	r1, [r1, #4]
 801ceda:	4c5a      	ldr	r4, [pc, #360]	; (801d044 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 801cedc:	c303      	stmia	r3!, {r0, r1}
 801cede:	a804      	add	r0, sp, #16
 801cee0:	f7fb fd6e 	bl	80189c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cee4:	6820      	ldr	r0, [r4, #0]
 801cee6:	6803      	ldr	r3, [r0, #0]
 801cee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ceea:	4798      	blx	r3
 801ceec:	2fff      	cmp	r7, #255	; 0xff
 801ceee:	4623      	mov	r3, r4
 801cef0:	d015      	beq.n	801cf1e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801cef2:	f010 0f08 	tst.w	r0, #8
 801cef6:	d015      	beq.n	801cf24 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x68>
 801cef8:	6818      	ldr	r0, [r3, #0]
 801cefa:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801cefe:	6801      	ldr	r1, [r0, #0]
 801cf00:	9401      	str	r4, [sp, #4]
 801cf02:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801cf06:	9702      	str	r7, [sp, #8]
 801cf08:	9400      	str	r4, [sp, #0]
 801cf0a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801cf0e:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 801cf10:	4631      	mov	r1, r6
 801cf12:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801cf16:	47a0      	blx	r4
 801cf18:	b007      	add	sp, #28
 801cf1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf1e:	f010 0f02 	tst.w	r0, #2
 801cf22:	e7e8      	b.n	801cef6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3a>
 801cf24:	6818      	ldr	r0, [r3, #0]
 801cf26:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 801cf2a:	6803      	ldr	r3, [r0, #0]
 801cf2c:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801cf30:	6a1b      	ldr	r3, [r3, #32]
 801cf32:	4798      	blx	r3
 801cf34:	4944      	ldr	r1, [pc, #272]	; (801d048 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x18c>)
 801cf36:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801cf3a:	2fff      	cmp	r7, #255	; 0xff
 801cf3c:	f8b1 c000 	ldrh.w	ip, [r1]
 801cf40:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 801cf44:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801cf48:	4688      	mov	r8, r1
 801cf4a:	fb0c 2303 	mla	r3, ip, r3, r2
 801cf4e:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 801cf52:	b2f2      	uxtb	r2, r6
 801cf54:	ea24 76e4 	bic.w	r6, r4, r4, asr #31
 801cf58:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cf5c:	4418      	add	r0, r3
 801cf5e:	d112      	bne.n	801cf86 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xca>
 801cf60:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801cf64:	2100      	movs	r1, #0
 801cf66:	42a9      	cmp	r1, r5
 801cf68:	da66      	bge.n	801d038 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 801cf6a:	4603      	mov	r3, r0
 801cf6c:	2700      	movs	r7, #0
 801cf6e:	42a7      	cmp	r7, r4
 801cf70:	f103 0303 	add.w	r3, r3, #3
 801cf74:	da57      	bge.n	801d026 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16a>
 801cf76:	f803 2c03 	strb.w	r2, [r3, #-3]
 801cf7a:	3701      	adds	r7, #1
 801cf7c:	f803 ec02 	strb.w	lr, [r3, #-2]
 801cf80:	f803 cc01 	strb.w	ip, [r3, #-1]
 801cf84:	e7f3      	b.n	801cf6e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xb2>
 801cf86:	b2bb      	uxth	r3, r7
 801cf88:	f04f 0800 	mov.w	r8, #0
 801cf8c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801cf90:	fb0c fc03 	mul.w	ip, ip, r3
 801cf94:	fb0e fe03 	mul.w	lr, lr, r3
 801cf98:	435a      	muls	r2, r3
 801cf9a:	f1c7 03ff 	rsb	r3, r7, #255	; 0xff
 801cf9e:	460f      	mov	r7, r1
 801cfa0:	b29b      	uxth	r3, r3
 801cfa2:	45a8      	cmp	r8, r5
 801cfa4:	da48      	bge.n	801d038 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 801cfa6:	4601      	mov	r1, r0
 801cfa8:	f04f 0a00 	mov.w	sl, #0
 801cfac:	45a2      	cmp	sl, r4
 801cfae:	f101 0103 	add.w	r1, r1, #3
 801cfb2:	da2f      	bge.n	801d014 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x158>
 801cfb4:	f811 9c03 	ldrb.w	r9, [r1, #-3]
 801cfb8:	f10a 0a01 	add.w	sl, sl, #1
 801cfbc:	fb19 f903 	smulbb	r9, r9, r3
 801cfc0:	4491      	add	r9, r2
 801cfc2:	fa1f f989 	uxth.w	r9, r9
 801cfc6:	f109 0b01 	add.w	fp, r9, #1
 801cfca:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801cfce:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cfd2:	f801 9c03 	strb.w	r9, [r1, #-3]
 801cfd6:	f811 9c02 	ldrb.w	r9, [r1, #-2]
 801cfda:	fb19 f903 	smulbb	r9, r9, r3
 801cfde:	44f1      	add	r9, lr
 801cfe0:	fa1f f989 	uxth.w	r9, r9
 801cfe4:	f109 0b01 	add.w	fp, r9, #1
 801cfe8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801cfec:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cff0:	f801 9c02 	strb.w	r9, [r1, #-2]
 801cff4:	f811 9c01 	ldrb.w	r9, [r1, #-1]
 801cff8:	fb19 f903 	smulbb	r9, r9, r3
 801cffc:	44e1      	add	r9, ip
 801cffe:	fa1f f989 	uxth.w	r9, r9
 801d002:	f109 0b01 	add.w	fp, r9, #1
 801d006:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d00a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d00e:	f801 9c01 	strb.w	r9, [r1, #-1]
 801d012:	e7cb      	b.n	801cfac <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xf0>
 801d014:	8839      	ldrh	r1, [r7, #0]
 801d016:	f108 0801 	add.w	r8, r8, #1
 801d01a:	1b09      	subs	r1, r1, r4
 801d01c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d020:	4431      	add	r1, r6
 801d022:	4408      	add	r0, r1
 801d024:	e7bd      	b.n	801cfa2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xe6>
 801d026:	f8b8 3000 	ldrh.w	r3, [r8]
 801d02a:	3101      	adds	r1, #1
 801d02c:	1b1b      	subs	r3, r3, r4
 801d02e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d032:	4433      	add	r3, r6
 801d034:	4418      	add	r0, r3
 801d036:	e796      	b.n	801cf66 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xaa>
 801d038:	4b02      	ldr	r3, [pc, #8]	; (801d044 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 801d03a:	6818      	ldr	r0, [r3, #0]
 801d03c:	6803      	ldr	r3, [r0, #0]
 801d03e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d040:	4798      	blx	r3
 801d042:	e769      	b.n	801cf18 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801d044:	2000bc7c 	.word	0x2000bc7c
 801d048:	2000bc76 	.word	0x2000bc76

0801d04c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801d04c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d050:	b08d      	sub	sp, #52	; 0x34
 801d052:	460c      	mov	r4, r1
 801d054:	4617      	mov	r7, r2
 801d056:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
 801d05a:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
 801d05e:	2e00      	cmp	r6, #0
 801d060:	d04a      	beq.n	801d0f8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801d062:	6810      	ldr	r0, [r2, #0]
 801d064:	ad08      	add	r5, sp, #32
 801d066:	6851      	ldr	r1, [r2, #4]
 801d068:	c503      	stmia	r5!, {r0, r1}
 801d06a:	6818      	ldr	r0, [r3, #0]
 801d06c:	ad0a      	add	r5, sp, #40	; 0x28
 801d06e:	6859      	ldr	r1, [r3, #4]
 801d070:	c503      	stmia	r5!, {r0, r1}
 801d072:	a808      	add	r0, sp, #32
 801d074:	f7fb fca4 	bl	80189c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d078:	4639      	mov	r1, r7
 801d07a:	a80a      	add	r0, sp, #40	; 0x28
 801d07c:	4f59      	ldr	r7, [pc, #356]	; (801d1e4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>)
 801d07e:	f7fb fc87 	bl	8018990 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d082:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801d086:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801d08a:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801d08e:	6838      	ldr	r0, [r7, #0]
 801d090:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d094:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 801d098:	f9bd 802e 	ldrsh.w	r8, [sp, #46]	; 0x2e
 801d09c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d0a0:	440c      	add	r4, r1
 801d0a2:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801d0a6:	440a      	add	r2, r1
 801d0a8:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801d0ac:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801d0b0:	4413      	add	r3, r2
 801d0b2:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801d0b6:	6803      	ldr	r3, [r0, #0]
 801d0b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d0ba:	4798      	blx	r3
 801d0bc:	2eff      	cmp	r6, #255	; 0xff
 801d0be:	f000 8089 	beq.w	801d1d4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x188>
 801d0c2:	0743      	lsls	r3, r0, #29
 801d0c4:	d405      	bmi.n	801d0d2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x86>
 801d0c6:	f1b9 0f00 	cmp.w	r9, #0
 801d0ca:	d018      	beq.n	801d0fe <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801d0cc:	f010 0f10 	tst.w	r0, #16
 801d0d0:	d015      	beq.n	801d0fe <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801d0d2:	6838      	ldr	r0, [r7, #0]
 801d0d4:	b2ad      	uxth	r5, r5
 801d0d6:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801d0da:	6801      	ldr	r1, [r0, #0]
 801d0dc:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801d0e0:	9500      	str	r5, [sp, #0]
 801d0e2:	e9cd 6903 	strd	r6, r9, [sp, #12]
 801d0e6:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 801d0ea:	9602      	str	r6, [sp, #8]
 801d0ec:	fa1f f688 	uxth.w	r6, r8
 801d0f0:	9601      	str	r6, [sp, #4]
 801d0f2:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 801d0f4:	4621      	mov	r1, r4
 801d0f6:	47a8      	blx	r5
 801d0f8:	b00d      	add	sp, #52	; 0x34
 801d0fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d0fe:	6838      	ldr	r0, [r7, #0]
 801d100:	6803      	ldr	r3, [r0, #0]
 801d102:	6a1b      	ldr	r3, [r3, #32]
 801d104:	4798      	blx	r3
 801d106:	4a38      	ldr	r2, [pc, #224]	; (801d1e8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>)
 801d108:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801d10c:	2eff      	cmp	r6, #255	; 0xff
 801d10e:	8813      	ldrh	r3, [r2, #0]
 801d110:	f9bd c02a 	ldrsh.w	ip, [sp, #42]	; 0x2a
 801d114:	fb0c 1303 	mla	r3, ip, r3, r1
 801d118:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 801d11c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d120:	4418      	add	r0, r3
 801d122:	d032      	beq.n	801d18a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801d124:	f1c6 03ff 	rsb	r3, r6, #255	; 0xff
 801d128:	f04f 0c00 	mov.w	ip, #0
 801d12c:	ea21 7ae1 	bic.w	sl, r1, r1, asr #31
 801d130:	9306      	str	r3, [sp, #24]
 801d132:	45c4      	cmp	ip, r8
 801d134:	da49      	bge.n	801d1ca <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801d136:	4686      	mov	lr, r0
 801d138:	46a1      	mov	r9, r4
 801d13a:	eba9 0304 	sub.w	r3, r9, r4
 801d13e:	428b      	cmp	r3, r1
 801d140:	da13      	bge.n	801d16a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11e>
 801d142:	f819 3b01 	ldrb.w	r3, [r9], #1
 801d146:	f89e b000 	ldrb.w	fp, [lr]
 801d14a:	9307      	str	r3, [sp, #28]
 801d14c:	9b06      	ldr	r3, [sp, #24]
 801d14e:	fb1b fb03 	smulbb	fp, fp, r3
 801d152:	9b07      	ldr	r3, [sp, #28]
 801d154:	fb03 b306 	mla	r3, r3, r6, fp
 801d158:	b29b      	uxth	r3, r3
 801d15a:	f103 0b01 	add.w	fp, r3, #1
 801d15e:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 801d162:	121b      	asrs	r3, r3, #8
 801d164:	f80e 3b01 	strb.w	r3, [lr], #1
 801d168:	e7e7      	b.n	801d13a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xee>
 801d16a:	8813      	ldrh	r3, [r2, #0]
 801d16c:	f10c 0c01 	add.w	ip, ip, #1
 801d170:	1b5b      	subs	r3, r3, r5
 801d172:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d176:	4453      	add	r3, sl
 801d178:	4418      	add	r0, r3
 801d17a:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801d17e:	1b5b      	subs	r3, r3, r5
 801d180:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d184:	4453      	add	r3, sl
 801d186:	441c      	add	r4, r3
 801d188:	e7d3      	b.n	801d132 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xe6>
 801d18a:	2600      	movs	r6, #0
 801d18c:	ea21 7ce1 	bic.w	ip, r1, r1, asr #31
 801d190:	4546      	cmp	r6, r8
 801d192:	da1a      	bge.n	801d1ca <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801d194:	f100 3eff 	add.w	lr, r0, #4294967295
 801d198:	4623      	mov	r3, r4
 801d19a:	eba3 0904 	sub.w	r9, r3, r4
 801d19e:	4589      	cmp	r9, r1
 801d1a0:	da04      	bge.n	801d1ac <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>
 801d1a2:	f813 9b01 	ldrb.w	r9, [r3], #1
 801d1a6:	f80e 9f01 	strb.w	r9, [lr, #1]!
 801d1aa:	e7f6      	b.n	801d19a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x14e>
 801d1ac:	8813      	ldrh	r3, [r2, #0]
 801d1ae:	3601      	adds	r6, #1
 801d1b0:	1b5b      	subs	r3, r3, r5
 801d1b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d1b6:	4463      	add	r3, ip
 801d1b8:	4418      	add	r0, r3
 801d1ba:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801d1be:	1b5b      	subs	r3, r3, r5
 801d1c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d1c4:	4463      	add	r3, ip
 801d1c6:	441c      	add	r4, r3
 801d1c8:	e7e2      	b.n	801d190 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x144>
 801d1ca:	6838      	ldr	r0, [r7, #0]
 801d1cc:	6803      	ldr	r3, [r0, #0]
 801d1ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d1d0:	4798      	blx	r3
 801d1d2:	e791      	b.n	801d0f8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801d1d4:	f1b9 0f00 	cmp.w	r9, #0
 801d1d8:	f47f af78 	bne.w	801d0cc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x80>
 801d1dc:	f010 0f01 	tst.w	r0, #1
 801d1e0:	e776      	b.n	801d0d0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x84>
 801d1e2:	bf00      	nop
 801d1e4:	2000bc7c 	.word	0x2000bc7c
 801d1e8:	2000bc76 	.word	0x2000bc76

0801d1ec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801d1ec:	b510      	push	{r4, lr}
 801d1ee:	4604      	mov	r4, r0
 801d1f0:	2104      	movs	r1, #4
 801d1f2:	f007 fcee 	bl	8024bd2 <_ZdlPvj>
 801d1f6:	4620      	mov	r0, r4
 801d1f8:	bd10      	pop	{r4, pc}

0801d1fa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801d1fa:	b510      	push	{r4, lr}
 801d1fc:	4604      	mov	r4, r0
 801d1fe:	2104      	movs	r1, #4
 801d200:	f007 fce7 	bl	8024bd2 <_ZdlPvj>
 801d204:	4620      	mov	r0, r4
 801d206:	bd10      	pop	{r4, pc}

0801d208 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801d208:	b510      	push	{r4, lr}
 801d20a:	4604      	mov	r4, r0
 801d20c:	2104      	movs	r1, #4
 801d20e:	f007 fce0 	bl	8024bd2 <_ZdlPvj>
 801d212:	4620      	mov	r0, r4
 801d214:	bd10      	pop	{r4, pc}

0801d216 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801d216:	b510      	push	{r4, lr}
 801d218:	4604      	mov	r4, r0
 801d21a:	2104      	movs	r1, #4
 801d21c:	f007 fcd9 	bl	8024bd2 <_ZdlPvj>
 801d220:	4620      	mov	r0, r4
 801d222:	bd10      	pop	{r4, pc}

0801d224 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801d224:	b510      	push	{r4, lr}
 801d226:	4604      	mov	r4, r0
 801d228:	2104      	movs	r1, #4
 801d22a:	f007 fcd2 	bl	8024bd2 <_ZdlPvj>
 801d22e:	4620      	mov	r0, r4
 801d230:	bd10      	pop	{r4, pc}

0801d232 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801d232:	b510      	push	{r4, lr}
 801d234:	4604      	mov	r4, r0
 801d236:	2104      	movs	r1, #4
 801d238:	f007 fccb 	bl	8024bd2 <_ZdlPvj>
 801d23c:	4620      	mov	r0, r4
 801d23e:	bd10      	pop	{r4, pc}

0801d240 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801d240:	b510      	push	{r4, lr}
 801d242:	4604      	mov	r4, r0
 801d244:	2104      	movs	r1, #4
 801d246:	f007 fcc4 	bl	8024bd2 <_ZdlPvj>
 801d24a:	4620      	mov	r0, r4
 801d24c:	bd10      	pop	{r4, pc}

0801d24e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801d24e:	b510      	push	{r4, lr}
 801d250:	4604      	mov	r4, r0
 801d252:	2104      	movs	r1, #4
 801d254:	f007 fcbd 	bl	8024bd2 <_ZdlPvj>
 801d258:	4620      	mov	r0, r4
 801d25a:	bd10      	pop	{r4, pc}

0801d25c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801d25c:	b510      	push	{r4, lr}
 801d25e:	4604      	mov	r4, r0
 801d260:	2104      	movs	r1, #4
 801d262:	f007 fcb6 	bl	8024bd2 <_ZdlPvj>
 801d266:	4620      	mov	r0, r4
 801d268:	bd10      	pop	{r4, pc}

0801d26a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801d26a:	b510      	push	{r4, lr}
 801d26c:	4604      	mov	r4, r0
 801d26e:	2104      	movs	r1, #4
 801d270:	f007 fcaf 	bl	8024bd2 <_ZdlPvj>
 801d274:	4620      	mov	r0, r4
 801d276:	bd10      	pop	{r4, pc}

0801d278 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801d278:	b510      	push	{r4, lr}
 801d27a:	4604      	mov	r4, r0
 801d27c:	2104      	movs	r1, #4
 801d27e:	f007 fca8 	bl	8024bd2 <_ZdlPvj>
 801d282:	4620      	mov	r0, r4
 801d284:	bd10      	pop	{r4, pc}

0801d286 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801d286:	b510      	push	{r4, lr}
 801d288:	4604      	mov	r4, r0
 801d28a:	2104      	movs	r1, #4
 801d28c:	f007 fca1 	bl	8024bd2 <_ZdlPvj>
 801d290:	4620      	mov	r0, r4
 801d292:	bd10      	pop	{r4, pc}

0801d294 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801d294:	b510      	push	{r4, lr}
 801d296:	4604      	mov	r4, r0
 801d298:	2104      	movs	r1, #4
 801d29a:	f007 fc9a 	bl	8024bd2 <_ZdlPvj>
 801d29e:	4620      	mov	r0, r4
 801d2a0:	bd10      	pop	{r4, pc}

0801d2a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801d2a2:	b510      	push	{r4, lr}
 801d2a4:	4604      	mov	r4, r0
 801d2a6:	2104      	movs	r1, #4
 801d2a8:	f007 fc93 	bl	8024bd2 <_ZdlPvj>
 801d2ac:	4620      	mov	r0, r4
 801d2ae:	bd10      	pop	{r4, pc}

0801d2b0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801d2b0:	b510      	push	{r4, lr}
 801d2b2:	4604      	mov	r4, r0
 801d2b4:	2104      	movs	r1, #4
 801d2b6:	f007 fc8c 	bl	8024bd2 <_ZdlPvj>
 801d2ba:	4620      	mov	r0, r4
 801d2bc:	bd10      	pop	{r4, pc}

0801d2be <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801d2be:	b510      	push	{r4, lr}
 801d2c0:	4604      	mov	r4, r0
 801d2c2:	2104      	movs	r1, #4
 801d2c4:	f007 fc85 	bl	8024bd2 <_ZdlPvj>
 801d2c8:	4620      	mov	r0, r4
 801d2ca:	bd10      	pop	{r4, pc}

0801d2cc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801d2cc:	b510      	push	{r4, lr}
 801d2ce:	4604      	mov	r4, r0
 801d2d0:	2104      	movs	r1, #4
 801d2d2:	f007 fc7e 	bl	8024bd2 <_ZdlPvj>
 801d2d6:	4620      	mov	r0, r4
 801d2d8:	bd10      	pop	{r4, pc}

0801d2da <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801d2da:	b510      	push	{r4, lr}
 801d2dc:	4604      	mov	r4, r0
 801d2de:	2104      	movs	r1, #4
 801d2e0:	f007 fc77 	bl	8024bd2 <_ZdlPvj>
 801d2e4:	4620      	mov	r0, r4
 801d2e6:	bd10      	pop	{r4, pc}

0801d2e8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801d2e8:	b510      	push	{r4, lr}
 801d2ea:	4604      	mov	r4, r0
 801d2ec:	2104      	movs	r1, #4
 801d2ee:	f007 fc70 	bl	8024bd2 <_ZdlPvj>
 801d2f2:	4620      	mov	r0, r4
 801d2f4:	bd10      	pop	{r4, pc}

0801d2f6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801d2f6:	b510      	push	{r4, lr}
 801d2f8:	4604      	mov	r4, r0
 801d2fa:	2104      	movs	r1, #4
 801d2fc:	f007 fc69 	bl	8024bd2 <_ZdlPvj>
 801d300:	4620      	mov	r0, r4
 801d302:	bd10      	pop	{r4, pc}

0801d304 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801d304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d308:	4d9e      	ldr	r5, [pc, #632]	; (801d584 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 801d30a:	4690      	mov	r8, r2
 801d30c:	b08f      	sub	sp, #60	; 0x3c
 801d30e:	4604      	mov	r4, r0
 801d310:	682a      	ldr	r2, [r5, #0]
 801d312:	4689      	mov	r9, r1
 801d314:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801d318:	2a02      	cmp	r2, #2
 801d31a:	d106      	bne.n	801d32a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801d31c:	4b9a      	ldr	r3, [pc, #616]	; (801d588 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 801d31e:	f44f 71cc 	mov.w	r1, #408	; 0x198
 801d322:	4a9a      	ldr	r2, [pc, #616]	; (801d58c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801d324:	489a      	ldr	r0, [pc, #616]	; (801d590 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28c>)
 801d326:	f007 fc7f 	bl	8024c28 <__assert_func>
 801d32a:	ae0e      	add	r6, sp, #56	; 0x38
 801d32c:	f826 3d24 	strh.w	r3, [r6, #-36]!
 801d330:	4630      	mov	r0, r6
 801d332:	f7fe f8b3 	bl	801b49c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801d336:	6823      	ldr	r3, [r4, #0]
 801d338:	4607      	mov	r7, r0
 801d33a:	4620      	mov	r0, r4
 801d33c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d33e:	4798      	blx	r3
 801d340:	4287      	cmp	r7, r0
 801d342:	d004      	beq.n	801d34e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801d344:	4b93      	ldr	r3, [pc, #588]	; (801d594 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 801d346:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 801d34a:	4a90      	ldr	r2, [pc, #576]	; (801d58c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801d34c:	e7ea      	b.n	801d324 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801d34e:	4630      	mov	r0, r6
 801d350:	f7fe f820 	bl	801b394 <_ZNK8touchgfx6Bitmap7getDataEv>
 801d354:	4607      	mov	r7, r0
 801d356:	b920      	cbnz	r0, 801d362 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801d358:	4b8f      	ldr	r3, [pc, #572]	; (801d598 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 801d35a:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 801d35e:	4a8b      	ldr	r2, [pc, #556]	; (801d58c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801d360:	e7e0      	b.n	801d324 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801d362:	f8d8 0000 	ldr.w	r0, [r8]
 801d366:	ab06      	add	r3, sp, #24
 801d368:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801d36c:	f9b8 a000 	ldrsh.w	sl, [r8]
 801d370:	c303      	stmia	r3!, {r0, r1}
 801d372:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801d376:	ab08      	add	r3, sp, #32
 801d378:	f8d9 0000 	ldr.w	r0, [r9]
 801d37c:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 801d380:	c303      	stmia	r3!, {r0, r1}
 801d382:	4630      	mov	r0, r6
 801d384:	f7fd fefe 	bl	801b184 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801d388:	4680      	mov	r8, r0
 801d38a:	4630      	mov	r0, r6
 801d38c:	4e83      	ldr	r6, [pc, #524]	; (801d59c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x298>)
 801d38e:	f7fd ff33 	bl	801b1f8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801d392:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801d396:	f10d 0920 	add.w	r9, sp, #32
 801d39a:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801d39e:	a806      	add	r0, sp, #24
 801d3a0:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801d3a4:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 801d3a8:	f7fb fb0a 	bl	80189c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d3ac:	4648      	mov	r0, r9
 801d3ae:	f7fb fb07 	bl	80189c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d3b2:	a80a      	add	r0, sp, #40	; 0x28
 801d3b4:	f7fb fb04 	bl	80189c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d3b8:	4b79      	ldr	r3, [pc, #484]	; (801d5a0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801d3ba:	2100      	movs	r1, #0
 801d3bc:	f9b6 2000 	ldrsh.w	r2, [r6]
 801d3c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d3c4:	4648      	mov	r0, r9
 801d3c6:	910c      	str	r1, [sp, #48]	; 0x30
 801d3c8:	a90c      	add	r1, sp, #48	; 0x30
 801d3ca:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801d3ce:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801d3d2:	f7f8 fac9 	bl	8015968 <_ZN8touchgfx4RectaNERKS0_>
 801d3d6:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 801d3da:	9602      	str	r6, [sp, #8]
 801d3dc:	f1bc 0f00 	cmp.w	ip, #0
 801d3e0:	f000 80a4 	beq.w	801d52c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801d3e4:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 801d3e8:	2e00      	cmp	r6, #0
 801d3ea:	f000 809f 	beq.w	801d52c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801d3ee:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801d3f2:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801d3f6:	4288      	cmp	r0, r1
 801d3f8:	db36      	blt.n	801d468 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801d3fa:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801d3fe:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801d402:	429a      	cmp	r2, r3
 801d404:	db30      	blt.n	801d468 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801d406:	4460      	add	r0, ip
 801d408:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 801d40c:	4461      	add	r1, ip
 801d40e:	b200      	sxth	r0, r0
 801d410:	b209      	sxth	r1, r1
 801d412:	4288      	cmp	r0, r1
 801d414:	dc28      	bgt.n	801d468 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801d416:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801d41a:	4432      	add	r2, r6
 801d41c:	440b      	add	r3, r1
 801d41e:	b212      	sxth	r2, r2
 801d420:	b21b      	sxth	r3, r3
 801d422:	429a      	cmp	r2, r3
 801d424:	dc20      	bgt.n	801d468 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801d426:	6823      	ldr	r3, [r4, #0]
 801d428:	4620      	mov	r0, r4
 801d42a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d42c:	4798      	blx	r3
 801d42e:	4682      	mov	sl, r0
 801d430:	6828      	ldr	r0, [r5, #0]
 801d432:	6803      	ldr	r3, [r0, #0]
 801d434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d436:	4798      	blx	r3
 801d438:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 801d43c:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801d440:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801d444:	9303      	str	r3, [sp, #12]
 801d446:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801d44a:	1a9b      	subs	r3, r3, r2
 801d44c:	b29b      	uxth	r3, r3
 801d44e:	b21c      	sxth	r4, r3
 801d450:	2c00      	cmp	r4, #0
 801d452:	dc0e      	bgt.n	801d472 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16e>
 801d454:	b134      	cbz	r4, 801d464 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x160>
 801d456:	f8ad 2020 	strh.w	r2, [sp, #32]
 801d45a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801d45e:	4413      	add	r3, r2
 801d460:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801d464:	463c      	mov	r4, r7
 801d466:	e00b      	b.n	801d480 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x17c>
 801d468:	4b4e      	ldr	r3, [pc, #312]	; (801d5a4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a0>)
 801d46a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801d46e:	4a47      	ldr	r2, [pc, #284]	; (801d58c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801d470:	e758      	b.n	801d324 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801d472:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d476:	ebab 0303 	sub.w	r3, fp, r3
 801d47a:	443c      	add	r4, r7
 801d47c:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801d480:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801d484:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801d488:	1a9b      	subs	r3, r3, r2
 801d48a:	b29b      	uxth	r3, r3
 801d48c:	b219      	sxth	r1, r3
 801d48e:	2900      	cmp	r1, #0
 801d490:	dd50      	ble.n	801d534 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x230>
 801d492:	9a03      	ldr	r2, [sp, #12]
 801d494:	fb02 4401 	mla	r4, r2, r1, r4
 801d498:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801d49c:	1ad3      	subs	r3, r2, r3
 801d49e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801d4a2:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801d4a6:	f1bc 0f00 	cmp.w	ip, #0
 801d4aa:	dd3f      	ble.n	801d52c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801d4ac:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801d4b0:	2e00      	cmp	r6, #0
 801d4b2:	dd3b      	ble.n	801d52c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801d4b4:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801d4b8:	2203      	movs	r2, #3
 801d4ba:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801d4be:	fb0a f801 	mul.w	r8, sl, r1
 801d4c2:	fb13 8802 	smlabb	r8, r3, r2, r8
 801d4c6:	9a02      	ldr	r2, [sp, #8]
 801d4c8:	4480      	add	r8, r0
 801d4ca:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 801d4ce:	8812      	ldrh	r2, [r2, #0]
 801d4d0:	4584      	cmp	ip, r0
 801d4d2:	eba2 0303 	sub.w	r3, r2, r3
 801d4d6:	bfa8      	it	ge
 801d4d8:	4684      	movge	ip, r0
 801d4da:	459c      	cmp	ip, r3
 801d4dc:	bfa8      	it	ge
 801d4de:	469c      	movge	ip, r3
 801d4e0:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 801d4e4:	429e      	cmp	r6, r3
 801d4e6:	bfa8      	it	ge
 801d4e8:	461e      	movge	r6, r3
 801d4ea:	4b2d      	ldr	r3, [pc, #180]	; (801d5a0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801d4ec:	881b      	ldrh	r3, [r3, #0]
 801d4ee:	1a59      	subs	r1, r3, r1
 801d4f0:	4633      	mov	r3, r6
 801d4f2:	428e      	cmp	r6, r1
 801d4f4:	bfa8      	it	ge
 801d4f6:	460b      	movge	r3, r1
 801d4f8:	4562      	cmp	r2, ip
 801d4fa:	9302      	str	r3, [sp, #8]
 801d4fc:	d12d      	bne.n	801d55a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801d4fe:	455a      	cmp	r2, fp
 801d500:	d12b      	bne.n	801d55a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801d502:	6828      	ldr	r0, [r5, #0]
 801d504:	6803      	ldr	r3, [r0, #0]
 801d506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d508:	4798      	blx	r3
 801d50a:	07c3      	lsls	r3, r0, #31
 801d50c:	d51b      	bpl.n	801d546 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x242>
 801d50e:	6828      	ldr	r0, [r5, #0]
 801d510:	9b02      	ldr	r3, [sp, #8]
 801d512:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 801d516:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801d51a:	6803      	ldr	r3, [r0, #0]
 801d51c:	f8cd b000 	str.w	fp, [sp]
 801d520:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 801d522:	4623      	mov	r3, r4
 801d524:	e899 0006 	ldmia.w	r9, {r1, r2}
 801d528:	47a8      	blx	r5
 801d52a:	4607      	mov	r7, r0
 801d52c:	4638      	mov	r0, r7
 801d52e:	b00f      	add	sp, #60	; 0x3c
 801d530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d534:	bf1f      	itttt	ne
 801d536:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 801d53a:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 801d53e:	189b      	addne	r3, r3, r2
 801d540:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 801d544:	e7ad      	b.n	801d4a2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19e>
 801d546:	6828      	ldr	r0, [r5, #0]
 801d548:	4642      	mov	r2, r8
 801d54a:	4621      	mov	r1, r4
 801d54c:	6803      	ldr	r3, [r0, #0]
 801d54e:	6add      	ldr	r5, [r3, #44]	; 0x2c
 801d550:	9b02      	ldr	r3, [sp, #8]
 801d552:	fb03 f30a 	mul.w	r3, r3, sl
 801d556:	47a8      	blx	r5
 801d558:	e7e8      	b.n	801d52c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801d55a:	eb0c 0b4c 	add.w	fp, ip, ip, lsl #1
 801d55e:	f04f 0900 	mov.w	r9, #0
 801d562:	9b02      	ldr	r3, [sp, #8]
 801d564:	454b      	cmp	r3, r9
 801d566:	dde1      	ble.n	801d52c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801d568:	6828      	ldr	r0, [r5, #0]
 801d56a:	4642      	mov	r2, r8
 801d56c:	4621      	mov	r1, r4
 801d56e:	44d0      	add	r8, sl
 801d570:	6803      	ldr	r3, [r0, #0]
 801d572:	f109 0901 	add.w	r9, r9, #1
 801d576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d578:	461e      	mov	r6, r3
 801d57a:	465b      	mov	r3, fp
 801d57c:	47b0      	blx	r6
 801d57e:	9b03      	ldr	r3, [sp, #12]
 801d580:	441c      	add	r4, r3
 801d582:	e7ee      	b.n	801d562 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x25e>
 801d584:	2000bc7c 	.word	0x2000bc7c
 801d588:	08029481 	.word	0x08029481
 801d58c:	08029c61 	.word	0x08029c61
 801d590:	0802944f 	.word	0x0802944f
 801d594:	08029535 	.word	0x08029535
 801d598:	0802958a 	.word	0x0802958a
 801d59c:	2000bc76 	.word	0x2000bc76
 801d5a0:	2000bc78 	.word	0x2000bc78
 801d5a4:	080295c8 	.word	0x080295c8

0801d5a8 <_ZN8touchgfx8LCD24bppC1Ev>:
 801d5a8:	4a0b      	ldr	r2, [pc, #44]	; (801d5d8 <_ZN8touchgfx8LCD24bppC1Ev+0x30>)
 801d5aa:	6002      	str	r2, [r0, #0]
 801d5ac:	2200      	movs	r2, #0
 801d5ae:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801d5b2:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801d5b6:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801d5ba:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801d5be:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801d5c2:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801d5c6:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801d5ca:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801d5ce:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801d5d2:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801d5d6:	4770      	bx	lr
 801d5d8:	080298ac 	.word	0x080298ac

0801d5dc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801d5dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d5e0:	b093      	sub	sp, #76	; 0x4c
 801d5e2:	880c      	ldrh	r4, [r1, #0]
 801d5e4:	4605      	mov	r5, r0
 801d5e6:	460f      	mov	r7, r1
 801d5e8:	4691      	mov	r9, r2
 801d5ea:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 801d5ee:	b12c      	cbz	r4, 801d5fc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 801d5f0:	4b71      	ldr	r3, [pc, #452]	; (801d7b8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801d5f2:	2167      	movs	r1, #103	; 0x67
 801d5f4:	4a71      	ldr	r2, [pc, #452]	; (801d7bc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 801d5f6:	4872      	ldr	r0, [pc, #456]	; (801d7c0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801d5f8:	f007 fb16 	bl	8024c28 <__assert_func>
 801d5fc:	6810      	ldr	r0, [r2, #0]
 801d5fe:	ae0e      	add	r6, sp, #56	; 0x38
 801d600:	6851      	ldr	r1, [r2, #4]
 801d602:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 801d7c8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ec>
 801d606:	c603      	stmia	r6!, {r0, r1}
 801d608:	6818      	ldr	r0, [r3, #0]
 801d60a:	ae10      	add	r6, sp, #64	; 0x40
 801d60c:	6859      	ldr	r1, [r3, #4]
 801d60e:	c603      	stmia	r6!, {r0, r1}
 801d610:	a80e      	add	r0, sp, #56	; 0x38
 801d612:	f7fb f9d5 	bl	80189c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d616:	4649      	mov	r1, r9
 801d618:	a810      	add	r0, sp, #64	; 0x40
 801d61a:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 801d7c4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 801d61e:	f7fb f9b7 	bl	8018990 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d622:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801d626:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801d62a:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801d62e:	f8d9 0000 	ldr.w	r0, [r9]
 801d632:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d636:	f9bd 6044 	ldrsh.w	r6, [sp, #68]	; 0x44
 801d63a:	440d      	add	r5, r1
 801d63c:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801d640:	440a      	add	r2, r1
 801d642:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801d646:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801d64a:	4413      	add	r3, r2
 801d64c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801d650:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 801d654:	930b      	str	r3, [sp, #44]	; 0x2c
 801d656:	6803      	ldr	r3, [r0, #0]
 801d658:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801d65c:	4798      	blx	r3
 801d65e:	2801      	cmp	r0, #1
 801d660:	d11e      	bne.n	801d6a0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc4>
 801d662:	220b      	movs	r2, #11
 801d664:	9008      	str	r0, [sp, #32]
 801d666:	b2b6      	uxth	r6, r6
 801d668:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801d66c:	9207      	str	r2, [sp, #28]
 801d66e:	4629      	mov	r1, r5
 801d670:	f8ba 2000 	ldrh.w	r2, [sl]
 801d674:	f8cd 8010 	str.w	r8, [sp, #16]
 801d678:	9601      	str	r6, [sp, #4]
 801d67a:	e9cd 0205 	strd	r0, r2, [sp, #20]
 801d67e:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801d682:	9203      	str	r2, [sp, #12]
 801d684:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801d688:	9202      	str	r2, [sp, #8]
 801d68a:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801d68e:	9200      	str	r2, [sp, #0]
 801d690:	463a      	mov	r2, r7
 801d692:	f8d9 0000 	ldr.w	r0, [r9]
 801d696:	f7f8 fdb5 	bl	8016204 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801d69a:	b013      	add	sp, #76	; 0x4c
 801d69c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d6a0:	f8d9 0000 	ldr.w	r0, [r9]
 801d6a4:	ea26 79e6 	bic.w	r9, r6, r6, asr #31
 801d6a8:	6803      	ldr	r3, [r0, #0]
 801d6aa:	6a1b      	ldr	r3, [r3, #32]
 801d6ac:	4798      	blx	r3
 801d6ae:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801d6b2:	f8ba 3000 	ldrh.w	r3, [sl]
 801d6b6:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801d6ba:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801d6be:	fb01 2303 	mla	r3, r1, r3, r2
 801d6c2:	4621      	mov	r1, r4
 801d6c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d6c8:	4418      	add	r0, r3
 801d6ca:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 801d6ce:	930c      	str	r3, [sp, #48]	; 0x30
 801d6d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d6d2:	4299      	cmp	r1, r3
 801d6d4:	da6a      	bge.n	801d7ac <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d0>
 801d6d6:	1cc2      	adds	r2, r0, #3
 801d6d8:	46aa      	mov	sl, r5
 801d6da:	ebaa 0305 	sub.w	r3, sl, r5
 801d6de:	429e      	cmp	r6, r3
 801d6e0:	dd55      	ble.n	801d78e <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b2>
 801d6e2:	2404      	movs	r4, #4
 801d6e4:	f81a 3b01 	ldrb.w	r3, [sl], #1
 801d6e8:	fb14 4303 	smlabb	r3, r4, r3, r4
 801d6ec:	eb07 0e03 	add.w	lr, r7, r3
 801d6f0:	f89e 4003 	ldrb.w	r4, [lr, #3]
 801d6f4:	b184      	cbz	r4, 801d718 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 801d6f6:	2cff      	cmp	r4, #255	; 0xff
 801d6f8:	f817 b003 	ldrb.w	fp, [r7, r3]
 801d6fc:	d10e      	bne.n	801d71c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801d6fe:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801d702:	d10b      	bne.n	801d71c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801d704:	f802 bc03 	strb.w	fp, [r2, #-3]
 801d708:	f89e 3001 	ldrb.w	r3, [lr, #1]
 801d70c:	f802 3c02 	strb.w	r3, [r2, #-2]
 801d710:	f89e 3002 	ldrb.w	r3, [lr, #2]
 801d714:	f802 3c01 	strb.w	r3, [r2, #-1]
 801d718:	3203      	adds	r2, #3
 801d71a:	e7de      	b.n	801d6da <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfe>
 801d71c:	fb08 f404 	mul.w	r4, r8, r4
 801d720:	f812 cc03 	ldrb.w	ip, [r2, #-3]
 801d724:	1c63      	adds	r3, r4, #1
 801d726:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 801d72a:	121b      	asrs	r3, r3, #8
 801d72c:	b29c      	uxth	r4, r3
 801d72e:	43db      	mvns	r3, r3
 801d730:	fb1b fb04 	smulbb	fp, fp, r4
 801d734:	b2db      	uxtb	r3, r3
 801d736:	fb0c bc03 	mla	ip, ip, r3, fp
 801d73a:	fa1f fc8c 	uxth.w	ip, ip
 801d73e:	f10c 0b01 	add.w	fp, ip, #1
 801d742:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d746:	f812 bc02 	ldrb.w	fp, [r2, #-2]
 801d74a:	fb1b fb03 	smulbb	fp, fp, r3
 801d74e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d752:	f802 cc03 	strb.w	ip, [r2, #-3]
 801d756:	f89e c001 	ldrb.w	ip, [lr, #1]
 801d75a:	fb0c bc04 	mla	ip, ip, r4, fp
 801d75e:	fa1f fc8c 	uxth.w	ip, ip
 801d762:	f10c 0b01 	add.w	fp, ip, #1
 801d766:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d76a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d76e:	f802 cc02 	strb.w	ip, [r2, #-2]
 801d772:	f812 cc01 	ldrb.w	ip, [r2, #-1]
 801d776:	f89e e002 	ldrb.w	lr, [lr, #2]
 801d77a:	fb1c f303 	smulbb	r3, ip, r3
 801d77e:	fb0e 3304 	mla	r3, lr, r4, r3
 801d782:	b29b      	uxth	r3, r3
 801d784:	1c5c      	adds	r4, r3, #1
 801d786:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801d78a:	121b      	asrs	r3, r3, #8
 801d78c:	e7c2      	b.n	801d714 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801d78e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d790:	3101      	adds	r1, #1
 801d792:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d794:	881b      	ldrh	r3, [r3, #0]
 801d796:	1b9b      	subs	r3, r3, r6
 801d798:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d79c:	4413      	add	r3, r2
 801d79e:	4418      	add	r0, r3
 801d7a0:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801d7a4:	1b9b      	subs	r3, r3, r6
 801d7a6:	444b      	add	r3, r9
 801d7a8:	441d      	add	r5, r3
 801d7aa:	e791      	b.n	801d6d0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801d7ac:	4b05      	ldr	r3, [pc, #20]	; (801d7c4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 801d7ae:	6818      	ldr	r0, [r3, #0]
 801d7b0:	6803      	ldr	r3, [r0, #0]
 801d7b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d7b4:	4798      	blx	r3
 801d7b6:	e770      	b.n	801d69a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 801d7b8:	080293b3 	.word	0x080293b3
 801d7bc:	08029a83 	.word	0x08029a83
 801d7c0:	0802944f 	.word	0x0802944f
 801d7c4:	2000bc7c 	.word	0x2000bc7c
 801d7c8:	2000bc76 	.word	0x2000bc76

0801d7cc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801d7cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7d0:	4614      	mov	r4, r2
 801d7d2:	880a      	ldrh	r2, [r1, #0]
 801d7d4:	b091      	sub	sp, #68	; 0x44
 801d7d6:	4680      	mov	r8, r0
 801d7d8:	2a01      	cmp	r2, #1
 801d7da:	460e      	mov	r6, r1
 801d7dc:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801d7e0:	d005      	beq.n	801d7ee <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22>
 801d7e2:	4b6d      	ldr	r3, [pc, #436]	; (801d998 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 801d7e4:	21b5      	movs	r1, #181	; 0xb5
 801d7e6:	4a6d      	ldr	r2, [pc, #436]	; (801d99c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>)
 801d7e8:	486d      	ldr	r0, [pc, #436]	; (801d9a0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 801d7ea:	f007 fa1d 	bl	8024c28 <__assert_func>
 801d7ee:	6820      	ldr	r0, [r4, #0]
 801d7f0:	ad0c      	add	r5, sp, #48	; 0x30
 801d7f2:	6861      	ldr	r1, [r4, #4]
 801d7f4:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 801d9a4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>
 801d7f8:	c503      	stmia	r5!, {r0, r1}
 801d7fa:	6818      	ldr	r0, [r3, #0]
 801d7fc:	ad0e      	add	r5, sp, #56	; 0x38
 801d7fe:	6859      	ldr	r1, [r3, #4]
 801d800:	c503      	stmia	r5!, {r0, r1}
 801d802:	a80c      	add	r0, sp, #48	; 0x30
 801d804:	f7fb f8dc 	bl	80189c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d808:	4621      	mov	r1, r4
 801d80a:	a80e      	add	r0, sp, #56	; 0x38
 801d80c:	f7fb f8c0 	bl	8018990 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d810:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801d814:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801d818:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801d81c:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 801d820:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d824:	eb08 0401 	add.w	r4, r8, r1
 801d828:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801d82c:	f8df 8178 	ldr.w	r8, [pc, #376]	; 801d9a8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>
 801d830:	440a      	add	r2, r1
 801d832:	f8d8 0000 	ldr.w	r0, [r8]
 801d836:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801d83a:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801d83e:	4413      	add	r3, r2
 801d840:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801d844:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801d848:	930a      	str	r3, [sp, #40]	; 0x28
 801d84a:	6803      	ldr	r3, [r0, #0]
 801d84c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801d850:	4798      	blx	r3
 801d852:	2801      	cmp	r0, #1
 801d854:	d11e      	bne.n	801d894 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc8>
 801d856:	220b      	movs	r2, #11
 801d858:	9008      	str	r0, [sp, #32]
 801d85a:	b2ad      	uxth	r5, r5
 801d85c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801d860:	9207      	str	r2, [sp, #28]
 801d862:	4621      	mov	r1, r4
 801d864:	f8b9 2000 	ldrh.w	r2, [r9]
 801d868:	9501      	str	r5, [sp, #4]
 801d86a:	9206      	str	r2, [sp, #24]
 801d86c:	2200      	movs	r2, #0
 801d86e:	e9cd 7204 	strd	r7, r2, [sp, #16]
 801d872:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801d876:	9203      	str	r2, [sp, #12]
 801d878:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801d87c:	9202      	str	r2, [sp, #8]
 801d87e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801d882:	9200      	str	r2, [sp, #0]
 801d884:	4632      	mov	r2, r6
 801d886:	f8d8 0000 	ldr.w	r0, [r8]
 801d88a:	f7f8 fcbb 	bl	8016204 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801d88e:	b011      	add	sp, #68	; 0x44
 801d890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d894:	f8d8 0000 	ldr.w	r0, [r8]
 801d898:	ea25 78e5 	bic.w	r8, r5, r5, asr #31
 801d89c:	6803      	ldr	r3, [r0, #0]
 801d89e:	6a1b      	ldr	r3, [r3, #32]
 801d8a0:	4798      	blx	r3
 801d8a2:	f8b9 3000 	ldrh.w	r3, [r9]
 801d8a6:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 801d8aa:	f04f 0e00 	mov.w	lr, #0
 801d8ae:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801d8b2:	fa1f f987 	uxth.w	r9, r7
 801d8b6:	fb01 2303 	mla	r3, r1, r3, r2
 801d8ba:	f1c7 01ff 	rsb	r1, r7, #255	; 0xff
 801d8be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d8c2:	b289      	uxth	r1, r1
 801d8c4:	4418      	add	r0, r3
 801d8c6:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801d8ca:	930b      	str	r3, [sp, #44]	; 0x2c
 801d8cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d8ce:	459e      	cmp	lr, r3
 801d8d0:	da5c      	bge.n	801d98c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>
 801d8d2:	1cc3      	adds	r3, r0, #3
 801d8d4:	46a2      	mov	sl, r4
 801d8d6:	ebaa 0204 	sub.w	r2, sl, r4
 801d8da:	4295      	cmp	r5, r2
 801d8dc:	dd46      	ble.n	801d96c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a0>
 801d8de:	f04f 0c03 	mov.w	ip, #3
 801d8e2:	f04f 0b04 	mov.w	fp, #4
 801d8e6:	f81a 2b01 	ldrb.w	r2, [sl], #1
 801d8ea:	2fff      	cmp	r7, #255	; 0xff
 801d8ec:	fb1c b202 	smlabb	r2, ip, r2, fp
 801d8f0:	eb06 0c02 	add.w	ip, r6, r2
 801d8f4:	f816 b002 	ldrb.w	fp, [r6, r2]
 801d8f8:	d02f      	beq.n	801d95a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18e>
 801d8fa:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 801d8fe:	fb12 f201 	smulbb	r2, r2, r1
 801d902:	fb0b 2209 	mla	r2, fp, r9, r2
 801d906:	b292      	uxth	r2, r2
 801d908:	f102 0b01 	add.w	fp, r2, #1
 801d90c:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801d910:	f813 bc02 	ldrb.w	fp, [r3, #-2]
 801d914:	fb1b fb01 	smulbb	fp, fp, r1
 801d918:	1212      	asrs	r2, r2, #8
 801d91a:	f803 2c03 	strb.w	r2, [r3, #-3]
 801d91e:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801d922:	fb02 b209 	mla	r2, r2, r9, fp
 801d926:	b292      	uxth	r2, r2
 801d928:	f102 0b01 	add.w	fp, r2, #1
 801d92c:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801d930:	1212      	asrs	r2, r2, #8
 801d932:	f803 2c02 	strb.w	r2, [r3, #-2]
 801d936:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801d93a:	f813 cc01 	ldrb.w	ip, [r3, #-1]
 801d93e:	fb1c fc01 	smulbb	ip, ip, r1
 801d942:	fb02 c209 	mla	r2, r2, r9, ip
 801d946:	b292      	uxth	r2, r2
 801d948:	f102 0c01 	add.w	ip, r2, #1
 801d94c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801d950:	1212      	asrs	r2, r2, #8
 801d952:	f803 2c01 	strb.w	r2, [r3, #-1]
 801d956:	3303      	adds	r3, #3
 801d958:	e7bd      	b.n	801d8d6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10a>
 801d95a:	f803 bc03 	strb.w	fp, [r3, #-3]
 801d95e:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801d962:	f803 2c02 	strb.w	r2, [r3, #-2]
 801d966:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801d96a:	e7f2      	b.n	801d952 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x186>
 801d96c:	4b0d      	ldr	r3, [pc, #52]	; (801d9a4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 801d96e:	f10e 0e01 	add.w	lr, lr, #1
 801d972:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d974:	881b      	ldrh	r3, [r3, #0]
 801d976:	1b5b      	subs	r3, r3, r5
 801d978:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d97c:	4413      	add	r3, r2
 801d97e:	4418      	add	r0, r3
 801d980:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801d984:	1b5b      	subs	r3, r3, r5
 801d986:	4443      	add	r3, r8
 801d988:	441c      	add	r4, r3
 801d98a:	e79f      	b.n	801d8cc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x100>
 801d98c:	4b06      	ldr	r3, [pc, #24]	; (801d9a8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801d98e:	6818      	ldr	r0, [r3, #0]
 801d990:	6803      	ldr	r3, [r0, #0]
 801d992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d994:	4798      	blx	r3
 801d996:	e77a      	b.n	801d88e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc2>
 801d998:	080292bf 	.word	0x080292bf
 801d99c:	08029976 	.word	0x08029976
 801d9a0:	0802944f 	.word	0x0802944f
 801d9a4:	2000bc76 	.word	0x2000bc76
 801d9a8:	2000bc7c 	.word	0x2000bc7c

0801d9ac <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801d9ac:	b570      	push	{r4, r5, r6, lr}
 801d9ae:	780d      	ldrb	r5, [r1, #0]
 801d9b0:	f89d 4010 	ldrb.w	r4, [sp, #16]
 801d9b4:	2d01      	cmp	r5, #1
 801d9b6:	d00d      	beq.n	801d9d4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 801d9b8:	d307      	bcc.n	801d9ca <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 801d9ba:	2d02      	cmp	r5, #2
 801d9bc:	d10f      	bne.n	801d9de <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 801d9be:	4b08      	ldr	r3, [pc, #32]	; (801d9e0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 801d9c0:	215a      	movs	r1, #90	; 0x5a
 801d9c2:	4a08      	ldr	r2, [pc, #32]	; (801d9e4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 801d9c4:	4808      	ldr	r0, [pc, #32]	; (801d9e8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 801d9c6:	f007 f92f 	bl	8024c28 <__assert_func>
 801d9ca:	9404      	str	r4, [sp, #16]
 801d9cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d9d0:	f7ff be04 	b.w	801d5dc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801d9d4:	9404      	str	r4, [sp, #16]
 801d9d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d9da:	f7ff bef7 	b.w	801d7cc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801d9de:	bd70      	pop	{r4, r5, r6, pc}
 801d9e0:	08029274 	.word	0x08029274
 801d9e4:	080298f4 	.word	0x080298f4
 801d9e8:	0802944f 	.word	0x0802944f

0801d9ec <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801d9ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d9f0:	b08b      	sub	sp, #44	; 0x2c
 801d9f2:	460c      	mov	r4, r1
 801d9f4:	4680      	mov	r8, r0
 801d9f6:	469a      	mov	sl, r3
 801d9f8:	6808      	ldr	r0, [r1, #0]
 801d9fa:	ab06      	add	r3, sp, #24
 801d9fc:	6849      	ldr	r1, [r1, #4]
 801d9fe:	c303      	stmia	r3!, {r0, r1}
 801da00:	6810      	ldr	r0, [r2, #0]
 801da02:	ab08      	add	r3, sp, #32
 801da04:	6851      	ldr	r1, [r2, #4]
 801da06:	c303      	stmia	r3!, {r0, r1}
 801da08:	a806      	add	r0, sp, #24
 801da0a:	f7fa ffd9 	bl	80189c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801da0e:	4621      	mov	r1, r4
 801da10:	a808      	add	r0, sp, #32
 801da12:	4c61      	ldr	r4, [pc, #388]	; (801db98 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 801da14:	f7fa ffbc 	bl	8018990 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801da18:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801da1c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801da20:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801da24:	6820      	ldr	r0, [r4, #0]
 801da26:	fb11 2103 	smlabb	r1, r1, r3, r2
 801da2a:	f9bd 7024 	ldrsh.w	r7, [sp, #36]	; 0x24
 801da2e:	f9bd 9026 	ldrsh.w	r9, [sp, #38]	; 0x26
 801da32:	eb08 0881 	add.w	r8, r8, r1, lsl #2
 801da36:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801da3a:	440a      	add	r2, r1
 801da3c:	f8ad 2020 	strh.w	r2, [sp, #32]
 801da40:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801da44:	4413      	add	r3, r2
 801da46:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801da4a:	6803      	ldr	r3, [r0, #0]
 801da4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801da4e:	4798      	blx	r3
 801da50:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801da54:	d118      	bne.n	801da88 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801da56:	f010 0f20 	tst.w	r0, #32
 801da5a:	6820      	ldr	r0, [r4, #0]
 801da5c:	d017      	beq.n	801da8e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801da5e:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801da62:	b2bf      	uxth	r7, r7
 801da64:	6801      	ldr	r1, [r0, #0]
 801da66:	9402      	str	r4, [sp, #8]
 801da68:	fa1f f489 	uxth.w	r4, r9
 801da6c:	f8cd a00c 	str.w	sl, [sp, #12]
 801da70:	9401      	str	r4, [sp, #4]
 801da72:	9700      	str	r7, [sp, #0]
 801da74:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801da78:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801da7a:	4641      	mov	r1, r8
 801da7c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801da80:	47a0      	blx	r4
 801da82:	b00b      	add	sp, #44	; 0x2c
 801da84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da88:	f010 0f40 	tst.w	r0, #64	; 0x40
 801da8c:	e7e5      	b.n	801da5a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801da8e:	6803      	ldr	r3, [r0, #0]
 801da90:	6a1b      	ldr	r3, [r3, #32]
 801da92:	4798      	blx	r3
 801da94:	4b41      	ldr	r3, [pc, #260]	; (801db9c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b0>)
 801da96:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801da9a:	f04f 0c00 	mov.w	ip, #0
 801da9e:	881a      	ldrh	r2, [r3, #0]
 801daa0:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801daa4:	fb04 1202 	mla	r2, r4, r2, r1
 801daa8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801daac:	4410      	add	r0, r2
 801daae:	ea27 72e7 	bic.w	r2, r7, r7, asr #31
 801dab2:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 801dab6:	0092      	lsls	r2, r2, #2
 801dab8:	9105      	str	r1, [sp, #20]
 801daba:	9204      	str	r2, [sp, #16]
 801dabc:	45cc      	cmp	ip, r9
 801dabe:	da65      	bge.n	801db8c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a0>
 801dac0:	1cc4      	adds	r4, r0, #3
 801dac2:	f108 0504 	add.w	r5, r8, #4
 801dac6:	f04f 0e00 	mov.w	lr, #0
 801daca:	45be      	cmp	lr, r7
 801dacc:	da4d      	bge.n	801db6a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17e>
 801dace:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801dad2:	b181      	cbz	r1, 801daf6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801dad4:	29ff      	cmp	r1, #255	; 0xff
 801dad6:	f815 bc04 	ldrb.w	fp, [r5, #-4]
 801dada:	d111      	bne.n	801db00 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801dadc:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801dae0:	d10e      	bne.n	801db00 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801dae2:	f804 bc03 	strb.w	fp, [r4, #-3]
 801dae6:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 801daea:	f804 2c02 	strb.w	r2, [r4, #-2]
 801daee:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 801daf2:	f804 2c01 	strb.w	r2, [r4, #-1]
 801daf6:	f10e 0e01 	add.w	lr, lr, #1
 801dafa:	3403      	adds	r4, #3
 801dafc:	3504      	adds	r5, #4
 801dafe:	e7e4      	b.n	801daca <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 801db00:	fb0a f101 	mul.w	r1, sl, r1
 801db04:	1c4a      	adds	r2, r1, #1
 801db06:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 801db0a:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801db0e:	1212      	asrs	r2, r2, #8
 801db10:	b296      	uxth	r6, r2
 801db12:	43d2      	mvns	r2, r2
 801db14:	fb1b fb06 	smulbb	fp, fp, r6
 801db18:	b2d2      	uxtb	r2, r2
 801db1a:	fb01 b102 	mla	r1, r1, r2, fp
 801db1e:	b289      	uxth	r1, r1
 801db20:	f101 0b01 	add.w	fp, r1, #1
 801db24:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801db28:	f814 bc02 	ldrb.w	fp, [r4, #-2]
 801db2c:	fb1b fb02 	smulbb	fp, fp, r2
 801db30:	1209      	asrs	r1, r1, #8
 801db32:	f804 1c03 	strb.w	r1, [r4, #-3]
 801db36:	f815 1c03 	ldrb.w	r1, [r5, #-3]
 801db3a:	fb01 b106 	mla	r1, r1, r6, fp
 801db3e:	b289      	uxth	r1, r1
 801db40:	f101 0b01 	add.w	fp, r1, #1
 801db44:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801db48:	1209      	asrs	r1, r1, #8
 801db4a:	f804 1c02 	strb.w	r1, [r4, #-2]
 801db4e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801db52:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801db56:	fb11 f202 	smulbb	r2, r1, r2
 801db5a:	fb0b 2206 	mla	r2, fp, r6, r2
 801db5e:	b292      	uxth	r2, r2
 801db60:	1c56      	adds	r6, r2, #1
 801db62:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801db66:	1212      	asrs	r2, r2, #8
 801db68:	e7c3      	b.n	801daf2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x106>
 801db6a:	881a      	ldrh	r2, [r3, #0]
 801db6c:	f10c 0c01 	add.w	ip, ip, #1
 801db70:	9905      	ldr	r1, [sp, #20]
 801db72:	1bd2      	subs	r2, r2, r7
 801db74:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801db78:	440a      	add	r2, r1
 801db7a:	9904      	ldr	r1, [sp, #16]
 801db7c:	4410      	add	r0, r2
 801db7e:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801db82:	1bd2      	subs	r2, r2, r7
 801db84:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801db88:	4490      	add	r8, r2
 801db8a:	e797      	b.n	801dabc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd0>
 801db8c:	4b02      	ldr	r3, [pc, #8]	; (801db98 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 801db8e:	6818      	ldr	r0, [r3, #0]
 801db90:	6803      	ldr	r3, [r0, #0]
 801db92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801db94:	4798      	blx	r3
 801db96:	e774      	b.n	801da82 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801db98:	2000bc7c 	.word	0x2000bc7c
 801db9c:	2000bc76 	.word	0x2000bc76

0801dba0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801dba0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801dba4:	b085      	sub	sp, #20
 801dba6:	4606      	mov	r6, r0
 801dba8:	460c      	mov	r4, r1
 801dbaa:	4691      	mov	r9, r2
 801dbac:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801dbb0:	4698      	mov	r8, r3
 801dbb2:	b385      	cbz	r5, 801dc16 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801dbb4:	4608      	mov	r0, r1
 801dbb6:	f7fd fae5 	bl	801b184 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801dbba:	4607      	mov	r7, r0
 801dbbc:	4620      	mov	r0, r4
 801dbbe:	f7fd fb1b 	bl	801b1f8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801dbc2:	f8ad 000e 	strh.w	r0, [sp, #14]
 801dbc6:	4620      	mov	r0, r4
 801dbc8:	f8ad 9008 	strh.w	r9, [sp, #8]
 801dbcc:	f8ad 800a 	strh.w	r8, [sp, #10]
 801dbd0:	f8ad 700c 	strh.w	r7, [sp, #12]
 801dbd4:	f7fd fc62 	bl	801b49c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801dbd8:	2801      	cmp	r0, #1
 801dbda:	d00f      	beq.n	801dbfc <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801dbdc:	4620      	mov	r0, r4
 801dbde:	f7fd fc5d 	bl	801b49c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801dbe2:	2802      	cmp	r0, #2
 801dbe4:	d00a      	beq.n	801dbfc <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801dbe6:	4620      	mov	r0, r4
 801dbe8:	f7fd fc58 	bl	801b49c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801dbec:	280b      	cmp	r0, #11
 801dbee:	d005      	beq.n	801dbfc <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801dbf0:	4b1b      	ldr	r3, [pc, #108]	; (801dc60 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>)
 801dbf2:	2142      	movs	r1, #66	; 0x42
 801dbf4:	4a1b      	ldr	r2, [pc, #108]	; (801dc64 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>)
 801dbf6:	481c      	ldr	r0, [pc, #112]	; (801dc68 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc8>)
 801dbf8:	f007 f816 	bl	8024c28 <__assert_func>
 801dbfc:	4620      	mov	r0, r4
 801dbfe:	f7fd fc4d 	bl	801b49c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801dc02:	2802      	cmp	r0, #2
 801dc04:	4620      	mov	r0, r4
 801dc06:	d109      	bne.n	801dc1c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7c>
 801dc08:	f7fd fbc4 	bl	801b394 <_ZNK8touchgfx6Bitmap7getDataEv>
 801dc0c:	462b      	mov	r3, r5
 801dc0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801dc10:	a902      	add	r1, sp, #8
 801dc12:	f7ff feeb 	bl	801d9ec <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801dc16:	b005      	add	sp, #20
 801dc18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801dc1c:	f7fd fc3e 	bl	801b49c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801dc20:	280b      	cmp	r0, #11
 801dc22:	d10e      	bne.n	801dc42 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 801dc24:	4620      	mov	r0, r4
 801dc26:	f7fd fbb5 	bl	801b394 <_ZNK8touchgfx6Bitmap7getDataEv>
 801dc2a:	4606      	mov	r6, r0
 801dc2c:	4620      	mov	r0, r4
 801dc2e:	f7fd fbe3 	bl	801b3f8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801dc32:	9500      	str	r5, [sp, #0]
 801dc34:	4601      	mov	r1, r0
 801dc36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dc38:	aa02      	add	r2, sp, #8
 801dc3a:	4630      	mov	r0, r6
 801dc3c:	f7ff feb6 	bl	801d9ac <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801dc40:	e7e9      	b.n	801dc16 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801dc42:	6833      	ldr	r3, [r6, #0]
 801dc44:	4620      	mov	r0, r4
 801dc46:	691f      	ldr	r7, [r3, #16]
 801dc48:	f7fd fba4 	bl	801b394 <_ZNK8touchgfx6Bitmap7getDataEv>
 801dc4c:	2300      	movs	r3, #0
 801dc4e:	4601      	mov	r1, r0
 801dc50:	aa02      	add	r2, sp, #8
 801dc52:	4630      	mov	r0, r6
 801dc54:	e9cd 5300 	strd	r5, r3, [sp]
 801dc58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dc5a:	47b8      	blx	r7
 801dc5c:	e7db      	b.n	801dc16 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801dc5e:	bf00      	nop
 801dc60:	0802930d 	.word	0x0802930d
 801dc64:	080299ff 	.word	0x080299ff
 801dc68:	0802944f 	.word	0x0802944f

0801dc6c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801dc6c:	b570      	push	{r4, r5, r6, lr}
 801dc6e:	9d04      	ldr	r5, [sp, #16]
 801dc70:	460c      	mov	r4, r1
 801dc72:	4619      	mov	r1, r3
 801dc74:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801dc78:	2a0c      	cmp	r2, #12
 801dc7a:	d826      	bhi.n	801dcca <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5e>
 801dc7c:	e8df f002 	tbb	[pc, r2]
 801dc80:	200e1407 	.word	0x200e1407
 801dc84:	20202020 	.word	0x20202020
 801dc88:	20202020 	.word	0x20202020
 801dc8c:	20          	.byte	0x20
 801dc8d:	00          	.byte	0x00
 801dc8e:	4b0f      	ldr	r3, [pc, #60]	; (801dccc <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 801dc90:	f240 117f 	movw	r1, #383	; 0x17f
 801dc94:	4a0e      	ldr	r2, [pc, #56]	; (801dcd0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801dc96:	480f      	ldr	r0, [pc, #60]	; (801dcd4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 801dc98:	f006 ffc6 	bl	8024c28 <__assert_func>
 801dc9c:	462a      	mov	r2, r5
 801dc9e:	4620      	mov	r0, r4
 801dca0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801dca4:	f7ff bea2 	b.w	801d9ec <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801dca8:	6802      	ldr	r2, [r0, #0]
 801dcaa:	2600      	movs	r6, #0
 801dcac:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801dcb0:	6916      	ldr	r6, [r2, #16]
 801dcb2:	462b      	mov	r3, r5
 801dcb4:	460a      	mov	r2, r1
 801dcb6:	4621      	mov	r1, r4
 801dcb8:	46b4      	mov	ip, r6
 801dcba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801dcbe:	4760      	bx	ip
 801dcc0:	4b05      	ldr	r3, [pc, #20]	; (801dcd8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 801dcc2:	f240 1191 	movw	r1, #401	; 0x191
 801dcc6:	4a02      	ldr	r2, [pc, #8]	; (801dcd0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801dcc8:	e7e5      	b.n	801dc96 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 801dcca:	bd70      	pop	{r4, r5, r6, pc}
 801dccc:	08029628 	.word	0x08029628
 801dcd0:	08029ce7 	.word	0x08029ce7
 801dcd4:	0802944f 	.word	0x0802944f
 801dcd8:	08029669 	.word	0x08029669

0801dcdc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801dcdc:	b158      	cbz	r0, 801dcf6 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 801dcde:	2902      	cmp	r1, #2
 801dce0:	d00f      	beq.n	801dd02 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 801dce2:	2903      	cmp	r1, #3
 801dce4:	d010      	beq.n	801dd08 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801dce6:	2901      	cmp	r1, #1
 801dce8:	d101      	bne.n	801dcee <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801dcea:	2001      	movs	r0, #1
 801dcec:	4770      	bx	lr
 801dcee:	4b08      	ldr	r3, [pc, #32]	; (801dd10 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801dcf0:	8819      	ldrh	r1, [r3, #0]
 801dcf2:	4248      	negs	r0, r1
 801dcf4:	4770      	bx	lr
 801dcf6:	2902      	cmp	r1, #2
 801dcf8:	d006      	beq.n	801dd08 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801dcfa:	2903      	cmp	r1, #3
 801dcfc:	d0f7      	beq.n	801dcee <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801dcfe:	2901      	cmp	r1, #1
 801dd00:	d1f3      	bne.n	801dcea <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 801dd02:	4b03      	ldr	r3, [pc, #12]	; (801dd10 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801dd04:	8818      	ldrh	r0, [r3, #0]
 801dd06:	4770      	bx	lr
 801dd08:	f04f 30ff 	mov.w	r0, #4294967295
 801dd0c:	4770      	bx	lr
 801dd0e:	bf00      	nop
 801dd10:	2000bc76 	.word	0x2000bc76

0801dd14 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801dd14:	b170      	cbz	r0, 801dd34 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 801dd16:	2902      	cmp	r1, #2
 801dd18:	d012      	beq.n	801dd40 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 801dd1a:	2903      	cmp	r1, #3
 801dd1c:	d006      	beq.n	801dd2c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801dd1e:	2901      	cmp	r1, #1
 801dd20:	d001      	beq.n	801dd26 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801dd22:	2001      	movs	r0, #1
 801dd24:	4770      	bx	lr
 801dd26:	4b08      	ldr	r3, [pc, #32]	; (801dd48 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801dd28:	8818      	ldrh	r0, [r3, #0]
 801dd2a:	4770      	bx	lr
 801dd2c:	4b06      	ldr	r3, [pc, #24]	; (801dd48 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801dd2e:	8818      	ldrh	r0, [r3, #0]
 801dd30:	4240      	negs	r0, r0
 801dd32:	4770      	bx	lr
 801dd34:	2902      	cmp	r1, #2
 801dd36:	d0f9      	beq.n	801dd2c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801dd38:	2903      	cmp	r1, #3
 801dd3a:	d0f2      	beq.n	801dd22 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 801dd3c:	2901      	cmp	r1, #1
 801dd3e:	d1f2      	bne.n	801dd26 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801dd40:	f04f 30ff 	mov.w	r0, #4294967295
 801dd44:	4770      	bx	lr
 801dd46:	bf00      	nop
 801dd48:	2000bc76 	.word	0x2000bc76

0801dd4c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801dd4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd50:	b095      	sub	sp, #84	; 0x54
 801dd52:	9109      	str	r1, [sp, #36]	; 0x24
 801dd54:	a910      	add	r1, sp, #64	; 0x40
 801dd56:	f9bd 5078 	ldrsh.w	r5, [sp, #120]	; 0x78
 801dd5a:	f8bd 6080 	ldrh.w	r6, [sp, #128]	; 0x80
 801dd5e:	f8bd 4084 	ldrh.w	r4, [sp, #132]	; 0x84
 801dd62:	f89d 809c 	ldrb.w	r8, [sp, #156]	; 0x9c
 801dd66:	f89d 90a4 	ldrb.w	r9, [sp, #164]	; 0xa4
 801dd6a:	e881 000c 	stmia.w	r1, {r2, r3}
 801dd6e:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
 801dd72:	9306      	str	r3, [sp, #24]
 801dd74:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 801dd78:	e9dd 2122 	ldrd	r2, r1, [sp, #136]	; 0x88
 801dd7c:	930e      	str	r3, [sp, #56]	; 0x38
 801dd7e:	f89d 30a0 	ldrb.w	r3, [sp, #160]	; 0xa0
 801dd82:	798f      	ldrb	r7, [r1, #6]
 801dd84:	930a      	str	r3, [sp, #40]	; 0x28
 801dd86:	7b4b      	ldrb	r3, [r1, #13]
 801dd88:	0158      	lsls	r0, r3, #5
 801dd8a:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801dd8e:	4338      	orrs	r0, r7
 801dd90:	9008      	str	r0, [sp, #32]
 801dd92:	f000 8174 	beq.w	801e07e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801dd96:	011b      	lsls	r3, r3, #4
 801dd98:	79c8      	ldrb	r0, [r1, #7]
 801dd9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801dd9e:	4303      	orrs	r3, r0
 801dda0:	9307      	str	r3, [sp, #28]
 801dda2:	f000 816c 	beq.w	801e07e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801dda6:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801ddaa:	b29b      	uxth	r3, r3
 801ddac:	2e00      	cmp	r6, #0
 801ddae:	f000 8112 	beq.w	801dfd6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x28a>
 801ddb2:	1af6      	subs	r6, r6, r3
 801ddb4:	b2b6      	uxth	r6, r6
 801ddb6:	0433      	lsls	r3, r6, #16
 801ddb8:	d502      	bpl.n	801ddc0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801ddba:	1bad      	subs	r5, r5, r6
 801ddbc:	2600      	movs	r6, #0
 801ddbe:	b22d      	sxth	r5, r5
 801ddc0:	f9b2 1000 	ldrsh.w	r1, [r2]
 801ddc4:	a810      	add	r0, sp, #64	; 0x40
 801ddc6:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801ddca:	428d      	cmp	r5, r1
 801ddcc:	b28b      	uxth	r3, r1
 801ddce:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 801ddd2:	bfbf      	itttt	lt
 801ddd4:	18f6      	addlt	r6, r6, r3
 801ddd6:	1b75      	sublt	r5, r6, r5
 801ddd8:	b2ae      	uxthlt	r6, r5
 801ddda:	460d      	movlt	r5, r1
 801dddc:	8891      	ldrh	r1, [r2, #4]
 801ddde:	440b      	add	r3, r1
 801dde0:	4629      	mov	r1, r5
 801dde2:	b21b      	sxth	r3, r3
 801dde4:	930d      	str	r3, [sp, #52]	; 0x34
 801dde6:	88d3      	ldrh	r3, [r2, #6]
 801dde8:	9a06      	ldr	r2, [sp, #24]
 801ddea:	449a      	add	sl, r3
 801ddec:	fa0f f38a 	sxth.w	r3, sl
 801ddf0:	f8bd a01c 	ldrh.w	sl, [sp, #28]
 801ddf4:	930c      	str	r3, [sp, #48]	; 0x30
 801ddf6:	4bb8      	ldr	r3, [pc, #736]	; (801e0d8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 801ddf8:	f893 b000 	ldrb.w	fp, [r3]
 801ddfc:	f10b 3cff 	add.w	ip, fp, #4294967295
 801de00:	f1dc 0300 	rsbs	r3, ip, #0
 801de04:	eb43 030c 	adc.w	r3, r3, ip
 801de08:	930b      	str	r3, [sp, #44]	; 0x2c
 801de0a:	464b      	mov	r3, r9
 801de0c:	f7fa fcb2 	bl	8018774 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801de10:	4629      	mov	r1, r5
 801de12:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
 801de16:	464b      	mov	r3, r9
 801de18:	9a06      	ldr	r2, [sp, #24]
 801de1a:	a810      	add	r0, sp, #64	; 0x40
 801de1c:	f7fa fcc2 	bl	80187a4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801de20:	a914      	add	r1, sp, #80	; 0x50
 801de22:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801de26:	a813      	add	r0, sp, #76	; 0x4c
 801de28:	f7fa fd9c 	bl	8018964 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801de2c:	f1b9 0f00 	cmp.w	r9, #0
 801de30:	f040 80d4 	bne.w	801dfdc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x290>
 801de34:	f1bb 0f01 	cmp.w	fp, #1
 801de38:	f040 80d8 	bne.w	801dfec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 801de3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801de3e:	2b00      	cmp	r3, #0
 801de40:	f040 8122 	bne.w	801e088 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33c>
 801de44:	4ba5      	ldr	r3, [pc, #660]	; (801e0dc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 801de46:	6818      	ldr	r0, [r3, #0]
 801de48:	6803      	ldr	r3, [r0, #0]
 801de4a:	6a1b      	ldr	r3, [r3, #32]
 801de4c:	4798      	blx	r3
 801de4e:	4aa4      	ldr	r2, [pc, #656]	; (801e0e0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>)
 801de50:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 801de54:	8811      	ldrh	r1, [r2, #0]
 801de56:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 801de5a:	fb01 2303 	mla	r3, r1, r3, r2
 801de5e:	2201      	movs	r2, #1
 801de60:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801de64:	4590      	cmp	r8, r2
 801de66:	4403      	add	r3, r0
 801de68:	9307      	str	r3, [sp, #28]
 801de6a:	fa02 f308 	lsl.w	r3, r2, r8
 801de6e:	f103 33ff 	add.w	r3, r3, #4294967295
 801de72:	b2db      	uxtb	r3, r3
 801de74:	930f      	str	r3, [sp, #60]	; 0x3c
 801de76:	f000 8109 	beq.w	801e08c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x340>
 801de7a:	f1b8 0f02 	cmp.w	r8, #2
 801de7e:	f000 813e 	beq.w	801e0fe <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b2>
 801de82:	f1b8 0f04 	cmp.w	r8, #4
 801de86:	f000 8132 	beq.w	801e0ee <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 801de8a:	b906      	cbnz	r6, 801de8e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x142>
 801de8c:	b174      	cbz	r4, 801deac <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x160>
 801de8e:	fb17 6304 	smlabb	r3, r7, r4, r6
 801de92:	9924      	ldr	r1, [sp, #144]	; 0x90
 801de94:	ebaa 0a04 	sub.w	sl, sl, r4
 801de98:	fb13 f308 	smulbb	r3, r3, r8
 801de9c:	fa1f fa8a 	uxth.w	sl, sl
 801dea0:	b29b      	uxth	r3, r3
 801dea2:	eb01 01d3 	add.w	r1, r1, r3, lsr #3
 801dea6:	f003 0407 	and.w	r4, r3, #7
 801deaa:	9124      	str	r1, [sp, #144]	; 0x90
 801deac:	4649      	mov	r1, r9
 801deae:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801deb0:	f7ff ff14 	bl	801dcdc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801deb4:	4649      	mov	r1, r9
 801deb6:	4683      	mov	fp, r0
 801deb8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801deba:	f7ff ff2b 	bl	801dd14 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801debe:	9906      	ldr	r1, [sp, #24]
 801dec0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dec2:	1bad      	subs	r5, r5, r6
 801dec4:	1a5b      	subs	r3, r3, r1
 801dec6:	459a      	cmp	sl, r3
 801dec8:	bfa8      	it	ge
 801deca:	469a      	movge	sl, r3
 801decc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dece:	1b5d      	subs	r5, r3, r5
 801ded0:	9b08      	ldr	r3, [sp, #32]
 801ded2:	429d      	cmp	r5, r3
 801ded4:	bfd4      	ite	le
 801ded6:	ebc6 0605 	rsble	r6, r6, r5
 801deda:	ebc6 0603 	rsbgt	r6, r6, r3
 801dede:	1bbf      	subs	r7, r7, r6
 801dee0:	fb0b 0016 	mls	r0, fp, r6, r0
 801dee4:	fb08 f307 	mul.w	r3, r8, r7
 801dee8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801deec:	9308      	str	r3, [sp, #32]
 801deee:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801def0:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801def4:	930b      	str	r3, [sp, #44]	; 0x2c
 801def6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801def8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801defc:	930c      	str	r3, [sp, #48]	; 0x30
 801defe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801df00:	b2db      	uxtb	r3, r3
 801df02:	930d      	str	r3, [sp, #52]	; 0x34
 801df04:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801df06:	7819      	ldrb	r1, [r3, #0]
 801df08:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801df0c:	ea26 7be6 	bic.w	fp, r6, r6, asr #31
 801df10:	4121      	asrs	r1, r4
 801df12:	9306      	str	r3, [sp, #24]
 801df14:	fb03 0b0b 	mla	fp, r3, fp, r0
 801df18:	b2c9      	uxtb	r1, r1
 801df1a:	f1ba 0f00 	cmp.w	sl, #0
 801df1e:	f340 80d1 	ble.w	801e0c4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801df22:	46b6      	mov	lr, r6
 801df24:	9807      	ldr	r0, [sp, #28]
 801df26:	f1be 0f00 	cmp.w	lr, #0
 801df2a:	f340 80b8 	ble.w	801e09e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 801df2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801df30:	400b      	ands	r3, r1
 801df32:	d03e      	beq.n	801dfb2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 801df34:	fb13 f302 	smulbb	r3, r3, r2
 801df38:	2bfe      	cmp	r3, #254	; 0xfe
 801df3a:	dd03      	ble.n	801df44 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f8>
 801df3c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801df3e:	2dff      	cmp	r5, #255	; 0xff
 801df40:	f000 80a6 	beq.w	801e090 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 801df44:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801df46:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801df48:	fb15 f303 	smulbb	r3, r5, r3
 801df4c:	b29b      	uxth	r3, r3
 801df4e:	1c5d      	adds	r5, r3, #1
 801df50:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801df54:	7805      	ldrb	r5, [r0, #0]
 801df56:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801df5a:	fa1f fc83 	uxth.w	ip, r3
 801df5e:	43db      	mvns	r3, r3
 801df60:	fb17 f90c 	smulbb	r9, r7, ip
 801df64:	b2db      	uxtb	r3, r3
 801df66:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801df68:	fb05 9503 	mla	r5, r5, r3, r9
 801df6c:	b2ad      	uxth	r5, r5
 801df6e:	f105 0901 	add.w	r9, r5, #1
 801df72:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801df76:	fb17 f90c 	smulbb	r9, r7, ip
 801df7a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801df7c:	122d      	asrs	r5, r5, #8
 801df7e:	fb17 fc0c 	smulbb	ip, r7, ip
 801df82:	7005      	strb	r5, [r0, #0]
 801df84:	7845      	ldrb	r5, [r0, #1]
 801df86:	fb05 9503 	mla	r5, r5, r3, r9
 801df8a:	b2ad      	uxth	r5, r5
 801df8c:	f105 0901 	add.w	r9, r5, #1
 801df90:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801df94:	122d      	asrs	r5, r5, #8
 801df96:	7045      	strb	r5, [r0, #1]
 801df98:	7885      	ldrb	r5, [r0, #2]
 801df9a:	fb05 cc03 	mla	ip, r5, r3, ip
 801df9e:	fa1f fc8c 	uxth.w	ip, ip
 801dfa2:	f10c 0301 	add.w	r3, ip, #1
 801dfa6:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801dfaa:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801dfae:	f880 c002 	strb.w	ip, [r0, #2]
 801dfb2:	4444      	add	r4, r8
 801dfb4:	f10e 3eff 	add.w	lr, lr, #4294967295
 801dfb8:	b2a4      	uxth	r4, r4
 801dfba:	2c07      	cmp	r4, #7
 801dfbc:	bf89      	itett	hi
 801dfbe:	9b24      	ldrhi	r3, [sp, #144]	; 0x90
 801dfc0:	fa41 f108 	asrls.w	r1, r1, r8
 801dfc4:	2400      	movhi	r4, #0
 801dfc6:	7859      	ldrbhi	r1, [r3, #1]
 801dfc8:	bf8a      	itet	hi
 801dfca:	3301      	addhi	r3, #1
 801dfcc:	b2c9      	uxtbls	r1, r1
 801dfce:	9324      	strhi	r3, [sp, #144]	; 0x90
 801dfd0:	9b06      	ldr	r3, [sp, #24]
 801dfd2:	4418      	add	r0, r3
 801dfd4:	e7a7      	b.n	801df26 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1da>
 801dfd6:	441d      	add	r5, r3
 801dfd8:	b22d      	sxth	r5, r5
 801dfda:	e6f1      	b.n	801ddc0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801dfdc:	f1b9 0f01 	cmp.w	r9, #1
 801dfe0:	f47f af2c 	bne.w	801de3c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801dfe4:	f1bb 0f01 	cmp.w	fp, #1
 801dfe8:	f47f af28 	bne.w	801de3c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801dfec:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 801e0dc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801dff0:	f8db 0000 	ldr.w	r0, [fp]
 801dff4:	6803      	ldr	r3, [r0, #0]
 801dff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801dff8:	4798      	blx	r3
 801dffa:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 801dffe:	465a      	mov	r2, fp
 801e000:	d006      	beq.n	801e010 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 801e002:	f1b8 0f04 	cmp.w	r8, #4
 801e006:	d13d      	bne.n	801e084 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x338>
 801e008:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e00a:	3300      	adds	r3, #0
 801e00c:	bf18      	it	ne
 801e00e:	2301      	movne	r3, #1
 801e010:	05c0      	lsls	r0, r0, #23
 801e012:	d567      	bpl.n	801e0e4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 801e014:	f1b8 0f08 	cmp.w	r8, #8
 801e018:	d164      	bne.n	801e0e4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 801e01a:	2b00      	cmp	r3, #0
 801e01c:	bf0c      	ite	eq
 801e01e:	f44f 7180 	moveq.w	r1, #256	; 0x100
 801e022:	2180      	movne	r1, #128	; 0x80
 801e024:	2e00      	cmp	r6, #0
 801e026:	f47f af09 	bne.w	801de3c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e02a:	2c00      	cmp	r4, #0
 801e02c:	f47f af06 	bne.w	801de3c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e030:	9b08      	ldr	r3, [sp, #32]
 801e032:	980d      	ldr	r0, [sp, #52]	; 0x34
 801e034:	442b      	add	r3, r5
 801e036:	4283      	cmp	r3, r0
 801e038:	f73f af00 	bgt.w	801de3c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e03c:	e9dd 0306 	ldrd	r0, r3, [sp, #24]
 801e040:	4403      	add	r3, r0
 801e042:	980c      	ldr	r0, [sp, #48]	; 0x30
 801e044:	4283      	cmp	r3, r0
 801e046:	f73f aef9 	bgt.w	801de3c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e04a:	f1b8 0f08 	cmp.w	r8, #8
 801e04e:	6810      	ldr	r0, [r2, #0]
 801e050:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 801e054:	bf18      	it	ne
 801e056:	3701      	addne	r7, #1
 801e058:	6804      	ldr	r4, [r0, #0]
 801e05a:	9105      	str	r1, [sp, #20]
 801e05c:	bf18      	it	ne
 801e05e:	f027 0701 	bicne.w	r7, r7, #1
 801e062:	990a      	ldr	r1, [sp, #40]	; 0x28
 801e064:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 801e068:	bf18      	it	ne
 801e06a:	b2bf      	uxthne	r7, r7
 801e06c:	9104      	str	r1, [sp, #16]
 801e06e:	9926      	ldr	r1, [sp, #152]	; 0x98
 801e070:	e9cd 7a00 	strd	r7, sl, [sp]
 801e074:	e9cd 7102 	strd	r7, r1, [sp, #8]
 801e078:	9924      	ldr	r1, [sp, #144]	; 0x90
 801e07a:	6c24      	ldr	r4, [r4, #64]	; 0x40
 801e07c:	47a0      	blx	r4
 801e07e:	b015      	add	sp, #84	; 0x54
 801e080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e084:	2300      	movs	r3, #0
 801e086:	e7c3      	b.n	801e010 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 801e088:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e08a:	e6e0      	b.n	801de4e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 801e08c:	22ff      	movs	r2, #255	; 0xff
 801e08e:	e6fc      	b.n	801de8a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801e090:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e092:	7003      	strb	r3, [r0, #0]
 801e094:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e096:	7043      	strb	r3, [r0, #1]
 801e098:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e09a:	7083      	strb	r3, [r0, #2]
 801e09c:	e789      	b.n	801dfb2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 801e09e:	9b08      	ldr	r3, [sp, #32]
 801e0a0:	b153      	cbz	r3, 801e0b8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x36c>
 801e0a2:	441c      	add	r4, r3
 801e0a4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e0a6:	b2a4      	uxth	r4, r4
 801e0a8:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801e0ac:	f004 0407 	and.w	r4, r4, #7
 801e0b0:	7819      	ldrb	r1, [r3, #0]
 801e0b2:	9324      	str	r3, [sp, #144]	; 0x90
 801e0b4:	4121      	asrs	r1, r4
 801e0b6:	b2c9      	uxtb	r1, r1
 801e0b8:	9b07      	ldr	r3, [sp, #28]
 801e0ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e0be:	445b      	add	r3, fp
 801e0c0:	9307      	str	r3, [sp, #28]
 801e0c2:	e72a      	b.n	801df1a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ce>
 801e0c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e0c6:	2b00      	cmp	r3, #0
 801e0c8:	d1d9      	bne.n	801e07e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801e0ca:	4b04      	ldr	r3, [pc, #16]	; (801e0dc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 801e0cc:	6818      	ldr	r0, [r3, #0]
 801e0ce:	6803      	ldr	r3, [r0, #0]
 801e0d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e0d2:	4798      	blx	r3
 801e0d4:	e7d3      	b.n	801e07e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801e0d6:	bf00      	nop
 801e0d8:	2000bc74 	.word	0x2000bc74
 801e0dc:	2000bc7c 	.word	0x2000bc7c
 801e0e0:	2000bc76 	.word	0x2000bc76
 801e0e4:	2b00      	cmp	r3, #0
 801e0e6:	f43f aea9 	beq.w	801de3c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e0ea:	2180      	movs	r1, #128	; 0x80
 801e0ec:	e79a      	b.n	801e024 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d8>
 801e0ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e0f0:	b11b      	cbz	r3, 801e0fa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 801e0f2:	07fb      	lsls	r3, r7, #31
 801e0f4:	d501      	bpl.n	801e0fa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 801e0f6:	3701      	adds	r7, #1
 801e0f8:	b2bf      	uxth	r7, r7
 801e0fa:	2211      	movs	r2, #17
 801e0fc:	e6c5      	b.n	801de8a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801e0fe:	2255      	movs	r2, #85	; 0x55
 801e100:	e6c3      	b.n	801de8a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801e102:	bf00      	nop

0801e104 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801e104:	b538      	push	{r3, r4, r5, lr}
 801e106:	4c15      	ldr	r4, [pc, #84]	; (801e15c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801e108:	4605      	mov	r5, r0
 801e10a:	7823      	ldrb	r3, [r4, #0]
 801e10c:	f3bf 8f5b 	dmb	ish
 801e110:	07da      	lsls	r2, r3, #31
 801e112:	d40b      	bmi.n	801e12c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801e114:	4620      	mov	r0, r4
 801e116:	f006 fd5e 	bl	8024bd6 <__cxa_guard_acquire>
 801e11a:	b138      	cbz	r0, 801e12c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801e11c:	4620      	mov	r0, r4
 801e11e:	f006 fd66 	bl	8024bee <__cxa_guard_release>
 801e122:	4a0f      	ldr	r2, [pc, #60]	; (801e160 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801e124:	490f      	ldr	r1, [pc, #60]	; (801e164 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801e126:	4810      	ldr	r0, [pc, #64]	; (801e168 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801e128:	f006 fd4b 	bl	8024bc2 <__aeabi_atexit>
 801e12c:	4c0f      	ldr	r4, [pc, #60]	; (801e16c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801e12e:	7823      	ldrb	r3, [r4, #0]
 801e130:	f3bf 8f5b 	dmb	ish
 801e134:	07db      	lsls	r3, r3, #31
 801e136:	d40b      	bmi.n	801e150 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801e138:	4620      	mov	r0, r4
 801e13a:	f006 fd4c 	bl	8024bd6 <__cxa_guard_acquire>
 801e13e:	b138      	cbz	r0, 801e150 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801e140:	4620      	mov	r0, r4
 801e142:	f006 fd54 	bl	8024bee <__cxa_guard_release>
 801e146:	4a06      	ldr	r2, [pc, #24]	; (801e160 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801e148:	4909      	ldr	r1, [pc, #36]	; (801e170 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801e14a:	480a      	ldr	r0, [pc, #40]	; (801e174 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801e14c:	f006 fd39 	bl	8024bc2 <__aeabi_atexit>
 801e150:	4b05      	ldr	r3, [pc, #20]	; (801e168 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801e152:	612b      	str	r3, [r5, #16]
 801e154:	4b07      	ldr	r3, [pc, #28]	; (801e174 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801e156:	616b      	str	r3, [r5, #20]
 801e158:	bd38      	pop	{r3, r4, r5, pc}
 801e15a:	bf00      	nop
 801e15c:	2000bd88 	.word	0x2000bd88
 801e160:	20000000 	.word	0x20000000
 801e164:	0801cd3b 	.word	0x0801cd3b
 801e168:	20000088 	.word	0x20000088
 801e16c:	2000bd8c 	.word	0x2000bd8c
 801e170:	0801cd39 	.word	0x0801cd39
 801e174:	2000008c 	.word	0x2000008c

0801e178 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801e178:	b538      	push	{r3, r4, r5, lr}
 801e17a:	4c15      	ldr	r4, [pc, #84]	; (801e1d0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801e17c:	4605      	mov	r5, r0
 801e17e:	7823      	ldrb	r3, [r4, #0]
 801e180:	f3bf 8f5b 	dmb	ish
 801e184:	07da      	lsls	r2, r3, #31
 801e186:	d40b      	bmi.n	801e1a0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801e188:	4620      	mov	r0, r4
 801e18a:	f006 fd24 	bl	8024bd6 <__cxa_guard_acquire>
 801e18e:	b138      	cbz	r0, 801e1a0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801e190:	4620      	mov	r0, r4
 801e192:	f006 fd2c 	bl	8024bee <__cxa_guard_release>
 801e196:	4a0f      	ldr	r2, [pc, #60]	; (801e1d4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801e198:	490f      	ldr	r1, [pc, #60]	; (801e1d8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801e19a:	4810      	ldr	r0, [pc, #64]	; (801e1dc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801e19c:	f006 fd11 	bl	8024bc2 <__aeabi_atexit>
 801e1a0:	4c0f      	ldr	r4, [pc, #60]	; (801e1e0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801e1a2:	7823      	ldrb	r3, [r4, #0]
 801e1a4:	f3bf 8f5b 	dmb	ish
 801e1a8:	07db      	lsls	r3, r3, #31
 801e1aa:	d40b      	bmi.n	801e1c4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801e1ac:	4620      	mov	r0, r4
 801e1ae:	f006 fd12 	bl	8024bd6 <__cxa_guard_acquire>
 801e1b2:	b138      	cbz	r0, 801e1c4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801e1b4:	4620      	mov	r0, r4
 801e1b6:	f006 fd1a 	bl	8024bee <__cxa_guard_release>
 801e1ba:	4a06      	ldr	r2, [pc, #24]	; (801e1d4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801e1bc:	4909      	ldr	r1, [pc, #36]	; (801e1e4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801e1be:	480a      	ldr	r0, [pc, #40]	; (801e1e8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801e1c0:	f006 fcff 	bl	8024bc2 <__aeabi_atexit>
 801e1c4:	4b05      	ldr	r3, [pc, #20]	; (801e1dc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801e1c6:	60ab      	str	r3, [r5, #8]
 801e1c8:	4b07      	ldr	r3, [pc, #28]	; (801e1e8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801e1ca:	60eb      	str	r3, [r5, #12]
 801e1cc:	bd38      	pop	{r3, r4, r5, pc}
 801e1ce:	bf00      	nop
 801e1d0:	2000bd68 	.word	0x2000bd68
 801e1d4:	20000000 	.word	0x20000000
 801e1d8:	0801cd3f 	.word	0x0801cd3f
 801e1dc:	20000068 	.word	0x20000068
 801e1e0:	2000bd6c 	.word	0x2000bd6c
 801e1e4:	0801cd3d 	.word	0x0801cd3d
 801e1e8:	2000006c 	.word	0x2000006c

0801e1ec <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801e1ec:	b510      	push	{r4, lr}
 801e1ee:	4604      	mov	r4, r0
 801e1f0:	f7ff ff88 	bl	801e104 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801e1f4:	4620      	mov	r0, r4
 801e1f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e1fa:	f7ff bfbd 	b.w	801e178 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801e200 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801e200:	b538      	push	{r3, r4, r5, lr}
 801e202:	4c15      	ldr	r4, [pc, #84]	; (801e258 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801e204:	4605      	mov	r5, r0
 801e206:	7823      	ldrb	r3, [r4, #0]
 801e208:	f3bf 8f5b 	dmb	ish
 801e20c:	07da      	lsls	r2, r3, #31
 801e20e:	d40b      	bmi.n	801e228 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801e210:	4620      	mov	r0, r4
 801e212:	f006 fce0 	bl	8024bd6 <__cxa_guard_acquire>
 801e216:	b138      	cbz	r0, 801e228 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801e218:	4620      	mov	r0, r4
 801e21a:	f006 fce8 	bl	8024bee <__cxa_guard_release>
 801e21e:	4a0f      	ldr	r2, [pc, #60]	; (801e25c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801e220:	490f      	ldr	r1, [pc, #60]	; (801e260 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801e222:	4810      	ldr	r0, [pc, #64]	; (801e264 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801e224:	f006 fccd 	bl	8024bc2 <__aeabi_atexit>
 801e228:	4c0f      	ldr	r4, [pc, #60]	; (801e268 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801e22a:	7823      	ldrb	r3, [r4, #0]
 801e22c:	f3bf 8f5b 	dmb	ish
 801e230:	07db      	lsls	r3, r3, #31
 801e232:	d40b      	bmi.n	801e24c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801e234:	4620      	mov	r0, r4
 801e236:	f006 fcce 	bl	8024bd6 <__cxa_guard_acquire>
 801e23a:	b138      	cbz	r0, 801e24c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801e23c:	4620      	mov	r0, r4
 801e23e:	f006 fcd6 	bl	8024bee <__cxa_guard_release>
 801e242:	4a06      	ldr	r2, [pc, #24]	; (801e25c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801e244:	4909      	ldr	r1, [pc, #36]	; (801e26c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801e246:	480a      	ldr	r0, [pc, #40]	; (801e270 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801e248:	f006 fcbb 	bl	8024bc2 <__aeabi_atexit>
 801e24c:	4b05      	ldr	r3, [pc, #20]	; (801e264 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801e24e:	622b      	str	r3, [r5, #32]
 801e250:	4b07      	ldr	r3, [pc, #28]	; (801e270 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801e252:	626b      	str	r3, [r5, #36]	; 0x24
 801e254:	bd38      	pop	{r3, r4, r5, pc}
 801e256:	bf00      	nop
 801e258:	2000bd90 	.word	0x2000bd90
 801e25c:	20000000 	.word	0x20000000
 801e260:	0801cd33 	.word	0x0801cd33
 801e264:	20000090 	.word	0x20000090
 801e268:	2000bd94 	.word	0x2000bd94
 801e26c:	0801cd31 	.word	0x0801cd31
 801e270:	20000094 	.word	0x20000094

0801e274 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801e274:	b538      	push	{r3, r4, r5, lr}
 801e276:	4c15      	ldr	r4, [pc, #84]	; (801e2cc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801e278:	4605      	mov	r5, r0
 801e27a:	7823      	ldrb	r3, [r4, #0]
 801e27c:	f3bf 8f5b 	dmb	ish
 801e280:	07da      	lsls	r2, r3, #31
 801e282:	d40b      	bmi.n	801e29c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801e284:	4620      	mov	r0, r4
 801e286:	f006 fca6 	bl	8024bd6 <__cxa_guard_acquire>
 801e28a:	b138      	cbz	r0, 801e29c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801e28c:	4620      	mov	r0, r4
 801e28e:	f006 fcae 	bl	8024bee <__cxa_guard_release>
 801e292:	4a0f      	ldr	r2, [pc, #60]	; (801e2d0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801e294:	490f      	ldr	r1, [pc, #60]	; (801e2d4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801e296:	4810      	ldr	r0, [pc, #64]	; (801e2d8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801e298:	f006 fc93 	bl	8024bc2 <__aeabi_atexit>
 801e29c:	4c0f      	ldr	r4, [pc, #60]	; (801e2dc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801e29e:	7823      	ldrb	r3, [r4, #0]
 801e2a0:	f3bf 8f5b 	dmb	ish
 801e2a4:	07db      	lsls	r3, r3, #31
 801e2a6:	d40b      	bmi.n	801e2c0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801e2a8:	4620      	mov	r0, r4
 801e2aa:	f006 fc94 	bl	8024bd6 <__cxa_guard_acquire>
 801e2ae:	b138      	cbz	r0, 801e2c0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801e2b0:	4620      	mov	r0, r4
 801e2b2:	f006 fc9c 	bl	8024bee <__cxa_guard_release>
 801e2b6:	4a06      	ldr	r2, [pc, #24]	; (801e2d0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801e2b8:	4909      	ldr	r1, [pc, #36]	; (801e2e0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801e2ba:	480a      	ldr	r0, [pc, #40]	; (801e2e4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801e2bc:	f006 fc81 	bl	8024bc2 <__aeabi_atexit>
 801e2c0:	4b05      	ldr	r3, [pc, #20]	; (801e2d8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801e2c2:	61ab      	str	r3, [r5, #24]
 801e2c4:	4b07      	ldr	r3, [pc, #28]	; (801e2e4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801e2c6:	61eb      	str	r3, [r5, #28]
 801e2c8:	bd38      	pop	{r3, r4, r5, pc}
 801e2ca:	bf00      	nop
 801e2cc:	2000bd70 	.word	0x2000bd70
 801e2d0:	20000000 	.word	0x20000000
 801e2d4:	0801cd37 	.word	0x0801cd37
 801e2d8:	20000070 	.word	0x20000070
 801e2dc:	2000bd74 	.word	0x2000bd74
 801e2e0:	0801cd35 	.word	0x0801cd35
 801e2e4:	20000074 	.word	0x20000074

0801e2e8 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801e2e8:	b510      	push	{r4, lr}
 801e2ea:	4604      	mov	r4, r0
 801e2ec:	f7ff ff88 	bl	801e200 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801e2f0:	4620      	mov	r0, r4
 801e2f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e2f6:	f7ff bfbd 	b.w	801e274 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801e2fc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801e2fc:	b538      	push	{r3, r4, r5, lr}
 801e2fe:	4c15      	ldr	r4, [pc, #84]	; (801e354 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801e300:	4605      	mov	r5, r0
 801e302:	7823      	ldrb	r3, [r4, #0]
 801e304:	f3bf 8f5b 	dmb	ish
 801e308:	07da      	lsls	r2, r3, #31
 801e30a:	d40b      	bmi.n	801e324 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801e30c:	4620      	mov	r0, r4
 801e30e:	f006 fc62 	bl	8024bd6 <__cxa_guard_acquire>
 801e312:	b138      	cbz	r0, 801e324 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801e314:	4620      	mov	r0, r4
 801e316:	f006 fc6a 	bl	8024bee <__cxa_guard_release>
 801e31a:	4a0f      	ldr	r2, [pc, #60]	; (801e358 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801e31c:	490f      	ldr	r1, [pc, #60]	; (801e35c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801e31e:	4810      	ldr	r0, [pc, #64]	; (801e360 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801e320:	f006 fc4f 	bl	8024bc2 <__aeabi_atexit>
 801e324:	4c0f      	ldr	r4, [pc, #60]	; (801e364 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801e326:	7823      	ldrb	r3, [r4, #0]
 801e328:	f3bf 8f5b 	dmb	ish
 801e32c:	07db      	lsls	r3, r3, #31
 801e32e:	d40b      	bmi.n	801e348 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801e330:	4620      	mov	r0, r4
 801e332:	f006 fc50 	bl	8024bd6 <__cxa_guard_acquire>
 801e336:	b138      	cbz	r0, 801e348 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801e338:	4620      	mov	r0, r4
 801e33a:	f006 fc58 	bl	8024bee <__cxa_guard_release>
 801e33e:	4a06      	ldr	r2, [pc, #24]	; (801e358 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801e340:	4909      	ldr	r1, [pc, #36]	; (801e368 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801e342:	480a      	ldr	r0, [pc, #40]	; (801e36c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801e344:	f006 fc3d 	bl	8024bc2 <__aeabi_atexit>
 801e348:	4b05      	ldr	r3, [pc, #20]	; (801e360 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801e34a:	632b      	str	r3, [r5, #48]	; 0x30
 801e34c:	4b07      	ldr	r3, [pc, #28]	; (801e36c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801e34e:	636b      	str	r3, [r5, #52]	; 0x34
 801e350:	bd38      	pop	{r3, r4, r5, pc}
 801e352:	bf00      	nop
 801e354:	2000bd78 	.word	0x2000bd78
 801e358:	20000000 	.word	0x20000000
 801e35c:	0801cd2b 	.word	0x0801cd2b
 801e360:	20000078 	.word	0x20000078
 801e364:	2000bd7c 	.word	0x2000bd7c
 801e368:	0801cd29 	.word	0x0801cd29
 801e36c:	2000007c 	.word	0x2000007c

0801e370 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801e370:	b538      	push	{r3, r4, r5, lr}
 801e372:	4c15      	ldr	r4, [pc, #84]	; (801e3c8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801e374:	4605      	mov	r5, r0
 801e376:	7823      	ldrb	r3, [r4, #0]
 801e378:	f3bf 8f5b 	dmb	ish
 801e37c:	07da      	lsls	r2, r3, #31
 801e37e:	d40b      	bmi.n	801e398 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801e380:	4620      	mov	r0, r4
 801e382:	f006 fc28 	bl	8024bd6 <__cxa_guard_acquire>
 801e386:	b138      	cbz	r0, 801e398 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801e388:	4620      	mov	r0, r4
 801e38a:	f006 fc30 	bl	8024bee <__cxa_guard_release>
 801e38e:	4a0f      	ldr	r2, [pc, #60]	; (801e3cc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801e390:	490f      	ldr	r1, [pc, #60]	; (801e3d0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801e392:	4810      	ldr	r0, [pc, #64]	; (801e3d4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801e394:	f006 fc15 	bl	8024bc2 <__aeabi_atexit>
 801e398:	4c0f      	ldr	r4, [pc, #60]	; (801e3d8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801e39a:	7823      	ldrb	r3, [r4, #0]
 801e39c:	f3bf 8f5b 	dmb	ish
 801e3a0:	07db      	lsls	r3, r3, #31
 801e3a2:	d40b      	bmi.n	801e3bc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801e3a4:	4620      	mov	r0, r4
 801e3a6:	f006 fc16 	bl	8024bd6 <__cxa_guard_acquire>
 801e3aa:	b138      	cbz	r0, 801e3bc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801e3ac:	4620      	mov	r0, r4
 801e3ae:	f006 fc1e 	bl	8024bee <__cxa_guard_release>
 801e3b2:	4a06      	ldr	r2, [pc, #24]	; (801e3cc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801e3b4:	4909      	ldr	r1, [pc, #36]	; (801e3dc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801e3b6:	480a      	ldr	r0, [pc, #40]	; (801e3e0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801e3b8:	f006 fc03 	bl	8024bc2 <__aeabi_atexit>
 801e3bc:	4b05      	ldr	r3, [pc, #20]	; (801e3d4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801e3be:	62ab      	str	r3, [r5, #40]	; 0x28
 801e3c0:	4b07      	ldr	r3, [pc, #28]	; (801e3e0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801e3c2:	62eb      	str	r3, [r5, #44]	; 0x2c
 801e3c4:	bd38      	pop	{r3, r4, r5, pc}
 801e3c6:	bf00      	nop
 801e3c8:	2000bd50 	.word	0x2000bd50
 801e3cc:	20000000 	.word	0x20000000
 801e3d0:	0801cd2f 	.word	0x0801cd2f
 801e3d4:	20000050 	.word	0x20000050
 801e3d8:	2000bd54 	.word	0x2000bd54
 801e3dc:	0801cd2d 	.word	0x0801cd2d
 801e3e0:	20000054 	.word	0x20000054

0801e3e4 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801e3e4:	b510      	push	{r4, lr}
 801e3e6:	4604      	mov	r4, r0
 801e3e8:	f7ff ff88 	bl	801e2fc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801e3ec:	4620      	mov	r0, r4
 801e3ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e3f2:	f7ff bfbd 	b.w	801e370 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801e3f8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801e3f8:	b538      	push	{r3, r4, r5, lr}
 801e3fa:	4c15      	ldr	r4, [pc, #84]	; (801e450 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801e3fc:	4605      	mov	r5, r0
 801e3fe:	7823      	ldrb	r3, [r4, #0]
 801e400:	f3bf 8f5b 	dmb	ish
 801e404:	07da      	lsls	r2, r3, #31
 801e406:	d40b      	bmi.n	801e420 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801e408:	4620      	mov	r0, r4
 801e40a:	f006 fbe4 	bl	8024bd6 <__cxa_guard_acquire>
 801e40e:	b138      	cbz	r0, 801e420 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801e410:	4620      	mov	r0, r4
 801e412:	f006 fbec 	bl	8024bee <__cxa_guard_release>
 801e416:	4a0f      	ldr	r2, [pc, #60]	; (801e454 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801e418:	490f      	ldr	r1, [pc, #60]	; (801e458 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801e41a:	4810      	ldr	r0, [pc, #64]	; (801e45c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801e41c:	f006 fbd1 	bl	8024bc2 <__aeabi_atexit>
 801e420:	4c0f      	ldr	r4, [pc, #60]	; (801e460 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801e422:	7823      	ldrb	r3, [r4, #0]
 801e424:	f3bf 8f5b 	dmb	ish
 801e428:	07db      	lsls	r3, r3, #31
 801e42a:	d40b      	bmi.n	801e444 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801e42c:	4620      	mov	r0, r4
 801e42e:	f006 fbd2 	bl	8024bd6 <__cxa_guard_acquire>
 801e432:	b138      	cbz	r0, 801e444 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801e434:	4620      	mov	r0, r4
 801e436:	f006 fbda 	bl	8024bee <__cxa_guard_release>
 801e43a:	4a06      	ldr	r2, [pc, #24]	; (801e454 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801e43c:	4909      	ldr	r1, [pc, #36]	; (801e464 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801e43e:	480a      	ldr	r0, [pc, #40]	; (801e468 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801e440:	f006 fbbf 	bl	8024bc2 <__aeabi_atexit>
 801e444:	4b05      	ldr	r3, [pc, #20]	; (801e45c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801e446:	642b      	str	r3, [r5, #64]	; 0x40
 801e448:	4b07      	ldr	r3, [pc, #28]	; (801e468 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801e44a:	646b      	str	r3, [r5, #68]	; 0x44
 801e44c:	bd38      	pop	{r3, r4, r5, pc}
 801e44e:	bf00      	nop
 801e450:	2000bd80 	.word	0x2000bd80
 801e454:	20000000 	.word	0x20000000
 801e458:	0801cd23 	.word	0x0801cd23
 801e45c:	20000080 	.word	0x20000080
 801e460:	2000bd84 	.word	0x2000bd84
 801e464:	0801cd21 	.word	0x0801cd21
 801e468:	20000084 	.word	0x20000084

0801e46c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801e46c:	b538      	push	{r3, r4, r5, lr}
 801e46e:	4c15      	ldr	r4, [pc, #84]	; (801e4c4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801e470:	4605      	mov	r5, r0
 801e472:	7823      	ldrb	r3, [r4, #0]
 801e474:	f3bf 8f5b 	dmb	ish
 801e478:	07da      	lsls	r2, r3, #31
 801e47a:	d40b      	bmi.n	801e494 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801e47c:	4620      	mov	r0, r4
 801e47e:	f006 fbaa 	bl	8024bd6 <__cxa_guard_acquire>
 801e482:	b138      	cbz	r0, 801e494 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801e484:	4620      	mov	r0, r4
 801e486:	f006 fbb2 	bl	8024bee <__cxa_guard_release>
 801e48a:	4a0f      	ldr	r2, [pc, #60]	; (801e4c8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801e48c:	490f      	ldr	r1, [pc, #60]	; (801e4cc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801e48e:	4810      	ldr	r0, [pc, #64]	; (801e4d0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801e490:	f006 fb97 	bl	8024bc2 <__aeabi_atexit>
 801e494:	4c0f      	ldr	r4, [pc, #60]	; (801e4d4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801e496:	7823      	ldrb	r3, [r4, #0]
 801e498:	f3bf 8f5b 	dmb	ish
 801e49c:	07db      	lsls	r3, r3, #31
 801e49e:	d40b      	bmi.n	801e4b8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801e4a0:	4620      	mov	r0, r4
 801e4a2:	f006 fb98 	bl	8024bd6 <__cxa_guard_acquire>
 801e4a6:	b138      	cbz	r0, 801e4b8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801e4a8:	4620      	mov	r0, r4
 801e4aa:	f006 fba0 	bl	8024bee <__cxa_guard_release>
 801e4ae:	4a06      	ldr	r2, [pc, #24]	; (801e4c8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801e4b0:	4909      	ldr	r1, [pc, #36]	; (801e4d8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801e4b2:	480a      	ldr	r0, [pc, #40]	; (801e4dc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801e4b4:	f006 fb85 	bl	8024bc2 <__aeabi_atexit>
 801e4b8:	4b05      	ldr	r3, [pc, #20]	; (801e4d0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801e4ba:	63ab      	str	r3, [r5, #56]	; 0x38
 801e4bc:	4b07      	ldr	r3, [pc, #28]	; (801e4dc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801e4be:	63eb      	str	r3, [r5, #60]	; 0x3c
 801e4c0:	bd38      	pop	{r3, r4, r5, pc}
 801e4c2:	bf00      	nop
 801e4c4:	2000bd60 	.word	0x2000bd60
 801e4c8:	20000000 	.word	0x20000000
 801e4cc:	0801cd27 	.word	0x0801cd27
 801e4d0:	20000060 	.word	0x20000060
 801e4d4:	2000bd64 	.word	0x2000bd64
 801e4d8:	0801cd25 	.word	0x0801cd25
 801e4dc:	20000064 	.word	0x20000064

0801e4e0 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801e4e0:	b510      	push	{r4, lr}
 801e4e2:	4604      	mov	r4, r0
 801e4e4:	f7ff ff88 	bl	801e3f8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801e4e8:	4620      	mov	r0, r4
 801e4ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e4ee:	f7ff bfbd 	b.w	801e46c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801e4f4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801e4f4:	b538      	push	{r3, r4, r5, lr}
 801e4f6:	4c15      	ldr	r4, [pc, #84]	; (801e54c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801e4f8:	4605      	mov	r5, r0
 801e4fa:	7823      	ldrb	r3, [r4, #0]
 801e4fc:	f3bf 8f5b 	dmb	ish
 801e500:	07da      	lsls	r2, r3, #31
 801e502:	d40b      	bmi.n	801e51c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801e504:	4620      	mov	r0, r4
 801e506:	f006 fb66 	bl	8024bd6 <__cxa_guard_acquire>
 801e50a:	b138      	cbz	r0, 801e51c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801e50c:	4620      	mov	r0, r4
 801e50e:	f006 fb6e 	bl	8024bee <__cxa_guard_release>
 801e512:	4a0f      	ldr	r2, [pc, #60]	; (801e550 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801e514:	490f      	ldr	r1, [pc, #60]	; (801e554 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801e516:	4810      	ldr	r0, [pc, #64]	; (801e558 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801e518:	f006 fb53 	bl	8024bc2 <__aeabi_atexit>
 801e51c:	4c0f      	ldr	r4, [pc, #60]	; (801e55c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801e51e:	7823      	ldrb	r3, [r4, #0]
 801e520:	f3bf 8f5b 	dmb	ish
 801e524:	07db      	lsls	r3, r3, #31
 801e526:	d40b      	bmi.n	801e540 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801e528:	4620      	mov	r0, r4
 801e52a:	f006 fb54 	bl	8024bd6 <__cxa_guard_acquire>
 801e52e:	b138      	cbz	r0, 801e540 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801e530:	4620      	mov	r0, r4
 801e532:	f006 fb5c 	bl	8024bee <__cxa_guard_release>
 801e536:	4a06      	ldr	r2, [pc, #24]	; (801e550 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801e538:	4909      	ldr	r1, [pc, #36]	; (801e560 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801e53a:	480a      	ldr	r0, [pc, #40]	; (801e564 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801e53c:	f006 fb41 	bl	8024bc2 <__aeabi_atexit>
 801e540:	4b05      	ldr	r3, [pc, #20]	; (801e558 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801e542:	652b      	str	r3, [r5, #80]	; 0x50
 801e544:	4b07      	ldr	r3, [pc, #28]	; (801e564 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801e546:	656b      	str	r3, [r5, #84]	; 0x54
 801e548:	bd38      	pop	{r3, r4, r5, pc}
 801e54a:	bf00      	nop
 801e54c:	2000bd58 	.word	0x2000bd58
 801e550:	20000000 	.word	0x20000000
 801e554:	0801cd1b 	.word	0x0801cd1b
 801e558:	20000058 	.word	0x20000058
 801e55c:	2000bd5c 	.word	0x2000bd5c
 801e560:	0801cd19 	.word	0x0801cd19
 801e564:	2000005c 	.word	0x2000005c

0801e568 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801e568:	b538      	push	{r3, r4, r5, lr}
 801e56a:	4c15      	ldr	r4, [pc, #84]	; (801e5c0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801e56c:	4605      	mov	r5, r0
 801e56e:	7823      	ldrb	r3, [r4, #0]
 801e570:	f3bf 8f5b 	dmb	ish
 801e574:	07da      	lsls	r2, r3, #31
 801e576:	d40b      	bmi.n	801e590 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801e578:	4620      	mov	r0, r4
 801e57a:	f006 fb2c 	bl	8024bd6 <__cxa_guard_acquire>
 801e57e:	b138      	cbz	r0, 801e590 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801e580:	4620      	mov	r0, r4
 801e582:	f006 fb34 	bl	8024bee <__cxa_guard_release>
 801e586:	4a0f      	ldr	r2, [pc, #60]	; (801e5c4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801e588:	490f      	ldr	r1, [pc, #60]	; (801e5c8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801e58a:	4810      	ldr	r0, [pc, #64]	; (801e5cc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801e58c:	f006 fb19 	bl	8024bc2 <__aeabi_atexit>
 801e590:	4c0f      	ldr	r4, [pc, #60]	; (801e5d0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801e592:	7823      	ldrb	r3, [r4, #0]
 801e594:	f3bf 8f5b 	dmb	ish
 801e598:	07db      	lsls	r3, r3, #31
 801e59a:	d40b      	bmi.n	801e5b4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801e59c:	4620      	mov	r0, r4
 801e59e:	f006 fb1a 	bl	8024bd6 <__cxa_guard_acquire>
 801e5a2:	b138      	cbz	r0, 801e5b4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801e5a4:	4620      	mov	r0, r4
 801e5a6:	f006 fb22 	bl	8024bee <__cxa_guard_release>
 801e5aa:	4a06      	ldr	r2, [pc, #24]	; (801e5c4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801e5ac:	4909      	ldr	r1, [pc, #36]	; (801e5d4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801e5ae:	480a      	ldr	r0, [pc, #40]	; (801e5d8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801e5b0:	f006 fb07 	bl	8024bc2 <__aeabi_atexit>
 801e5b4:	4b05      	ldr	r3, [pc, #20]	; (801e5cc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801e5b6:	64ab      	str	r3, [r5, #72]	; 0x48
 801e5b8:	4b07      	ldr	r3, [pc, #28]	; (801e5d8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801e5ba:	64eb      	str	r3, [r5, #76]	; 0x4c
 801e5bc:	bd38      	pop	{r3, r4, r5, pc}
 801e5be:	bf00      	nop
 801e5c0:	2000bd48 	.word	0x2000bd48
 801e5c4:	20000000 	.word	0x20000000
 801e5c8:	0801cd1f 	.word	0x0801cd1f
 801e5cc:	20000048 	.word	0x20000048
 801e5d0:	2000bd4c 	.word	0x2000bd4c
 801e5d4:	0801cd1d 	.word	0x0801cd1d
 801e5d8:	2000004c 	.word	0x2000004c

0801e5dc <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801e5dc:	b510      	push	{r4, lr}
 801e5de:	4604      	mov	r4, r0
 801e5e0:	f7ff ff88 	bl	801e4f4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801e5e4:	4620      	mov	r0, r4
 801e5e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e5ea:	f7ff bfbd 	b.w	801e568 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801e5ee <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801e5ee:	b510      	push	{r4, lr}
 801e5f0:	4604      	mov	r4, r0
 801e5f2:	f7ff fff3 	bl	801e5dc <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801e5f6:	4620      	mov	r0, r4
 801e5f8:	f7ff ff72 	bl	801e4e0 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801e5fc:	4620      	mov	r0, r4
 801e5fe:	f7ff fe73 	bl	801e2e8 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801e602:	4620      	mov	r0, r4
 801e604:	f7ff fdf2 	bl	801e1ec <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801e608:	4620      	mov	r0, r4
 801e60a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e60e:	f7ff bee9 	b.w	801e3e4 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

0801e614 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801e614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e618:	b087      	sub	sp, #28
 801e61a:	7888      	ldrb	r0, [r1, #2]
 801e61c:	4616      	mov	r6, r2
 801e61e:	9001      	str	r0, [sp, #4]
 801e620:	7848      	ldrb	r0, [r1, #1]
 801e622:	9100      	str	r1, [sp, #0]
 801e624:	9002      	str	r0, [sp, #8]
 801e626:	7808      	ldrb	r0, [r1, #0]
 801e628:	9901      	ldr	r1, [sp, #4]
 801e62a:	9003      	str	r0, [sp, #12]
 801e62c:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801e630:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 801e634:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 801e638:	9902      	ldr	r1, [sp, #8]
 801e63a:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 801e63e:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 801e642:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 801e646:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801e64a:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 801e64e:	9005      	str	r0, [sp, #20]
 801e650:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 801e654:	fb05 ca0e 	mla	sl, r5, lr, ip
 801e658:	2d00      	cmp	r5, #0
 801e65a:	eb06 080a 	add.w	r8, r6, sl
 801e65e:	db4a      	blt.n	801e6f6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 801e660:	45a9      	cmp	r9, r5
 801e662:	dd48      	ble.n	801e6f6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 801e664:	f1bc 0f00 	cmp.w	ip, #0
 801e668:	db43      	blt.n	801e6f2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 801e66a:	45e6      	cmp	lr, ip
 801e66c:	dd41      	ble.n	801e6f2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 801e66e:	f816 600a 	ldrb.w	r6, [r6, sl]
 801e672:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e676:	441e      	add	r6, r3
 801e678:	f11c 0001 	adds.w	r0, ip, #1
 801e67c:	d43e      	bmi.n	801e6fc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801e67e:	4586      	cmp	lr, r0
 801e680:	dd3c      	ble.n	801e6fc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801e682:	2a00      	cmp	r2, #0
 801e684:	d03a      	beq.n	801e6fc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801e686:	f898 0001 	ldrb.w	r0, [r8, #1]
 801e68a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e68e:	4418      	add	r0, r3
 801e690:	3501      	adds	r5, #1
 801e692:	d437      	bmi.n	801e704 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801e694:	45a9      	cmp	r9, r5
 801e696:	dd35      	ble.n	801e704 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801e698:	b3a4      	cbz	r4, 801e704 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801e69a:	f1bc 0f00 	cmp.w	ip, #0
 801e69e:	db2f      	blt.n	801e700 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 801e6a0:	45e6      	cmp	lr, ip
 801e6a2:	dd2d      	ble.n	801e700 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 801e6a4:	f818 500e 	ldrb.w	r5, [r8, lr]
 801e6a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e6ac:	441d      	add	r5, r3
 801e6ae:	f11c 0c01 	adds.w	ip, ip, #1
 801e6b2:	d42a      	bmi.n	801e70a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801e6b4:	45e6      	cmp	lr, ip
 801e6b6:	dd28      	ble.n	801e70a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801e6b8:	b33a      	cbz	r2, 801e70a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801e6ba:	44c6      	add	lr, r8
 801e6bc:	f89e c001 	ldrb.w	ip, [lr, #1]
 801e6c0:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801e6c4:	4463      	add	r3, ip
 801e6c6:	ea6f 0c07 	mvn.w	ip, r7
 801e6ca:	2a0f      	cmp	r2, #15
 801e6cc:	f896 a000 	ldrb.w	sl, [r6]
 801e6d0:	fa5f fc8c 	uxtb.w	ip, ip
 801e6d4:	f890 b000 	ldrb.w	fp, [r0]
 801e6d8:	f895 9000 	ldrb.w	r9, [r5]
 801e6dc:	7819      	ldrb	r1, [r3, #0]
 801e6de:	d801      	bhi.n	801e6e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xd0>
 801e6e0:	2c0f      	cmp	r4, #15
 801e6e2:	d914      	bls.n	801e70e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xfa>
 801e6e4:	4b40      	ldr	r3, [pc, #256]	; (801e7e8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 801e6e6:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801e6ea:	4a40      	ldr	r2, [pc, #256]	; (801e7ec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 801e6ec:	4840      	ldr	r0, [pc, #256]	; (801e7f0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1dc>)
 801e6ee:	f006 fa9b 	bl	8024c28 <__assert_func>
 801e6f2:	ae05      	add	r6, sp, #20
 801e6f4:	e7c0      	b.n	801e678 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x64>
 801e6f6:	a805      	add	r0, sp, #20
 801e6f8:	4606      	mov	r6, r0
 801e6fa:	e7c9      	b.n	801e690 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 801e6fc:	a805      	add	r0, sp, #20
 801e6fe:	e7c7      	b.n	801e690 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 801e700:	ad05      	add	r5, sp, #20
 801e702:	e7d4      	b.n	801e6ae <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x9a>
 801e704:	ab05      	add	r3, sp, #20
 801e706:	461d      	mov	r5, r3
 801e708:	e7dd      	b.n	801e6c6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 801e70a:	ab05      	add	r3, sp, #20
 801e70c:	e7db      	b.n	801e6c6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 801e70e:	b292      	uxth	r2, r2
 801e710:	b2a4      	uxth	r4, r4
 801e712:	fa1f fc8c 	uxth.w	ip, ip
 801e716:	fb02 f804 	mul.w	r8, r2, r4
 801e71a:	0112      	lsls	r2, r2, #4
 801e71c:	b2bf      	uxth	r7, r7
 801e71e:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 801e722:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 801e726:	eba2 0208 	sub.w	r2, r2, r8
 801e72a:	b2a4      	uxth	r4, r4
 801e72c:	b292      	uxth	r2, r2
 801e72e:	ebae 0e04 	sub.w	lr, lr, r4
 801e732:	fb02 fb0b 	mul.w	fp, r2, fp
 801e736:	fa1f fe8e 	uxth.w	lr, lr
 801e73a:	fb0e ba0a 	mla	sl, lr, sl, fp
 801e73e:	fb04 aa09 	mla	sl, r4, r9, sl
 801e742:	fb08 aa01 	mla	sl, r8, r1, sl
 801e746:	9903      	ldr	r1, [sp, #12]
 801e748:	fb11 f90c 	smulbb	r9, r1, ip
 801e74c:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801e750:	9900      	ldr	r1, [sp, #0]
 801e752:	fb0a 9a07 	mla	sl, sl, r7, r9
 801e756:	fa1f fa8a 	uxth.w	sl, sl
 801e75a:	f10a 0901 	add.w	r9, sl, #1
 801e75e:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 801e762:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e766:	f881 a000 	strb.w	sl, [r1]
 801e76a:	f890 a001 	ldrb.w	sl, [r0, #1]
 801e76e:	f896 9001 	ldrb.w	r9, [r6, #1]
 801e772:	fb02 fa0a 	mul.w	sl, r2, sl
 801e776:	9902      	ldr	r1, [sp, #8]
 801e778:	fb0e aa09 	mla	sl, lr, r9, sl
 801e77c:	f895 9001 	ldrb.w	r9, [r5, #1]
 801e780:	fb04 aa09 	mla	sl, r4, r9, sl
 801e784:	f893 9001 	ldrb.w	r9, [r3, #1]
 801e788:	fb08 a909 	mla	r9, r8, r9, sl
 801e78c:	fb11 fa0c 	smulbb	sl, r1, ip
 801e790:	9900      	ldr	r1, [sp, #0]
 801e792:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801e796:	fb09 a907 	mla	r9, r9, r7, sl
 801e79a:	fa1f f989 	uxth.w	r9, r9
 801e79e:	f109 0a01 	add.w	sl, r9, #1
 801e7a2:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801e7a6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e7aa:	f881 9001 	strb.w	r9, [r1, #1]
 801e7ae:	7880      	ldrb	r0, [r0, #2]
 801e7b0:	78b6      	ldrb	r6, [r6, #2]
 801e7b2:	4342      	muls	r2, r0
 801e7b4:	78a8      	ldrb	r0, [r5, #2]
 801e7b6:	789b      	ldrb	r3, [r3, #2]
 801e7b8:	fb0e 2206 	mla	r2, lr, r6, r2
 801e7bc:	fb04 2400 	mla	r4, r4, r0, r2
 801e7c0:	fb08 4803 	mla	r8, r8, r3, r4
 801e7c4:	9b01      	ldr	r3, [sp, #4]
 801e7c6:	fb13 fc0c 	smulbb	ip, r3, ip
 801e7ca:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801e7ce:	fb08 c707 	mla	r7, r8, r7, ip
 801e7d2:	b2bf      	uxth	r7, r7
 801e7d4:	f107 0c01 	add.w	ip, r7, #1
 801e7d8:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801e7dc:	123f      	asrs	r7, r7, #8
 801e7de:	708f      	strb	r7, [r1, #2]
 801e7e0:	b007      	add	sp, #28
 801e7e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e7e6:	bf00      	nop
 801e7e8:	08029617 	.word	0x08029617
 801e7ec:	08029b0e 	.word	0x08029b0e
 801e7f0:	080296e0 	.word	0x080296e0

0801e7f4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801e7f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e7f8:	ed2d 8b08 	vpush	{d8-d11}
 801e7fc:	b095      	sub	sp, #84	; 0x54
 801e7fe:	eeb0 aa40 	vmov.f32	s20, s0
 801e802:	eef0 9a60 	vmov.f32	s19, s1
 801e806:	930a      	str	r3, [sp, #40]	; 0x28
 801e808:	eeb0 9a41 	vmov.f32	s18, s2
 801e80c:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 801e810:	eeb0 8a62 	vmov.f32	s16, s5
 801e814:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 801e816:	eef0 8a43 	vmov.f32	s17, s6
 801e81a:	930c      	str	r3, [sp, #48]	; 0x30
 801e81c:	eef0 ba44 	vmov.f32	s23, s8
 801e820:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801e824:	eeb0 ba64 	vmov.f32	s22, s9
 801e828:	9013      	str	r0, [sp, #76]	; 0x4c
 801e82a:	eef0 aa45 	vmov.f32	s21, s10
 801e82e:	9310      	str	r3, [sp, #64]	; 0x40
 801e830:	6860      	ldr	r0, [r4, #4]
 801e832:	910f      	str	r1, [sp, #60]	; 0x3c
 801e834:	9212      	str	r2, [sp, #72]	; 0x48
 801e836:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801e838:	f9bd 50b8 	ldrsh.w	r5, [sp, #184]	; 0xb8
 801e83c:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801e840:	fb00 1303 	mla	r3, r0, r3, r1
 801e844:	6821      	ldr	r1, [r4, #0]
 801e846:	6854      	ldr	r4, [r2, #4]
 801e848:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e84c:	18cb      	adds	r3, r1, r3
 801e84e:	930b      	str	r3, [sp, #44]	; 0x2c
 801e850:	6813      	ldr	r3, [r2, #0]
 801e852:	930e      	str	r3, [sp, #56]	; 0x38
 801e854:	1d23      	adds	r3, r4, #4
 801e856:	9309      	str	r3, [sp, #36]	; 0x24
 801e858:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e85a:	43db      	mvns	r3, r3
 801e85c:	b2db      	uxtb	r3, r3
 801e85e:	930d      	str	r3, [sp, #52]	; 0x34
 801e860:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e862:	2b00      	cmp	r3, #0
 801e864:	dc03      	bgt.n	801e86e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801e866:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e868:	2b00      	cmp	r3, #0
 801e86a:	f340 823c 	ble.w	801ece6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 801e86e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e870:	2b00      	cmp	r3, #0
 801e872:	f340 8115 	ble.w	801eaa0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 801e876:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801e878:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e87a:	1412      	asrs	r2, r2, #16
 801e87c:	ea4f 4323 	mov.w	r3, r3, asr #16
 801e880:	d431      	bmi.n	801e8e6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801e882:	1c51      	adds	r1, r2, #1
 801e884:	428d      	cmp	r5, r1
 801e886:	dd31      	ble.n	801e8ec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801e888:	2b00      	cmp	r3, #0
 801e88a:	db2f      	blt.n	801e8ec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801e88c:	1c59      	adds	r1, r3, #1
 801e88e:	980c      	ldr	r0, [sp, #48]	; 0x30
 801e890:	4288      	cmp	r0, r1
 801e892:	dd2b      	ble.n	801e8ec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801e894:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e896:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801e898:	3b01      	subs	r3, #1
 801e89a:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801e89c:	fb02 1203 	mla	r2, r2, r3, r1
 801e8a0:	1412      	asrs	r2, r2, #16
 801e8a2:	d42d      	bmi.n	801e900 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801e8a4:	3201      	adds	r2, #1
 801e8a6:	4295      	cmp	r5, r2
 801e8a8:	dd2a      	ble.n	801e900 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801e8aa:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801e8ac:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801e8ae:	fb02 1303 	mla	r3, r2, r3, r1
 801e8b2:	141b      	asrs	r3, r3, #16
 801e8b4:	d424      	bmi.n	801e900 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801e8b6:	3301      	adds	r3, #1
 801e8b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e8ba:	429a      	cmp	r2, r3
 801e8bc:	dd20      	ble.n	801e900 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801e8be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e8c0:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 801e8c4:	f103 0c03 	add.w	ip, r3, #3
 801e8c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e8ca:	9311      	str	r3, [sp, #68]	; 0x44
 801e8cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e8ce:	2b00      	cmp	r3, #0
 801e8d0:	f300 814f 	bgt.w	801eb72 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37e>
 801e8d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e8d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e8d8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e8dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e8e0:	441a      	add	r2, r3
 801e8e2:	920b      	str	r2, [sp, #44]	; 0x2c
 801e8e4:	e0de      	b.n	801eaa4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801e8e6:	1c51      	adds	r1, r2, #1
 801e8e8:	f040 80cb 	bne.w	801ea82 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801e8ec:	42aa      	cmp	r2, r5
 801e8ee:	f280 80c8 	bge.w	801ea82 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801e8f2:	1c5f      	adds	r7, r3, #1
 801e8f4:	f2c0 80c5 	blt.w	801ea82 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801e8f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e8fa:	4293      	cmp	r3, r2
 801e8fc:	f280 80c1 	bge.w	801ea82 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801e900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e902:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801e904:	9311      	str	r3, [sp, #68]	; 0x44
 801e906:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e908:	2b00      	cmp	r3, #0
 801e90a:	dde3      	ble.n	801e8d4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 801e90c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e90e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801e910:	141a      	asrs	r2, r3, #16
 801e912:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801e914:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801e916:	1400      	asrs	r0, r0, #16
 801e918:	f3c1 3103 	ubfx	r1, r1, #12, #4
 801e91c:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801e920:	f100 810e 	bmi.w	801eb40 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801e924:	1c46      	adds	r6, r0, #1
 801e926:	42b5      	cmp	r5, r6
 801e928:	f340 810c 	ble.w	801eb44 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801e92c:	2a00      	cmp	r2, #0
 801e92e:	f2c0 8109 	blt.w	801eb44 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801e932:	1c56      	adds	r6, r2, #1
 801e934:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801e936:	42b4      	cmp	r4, r6
 801e938:	f340 8104 	ble.w	801eb44 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801e93c:	fb02 0005 	mla	r0, r2, r5, r0
 801e940:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801e942:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e944:	f814 e000 	ldrb.w	lr, [r4, r0]
 801e948:	4402      	add	r2, r0
 801e94a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e94c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801e950:	eb00 080e 	add.w	r8, r0, lr
 801e954:	2b00      	cmp	r3, #0
 801e956:	f000 80e4 	beq.w	801eb22 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x32e>
 801e95a:	f892 c001 	ldrb.w	ip, [r2, #1]
 801e95e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801e962:	4484      	add	ip, r0
 801e964:	2900      	cmp	r1, #0
 801e966:	f000 80e5 	beq.w	801eb34 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x340>
 801e96a:	1950      	adds	r0, r2, r5
 801e96c:	5d52      	ldrb	r2, [r2, r5]
 801e96e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801e970:	7840      	ldrb	r0, [r0, #1]
 801e972:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e976:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e97a:	4422      	add	r2, r4
 801e97c:	4420      	add	r0, r4
 801e97e:	b29b      	uxth	r3, r3
 801e980:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801e982:	b289      	uxth	r1, r1
 801e984:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
 801e988:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801e98c:	fb03 fa01 	mul.w	sl, r3, r1
 801e990:	011b      	lsls	r3, r3, #4
 801e992:	f89c e000 	ldrb.w	lr, [ip]
 801e996:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 801e99a:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 801e99e:	eba3 030a 	sub.w	r3, r3, sl
 801e9a2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e9a4:	b289      	uxth	r1, r1
 801e9a6:	b29b      	uxth	r3, r3
 801e9a8:	eba9 0901 	sub.w	r9, r9, r1
 801e9ac:	fb03 fe0e 	mul.w	lr, r3, lr
 801e9b0:	fa1f f989 	uxth.w	r9, r9
 801e9b4:	fb09 ee0b 	mla	lr, r9, fp, lr
 801e9b8:	f892 b000 	ldrb.w	fp, [r2]
 801e9bc:	fb01 ee0b 	mla	lr, r1, fp, lr
 801e9c0:	f890 b000 	ldrb.w	fp, [r0]
 801e9c4:	fb0a ee0b 	mla	lr, sl, fp, lr
 801e9c8:	f897 b000 	ldrb.w	fp, [r7]
 801e9cc:	fb1b fb04 	smulbb	fp, fp, r4
 801e9d0:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801e9d4:	fb0e be06 	mla	lr, lr, r6, fp
 801e9d8:	fa1f fe8e 	uxth.w	lr, lr
 801e9dc:	f10e 0b01 	add.w	fp, lr, #1
 801e9e0:	eb0b 2b1e 	add.w	fp, fp, lr, lsr #8
 801e9e4:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 801e9e8:	f887 b000 	strb.w	fp, [r7]
 801e9ec:	f89c e001 	ldrb.w	lr, [ip, #1]
 801e9f0:	f898 b001 	ldrb.w	fp, [r8, #1]
 801e9f4:	fb03 fe0e 	mul.w	lr, r3, lr
 801e9f8:	fb09 ee0b 	mla	lr, r9, fp, lr
 801e9fc:	f892 b001 	ldrb.w	fp, [r2, #1]
 801ea00:	fb01 ee0b 	mla	lr, r1, fp, lr
 801ea04:	f890 b001 	ldrb.w	fp, [r0, #1]
 801ea08:	fb0a ee0b 	mla	lr, sl, fp, lr
 801ea0c:	f897 b001 	ldrb.w	fp, [r7, #1]
 801ea10:	fb1b fb04 	smulbb	fp, fp, r4
 801ea14:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801ea18:	fb0e be06 	mla	lr, lr, r6, fp
 801ea1c:	fa1f fe8e 	uxth.w	lr, lr
 801ea20:	f10e 0b01 	add.w	fp, lr, #1
 801ea24:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801ea28:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ea2c:	f887 e001 	strb.w	lr, [r7, #1]
 801ea30:	f89c c002 	ldrb.w	ip, [ip, #2]
 801ea34:	f898 e002 	ldrb.w	lr, [r8, #2]
 801ea38:	fb03 f30c 	mul.w	r3, r3, ip
 801ea3c:	fb09 330e 	mla	r3, r9, lr, r3
 801ea40:	f892 e002 	ldrb.w	lr, [r2, #2]
 801ea44:	7882      	ldrb	r2, [r0, #2]
 801ea46:	fb01 310e 	mla	r1, r1, lr, r3
 801ea4a:	fb0a 1a02 	mla	sl, sl, r2, r1
 801ea4e:	78b9      	ldrb	r1, [r7, #2]
 801ea50:	fb11 f104 	smulbb	r1, r1, r4
 801ea54:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801ea58:	fb0a 1606 	mla	r6, sl, r6, r1
 801ea5c:	b2b6      	uxth	r6, r6
 801ea5e:	1c73      	adds	r3, r6, #1
 801ea60:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801ea64:	1236      	asrs	r6, r6, #8
 801ea66:	70be      	strb	r6, [r7, #2]
 801ea68:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ea6a:	3703      	adds	r7, #3
 801ea6c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801ea6e:	4413      	add	r3, r2
 801ea70:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801ea72:	9327      	str	r3, [sp, #156]	; 0x9c
 801ea74:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ea76:	4413      	add	r3, r2
 801ea78:	9328      	str	r3, [sp, #160]	; 0xa0
 801ea7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ea7c:	3b01      	subs	r3, #1
 801ea7e:	9311      	str	r3, [sp, #68]	; 0x44
 801ea80:	e741      	b.n	801e906 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x112>
 801ea82:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ea84:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801ea86:	4413      	add	r3, r2
 801ea88:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801ea8a:	9327      	str	r3, [sp, #156]	; 0x9c
 801ea8c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ea8e:	4413      	add	r3, r2
 801ea90:	9328      	str	r3, [sp, #160]	; 0xa0
 801ea92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ea94:	3b01      	subs	r3, #1
 801ea96:	930a      	str	r3, [sp, #40]	; 0x28
 801ea98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ea9a:	3303      	adds	r3, #3
 801ea9c:	930b      	str	r3, [sp, #44]	; 0x2c
 801ea9e:	e6e6      	b.n	801e86e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801eaa0:	f47f aef8 	bne.w	801e894 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801eaa4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801eaa6:	2b00      	cmp	r3, #0
 801eaa8:	f340 811d 	ble.w	801ece6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 801eaac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801eab0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801eab2:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801eab6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801eaba:	eef0 6a48 	vmov.f32	s13, s16
 801eabe:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801eac2:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801eac6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801eaca:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 801eace:	eef0 6a68 	vmov.f32	s13, s17
 801ead2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ead6:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 801eada:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801eade:	ee69 7a27 	vmul.f32	s15, s18, s15
 801eae2:	ee37 8a48 	vsub.f32	s16, s14, s16
 801eae6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801eaea:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801eaee:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801eaf2:	ee18 2a10 	vmov	r2, s16
 801eaf6:	eeb0 8a47 	vmov.f32	s16, s14
 801eafa:	fb92 f3f3 	sdiv	r3, r2, r3
 801eafe:	ee18 2a90 	vmov	r2, s17
 801eb02:	9329      	str	r3, [sp, #164]	; 0xa4
 801eb04:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801eb06:	eef0 8a67 	vmov.f32	s17, s15
 801eb0a:	fb92 f3f3 	sdiv	r3, r2, r3
 801eb0e:	932a      	str	r3, [sp, #168]	; 0xa8
 801eb10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801eb12:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801eb14:	3b01      	subs	r3, #1
 801eb16:	930f      	str	r3, [sp, #60]	; 0x3c
 801eb18:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801eb1a:	bf08      	it	eq
 801eb1c:	4613      	moveq	r3, r2
 801eb1e:	930a      	str	r3, [sp, #40]	; 0x28
 801eb20:	e69e      	b.n	801e860 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801eb22:	b151      	cbz	r1, 801eb3a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 801eb24:	5d52      	ldrb	r2, [r2, r5]
 801eb26:	9809      	ldr	r0, [sp, #36]	; 0x24
 801eb28:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801eb2c:	4402      	add	r2, r0
 801eb2e:	4640      	mov	r0, r8
 801eb30:	46c4      	mov	ip, r8
 801eb32:	e724      	b.n	801e97e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 801eb34:	4640      	mov	r0, r8
 801eb36:	4642      	mov	r2, r8
 801eb38:	e721      	b.n	801e97e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 801eb3a:	4640      	mov	r0, r8
 801eb3c:	4642      	mov	r2, r8
 801eb3e:	e7f7      	b.n	801eb30 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33c>
 801eb40:	1c46      	adds	r6, r0, #1
 801eb42:	d191      	bne.n	801ea68 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801eb44:	4285      	cmp	r5, r0
 801eb46:	dd8f      	ble.n	801ea68 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801eb48:	1c54      	adds	r4, r2, #1
 801eb4a:	db8d      	blt.n	801ea68 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801eb4c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801eb4e:	4294      	cmp	r4, r2
 801eb50:	dd8a      	ble.n	801ea68 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801eb52:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801eb54:	9002      	str	r0, [sp, #8]
 801eb56:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801eb58:	e9cd 2303 	strd	r2, r3, [sp, #12]
 801eb5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801eb5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801eb60:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801eb64:	e9cd 5300 	strd	r5, r3, [sp]
 801eb68:	4639      	mov	r1, r7
 801eb6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eb6c:	f7ff fd52 	bl	801e614 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801eb70:	e77a      	b.n	801ea68 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801eb72:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801eb74:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801eb76:	1410      	asrs	r0, r2, #16
 801eb78:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801eb7c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801eb7e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801eb80:	1412      	asrs	r2, r2, #16
 801eb82:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801eb86:	fb05 2000 	mla	r0, r5, r0, r2
 801eb8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801eb8c:	f814 8000 	ldrb.w	r8, [r4, r0]
 801eb90:	4402      	add	r2, r0
 801eb92:	9809      	ldr	r0, [sp, #36]	; 0x24
 801eb94:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801eb98:	eb00 0708 	add.w	r7, r0, r8
 801eb9c:	2b00      	cmp	r3, #0
 801eb9e:	f000 8093 	beq.w	801ecc8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 801eba2:	7856      	ldrb	r6, [r2, #1]
 801eba4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801eba8:	4406      	add	r6, r0
 801ebaa:	2900      	cmp	r1, #0
 801ebac:	f000 8095 	beq.w	801ecda <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 801ebb0:	1950      	adds	r0, r2, r5
 801ebb2:	5d52      	ldrb	r2, [r2, r5]
 801ebb4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801ebb6:	7840      	ldrb	r0, [r0, #1]
 801ebb8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ebbc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ebc0:	4422      	add	r2, r4
 801ebc2:	4420      	add	r0, r4
 801ebc4:	b29b      	uxth	r3, r3
 801ebc6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801ebc8:	b289      	uxth	r1, r1
 801ebca:	f10c 0c03 	add.w	ip, ip, #3
 801ebce:	f814 b008 	ldrb.w	fp, [r4, r8]
 801ebd2:	fb03 f901 	mul.w	r9, r3, r1
 801ebd6:	011b      	lsls	r3, r3, #4
 801ebd8:	f896 8000 	ldrb.w	r8, [r6]
 801ebdc:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801ebe0:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801ebe4:	eba3 0309 	sub.w	r3, r3, r9
 801ebe8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ebea:	b289      	uxth	r1, r1
 801ebec:	b29b      	uxth	r3, r3
 801ebee:	ebae 0e01 	sub.w	lr, lr, r1
 801ebf2:	fb03 f808 	mul.w	r8, r3, r8
 801ebf6:	fa1f fe8e 	uxth.w	lr, lr
 801ebfa:	fb0e 880b 	mla	r8, lr, fp, r8
 801ebfe:	f892 b000 	ldrb.w	fp, [r2]
 801ec02:	fb01 880b 	mla	r8, r1, fp, r8
 801ec06:	f890 b000 	ldrb.w	fp, [r0]
 801ec0a:	fb09 880b 	mla	r8, r9, fp, r8
 801ec0e:	f81c bc06 	ldrb.w	fp, [ip, #-6]
 801ec12:	fb1b fb04 	smulbb	fp, fp, r4
 801ec16:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801ec1a:	fb08 b80a 	mla	r8, r8, sl, fp
 801ec1e:	fa1f f888 	uxth.w	r8, r8
 801ec22:	f108 0b01 	add.w	fp, r8, #1
 801ec26:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801ec2a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ec2e:	f80c 8c06 	strb.w	r8, [ip, #-6]
 801ec32:	f896 8001 	ldrb.w	r8, [r6, #1]
 801ec36:	f897 b001 	ldrb.w	fp, [r7, #1]
 801ec3a:	fb03 f808 	mul.w	r8, r3, r8
 801ec3e:	fb0e 880b 	mla	r8, lr, fp, r8
 801ec42:	f892 b001 	ldrb.w	fp, [r2, #1]
 801ec46:	fb01 880b 	mla	r8, r1, fp, r8
 801ec4a:	f890 b001 	ldrb.w	fp, [r0, #1]
 801ec4e:	fb09 880b 	mla	r8, r9, fp, r8
 801ec52:	f81c bc05 	ldrb.w	fp, [ip, #-5]
 801ec56:	fb1b fb04 	smulbb	fp, fp, r4
 801ec5a:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801ec5e:	fb08 b80a 	mla	r8, r8, sl, fp
 801ec62:	fa1f f888 	uxth.w	r8, r8
 801ec66:	f108 0b01 	add.w	fp, r8, #1
 801ec6a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801ec6e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ec72:	f80c 8c05 	strb.w	r8, [ip, #-5]
 801ec76:	78b6      	ldrb	r6, [r6, #2]
 801ec78:	78bf      	ldrb	r7, [r7, #2]
 801ec7a:	4373      	muls	r3, r6
 801ec7c:	7896      	ldrb	r6, [r2, #2]
 801ec7e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801ec80:	fb0e 3307 	mla	r3, lr, r7, r3
 801ec84:	fb01 3306 	mla	r3, r1, r6, r3
 801ec88:	7886      	ldrb	r6, [r0, #2]
 801ec8a:	fb09 3906 	mla	r9, r9, r6, r3
 801ec8e:	f81c 3c04 	ldrb.w	r3, [ip, #-4]
 801ec92:	fb13 f304 	smulbb	r3, r3, r4
 801ec96:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801ec9a:	fb09 390a 	mla	r9, r9, sl, r3
 801ec9e:	fa1f f989 	uxth.w	r9, r9
 801eca2:	f109 0301 	add.w	r3, r9, #1
 801eca6:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801ecaa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ecac:	4413      	add	r3, r2
 801ecae:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801ecb0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ecb4:	9327      	str	r3, [sp, #156]	; 0x9c
 801ecb6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ecb8:	f80c 9c04 	strb.w	r9, [ip, #-4]
 801ecbc:	4413      	add	r3, r2
 801ecbe:	9328      	str	r3, [sp, #160]	; 0xa0
 801ecc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ecc2:	3b01      	subs	r3, #1
 801ecc4:	9311      	str	r3, [sp, #68]	; 0x44
 801ecc6:	e601      	b.n	801e8cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801ecc8:	b151      	cbz	r1, 801ece0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>
 801ecca:	5d52      	ldrb	r2, [r2, r5]
 801eccc:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ecce:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ecd2:	4402      	add	r2, r0
 801ecd4:	4638      	mov	r0, r7
 801ecd6:	463e      	mov	r6, r7
 801ecd8:	e774      	b.n	801ebc4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 801ecda:	4638      	mov	r0, r7
 801ecdc:	463a      	mov	r2, r7
 801ecde:	e771      	b.n	801ebc4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 801ece0:	4638      	mov	r0, r7
 801ece2:	463a      	mov	r2, r7
 801ece4:	e7f7      	b.n	801ecd6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 801ece6:	b015      	add	sp, #84	; 0x54
 801ece8:	ecbd 8b08 	vpop	{d8-d11}
 801ecec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ecf0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801ecf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ecf4:	780d      	ldrb	r5, [r1, #0]
 801ecf6:	f891 9002 	ldrb.w	r9, [r1, #2]
 801ecfa:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
 801ecfe:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801ed02:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 801ed06:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 801ed0a:	f891 9001 	ldrb.w	r9, [r1, #1]
 801ed0e:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801ed12:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 801ed16:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801ed1a:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 801ed1e:	9501      	str	r5, [sp, #4]
 801ed20:	fb06 470c 	mla	r7, r6, ip, r4
 801ed24:	2e00      	cmp	r6, #0
 801ed26:	eb02 0e07 	add.w	lr, r2, r7
 801ed2a:	db46      	blt.n	801edba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 801ed2c:	45b0      	cmp	r8, r6
 801ed2e:	dd44      	ble.n	801edba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 801ed30:	2c00      	cmp	r4, #0
 801ed32:	db40      	blt.n	801edb6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 801ed34:	45a4      	cmp	ip, r4
 801ed36:	dd3e      	ble.n	801edb6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 801ed38:	5dd7      	ldrb	r7, [r2, r7]
 801ed3a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801ed3e:	441f      	add	r7, r3
 801ed40:	1c62      	adds	r2, r4, #1
 801ed42:	d43d      	bmi.n	801edc0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801ed44:	4594      	cmp	ip, r2
 801ed46:	dd3b      	ble.n	801edc0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801ed48:	f1ba 0f00 	cmp.w	sl, #0
 801ed4c:	d038      	beq.n	801edc0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801ed4e:	f89e 5001 	ldrb.w	r5, [lr, #1]
 801ed52:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ed56:	441d      	add	r5, r3
 801ed58:	3601      	adds	r6, #1
 801ed5a:	d435      	bmi.n	801edc8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801ed5c:	45b0      	cmp	r8, r6
 801ed5e:	dd33      	ble.n	801edc8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801ed60:	b390      	cbz	r0, 801edc8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801ed62:	2c00      	cmp	r4, #0
 801ed64:	db2e      	blt.n	801edc4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 801ed66:	45a4      	cmp	ip, r4
 801ed68:	dd2c      	ble.n	801edc4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 801ed6a:	f81e 600c 	ldrb.w	r6, [lr, ip]
 801ed6e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ed72:	441e      	add	r6, r3
 801ed74:	1c62      	adds	r2, r4, #1
 801ed76:	d42a      	bmi.n	801edce <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801ed78:	4594      	cmp	ip, r2
 801ed7a:	dd28      	ble.n	801edce <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801ed7c:	f1ba 0f00 	cmp.w	sl, #0
 801ed80:	d025      	beq.n	801edce <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801ed82:	44f4      	add	ip, lr
 801ed84:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801ed88:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ed8c:	4413      	add	r3, r2
 801ed8e:	f1ba 0f0f 	cmp.w	sl, #15
 801ed92:	f897 8000 	ldrb.w	r8, [r7]
 801ed96:	f895 9000 	ldrb.w	r9, [r5]
 801ed9a:	f896 e000 	ldrb.w	lr, [r6]
 801ed9e:	f893 c000 	ldrb.w	ip, [r3]
 801eda2:	d801      	bhi.n	801eda8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb8>
 801eda4:	280f      	cmp	r0, #15
 801eda6:	d914      	bls.n	801edd2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe2>
 801eda8:	4b29      	ldr	r3, [pc, #164]	; (801ee50 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 801edaa:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801edae:	4a29      	ldr	r2, [pc, #164]	; (801ee54 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 801edb0:	4829      	ldr	r0, [pc, #164]	; (801ee58 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x168>)
 801edb2:	f005 ff39 	bl	8024c28 <__assert_func>
 801edb6:	af01      	add	r7, sp, #4
 801edb8:	e7c2      	b.n	801ed40 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801edba:	ad01      	add	r5, sp, #4
 801edbc:	462f      	mov	r7, r5
 801edbe:	e7cb      	b.n	801ed58 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801edc0:	ad01      	add	r5, sp, #4
 801edc2:	e7c9      	b.n	801ed58 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801edc4:	ae01      	add	r6, sp, #4
 801edc6:	e7d5      	b.n	801ed74 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x84>
 801edc8:	ab01      	add	r3, sp, #4
 801edca:	461e      	mov	r6, r3
 801edcc:	e7df      	b.n	801ed8e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 801edce:	ab01      	add	r3, sp, #4
 801edd0:	e7dd      	b.n	801ed8e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 801edd2:	fa1f f48a 	uxth.w	r4, sl
 801edd6:	b280      	uxth	r0, r0
 801edd8:	fb04 fa00 	mul.w	sl, r4, r0
 801eddc:	0124      	lsls	r4, r4, #4
 801edde:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801ede2:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 801ede6:	b282      	uxth	r2, r0
 801ede8:	eba4 000a 	sub.w	r0, r4, sl
 801edec:	ebab 0b02 	sub.w	fp, fp, r2
 801edf0:	b280      	uxth	r0, r0
 801edf2:	fa1f fb8b 	uxth.w	fp, fp
 801edf6:	fb00 f909 	mul.w	r9, r0, r9
 801edfa:	fb0b 9808 	mla	r8, fp, r8, r9
 801edfe:	fb02 8e0e 	mla	lr, r2, lr, r8
 801ee02:	fb0a ec0c 	mla	ip, sl, ip, lr
 801ee06:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ee0a:	f881 c000 	strb.w	ip, [r1]
 801ee0e:	786c      	ldrb	r4, [r5, #1]
 801ee10:	f897 c001 	ldrb.w	ip, [r7, #1]
 801ee14:	4344      	muls	r4, r0
 801ee16:	fb0b 4c0c 	mla	ip, fp, ip, r4
 801ee1a:	7874      	ldrb	r4, [r6, #1]
 801ee1c:	fb02 cc04 	mla	ip, r2, r4, ip
 801ee20:	785c      	ldrb	r4, [r3, #1]
 801ee22:	fb0a c404 	mla	r4, sl, r4, ip
 801ee26:	1224      	asrs	r4, r4, #8
 801ee28:	704c      	strb	r4, [r1, #1]
 801ee2a:	78ad      	ldrb	r5, [r5, #2]
 801ee2c:	78bc      	ldrb	r4, [r7, #2]
 801ee2e:	4368      	muls	r0, r5
 801ee30:	fb0b 0b04 	mla	fp, fp, r4, r0
 801ee34:	78b0      	ldrb	r0, [r6, #2]
 801ee36:	fb02 b000 	mla	r0, r2, r0, fp
 801ee3a:	789a      	ldrb	r2, [r3, #2]
 801ee3c:	fb0a 0a02 	mla	sl, sl, r2, r0
 801ee40:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ee44:	f881 a002 	strb.w	sl, [r1, #2]
 801ee48:	b003      	add	sp, #12
 801ee4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ee4e:	bf00      	nop
 801ee50:	08029617 	.word	0x08029617
 801ee54:	08029b0e 	.word	0x08029b0e
 801ee58:	080296e0 	.word	0x080296e0

0801ee5c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801ee5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee60:	ed2d 8b0a 	vpush	{d8-d12}
 801ee64:	b08f      	sub	sp, #60	; 0x3c
 801ee66:	eeb0 aa40 	vmov.f32	s20, s0
 801ee6a:	eef0 9a60 	vmov.f32	s19, s1
 801ee6e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 801ee70:	eeb0 9a41 	vmov.f32	s18, s2
 801ee74:	9307      	str	r3, [sp, #28]
 801ee76:	eeb0 8a62 	vmov.f32	s16, s5
 801ee7a:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 801ee7e:	eef0 8a43 	vmov.f32	s17, s6
 801ee82:	900d      	str	r0, [sp, #52]	; 0x34
 801ee84:	eeb0 ca44 	vmov.f32	s24, s8
 801ee88:	6860      	ldr	r0, [r4, #4]
 801ee8a:	eef0 ba64 	vmov.f32	s23, s9
 801ee8e:	9309      	str	r3, [sp, #36]	; 0x24
 801ee90:	eeb0 ba45 	vmov.f32	s22, s10
 801ee94:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801ee98:	f9bd 50a8 	ldrsh.w	r5, [sp, #168]	; 0xa8
 801ee9c:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
 801eea0:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801eea4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801eea6:	fb00 1303 	mla	r3, r0, r3, r1
 801eeaa:	6821      	ldr	r1, [r4, #0]
 801eeac:	6854      	ldr	r4, [r2, #4]
 801eeae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801eeb2:	3404      	adds	r4, #4
 801eeb4:	18cb      	adds	r3, r1, r3
 801eeb6:	9308      	str	r3, [sp, #32]
 801eeb8:	6813      	ldr	r3, [r2, #0]
 801eeba:	930a      	str	r3, [sp, #40]	; 0x28
 801eebc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801eebe:	2b00      	cmp	r3, #0
 801eec0:	dc03      	bgt.n	801eeca <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801eec2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801eec4:	2b00      	cmp	r3, #0
 801eec6:	f340 81d2 	ble.w	801f26e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 801eeca:	9b07      	ldr	r3, [sp, #28]
 801eecc:	2b00      	cmp	r3, #0
 801eece:	f340 80e3 	ble.w	801f098 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23c>
 801eed2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801eed4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801eed6:	1412      	asrs	r2, r2, #16
 801eed8:	ea4f 4323 	mov.w	r3, r3, asr #16
 801eedc:	d42f      	bmi.n	801ef3e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801eede:	1c51      	adds	r1, r2, #1
 801eee0:	428d      	cmp	r5, r1
 801eee2:	dd2f      	ble.n	801ef44 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801eee4:	2b00      	cmp	r3, #0
 801eee6:	db2d      	blt.n	801ef44 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801eee8:	1c59      	adds	r1, r3, #1
 801eeea:	9809      	ldr	r0, [sp, #36]	; 0x24
 801eeec:	4288      	cmp	r0, r1
 801eeee:	dd29      	ble.n	801ef44 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801eef0:	9b07      	ldr	r3, [sp, #28]
 801eef2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801eef4:	3b01      	subs	r3, #1
 801eef6:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801eef8:	fb02 1203 	mla	r2, r2, r3, r1
 801eefc:	1412      	asrs	r2, r2, #16
 801eefe:	d42b      	bmi.n	801ef58 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801ef00:	3201      	adds	r2, #1
 801ef02:	4295      	cmp	r5, r2
 801ef04:	dd28      	ble.n	801ef58 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801ef06:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801ef08:	9924      	ldr	r1, [sp, #144]	; 0x90
 801ef0a:	fb02 1303 	mla	r3, r2, r3, r1
 801ef0e:	141b      	asrs	r3, r3, #16
 801ef10:	d422      	bmi.n	801ef58 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801ef12:	3301      	adds	r3, #1
 801ef14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ef16:	429a      	cmp	r2, r3
 801ef18:	dd1e      	ble.n	801ef58 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801ef1a:	9b08      	ldr	r3, [sp, #32]
 801ef1c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801ef20:	f103 0803 	add.w	r8, r3, #3
 801ef24:	f1ba 0f00 	cmp.w	sl, #0
 801ef28:	f300 8119 	bgt.w	801f15e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x302>
 801ef2c:	9b07      	ldr	r3, [sp, #28]
 801ef2e:	9a08      	ldr	r2, [sp, #32]
 801ef30:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ef34:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ef38:	441a      	add	r2, r3
 801ef3a:	9208      	str	r2, [sp, #32]
 801ef3c:	e0ae      	b.n	801f09c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x240>
 801ef3e:	1c51      	adds	r1, r2, #1
 801ef40:	f040 809b 	bne.w	801f07a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801ef44:	42aa      	cmp	r2, r5
 801ef46:	f280 8098 	bge.w	801f07a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801ef4a:	1c5a      	adds	r2, r3, #1
 801ef4c:	f2c0 8095 	blt.w	801f07a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801ef50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ef52:	4293      	cmp	r3, r2
 801ef54:	f280 8091 	bge.w	801f07a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801ef58:	e9dd b607 	ldrd	fp, r6, [sp, #28]
 801ef5c:	f1bb 0f00 	cmp.w	fp, #0
 801ef60:	dde4      	ble.n	801ef2c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801ef62:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ef64:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801ef66:	141a      	asrs	r2, r3, #16
 801ef68:	9924      	ldr	r1, [sp, #144]	; 0x90
 801ef6a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801ef6c:	1400      	asrs	r0, r0, #16
 801ef6e:	f3c1 3103 	ubfx	r1, r1, #12, #4
 801ef72:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801ef76:	f100 80dc 	bmi.w	801f132 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d6>
 801ef7a:	1c47      	adds	r7, r0, #1
 801ef7c:	42bd      	cmp	r5, r7
 801ef7e:	f340 80da 	ble.w	801f136 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801ef82:	2a00      	cmp	r2, #0
 801ef84:	f2c0 80d7 	blt.w	801f136 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801ef88:	f102 0c01 	add.w	ip, r2, #1
 801ef8c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801ef8e:	4567      	cmp	r7, ip
 801ef90:	f340 80d1 	ble.w	801f136 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801ef94:	fb02 0005 	mla	r0, r2, r5, r0
 801ef98:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801ef9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ef9c:	f817 8000 	ldrb.w	r8, [r7, r0]
 801efa0:	4402      	add	r2, r0
 801efa2:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801efa6:	eb04 0c08 	add.w	ip, r4, r8
 801efaa:	2b00      	cmp	r3, #0
 801efac:	f000 80b3 	beq.w	801f116 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ba>
 801efb0:	7857      	ldrb	r7, [r2, #1]
 801efb2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801efb6:	4427      	add	r7, r4
 801efb8:	2900      	cmp	r1, #0
 801efba:	f000 80b4 	beq.w	801f126 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ca>
 801efbe:	1950      	adds	r0, r2, r5
 801efc0:	5d52      	ldrb	r2, [r2, r5]
 801efc2:	7840      	ldrb	r0, [r0, #1]
 801efc4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801efc8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801efcc:	4422      	add	r2, r4
 801efce:	4420      	add	r0, r4
 801efd0:	b29b      	uxth	r3, r3
 801efd2:	f814 a008 	ldrb.w	sl, [r4, r8]
 801efd6:	b289      	uxth	r1, r1
 801efd8:	f897 8000 	ldrb.w	r8, [r7]
 801efdc:	fb03 f901 	mul.w	r9, r3, r1
 801efe0:	011b      	lsls	r3, r3, #4
 801efe2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801efe6:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801efea:	eba3 0309 	sub.w	r3, r3, r9
 801efee:	b289      	uxth	r1, r1
 801eff0:	b29b      	uxth	r3, r3
 801eff2:	ebae 0e01 	sub.w	lr, lr, r1
 801eff6:	fb03 f808 	mul.w	r8, r3, r8
 801effa:	fa1f fe8e 	uxth.w	lr, lr
 801effe:	fb0e 880a 	mla	r8, lr, sl, r8
 801f002:	f892 a000 	ldrb.w	sl, [r2]
 801f006:	fb01 880a 	mla	r8, r1, sl, r8
 801f00a:	f890 a000 	ldrb.w	sl, [r0]
 801f00e:	fb09 880a 	mla	r8, r9, sl, r8
 801f012:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f016:	f886 8000 	strb.w	r8, [r6]
 801f01a:	f897 8001 	ldrb.w	r8, [r7, #1]
 801f01e:	f89c a001 	ldrb.w	sl, [ip, #1]
 801f022:	fb03 f808 	mul.w	r8, r3, r8
 801f026:	fb0e 880a 	mla	r8, lr, sl, r8
 801f02a:	f892 a001 	ldrb.w	sl, [r2, #1]
 801f02e:	fb01 880a 	mla	r8, r1, sl, r8
 801f032:	f890 a001 	ldrb.w	sl, [r0, #1]
 801f036:	fb09 880a 	mla	r8, r9, sl, r8
 801f03a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f03e:	f886 8001 	strb.w	r8, [r6, #1]
 801f042:	78bf      	ldrb	r7, [r7, #2]
 801f044:	f89c c002 	ldrb.w	ip, [ip, #2]
 801f048:	437b      	muls	r3, r7
 801f04a:	7892      	ldrb	r2, [r2, #2]
 801f04c:	fb0e 330c 	mla	r3, lr, ip, r3
 801f050:	fb01 3102 	mla	r1, r1, r2, r3
 801f054:	7882      	ldrb	r2, [r0, #2]
 801f056:	fb09 1902 	mla	r9, r9, r2, r1
 801f05a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f05e:	f886 9002 	strb.w	r9, [r6, #2]
 801f062:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f064:	3603      	adds	r6, #3
 801f066:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801f068:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f06c:	4413      	add	r3, r2
 801f06e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801f070:	9323      	str	r3, [sp, #140]	; 0x8c
 801f072:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f074:	4413      	add	r3, r2
 801f076:	9324      	str	r3, [sp, #144]	; 0x90
 801f078:	e770      	b.n	801ef5c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 801f07a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f07c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801f07e:	4413      	add	r3, r2
 801f080:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801f082:	9323      	str	r3, [sp, #140]	; 0x8c
 801f084:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f086:	4413      	add	r3, r2
 801f088:	9324      	str	r3, [sp, #144]	; 0x90
 801f08a:	9b07      	ldr	r3, [sp, #28]
 801f08c:	3b01      	subs	r3, #1
 801f08e:	9307      	str	r3, [sp, #28]
 801f090:	9b08      	ldr	r3, [sp, #32]
 801f092:	3303      	adds	r3, #3
 801f094:	9308      	str	r3, [sp, #32]
 801f096:	e718      	b.n	801eeca <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801f098:	f47f af2a 	bne.w	801eef0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 801f09c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f09e:	2b00      	cmp	r3, #0
 801f0a0:	f340 80e5 	ble.w	801f26e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 801f0a4:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801f0a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f0aa:	ee79 9aab 	vadd.f32	s19, s19, s23
 801f0ae:	eef0 6a48 	vmov.f32	s13, s16
 801f0b2:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801f0b6:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801f0ba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f0be:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801f0c2:	eef0 6a68 	vmov.f32	s13, s17
 801f0c6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f0ca:	edcd 6a24 	vstr	s13, [sp, #144]	; 0x90
 801f0ce:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801f0d2:	ee69 7a27 	vmul.f32	s15, s18, s15
 801f0d6:	ee37 8a48 	vsub.f32	s16, s14, s16
 801f0da:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801f0de:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801f0e2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801f0e6:	ee18 2a10 	vmov	r2, s16
 801f0ea:	eeb0 8a47 	vmov.f32	s16, s14
 801f0ee:	fb92 f3f3 	sdiv	r3, r2, r3
 801f0f2:	ee18 2a90 	vmov	r2, s17
 801f0f6:	9325      	str	r3, [sp, #148]	; 0x94
 801f0f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f0fa:	eef0 8a67 	vmov.f32	s17, s15
 801f0fe:	fb92 f3f3 	sdiv	r3, r2, r3
 801f102:	9326      	str	r3, [sp, #152]	; 0x98
 801f104:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f106:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f108:	3b01      	subs	r3, #1
 801f10a:	930b      	str	r3, [sp, #44]	; 0x2c
 801f10c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f10e:	bf08      	it	eq
 801f110:	4613      	moveq	r3, r2
 801f112:	9307      	str	r3, [sp, #28]
 801f114:	e6d2      	b.n	801eebc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801f116:	b149      	cbz	r1, 801f12c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 801f118:	5d52      	ldrb	r2, [r2, r5]
 801f11a:	4660      	mov	r0, ip
 801f11c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f120:	4422      	add	r2, r4
 801f122:	4667      	mov	r7, ip
 801f124:	e754      	b.n	801efd0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 801f126:	4660      	mov	r0, ip
 801f128:	4662      	mov	r2, ip
 801f12a:	e751      	b.n	801efd0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 801f12c:	4660      	mov	r0, ip
 801f12e:	4662      	mov	r2, ip
 801f130:	e7f7      	b.n	801f122 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c6>
 801f132:	1c47      	adds	r7, r0, #1
 801f134:	d195      	bne.n	801f062 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801f136:	4285      	cmp	r5, r0
 801f138:	dd93      	ble.n	801f062 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801f13a:	1c57      	adds	r7, r2, #1
 801f13c:	db91      	blt.n	801f062 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801f13e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801f140:	4297      	cmp	r7, r2
 801f142:	dd8e      	ble.n	801f062 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801f144:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801f148:	e9cd 0202 	strd	r0, r2, [sp, #8]
 801f14c:	e9cd 5700 	strd	r5, r7, [sp]
 801f150:	4623      	mov	r3, r4
 801f152:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f154:	4631      	mov	r1, r6
 801f156:	980d      	ldr	r0, [sp, #52]	; 0x34
 801f158:	f7ff fdca 	bl	801ecf0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801f15c:	e781      	b.n	801f062 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801f15e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801f160:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801f162:	1410      	asrs	r0, r2, #16
 801f164:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f168:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801f16a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f16c:	1412      	asrs	r2, r2, #16
 801f16e:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801f172:	fb05 2000 	mla	r0, r5, r0, r2
 801f176:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f178:	f816 e000 	ldrb.w	lr, [r6, r0]
 801f17c:	4402      	add	r2, r0
 801f17e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801f182:	eb04 070e 	add.w	r7, r4, lr
 801f186:	2b00      	cmp	r3, #0
 801f188:	d063      	beq.n	801f252 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f6>
 801f18a:	7856      	ldrb	r6, [r2, #1]
 801f18c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f190:	4426      	add	r6, r4
 801f192:	2900      	cmp	r1, #0
 801f194:	d065      	beq.n	801f262 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 801f196:	1950      	adds	r0, r2, r5
 801f198:	5d52      	ldrb	r2, [r2, r5]
 801f19a:	7840      	ldrb	r0, [r0, #1]
 801f19c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f1a0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f1a4:	4422      	add	r2, r4
 801f1a6:	4420      	add	r0, r4
 801f1a8:	b29b      	uxth	r3, r3
 801f1aa:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801f1ae:	b289      	uxth	r1, r1
 801f1b0:	f896 e000 	ldrb.w	lr, [r6]
 801f1b4:	f108 0803 	add.w	r8, r8, #3
 801f1b8:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f1bc:	fb03 f901 	mul.w	r9, r3, r1
 801f1c0:	011b      	lsls	r3, r3, #4
 801f1c2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f1c6:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801f1ca:	eba3 0309 	sub.w	r3, r3, r9
 801f1ce:	b289      	uxth	r1, r1
 801f1d0:	b29b      	uxth	r3, r3
 801f1d2:	ebac 0c01 	sub.w	ip, ip, r1
 801f1d6:	fb03 fe0e 	mul.w	lr, r3, lr
 801f1da:	fa1f fc8c 	uxth.w	ip, ip
 801f1de:	fb0c ee0b 	mla	lr, ip, fp, lr
 801f1e2:	f892 b000 	ldrb.w	fp, [r2]
 801f1e6:	fb01 ee0b 	mla	lr, r1, fp, lr
 801f1ea:	f890 b000 	ldrb.w	fp, [r0]
 801f1ee:	fb09 ee0b 	mla	lr, r9, fp, lr
 801f1f2:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f1f6:	f808 ec06 	strb.w	lr, [r8, #-6]
 801f1fa:	f896 e001 	ldrb.w	lr, [r6, #1]
 801f1fe:	f897 b001 	ldrb.w	fp, [r7, #1]
 801f202:	fb03 fe0e 	mul.w	lr, r3, lr
 801f206:	fb0c ee0b 	mla	lr, ip, fp, lr
 801f20a:	f892 b001 	ldrb.w	fp, [r2, #1]
 801f20e:	fb01 ee0b 	mla	lr, r1, fp, lr
 801f212:	f890 b001 	ldrb.w	fp, [r0, #1]
 801f216:	fb09 ee0b 	mla	lr, r9, fp, lr
 801f21a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f21e:	f808 ec05 	strb.w	lr, [r8, #-5]
 801f222:	78b6      	ldrb	r6, [r6, #2]
 801f224:	78bf      	ldrb	r7, [r7, #2]
 801f226:	4373      	muls	r3, r6
 801f228:	7896      	ldrb	r6, [r2, #2]
 801f22a:	7882      	ldrb	r2, [r0, #2]
 801f22c:	fb0c 3307 	mla	r3, ip, r7, r3
 801f230:	fb01 3306 	mla	r3, r1, r6, r3
 801f234:	fb09 3902 	mla	r9, r9, r2, r3
 801f238:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f23a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801f23c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f240:	4413      	add	r3, r2
 801f242:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801f244:	f808 9c04 	strb.w	r9, [r8, #-4]
 801f248:	9323      	str	r3, [sp, #140]	; 0x8c
 801f24a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f24c:	4413      	add	r3, r2
 801f24e:	9324      	str	r3, [sp, #144]	; 0x90
 801f250:	e668      	b.n	801ef24 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801f252:	b149      	cbz	r1, 801f268 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40c>
 801f254:	5d52      	ldrb	r2, [r2, r5]
 801f256:	4638      	mov	r0, r7
 801f258:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f25c:	4422      	add	r2, r4
 801f25e:	463e      	mov	r6, r7
 801f260:	e7a2      	b.n	801f1a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801f262:	4638      	mov	r0, r7
 801f264:	463a      	mov	r2, r7
 801f266:	e79f      	b.n	801f1a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801f268:	4638      	mov	r0, r7
 801f26a:	463a      	mov	r2, r7
 801f26c:	e7f7      	b.n	801f25e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x402>
 801f26e:	b00f      	add	sp, #60	; 0x3c
 801f270:	ecbd 8b0a 	vpop	{d8-d12}
 801f274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f278 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 801f278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f27c:	b087      	sub	sp, #28
 801f27e:	7888      	ldrb	r0, [r1, #2]
 801f280:	9002      	str	r0, [sp, #8]
 801f282:	7848      	ldrb	r0, [r1, #1]
 801f284:	9e02      	ldr	r6, [sp, #8]
 801f286:	9003      	str	r0, [sp, #12]
 801f288:	7808      	ldrb	r0, [r1, #0]
 801f28a:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801f28e:	9004      	str	r0, [sp, #16]
 801f290:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801f294:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 801f298:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 801f29c:	9e03      	ldr	r6, [sp, #12]
 801f29e:	f89d c050 	ldrb.w	ip, [sp, #80]	; 0x50
 801f2a2:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 801f2a6:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 801f2aa:	e9dd 7412 	ldrd	r7, r4, [sp, #72]	; 0x48
 801f2ae:	fb04 7508 	mla	r5, r4, r8, r7
 801f2b2:	2c00      	cmp	r4, #0
 801f2b4:	eb02 0905 	add.w	r9, r2, r5
 801f2b8:	db45      	blt.n	801f346 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 801f2ba:	45a2      	cmp	sl, r4
 801f2bc:	dd43      	ble.n	801f346 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 801f2be:	2f00      	cmp	r7, #0
 801f2c0:	db3f      	blt.n	801f342 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 801f2c2:	45b8      	cmp	r8, r7
 801f2c4:	dd3d      	ble.n	801f342 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 801f2c6:	5d52      	ldrb	r2, [r2, r5]
 801f2c8:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801f2cc:	1c7a      	adds	r2, r7, #1
 801f2ce:	d43d      	bmi.n	801f34c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801f2d0:	4590      	cmp	r8, r2
 801f2d2:	dd3b      	ble.n	801f34c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801f2d4:	f1bc 0f00 	cmp.w	ip, #0
 801f2d8:	d038      	beq.n	801f34c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801f2da:	f899 2001 	ldrb.w	r2, [r9, #1]
 801f2de:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801f2e2:	3401      	adds	r4, #1
 801f2e4:	d436      	bmi.n	801f354 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801f2e6:	45a2      	cmp	sl, r4
 801f2e8:	dd34      	ble.n	801f354 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801f2ea:	f1be 0f00 	cmp.w	lr, #0
 801f2ee:	d031      	beq.n	801f354 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801f2f0:	2f00      	cmp	r7, #0
 801f2f2:	db2d      	blt.n	801f350 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 801f2f4:	45b8      	cmp	r8, r7
 801f2f6:	dd2b      	ble.n	801f350 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 801f2f8:	f819 2008 	ldrb.w	r2, [r9, r8]
 801f2fc:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 801f300:	3701      	adds	r7, #1
 801f302:	d409      	bmi.n	801f318 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801f304:	45b8      	cmp	r8, r7
 801f306:	dd07      	ble.n	801f318 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801f308:	f1bc 0f00 	cmp.w	ip, #0
 801f30c:	d004      	beq.n	801f318 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801f30e:	44c8      	add	r8, r9
 801f310:	f898 2001 	ldrb.w	r2, [r8, #1]
 801f314:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801f318:	f1bc 0f0f 	cmp.w	ip, #15
 801f31c:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801f320:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 801f324:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801f328:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801f32c:	d802      	bhi.n	801f334 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbc>
 801f32e:	f1be 0f0f 	cmp.w	lr, #15
 801f332:	d911      	bls.n	801f358 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xe0>
 801f334:	4b77      	ldr	r3, [pc, #476]	; (801f514 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x29c>)
 801f336:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801f33a:	4a77      	ldr	r2, [pc, #476]	; (801f518 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a0>)
 801f33c:	4877      	ldr	r0, [pc, #476]	; (801f51c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a4>)
 801f33e:	f005 fc73 	bl	8024c28 <__assert_func>
 801f342:	4606      	mov	r6, r0
 801f344:	e7c2      	b.n	801f2cc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x54>
 801f346:	4605      	mov	r5, r0
 801f348:	4606      	mov	r6, r0
 801f34a:	e7ca      	b.n	801f2e2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 801f34c:	4605      	mov	r5, r0
 801f34e:	e7c8      	b.n	801f2e2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 801f350:	4604      	mov	r4, r0
 801f352:	e7d5      	b.n	801f300 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x88>
 801f354:	4604      	mov	r4, r0
 801f356:	e7df      	b.n	801f318 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801f358:	fa1f fc8c 	uxth.w	ip, ip
 801f35c:	fa1f f28e 	uxth.w	r2, lr
 801f360:	fb02 fe0c 	mul.w	lr, r2, ip
 801f364:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801f368:	ebce 1202 	rsb	r2, lr, r2, lsl #4
 801f36c:	ebac 070e 	sub.w	r7, ip, lr
 801f370:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801f374:	b292      	uxth	r2, r2
 801f376:	b2bf      	uxth	r7, r7
 801f378:	1a9b      	subs	r3, r3, r2
 801f37a:	fb07 fc0a 	mul.w	ip, r7, sl
 801f37e:	b29b      	uxth	r3, r3
 801f380:	fb03 cc0b 	mla	ip, r3, fp, ip
 801f384:	9301      	str	r3, [sp, #4]
 801f386:	fb02 cc09 	mla	ip, r2, r9, ip
 801f38a:	fb0e cc08 	mla	ip, lr, r8, ip
 801f38e:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801f392:	9305      	str	r3, [sp, #20]
 801f394:	2b00      	cmp	r3, #0
 801f396:	f000 80b9 	beq.w	801f50c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x294>
 801f39a:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801f39e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f3a2:	fb0b fc0c 	mul.w	ip, fp, ip
 801f3a6:	fb0b f606 	mul.w	r6, fp, r6
 801f3aa:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801f3ae:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f3b2:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801f3b6:	44dc      	add	ip, fp
 801f3b8:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801f3bc:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801f3c0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f3c4:	fb0a fb0b 	mul.w	fp, sl, fp
 801f3c8:	fb0a fa05 	mul.w	sl, sl, r5
 801f3cc:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 801f3d0:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801f3d4:	f50a 7580 	add.w	r5, sl, #256	; 0x100
 801f3d8:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801f3dc:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801f3e0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f3e4:	eb05 2a1a 	add.w	sl, r5, sl, lsr #8
 801f3e8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f3ec:	0a36      	lsrs	r6, r6, #8
 801f3ee:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f3f2:	44dc      	add	ip, fp
 801f3f4:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801f3f8:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801f3fc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f400:	fb09 fb0b 	mul.w	fp, r9, fp
 801f404:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f408:	fb09 f904 	mul.w	r9, r9, r4
 801f40c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f410:	ea4f 251b 	mov.w	r5, fp, lsr #8
 801f414:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f418:	f509 7480 	add.w	r4, r9, #256	; 0x100
 801f41c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f420:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801f424:	fb0c fc07 	mul.w	ip, ip, r7
 801f428:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801f42c:	f000 14ff 	and.w	r4, r0, #16711935	; 0xff00ff
 801f430:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801f434:	445d      	add	r5, fp
 801f436:	fb08 f404 	mul.w	r4, r8, r4
 801f43a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f43e:	fb08 f800 	mul.w	r8, r8, r0
 801f442:	0a2d      	lsrs	r5, r5, #8
 801f444:	0a20      	lsrs	r0, r4, #8
 801f446:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 801f44a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801f44e:	fb07 f70a 	mul.w	r7, r7, sl
 801f452:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801f456:	4404      	add	r4, r0
 801f458:	f508 7080 	add.w	r0, r8, #256	; 0x100
 801f45c:	0a24      	lsrs	r4, r4, #8
 801f45e:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 801f462:	9801      	ldr	r0, [sp, #4]
 801f464:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801f468:	fb03 cc00 	mla	ip, r3, r0, ip
 801f46c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801f470:	fb00 7606 	mla	r6, r0, r6, r7
 801f474:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 801f478:	fb04 cc0e 	mla	ip, r4, lr, ip
 801f47c:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801f480:	b280      	uxth	r0, r0
 801f482:	9c04      	ldr	r4, [sp, #16]
 801f484:	fb05 cc02 	mla	ip, r5, r2, ip
 801f488:	fb0e 6e08 	mla	lr, lr, r8, r6
 801f48c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f490:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 801f494:	f409 4c7f 	and.w	ip, r9, #65280	; 0xff00
 801f498:	fb02 ec0c 	mla	ip, r2, ip, lr
 801f49c:	9a05      	ldr	r2, [sp, #20]
 801f49e:	4342      	muls	r2, r0
 801f4a0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f4a4:	1c53      	adds	r3, r2, #1
 801f4a6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801f4aa:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801f4ae:	ea45 0c0c 	orr.w	ip, r5, ip
 801f4b2:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 801f4b6:	fa5f f28c 	uxtb.w	r2, ip
 801f4ba:	b2db      	uxtb	r3, r3
 801f4bc:	fb14 f403 	smulbb	r4, r4, r3
 801f4c0:	fb02 4200 	mla	r2, r2, r0, r4
 801f4c4:	b292      	uxth	r2, r2
 801f4c6:	1c54      	adds	r4, r2, #1
 801f4c8:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 801f4cc:	9c03      	ldr	r4, [sp, #12]
 801f4ce:	fb14 f403 	smulbb	r4, r4, r3
 801f4d2:	1212      	asrs	r2, r2, #8
 801f4d4:	700a      	strb	r2, [r1, #0]
 801f4d6:	f3cc 2207 	ubfx	r2, ip, #8, #8
 801f4da:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801f4de:	fb02 4200 	mla	r2, r2, r0, r4
 801f4e2:	b292      	uxth	r2, r2
 801f4e4:	1c54      	adds	r4, r2, #1
 801f4e6:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 801f4ea:	1212      	asrs	r2, r2, #8
 801f4ec:	704a      	strb	r2, [r1, #1]
 801f4ee:	9a02      	ldr	r2, [sp, #8]
 801f4f0:	fb12 f303 	smulbb	r3, r2, r3
 801f4f4:	fb0c 3c00 	mla	ip, ip, r0, r3
 801f4f8:	fa1f fc8c 	uxth.w	ip, ip
 801f4fc:	f10c 0301 	add.w	r3, ip, #1
 801f500:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801f504:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f508:	f881 c002 	strb.w	ip, [r1, #2]
 801f50c:	b007      	add	sp, #28
 801f50e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f512:	bf00      	nop
 801f514:	08029617 	.word	0x08029617
 801f518:	08029b0e 	.word	0x08029b0e
 801f51c:	080296e0 	.word	0x080296e0

0801f520 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801f520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f524:	ed2d 8b08 	vpush	{d8-d11}
 801f528:	b09b      	sub	sp, #108	; 0x6c
 801f52a:	eeb0 aa40 	vmov.f32	s20, s0
 801f52e:	eef0 9a60 	vmov.f32	s19, s1
 801f532:	930a      	str	r3, [sp, #40]	; 0x28
 801f534:	eeb0 9a41 	vmov.f32	s18, s2
 801f538:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 801f53c:	eeb0 8a62 	vmov.f32	s16, s5
 801f540:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 801f542:	eef0 8a43 	vmov.f32	s17, s6
 801f546:	9312      	str	r3, [sp, #72]	; 0x48
 801f548:	eef0 ba44 	vmov.f32	s23, s8
 801f54c:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 801f550:	eeb0 ba64 	vmov.f32	s22, s9
 801f554:	9019      	str	r0, [sp, #100]	; 0x64
 801f556:	eef0 aa45 	vmov.f32	s21, s10
 801f55a:	9114      	str	r1, [sp, #80]	; 0x50
 801f55c:	9317      	str	r3, [sp, #92]	; 0x5c
 801f55e:	6868      	ldr	r0, [r5, #4]
 801f560:	9218      	str	r2, [sp, #96]	; 0x60
 801f562:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 801f564:	f9bd 40d0 	ldrsh.w	r4, [sp, #208]	; 0xd0
 801f568:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 801f56c:	fb00 1303 	mla	r3, r0, r3, r1
 801f570:	6829      	ldr	r1, [r5, #0]
 801f572:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f576:	18cb      	adds	r3, r1, r3
 801f578:	930d      	str	r3, [sp, #52]	; 0x34
 801f57a:	6813      	ldr	r3, [r2, #0]
 801f57c:	9313      	str	r3, [sp, #76]	; 0x4c
 801f57e:	6853      	ldr	r3, [r2, #4]
 801f580:	3304      	adds	r3, #4
 801f582:	9309      	str	r3, [sp, #36]	; 0x24
 801f584:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f586:	2b00      	cmp	r3, #0
 801f588:	dc03      	bgt.n	801f592 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801f58a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801f58c:	2b00      	cmp	r3, #0
 801f58e:	f340 8352 	ble.w	801fc36 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 801f592:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f594:	2b00      	cmp	r3, #0
 801f596:	f340 81a2 	ble.w	801f8de <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3be>
 801f59a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801f59c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f59e:	1412      	asrs	r2, r2, #16
 801f5a0:	ea4f 4323 	mov.w	r3, r3, asr #16
 801f5a4:	d431      	bmi.n	801f60a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 801f5a6:	1c51      	adds	r1, r2, #1
 801f5a8:	428c      	cmp	r4, r1
 801f5aa:	dd31      	ble.n	801f610 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 801f5ac:	2b00      	cmp	r3, #0
 801f5ae:	db2f      	blt.n	801f610 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 801f5b0:	1c59      	adds	r1, r3, #1
 801f5b2:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f5b4:	4288      	cmp	r0, r1
 801f5b6:	dd2b      	ble.n	801f610 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 801f5b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f5ba:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801f5bc:	3b01      	subs	r3, #1
 801f5be:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801f5c0:	fb02 1203 	mla	r2, r2, r3, r1
 801f5c4:	1412      	asrs	r2, r2, #16
 801f5c6:	d42d      	bmi.n	801f624 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801f5c8:	3201      	adds	r2, #1
 801f5ca:	4294      	cmp	r4, r2
 801f5cc:	dd2a      	ble.n	801f624 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801f5ce:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801f5d0:	992e      	ldr	r1, [sp, #184]	; 0xb8
 801f5d2:	fb02 1303 	mla	r3, r2, r3, r1
 801f5d6:	141b      	asrs	r3, r3, #16
 801f5d8:	d424      	bmi.n	801f624 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801f5da:	3301      	adds	r3, #1
 801f5dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f5de:	429a      	cmp	r2, r3
 801f5e0:	dd20      	ble.n	801f624 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801f5e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f5e4:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
 801f5e8:	f103 0e03 	add.w	lr, r3, #3
 801f5ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f5ee:	9315      	str	r3, [sp, #84]	; 0x54
 801f5f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f5f2:	2b00      	cmp	r3, #0
 801f5f4:	f300 81de 	bgt.w	801f9b4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x494>
 801f5f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f5fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f5fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f600:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f604:	441a      	add	r2, r3
 801f606:	920d      	str	r2, [sp, #52]	; 0x34
 801f608:	e16b      	b.n	801f8e2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c2>
 801f60a:	1c51      	adds	r1, r2, #1
 801f60c:	f040 8158 	bne.w	801f8c0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801f610:	42a2      	cmp	r2, r4
 801f612:	f280 8155 	bge.w	801f8c0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801f616:	1c5a      	adds	r2, r3, #1
 801f618:	f2c0 8152 	blt.w	801f8c0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801f61c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f61e:	4293      	cmp	r3, r2
 801f620:	f280 814e 	bge.w	801f8c0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801f624:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f626:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801f628:	9316      	str	r3, [sp, #88]	; 0x58
 801f62a:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 801f62e:	9315      	str	r3, [sp, #84]	; 0x54
 801f630:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801f632:	2b00      	cmp	r3, #0
 801f634:	dde0      	ble.n	801f5f8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801f636:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801f638:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f63a:	f3c2 3003 	ubfx	r0, r2, #12, #4
 801f63e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801f640:	141b      	asrs	r3, r3, #16
 801f642:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f646:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801f648:	1412      	asrs	r2, r2, #16
 801f64a:	f100 819a 	bmi.w	801f982 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x462>
 801f64e:	1c55      	adds	r5, r2, #1
 801f650:	42ac      	cmp	r4, r5
 801f652:	f340 8198 	ble.w	801f986 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801f656:	2b00      	cmp	r3, #0
 801f658:	f2c0 8195 	blt.w	801f986 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801f65c:	1c5d      	adds	r5, r3, #1
 801f65e:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801f660:	42af      	cmp	r7, r5
 801f662:	f340 8190 	ble.w	801f986 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801f666:	fb03 2304 	mla	r3, r3, r4, r2
 801f66a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f66c:	18d5      	adds	r5, r2, r3
 801f66e:	5cd3      	ldrb	r3, [r2, r3]
 801f670:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801f676:	0e1f      	lsrs	r7, r3, #24
 801f678:	2800      	cmp	r0, #0
 801f67a:	f000 8171 	beq.w	801f960 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 801f67e:	f895 c001 	ldrb.w	ip, [r5, #1]
 801f682:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801f686:	920e      	str	r2, [sp, #56]	; 0x38
 801f688:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801f68c:	2900      	cmp	r1, #0
 801f68e:	f000 8172 	beq.w	801f976 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 801f692:	eb05 0c04 	add.w	ip, r5, r4
 801f696:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f698:	5d2d      	ldrb	r5, [r5, r4]
 801f69a:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 801f69e:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801f6a2:	950b      	str	r5, [sp, #44]	; 0x2c
 801f6a4:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801f6a8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801f6aa:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801f6ae:	0e15      	lsrs	r5, r2, #24
 801f6b0:	920f      	str	r2, [sp, #60]	; 0x3c
 801f6b2:	b280      	uxth	r0, r0
 801f6b4:	b289      	uxth	r1, r1
 801f6b6:	fb00 fa01 	mul.w	sl, r0, r1
 801f6ba:	0100      	lsls	r0, r0, #4
 801f6bc:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 801f6c0:	eba0 080a 	sub.w	r8, r0, sl
 801f6c4:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 801f6c8:	b289      	uxth	r1, r1
 801f6ca:	fa1f f888 	uxth.w	r8, r8
 801f6ce:	1a52      	subs	r2, r2, r1
 801f6d0:	fb08 f00e 	mul.w	r0, r8, lr
 801f6d4:	b292      	uxth	r2, r2
 801f6d6:	fb02 0007 	mla	r0, r2, r7, r0
 801f6da:	fb01 0009 	mla	r0, r1, r9, r0
 801f6de:	fb0a 0005 	mla	r0, sl, r5, r0
 801f6e2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801f6e6:	2800      	cmp	r0, #0
 801f6e8:	f000 80dd 	beq.w	801f8a6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801f6ec:	2fff      	cmp	r7, #255	; 0xff
 801f6ee:	d01a      	beq.n	801f726 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801f6f0:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801f6f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f6f8:	fb07 fc0c 	mul.w	ip, r7, ip
 801f6fc:	435f      	muls	r7, r3
 801f6fe:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801f702:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f706:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 801f70a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f70e:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 801f712:	4463      	add	r3, ip
 801f714:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801f718:	0a1b      	lsrs	r3, r3, #8
 801f71a:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801f71e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f722:	ea43 030b 	orr.w	r3, r3, fp
 801f726:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801f72a:	d01e      	beq.n	801f76a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801f72c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801f72e:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 801f732:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801f736:	fb0e fb0b 	mul.w	fp, lr, fp
 801f73a:	fb0e fe07 	mul.w	lr, lr, r7
 801f73e:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801f742:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f746:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 801f74a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f74e:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 801f752:	44dc      	add	ip, fp
 801f754:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f758:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f75c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801f760:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f764:	ea4c 070e 	orr.w	r7, ip, lr
 801f768:	970e      	str	r7, [sp, #56]	; 0x38
 801f76a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801f76e:	d01e      	beq.n	801f7ae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801f770:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801f772:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 801f776:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801f77a:	fb09 fe0e 	mul.w	lr, r9, lr
 801f77e:	fb09 f907 	mul.w	r9, r9, r7
 801f782:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801f786:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801f78a:	f509 7780 	add.w	r7, r9, #256	; 0x100
 801f78e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f792:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801f796:	44f4      	add	ip, lr
 801f798:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f79c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f7a0:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801f7a4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f7a8:	ea4c 0709 	orr.w	r7, ip, r9
 801f7ac:	970b      	str	r7, [sp, #44]	; 0x2c
 801f7ae:	2dff      	cmp	r5, #255	; 0xff
 801f7b0:	d01c      	beq.n	801f7ec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2cc>
 801f7b2:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801f7b4:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 801f7b8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801f7bc:	fb05 fe0e 	mul.w	lr, r5, lr
 801f7c0:	437d      	muls	r5, r7
 801f7c2:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801f7c6:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801f7ca:	f505 7780 	add.w	r7, r5, #256	; 0x100
 801f7ce:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f7d2:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 801f7d6:	44f4      	add	ip, lr
 801f7d8:	0a2d      	lsrs	r5, r5, #8
 801f7da:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f7de:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801f7e2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f7e6:	ea4c 0505 	orr.w	r5, ip, r5
 801f7ea:	950f      	str	r5, [sp, #60]	; 0x3c
 801f7ec:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801f7ee:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801f7f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f7f6:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801f7fa:	fb08 f505 	mul.w	r5, r8, r5
 801f7fe:	fb02 5507 	mla	r5, r2, r7, r5
 801f802:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801f804:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f808:	fb01 5507 	mla	r5, r1, r7, r5
 801f80c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801f80e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f812:	fb0a 5507 	mla	r5, sl, r7, r5
 801f816:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801f818:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801f81c:	0a2d      	lsrs	r5, r5, #8
 801f81e:	fb08 f807 	mul.w	r8, r8, r7
 801f822:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801f826:	fb02 8303 	mla	r3, r2, r3, r8
 801f82a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f82c:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801f830:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f832:	fb01 330c 	mla	r3, r1, ip, r3
 801f836:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801f83a:	fb0a 3a01 	mla	sl, sl, r1, r3
 801f83e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f840:	9915      	ldr	r1, [sp, #84]	; 0x54
 801f842:	4343      	muls	r3, r0
 801f844:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f848:	1c58      	adds	r0, r3, #1
 801f84a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f84e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801f852:	ea45 050a 	orr.w	r5, r5, sl
 801f856:	7833      	ldrb	r3, [r6, #0]
 801f858:	b2ea      	uxtb	r2, r5
 801f85a:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801f85e:	fb12 f201 	smulbb	r2, r2, r1
 801f862:	b2c0      	uxtb	r0, r0
 801f864:	fb03 2300 	mla	r3, r3, r0, r2
 801f868:	b29b      	uxth	r3, r3
 801f86a:	1c5a      	adds	r2, r3, #1
 801f86c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f870:	7872      	ldrb	r2, [r6, #1]
 801f872:	fb12 f200 	smulbb	r2, r2, r0
 801f876:	121b      	asrs	r3, r3, #8
 801f878:	7033      	strb	r3, [r6, #0]
 801f87a:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801f87e:	0c2d      	lsrs	r5, r5, #16
 801f880:	fb03 2301 	mla	r3, r3, r1, r2
 801f884:	b29b      	uxth	r3, r3
 801f886:	1c5a      	adds	r2, r3, #1
 801f888:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f88c:	121b      	asrs	r3, r3, #8
 801f88e:	7073      	strb	r3, [r6, #1]
 801f890:	78b3      	ldrb	r3, [r6, #2]
 801f892:	fb13 f000 	smulbb	r0, r3, r0
 801f896:	fb05 0501 	mla	r5, r5, r1, r0
 801f89a:	b2ad      	uxth	r5, r5
 801f89c:	1c6b      	adds	r3, r5, #1
 801f89e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801f8a2:	122d      	asrs	r5, r5, #8
 801f8a4:	70b5      	strb	r5, [r6, #2]
 801f8a6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801f8a8:	3603      	adds	r6, #3
 801f8aa:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801f8ac:	4413      	add	r3, r2
 801f8ae:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801f8b0:	932d      	str	r3, [sp, #180]	; 0xb4
 801f8b2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f8b4:	4413      	add	r3, r2
 801f8b6:	932e      	str	r3, [sp, #184]	; 0xb8
 801f8b8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801f8ba:	3b01      	subs	r3, #1
 801f8bc:	9316      	str	r3, [sp, #88]	; 0x58
 801f8be:	e6b7      	b.n	801f630 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 801f8c0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801f8c2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801f8c4:	4413      	add	r3, r2
 801f8c6:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801f8c8:	932d      	str	r3, [sp, #180]	; 0xb4
 801f8ca:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f8cc:	4413      	add	r3, r2
 801f8ce:	932e      	str	r3, [sp, #184]	; 0xb8
 801f8d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f8d2:	3b01      	subs	r3, #1
 801f8d4:	930a      	str	r3, [sp, #40]	; 0x28
 801f8d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f8d8:	3303      	adds	r3, #3
 801f8da:	930d      	str	r3, [sp, #52]	; 0x34
 801f8dc:	e659      	b.n	801f592 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801f8de:	f47f ae6b 	bne.w	801f5b8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801f8e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f8e4:	2b00      	cmp	r3, #0
 801f8e6:	f340 81a6 	ble.w	801fc36 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 801f8ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f8ee:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f8f0:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801f8f4:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801f8f8:	eef0 6a48 	vmov.f32	s13, s16
 801f8fc:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801f900:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801f904:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f908:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 801f90c:	eef0 6a68 	vmov.f32	s13, s17
 801f910:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f914:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 801f918:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801f91c:	ee69 7a27 	vmul.f32	s15, s18, s15
 801f920:	ee37 8a48 	vsub.f32	s16, s14, s16
 801f924:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801f928:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801f92c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801f930:	ee18 2a10 	vmov	r2, s16
 801f934:	eeb0 8a47 	vmov.f32	s16, s14
 801f938:	fb92 f3f3 	sdiv	r3, r2, r3
 801f93c:	ee18 2a90 	vmov	r2, s17
 801f940:	932f      	str	r3, [sp, #188]	; 0xbc
 801f942:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f944:	eef0 8a67 	vmov.f32	s17, s15
 801f948:	fb92 f3f3 	sdiv	r3, r2, r3
 801f94c:	9330      	str	r3, [sp, #192]	; 0xc0
 801f94e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f950:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801f952:	3b01      	subs	r3, #1
 801f954:	9314      	str	r3, [sp, #80]	; 0x50
 801f956:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f958:	bf08      	it	eq
 801f95a:	4613      	moveq	r3, r2
 801f95c:	930a      	str	r3, [sp, #40]	; 0x28
 801f95e:	e611      	b.n	801f584 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801f960:	b161      	cbz	r1, 801f97c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45c>
 801f962:	5d2a      	ldrb	r2, [r5, r4]
 801f964:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801f966:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801f96a:	25ff      	movs	r5, #255	; 0xff
 801f96c:	ea4f 6912 	mov.w	r9, r2, lsr #24
 801f970:	920b      	str	r2, [sp, #44]	; 0x2c
 801f972:	46ae      	mov	lr, r5
 801f974:	e69d      	b.n	801f6b2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 801f976:	25ff      	movs	r5, #255	; 0xff
 801f978:	46a9      	mov	r9, r5
 801f97a:	e69a      	b.n	801f6b2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 801f97c:	25ff      	movs	r5, #255	; 0xff
 801f97e:	46a9      	mov	r9, r5
 801f980:	e7f7      	b.n	801f972 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x452>
 801f982:	1c57      	adds	r7, r2, #1
 801f984:	d18f      	bne.n	801f8a6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801f986:	4294      	cmp	r4, r2
 801f988:	dd8d      	ble.n	801f8a6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801f98a:	1c5d      	adds	r5, r3, #1
 801f98c:	db8b      	blt.n	801f8a6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801f98e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801f990:	429d      	cmp	r5, r3
 801f992:	dd88      	ble.n	801f8a6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801f994:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 801f996:	9202      	str	r2, [sp, #8]
 801f998:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f99a:	e9cd 3003 	strd	r3, r0, [sp, #12]
 801f99e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f9a0:	9819      	ldr	r0, [sp, #100]	; 0x64
 801f9a2:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801f9a6:	e9cd 4300 	strd	r4, r3, [sp]
 801f9aa:	4631      	mov	r1, r6
 801f9ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f9ae:	f7ff fc63 	bl	801f278 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 801f9b2:	e778      	b.n	801f8a6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801f9b4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801f9b6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801f9b8:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801f9bc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f9be:	1412      	asrs	r2, r2, #16
 801f9c0:	f3c3 3003 	ubfx	r0, r3, #12, #4
 801f9c4:	141b      	asrs	r3, r3, #16
 801f9c6:	fb04 2303 	mla	r3, r4, r3, r2
 801f9ca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f9cc:	18d5      	adds	r5, r2, r3
 801f9ce:	5cd3      	ldrb	r3, [r2, r3]
 801f9d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f9d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801f9d6:	0e1e      	lsrs	r6, r3, #24
 801f9d8:	2900      	cmp	r1, #0
 801f9da:	f000 811b 	beq.w	801fc14 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f4>
 801f9de:	786a      	ldrb	r2, [r5, #1]
 801f9e0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801f9e2:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801f9e6:	9210      	str	r2, [sp, #64]	; 0x40
 801f9e8:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 801f9ec:	2800      	cmp	r0, #0
 801f9ee:	f000 811c 	beq.w	801fc2a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70a>
 801f9f2:	192a      	adds	r2, r5, r4
 801f9f4:	5d2d      	ldrb	r5, [r5, r4]
 801f9f6:	7852      	ldrb	r2, [r2, #1]
 801f9f8:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801f9fc:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801fa00:	950c      	str	r5, [sp, #48]	; 0x30
 801fa02:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801fa06:	0e15      	lsrs	r5, r2, #24
 801fa08:	9211      	str	r2, [sp, #68]	; 0x44
 801fa0a:	b289      	uxth	r1, r1
 801fa0c:	b280      	uxth	r0, r0
 801fa0e:	fb01 fa00 	mul.w	sl, r1, r0
 801fa12:	0109      	lsls	r1, r1, #4
 801fa14:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801fa18:	eba1 080a 	sub.w	r8, r1, sl
 801fa1c:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801fa20:	b280      	uxth	r0, r0
 801fa22:	fa1f f888 	uxth.w	r8, r8
 801fa26:	1a12      	subs	r2, r2, r0
 801fa28:	fb08 f10c 	mul.w	r1, r8, ip
 801fa2c:	b292      	uxth	r2, r2
 801fa2e:	fb02 1106 	mla	r1, r2, r6, r1
 801fa32:	fb00 1109 	mla	r1, r0, r9, r1
 801fa36:	fb0a 1105 	mla	r1, sl, r5, r1
 801fa3a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801fa3e:	2900      	cmp	r1, #0
 801fa40:	f000 80da 	beq.w	801fbf8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d8>
 801fa44:	2eff      	cmp	r6, #255	; 0xff
 801fa46:	d016      	beq.n	801fa76 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x556>
 801fa48:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801fa4c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fa50:	4377      	muls	r7, r6
 801fa52:	435e      	muls	r6, r3
 801fa54:	0a3b      	lsrs	r3, r7, #8
 801fa56:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801fa5a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fa5e:	443b      	add	r3, r7
 801fa60:	f506 7780 	add.w	r7, r6, #256	; 0x100
 801fa64:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801fa68:	0a1b      	lsrs	r3, r3, #8
 801fa6a:	0a3f      	lsrs	r7, r7, #8
 801fa6c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fa70:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801fa74:	433b      	orrs	r3, r7
 801fa76:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801fa7a:	d01d      	beq.n	801fab8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x598>
 801fa7c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801fa7e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801fa80:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801fa84:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801fa88:	fb0c f606 	mul.w	r6, ip, r6
 801fa8c:	fb0c fc07 	mul.w	ip, ip, r7
 801fa90:	0a37      	lsrs	r7, r6, #8
 801fa92:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801fa96:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fa9a:	4437      	add	r7, r6
 801fa9c:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 801faa0:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 801faa4:	0a3f      	lsrs	r7, r7, #8
 801faa6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801faaa:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801faae:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801fab2:	ea47 060c 	orr.w	r6, r7, ip
 801fab6:	9610      	str	r6, [sp, #64]	; 0x40
 801fab8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801fabc:	d01d      	beq.n	801fafa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5da>
 801fabe:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801fac0:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801fac4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801fac8:	fb09 fc0c 	mul.w	ip, r9, ip
 801facc:	fb09 f906 	mul.w	r9, r9, r6
 801fad0:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801fad4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801fad8:	f509 7680 	add.w	r6, r9, #256	; 0x100
 801fadc:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fae0:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801fae4:	4467      	add	r7, ip
 801fae6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801faea:	0a3f      	lsrs	r7, r7, #8
 801faec:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801faf0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801faf4:	ea47 0609 	orr.w	r6, r7, r9
 801faf8:	960c      	str	r6, [sp, #48]	; 0x30
 801fafa:	2dff      	cmp	r5, #255	; 0xff
 801fafc:	d01a      	beq.n	801fb34 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x614>
 801fafe:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801fb00:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801fb04:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801fb08:	fb05 fc0c 	mul.w	ip, r5, ip
 801fb0c:	4375      	muls	r5, r6
 801fb0e:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801fb12:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801fb16:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801fb1a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fb1e:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801fb22:	4467      	add	r7, ip
 801fb24:	0a2d      	lsrs	r5, r5, #8
 801fb26:	0a3f      	lsrs	r7, r7, #8
 801fb28:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801fb2c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fb30:	433d      	orrs	r5, r7
 801fb32:	9511      	str	r5, [sp, #68]	; 0x44
 801fb34:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801fb36:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 801fb3a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fb3e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801fb42:	fb08 f505 	mul.w	r5, r8, r5
 801fb46:	fb02 5506 	mla	r5, r2, r6, r5
 801fb4a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801fb4c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801fb50:	fb00 5506 	mla	r5, r0, r6, r5
 801fb54:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801fb56:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801fb5a:	fb0a 5506 	mla	r5, sl, r6, r5
 801fb5e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801fb60:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801fb64:	0a2d      	lsrs	r5, r5, #8
 801fb66:	fb08 f806 	mul.w	r8, r8, r6
 801fb6a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801fb6e:	fb02 8303 	mla	r3, r2, r3, r8
 801fb72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801fb74:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801fb78:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fb7a:	fb00 3307 	mla	r3, r0, r7, r3
 801fb7e:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801fb82:	fb0a 3c0c 	mla	ip, sl, ip, r3
 801fb86:	fb01 f30b 	mul.w	r3, r1, fp
 801fb8a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fb8e:	1c59      	adds	r1, r3, #1
 801fb90:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801fb94:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801fb98:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801fb9c:	ea45 050c 	orr.w	r5, r5, ip
 801fba0:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801fba4:	b2ea      	uxtb	r2, r5
 801fba6:	b2c9      	uxtb	r1, r1
 801fba8:	fb12 f20b 	smulbb	r2, r2, fp
 801fbac:	fb03 2301 	mla	r3, r3, r1, r2
 801fbb0:	b29b      	uxth	r3, r3
 801fbb2:	1c5a      	adds	r2, r3, #1
 801fbb4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801fbb8:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801fbbc:	fb12 f201 	smulbb	r2, r2, r1
 801fbc0:	121b      	asrs	r3, r3, #8
 801fbc2:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801fbc6:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801fbca:	0c2d      	lsrs	r5, r5, #16
 801fbcc:	fb03 230b 	mla	r3, r3, fp, r2
 801fbd0:	b29b      	uxth	r3, r3
 801fbd2:	1c5a      	adds	r2, r3, #1
 801fbd4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801fbd8:	121b      	asrs	r3, r3, #8
 801fbda:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801fbde:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801fbe2:	fb13 f101 	smulbb	r1, r3, r1
 801fbe6:	fb05 150b 	mla	r5, r5, fp, r1
 801fbea:	b2ad      	uxth	r5, r5
 801fbec:	1c69      	adds	r1, r5, #1
 801fbee:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801fbf2:	122d      	asrs	r5, r5, #8
 801fbf4:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801fbf8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801fbfa:	f10e 0e03 	add.w	lr, lr, #3
 801fbfe:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801fc00:	4413      	add	r3, r2
 801fc02:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801fc04:	932d      	str	r3, [sp, #180]	; 0xb4
 801fc06:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801fc08:	4413      	add	r3, r2
 801fc0a:	932e      	str	r3, [sp, #184]	; 0xb8
 801fc0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801fc0e:	3b01      	subs	r3, #1
 801fc10:	9315      	str	r3, [sp, #84]	; 0x54
 801fc12:	e4ed      	b.n	801f5f0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801fc14:	b160      	cbz	r0, 801fc30 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x710>
 801fc16:	5d2a      	ldrb	r2, [r5, r4]
 801fc18:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801fc1a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801fc1e:	25ff      	movs	r5, #255	; 0xff
 801fc20:	ea4f 6912 	mov.w	r9, r2, lsr #24
 801fc24:	920c      	str	r2, [sp, #48]	; 0x30
 801fc26:	46ac      	mov	ip, r5
 801fc28:	e6ef      	b.n	801fa0a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 801fc2a:	25ff      	movs	r5, #255	; 0xff
 801fc2c:	46a9      	mov	r9, r5
 801fc2e:	e6ec      	b.n	801fa0a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 801fc30:	25ff      	movs	r5, #255	; 0xff
 801fc32:	46a9      	mov	r9, r5
 801fc34:	e7f7      	b.n	801fc26 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x706>
 801fc36:	b01b      	add	sp, #108	; 0x6c
 801fc38:	ecbd 8b08 	vpop	{d8-d11}
 801fc3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fc40 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 801fc40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc44:	b085      	sub	sp, #20
 801fc46:	7888      	ldrb	r0, [r1, #2]
 801fc48:	4692      	mov	sl, r2
 801fc4a:	4698      	mov	r8, r3
 801fc4c:	9000      	str	r0, [sp, #0]
 801fc4e:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 801fc52:	7848      	ldrb	r0, [r1, #1]
 801fc54:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801fc58:	9001      	str	r0, [sp, #4]
 801fc5a:	7808      	ldrb	r0, [r1, #0]
 801fc5c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801fc60:	9002      	str	r0, [sp, #8]
 801fc62:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801fc66:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 801fc6a:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 801fc6e:	fb04 560c 	mla	r6, r4, ip, r5
 801fc72:	2c00      	cmp	r4, #0
 801fc74:	eb02 0e06 	add.w	lr, r2, r6
 801fc78:	9a00      	ldr	r2, [sp, #0]
 801fc7a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 801fc7e:	9a01      	ldr	r2, [sp, #4]
 801fc80:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 801fc84:	db3e      	blt.n	801fd04 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 801fc86:	45a1      	cmp	r9, r4
 801fc88:	dd3c      	ble.n	801fd04 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 801fc8a:	2d00      	cmp	r5, #0
 801fc8c:	db38      	blt.n	801fd00 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 801fc8e:	45ac      	cmp	ip, r5
 801fc90:	dd36      	ble.n	801fd00 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 801fc92:	f81a 2006 	ldrb.w	r2, [sl, r6]
 801fc96:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 801fc9a:	1c6e      	adds	r6, r5, #1
 801fc9c:	d435      	bmi.n	801fd0a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 801fc9e:	45b4      	cmp	ip, r6
 801fca0:	dd33      	ble.n	801fd0a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 801fca2:	b393      	cbz	r3, 801fd0a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 801fca4:	f89e 6001 	ldrb.w	r6, [lr, #1]
 801fca8:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 801fcac:	3401      	adds	r4, #1
 801fcae:	d430      	bmi.n	801fd12 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 801fcb0:	45a1      	cmp	r9, r4
 801fcb2:	dd2e      	ble.n	801fd12 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 801fcb4:	b36f      	cbz	r7, 801fd12 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 801fcb6:	2d00      	cmp	r5, #0
 801fcb8:	db29      	blt.n	801fd0e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 801fcba:	45ac      	cmp	ip, r5
 801fcbc:	dd27      	ble.n	801fd0e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 801fcbe:	f81e 400c 	ldrb.w	r4, [lr, ip]
 801fcc2:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 801fcc6:	3501      	adds	r5, #1
 801fcc8:	d407      	bmi.n	801fcda <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801fcca:	45ac      	cmp	ip, r5
 801fccc:	dd05      	ble.n	801fcda <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801fcce:	b123      	cbz	r3, 801fcda <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801fcd0:	44f4      	add	ip, lr
 801fcd2:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801fcd6:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 801fcda:	2b0f      	cmp	r3, #15
 801fcdc:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801fce0:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801fce4:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801fce8:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801fcec:	d801      	bhi.n	801fcf2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 801fcee:	2f0f      	cmp	r7, #15
 801fcf0:	d911      	bls.n	801fd16 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd6>
 801fcf2:	4b76      	ldr	r3, [pc, #472]	; (801fecc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 801fcf4:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801fcf8:	4a75      	ldr	r2, [pc, #468]	; (801fed0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 801fcfa:	4876      	ldr	r0, [pc, #472]	; (801fed4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 801fcfc:	f004 ff94 	bl	8024c28 <__assert_func>
 801fd00:	4602      	mov	r2, r0
 801fd02:	e7ca      	b.n	801fc9a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x5a>
 801fd04:	4606      	mov	r6, r0
 801fd06:	4602      	mov	r2, r0
 801fd08:	e7d0      	b.n	801fcac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 801fd0a:	4606      	mov	r6, r0
 801fd0c:	e7ce      	b.n	801fcac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 801fd0e:	4604      	mov	r4, r0
 801fd10:	e7d9      	b.n	801fcc6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x86>
 801fd12:	4604      	mov	r4, r0
 801fd14:	e7e1      	b.n	801fcda <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801fd16:	b29b      	uxth	r3, r3
 801fd18:	b2bf      	uxth	r7, r7
 801fd1a:	fb07 fe03 	mul.w	lr, r7, r3
 801fd1e:	011b      	lsls	r3, r3, #4
 801fd20:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801fd24:	eba3 0c0e 	sub.w	ip, r3, lr
 801fd28:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 801fd2c:	b2bf      	uxth	r7, r7
 801fd2e:	fa1f fc8c 	uxth.w	ip, ip
 801fd32:	1bed      	subs	r5, r5, r7
 801fd34:	fb0c f30a 	mul.w	r3, ip, sl
 801fd38:	b2ad      	uxth	r5, r5
 801fd3a:	fb05 330b 	mla	r3, r5, fp, r3
 801fd3e:	fb07 3309 	mla	r3, r7, r9, r3
 801fd42:	fb0e 3308 	mla	r3, lr, r8, r3
 801fd46:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801fd4a:	9303      	str	r3, [sp, #12]
 801fd4c:	2b00      	cmp	r3, #0
 801fd4e:	f000 80b9 	beq.w	801fec4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x284>
 801fd52:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801fd56:	d018      	beq.n	801fd8a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x14a>
 801fd58:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801fd5c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801fd60:	fb0b f303 	mul.w	r3, fp, r3
 801fd64:	fb0b fb02 	mul.w	fp, fp, r2
 801fd68:	0a1a      	lsrs	r2, r3, #8
 801fd6a:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 801fd6e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801fd72:	441a      	add	r2, r3
 801fd74:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 801fd78:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 801fd7c:	0a12      	lsrs	r2, r2, #8
 801fd7e:	0a1b      	lsrs	r3, r3, #8
 801fd80:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801fd84:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fd88:	431a      	orrs	r2, r3
 801fd8a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801fd8e:	d019      	beq.n	801fdc4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x184>
 801fd90:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 801fd94:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801fd98:	fb0a fb0b 	mul.w	fp, sl, fp
 801fd9c:	fb0a fa06 	mul.w	sl, sl, r6
 801fda0:	ea4f 261b 	mov.w	r6, fp, lsr #8
 801fda4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801fda8:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 801fdac:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801fdb0:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801fdb4:	445e      	add	r6, fp
 801fdb6:	0a1b      	lsrs	r3, r3, #8
 801fdb8:	0a36      	lsrs	r6, r6, #8
 801fdba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fdbe:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801fdc2:	431e      	orrs	r6, r3
 801fdc4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801fdc8:	d019      	beq.n	801fdfe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1be>
 801fdca:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801fdce:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801fdd2:	fb09 fa0a 	mul.w	sl, r9, sl
 801fdd6:	fb09 f904 	mul.w	r9, r9, r4
 801fdda:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801fdde:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801fde2:	f509 7380 	add.w	r3, r9, #256	; 0x100
 801fde6:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801fdea:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 801fdee:	4454      	add	r4, sl
 801fdf0:	0a1b      	lsrs	r3, r3, #8
 801fdf2:	0a24      	lsrs	r4, r4, #8
 801fdf4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fdf8:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801fdfc:	431c      	orrs	r4, r3
 801fdfe:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801fe02:	d019      	beq.n	801fe38 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f8>
 801fe04:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 801fe08:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801fe0c:	fb08 f909 	mul.w	r9, r8, r9
 801fe10:	fb08 f800 	mul.w	r8, r8, r0
 801fe14:	ea4f 2019 	mov.w	r0, r9, lsr #8
 801fe18:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801fe1c:	f508 7380 	add.w	r3, r8, #256	; 0x100
 801fe20:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801fe24:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 801fe28:	4448      	add	r0, r9
 801fe2a:	0a1b      	lsrs	r3, r3, #8
 801fe2c:	0a00      	lsrs	r0, r0, #8
 801fe2e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fe32:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801fe36:	4318      	orrs	r0, r3
 801fe38:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801fe3c:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801fe40:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801fe44:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801fe48:	fb0c f808 	mul.w	r8, ip, r8
 801fe4c:	fb0c f606 	mul.w	r6, ip, r6
 801fe50:	fb05 8803 	mla	r8, r5, r3, r8
 801fe54:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 801fe58:	fb05 6202 	mla	r2, r5, r2, r6
 801fe5c:	fb07 8803 	mla	r8, r7, r3, r8
 801fe60:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 801fe64:	fb0e 8303 	mla	r3, lr, r3, r8
 801fe68:	0a1b      	lsrs	r3, r3, #8
 801fe6a:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 801fe6e:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 801fe72:	9c02      	ldr	r4, [sp, #8]
 801fe74:	fb07 2703 	mla	r7, r7, r3, r2
 801fe78:	9a03      	ldr	r2, [sp, #12]
 801fe7a:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 801fe7e:	43d2      	mvns	r2, r2
 801fe80:	fb0e 7303 	mla	r3, lr, r3, r7
 801fe84:	b2d2      	uxtb	r2, r2
 801fe86:	0a1b      	lsrs	r3, r3, #8
 801fe88:	4354      	muls	r4, r2
 801fe8a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fe8e:	1c60      	adds	r0, r4, #1
 801fe90:	ea48 0303 	orr.w	r3, r8, r3
 801fe94:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 801fe98:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801fe9c:	7008      	strb	r0, [r1, #0]
 801fe9e:	9801      	ldr	r0, [sp, #4]
 801fea0:	4350      	muls	r0, r2
 801fea2:	1c44      	adds	r4, r0, #1
 801fea4:	eb04 2410 	add.w	r4, r4, r0, lsr #8
 801fea8:	0a18      	lsrs	r0, r3, #8
 801feaa:	0c1b      	lsrs	r3, r3, #16
 801feac:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 801feb0:	7048      	strb	r0, [r1, #1]
 801feb2:	9800      	ldr	r0, [sp, #0]
 801feb4:	4350      	muls	r0, r2
 801feb6:	4602      	mov	r2, r0
 801feb8:	3001      	adds	r0, #1
 801feba:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801febe:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801fec2:	708b      	strb	r3, [r1, #2]
 801fec4:	b005      	add	sp, #20
 801fec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801feca:	bf00      	nop
 801fecc:	08029617 	.word	0x08029617
 801fed0:	08029b0e 	.word	0x08029b0e
 801fed4:	080296e0 	.word	0x080296e0

0801fed8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801fed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fedc:	ed2d 8b08 	vpush	{d8-d11}
 801fee0:	b097      	sub	sp, #92	; 0x5c
 801fee2:	eeb0 aa40 	vmov.f32	s20, s0
 801fee6:	eef0 9a60 	vmov.f32	s19, s1
 801feea:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 801feec:	eeb0 9a41 	vmov.f32	s18, s2
 801fef0:	9308      	str	r3, [sp, #32]
 801fef2:	eeb0 8a62 	vmov.f32	s16, s5
 801fef6:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 801fefa:	eef0 8a43 	vmov.f32	s17, s6
 801fefe:	9015      	str	r0, [sp, #84]	; 0x54
 801ff00:	eef0 ba44 	vmov.f32	s23, s8
 801ff04:	6868      	ldr	r0, [r5, #4]
 801ff06:	eeb0 ba64 	vmov.f32	s22, s9
 801ff0a:	9112      	str	r1, [sp, #72]	; 0x48
 801ff0c:	eef0 aa45 	vmov.f32	s21, s10
 801ff10:	9310      	str	r3, [sp, #64]	; 0x40
 801ff12:	9214      	str	r2, [sp, #80]	; 0x50
 801ff14:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 801ff16:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 801ff1a:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801ff1e:	fb00 1303 	mla	r3, r0, r3, r1
 801ff22:	6829      	ldr	r1, [r5, #0]
 801ff24:	6855      	ldr	r5, [r2, #4]
 801ff26:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ff2a:	3504      	adds	r5, #4
 801ff2c:	18cb      	adds	r3, r1, r3
 801ff2e:	930b      	str	r3, [sp, #44]	; 0x2c
 801ff30:	6813      	ldr	r3, [r2, #0]
 801ff32:	9311      	str	r3, [sp, #68]	; 0x44
 801ff34:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ff36:	2b00      	cmp	r3, #0
 801ff38:	dc03      	bgt.n	801ff42 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801ff3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ff3c:	2b00      	cmp	r3, #0
 801ff3e:	f340 8333 	ble.w	80205a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 801ff42:	9b08      	ldr	r3, [sp, #32]
 801ff44:	2b00      	cmp	r3, #0
 801ff46:	f340 8190 	ble.w	802026a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 801ff4a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801ff4c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ff4e:	1412      	asrs	r2, r2, #16
 801ff50:	ea4f 4323 	mov.w	r3, r3, asr #16
 801ff54:	d42f      	bmi.n	801ffb6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801ff56:	1c51      	adds	r1, r2, #1
 801ff58:	428c      	cmp	r4, r1
 801ff5a:	dd2f      	ble.n	801ffbc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801ff5c:	2b00      	cmp	r3, #0
 801ff5e:	db2d      	blt.n	801ffbc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801ff60:	1c59      	adds	r1, r3, #1
 801ff62:	9810      	ldr	r0, [sp, #64]	; 0x40
 801ff64:	4288      	cmp	r0, r1
 801ff66:	dd29      	ble.n	801ffbc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801ff68:	9b08      	ldr	r3, [sp, #32]
 801ff6a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801ff6c:	3b01      	subs	r3, #1
 801ff6e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801ff70:	fb02 1203 	mla	r2, r2, r3, r1
 801ff74:	1412      	asrs	r2, r2, #16
 801ff76:	d42b      	bmi.n	801ffd0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801ff78:	3201      	adds	r2, #1
 801ff7a:	4294      	cmp	r4, r2
 801ff7c:	dd28      	ble.n	801ffd0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801ff7e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801ff80:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801ff82:	fb02 1303 	mla	r3, r2, r3, r1
 801ff86:	141b      	asrs	r3, r3, #16
 801ff88:	d422      	bmi.n	801ffd0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801ff8a:	3301      	adds	r3, #1
 801ff8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ff8e:	429a      	cmp	r2, r3
 801ff90:	dd1e      	ble.n	801ffd0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801ff92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ff94:	f103 0803 	add.w	r8, r3, #3
 801ff98:	9b08      	ldr	r3, [sp, #32]
 801ff9a:	9307      	str	r3, [sp, #28]
 801ff9c:	9b07      	ldr	r3, [sp, #28]
 801ff9e:	2b00      	cmp	r3, #0
 801ffa0:	f300 81ca 	bgt.w	8020338 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x460>
 801ffa4:	9b08      	ldr	r3, [sp, #32]
 801ffa6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ffa8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ffac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ffb0:	441a      	add	r2, r3
 801ffb2:	920b      	str	r2, [sp, #44]	; 0x2c
 801ffb4:	e15b      	b.n	802026e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 801ffb6:	1c51      	adds	r1, r2, #1
 801ffb8:	f040 8148 	bne.w	802024c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 801ffbc:	42a2      	cmp	r2, r4
 801ffbe:	f280 8145 	bge.w	802024c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 801ffc2:	1c5a      	adds	r2, r3, #1
 801ffc4:	f2c0 8142 	blt.w	802024c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 801ffc8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ffca:	4293      	cmp	r3, r2
 801ffcc:	f280 813e 	bge.w	802024c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 801ffd0:	9b08      	ldr	r3, [sp, #32]
 801ffd2:	9313      	str	r3, [sp, #76]	; 0x4c
 801ffd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ffd6:	9307      	str	r3, [sp, #28]
 801ffd8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ffda:	2b00      	cmp	r3, #0
 801ffdc:	dde2      	ble.n	801ffa4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 801ffde:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801ffe0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ffe2:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801ffe6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801ffe8:	141b      	asrs	r3, r3, #16
 801ffea:	f3c2 3003 	ubfx	r0, r2, #12, #4
 801ffee:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801fff0:	1412      	asrs	r2, r2, #16
 801fff2:	f100 818b 	bmi.w	802030c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x434>
 801fff6:	1c56      	adds	r6, r2, #1
 801fff8:	42b4      	cmp	r4, r6
 801fffa:	f340 8189 	ble.w	8020310 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 801fffe:	2b00      	cmp	r3, #0
 8020000:	f2c0 8186 	blt.w	8020310 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 8020004:	1c5e      	adds	r6, r3, #1
 8020006:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8020008:	42b7      	cmp	r7, r6
 802000a:	f340 8181 	ble.w	8020310 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 802000e:	fb03 2304 	mla	r3, r3, r4, r2
 8020012:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020014:	18d6      	adds	r6, r2, r3
 8020016:	5cd3      	ldrb	r3, [r2, r3]
 8020018:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 802001c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8020020:	2900      	cmp	r1, #0
 8020022:	f000 8163 	beq.w	80202ec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 8020026:	7872      	ldrb	r2, [r6, #1]
 8020028:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802002c:	920c      	str	r2, [sp, #48]	; 0x30
 802002e:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8020032:	2800      	cmp	r0, #0
 8020034:	f000 8164 	beq.w	8020300 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x428>
 8020038:	1932      	adds	r2, r6, r4
 802003a:	5d36      	ldrb	r6, [r6, r4]
 802003c:	7852      	ldrb	r2, [r2, #1]
 802003e:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8020042:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8020046:	9609      	str	r6, [sp, #36]	; 0x24
 8020048:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802004c:	0e16      	lsrs	r6, r2, #24
 802004e:	920d      	str	r2, [sp, #52]	; 0x34
 8020050:	b289      	uxth	r1, r1
 8020052:	b280      	uxth	r0, r0
 8020054:	fb01 fb00 	mul.w	fp, r1, r0
 8020058:	0109      	lsls	r1, r1, #4
 802005a:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 802005e:	eba1 090b 	sub.w	r9, r1, fp
 8020062:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8020066:	b280      	uxth	r0, r0
 8020068:	fa1f f989 	uxth.w	r9, r9
 802006c:	1a12      	subs	r2, r2, r0
 802006e:	fb09 f108 	mul.w	r1, r9, r8
 8020072:	b292      	uxth	r2, r2
 8020074:	fb02 110c 	mla	r1, r2, ip, r1
 8020078:	fb00 110a 	mla	r1, r0, sl, r1
 802007c:	fb0b 1106 	mla	r1, fp, r6, r1
 8020080:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020084:	2900      	cmp	r1, #0
 8020086:	f000 80d2 	beq.w	802022e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 802008a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802008e:	d01b      	beq.n	80200c8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f0>
 8020090:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8020094:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020098:	fb0c fe0e 	mul.w	lr, ip, lr
 802009c:	fb0c fc03 	mul.w	ip, ip, r3
 80200a0:	ea4f 231e 	mov.w	r3, lr, lsr #8
 80200a4:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80200a8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80200ac:	4473      	add	r3, lr
 80200ae:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 80200b2:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 80200b6:	0a1b      	lsrs	r3, r3, #8
 80200b8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80200bc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80200c0:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80200c4:	ea43 030e 	orr.w	r3, r3, lr
 80200c8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80200cc:	d01e      	beq.n	802010c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x234>
 80200ce:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80200d0:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80200d4:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 80200d8:	fb08 fc0c 	mul.w	ip, r8, ip
 80200dc:	fb08 f80e 	mul.w	r8, r8, lr
 80200e0:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80200e4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80200e8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80200ec:	44e6      	add	lr, ip
 80200ee:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 80200f2:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 80200f6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80200fa:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80200fe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020102:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8020106:	ea4e 0708 	orr.w	r7, lr, r8
 802010a:	970c      	str	r7, [sp, #48]	; 0x30
 802010c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8020110:	d01e      	beq.n	8020150 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8020112:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8020114:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8020118:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 802011c:	fb0a f808 	mul.w	r8, sl, r8
 8020120:	fb0a fa0c 	mul.w	sl, sl, ip
 8020124:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8020128:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 802012c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020130:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020134:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020138:	44c6      	add	lr, r8
 802013a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802013e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020142:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020146:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802014a:	ea4e 070a 	orr.w	r7, lr, sl
 802014e:	9709      	str	r7, [sp, #36]	; 0x24
 8020150:	2eff      	cmp	r6, #255	; 0xff
 8020152:	d01d      	beq.n	8020190 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>
 8020154:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8020156:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 802015a:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 802015e:	fb06 f808 	mul.w	r8, r6, r8
 8020162:	fb06 f60c 	mul.w	r6, r6, ip
 8020166:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 802016a:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 802016e:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8020172:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020176:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 802017a:	44c6      	add	lr, r8
 802017c:	0a36      	lsrs	r6, r6, #8
 802017e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020182:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020186:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802018a:	ea4e 0606 	orr.w	r6, lr, r6
 802018e:	960d      	str	r6, [sp, #52]	; 0x34
 8020190:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8020192:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8020196:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8020198:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802019c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80201a0:	43c9      	mvns	r1, r1
 80201a2:	fb09 f606 	mul.w	r6, r9, r6
 80201a6:	b2c9      	uxtb	r1, r1
 80201a8:	fb02 660c 	mla	r6, r2, ip, r6
 80201ac:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80201b0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80201b2:	fb00 660c 	mla	r6, r0, ip, r6
 80201b6:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80201ba:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80201bc:	fb0b 660c 	mla	r6, fp, ip, r6
 80201c0:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80201c4:	fb09 f90c 	mul.w	r9, r9, ip
 80201c8:	0a36      	lsrs	r6, r6, #8
 80201ca:	fb02 9303 	mla	r3, r2, r3, r9
 80201ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80201d0:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80201d4:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 80201d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80201da:	fb00 330e 	mla	r3, r0, lr, r3
 80201de:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 80201e2:	fb0b 3b00 	mla	fp, fp, r0, r3
 80201e6:	9b07      	ldr	r3, [sp, #28]
 80201e8:	781b      	ldrb	r3, [r3, #0]
 80201ea:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80201ee:	fb03 f201 	mul.w	r2, r3, r1
 80201f2:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80201f6:	1c53      	adds	r3, r2, #1
 80201f8:	ea46 060b 	orr.w	r6, r6, fp
 80201fc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020200:	9a07      	ldr	r2, [sp, #28]
 8020202:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8020206:	7013      	strb	r3, [r2, #0]
 8020208:	7853      	ldrb	r3, [r2, #1]
 802020a:	434b      	muls	r3, r1
 802020c:	1c5a      	adds	r2, r3, #1
 802020e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8020212:	0a33      	lsrs	r3, r6, #8
 8020214:	0c36      	lsrs	r6, r6, #16
 8020216:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802021a:	9a07      	ldr	r2, [sp, #28]
 802021c:	7053      	strb	r3, [r2, #1]
 802021e:	7893      	ldrb	r3, [r2, #2]
 8020220:	4359      	muls	r1, r3
 8020222:	1c4b      	adds	r3, r1, #1
 8020224:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8020228:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 802022c:	7096      	strb	r6, [r2, #2]
 802022e:	9b07      	ldr	r3, [sp, #28]
 8020230:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020232:	3303      	adds	r3, #3
 8020234:	9307      	str	r3, [sp, #28]
 8020236:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020238:	4413      	add	r3, r2
 802023a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802023c:	9329      	str	r3, [sp, #164]	; 0xa4
 802023e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020240:	4413      	add	r3, r2
 8020242:	932a      	str	r3, [sp, #168]	; 0xa8
 8020244:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020246:	3b01      	subs	r3, #1
 8020248:	9313      	str	r3, [sp, #76]	; 0x4c
 802024a:	e6c5      	b.n	801ffd8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 802024c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802024e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020250:	4413      	add	r3, r2
 8020252:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8020254:	9329      	str	r3, [sp, #164]	; 0xa4
 8020256:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020258:	4413      	add	r3, r2
 802025a:	932a      	str	r3, [sp, #168]	; 0xa8
 802025c:	9b08      	ldr	r3, [sp, #32]
 802025e:	3b01      	subs	r3, #1
 8020260:	9308      	str	r3, [sp, #32]
 8020262:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020264:	3303      	adds	r3, #3
 8020266:	930b      	str	r3, [sp, #44]	; 0x2c
 8020268:	e66b      	b.n	801ff42 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 802026a:	f47f ae7d 	bne.w	801ff68 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 802026e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020270:	2b00      	cmp	r3, #0
 8020272:	f340 8199 	ble.w	80205a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 8020276:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802027a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802027c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8020280:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8020284:	eef0 6a48 	vmov.f32	s13, s16
 8020288:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802028c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8020290:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020294:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8020298:	eef0 6a68 	vmov.f32	s13, s17
 802029c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80202a0:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 80202a4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80202a8:	ee69 7a27 	vmul.f32	s15, s18, s15
 80202ac:	ee37 8a48 	vsub.f32	s16, s14, s16
 80202b0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80202b4:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80202b8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80202bc:	ee18 2a10 	vmov	r2, s16
 80202c0:	eeb0 8a47 	vmov.f32	s16, s14
 80202c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80202c8:	ee18 2a90 	vmov	r2, s17
 80202cc:	932b      	str	r3, [sp, #172]	; 0xac
 80202ce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80202d0:	eef0 8a67 	vmov.f32	s17, s15
 80202d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80202d8:	932c      	str	r3, [sp, #176]	; 0xb0
 80202da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80202dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80202de:	3b01      	subs	r3, #1
 80202e0:	9312      	str	r3, [sp, #72]	; 0x48
 80202e2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80202e4:	bf08      	it	eq
 80202e6:	4613      	moveq	r3, r2
 80202e8:	9308      	str	r3, [sp, #32]
 80202ea:	e623      	b.n	801ff34 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 80202ec:	b158      	cbz	r0, 8020306 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 80202ee:	5d32      	ldrb	r2, [r6, r4]
 80202f0:	26ff      	movs	r6, #255	; 0xff
 80202f2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80202f6:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 80202fa:	9209      	str	r2, [sp, #36]	; 0x24
 80202fc:	46b0      	mov	r8, r6
 80202fe:	e6a7      	b.n	8020050 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 8020300:	26ff      	movs	r6, #255	; 0xff
 8020302:	46b2      	mov	sl, r6
 8020304:	e6a4      	b.n	8020050 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 8020306:	26ff      	movs	r6, #255	; 0xff
 8020308:	46b2      	mov	sl, r6
 802030a:	e7f7      	b.n	80202fc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 802030c:	1c57      	adds	r7, r2, #1
 802030e:	d18e      	bne.n	802022e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8020310:	4294      	cmp	r4, r2
 8020312:	dd8c      	ble.n	802022e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8020314:	1c5e      	adds	r6, r3, #1
 8020316:	db8a      	blt.n	802022e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8020318:	9e10      	ldr	r6, [sp, #64]	; 0x40
 802031a:	429e      	cmp	r6, r3
 802031c:	dd87      	ble.n	802022e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 802031e:	e9cd 1004 	strd	r1, r0, [sp, #16]
 8020322:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8020326:	e9cd 4600 	strd	r4, r6, [sp]
 802032a:	462b      	mov	r3, r5
 802032c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802032e:	9907      	ldr	r1, [sp, #28]
 8020330:	9815      	ldr	r0, [sp, #84]	; 0x54
 8020332:	f7ff fc85 	bl	801fc40 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8020336:	e77a      	b.n	802022e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8020338:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802033a:	9929      	ldr	r1, [sp, #164]	; 0xa4
 802033c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020340:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020342:	1409      	asrs	r1, r1, #16
 8020344:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8020348:	141b      	asrs	r3, r3, #16
 802034a:	fb04 1303 	mla	r3, r4, r3, r1
 802034e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8020350:	18ce      	adds	r6, r1, r3
 8020352:	5ccb      	ldrb	r3, [r1, r3]
 8020354:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8020358:	0e1f      	lsrs	r7, r3, #24
 802035a:	2a00      	cmp	r2, #0
 802035c:	f000 8114 	beq.w	8020588 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b0>
 8020360:	7871      	ldrb	r1, [r6, #1]
 8020362:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8020366:	910e      	str	r1, [sp, #56]	; 0x38
 8020368:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 802036c:	2800      	cmp	r0, #0
 802036e:	f000 8115 	beq.w	802059c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c4>
 8020372:	1931      	adds	r1, r6, r4
 8020374:	5d36      	ldrb	r6, [r6, r4]
 8020376:	7849      	ldrb	r1, [r1, #1]
 8020378:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 802037c:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8020380:	960a      	str	r6, [sp, #40]	; 0x28
 8020382:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8020386:	0e0e      	lsrs	r6, r1, #24
 8020388:	910f      	str	r1, [sp, #60]	; 0x3c
 802038a:	b292      	uxth	r2, r2
 802038c:	b280      	uxth	r0, r0
 802038e:	fb02 fb00 	mul.w	fp, r2, r0
 8020392:	0112      	lsls	r2, r2, #4
 8020394:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 8020398:	eba2 090b 	sub.w	r9, r2, fp
 802039c:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80203a0:	b280      	uxth	r0, r0
 80203a2:	fa1f f989 	uxth.w	r9, r9
 80203a6:	1a09      	subs	r1, r1, r0
 80203a8:	fb09 f20e 	mul.w	r2, r9, lr
 80203ac:	b289      	uxth	r1, r1
 80203ae:	fb01 2207 	mla	r2, r1, r7, r2
 80203b2:	fb00 220a 	mla	r2, r0, sl, r2
 80203b6:	fb0b 2206 	mla	r2, fp, r6, r2
 80203ba:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80203be:	9213      	str	r2, [sp, #76]	; 0x4c
 80203c0:	2a00      	cmp	r2, #0
 80203c2:	f000 80d4 	beq.w	802056e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x696>
 80203c6:	2fff      	cmp	r7, #255	; 0xff
 80203c8:	d01a      	beq.n	8020400 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x528>
 80203ca:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80203ce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80203d2:	fb07 fc0c 	mul.w	ip, r7, ip
 80203d6:	435f      	muls	r7, r3
 80203d8:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80203dc:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80203e0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80203e4:	4463      	add	r3, ip
 80203e6:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 80203ea:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 80203ee:	0a1b      	lsrs	r3, r3, #8
 80203f0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80203f4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80203f8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80203fc:	ea43 030c 	orr.w	r3, r3, ip
 8020400:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8020404:	d01f      	beq.n	8020446 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56e>
 8020406:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8020408:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802040a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802040e:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8020412:	fb0e f707 	mul.w	r7, lr, r7
 8020416:	fb0e fe0c 	mul.w	lr, lr, ip
 802041a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802041e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020422:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020426:	44bc      	add	ip, r7
 8020428:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 802042c:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8020430:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020434:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020438:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802043c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8020440:	ea4c 020e 	orr.w	r2, ip, lr
 8020444:	920e      	str	r2, [sp, #56]	; 0x38
 8020446:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802044a:	d01e      	beq.n	802048a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b2>
 802044c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802044e:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8020452:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8020456:	fb0a fe0e 	mul.w	lr, sl, lr
 802045a:	fb0a fa07 	mul.w	sl, sl, r7
 802045e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8020462:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8020466:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802046a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802046e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020472:	44f4      	add	ip, lr
 8020474:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020478:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802047c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020480:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020484:	ea4c 020a 	orr.w	r2, ip, sl
 8020488:	920a      	str	r2, [sp, #40]	; 0x28
 802048a:	2eff      	cmp	r6, #255	; 0xff
 802048c:	d01c      	beq.n	80204c8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f0>
 802048e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020490:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8020494:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8020498:	fb06 fe0e 	mul.w	lr, r6, lr
 802049c:	437e      	muls	r6, r7
 802049e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80204a2:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80204a6:	f506 7780 	add.w	r7, r6, #256	; 0x100
 80204aa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80204ae:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 80204b2:	44f4      	add	ip, lr
 80204b4:	0a36      	lsrs	r6, r6, #8
 80204b6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80204ba:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80204be:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80204c2:	ea4c 0206 	orr.w	r2, ip, r6
 80204c6:	920f      	str	r2, [sp, #60]	; 0x3c
 80204c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80204ca:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80204ce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80204d2:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 80204d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80204d8:	fb09 f606 	mul.w	r6, r9, r6
 80204dc:	fb01 6607 	mla	r6, r1, r7, r6
 80204e0:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 80204e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80204e6:	fb00 6607 	mla	r6, r0, r7, r6
 80204ea:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 80204ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80204f0:	fb0b 6607 	mla	r6, fp, r7, r6
 80204f4:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 80204f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80204fa:	fb09 f907 	mul.w	r9, r9, r7
 80204fe:	0a36      	lsrs	r6, r6, #8
 8020500:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8020504:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020506:	fb01 9303 	mla	r3, r1, r3, r9
 802050a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802050e:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8020512:	fb00 330c 	mla	r3, r0, ip, r3
 8020516:	fb0b 3e0e 	mla	lr, fp, lr, r3
 802051a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802051c:	43da      	mvns	r2, r3
 802051e:	f818 3c03 	ldrb.w	r3, [r8, #-3]
 8020522:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020526:	b2d2      	uxtb	r2, r2
 8020528:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802052c:	fb03 f102 	mul.w	r1, r3, r2
 8020530:	ea46 060e 	orr.w	r6, r6, lr
 8020534:	1c4b      	adds	r3, r1, #1
 8020536:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802053a:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 802053e:	f808 3c03 	strb.w	r3, [r8, #-3]
 8020542:	f818 3c02 	ldrb.w	r3, [r8, #-2]
 8020546:	4353      	muls	r3, r2
 8020548:	1c59      	adds	r1, r3, #1
 802054a:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802054e:	0a33      	lsrs	r3, r6, #8
 8020550:	0c36      	lsrs	r6, r6, #16
 8020552:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8020556:	f808 3c02 	strb.w	r3, [r8, #-2]
 802055a:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 802055e:	435a      	muls	r2, r3
 8020560:	1c53      	adds	r3, r2, #1
 8020562:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8020566:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 802056a:	f808 6c01 	strb.w	r6, [r8, #-1]
 802056e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020570:	f108 0803 	add.w	r8, r8, #3
 8020574:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020576:	4413      	add	r3, r2
 8020578:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802057a:	9329      	str	r3, [sp, #164]	; 0xa4
 802057c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802057e:	4413      	add	r3, r2
 8020580:	932a      	str	r3, [sp, #168]	; 0xa8
 8020582:	9b07      	ldr	r3, [sp, #28]
 8020584:	3b01      	subs	r3, #1
 8020586:	e508      	b.n	801ff9a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc2>
 8020588:	b158      	cbz	r0, 80205a2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ca>
 802058a:	5d31      	ldrb	r1, [r6, r4]
 802058c:	26ff      	movs	r6, #255	; 0xff
 802058e:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8020592:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8020596:	910a      	str	r1, [sp, #40]	; 0x28
 8020598:	46b6      	mov	lr, r6
 802059a:	e6f6      	b.n	802038a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 802059c:	26ff      	movs	r6, #255	; 0xff
 802059e:	46b2      	mov	sl, r6
 80205a0:	e6f3      	b.n	802038a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 80205a2:	26ff      	movs	r6, #255	; 0xff
 80205a4:	46b2      	mov	sl, r6
 80205a6:	e7f7      	b.n	8020598 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c0>
 80205a8:	b017      	add	sp, #92	; 0x5c
 80205aa:	ecbd 8b08 	vpop	{d8-d11}
 80205ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080205b4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 80205b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80205b8:	b08d      	sub	sp, #52	; 0x34
 80205ba:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 80205be:	9103      	str	r1, [sp, #12]
 80205c0:	fb07 5803 	mla	r8, r7, r3, r5
 80205c4:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 80205c8:	9803      	ldr	r0, [sp, #12]
 80205ca:	2f00      	cmp	r7, #0
 80205cc:	910b      	str	r1, [sp, #44]	; 0x2c
 80205ce:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80205d2:	9903      	ldr	r1, [sp, #12]
 80205d4:	9c03      	ldr	r4, [sp, #12]
 80205d6:	eb02 0608 	add.w	r6, r2, r8
 80205da:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 80205de:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 80205e2:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 80205e6:	7809      	ldrb	r1, [r1, #0]
 80205e8:	7840      	ldrb	r0, [r0, #1]
 80205ea:	78a4      	ldrb	r4, [r4, #2]
 80205ec:	db51      	blt.n	8020692 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 80205ee:	45be      	cmp	lr, r7
 80205f0:	dd4f      	ble.n	8020692 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 80205f2:	2d00      	cmp	r5, #0
 80205f4:	db49      	blt.n	802068a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 80205f6:	42ab      	cmp	r3, r5
 80205f8:	dd47      	ble.n	802068a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 80205fa:	f812 2008 	ldrb.w	r2, [r2, r8]
 80205fe:	9204      	str	r2, [sp, #16]
 8020600:	7872      	ldrb	r2, [r6, #1]
 8020602:	9205      	str	r2, [sp, #20]
 8020604:	78b2      	ldrb	r2, [r6, #2]
 8020606:	9206      	str	r2, [sp, #24]
 8020608:	1c6a      	adds	r2, r5, #1
 802060a:	d449      	bmi.n	80206a0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 802060c:	4293      	cmp	r3, r2
 802060e:	dd47      	ble.n	80206a0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8020610:	f1bc 0f00 	cmp.w	ip, #0
 8020614:	d044      	beq.n	80206a0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8020616:	7972      	ldrb	r2, [r6, #5]
 8020618:	f896 b003 	ldrb.w	fp, [r6, #3]
 802061c:	f896 a004 	ldrb.w	sl, [r6, #4]
 8020620:	9201      	str	r2, [sp, #4]
 8020622:	3701      	adds	r7, #1
 8020624:	d444      	bmi.n	80206b0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 8020626:	45be      	cmp	lr, r7
 8020628:	dd42      	ble.n	80206b0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 802062a:	f1b9 0f00 	cmp.w	r9, #0
 802062e:	f000 80c1 	beq.w	80207b4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 8020632:	2d00      	cmp	r5, #0
 8020634:	db38      	blt.n	80206a8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 8020636:	42ab      	cmp	r3, r5
 8020638:	dd36      	ble.n	80206a8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 802063a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 802063e:	f816 8002 	ldrb.w	r8, [r6, r2]
 8020642:	2203      	movs	r2, #3
 8020644:	fb03 6702 	mla	r7, r3, r2, r6
 8020648:	fb03 6202 	mla	r2, r3, r2, r6
 802064c:	787f      	ldrb	r7, [r7, #1]
 802064e:	f892 e002 	ldrb.w	lr, [r2, #2]
 8020652:	9702      	str	r7, [sp, #8]
 8020654:	3501      	adds	r5, #1
 8020656:	d432      	bmi.n	80206be <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8020658:	42ab      	cmp	r3, r5
 802065a:	dd30      	ble.n	80206be <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 802065c:	f1bc 0f00 	cmp.w	ip, #0
 8020660:	d031      	beq.n	80206c6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 8020662:	2703      	movs	r7, #3
 8020664:	fb13 7207 	smlabb	r2, r3, r7, r7
 8020668:	5cb5      	ldrb	r5, [r6, r2]
 802066a:	fb03 6207 	mla	r2, r3, r7, r6
 802066e:	fb03 6307 	mla	r3, r3, r7, r6
 8020672:	7912      	ldrb	r2, [r2, #4]
 8020674:	795e      	ldrb	r6, [r3, #5]
 8020676:	f1bc 0f0f 	cmp.w	ip, #15
 802067a:	d927      	bls.n	80206cc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 802067c:	4b53      	ldr	r3, [pc, #332]	; (80207cc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 802067e:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8020682:	4a53      	ldr	r2, [pc, #332]	; (80207d0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 8020684:	4853      	ldr	r0, [pc, #332]	; (80207d4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 8020686:	f004 facf 	bl	8024c28 <__assert_func>
 802068a:	e9cd 0405 	strd	r0, r4, [sp, #20]
 802068e:	9104      	str	r1, [sp, #16]
 8020690:	e7ba      	b.n	8020608 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 8020692:	9401      	str	r4, [sp, #4]
 8020694:	4682      	mov	sl, r0
 8020696:	468b      	mov	fp, r1
 8020698:	9104      	str	r1, [sp, #16]
 802069a:	e9cd 0405 	strd	r0, r4, [sp, #20]
 802069e:	e7c0      	b.n	8020622 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 80206a0:	9401      	str	r4, [sp, #4]
 80206a2:	4682      	mov	sl, r0
 80206a4:	468b      	mov	fp, r1
 80206a6:	e7bc      	b.n	8020622 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 80206a8:	46a6      	mov	lr, r4
 80206aa:	9002      	str	r0, [sp, #8]
 80206ac:	4688      	mov	r8, r1
 80206ae:	e7d1      	b.n	8020654 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 80206b0:	4626      	mov	r6, r4
 80206b2:	4602      	mov	r2, r0
 80206b4:	460d      	mov	r5, r1
 80206b6:	46a6      	mov	lr, r4
 80206b8:	9002      	str	r0, [sp, #8]
 80206ba:	4688      	mov	r8, r1
 80206bc:	e7db      	b.n	8020676 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 80206be:	4626      	mov	r6, r4
 80206c0:	4602      	mov	r2, r0
 80206c2:	460d      	mov	r5, r1
 80206c4:	e7d7      	b.n	8020676 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 80206c6:	4626      	mov	r6, r4
 80206c8:	4602      	mov	r2, r0
 80206ca:	460d      	mov	r5, r1
 80206cc:	f1b9 0f0f 	cmp.w	r9, #15
 80206d0:	d8d4      	bhi.n	802067c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 80206d2:	fa1f f38c 	uxth.w	r3, ip
 80206d6:	fa1f fc89 	uxth.w	ip, r9
 80206da:	fb03 f70c 	mul.w	r7, r3, ip
 80206de:	011b      	lsls	r3, r3, #4
 80206e0:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 80206e4:	9707      	str	r7, [sp, #28]
 80206e6:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 80206ea:	fa1f fc8c 	uxth.w	ip, ip
 80206ee:	eba7 070c 	sub.w	r7, r7, ip
 80206f2:	b2bf      	uxth	r7, r7
 80206f4:	9709      	str	r7, [sp, #36]	; 0x24
 80206f6:	9f07      	ldr	r7, [sp, #28]
 80206f8:	1bdb      	subs	r3, r3, r7
 80206fa:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 80206fe:	b29b      	uxth	r3, r3
 8020700:	9708      	str	r7, [sp, #32]
 8020702:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8020704:	930a      	str	r3, [sp, #40]	; 0x28
 8020706:	ea6f 0907 	mvn.w	r9, r7
 802070a:	fb03 fb0b 	mul.w	fp, r3, fp
 802070e:	9f04      	ldr	r7, [sp, #16]
 8020710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020712:	fa5f f989 	uxtb.w	r9, r9
 8020716:	fb03 bb07 	mla	fp, r3, r7, fp
 802071a:	9f07      	ldr	r7, [sp, #28]
 802071c:	fb11 f109 	smulbb	r1, r1, r9
 8020720:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020722:	fb0c b808 	mla	r8, ip, r8, fp
 8020726:	fb10 f009 	smulbb	r0, r0, r9
 802072a:	fb14 f409 	smulbb	r4, r4, r9
 802072e:	fb07 8805 	mla	r8, r7, r5, r8
 8020732:	9d08      	ldr	r5, [sp, #32]
 8020734:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8020736:	f3c8 2807 	ubfx	r8, r8, #8, #8
 802073a:	fb08 1805 	mla	r8, r8, r5, r1
 802073e:	9d05      	ldr	r5, [sp, #20]
 8020740:	fa1f f888 	uxth.w	r8, r8
 8020744:	f108 0101 	add.w	r1, r8, #1
 8020748:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 802074c:	9903      	ldr	r1, [sp, #12]
 802074e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020752:	f881 8000 	strb.w	r8, [r1]
 8020756:	fb03 f10a 	mul.w	r1, r3, sl
 802075a:	fb07 1105 	mla	r1, r7, r5, r1
 802075e:	9d02      	ldr	r5, [sp, #8]
 8020760:	fb0c 1105 	mla	r1, ip, r5, r1
 8020764:	9d07      	ldr	r5, [sp, #28]
 8020766:	fb05 1102 	mla	r1, r5, r2, r1
 802076a:	9a08      	ldr	r2, [sp, #32]
 802076c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020770:	fb01 0102 	mla	r1, r1, r2, r0
 8020774:	9a03      	ldr	r2, [sp, #12]
 8020776:	b289      	uxth	r1, r1
 8020778:	1c48      	adds	r0, r1, #1
 802077a:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802077e:	1209      	asrs	r1, r1, #8
 8020780:	7051      	strb	r1, [r2, #1]
 8020782:	9a01      	ldr	r2, [sp, #4]
 8020784:	4353      	muls	r3, r2
 8020786:	9a06      	ldr	r2, [sp, #24]
 8020788:	fb07 3702 	mla	r7, r7, r2, r3
 802078c:	9b08      	ldr	r3, [sp, #32]
 802078e:	fb0c 7c0e 	mla	ip, ip, lr, r7
 8020792:	fb05 c606 	mla	r6, r5, r6, ip
 8020796:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802079a:	fb06 4603 	mla	r6, r6, r3, r4
 802079e:	9b03      	ldr	r3, [sp, #12]
 80207a0:	b2b6      	uxth	r6, r6
 80207a2:	f106 0e01 	add.w	lr, r6, #1
 80207a6:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 80207aa:	1236      	asrs	r6, r6, #8
 80207ac:	709e      	strb	r6, [r3, #2]
 80207ae:	b00d      	add	sp, #52	; 0x34
 80207b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80207b4:	f1bc 0f0f 	cmp.w	ip, #15
 80207b8:	f63f af60 	bhi.w	802067c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 80207bc:	4626      	mov	r6, r4
 80207be:	4602      	mov	r2, r0
 80207c0:	460d      	mov	r5, r1
 80207c2:	46a6      	mov	lr, r4
 80207c4:	9002      	str	r0, [sp, #8]
 80207c6:	4688      	mov	r8, r1
 80207c8:	e783      	b.n	80206d2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 80207ca:	bf00      	nop
 80207cc:	08029617 	.word	0x08029617
 80207d0:	08029b0e 	.word	0x08029b0e
 80207d4:	080296e0 	.word	0x080296e0

080207d8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80207d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80207dc:	ed2d 8b08 	vpush	{d8-d11}
 80207e0:	b0a1      	sub	sp, #132	; 0x84
 80207e2:	eeb0 aa40 	vmov.f32	s20, s0
 80207e6:	eef0 9a60 	vmov.f32	s19, s1
 80207ea:	9307      	str	r3, [sp, #28]
 80207ec:	eeb0 9a41 	vmov.f32	s18, s2
 80207f0:	f9bd 30e8 	ldrsh.w	r3, [sp, #232]	; 0xe8
 80207f4:	eeb0 8a62 	vmov.f32	s16, s5
 80207f8:	9210      	str	r2, [sp, #64]	; 0x40
 80207fa:	eef0 8a43 	vmov.f32	s17, s6
 80207fe:	9308      	str	r3, [sp, #32]
 8020800:	eef0 ba44 	vmov.f32	s23, s8
 8020804:	f9bd 30ec 	ldrsh.w	r3, [sp, #236]	; 0xec
 8020808:	eeb0 ba64 	vmov.f32	s22, s9
 802080c:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 802080e:	eef0 aa45 	vmov.f32	s21, s10
 8020812:	930a      	str	r3, [sp, #40]	; 0x28
 8020814:	f89d 30f4 	ldrb.w	r3, [sp, #244]	; 0xf4
 8020818:	901f      	str	r0, [sp, #124]	; 0x7c
 802081a:	930f      	str	r3, [sp, #60]	; 0x3c
 802081c:	6850      	ldr	r0, [r2, #4]
 802081e:	910e      	str	r1, [sp, #56]	; 0x38
 8020820:	6812      	ldr	r2, [r2, #0]
 8020822:	e9dd 1338 	ldrd	r1, r3, [sp, #224]	; 0xe0
 8020826:	e9dd 8b33 	ldrd	r8, fp, [sp, #204]	; 0xcc
 802082a:	fb00 1303 	mla	r3, r0, r3, r1
 802082e:	9908      	ldr	r1, [sp, #32]
 8020830:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020834:	18d3      	adds	r3, r2, r3
 8020836:	2203      	movs	r2, #3
 8020838:	9309      	str	r3, [sp, #36]	; 0x24
 802083a:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 802083c:	681b      	ldr	r3, [r3, #0]
 802083e:	930c      	str	r3, [sp, #48]	; 0x30
 8020840:	f06f 0304 	mvn.w	r3, #4
 8020844:	fb11 3302 	smlabb	r3, r1, r2, r3
 8020848:	930d      	str	r3, [sp, #52]	; 0x34
 802084a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802084c:	43db      	mvns	r3, r3
 802084e:	b2db      	uxtb	r3, r3
 8020850:	930b      	str	r3, [sp, #44]	; 0x2c
 8020852:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020854:	2b00      	cmp	r3, #0
 8020856:	dc03      	bgt.n	8020860 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 8020858:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802085a:	2b00      	cmp	r3, #0
 802085c:	f340 81df 	ble.w	8020c1e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8020860:	9b07      	ldr	r3, [sp, #28]
 8020862:	2b00      	cmp	r3, #0
 8020864:	f340 80f2 	ble.w	8020a4c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8020868:	ea5f 4228 	movs.w	r2, r8, asr #16
 802086c:	ea4f 432b 	mov.w	r3, fp, asr #16
 8020870:	d430      	bmi.n	80208d4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8020872:	1c51      	adds	r1, r2, #1
 8020874:	9808      	ldr	r0, [sp, #32]
 8020876:	4281      	cmp	r1, r0
 8020878:	da2f      	bge.n	80208da <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 802087a:	2b00      	cmp	r3, #0
 802087c:	db2d      	blt.n	80208da <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 802087e:	1c59      	adds	r1, r3, #1
 8020880:	980a      	ldr	r0, [sp, #40]	; 0x28
 8020882:	4288      	cmp	r0, r1
 8020884:	dd29      	ble.n	80208da <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8020886:	9b07      	ldr	r3, [sp, #28]
 8020888:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 802088a:	3b01      	subs	r3, #1
 802088c:	fb02 8203 	mla	r2, r2, r3, r8
 8020890:	1412      	asrs	r2, r2, #16
 8020892:	d42d      	bmi.n	80208f0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8020894:	3201      	adds	r2, #1
 8020896:	9908      	ldr	r1, [sp, #32]
 8020898:	4291      	cmp	r1, r2
 802089a:	dd29      	ble.n	80208f0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 802089c:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 802089e:	fb02 b303 	mla	r3, r2, r3, fp
 80208a2:	141b      	asrs	r3, r3, #16
 80208a4:	d424      	bmi.n	80208f0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 80208a6:	3301      	adds	r3, #1
 80208a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80208aa:	429a      	cmp	r2, r3
 80208ac:	dd20      	ble.n	80208f0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 80208ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80208b0:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80208b4:	1cde      	adds	r6, r3, #3
 80208b6:	f8bd e03c 	ldrh.w	lr, [sp, #60]	; 0x3c
 80208ba:	f1bc 0f00 	cmp.w	ip, #0
 80208be:	f300 811f 	bgt.w	8020b00 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x328>
 80208c2:	9b07      	ldr	r3, [sp, #28]
 80208c4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80208c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80208ca:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80208ce:	4423      	add	r3, r4
 80208d0:	9309      	str	r3, [sp, #36]	; 0x24
 80208d2:	e0bd      	b.n	8020a50 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 80208d4:	1c57      	adds	r7, r2, #1
 80208d6:	f040 80ae 	bne.w	8020a36 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 80208da:	9908      	ldr	r1, [sp, #32]
 80208dc:	428a      	cmp	r2, r1
 80208de:	f280 80aa 	bge.w	8020a36 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 80208e2:	1c5e      	adds	r6, r3, #1
 80208e4:	f2c0 80a7 	blt.w	8020a36 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 80208e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80208ea:	4293      	cmp	r3, r2
 80208ec:	f280 80a3 	bge.w	8020a36 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 80208f0:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80208f4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80208f6:	f1ba 0f00 	cmp.w	sl, #0
 80208fa:	dde2      	ble.n	80208c2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 80208fc:	ea5f 4028 	movs.w	r0, r8, asr #16
 8020900:	f3c8 3303 	ubfx	r3, r8, #12, #4
 8020904:	ea4f 412b 	mov.w	r1, fp, asr #16
 8020908:	f3cb 3203 	ubfx	r2, fp, #12, #4
 802090c:	f100 80df 	bmi.w	8020ace <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 8020910:	1c45      	adds	r5, r0, #1
 8020912:	9f08      	ldr	r7, [sp, #32]
 8020914:	42af      	cmp	r7, r5
 8020916:	f340 80dc 	ble.w	8020ad2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 802091a:	2900      	cmp	r1, #0
 802091c:	f2c0 80d9 	blt.w	8020ad2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 8020920:	1c4d      	adds	r5, r1, #1
 8020922:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8020924:	42af      	cmp	r7, r5
 8020926:	f340 80d4 	ble.w	8020ad2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 802092a:	9d08      	ldr	r5, [sp, #32]
 802092c:	fb05 0101 	mla	r1, r5, r1, r0
 8020930:	980c      	ldr	r0, [sp, #48]	; 0x30
 8020932:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020936:	1845      	adds	r5, r0, r1
 8020938:	5c40      	ldrb	r0, [r0, r1]
 802093a:	792f      	ldrb	r7, [r5, #4]
 802093c:	7869      	ldrb	r1, [r5, #1]
 802093e:	9711      	str	r7, [sp, #68]	; 0x44
 8020940:	796f      	ldrb	r7, [r5, #5]
 8020942:	f895 e002 	ldrb.w	lr, [r5, #2]
 8020946:	f895 9003 	ldrb.w	r9, [r5, #3]
 802094a:	9712      	str	r7, [sp, #72]	; 0x48
 802094c:	b17a      	cbz	r2, 802096e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x196>
 802094e:	3505      	adds	r5, #5
 8020950:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8020952:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020954:	19ef      	adds	r7, r5, r7
 8020956:	5d2d      	ldrb	r5, [r5, r4]
 8020958:	787c      	ldrb	r4, [r7, #1]
 802095a:	9513      	str	r5, [sp, #76]	; 0x4c
 802095c:	9415      	str	r4, [sp, #84]	; 0x54
 802095e:	78bc      	ldrb	r4, [r7, #2]
 8020960:	9417      	str	r4, [sp, #92]	; 0x5c
 8020962:	78fc      	ldrb	r4, [r7, #3]
 8020964:	9414      	str	r4, [sp, #80]	; 0x50
 8020966:	793c      	ldrb	r4, [r7, #4]
 8020968:	9416      	str	r4, [sp, #88]	; 0x58
 802096a:	797c      	ldrb	r4, [r7, #5]
 802096c:	9418      	str	r4, [sp, #96]	; 0x60
 802096e:	b29b      	uxth	r3, r3
 8020970:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020972:	b292      	uxth	r2, r2
 8020974:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8020978:	fb03 f702 	mul.w	r7, r3, r2
 802097c:	011b      	lsls	r3, r3, #4
 802097e:	ebc7 1202 	rsb	r2, r7, r2, lsl #4
 8020982:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8020986:	1bdb      	subs	r3, r3, r7
 8020988:	b292      	uxth	r2, r2
 802098a:	b29b      	uxth	r3, r3
 802098c:	ebac 0c02 	sub.w	ip, ip, r2
 8020990:	fb03 f909 	mul.w	r9, r3, r9
 8020994:	fa1f fc8c 	uxth.w	ip, ip
 8020998:	fb0c 9000 	mla	r0, ip, r0, r9
 802099c:	f896 9000 	ldrb.w	r9, [r6]
 80209a0:	fb02 0004 	mla	r0, r2, r4, r0
 80209a4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80209a6:	fb07 0004 	mla	r0, r7, r4, r0
 80209aa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80209ac:	fb19 f904 	smulbb	r9, r9, r4
 80209b0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80209b4:	fb00 9005 	mla	r0, r0, r5, r9
 80209b8:	b280      	uxth	r0, r0
 80209ba:	f100 0901 	add.w	r9, r0, #1
 80209be:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 80209c2:	9811      	ldr	r0, [sp, #68]	; 0x44
 80209c4:	4358      	muls	r0, r3
 80209c6:	ea4f 2929 	mov.w	r9, r9, asr #8
 80209ca:	fb0c 0101 	mla	r1, ip, r1, r0
 80209ce:	9815      	ldr	r0, [sp, #84]	; 0x54
 80209d0:	f886 9000 	strb.w	r9, [r6]
 80209d4:	fb02 1100 	mla	r1, r2, r0, r1
 80209d8:	9816      	ldr	r0, [sp, #88]	; 0x58
 80209da:	fb07 1100 	mla	r1, r7, r0, r1
 80209de:	7870      	ldrb	r0, [r6, #1]
 80209e0:	fb10 f004 	smulbb	r0, r0, r4
 80209e4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80209e8:	fb01 0105 	mla	r1, r1, r5, r0
 80209ec:	b289      	uxth	r1, r1
 80209ee:	1c48      	adds	r0, r1, #1
 80209f0:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80209f4:	1209      	asrs	r1, r1, #8
 80209f6:	7071      	strb	r1, [r6, #1]
 80209f8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80209fa:	434b      	muls	r3, r1
 80209fc:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80209fe:	fb0c 330e 	mla	r3, ip, lr, r3
 8020a02:	fb02 3201 	mla	r2, r2, r1, r3
 8020a06:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020a08:	fb07 2703 	mla	r7, r7, r3, r2
 8020a0c:	78b2      	ldrb	r2, [r6, #2]
 8020a0e:	fb12 f204 	smulbb	r2, r2, r4
 8020a12:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8020a16:	fb07 2505 	mla	r5, r7, r5, r2
 8020a1a:	b2ad      	uxth	r5, r5
 8020a1c:	1c6f      	adds	r7, r5, #1
 8020a1e:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 8020a22:	122d      	asrs	r5, r5, #8
 8020a24:	70b5      	strb	r5, [r6, #2]
 8020a26:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8020a28:	3603      	adds	r6, #3
 8020a2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020a2e:	4498      	add	r8, r3
 8020a30:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8020a32:	449b      	add	fp, r3
 8020a34:	e75f      	b.n	80208f6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 8020a36:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8020a38:	4498      	add	r8, r3
 8020a3a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8020a3c:	449b      	add	fp, r3
 8020a3e:	9b07      	ldr	r3, [sp, #28]
 8020a40:	3b01      	subs	r3, #1
 8020a42:	9307      	str	r3, [sp, #28]
 8020a44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020a46:	3303      	adds	r3, #3
 8020a48:	9309      	str	r3, [sp, #36]	; 0x24
 8020a4a:	e709      	b.n	8020860 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 8020a4c:	f47f af1b 	bne.w	8020886 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xae>
 8020a50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020a52:	2b00      	cmp	r3, #0
 8020a54:	f340 80e3 	ble.w	8020c1e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8020a58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020a5c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8020a5e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8020a62:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8020a66:	eef0 6a48 	vmov.f32	s13, s16
 8020a6a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8020a6e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8020a72:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020a76:	ee16 8a90 	vmov	r8, s13
 8020a7a:	eef0 6a68 	vmov.f32	s13, s17
 8020a7e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020a82:	ee16 ba90 	vmov	fp, s13
 8020a86:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020a8a:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020a8e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8020a92:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020a96:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020a9a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020a9e:	ee18 2a10 	vmov	r2, s16
 8020aa2:	eeb0 8a47 	vmov.f32	s16, s14
 8020aa6:	fb92 f3f3 	sdiv	r3, r2, r3
 8020aaa:	ee18 2a90 	vmov	r2, s17
 8020aae:	9335      	str	r3, [sp, #212]	; 0xd4
 8020ab0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8020ab2:	eef0 8a67 	vmov.f32	s17, s15
 8020ab6:	fb92 f3f3 	sdiv	r3, r2, r3
 8020aba:	9336      	str	r3, [sp, #216]	; 0xd8
 8020abc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020abe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020ac0:	3b01      	subs	r3, #1
 8020ac2:	930e      	str	r3, [sp, #56]	; 0x38
 8020ac4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8020ac6:	bf08      	it	eq
 8020ac8:	4613      	moveq	r3, r2
 8020aca:	9307      	str	r3, [sp, #28]
 8020acc:	e6c1      	b.n	8020852 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8020ace:	1c45      	adds	r5, r0, #1
 8020ad0:	d1a9      	bne.n	8020a26 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8020ad2:	9c08      	ldr	r4, [sp, #32]
 8020ad4:	42a0      	cmp	r0, r4
 8020ad6:	daa6      	bge.n	8020a26 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8020ad8:	1c4c      	adds	r4, r1, #1
 8020ada:	dba4      	blt.n	8020a26 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8020adc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8020ade:	428c      	cmp	r4, r1
 8020ae0:	dda1      	ble.n	8020a26 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8020ae2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020ae4:	9001      	str	r0, [sp, #4]
 8020ae6:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8020ae8:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8020aec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020aee:	4631      	mov	r1, r6
 8020af0:	e9cd 2404 	strd	r2, r4, [sp, #16]
 8020af4:	9300      	str	r3, [sp, #0]
 8020af6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020af8:	9b08      	ldr	r3, [sp, #32]
 8020afa:	f7ff fd5b 	bl	80205b4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 8020afe:	e792      	b.n	8020a26 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8020b00:	ea4f 4228 	mov.w	r2, r8, asr #16
 8020b04:	9c08      	ldr	r4, [sp, #32]
 8020b06:	ea4f 402b 	mov.w	r0, fp, asr #16
 8020b0a:	f3cb 3103 	ubfx	r1, fp, #12, #4
 8020b0e:	f3c8 3303 	ubfx	r3, r8, #12, #4
 8020b12:	fb04 2000 	mla	r0, r4, r0, r2
 8020b16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020b18:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020b1a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020b1e:	4402      	add	r2, r0
 8020b20:	5c25      	ldrb	r5, [r4, r0]
 8020b22:	7894      	ldrb	r4, [r2, #2]
 8020b24:	7850      	ldrb	r0, [r2, #1]
 8020b26:	9411      	str	r4, [sp, #68]	; 0x44
 8020b28:	7954      	ldrb	r4, [r2, #5]
 8020b2a:	f892 a003 	ldrb.w	sl, [r2, #3]
 8020b2e:	f892 9004 	ldrb.w	r9, [r2, #4]
 8020b32:	9412      	str	r4, [sp, #72]	; 0x48
 8020b34:	b171      	cbz	r1, 8020b54 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8020b36:	3205      	adds	r2, #5
 8020b38:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020b3a:	1917      	adds	r7, r2, r4
 8020b3c:	5d12      	ldrb	r2, [r2, r4]
 8020b3e:	9219      	str	r2, [sp, #100]	; 0x64
 8020b40:	787a      	ldrb	r2, [r7, #1]
 8020b42:	921b      	str	r2, [sp, #108]	; 0x6c
 8020b44:	78ba      	ldrb	r2, [r7, #2]
 8020b46:	921d      	str	r2, [sp, #116]	; 0x74
 8020b48:	78fa      	ldrb	r2, [r7, #3]
 8020b4a:	921a      	str	r2, [sp, #104]	; 0x68
 8020b4c:	793a      	ldrb	r2, [r7, #4]
 8020b4e:	921c      	str	r2, [sp, #112]	; 0x70
 8020b50:	797a      	ldrb	r2, [r7, #5]
 8020b52:	921e      	str	r2, [sp, #120]	; 0x78
 8020b54:	b29b      	uxth	r3, r3
 8020b56:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8020b58:	b289      	uxth	r1, r1
 8020b5a:	3603      	adds	r6, #3
 8020b5c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8020b60:	fb03 f201 	mul.w	r2, r3, r1
 8020b64:	011b      	lsls	r3, r3, #4
 8020b66:	ebc2 1101 	rsb	r1, r2, r1, lsl #4
 8020b6a:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8020b6e:	1a9b      	subs	r3, r3, r2
 8020b70:	b289      	uxth	r1, r1
 8020b72:	b29b      	uxth	r3, r3
 8020b74:	1a7f      	subs	r7, r7, r1
 8020b76:	fb03 fa0a 	mul.w	sl, r3, sl
 8020b7a:	b2bf      	uxth	r7, r7
 8020b7c:	fb03 f909 	mul.w	r9, r3, r9
 8020b80:	fb07 a505 	mla	r5, r7, r5, sl
 8020b84:	f816 ac06 	ldrb.w	sl, [r6, #-6]
 8020b88:	fb07 9000 	mla	r0, r7, r0, r9
 8020b8c:	fb01 5504 	mla	r5, r1, r4, r5
 8020b90:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8020b92:	fb02 5504 	mla	r5, r2, r4, r5
 8020b96:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020b98:	fb1a fa04 	smulbb	sl, sl, r4
 8020b9c:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8020ba0:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8020ba2:	fb05 a50e 	mla	r5, r5, lr, sl
 8020ba6:	fb01 0004 	mla	r0, r1, r4, r0
 8020baa:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8020bac:	b2ad      	uxth	r5, r5
 8020bae:	fb02 0004 	mla	r0, r2, r4, r0
 8020bb2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020bb4:	f105 0a01 	add.w	sl, r5, #1
 8020bb8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8020bbc:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8020bc0:	122d      	asrs	r5, r5, #8
 8020bc2:	f806 5c06 	strb.w	r5, [r6, #-6]
 8020bc6:	f816 5c05 	ldrb.w	r5, [r6, #-5]
 8020bca:	fb15 f504 	smulbb	r5, r5, r4
 8020bce:	fb00 500e 	mla	r0, r0, lr, r5
 8020bd2:	b280      	uxth	r0, r0
 8020bd4:	1c45      	adds	r5, r0, #1
 8020bd6:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8020bda:	1200      	asrs	r0, r0, #8
 8020bdc:	f806 0c05 	strb.w	r0, [r6, #-5]
 8020be0:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020be2:	4343      	muls	r3, r0
 8020be4:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020be6:	fb07 3300 	mla	r3, r7, r0, r3
 8020bea:	981d      	ldr	r0, [sp, #116]	; 0x74
 8020bec:	fb01 3100 	mla	r1, r1, r0, r3
 8020bf0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8020bf2:	fb02 1203 	mla	r2, r2, r3, r1
 8020bf6:	f816 1c04 	ldrb.w	r1, [r6, #-4]
 8020bfa:	fb11 f104 	smulbb	r1, r1, r4
 8020bfe:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8020c02:	fb02 120e 	mla	r2, r2, lr, r1
 8020c06:	b292      	uxth	r2, r2
 8020c08:	1c53      	adds	r3, r2, #1
 8020c0a:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8020c0e:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8020c10:	1212      	asrs	r2, r2, #8
 8020c12:	4498      	add	r8, r3
 8020c14:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8020c16:	f806 2c04 	strb.w	r2, [r6, #-4]
 8020c1a:	449b      	add	fp, r3
 8020c1c:	e64d      	b.n	80208ba <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 8020c1e:	b021      	add	sp, #132	; 0x84
 8020c20:	ecbd 8b08 	vpop	{d8-d11}
 8020c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020c28 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8020c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c2c:	b085      	sub	sp, #20
 8020c2e:	784d      	ldrb	r5, [r1, #1]
 8020c30:	788e      	ldrb	r6, [r1, #2]
 8020c32:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 8020c36:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 8020c3a:	9403      	str	r4, [sp, #12]
 8020c3c:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8020c40:	780c      	ldrb	r4, [r1, #0]
 8020c42:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 8020c46:	fb07 ce03 	mla	lr, r7, r3, ip
 8020c4a:	2f00      	cmp	r7, #0
 8020c4c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8020c50:	eb02 0b0e 	add.w	fp, r2, lr
 8020c54:	db56      	blt.n	8020d04 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 8020c56:	45b9      	cmp	r9, r7
 8020c58:	dd54      	ble.n	8020d04 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 8020c5a:	f1bc 0f00 	cmp.w	ip, #0
 8020c5e:	db4d      	blt.n	8020cfc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8020c60:	4563      	cmp	r3, ip
 8020c62:	dd4b      	ble.n	8020cfc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8020c64:	f812 200e 	ldrb.w	r2, [r2, lr]
 8020c68:	9200      	str	r2, [sp, #0]
 8020c6a:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8020c6e:	9201      	str	r2, [sp, #4]
 8020c70:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8020c74:	9202      	str	r2, [sp, #8]
 8020c76:	f11c 0201 	adds.w	r2, ip, #1
 8020c7a:	d44a      	bmi.n	8020d12 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8020c7c:	4293      	cmp	r3, r2
 8020c7e:	dd48      	ble.n	8020d12 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8020c80:	2800      	cmp	r0, #0
 8020c82:	d046      	beq.n	8020d12 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8020c84:	f89b e003 	ldrb.w	lr, [fp, #3]
 8020c88:	f89b 8004 	ldrb.w	r8, [fp, #4]
 8020c8c:	f89b a005 	ldrb.w	sl, [fp, #5]
 8020c90:	3701      	adds	r7, #1
 8020c92:	d446      	bmi.n	8020d22 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8020c94:	45b9      	cmp	r9, r7
 8020c96:	dd44      	ble.n	8020d22 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8020c98:	9a03      	ldr	r2, [sp, #12]
 8020c9a:	2a00      	cmp	r2, #0
 8020c9c:	d045      	beq.n	8020d2a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 8020c9e:	f1bc 0f00 	cmp.w	ip, #0
 8020ca2:	db3a      	blt.n	8020d1a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8020ca4:	4563      	cmp	r3, ip
 8020ca6:	dd38      	ble.n	8020d1a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8020ca8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8020cac:	f04f 0903 	mov.w	r9, #3
 8020cb0:	f81b 7002 	ldrb.w	r7, [fp, r2]
 8020cb4:	fb03 b209 	mla	r2, r3, r9, fp
 8020cb8:	fb03 b909 	mla	r9, r3, r9, fp
 8020cbc:	7852      	ldrb	r2, [r2, #1]
 8020cbe:	f899 9002 	ldrb.w	r9, [r9, #2]
 8020cc2:	f11c 0c01 	adds.w	ip, ip, #1
 8020cc6:	d40d      	bmi.n	8020ce4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8020cc8:	4563      	cmp	r3, ip
 8020cca:	dd0b      	ble.n	8020ce4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8020ccc:	b160      	cbz	r0, 8020ce8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 8020cce:	2603      	movs	r6, #3
 8020cd0:	fb13 6406 	smlabb	r4, r3, r6, r6
 8020cd4:	fb03 b506 	mla	r5, r3, r6, fp
 8020cd8:	fb03 b306 	mla	r3, r3, r6, fp
 8020cdc:	f81b 4004 	ldrb.w	r4, [fp, r4]
 8020ce0:	792d      	ldrb	r5, [r5, #4]
 8020ce2:	795e      	ldrb	r6, [r3, #5]
 8020ce4:	280f      	cmp	r0, #15
 8020ce6:	d802      	bhi.n	8020cee <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8020ce8:	9b03      	ldr	r3, [sp, #12]
 8020cea:	2b0f      	cmp	r3, #15
 8020cec:	d922      	bls.n	8020d34 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 8020cee:	4b2f      	ldr	r3, [pc, #188]	; (8020dac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 8020cf0:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8020cf4:	4a2e      	ldr	r2, [pc, #184]	; (8020db0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 8020cf6:	482f      	ldr	r0, [pc, #188]	; (8020db4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 8020cf8:	f003 ff96 	bl	8024c28 <__assert_func>
 8020cfc:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8020d00:	9400      	str	r4, [sp, #0]
 8020d02:	e7b8      	b.n	8020c76 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 8020d04:	46b2      	mov	sl, r6
 8020d06:	46a8      	mov	r8, r5
 8020d08:	46a6      	mov	lr, r4
 8020d0a:	9400      	str	r4, [sp, #0]
 8020d0c:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8020d10:	e7be      	b.n	8020c90 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 8020d12:	46b2      	mov	sl, r6
 8020d14:	46a8      	mov	r8, r5
 8020d16:	46a6      	mov	lr, r4
 8020d18:	e7ba      	b.n	8020c90 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 8020d1a:	46b1      	mov	r9, r6
 8020d1c:	462a      	mov	r2, r5
 8020d1e:	4627      	mov	r7, r4
 8020d20:	e7cf      	b.n	8020cc2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 8020d22:	46b1      	mov	r9, r6
 8020d24:	462a      	mov	r2, r5
 8020d26:	4627      	mov	r7, r4
 8020d28:	e7dc      	b.n	8020ce4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8020d2a:	280f      	cmp	r0, #15
 8020d2c:	d8df      	bhi.n	8020cee <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8020d2e:	46b1      	mov	r9, r6
 8020d30:	462a      	mov	r2, r5
 8020d32:	4627      	mov	r7, r4
 8020d34:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 8020d38:	b280      	uxth	r0, r0
 8020d3a:	fb00 f30b 	mul.w	r3, r0, fp
 8020d3e:	0100      	lsls	r0, r0, #4
 8020d40:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 8020d44:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 8020d48:	1ac0      	subs	r0, r0, r3
 8020d4a:	fa1f fb8b 	uxth.w	fp, fp
 8020d4e:	b280      	uxth	r0, r0
 8020d50:	ebac 0c0b 	sub.w	ip, ip, fp
 8020d54:	9003      	str	r0, [sp, #12]
 8020d56:	fa1f fc8c 	uxth.w	ip, ip
 8020d5a:	fb00 fe0e 	mul.w	lr, r0, lr
 8020d5e:	9800      	ldr	r0, [sp, #0]
 8020d60:	fb0c ee00 	mla	lr, ip, r0, lr
 8020d64:	9803      	ldr	r0, [sp, #12]
 8020d66:	fb00 f808 	mul.w	r8, r0, r8
 8020d6a:	9801      	ldr	r0, [sp, #4]
 8020d6c:	fb0b ee07 	mla	lr, fp, r7, lr
 8020d70:	fb0c 8800 	mla	r8, ip, r0, r8
 8020d74:	fb03 ee04 	mla	lr, r3, r4, lr
 8020d78:	fb0b 8202 	mla	r2, fp, r2, r8
 8020d7c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8020d80:	fb03 2505 	mla	r5, r3, r5, r2
 8020d84:	9a03      	ldr	r2, [sp, #12]
 8020d86:	f881 e000 	strb.w	lr, [r1]
 8020d8a:	fb02 f00a 	mul.w	r0, r2, sl
 8020d8e:	9a02      	ldr	r2, [sp, #8]
 8020d90:	122d      	asrs	r5, r5, #8
 8020d92:	fb0c 0c02 	mla	ip, ip, r2, r0
 8020d96:	704d      	strb	r5, [r1, #1]
 8020d98:	fb0b c909 	mla	r9, fp, r9, ip
 8020d9c:	fb03 9606 	mla	r6, r3, r6, r9
 8020da0:	1236      	asrs	r6, r6, #8
 8020da2:	708e      	strb	r6, [r1, #2]
 8020da4:	b005      	add	sp, #20
 8020da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020daa:	bf00      	nop
 8020dac:	08029617 	.word	0x08029617
 8020db0:	08029b0e 	.word	0x08029b0e
 8020db4:	080296e0 	.word	0x080296e0

08020db8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8020db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020dbc:	ed2d 8b0a 	vpush	{d8-d12}
 8020dc0:	b09d      	sub	sp, #116	; 0x74
 8020dc2:	eeb0 aa40 	vmov.f32	s20, s0
 8020dc6:	eef0 9a60 	vmov.f32	s19, s1
 8020dca:	9306      	str	r3, [sp, #24]
 8020dcc:	eeb0 9a41 	vmov.f32	s18, s2
 8020dd0:	f9bd 30e0 	ldrsh.w	r3, [sp, #224]	; 0xe0
 8020dd4:	eeb0 8a62 	vmov.f32	s16, s5
 8020dd8:	901b      	str	r0, [sp, #108]	; 0x6c
 8020dda:	eef0 8a43 	vmov.f32	s17, s6
 8020dde:	9307      	str	r3, [sp, #28]
 8020de0:	eeb0 ca44 	vmov.f32	s24, s8
 8020de4:	f9bd 30e4 	ldrsh.w	r3, [sp, #228]	; 0xe4
 8020de8:	eef0 ba64 	vmov.f32	s23, s9
 8020dec:	eeb0 ba45 	vmov.f32	s22, s10
 8020df0:	9309      	str	r3, [sp, #36]	; 0x24
 8020df2:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8020df6:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
 8020dfa:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8020dfc:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8020e00:	6850      	ldr	r0, [r2, #4]
 8020e02:	6812      	ldr	r2, [r2, #0]
 8020e04:	fb00 1303 	mla	r3, r0, r3, r1
 8020e08:	9907      	ldr	r1, [sp, #28]
 8020e0a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020e0e:	18d3      	adds	r3, r2, r3
 8020e10:	2203      	movs	r2, #3
 8020e12:	9308      	str	r3, [sp, #32]
 8020e14:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8020e16:	681b      	ldr	r3, [r3, #0]
 8020e18:	930a      	str	r3, [sp, #40]	; 0x28
 8020e1a:	f06f 0304 	mvn.w	r3, #4
 8020e1e:	e9dd 6531 	ldrd	r6, r5, [sp, #196]	; 0xc4
 8020e22:	fb11 3302 	smlabb	r3, r1, r2, r3
 8020e26:	930b      	str	r3, [sp, #44]	; 0x2c
 8020e28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020e2a:	2b00      	cmp	r3, #0
 8020e2c:	dc03      	bgt.n	8020e36 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8020e2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020e30:	2b00      	cmp	r3, #0
 8020e32:	f340 8193 	ble.w	802115c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 8020e36:	9b06      	ldr	r3, [sp, #24]
 8020e38:	2b00      	cmp	r3, #0
 8020e3a:	f340 80d0 	ble.w	8020fde <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x226>
 8020e3e:	1432      	asrs	r2, r6, #16
 8020e40:	ea4f 4325 	mov.w	r3, r5, asr #16
 8020e44:	d42f      	bmi.n	8020ea6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 8020e46:	1c51      	adds	r1, r2, #1
 8020e48:	9807      	ldr	r0, [sp, #28]
 8020e4a:	4281      	cmp	r1, r0
 8020e4c:	da2e      	bge.n	8020eac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8020e4e:	2b00      	cmp	r3, #0
 8020e50:	db2c      	blt.n	8020eac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8020e52:	1c59      	adds	r1, r3, #1
 8020e54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020e56:	4288      	cmp	r0, r1
 8020e58:	dd28      	ble.n	8020eac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8020e5a:	9b06      	ldr	r3, [sp, #24]
 8020e5c:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8020e5e:	3b01      	subs	r3, #1
 8020e60:	fb02 6203 	mla	r2, r2, r3, r6
 8020e64:	1412      	asrs	r2, r2, #16
 8020e66:	d42c      	bmi.n	8020ec2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8020e68:	3201      	adds	r2, #1
 8020e6a:	9907      	ldr	r1, [sp, #28]
 8020e6c:	4291      	cmp	r1, r2
 8020e6e:	dd28      	ble.n	8020ec2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8020e70:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8020e72:	fb02 5303 	mla	r3, r2, r3, r5
 8020e76:	141b      	asrs	r3, r3, #16
 8020e78:	d423      	bmi.n	8020ec2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8020e7a:	3301      	adds	r3, #1
 8020e7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020e7e:	429a      	cmp	r2, r3
 8020e80:	dd1f      	ble.n	8020ec2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8020e82:	9b08      	ldr	r3, [sp, #32]
 8020e84:	f8dd e018 	ldr.w	lr, [sp, #24]
 8020e88:	f103 0c03 	add.w	ip, r3, #3
 8020e8c:	f1be 0f00 	cmp.w	lr, #0
 8020e90:	f300 80fa 	bgt.w	8021088 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 8020e94:	9b06      	ldr	r3, [sp, #24]
 8020e96:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020e9a:	9b08      	ldr	r3, [sp, #32]
 8020e9c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020ea0:	4423      	add	r3, r4
 8020ea2:	9308      	str	r3, [sp, #32]
 8020ea4:	e09d      	b.n	8020fe2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 8020ea6:	1c51      	adds	r1, r2, #1
 8020ea8:	f040 808e 	bne.w	8020fc8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8020eac:	9907      	ldr	r1, [sp, #28]
 8020eae:	428a      	cmp	r2, r1
 8020eb0:	f280 808a 	bge.w	8020fc8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8020eb4:	1c5f      	adds	r7, r3, #1
 8020eb6:	f2c0 8087 	blt.w	8020fc8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8020eba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020ebc:	4293      	cmp	r3, r2
 8020ebe:	f280 8083 	bge.w	8020fc8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8020ec2:	9f06      	ldr	r7, [sp, #24]
 8020ec4:	f8dd a020 	ldr.w	sl, [sp, #32]
 8020ec8:	2f00      	cmp	r7, #0
 8020eca:	dde3      	ble.n	8020e94 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 8020ecc:	1432      	asrs	r2, r6, #16
 8020ece:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8020ed2:	ea4f 4325 	mov.w	r3, r5, asr #16
 8020ed6:	f3c5 3b03 	ubfx	fp, r5, #12, #4
 8020eda:	f100 80bf 	bmi.w	802105c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a4>
 8020ede:	1c50      	adds	r0, r2, #1
 8020ee0:	9c07      	ldr	r4, [sp, #28]
 8020ee2:	4284      	cmp	r4, r0
 8020ee4:	f340 80bc 	ble.w	8021060 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8020ee8:	2b00      	cmp	r3, #0
 8020eea:	f2c0 80b9 	blt.w	8021060 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8020eee:	1c58      	adds	r0, r3, #1
 8020ef0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8020ef2:	4284      	cmp	r4, r0
 8020ef4:	f340 80b4 	ble.w	8021060 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8020ef8:	9807      	ldr	r0, [sp, #28]
 8020efa:	fb00 2303 	mla	r3, r0, r3, r2
 8020efe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020f00:	980a      	ldr	r0, [sp, #40]	; 0x28
 8020f02:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020f06:	441a      	add	r2, r3
 8020f08:	f810 c003 	ldrb.w	ip, [r0, r3]
 8020f0c:	7953      	ldrb	r3, [r2, #5]
 8020f0e:	7850      	ldrb	r0, [r2, #1]
 8020f10:	f892 e002 	ldrb.w	lr, [r2, #2]
 8020f14:	f892 9003 	ldrb.w	r9, [r2, #3]
 8020f18:	f892 8004 	ldrb.w	r8, [r2, #4]
 8020f1c:	930e      	str	r3, [sp, #56]	; 0x38
 8020f1e:	f1bb 0f00 	cmp.w	fp, #0
 8020f22:	d00f      	beq.n	8020f44 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 8020f24:	3205      	adds	r2, #5
 8020f26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020f28:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020f2a:	18d3      	adds	r3, r2, r3
 8020f2c:	5d12      	ldrb	r2, [r2, r4]
 8020f2e:	920f      	str	r2, [sp, #60]	; 0x3c
 8020f30:	785a      	ldrb	r2, [r3, #1]
 8020f32:	9211      	str	r2, [sp, #68]	; 0x44
 8020f34:	789a      	ldrb	r2, [r3, #2]
 8020f36:	9213      	str	r2, [sp, #76]	; 0x4c
 8020f38:	78da      	ldrb	r2, [r3, #3]
 8020f3a:	9210      	str	r2, [sp, #64]	; 0x40
 8020f3c:	791a      	ldrb	r2, [r3, #4]
 8020f3e:	795b      	ldrb	r3, [r3, #5]
 8020f40:	9212      	str	r2, [sp, #72]	; 0x48
 8020f42:	9314      	str	r3, [sp, #80]	; 0x50
 8020f44:	b28b      	uxth	r3, r1
 8020f46:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020f48:	fa1f f28b 	uxth.w	r2, fp
 8020f4c:	fb03 fb02 	mul.w	fp, r3, r2
 8020f50:	011b      	lsls	r3, r3, #4
 8020f52:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 8020f56:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 8020f5a:	eba3 030b 	sub.w	r3, r3, fp
 8020f5e:	b292      	uxth	r2, r2
 8020f60:	b29b      	uxth	r3, r3
 8020f62:	1a89      	subs	r1, r1, r2
 8020f64:	fb03 f808 	mul.w	r8, r3, r8
 8020f68:	b289      	uxth	r1, r1
 8020f6a:	fb03 f909 	mul.w	r9, r3, r9
 8020f6e:	fb01 8800 	mla	r8, r1, r0, r8
 8020f72:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020f74:	fb01 990c 	mla	r9, r1, ip, r9
 8020f78:	fb02 8800 	mla	r8, r2, r0, r8
 8020f7c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020f7e:	fb02 9904 	mla	r9, r2, r4, r9
 8020f82:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020f84:	fb0b 8800 	mla	r8, fp, r0, r8
 8020f88:	980e      	ldr	r0, [sp, #56]	; 0x38
 8020f8a:	fb0b 9904 	mla	r9, fp, r4, r9
 8020f8e:	4343      	muls	r3, r0
 8020f90:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020f94:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020f98:	fb01 330e 	mla	r3, r1, lr, r3
 8020f9c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8020f9e:	f88a 9000 	strb.w	r9, [sl]
 8020fa2:	fb02 3201 	mla	r2, r2, r1, r3
 8020fa6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020fa8:	f88a 8001 	strb.w	r8, [sl, #1]
 8020fac:	fb0b 2b03 	mla	fp, fp, r3, r2
 8020fb0:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 8020fb4:	f88a b002 	strb.w	fp, [sl, #2]
 8020fb8:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8020fba:	f10a 0a03 	add.w	sl, sl, #3
 8020fbe:	3f01      	subs	r7, #1
 8020fc0:	441e      	add	r6, r3
 8020fc2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8020fc4:	441d      	add	r5, r3
 8020fc6:	e77f      	b.n	8020ec8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8020fc8:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8020fca:	441e      	add	r6, r3
 8020fcc:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8020fce:	441d      	add	r5, r3
 8020fd0:	9b06      	ldr	r3, [sp, #24]
 8020fd2:	3b01      	subs	r3, #1
 8020fd4:	9306      	str	r3, [sp, #24]
 8020fd6:	9b08      	ldr	r3, [sp, #32]
 8020fd8:	3303      	adds	r3, #3
 8020fda:	9308      	str	r3, [sp, #32]
 8020fdc:	e72b      	b.n	8020e36 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8020fde:	f47f af3c 	bne.w	8020e5a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 8020fe2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020fe4:	2b00      	cmp	r3, #0
 8020fe6:	f340 80b9 	ble.w	802115c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 8020fea:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8020fee:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020ff0:	ee79 9aab 	vadd.f32	s19, s19, s23
 8020ff4:	eef0 6a48 	vmov.f32	s13, s16
 8020ff8:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8020ffc:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8021000:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021004:	ee16 6a90 	vmov	r6, s13
 8021008:	eef0 6a68 	vmov.f32	s13, s17
 802100c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021010:	ee16 5a90 	vmov	r5, s13
 8021014:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021018:	ee69 7a27 	vmul.f32	s15, s18, s15
 802101c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021020:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021024:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021028:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802102c:	ee18 2a10 	vmov	r2, s16
 8021030:	eeb0 8a47 	vmov.f32	s16, s14
 8021034:	fb92 f3f3 	sdiv	r3, r2, r3
 8021038:	ee18 2a90 	vmov	r2, s17
 802103c:	9333      	str	r3, [sp, #204]	; 0xcc
 802103e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021040:	eef0 8a67 	vmov.f32	s17, s15
 8021044:	fb92 f3f3 	sdiv	r3, r2, r3
 8021048:	9334      	str	r3, [sp, #208]	; 0xd0
 802104a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802104c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802104e:	3b01      	subs	r3, #1
 8021050:	930c      	str	r3, [sp, #48]	; 0x30
 8021052:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021054:	bf08      	it	eq
 8021056:	4613      	moveq	r3, r2
 8021058:	9306      	str	r3, [sp, #24]
 802105a:	e6e5      	b.n	8020e28 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 802105c:	1c54      	adds	r4, r2, #1
 802105e:	d1ab      	bne.n	8020fb8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8021060:	9807      	ldr	r0, [sp, #28]
 8021062:	4282      	cmp	r2, r0
 8021064:	daa8      	bge.n	8020fb8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8021066:	1c58      	adds	r0, r3, #1
 8021068:	dba6      	blt.n	8020fb8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 802106a:	9809      	ldr	r0, [sp, #36]	; 0x24
 802106c:	4298      	cmp	r0, r3
 802106e:	dda3      	ble.n	8020fb8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8021070:	9000      	str	r0, [sp, #0]
 8021072:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8021074:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8021078:	e9cd 1b03 	strd	r1, fp, [sp, #12]
 802107c:	9b07      	ldr	r3, [sp, #28]
 802107e:	4651      	mov	r1, sl
 8021080:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021082:	f7ff fdd1 	bl	8020c28 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8021086:	e797      	b.n	8020fb8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8021088:	1431      	asrs	r1, r6, #16
 802108a:	9c07      	ldr	r4, [sp, #28]
 802108c:	1428      	asrs	r0, r5, #16
 802108e:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8021092:	f3c6 3303 	ubfx	r3, r6, #12, #4
 8021096:	fb04 1000 	mla	r0, r4, r0, r1
 802109a:	990a      	ldr	r1, [sp, #40]	; 0x28
 802109c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802109e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80210a2:	4401      	add	r1, r0
 80210a4:	5c20      	ldrb	r0, [r4, r0]
 80210a6:	f891 8002 	ldrb.w	r8, [r1, #2]
 80210aa:	900e      	str	r0, [sp, #56]	; 0x38
 80210ac:	f891 a003 	ldrb.w	sl, [r1, #3]
 80210b0:	7848      	ldrb	r0, [r1, #1]
 80210b2:	f891 9004 	ldrb.w	r9, [r1, #4]
 80210b6:	f891 b005 	ldrb.w	fp, [r1, #5]
 80210ba:	b172      	cbz	r2, 80210da <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x322>
 80210bc:	3105      	adds	r1, #5
 80210be:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80210c0:	190f      	adds	r7, r1, r4
 80210c2:	5d09      	ldrb	r1, [r1, r4]
 80210c4:	9115      	str	r1, [sp, #84]	; 0x54
 80210c6:	7879      	ldrb	r1, [r7, #1]
 80210c8:	9117      	str	r1, [sp, #92]	; 0x5c
 80210ca:	78b9      	ldrb	r1, [r7, #2]
 80210cc:	9119      	str	r1, [sp, #100]	; 0x64
 80210ce:	78f9      	ldrb	r1, [r7, #3]
 80210d0:	9116      	str	r1, [sp, #88]	; 0x58
 80210d2:	7939      	ldrb	r1, [r7, #4]
 80210d4:	9118      	str	r1, [sp, #96]	; 0x60
 80210d6:	7979      	ldrb	r1, [r7, #5]
 80210d8:	911a      	str	r1, [sp, #104]	; 0x68
 80210da:	b29b      	uxth	r3, r3
 80210dc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80210de:	b292      	uxth	r2, r2
 80210e0:	f10c 0c03 	add.w	ip, ip, #3
 80210e4:	f10e 3eff 	add.w	lr, lr, #4294967295
 80210e8:	fb03 f102 	mul.w	r1, r3, r2
 80210ec:	011b      	lsls	r3, r3, #4
 80210ee:	ebc1 1202 	rsb	r2, r1, r2, lsl #4
 80210f2:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 80210f6:	1a5b      	subs	r3, r3, r1
 80210f8:	b292      	uxth	r2, r2
 80210fa:	b29b      	uxth	r3, r3
 80210fc:	1abf      	subs	r7, r7, r2
 80210fe:	fb03 f909 	mul.w	r9, r3, r9
 8021102:	b2bf      	uxth	r7, r7
 8021104:	fb03 fa0a 	mul.w	sl, r3, sl
 8021108:	fb03 f30b 	mul.w	r3, r3, fp
 802110c:	fb07 9900 	mla	r9, r7, r0, r9
 8021110:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8021112:	fb07 aa04 	mla	sl, r7, r4, sl
 8021116:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021118:	fb02 9900 	mla	r9, r2, r0, r9
 802111c:	9818      	ldr	r0, [sp, #96]	; 0x60
 802111e:	fb07 3308 	mla	r3, r7, r8, r3
 8021122:	fb01 9900 	mla	r9, r1, r0, r9
 8021126:	9819      	ldr	r0, [sp, #100]	; 0x64
 8021128:	fb02 aa04 	mla	sl, r2, r4, sl
 802112c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802112e:	fb02 3200 	mla	r2, r2, r0, r3
 8021132:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8021134:	fb01 aa04 	mla	sl, r1, r4, sl
 8021138:	ea4f 2929 	mov.w	r9, r9, asr #8
 802113c:	fb01 2103 	mla	r1, r1, r3, r2
 8021140:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8021142:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8021146:	f80c 9c05 	strb.w	r9, [ip, #-5]
 802114a:	1209      	asrs	r1, r1, #8
 802114c:	441e      	add	r6, r3
 802114e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021150:	f80c ac06 	strb.w	sl, [ip, #-6]
 8021154:	f80c 1c04 	strb.w	r1, [ip, #-4]
 8021158:	441d      	add	r5, r3
 802115a:	e697      	b.n	8020e8c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 802115c:	b01d      	add	sp, #116	; 0x74
 802115e:	ecbd 8b0a 	vpop	{d8-d12}
 8021162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08021168 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8021168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802116c:	b085      	sub	sp, #20
 802116e:	7888      	ldrb	r0, [r1, #2]
 8021170:	4691      	mov	r9, r2
 8021172:	9000      	str	r0, [sp, #0]
 8021174:	7848      	ldrb	r0, [r1, #1]
 8021176:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 802117a:	9001      	str	r0, [sp, #4]
 802117c:	7808      	ldrb	r0, [r1, #0]
 802117e:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8021182:	9002      	str	r0, [sp, #8]
 8021184:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8021188:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 802118c:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 8021190:	fb04 c603 	mla	r6, r4, r3, ip
 8021194:	2c00      	cmp	r4, #0
 8021196:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 802119a:	9a00      	ldr	r2, [sp, #0]
 802119c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80211a0:	9a01      	ldr	r2, [sp, #4]
 80211a2:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80211a6:	db3a      	blt.n	802121e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 80211a8:	45a0      	cmp	r8, r4
 80211aa:	dd38      	ble.n	802121e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 80211ac:	f1bc 0f00 	cmp.w	ip, #0
 80211b0:	db33      	blt.n	802121a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 80211b2:	4563      	cmp	r3, ip
 80211b4:	dd31      	ble.n	802121a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 80211b6:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 80211ba:	f11c 0601 	adds.w	r6, ip, #1
 80211be:	d431      	bmi.n	8021224 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 80211c0:	42b3      	cmp	r3, r6
 80211c2:	dd2f      	ble.n	8021224 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 80211c4:	b375      	cbz	r5, 8021224 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 80211c6:	f8de 6004 	ldr.w	r6, [lr, #4]
 80211ca:	3401      	adds	r4, #1
 80211cc:	d42e      	bmi.n	802122c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 80211ce:	45a0      	cmp	r8, r4
 80211d0:	dd2c      	ble.n	802122c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 80211d2:	b35f      	cbz	r7, 802122c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 80211d4:	f1bc 0f00 	cmp.w	ip, #0
 80211d8:	db26      	blt.n	8021228 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 80211da:	4563      	cmp	r3, ip
 80211dc:	dd24      	ble.n	8021228 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 80211de:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 80211e2:	f11c 0c01 	adds.w	ip, ip, #1
 80211e6:	d405      	bmi.n	80211f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80211e8:	4563      	cmp	r3, ip
 80211ea:	dd03      	ble.n	80211f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80211ec:	b115      	cbz	r5, 80211f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80211ee:	3301      	adds	r3, #1
 80211f0:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 80211f4:	2d0f      	cmp	r5, #15
 80211f6:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80211fa:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80211fe:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8021202:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8021206:	d801      	bhi.n	802120c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa4>
 8021208:	2f0f      	cmp	r7, #15
 802120a:	d911      	bls.n	8021230 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc8>
 802120c:	4b80      	ldr	r3, [pc, #512]	; (8021410 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 802120e:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8021212:	4a80      	ldr	r2, [pc, #512]	; (8021414 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 8021214:	4880      	ldr	r0, [pc, #512]	; (8021418 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2b0>)
 8021216:	f003 fd07 	bl	8024c28 <__assert_func>
 802121a:	4602      	mov	r2, r0
 802121c:	e7cd      	b.n	80211ba <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x52>
 802121e:	4606      	mov	r6, r0
 8021220:	4602      	mov	r2, r0
 8021222:	e7d2      	b.n	80211ca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 8021224:	4606      	mov	r6, r0
 8021226:	e7d0      	b.n	80211ca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 8021228:	4604      	mov	r4, r0
 802122a:	e7da      	b.n	80211e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7a>
 802122c:	4604      	mov	r4, r0
 802122e:	e7e1      	b.n	80211f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8021230:	b2ab      	uxth	r3, r5
 8021232:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8021236:	b2bf      	uxth	r7, r7
 8021238:	fb03 fe07 	mul.w	lr, r3, r7
 802123c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8021240:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8021244:	eba3 0c0e 	sub.w	ip, r3, lr
 8021248:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 802124c:	b2bf      	uxth	r7, r7
 802124e:	fa1f fc8c 	uxth.w	ip, ip
 8021252:	eba5 0507 	sub.w	r5, r5, r7
 8021256:	fb0c f30a 	mul.w	r3, ip, sl
 802125a:	b2ad      	uxth	r5, r5
 802125c:	fb05 330b 	mla	r3, r5, fp, r3
 8021260:	fb07 3309 	mla	r3, r7, r9, r3
 8021264:	fb0e 3308 	mla	r3, lr, r8, r3
 8021268:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802126c:	9303      	str	r3, [sp, #12]
 802126e:	d018      	beq.n	80212a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x13a>
 8021270:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8021274:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021278:	fb0b f303 	mul.w	r3, fp, r3
 802127c:	fb0b fb02 	mul.w	fp, fp, r2
 8021280:	0a1a      	lsrs	r2, r3, #8
 8021282:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8021286:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802128a:	441a      	add	r2, r3
 802128c:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8021290:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8021294:	0a12      	lsrs	r2, r2, #8
 8021296:	0a1b      	lsrs	r3, r3, #8
 8021298:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802129c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80212a0:	431a      	orrs	r2, r3
 80212a2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80212a6:	d019      	beq.n	80212dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x174>
 80212a8:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 80212ac:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80212b0:	fb0a fb0b 	mul.w	fp, sl, fp
 80212b4:	fb0a fa06 	mul.w	sl, sl, r6
 80212b8:	ea4f 261b 	mov.w	r6, fp, lsr #8
 80212bc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80212c0:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 80212c4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80212c8:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 80212cc:	445e      	add	r6, fp
 80212ce:	0a1b      	lsrs	r3, r3, #8
 80212d0:	0a36      	lsrs	r6, r6, #8
 80212d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80212d6:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80212da:	431e      	orrs	r6, r3
 80212dc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80212e0:	d019      	beq.n	8021316 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1ae>
 80212e2:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80212e6:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80212ea:	fb09 fa0a 	mul.w	sl, r9, sl
 80212ee:	fb09 f904 	mul.w	r9, r9, r4
 80212f2:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80212f6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80212fa:	f509 7380 	add.w	r3, r9, #256	; 0x100
 80212fe:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021302:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8021306:	4454      	add	r4, sl
 8021308:	0a1b      	lsrs	r3, r3, #8
 802130a:	0a24      	lsrs	r4, r4, #8
 802130c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021310:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021314:	431c      	orrs	r4, r3
 8021316:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802131a:	d019      	beq.n	8021350 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1e8>
 802131c:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8021320:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021324:	fb08 f909 	mul.w	r9, r8, r9
 8021328:	fb08 f800 	mul.w	r8, r8, r0
 802132c:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8021330:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8021334:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8021338:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802133c:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8021340:	4448      	add	r0, r9
 8021342:	0a1b      	lsrs	r3, r3, #8
 8021344:	0a00      	lsrs	r0, r0, #8
 8021346:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802134a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802134e:	4318      	orrs	r0, r3
 8021350:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8021354:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021358:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 802135c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021360:	fb0c f808 	mul.w	r8, ip, r8
 8021364:	fb0c f606 	mul.w	r6, ip, r6
 8021368:	fb05 8803 	mla	r8, r5, r3, r8
 802136c:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8021370:	fb05 6202 	mla	r2, r5, r2, r6
 8021374:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021378:	fb07 8803 	mla	r8, r7, r3, r8
 802137c:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8021380:	fb07 2704 	mla	r7, r7, r4, r2
 8021384:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021388:	fb0e 8303 	mla	r3, lr, r3, r8
 802138c:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 8021390:	fb0e 7e00 	mla	lr, lr, r0, r7
 8021394:	9803      	ldr	r0, [sp, #12]
 8021396:	b292      	uxth	r2, r2
 8021398:	9c02      	ldr	r4, [sp, #8]
 802139a:	0a1b      	lsrs	r3, r3, #8
 802139c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80213a0:	4350      	muls	r0, r2
 80213a2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80213a6:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80213aa:	ea43 0e0e 	orr.w	lr, r3, lr
 80213ae:	1c43      	adds	r3, r0, #1
 80213b0:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80213b4:	fa5f f08e 	uxtb.w	r0, lr
 80213b8:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 80213bc:	b2db      	uxtb	r3, r3
 80213be:	fb14 f403 	smulbb	r4, r4, r3
 80213c2:	fb00 4002 	mla	r0, r0, r2, r4
 80213c6:	b280      	uxth	r0, r0
 80213c8:	1c44      	adds	r4, r0, #1
 80213ca:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 80213ce:	9c01      	ldr	r4, [sp, #4]
 80213d0:	fb14 f403 	smulbb	r4, r4, r3
 80213d4:	1200      	asrs	r0, r0, #8
 80213d6:	7008      	strb	r0, [r1, #0]
 80213d8:	f3ce 2007 	ubfx	r0, lr, #8, #8
 80213dc:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 80213e0:	fb00 4002 	mla	r0, r0, r2, r4
 80213e4:	b280      	uxth	r0, r0
 80213e6:	1c44      	adds	r4, r0, #1
 80213e8:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 80213ec:	1200      	asrs	r0, r0, #8
 80213ee:	7048      	strb	r0, [r1, #1]
 80213f0:	9800      	ldr	r0, [sp, #0]
 80213f2:	fb10 f303 	smulbb	r3, r0, r3
 80213f6:	fb0e 3202 	mla	r2, lr, r2, r3
 80213fa:	b292      	uxth	r2, r2
 80213fc:	f102 0e01 	add.w	lr, r2, #1
 8021400:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8021404:	1212      	asrs	r2, r2, #8
 8021406:	708a      	strb	r2, [r1, #2]
 8021408:	b005      	add	sp, #20
 802140a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802140e:	bf00      	nop
 8021410:	08029617 	.word	0x08029617
 8021414:	08029b0e 	.word	0x08029b0e
 8021418:	080296e0 	.word	0x080296e0

0802141c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802141c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021420:	ed2d 8b08 	vpush	{d8-d11}
 8021424:	b099      	sub	sp, #100	; 0x64
 8021426:	eeb0 aa40 	vmov.f32	s20, s0
 802142a:	eef0 9a60 	vmov.f32	s19, s1
 802142e:	9306      	str	r3, [sp, #24]
 8021430:	eeb0 9a41 	vmov.f32	s18, s2
 8021434:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 8021438:	eeb0 8a62 	vmov.f32	s16, s5
 802143c:	9216      	str	r2, [sp, #88]	; 0x58
 802143e:	eef0 8a43 	vmov.f32	s17, s6
 8021442:	9307      	str	r3, [sp, #28]
 8021444:	eef0 ba44 	vmov.f32	s23, s8
 8021448:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 802144c:	eeb0 ba64 	vmov.f32	s22, s9
 8021450:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8021452:	eef0 aa45 	vmov.f32	s21, s10
 8021456:	9310      	str	r3, [sp, #64]	; 0x40
 8021458:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 802145c:	9017      	str	r0, [sp, #92]	; 0x5c
 802145e:	9112      	str	r1, [sp, #72]	; 0x48
 8021460:	6850      	ldr	r0, [r2, #4]
 8021462:	9315      	str	r3, [sp, #84]	; 0x54
 8021464:	6812      	ldr	r2, [r2, #0]
 8021466:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8021468:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 802146c:	fb00 1303 	mla	r3, r0, r3, r1
 8021470:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021474:	18d3      	adds	r3, r2, r3
 8021476:	930a      	str	r3, [sp, #40]	; 0x28
 8021478:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802147a:	681b      	ldr	r3, [r3, #0]
 802147c:	9311      	str	r3, [sp, #68]	; 0x44
 802147e:	9b07      	ldr	r3, [sp, #28]
 8021480:	009b      	lsls	r3, r3, #2
 8021482:	930e      	str	r3, [sp, #56]	; 0x38
 8021484:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021486:	2b00      	cmp	r3, #0
 8021488:	dc03      	bgt.n	8021492 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 802148a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802148c:	2b00      	cmp	r3, #0
 802148e:	f340 833b 	ble.w	8021b08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 8021492:	9b06      	ldr	r3, [sp, #24]
 8021494:	2b00      	cmp	r3, #0
 8021496:	f340 8197 	ble.w	80217c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ac>
 802149a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802149c:	1423      	asrs	r3, r4, #16
 802149e:	1412      	asrs	r2, r2, #16
 80214a0:	d432      	bmi.n	8021508 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 80214a2:	1c51      	adds	r1, r2, #1
 80214a4:	9807      	ldr	r0, [sp, #28]
 80214a6:	4288      	cmp	r0, r1
 80214a8:	dd31      	ble.n	802150e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 80214aa:	2b00      	cmp	r3, #0
 80214ac:	db2f      	blt.n	802150e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 80214ae:	1c59      	adds	r1, r3, #1
 80214b0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80214b2:	4288      	cmp	r0, r1
 80214b4:	dd2b      	ble.n	802150e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 80214b6:	9b06      	ldr	r3, [sp, #24]
 80214b8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80214ba:	3b01      	subs	r3, #1
 80214bc:	992b      	ldr	r1, [sp, #172]	; 0xac
 80214be:	fb02 1203 	mla	r2, r2, r3, r1
 80214c2:	1412      	asrs	r2, r2, #16
 80214c4:	d42e      	bmi.n	8021524 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 80214c6:	3201      	adds	r2, #1
 80214c8:	9907      	ldr	r1, [sp, #28]
 80214ca:	4291      	cmp	r1, r2
 80214cc:	dd2a      	ble.n	8021524 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 80214ce:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80214d0:	fb02 4303 	mla	r3, r2, r3, r4
 80214d4:	141b      	asrs	r3, r3, #16
 80214d6:	d425      	bmi.n	8021524 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 80214d8:	3301      	adds	r3, #1
 80214da:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80214dc:	429a      	cmp	r2, r3
 80214de:	dd21      	ble.n	8021524 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 80214e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80214e2:	f8bd b054 	ldrh.w	fp, [sp, #84]	; 0x54
 80214e6:	f103 0e03 	add.w	lr, r3, #3
 80214ea:	9b06      	ldr	r3, [sp, #24]
 80214ec:	9313      	str	r3, [sp, #76]	; 0x4c
 80214ee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80214f0:	2b00      	cmp	r3, #0
 80214f2:	f300 81d2 	bgt.w	802189a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47e>
 80214f6:	9b06      	ldr	r3, [sp, #24]
 80214f8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80214fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80214fe:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021502:	4423      	add	r3, r4
 8021504:	930a      	str	r3, [sp, #40]	; 0x28
 8021506:	e161      	b.n	80217cc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b0>
 8021508:	1c51      	adds	r1, r2, #1
 802150a:	f040 8150 	bne.w	80217ae <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 802150e:	9907      	ldr	r1, [sp, #28]
 8021510:	428a      	cmp	r2, r1
 8021512:	f280 814c 	bge.w	80217ae <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8021516:	1c5a      	adds	r2, r3, #1
 8021518:	f2c0 8149 	blt.w	80217ae <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 802151c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802151e:	4293      	cmp	r3, r2
 8021520:	f280 8145 	bge.w	80217ae <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8021524:	9b06      	ldr	r3, [sp, #24]
 8021526:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8021528:	9314      	str	r3, [sp, #80]	; 0x50
 802152a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 802152e:	9313      	str	r3, [sp, #76]	; 0x4c
 8021530:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021532:	2b00      	cmp	r3, #0
 8021534:	dddf      	ble.n	80214f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 8021536:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021538:	1423      	asrs	r3, r4, #16
 802153a:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802153e:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8021542:	1412      	asrs	r2, r2, #16
 8021544:	f100 8190 	bmi.w	8021868 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44c>
 8021548:	1c55      	adds	r5, r2, #1
 802154a:	9f07      	ldr	r7, [sp, #28]
 802154c:	42af      	cmp	r7, r5
 802154e:	f340 818d 	ble.w	802186c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8021552:	2b00      	cmp	r3, #0
 8021554:	f2c0 818a 	blt.w	802186c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8021558:	1c5d      	adds	r5, r3, #1
 802155a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 802155c:	42af      	cmp	r7, r5
 802155e:	f340 8185 	ble.w	802186c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8021562:	9d07      	ldr	r5, [sp, #28]
 8021564:	fb03 2305 	mla	r3, r3, r5, r2
 8021568:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802156a:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 802156e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021572:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8021576:	2800      	cmp	r0, #0
 8021578:	f000 8167 	beq.w	802184a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 802157c:	686a      	ldr	r2, [r5, #4]
 802157e:	920b      	str	r2, [sp, #44]	; 0x2c
 8021580:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8021584:	2900      	cmp	r1, #0
 8021586:	f000 8169 	beq.w	802185c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 802158a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802158c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 802158e:	18aa      	adds	r2, r5, r2
 8021590:	59ed      	ldr	r5, [r5, r7]
 8021592:	6852      	ldr	r2, [r2, #4]
 8021594:	9508      	str	r5, [sp, #32]
 8021596:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 802159a:	0e15      	lsrs	r5, r2, #24
 802159c:	920c      	str	r2, [sp, #48]	; 0x30
 802159e:	b280      	uxth	r0, r0
 80215a0:	b289      	uxth	r1, r1
 80215a2:	fb00 fb01 	mul.w	fp, r0, r1
 80215a6:	0100      	lsls	r0, r0, #4
 80215a8:	ebcb 1101 	rsb	r1, fp, r1, lsl #4
 80215ac:	eba0 090b 	sub.w	r9, r0, fp
 80215b0:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 80215b4:	b289      	uxth	r1, r1
 80215b6:	fa1f f989 	uxth.w	r9, r9
 80215ba:	1a52      	subs	r2, r2, r1
 80215bc:	fb09 f008 	mul.w	r0, r9, r8
 80215c0:	b292      	uxth	r2, r2
 80215c2:	fb02 000c 	mla	r0, r2, ip, r0
 80215c6:	fb01 000a 	mla	r0, r1, sl, r0
 80215ca:	fb0b 0005 	mla	r0, fp, r5, r0
 80215ce:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80215d2:	2800      	cmp	r0, #0
 80215d4:	f000 80e0 	beq.w	8021798 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 80215d8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80215dc:	d01b      	beq.n	8021616 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fa>
 80215de:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80215e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80215e6:	fb0c fe0e 	mul.w	lr, ip, lr
 80215ea:	fb0c fc03 	mul.w	ip, ip, r3
 80215ee:	ea4f 231e 	mov.w	r3, lr, lsr #8
 80215f2:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80215f6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80215fa:	4473      	add	r3, lr
 80215fc:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 8021600:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8021604:	0a1b      	lsrs	r3, r3, #8
 8021606:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802160a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802160e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8021612:	ea43 030e 	orr.w	r3, r3, lr
 8021616:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802161a:	d01e      	beq.n	802165a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 802161c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 802161e:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8021622:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 8021626:	fb08 fc0c 	mul.w	ip, r8, ip
 802162a:	fb08 f80e 	mul.w	r8, r8, lr
 802162e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8021632:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021636:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802163a:	44e6      	add	lr, ip
 802163c:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 8021640:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8021644:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021648:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802164c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021650:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8021654:	ea4e 0708 	orr.w	r7, lr, r8
 8021658:	970b      	str	r7, [sp, #44]	; 0x2c
 802165a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802165e:	d01e      	beq.n	802169e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8021660:	9f08      	ldr	r7, [sp, #32]
 8021662:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8021666:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 802166a:	fb0a f808 	mul.w	r8, sl, r8
 802166e:	fb0a fa0c 	mul.w	sl, sl, ip
 8021672:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8021676:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 802167a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802167e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021682:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021686:	44c6      	add	lr, r8
 8021688:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802168c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021690:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021694:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021698:	ea4e 070a 	orr.w	r7, lr, sl
 802169c:	9708      	str	r7, [sp, #32]
 802169e:	2dff      	cmp	r5, #255	; 0xff
 80216a0:	d01d      	beq.n	80216de <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c2>
 80216a2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80216a4:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 80216a8:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80216ac:	fb05 f808 	mul.w	r8, r5, r8
 80216b0:	fb05 f50c 	mul.w	r5, r5, ip
 80216b4:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 80216b8:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 80216bc:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 80216c0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80216c4:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80216c8:	44c6      	add	lr, r8
 80216ca:	0a2d      	lsrs	r5, r5, #8
 80216cc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80216d0:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80216d4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80216d8:	ea4e 0505 	orr.w	r5, lr, r5
 80216dc:	950c      	str	r5, [sp, #48]	; 0x30
 80216de:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80216e0:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80216e4:	9f08      	ldr	r7, [sp, #32]
 80216e6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80216ea:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80216ee:	fb09 f505 	mul.w	r5, r9, r5
 80216f2:	fb02 550c 	mla	r5, r2, ip, r5
 80216f6:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80216fa:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80216fc:	fb01 550c 	mla	r5, r1, ip, r5
 8021700:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8021704:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8021706:	fb0b 550c 	mla	r5, fp, ip, r5
 802170a:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 802170e:	fb09 f90c 	mul.w	r9, r9, ip
 8021712:	0a2d      	lsrs	r5, r5, #8
 8021714:	fb02 9303 	mla	r3, r2, r3, r9
 8021718:	9a08      	ldr	r2, [sp, #32]
 802171a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802171e:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8021722:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021724:	fb01 330e 	mla	r3, r1, lr, r3
 8021728:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 802172c:	fb0b 3b01 	mla	fp, fp, r1, r3
 8021730:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021732:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8021734:	4343      	muls	r3, r0
 8021736:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802173a:	1c58      	adds	r0, r3, #1
 802173c:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8021740:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8021744:	ea45 050b 	orr.w	r5, r5, fp
 8021748:	7833      	ldrb	r3, [r6, #0]
 802174a:	b2ea      	uxtb	r2, r5
 802174c:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8021750:	fb12 f201 	smulbb	r2, r2, r1
 8021754:	b2c0      	uxtb	r0, r0
 8021756:	fb03 2300 	mla	r3, r3, r0, r2
 802175a:	b29b      	uxth	r3, r3
 802175c:	1c5a      	adds	r2, r3, #1
 802175e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021762:	7872      	ldrb	r2, [r6, #1]
 8021764:	fb12 f200 	smulbb	r2, r2, r0
 8021768:	121b      	asrs	r3, r3, #8
 802176a:	7033      	strb	r3, [r6, #0]
 802176c:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8021770:	0c2d      	lsrs	r5, r5, #16
 8021772:	fb03 2301 	mla	r3, r3, r1, r2
 8021776:	b29b      	uxth	r3, r3
 8021778:	1c5a      	adds	r2, r3, #1
 802177a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802177e:	121b      	asrs	r3, r3, #8
 8021780:	7073      	strb	r3, [r6, #1]
 8021782:	78b3      	ldrb	r3, [r6, #2]
 8021784:	fb13 f000 	smulbb	r0, r3, r0
 8021788:	fb05 0501 	mla	r5, r5, r1, r0
 802178c:	b2ad      	uxth	r5, r5
 802178e:	1c6b      	adds	r3, r5, #1
 8021790:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8021794:	122d      	asrs	r5, r5, #8
 8021796:	70b5      	strb	r5, [r6, #2]
 8021798:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802179a:	3603      	adds	r6, #3
 802179c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802179e:	4413      	add	r3, r2
 80217a0:	932b      	str	r3, [sp, #172]	; 0xac
 80217a2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80217a4:	441c      	add	r4, r3
 80217a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80217a8:	3b01      	subs	r3, #1
 80217aa:	9314      	str	r3, [sp, #80]	; 0x50
 80217ac:	e6c0      	b.n	8021530 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 80217ae:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80217b0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80217b2:	4413      	add	r3, r2
 80217b4:	932b      	str	r3, [sp, #172]	; 0xac
 80217b6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80217b8:	441c      	add	r4, r3
 80217ba:	9b06      	ldr	r3, [sp, #24]
 80217bc:	3b01      	subs	r3, #1
 80217be:	9306      	str	r3, [sp, #24]
 80217c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80217c2:	3303      	adds	r3, #3
 80217c4:	930a      	str	r3, [sp, #40]	; 0x28
 80217c6:	e664      	b.n	8021492 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 80217c8:	f47f ae75 	bne.w	80214b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 80217cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80217ce:	2b00      	cmp	r3, #0
 80217d0:	f340 819a 	ble.w	8021b08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 80217d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80217d8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80217da:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80217de:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80217e2:	eef0 6a48 	vmov.f32	s13, s16
 80217e6:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80217ea:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80217ee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80217f2:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 80217f6:	eef0 6a68 	vmov.f32	s13, s17
 80217fa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80217fe:	ee16 4a90 	vmov	r4, s13
 8021802:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021806:	ee69 7a27 	vmul.f32	s15, s18, s15
 802180a:	ee37 8a48 	vsub.f32	s16, s14, s16
 802180e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021812:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021816:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802181a:	ee18 2a10 	vmov	r2, s16
 802181e:	eeb0 8a47 	vmov.f32	s16, s14
 8021822:	fb92 f3f3 	sdiv	r3, r2, r3
 8021826:	ee18 2a90 	vmov	r2, s17
 802182a:	932d      	str	r3, [sp, #180]	; 0xb4
 802182c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802182e:	eef0 8a67 	vmov.f32	s17, s15
 8021832:	fb92 f3f3 	sdiv	r3, r2, r3
 8021836:	932e      	str	r3, [sp, #184]	; 0xb8
 8021838:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802183a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802183c:	3b01      	subs	r3, #1
 802183e:	9312      	str	r3, [sp, #72]	; 0x48
 8021840:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021842:	bf08      	it	eq
 8021844:	4613      	moveq	r3, r2
 8021846:	9306      	str	r3, [sp, #24]
 8021848:	e61c      	b.n	8021484 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 802184a:	b151      	cbz	r1, 8021862 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 802184c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802184e:	58aa      	ldr	r2, [r5, r2]
 8021850:	25ff      	movs	r5, #255	; 0xff
 8021852:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 8021856:	9208      	str	r2, [sp, #32]
 8021858:	46a8      	mov	r8, r5
 802185a:	e6a0      	b.n	802159e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 802185c:	25ff      	movs	r5, #255	; 0xff
 802185e:	46aa      	mov	sl, r5
 8021860:	e69d      	b.n	802159e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 8021862:	25ff      	movs	r5, #255	; 0xff
 8021864:	46aa      	mov	sl, r5
 8021866:	e7f7      	b.n	8021858 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43c>
 8021868:	1c57      	adds	r7, r2, #1
 802186a:	d195      	bne.n	8021798 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802186c:	9d07      	ldr	r5, [sp, #28]
 802186e:	4295      	cmp	r5, r2
 8021870:	dd92      	ble.n	8021798 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8021872:	1c5d      	adds	r5, r3, #1
 8021874:	db90      	blt.n	8021798 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8021876:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8021878:	429d      	cmp	r5, r3
 802187a:	dd8d      	ble.n	8021798 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802187c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802187e:	9201      	str	r2, [sp, #4]
 8021880:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021882:	e9cd 3002 	strd	r3, r0, [sp, #8]
 8021886:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021888:	9817      	ldr	r0, [sp, #92]	; 0x5c
 802188a:	9300      	str	r3, [sp, #0]
 802188c:	9b07      	ldr	r3, [sp, #28]
 802188e:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8021892:	4631      	mov	r1, r6
 8021894:	f7ff fc68 	bl	8021168 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8021898:	e77e      	b.n	8021798 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802189a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802189c:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80218a0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80218a2:	9d07      	ldr	r5, [sp, #28]
 80218a4:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80218a8:	1412      	asrs	r2, r2, #16
 80218aa:	1423      	asrs	r3, r4, #16
 80218ac:	fb05 2303 	mla	r3, r5, r3, r2
 80218b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80218b2:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80218b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80218ba:	0e1e      	lsrs	r6, r3, #24
 80218bc:	2900      	cmp	r1, #0
 80218be:	f000 8114 	beq.w	8021aea <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ce>
 80218c2:	686a      	ldr	r2, [r5, #4]
 80218c4:	920d      	str	r2, [sp, #52]	; 0x34
 80218c6:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 80218ca:	2800      	cmp	r0, #0
 80218cc:	f000 8116 	beq.w	8021afc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e0>
 80218d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80218d2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80218d4:	18aa      	adds	r2, r5, r2
 80218d6:	59ed      	ldr	r5, [r5, r7]
 80218d8:	6852      	ldr	r2, [r2, #4]
 80218da:	9509      	str	r5, [sp, #36]	; 0x24
 80218dc:	ea4f 6915 	mov.w	r9, r5, lsr #24
 80218e0:	0e15      	lsrs	r5, r2, #24
 80218e2:	920f      	str	r2, [sp, #60]	; 0x3c
 80218e4:	b289      	uxth	r1, r1
 80218e6:	b280      	uxth	r0, r0
 80218e8:	fb01 fa00 	mul.w	sl, r1, r0
 80218ec:	0109      	lsls	r1, r1, #4
 80218ee:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80218f2:	eba1 080a 	sub.w	r8, r1, sl
 80218f6:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 80218fa:	b280      	uxth	r0, r0
 80218fc:	fa1f f888 	uxth.w	r8, r8
 8021900:	1a12      	subs	r2, r2, r0
 8021902:	fb08 f10c 	mul.w	r1, r8, ip
 8021906:	b292      	uxth	r2, r2
 8021908:	fb02 1106 	mla	r1, r2, r6, r1
 802190c:	fb00 1109 	mla	r1, r0, r9, r1
 8021910:	fb0a 1105 	mla	r1, sl, r5, r1
 8021914:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8021918:	2900      	cmp	r1, #0
 802191a:	f000 80da 	beq.w	8021ad2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 802191e:	2eff      	cmp	r6, #255	; 0xff
 8021920:	d016      	beq.n	8021950 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x534>
 8021922:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8021926:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802192a:	4377      	muls	r7, r6
 802192c:	435e      	muls	r6, r3
 802192e:	0a3b      	lsrs	r3, r7, #8
 8021930:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021934:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021938:	443b      	add	r3, r7
 802193a:	f506 7780 	add.w	r7, r6, #256	; 0x100
 802193e:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8021942:	0a1b      	lsrs	r3, r3, #8
 8021944:	0a3f      	lsrs	r7, r7, #8
 8021946:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802194a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802194e:	433b      	orrs	r3, r7
 8021950:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8021954:	d01d      	beq.n	8021992 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x576>
 8021956:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8021958:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 802195a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802195e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021962:	fb0c f606 	mul.w	r6, ip, r6
 8021966:	fb0c fc07 	mul.w	ip, ip, r7
 802196a:	0a37      	lsrs	r7, r6, #8
 802196c:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8021970:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021974:	4437      	add	r7, r6
 8021976:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 802197a:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 802197e:	0a3f      	lsrs	r7, r7, #8
 8021980:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021984:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021988:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802198c:	ea47 060c 	orr.w	r6, r7, ip
 8021990:	960d      	str	r6, [sp, #52]	; 0x34
 8021992:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021996:	d01d      	beq.n	80219d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b8>
 8021998:	9e09      	ldr	r6, [sp, #36]	; 0x24
 802199a:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 802199e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80219a2:	fb09 fc0c 	mul.w	ip, r9, ip
 80219a6:	fb09 f906 	mul.w	r9, r9, r6
 80219aa:	ea4f 271c 	mov.w	r7, ip, lsr #8
 80219ae:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80219b2:	f509 7680 	add.w	r6, r9, #256	; 0x100
 80219b6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80219ba:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 80219be:	4467      	add	r7, ip
 80219c0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80219c4:	0a3f      	lsrs	r7, r7, #8
 80219c6:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80219ca:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80219ce:	ea47 0609 	orr.w	r6, r7, r9
 80219d2:	9609      	str	r6, [sp, #36]	; 0x24
 80219d4:	2dff      	cmp	r5, #255	; 0xff
 80219d6:	d01a      	beq.n	8021a0e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f2>
 80219d8:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80219da:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80219de:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80219e2:	fb05 fc0c 	mul.w	ip, r5, ip
 80219e6:	4375      	muls	r5, r6
 80219e8:	ea4f 271c 	mov.w	r7, ip, lsr #8
 80219ec:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80219f0:	f505 7680 	add.w	r6, r5, #256	; 0x100
 80219f4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80219f8:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 80219fc:	4467      	add	r7, ip
 80219fe:	0a2d      	lsrs	r5, r5, #8
 8021a00:	0a3f      	lsrs	r7, r7, #8
 8021a02:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8021a06:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021a0a:	433d      	orrs	r5, r7
 8021a0c:	950f      	str	r5, [sp, #60]	; 0x3c
 8021a0e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8021a10:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 8021a14:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021a18:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021a1c:	fb08 f505 	mul.w	r5, r8, r5
 8021a20:	fb02 5506 	mla	r5, r2, r6, r5
 8021a24:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8021a26:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021a2a:	fb00 5506 	mla	r5, r0, r6, r5
 8021a2e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8021a30:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021a34:	fb0a 5506 	mla	r5, sl, r6, r5
 8021a38:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8021a3a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021a3e:	0a2d      	lsrs	r5, r5, #8
 8021a40:	fb08 f806 	mul.w	r8, r8, r6
 8021a44:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021a48:	fb02 8303 	mla	r3, r2, r3, r8
 8021a4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021a4e:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8021a52:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021a54:	fb00 3307 	mla	r3, r0, r7, r3
 8021a58:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8021a5c:	fb0a 3c0c 	mla	ip, sl, ip, r3
 8021a60:	fb01 f30b 	mul.w	r3, r1, fp
 8021a64:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021a68:	1c59      	adds	r1, r3, #1
 8021a6a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021a6e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8021a72:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8021a76:	ea45 050c 	orr.w	r5, r5, ip
 8021a7a:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8021a7e:	b2ea      	uxtb	r2, r5
 8021a80:	b2c9      	uxtb	r1, r1
 8021a82:	fb12 f20b 	smulbb	r2, r2, fp
 8021a86:	fb03 2301 	mla	r3, r3, r1, r2
 8021a8a:	b29b      	uxth	r3, r3
 8021a8c:	1c5a      	adds	r2, r3, #1
 8021a8e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021a92:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8021a96:	fb12 f201 	smulbb	r2, r2, r1
 8021a9a:	121b      	asrs	r3, r3, #8
 8021a9c:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8021aa0:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8021aa4:	0c2d      	lsrs	r5, r5, #16
 8021aa6:	fb03 230b 	mla	r3, r3, fp, r2
 8021aaa:	b29b      	uxth	r3, r3
 8021aac:	1c5a      	adds	r2, r3, #1
 8021aae:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021ab2:	121b      	asrs	r3, r3, #8
 8021ab4:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8021ab8:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8021abc:	fb13 f101 	smulbb	r1, r3, r1
 8021ac0:	fb05 150b 	mla	r5, r5, fp, r1
 8021ac4:	b2ad      	uxth	r5, r5
 8021ac6:	1c69      	adds	r1, r5, #1
 8021ac8:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8021acc:	122d      	asrs	r5, r5, #8
 8021ace:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8021ad2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8021ad4:	f10e 0e03 	add.w	lr, lr, #3
 8021ad8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8021ada:	4413      	add	r3, r2
 8021adc:	932b      	str	r3, [sp, #172]	; 0xac
 8021ade:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021ae0:	441c      	add	r4, r3
 8021ae2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021ae4:	3b01      	subs	r3, #1
 8021ae6:	9313      	str	r3, [sp, #76]	; 0x4c
 8021ae8:	e501      	b.n	80214ee <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 8021aea:	b150      	cbz	r0, 8021b02 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e6>
 8021aec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021aee:	58aa      	ldr	r2, [r5, r2]
 8021af0:	25ff      	movs	r5, #255	; 0xff
 8021af2:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8021af6:	9209      	str	r2, [sp, #36]	; 0x24
 8021af8:	46ac      	mov	ip, r5
 8021afa:	e6f3      	b.n	80218e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 8021afc:	25ff      	movs	r5, #255	; 0xff
 8021afe:	46a9      	mov	r9, r5
 8021b00:	e6f0      	b.n	80218e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 8021b02:	25ff      	movs	r5, #255	; 0xff
 8021b04:	46a9      	mov	r9, r5
 8021b06:	e7f7      	b.n	8021af8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6dc>
 8021b08:	b019      	add	sp, #100	; 0x64
 8021b0a:	ecbd 8b08 	vpop	{d8-d11}
 8021b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08021b14 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 8021b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021b18:	b085      	sub	sp, #20
 8021b1a:	7888      	ldrb	r0, [r1, #2]
 8021b1c:	4691      	mov	r9, r2
 8021b1e:	9000      	str	r0, [sp, #0]
 8021b20:	7848      	ldrb	r0, [r1, #1]
 8021b22:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 8021b26:	9001      	str	r0, [sp, #4]
 8021b28:	7808      	ldrb	r0, [r1, #0]
 8021b2a:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8021b2e:	9002      	str	r0, [sp, #8]
 8021b30:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8021b34:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8021b38:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 8021b3c:	fb04 c603 	mla	r6, r4, r3, ip
 8021b40:	2c00      	cmp	r4, #0
 8021b42:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 8021b46:	9a00      	ldr	r2, [sp, #0]
 8021b48:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8021b4c:	9a01      	ldr	r2, [sp, #4]
 8021b4e:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8021b52:	db3a      	blt.n	8021bca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 8021b54:	45a0      	cmp	r8, r4
 8021b56:	dd38      	ble.n	8021bca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 8021b58:	f1bc 0f00 	cmp.w	ip, #0
 8021b5c:	db33      	blt.n	8021bc6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 8021b5e:	4563      	cmp	r3, ip
 8021b60:	dd31      	ble.n	8021bc6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 8021b62:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 8021b66:	f11c 0601 	adds.w	r6, ip, #1
 8021b6a:	d431      	bmi.n	8021bd0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8021b6c:	42b3      	cmp	r3, r6
 8021b6e:	dd2f      	ble.n	8021bd0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8021b70:	b375      	cbz	r5, 8021bd0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8021b72:	f8de 6004 	ldr.w	r6, [lr, #4]
 8021b76:	3401      	adds	r4, #1
 8021b78:	d42e      	bmi.n	8021bd8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8021b7a:	45a0      	cmp	r8, r4
 8021b7c:	dd2c      	ble.n	8021bd8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8021b7e:	b35f      	cbz	r7, 8021bd8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8021b80:	f1bc 0f00 	cmp.w	ip, #0
 8021b84:	db26      	blt.n	8021bd4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 8021b86:	4563      	cmp	r3, ip
 8021b88:	dd24      	ble.n	8021bd4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 8021b8a:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 8021b8e:	f11c 0c01 	adds.w	ip, ip, #1
 8021b92:	d405      	bmi.n	8021ba0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8021b94:	4563      	cmp	r3, ip
 8021b96:	dd03      	ble.n	8021ba0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8021b98:	b115      	cbz	r5, 8021ba0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8021b9a:	3301      	adds	r3, #1
 8021b9c:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8021ba0:	2d0f      	cmp	r5, #15
 8021ba2:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8021ba6:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8021baa:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8021bae:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8021bb2:	d801      	bhi.n	8021bb8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa4>
 8021bb4:	2f0f      	cmp	r7, #15
 8021bb6:	d911      	bls.n	8021bdc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc8>
 8021bb8:	4b77      	ldr	r3, [pc, #476]	; (8021d98 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x284>)
 8021bba:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8021bbe:	4a77      	ldr	r2, [pc, #476]	; (8021d9c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x288>)
 8021bc0:	4877      	ldr	r0, [pc, #476]	; (8021da0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x28c>)
 8021bc2:	f003 f831 	bl	8024c28 <__assert_func>
 8021bc6:	4602      	mov	r2, r0
 8021bc8:	e7cd      	b.n	8021b66 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x52>
 8021bca:	4606      	mov	r6, r0
 8021bcc:	4602      	mov	r2, r0
 8021bce:	e7d2      	b.n	8021b76 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 8021bd0:	4606      	mov	r6, r0
 8021bd2:	e7d0      	b.n	8021b76 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 8021bd4:	4604      	mov	r4, r0
 8021bd6:	e7da      	b.n	8021b8e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7a>
 8021bd8:	4604      	mov	r4, r0
 8021bda:	e7e1      	b.n	8021ba0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8021bdc:	b2ab      	uxth	r3, r5
 8021bde:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8021be2:	b2bf      	uxth	r7, r7
 8021be4:	fb03 fe07 	mul.w	lr, r3, r7
 8021be8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8021bec:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8021bf0:	eba3 0c0e 	sub.w	ip, r3, lr
 8021bf4:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8021bf8:	b2bf      	uxth	r7, r7
 8021bfa:	fa1f fc8c 	uxth.w	ip, ip
 8021bfe:	eba5 0507 	sub.w	r5, r5, r7
 8021c02:	fb0c f30a 	mul.w	r3, ip, sl
 8021c06:	b2ad      	uxth	r5, r5
 8021c08:	fb05 330b 	mla	r3, r5, fp, r3
 8021c0c:	fb07 3309 	mla	r3, r7, r9, r3
 8021c10:	fb0e 3308 	mla	r3, lr, r8, r3
 8021c14:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021c18:	9303      	str	r3, [sp, #12]
 8021c1a:	d018      	beq.n	8021c4e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x13a>
 8021c1c:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8021c20:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021c24:	fb0b f303 	mul.w	r3, fp, r3
 8021c28:	fb0b fb02 	mul.w	fp, fp, r2
 8021c2c:	0a1a      	lsrs	r2, r3, #8
 8021c2e:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8021c32:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021c36:	441a      	add	r2, r3
 8021c38:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8021c3c:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8021c40:	0a12      	lsrs	r2, r2, #8
 8021c42:	0a1b      	lsrs	r3, r3, #8
 8021c44:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021c48:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021c4c:	431a      	orrs	r2, r3
 8021c4e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021c52:	d019      	beq.n	8021c88 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x174>
 8021c54:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8021c58:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021c5c:	fb0a fb0b 	mul.w	fp, sl, fp
 8021c60:	fb0a fa06 	mul.w	sl, sl, r6
 8021c64:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8021c68:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021c6c:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8021c70:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021c74:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8021c78:	445e      	add	r6, fp
 8021c7a:	0a1b      	lsrs	r3, r3, #8
 8021c7c:	0a36      	lsrs	r6, r6, #8
 8021c7e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021c82:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021c86:	431e      	orrs	r6, r3
 8021c88:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021c8c:	d019      	beq.n	8021cc2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1ae>
 8021c8e:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8021c92:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021c96:	fb09 fa0a 	mul.w	sl, r9, sl
 8021c9a:	fb09 f904 	mul.w	r9, r9, r4
 8021c9e:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8021ca2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021ca6:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8021caa:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021cae:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8021cb2:	4454      	add	r4, sl
 8021cb4:	0a1b      	lsrs	r3, r3, #8
 8021cb6:	0a24      	lsrs	r4, r4, #8
 8021cb8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021cbc:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021cc0:	431c      	orrs	r4, r3
 8021cc2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021cc6:	d019      	beq.n	8021cfc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1e8>
 8021cc8:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8021ccc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021cd0:	fb08 f909 	mul.w	r9, r8, r9
 8021cd4:	fb08 f800 	mul.w	r8, r8, r0
 8021cd8:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8021cdc:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8021ce0:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8021ce4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021ce8:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8021cec:	4448      	add	r0, r9
 8021cee:	0a1b      	lsrs	r3, r3, #8
 8021cf0:	0a00      	lsrs	r0, r0, #8
 8021cf2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021cf6:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021cfa:	4318      	orrs	r0, r3
 8021cfc:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8021d00:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021d04:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8021d08:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021d0c:	fb0c f808 	mul.w	r8, ip, r8
 8021d10:	fb0c f606 	mul.w	r6, ip, r6
 8021d14:	fb05 8803 	mla	r8, r5, r3, r8
 8021d18:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8021d1c:	fb05 6202 	mla	r2, r5, r2, r6
 8021d20:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021d24:	fb07 8803 	mla	r8, r7, r3, r8
 8021d28:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8021d2c:	fb07 2704 	mla	r7, r7, r4, r2
 8021d30:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021d34:	fb0e 8303 	mla	r3, lr, r3, r8
 8021d38:	fb0e 7e00 	mla	lr, lr, r0, r7
 8021d3c:	9802      	ldr	r0, [sp, #8]
 8021d3e:	0a1b      	lsrs	r3, r3, #8
 8021d40:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021d44:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021d48:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8021d4c:	ea43 0e0e 	orr.w	lr, r3, lr
 8021d50:	9b03      	ldr	r3, [sp, #12]
 8021d52:	43db      	mvns	r3, r3
 8021d54:	b2db      	uxtb	r3, r3
 8021d56:	4358      	muls	r0, r3
 8021d58:	1c42      	adds	r2, r0, #1
 8021d5a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8021d5e:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8021d62:	700a      	strb	r2, [r1, #0]
 8021d64:	9a01      	ldr	r2, [sp, #4]
 8021d66:	435a      	muls	r2, r3
 8021d68:	1c50      	adds	r0, r2, #1
 8021d6a:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8021d6e:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8021d72:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8021d76:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8021d7a:	704a      	strb	r2, [r1, #1]
 8021d7c:	9a00      	ldr	r2, [sp, #0]
 8021d7e:	435a      	muls	r2, r3
 8021d80:	4613      	mov	r3, r2
 8021d82:	3201      	adds	r2, #1
 8021d84:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021d88:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8021d8c:	f881 e002 	strb.w	lr, [r1, #2]
 8021d90:	b005      	add	sp, #20
 8021d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021d96:	bf00      	nop
 8021d98:	08029617 	.word	0x08029617
 8021d9c:	08029b0e 	.word	0x08029b0e
 8021da0:	080296e0 	.word	0x080296e0

08021da4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8021da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021da8:	ed2d 8b08 	vpush	{d8-d11}
 8021dac:	b097      	sub	sp, #92	; 0x5c
 8021dae:	eeb0 aa40 	vmov.f32	s20, s0
 8021db2:	eef0 9a60 	vmov.f32	s19, s1
 8021db6:	9306      	str	r3, [sp, #24]
 8021db8:	eeb0 9a41 	vmov.f32	s18, s2
 8021dbc:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 8021dc0:	eeb0 8a62 	vmov.f32	s16, s5
 8021dc4:	9214      	str	r2, [sp, #80]	; 0x50
 8021dc6:	eef0 8a43 	vmov.f32	s17, s6
 8021dca:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8021dcc:	eef0 ba44 	vmov.f32	s23, s8
 8021dd0:	9307      	str	r3, [sp, #28]
 8021dd2:	eeb0 ba64 	vmov.f32	s22, s9
 8021dd6:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8021dda:	eef0 aa45 	vmov.f32	s21, s10
 8021dde:	9015      	str	r0, [sp, #84]	; 0x54
 8021de0:	9112      	str	r1, [sp, #72]	; 0x48
 8021de2:	6850      	ldr	r0, [r2, #4]
 8021de4:	9310      	str	r3, [sp, #64]	; 0x40
 8021de6:	6812      	ldr	r2, [r2, #0]
 8021de8:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8021dea:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8021dee:	fb00 1303 	mla	r3, r0, r3, r1
 8021df2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021df6:	18d3      	adds	r3, r2, r3
 8021df8:	930a      	str	r3, [sp, #40]	; 0x28
 8021dfa:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8021dfc:	681b      	ldr	r3, [r3, #0]
 8021dfe:	9311      	str	r3, [sp, #68]	; 0x44
 8021e00:	9b07      	ldr	r3, [sp, #28]
 8021e02:	009b      	lsls	r3, r3, #2
 8021e04:	930e      	str	r3, [sp, #56]	; 0x38
 8021e06:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021e08:	2b00      	cmp	r3, #0
 8021e0a:	dc03      	bgt.n	8021e14 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8021e0c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021e0e:	2b00      	cmp	r3, #0
 8021e10:	f340 832e 	ble.w	8022470 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 8021e14:	9b06      	ldr	r3, [sp, #24]
 8021e16:	2b00      	cmp	r3, #0
 8021e18:	f340 8186 	ble.w	8022128 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x384>
 8021e1c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8021e1e:	1423      	asrs	r3, r4, #16
 8021e20:	1412      	asrs	r2, r2, #16
 8021e22:	d42f      	bmi.n	8021e84 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 8021e24:	1c51      	adds	r1, r2, #1
 8021e26:	9807      	ldr	r0, [sp, #28]
 8021e28:	4288      	cmp	r0, r1
 8021e2a:	dd2e      	ble.n	8021e8a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8021e2c:	2b00      	cmp	r3, #0
 8021e2e:	db2c      	blt.n	8021e8a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8021e30:	1c59      	adds	r1, r3, #1
 8021e32:	9810      	ldr	r0, [sp, #64]	; 0x40
 8021e34:	4288      	cmp	r0, r1
 8021e36:	dd28      	ble.n	8021e8a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8021e38:	9b06      	ldr	r3, [sp, #24]
 8021e3a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021e3c:	3b01      	subs	r3, #1
 8021e3e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8021e40:	fb02 1203 	mla	r2, r2, r3, r1
 8021e44:	1412      	asrs	r2, r2, #16
 8021e46:	d42b      	bmi.n	8021ea0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8021e48:	3201      	adds	r2, #1
 8021e4a:	9907      	ldr	r1, [sp, #28]
 8021e4c:	4291      	cmp	r1, r2
 8021e4e:	dd27      	ble.n	8021ea0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8021e50:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8021e52:	fb02 4303 	mla	r3, r2, r3, r4
 8021e56:	141b      	asrs	r3, r3, #16
 8021e58:	d422      	bmi.n	8021ea0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8021e5a:	3301      	adds	r3, #1
 8021e5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021e5e:	429a      	cmp	r2, r3
 8021e60:	dd1e      	ble.n	8021ea0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8021e62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021e64:	f8dd b018 	ldr.w	fp, [sp, #24]
 8021e68:	1cdd      	adds	r5, r3, #3
 8021e6a:	f1bb 0f00 	cmp.w	fp, #0
 8021e6e:	f300 81c4 	bgt.w	80221fa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 8021e72:	9b06      	ldr	r3, [sp, #24]
 8021e74:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021e78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021e7a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021e7e:	4423      	add	r3, r4
 8021e80:	930a      	str	r3, [sp, #40]	; 0x28
 8021e82:	e153      	b.n	802212c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x388>
 8021e84:	1c51      	adds	r1, r2, #1
 8021e86:	f040 8142 	bne.w	802210e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8021e8a:	9907      	ldr	r1, [sp, #28]
 8021e8c:	428a      	cmp	r2, r1
 8021e8e:	f280 813e 	bge.w	802210e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8021e92:	1c5a      	adds	r2, r3, #1
 8021e94:	f2c0 813b 	blt.w	802210e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8021e98:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021e9a:	4293      	cmp	r3, r2
 8021e9c:	f280 8137 	bge.w	802210e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8021ea0:	9b06      	ldr	r3, [sp, #24]
 8021ea2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8021ea4:	9313      	str	r3, [sp, #76]	; 0x4c
 8021ea6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021ea8:	2b00      	cmp	r3, #0
 8021eaa:	dde2      	ble.n	8021e72 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xce>
 8021eac:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8021eae:	1423      	asrs	r3, r4, #16
 8021eb0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8021eb2:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8021eb6:	1409      	asrs	r1, r1, #16
 8021eb8:	f3c2 3203 	ubfx	r2, r2, #12, #4
 8021ebc:	f100 8187 	bmi.w	80221ce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42a>
 8021ec0:	1c4e      	adds	r6, r1, #1
 8021ec2:	9f07      	ldr	r7, [sp, #28]
 8021ec4:	42b7      	cmp	r7, r6
 8021ec6:	f340 8184 	ble.w	80221d2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8021eca:	2b00      	cmp	r3, #0
 8021ecc:	f2c0 8181 	blt.w	80221d2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8021ed0:	1c5e      	adds	r6, r3, #1
 8021ed2:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8021ed4:	42b7      	cmp	r7, r6
 8021ed6:	f340 817c 	ble.w	80221d2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8021eda:	9e07      	ldr	r6, [sp, #28]
 8021edc:	fb03 1306 	mla	r3, r3, r6, r1
 8021ee0:	9911      	ldr	r1, [sp, #68]	; 0x44
 8021ee2:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 8021ee6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8021eea:	0e1f      	lsrs	r7, r3, #24
 8021eec:	2a00      	cmp	r2, #0
 8021eee:	f000 815c 	beq.w	80221aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 8021ef2:	6871      	ldr	r1, [r6, #4]
 8021ef4:	910b      	str	r1, [sp, #44]	; 0x2c
 8021ef6:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8021efa:	2800      	cmp	r0, #0
 8021efc:	f000 815e 	beq.w	80221bc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x418>
 8021f00:	990e      	ldr	r1, [sp, #56]	; 0x38
 8021f02:	eb06 0c01 	add.w	ip, r6, r1
 8021f06:	5876      	ldr	r6, [r6, r1]
 8021f08:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8021f0c:	ea4f 6916 	mov.w	r9, r6, lsr #24
 8021f10:	9608      	str	r6, [sp, #32]
 8021f12:	0e0e      	lsrs	r6, r1, #24
 8021f14:	910c      	str	r1, [sp, #48]	; 0x30
 8021f16:	b292      	uxth	r2, r2
 8021f18:	b280      	uxth	r0, r0
 8021f1a:	fb02 fa00 	mul.w	sl, r2, r0
 8021f1e:	0112      	lsls	r2, r2, #4
 8021f20:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8021f24:	eba2 080a 	sub.w	r8, r2, sl
 8021f28:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8021f2c:	b280      	uxth	r0, r0
 8021f2e:	fa1f f888 	uxth.w	r8, r8
 8021f32:	1a09      	subs	r1, r1, r0
 8021f34:	fb08 f20e 	mul.w	r2, r8, lr
 8021f38:	b289      	uxth	r1, r1
 8021f3a:	fb01 2207 	mla	r2, r1, r7, r2
 8021f3e:	fb00 2209 	mla	r2, r0, r9, r2
 8021f42:	fb0a 2206 	mla	r2, sl, r6, r2
 8021f46:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8021f4a:	2a00      	cmp	r2, #0
 8021f4c:	f000 80d4 	beq.w	80220f8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8021f50:	2fff      	cmp	r7, #255	; 0xff
 8021f52:	d01a      	beq.n	8021f8a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e6>
 8021f54:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8021f58:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021f5c:	fb07 fc0c 	mul.w	ip, r7, ip
 8021f60:	435f      	muls	r7, r3
 8021f62:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8021f66:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021f6a:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 8021f6e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021f72:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 8021f76:	4463      	add	r3, ip
 8021f78:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8021f7c:	0a1b      	lsrs	r3, r3, #8
 8021f7e:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8021f82:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021f86:	ea43 030b 	orr.w	r3, r3, fp
 8021f8a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8021f8e:	d01e      	beq.n	8021fce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 8021f90:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8021f92:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 8021f96:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021f9a:	fb0e fb0b 	mul.w	fp, lr, fp
 8021f9e:	fb0e fe07 	mul.w	lr, lr, r7
 8021fa2:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8021fa6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021faa:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8021fae:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021fb2:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8021fb6:	44dc      	add	ip, fp
 8021fb8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021fbc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021fc0:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8021fc4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021fc8:	ea4c 070e 	orr.w	r7, ip, lr
 8021fcc:	970b      	str	r7, [sp, #44]	; 0x2c
 8021fce:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021fd2:	d01e      	beq.n	8022012 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8021fd4:	9f08      	ldr	r7, [sp, #32]
 8021fd6:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8021fda:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021fde:	fb09 fe0e 	mul.w	lr, r9, lr
 8021fe2:	fb09 f907 	mul.w	r9, r9, r7
 8021fe6:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8021fea:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8021fee:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8021ff2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021ff6:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8021ffa:	44f4      	add	ip, lr
 8021ffc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022000:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022004:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8022008:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802200c:	ea4c 0709 	orr.w	r7, ip, r9
 8022010:	9708      	str	r7, [sp, #32]
 8022012:	2eff      	cmp	r6, #255	; 0xff
 8022014:	d01c      	beq.n	8022050 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 8022016:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8022018:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 802201c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022020:	fb06 fe0e 	mul.w	lr, r6, lr
 8022024:	437e      	muls	r6, r7
 8022026:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 802202a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802202e:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8022032:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022036:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 802203a:	44f4      	add	ip, lr
 802203c:	0a36      	lsrs	r6, r6, #8
 802203e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022042:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022046:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802204a:	ea4c 0606 	orr.w	r6, ip, r6
 802204e:	960c      	str	r6, [sp, #48]	; 0x30
 8022050:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8022052:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8022056:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802205a:	2aff      	cmp	r2, #255	; 0xff
 802205c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022060:	fb08 f606 	mul.w	r6, r8, r6
 8022064:	fb01 6607 	mla	r6, r1, r7, r6
 8022068:	9f08      	ldr	r7, [sp, #32]
 802206a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802206e:	fb00 6607 	mla	r6, r0, r7, r6
 8022072:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8022074:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022078:	fb0a 6607 	mla	r6, sl, r7, r6
 802207c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 802207e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022082:	ea4f 2616 	mov.w	r6, r6, lsr #8
 8022086:	fb08 f807 	mul.w	r8, r8, r7
 802208a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802208e:	fb01 8303 	mla	r3, r1, r3, r8
 8022092:	9908      	ldr	r1, [sp, #32]
 8022094:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8022098:	990c      	ldr	r1, [sp, #48]	; 0x30
 802209a:	fb00 330c 	mla	r3, r0, ip, r3
 802209e:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 80220a2:	fb0a 3a00 	mla	sl, sl, r0, r3
 80220a6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80220aa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80220ae:	ea46 060a 	orr.w	r6, r6, sl
 80220b2:	b2f0      	uxtb	r0, r6
 80220b4:	f3c6 2107 	ubfx	r1, r6, #8, #8
 80220b8:	ea4f 4616 	mov.w	r6, r6, lsr #16
 80220bc:	f000 8084 	beq.w	80221c8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 80220c0:	43d2      	mvns	r2, r2
 80220c2:	782b      	ldrb	r3, [r5, #0]
 80220c4:	b2d2      	uxtb	r2, r2
 80220c6:	fb03 f702 	mul.w	r7, r3, r2
 80220ca:	1c7b      	adds	r3, r7, #1
 80220cc:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 80220d0:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80220d4:	702b      	strb	r3, [r5, #0]
 80220d6:	786b      	ldrb	r3, [r5, #1]
 80220d8:	fb03 f002 	mul.w	r0, r3, r2
 80220dc:	1c43      	adds	r3, r0, #1
 80220de:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80220e2:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80220e6:	706b      	strb	r3, [r5, #1]
 80220e8:	78ab      	ldrb	r3, [r5, #2]
 80220ea:	4353      	muls	r3, r2
 80220ec:	1c5a      	adds	r2, r3, #1
 80220ee:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80220f2:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 80220f6:	70ae      	strb	r6, [r5, #2]
 80220f8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80220fa:	3503      	adds	r5, #3
 80220fc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80220fe:	4413      	add	r3, r2
 8022100:	9329      	str	r3, [sp, #164]	; 0xa4
 8022102:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022104:	441c      	add	r4, r3
 8022106:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022108:	3b01      	subs	r3, #1
 802210a:	9313      	str	r3, [sp, #76]	; 0x4c
 802210c:	e6cb      	b.n	8021ea6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 802210e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022110:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022112:	4413      	add	r3, r2
 8022114:	9329      	str	r3, [sp, #164]	; 0xa4
 8022116:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022118:	441c      	add	r4, r3
 802211a:	9b06      	ldr	r3, [sp, #24]
 802211c:	3b01      	subs	r3, #1
 802211e:	9306      	str	r3, [sp, #24]
 8022120:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022122:	3303      	adds	r3, #3
 8022124:	930a      	str	r3, [sp, #40]	; 0x28
 8022126:	e675      	b.n	8021e14 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8022128:	f47f ae86 	bne.w	8021e38 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 802212c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802212e:	2b00      	cmp	r3, #0
 8022130:	f340 819e 	ble.w	8022470 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 8022134:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022138:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802213a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802213e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022142:	eef0 6a48 	vmov.f32	s13, s16
 8022146:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802214a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802214e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022152:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8022156:	eef0 6a68 	vmov.f32	s13, s17
 802215a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802215e:	ee16 4a90 	vmov	r4, s13
 8022162:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022166:	ee69 7a27 	vmul.f32	s15, s18, s15
 802216a:	ee37 8a48 	vsub.f32	s16, s14, s16
 802216e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022172:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022176:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802217a:	ee18 2a10 	vmov	r2, s16
 802217e:	eeb0 8a47 	vmov.f32	s16, s14
 8022182:	fb92 f3f3 	sdiv	r3, r2, r3
 8022186:	ee18 2a90 	vmov	r2, s17
 802218a:	932b      	str	r3, [sp, #172]	; 0xac
 802218c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802218e:	eef0 8a67 	vmov.f32	s17, s15
 8022192:	fb92 f3f3 	sdiv	r3, r2, r3
 8022196:	932c      	str	r3, [sp, #176]	; 0xb0
 8022198:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802219a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802219c:	3b01      	subs	r3, #1
 802219e:	9312      	str	r3, [sp, #72]	; 0x48
 80221a0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80221a2:	bf08      	it	eq
 80221a4:	4613      	moveq	r3, r2
 80221a6:	9306      	str	r3, [sp, #24]
 80221a8:	e62d      	b.n	8021e06 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 80221aa:	b150      	cbz	r0, 80221c2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41e>
 80221ac:	990e      	ldr	r1, [sp, #56]	; 0x38
 80221ae:	5871      	ldr	r1, [r6, r1]
 80221b0:	26ff      	movs	r6, #255	; 0xff
 80221b2:	ea4f 6911 	mov.w	r9, r1, lsr #24
 80221b6:	9108      	str	r1, [sp, #32]
 80221b8:	46b6      	mov	lr, r6
 80221ba:	e6ac      	b.n	8021f16 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 80221bc:	26ff      	movs	r6, #255	; 0xff
 80221be:	46b1      	mov	r9, r6
 80221c0:	e6a9      	b.n	8021f16 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 80221c2:	26ff      	movs	r6, #255	; 0xff
 80221c4:	46b1      	mov	r9, r6
 80221c6:	e7f7      	b.n	80221b8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 80221c8:	7028      	strb	r0, [r5, #0]
 80221ca:	7069      	strb	r1, [r5, #1]
 80221cc:	e793      	b.n	80220f6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x352>
 80221ce:	1c4f      	adds	r7, r1, #1
 80221d0:	d192      	bne.n	80220f8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 80221d2:	9e07      	ldr	r6, [sp, #28]
 80221d4:	428e      	cmp	r6, r1
 80221d6:	dd8f      	ble.n	80220f8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 80221d8:	1c5e      	adds	r6, r3, #1
 80221da:	db8d      	blt.n	80220f8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 80221dc:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80221de:	429e      	cmp	r6, r3
 80221e0:	dd8a      	ble.n	80220f8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 80221e2:	9600      	str	r6, [sp, #0]
 80221e4:	e9cd 2003 	strd	r2, r0, [sp, #12]
 80221e8:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80221ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80221ee:	4629      	mov	r1, r5
 80221f0:	9b07      	ldr	r3, [sp, #28]
 80221f2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80221f4:	f7ff fc8e 	bl	8021b14 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 80221f8:	e77e      	b.n	80220f8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 80221fa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80221fc:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8022200:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8022202:	9e07      	ldr	r6, [sp, #28]
 8022204:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8022208:	1409      	asrs	r1, r1, #16
 802220a:	1423      	asrs	r3, r4, #16
 802220c:	fb06 1303 	mla	r3, r6, r3, r1
 8022210:	9911      	ldr	r1, [sp, #68]	; 0x44
 8022212:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 8022216:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802221a:	0e1f      	lsrs	r7, r3, #24
 802221c:	2a00      	cmp	r2, #0
 802221e:	f000 8113 	beq.w	8022448 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a4>
 8022222:	6871      	ldr	r1, [r6, #4]
 8022224:	910d      	str	r1, [sp, #52]	; 0x34
 8022226:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 802222a:	2800      	cmp	r0, #0
 802222c:	f000 8115 	beq.w	802245a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 8022230:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022232:	eb06 0c01 	add.w	ip, r6, r1
 8022236:	5876      	ldr	r6, [r6, r1]
 8022238:	f8dc 1004 	ldr.w	r1, [ip, #4]
 802223c:	ea4f 6916 	mov.w	r9, r6, lsr #24
 8022240:	9609      	str	r6, [sp, #36]	; 0x24
 8022242:	0e0e      	lsrs	r6, r1, #24
 8022244:	910f      	str	r1, [sp, #60]	; 0x3c
 8022246:	b292      	uxth	r2, r2
 8022248:	b280      	uxth	r0, r0
 802224a:	fb02 fa00 	mul.w	sl, r2, r0
 802224e:	0112      	lsls	r2, r2, #4
 8022250:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8022254:	eba2 080a 	sub.w	r8, r2, sl
 8022258:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 802225c:	b280      	uxth	r0, r0
 802225e:	fa1f f888 	uxth.w	r8, r8
 8022262:	1a09      	subs	r1, r1, r0
 8022264:	fb08 f20e 	mul.w	r2, r8, lr
 8022268:	b289      	uxth	r1, r1
 802226a:	fb01 2207 	mla	r2, r1, r7, r2
 802226e:	fb00 2209 	mla	r2, r0, r9, r2
 8022272:	fb0a 2206 	mla	r2, sl, r6, r2
 8022276:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802227a:	2a00      	cmp	r2, #0
 802227c:	f000 80da 	beq.w	8022434 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x690>
 8022280:	2fff      	cmp	r7, #255	; 0xff
 8022282:	d01a      	beq.n	80222ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x516>
 8022284:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8022288:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802228c:	fb07 fc0c 	mul.w	ip, r7, ip
 8022290:	435f      	muls	r7, r3
 8022292:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8022296:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802229a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802229e:	4463      	add	r3, ip
 80222a0:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 80222a4:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 80222a8:	0a1b      	lsrs	r3, r3, #8
 80222aa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80222ae:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80222b2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80222b6:	ea43 030c 	orr.w	r3, r3, ip
 80222ba:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80222be:	d021      	beq.n	8022304 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x560>
 80222c0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80222c2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80222c6:	fb0e f707 	mul.w	r7, lr, r7
 80222ca:	9713      	str	r7, [sp, #76]	; 0x4c
 80222cc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80222ce:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80222d2:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 80222d4:	fb0e fe0c 	mul.w	lr, lr, ip
 80222d8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80222dc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80222e0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80222e4:	44bc      	add	ip, r7
 80222e6:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 80222ea:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 80222ee:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80222f2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80222f6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80222fa:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80222fe:	ea4c 070e 	orr.w	r7, ip, lr
 8022302:	970d      	str	r7, [sp, #52]	; 0x34
 8022304:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022308:	d01e      	beq.n	8022348 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a4>
 802230a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802230c:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8022310:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022314:	fb09 fe0e 	mul.w	lr, r9, lr
 8022318:	fb09 f907 	mul.w	r9, r9, r7
 802231c:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8022320:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8022324:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8022328:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802232c:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8022330:	44f4      	add	ip, lr
 8022332:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022336:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802233a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802233e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022342:	ea4c 0709 	orr.w	r7, ip, r9
 8022346:	9709      	str	r7, [sp, #36]	; 0x24
 8022348:	2eff      	cmp	r6, #255	; 0xff
 802234a:	d01c      	beq.n	8022386 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e2>
 802234c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 802234e:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8022352:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022356:	fb06 fe0e 	mul.w	lr, r6, lr
 802235a:	437e      	muls	r6, r7
 802235c:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8022360:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8022364:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8022368:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802236c:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8022370:	44f4      	add	ip, lr
 8022372:	0a36      	lsrs	r6, r6, #8
 8022374:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022378:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802237c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022380:	ea4c 0606 	orr.w	r6, ip, r6
 8022384:	960f      	str	r6, [sp, #60]	; 0x3c
 8022386:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8022388:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 802238c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022390:	2aff      	cmp	r2, #255	; 0xff
 8022392:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022396:	fb08 f606 	mul.w	r6, r8, r6
 802239a:	fb01 6607 	mla	r6, r1, r7, r6
 802239e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80223a0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80223a4:	fb00 6607 	mla	r6, r0, r7, r6
 80223a8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80223aa:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80223ae:	fb0a 6607 	mla	r6, sl, r7, r6
 80223b2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80223b4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80223b8:	ea4f 2616 	mov.w	r6, r6, lsr #8
 80223bc:	fb08 f807 	mul.w	r8, r8, r7
 80223c0:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80223c4:	fb01 8303 	mla	r3, r1, r3, r8
 80223c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80223ca:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 80223ce:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80223d0:	fb00 330c 	mla	r3, r0, ip, r3
 80223d4:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 80223d8:	fb0a 3e0e 	mla	lr, sl, lr, r3
 80223dc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80223e0:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80223e4:	ea46 060e 	orr.w	r6, r6, lr
 80223e8:	b2f0      	uxtb	r0, r6
 80223ea:	f3c6 2107 	ubfx	r1, r6, #8, #8
 80223ee:	ea4f 4616 	mov.w	r6, r6, lsr #16
 80223f2:	d038      	beq.n	8022466 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c2>
 80223f4:	43d2      	mvns	r2, r2
 80223f6:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 80223fa:	b2d2      	uxtb	r2, r2
 80223fc:	4357      	muls	r7, r2
 80223fe:	1c7b      	adds	r3, r7, #1
 8022400:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8022404:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8022408:	f815 0c02 	ldrb.w	r0, [r5, #-2]
 802240c:	4350      	muls	r0, r2
 802240e:	f805 3c03 	strb.w	r3, [r5, #-3]
 8022412:	1c43      	adds	r3, r0, #1
 8022414:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8022418:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802241c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8022420:	4353      	muls	r3, r2
 8022422:	f805 1c02 	strb.w	r1, [r5, #-2]
 8022426:	1c5a      	adds	r2, r3, #1
 8022428:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802242c:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8022430:	f805 6c01 	strb.w	r6, [r5, #-1]
 8022434:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022436:	3503      	adds	r5, #3
 8022438:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802243a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802243e:	4413      	add	r3, r2
 8022440:	9329      	str	r3, [sp, #164]	; 0xa4
 8022442:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022444:	441c      	add	r4, r3
 8022446:	e510      	b.n	8021e6a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc6>
 8022448:	b150      	cbz	r0, 8022460 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6bc>
 802244a:	990e      	ldr	r1, [sp, #56]	; 0x38
 802244c:	5871      	ldr	r1, [r6, r1]
 802244e:	26ff      	movs	r6, #255	; 0xff
 8022450:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8022454:	9109      	str	r1, [sp, #36]	; 0x24
 8022456:	46b6      	mov	lr, r6
 8022458:	e6f5      	b.n	8022246 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 802245a:	26ff      	movs	r6, #255	; 0xff
 802245c:	46b1      	mov	r9, r6
 802245e:	e6f2      	b.n	8022246 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8022460:	26ff      	movs	r6, #255	; 0xff
 8022462:	46b1      	mov	r9, r6
 8022464:	e7f7      	b.n	8022456 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b2>
 8022466:	f805 0c03 	strb.w	r0, [r5, #-3]
 802246a:	f805 1c02 	strb.w	r1, [r5, #-2]
 802246e:	e7df      	b.n	8022430 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68c>
 8022470:	b017      	add	sp, #92	; 0x5c
 8022472:	ecbd 8b08 	vpop	{d8-d11}
 8022476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0802247c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 802247c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022480:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8022484:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8022488:	2800      	cmp	r0, #0
 802248a:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 802248e:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8022492:	fb0c 0e03 	mla	lr, ip, r3, r0
 8022496:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 802249a:	db6b      	blt.n	8022574 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 802249c:	4580      	cmp	r8, r0
 802249e:	dd69      	ble.n	8022574 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 80224a0:	f1bc 0f00 	cmp.w	ip, #0
 80224a4:	db66      	blt.n	8022574 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 80224a6:	45e1      	cmp	r9, ip
 80224a8:	dd64      	ble.n	8022574 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 80224aa:	ea4f 045e 	mov.w	r4, lr, lsr #1
 80224ae:	f01e 0f01 	tst.w	lr, #1
 80224b2:	5d16      	ldrb	r6, [r2, r4]
 80224b4:	bf0c      	ite	eq
 80224b6:	f006 060f 	andeq.w	r6, r6, #15
 80224ba:	1136      	asrne	r6, r6, #4
 80224bc:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80224c0:	b2f6      	uxtb	r6, r6
 80224c2:	f110 0a01 	adds.w	sl, r0, #1
 80224c6:	d457      	bmi.n	8022578 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 80224c8:	45d0      	cmp	r8, sl
 80224ca:	dd55      	ble.n	8022578 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 80224cc:	f1bc 0f00 	cmp.w	ip, #0
 80224d0:	db52      	blt.n	8022578 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 80224d2:	45e1      	cmp	r9, ip
 80224d4:	dd50      	ble.n	8022578 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 80224d6:	2f00      	cmp	r7, #0
 80224d8:	f000 80ac 	beq.w	8022634 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 80224dc:	f10e 0b01 	add.w	fp, lr, #1
 80224e0:	ea4f 045b 	mov.w	r4, fp, lsr #1
 80224e4:	f01b 0f01 	tst.w	fp, #1
 80224e8:	5d14      	ldrb	r4, [r2, r4]
 80224ea:	bf0c      	ite	eq
 80224ec:	f004 040f 	andeq.w	r4, r4, #15
 80224f0:	1124      	asrne	r4, r4, #4
 80224f2:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80224f6:	b2e4      	uxtb	r4, r4
 80224f8:	2d00      	cmp	r5, #0
 80224fa:	f000 8096 	beq.w	802262a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 80224fe:	2800      	cmp	r0, #0
 8022500:	f10c 0c01 	add.w	ip, ip, #1
 8022504:	db3c      	blt.n	8022580 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8022506:	4580      	cmp	r8, r0
 8022508:	dd3a      	ble.n	8022580 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 802250a:	f1bc 0f00 	cmp.w	ip, #0
 802250e:	db37      	blt.n	8022580 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8022510:	45e1      	cmp	r9, ip
 8022512:	dd35      	ble.n	8022580 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8022514:	eb03 0b0e 	add.w	fp, r3, lr
 8022518:	ea4f 005b 	mov.w	r0, fp, lsr #1
 802251c:	f01b 0f01 	tst.w	fp, #1
 8022520:	5c10      	ldrb	r0, [r2, r0]
 8022522:	bf0c      	ite	eq
 8022524:	f000 000f 	andeq.w	r0, r0, #15
 8022528:	1100      	asrne	r0, r0, #4
 802252a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802252e:	b2c0      	uxtb	r0, r0
 8022530:	f1ba 0f00 	cmp.w	sl, #0
 8022534:	db26      	blt.n	8022584 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8022536:	45d0      	cmp	r8, sl
 8022538:	dd24      	ble.n	8022584 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 802253a:	f1bc 0f00 	cmp.w	ip, #0
 802253e:	db21      	blt.n	8022584 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8022540:	45e1      	cmp	r9, ip
 8022542:	dd1f      	ble.n	8022584 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8022544:	b307      	cbz	r7, 8022588 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 8022546:	3301      	adds	r3, #1
 8022548:	449e      	add	lr, r3
 802254a:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802254e:	f01e 0f01 	tst.w	lr, #1
 8022552:	5cd3      	ldrb	r3, [r2, r3]
 8022554:	bf0c      	ite	eq
 8022556:	f003 030f 	andeq.w	r3, r3, #15
 802255a:	111b      	asrne	r3, r3, #4
 802255c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022560:	b2db      	uxtb	r3, r3
 8022562:	2f0f      	cmp	r7, #15
 8022564:	d911      	bls.n	802258a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 8022566:	4b35      	ldr	r3, [pc, #212]	; (802263c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 8022568:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 802256c:	4a34      	ldr	r2, [pc, #208]	; (8022640 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 802256e:	4835      	ldr	r0, [pc, #212]	; (8022644 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 8022570:	f002 fb5a 	bl	8024c28 <__assert_func>
 8022574:	2600      	movs	r6, #0
 8022576:	e7a4      	b.n	80224c2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 8022578:	2400      	movs	r4, #0
 802257a:	e7bd      	b.n	80224f8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 802257c:	463c      	mov	r4, r7
 802257e:	e7be      	b.n	80224fe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 8022580:	2000      	movs	r0, #0
 8022582:	e7d5      	b.n	8022530 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 8022584:	2300      	movs	r3, #0
 8022586:	e7ec      	b.n	8022562 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 8022588:	463b      	mov	r3, r7
 802258a:	2d0f      	cmp	r5, #15
 802258c:	d8eb      	bhi.n	8022566 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 802258e:	b2bf      	uxth	r7, r7
 8022590:	b2ad      	uxth	r5, r5
 8022592:	fb07 f205 	mul.w	r2, r7, r5
 8022596:	013f      	lsls	r7, r7, #4
 8022598:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 802259c:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 80225a0:	1abf      	subs	r7, r7, r2
 80225a2:	b2ad      	uxth	r5, r5
 80225a4:	b2bf      	uxth	r7, r7
 80225a6:	ebac 0c05 	sub.w	ip, ip, r5
 80225aa:	437c      	muls	r4, r7
 80225ac:	fa1f fc8c 	uxth.w	ip, ip
 80225b0:	fb06 440c 	mla	r4, r6, ip, r4
 80225b4:	fb05 4400 	mla	r4, r5, r0, r4
 80225b8:	fb02 4203 	mla	r2, r2, r3, r4
 80225bc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80225c0:	b38a      	cbz	r2, 8022626 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 80225c2:	4b21      	ldr	r3, [pc, #132]	; (8022648 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 80225c4:	681c      	ldr	r4, [r3, #0]
 80225c6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80225ca:	b2e5      	uxtb	r5, r4
 80225cc:	4353      	muls	r3, r2
 80225ce:	1c5a      	adds	r2, r3, #1
 80225d0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80225d4:	1212      	asrs	r2, r2, #8
 80225d6:	b290      	uxth	r0, r2
 80225d8:	43d2      	mvns	r2, r2
 80225da:	fb15 f500 	smulbb	r5, r5, r0
 80225de:	b2d3      	uxtb	r3, r2
 80225e0:	780a      	ldrb	r2, [r1, #0]
 80225e2:	fb02 5203 	mla	r2, r2, r3, r5
 80225e6:	b292      	uxth	r2, r2
 80225e8:	1c55      	adds	r5, r2, #1
 80225ea:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 80225ee:	784d      	ldrb	r5, [r1, #1]
 80225f0:	fb15 f503 	smulbb	r5, r5, r3
 80225f4:	1212      	asrs	r2, r2, #8
 80225f6:	700a      	strb	r2, [r1, #0]
 80225f8:	f3c4 2207 	ubfx	r2, r4, #8, #8
 80225fc:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8022600:	fb02 5200 	mla	r2, r2, r0, r5
 8022604:	b292      	uxth	r2, r2
 8022606:	1c55      	adds	r5, r2, #1
 8022608:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 802260c:	1212      	asrs	r2, r2, #8
 802260e:	704a      	strb	r2, [r1, #1]
 8022610:	788a      	ldrb	r2, [r1, #2]
 8022612:	fb12 f303 	smulbb	r3, r2, r3
 8022616:	fb04 3300 	mla	r3, r4, r0, r3
 802261a:	b29b      	uxth	r3, r3
 802261c:	1c5a      	adds	r2, r3, #1
 802261e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022622:	121b      	asrs	r3, r3, #8
 8022624:	708b      	strb	r3, [r1, #2]
 8022626:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802262a:	2f0f      	cmp	r7, #15
 802262c:	d89b      	bhi.n	8022566 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 802262e:	462b      	mov	r3, r5
 8022630:	4628      	mov	r0, r5
 8022632:	e7ac      	b.n	802258e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 8022634:	2d00      	cmp	r5, #0
 8022636:	d1a1      	bne.n	802257c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 8022638:	462c      	mov	r4, r5
 802263a:	e7f8      	b.n	802262e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 802263c:	08029617 	.word	0x08029617
 8022640:	08029b0e 	.word	0x08029b0e
 8022644:	080296e0 	.word	0x080296e0
 8022648:	2000bca4 	.word	0x2000bca4

0802264c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802264c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022650:	ed2d 8b08 	vpush	{d8-d11}
 8022654:	b097      	sub	sp, #92	; 0x5c
 8022656:	eeb0 aa40 	vmov.f32	s20, s0
 802265a:	eef0 9a60 	vmov.f32	s19, s1
 802265e:	9308      	str	r3, [sp, #32]
 8022660:	eeb0 9a41 	vmov.f32	s18, s2
 8022664:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8022668:	eeb0 8a62 	vmov.f32	s16, s5
 802266c:	9214      	str	r2, [sp, #80]	; 0x50
 802266e:	eef0 8a43 	vmov.f32	s17, s6
 8022672:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8022674:	eef0 ba44 	vmov.f32	s23, s8
 8022678:	9309      	str	r3, [sp, #36]	; 0x24
 802267a:	eeb0 ba64 	vmov.f32	s22, s9
 802267e:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8022682:	eef0 aa45 	vmov.f32	s21, s10
 8022686:	9015      	str	r0, [sp, #84]	; 0x54
 8022688:	910c      	str	r1, [sp, #48]	; 0x30
 802268a:	930e      	str	r3, [sp, #56]	; 0x38
 802268c:	6850      	ldr	r0, [r2, #4]
 802268e:	f9bd b0c0 	ldrsh.w	fp, [sp, #192]	; 0xc0
 8022692:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8022696:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 802269a:	fb00 1803 	mla	r8, r0, r3, r1
 802269e:	6813      	ldr	r3, [r2, #0]
 80226a0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80226a4:	4498      	add	r8, r3
 80226a6:	f10b 0301 	add.w	r3, fp, #1
 80226aa:	f023 0301 	bic.w	r3, r3, #1
 80226ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80226b0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80226b2:	681f      	ldr	r7, [r3, #0]
 80226b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80226b6:	2b00      	cmp	r3, #0
 80226b8:	dc03      	bgt.n	80226c2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 80226ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80226bc:	2b00      	cmp	r3, #0
 80226be:	f340 8238 	ble.w	8022b32 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 80226c2:	9b08      	ldr	r3, [sp, #32]
 80226c4:	2b00      	cmp	r3, #0
 80226c6:	f340 810c 	ble.w	80228e2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 80226ca:	142a      	asrs	r2, r5, #16
 80226cc:	ea4f 4326 	mov.w	r3, r6, asr #16
 80226d0:	d42c      	bmi.n	802272c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 80226d2:	1c51      	adds	r1, r2, #1
 80226d4:	458b      	cmp	fp, r1
 80226d6:	dd2c      	ble.n	8022732 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80226d8:	2b00      	cmp	r3, #0
 80226da:	db2a      	blt.n	8022732 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80226dc:	1c59      	adds	r1, r3, #1
 80226de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80226e0:	4288      	cmp	r0, r1
 80226e2:	dd26      	ble.n	8022732 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80226e4:	9b08      	ldr	r3, [sp, #32]
 80226e6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80226e8:	3b01      	subs	r3, #1
 80226ea:	fb02 5203 	mla	r2, r2, r3, r5
 80226ee:	1412      	asrs	r2, r2, #16
 80226f0:	d429      	bmi.n	8022746 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80226f2:	3201      	adds	r2, #1
 80226f4:	4593      	cmp	fp, r2
 80226f6:	dd26      	ble.n	8022746 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80226f8:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80226fa:	fb02 6303 	mla	r3, r2, r3, r6
 80226fe:	141b      	asrs	r3, r3, #16
 8022700:	d421      	bmi.n	8022746 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8022702:	3301      	adds	r3, #1
 8022704:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022706:	429a      	cmp	r2, r3
 8022708:	dd1d      	ble.n	8022746 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 802270a:	f108 0e03 	add.w	lr, r8, #3
 802270e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8022712:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8022716:	f1b9 0f00 	cmp.w	r9, #0
 802271a:	f300 814f 	bgt.w	80229bc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x370>
 802271e:	9b08      	ldr	r3, [sp, #32]
 8022720:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022724:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022728:	44a0      	add	r8, r4
 802272a:	e0dc      	b.n	80228e6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29a>
 802272c:	1c51      	adds	r1, r2, #1
 802272e:	f040 80ce 	bne.w	80228ce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8022732:	4593      	cmp	fp, r2
 8022734:	f340 80cb 	ble.w	80228ce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8022738:	1c5a      	adds	r2, r3, #1
 802273a:	f2c0 80c8 	blt.w	80228ce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 802273e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022740:	4293      	cmp	r3, r2
 8022742:	f280 80c4 	bge.w	80228ce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8022746:	9b08      	ldr	r3, [sp, #32]
 8022748:	46c1      	mov	r9, r8
 802274a:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 802274e:	930d      	str	r3, [sp, #52]	; 0x34
 8022750:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022752:	2b00      	cmp	r3, #0
 8022754:	dde3      	ble.n	802271e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 8022756:	1428      	asrs	r0, r5, #16
 8022758:	f3c5 3203 	ubfx	r2, r5, #12, #4
 802275c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022760:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8022764:	f100 8111 	bmi.w	802298a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33e>
 8022768:	f100 0c01 	add.w	ip, r0, #1
 802276c:	45e3      	cmp	fp, ip
 802276e:	f340 810e 	ble.w	802298e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8022772:	2b00      	cmp	r3, #0
 8022774:	f2c0 810b 	blt.w	802298e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8022778:	f103 0c01 	add.w	ip, r3, #1
 802277c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802277e:	4564      	cmp	r4, ip
 8022780:	f340 8105 	ble.w	802298e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8022784:	fb03 030a 	mla	r3, r3, sl, r0
 8022788:	0858      	lsrs	r0, r3, #1
 802278a:	07dc      	lsls	r4, r3, #31
 802278c:	5c38      	ldrb	r0, [r7, r0]
 802278e:	bf54      	ite	pl
 8022790:	f000 000f 	andpl.w	r0, r0, #15
 8022794:	1100      	asrmi	r0, r0, #4
 8022796:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802279a:	b2c0      	uxtb	r0, r0
 802279c:	2a00      	cmp	r2, #0
 802279e:	f000 80e1 	beq.w	8022964 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x318>
 80227a2:	f103 0e01 	add.w	lr, r3, #1
 80227a6:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 80227aa:	f01e 0f01 	tst.w	lr, #1
 80227ae:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80227b2:	bf0c      	ite	eq
 80227b4:	f00c 0c0f 	andeq.w	ip, ip, #15
 80227b8:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 80227bc:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80227c0:	fa5f f48c 	uxtb.w	r4, ip
 80227c4:	9410      	str	r4, [sp, #64]	; 0x40
 80227c6:	b1f9      	cbz	r1, 8022808 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 80227c8:	4453      	add	r3, sl
 80227ca:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80227ce:	07dc      	lsls	r4, r3, #31
 80227d0:	f103 0301 	add.w	r3, r3, #1
 80227d4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80227d8:	bf54      	ite	pl
 80227da:	f00c 0c0f 	andpl.w	ip, ip, #15
 80227de:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80227e2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80227e6:	fa5f f48c 	uxtb.w	r4, ip
 80227ea:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80227ee:	940a      	str	r4, [sp, #40]	; 0x28
 80227f0:	07dc      	lsls	r4, r3, #31
 80227f2:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80227f6:	bf54      	ite	pl
 80227f8:	f00c 030f 	andpl.w	r3, ip, #15
 80227fc:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8022800:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022804:	b2db      	uxtb	r3, r3
 8022806:	9311      	str	r3, [sp, #68]	; 0x44
 8022808:	b292      	uxth	r2, r2
 802280a:	b289      	uxth	r1, r1
 802280c:	0113      	lsls	r3, r2, #4
 802280e:	fb02 fc01 	mul.w	ip, r2, r1
 8022812:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022814:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8022818:	ebcc 1101 	rsb	r1, ip, r1, lsl #4
 802281c:	eba3 030c 	sub.w	r3, r3, ip
 8022820:	b289      	uxth	r1, r1
 8022822:	b29b      	uxth	r3, r3
 8022824:	ebae 0e01 	sub.w	lr, lr, r1
 8022828:	4353      	muls	r3, r2
 802282a:	fa1f fe8e 	uxth.w	lr, lr
 802282e:	fb00 320e 	mla	r2, r0, lr, r3
 8022832:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022834:	fb01 2203 	mla	r2, r1, r3, r2
 8022838:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802283a:	fb0c 2203 	mla	r2, ip, r3, r2
 802283e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8022842:	2a00      	cmp	r2, #0
 8022844:	d039      	beq.n	80228ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8022846:	4bbd      	ldr	r3, [pc, #756]	; (8022b3c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 8022848:	6819      	ldr	r1, [r3, #0]
 802284a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802284c:	fa5f fc81 	uxtb.w	ip, r1
 8022850:	435a      	muls	r2, r3
 8022852:	1c53      	adds	r3, r2, #1
 8022854:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8022858:	1212      	asrs	r2, r2, #8
 802285a:	b290      	uxth	r0, r2
 802285c:	43d2      	mvns	r2, r2
 802285e:	fb1c fc00 	smulbb	ip, ip, r0
 8022862:	b2d3      	uxtb	r3, r2
 8022864:	f899 2000 	ldrb.w	r2, [r9]
 8022868:	fb02 c203 	mla	r2, r2, r3, ip
 802286c:	b292      	uxth	r2, r2
 802286e:	f102 0c01 	add.w	ip, r2, #1
 8022872:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8022876:	f899 c001 	ldrb.w	ip, [r9, #1]
 802287a:	fb1c fc03 	smulbb	ip, ip, r3
 802287e:	1212      	asrs	r2, r2, #8
 8022880:	f889 2000 	strb.w	r2, [r9]
 8022884:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8022888:	f3c1 4107 	ubfx	r1, r1, #16, #8
 802288c:	fb02 c200 	mla	r2, r2, r0, ip
 8022890:	b292      	uxth	r2, r2
 8022892:	f102 0c01 	add.w	ip, r2, #1
 8022896:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802289a:	1212      	asrs	r2, r2, #8
 802289c:	f889 2001 	strb.w	r2, [r9, #1]
 80228a0:	f899 2002 	ldrb.w	r2, [r9, #2]
 80228a4:	fb12 f303 	smulbb	r3, r2, r3
 80228a8:	fb01 3300 	mla	r3, r1, r0, r3
 80228ac:	b29b      	uxth	r3, r3
 80228ae:	1c5a      	adds	r2, r3, #1
 80228b0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80228b4:	121b      	asrs	r3, r3, #8
 80228b6:	f889 3002 	strb.w	r3, [r9, #2]
 80228ba:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80228bc:	f109 0903 	add.w	r9, r9, #3
 80228c0:	441d      	add	r5, r3
 80228c2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80228c4:	441e      	add	r6, r3
 80228c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80228c8:	3b01      	subs	r3, #1
 80228ca:	930d      	str	r3, [sp, #52]	; 0x34
 80228cc:	e740      	b.n	8022750 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 80228ce:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80228d0:	f108 0803 	add.w	r8, r8, #3
 80228d4:	441d      	add	r5, r3
 80228d6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80228d8:	441e      	add	r6, r3
 80228da:	9b08      	ldr	r3, [sp, #32]
 80228dc:	3b01      	subs	r3, #1
 80228de:	9308      	str	r3, [sp, #32]
 80228e0:	e6ef      	b.n	80226c2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 80228e2:	f47f aeff 	bne.w	80226e4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 80228e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80228e8:	2b00      	cmp	r3, #0
 80228ea:	f340 8122 	ble.w	8022b32 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 80228ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80228f2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80228f4:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80228f8:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80228fc:	eef0 6a48 	vmov.f32	s13, s16
 8022900:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8022904:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022908:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802290c:	ee16 5a90 	vmov	r5, s13
 8022910:	eef0 6a68 	vmov.f32	s13, s17
 8022914:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022918:	ee16 6a90 	vmov	r6, s13
 802291c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022920:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022924:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022928:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802292c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022930:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022934:	ee18 2a10 	vmov	r2, s16
 8022938:	eeb0 8a47 	vmov.f32	s16, s14
 802293c:	fb92 f3f3 	sdiv	r3, r2, r3
 8022940:	ee18 2a90 	vmov	r2, s17
 8022944:	932b      	str	r3, [sp, #172]	; 0xac
 8022946:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022948:	eef0 8a67 	vmov.f32	s17, s15
 802294c:	fb92 f3f3 	sdiv	r3, r2, r3
 8022950:	932c      	str	r3, [sp, #176]	; 0xb0
 8022952:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022954:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022956:	3b01      	subs	r3, #1
 8022958:	930c      	str	r3, [sp, #48]	; 0x30
 802295a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802295c:	bf08      	it	eq
 802295e:	4613      	moveq	r3, r2
 8022960:	9308      	str	r3, [sp, #32]
 8022962:	e6a7      	b.n	80226b4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8022964:	2900      	cmp	r1, #0
 8022966:	f43f af4f 	beq.w	8022808 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 802296a:	4453      	add	r3, sl
 802296c:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022970:	07db      	lsls	r3, r3, #31
 8022972:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022976:	bf54      	ite	pl
 8022978:	f00c 030f 	andpl.w	r3, ip, #15
 802297c:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8022980:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022984:	b2db      	uxtb	r3, r3
 8022986:	930a      	str	r3, [sp, #40]	; 0x28
 8022988:	e73e      	b.n	8022808 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 802298a:	1c44      	adds	r4, r0, #1
 802298c:	d195      	bne.n	80228ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 802298e:	4583      	cmp	fp, r0
 8022990:	dd93      	ble.n	80228ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8022992:	1c5c      	adds	r4, r3, #1
 8022994:	db91      	blt.n	80228ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8022996:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8022998:	429c      	cmp	r4, r3
 802299a:	dd8e      	ble.n	80228ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 802299c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802299e:	9002      	str	r0, [sp, #8]
 80229a0:	9815      	ldr	r0, [sp, #84]	; 0x54
 80229a2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80229a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80229a8:	463a      	mov	r2, r7
 80229aa:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80229ae:	e9cd b300 	strd	fp, r3, [sp]
 80229b2:	4649      	mov	r1, r9
 80229b4:	4653      	mov	r3, sl
 80229b6:	f7ff fd61 	bl	802247c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 80229ba:	e77e      	b.n	80228ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 80229bc:	142a      	asrs	r2, r5, #16
 80229be:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80229c2:	1433      	asrs	r3, r6, #16
 80229c4:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80229c8:	fb0a 2303 	mla	r3, sl, r3, r2
 80229cc:	085a      	lsrs	r2, r3, #1
 80229ce:	07dc      	lsls	r4, r3, #31
 80229d0:	5cba      	ldrb	r2, [r7, r2]
 80229d2:	bf54      	ite	pl
 80229d4:	f002 020f 	andpl.w	r2, r2, #15
 80229d8:	1112      	asrmi	r2, r2, #4
 80229da:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80229de:	b2d2      	uxtb	r2, r2
 80229e0:	2900      	cmp	r1, #0
 80229e2:	f000 8093 	beq.w	8022b0c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c0>
 80229e6:	1c5c      	adds	r4, r3, #1
 80229e8:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 80229ec:	07e4      	lsls	r4, r4, #31
 80229ee:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80229f2:	bf54      	ite	pl
 80229f4:	f00c 0c0f 	andpl.w	ip, ip, #15
 80229f8:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80229fc:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022a00:	fa5f f48c 	uxtb.w	r4, ip
 8022a04:	9412      	str	r4, [sp, #72]	; 0x48
 8022a06:	b300      	cbz	r0, 8022a4a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 8022a08:	4453      	add	r3, sl
 8022a0a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022a0e:	07dc      	lsls	r4, r3, #31
 8022a10:	f103 0301 	add.w	r3, r3, #1
 8022a14:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022a18:	bf54      	ite	pl
 8022a1a:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022a1e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022a22:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022a26:	fa5f f48c 	uxtb.w	r4, ip
 8022a2a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022a2e:	940b      	str	r4, [sp, #44]	; 0x2c
 8022a30:	07dc      	lsls	r4, r3, #31
 8022a32:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022a36:	bf54      	ite	pl
 8022a38:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022a3c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022a40:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022a44:	fa5f f38c 	uxtb.w	r3, ip
 8022a48:	9313      	str	r3, [sp, #76]	; 0x4c
 8022a4a:	b289      	uxth	r1, r1
 8022a4c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022a4e:	b280      	uxth	r0, r0
 8022a50:	fb01 f300 	mul.w	r3, r1, r0
 8022a54:	0109      	lsls	r1, r1, #4
 8022a56:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8022a5a:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8022a5e:	1ac9      	subs	r1, r1, r3
 8022a60:	b280      	uxth	r0, r0
 8022a62:	b289      	uxth	r1, r1
 8022a64:	ebac 0c00 	sub.w	ip, ip, r0
 8022a68:	4361      	muls	r1, r4
 8022a6a:	fa1f fc8c 	uxth.w	ip, ip
 8022a6e:	fb02 120c 	mla	r2, r2, ip, r1
 8022a72:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8022a74:	fb00 2001 	mla	r0, r0, r1, r2
 8022a78:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022a7a:	fb03 0302 	mla	r3, r3, r2, r0
 8022a7e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022a82:	2b00      	cmp	r3, #0
 8022a84:	d039      	beq.n	8022afa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 8022a86:	4a2d      	ldr	r2, [pc, #180]	; (8022b3c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 8022a88:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8022a8c:	6810      	ldr	r0, [r2, #0]
 8022a8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022a90:	fa5f fc80 	uxtb.w	ip, r0
 8022a94:	4353      	muls	r3, r2
 8022a96:	1c5a      	adds	r2, r3, #1
 8022a98:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022a9c:	121b      	asrs	r3, r3, #8
 8022a9e:	b29a      	uxth	r2, r3
 8022aa0:	43db      	mvns	r3, r3
 8022aa2:	fb1c fc02 	smulbb	ip, ip, r2
 8022aa6:	b2db      	uxtb	r3, r3
 8022aa8:	fb01 c103 	mla	r1, r1, r3, ip
 8022aac:	b289      	uxth	r1, r1
 8022aae:	f101 0c01 	add.w	ip, r1, #1
 8022ab2:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8022ab6:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 8022aba:	fb1c fc03 	smulbb	ip, ip, r3
 8022abe:	1209      	asrs	r1, r1, #8
 8022ac0:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8022ac4:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8022ac8:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8022acc:	fb01 c102 	mla	r1, r1, r2, ip
 8022ad0:	b289      	uxth	r1, r1
 8022ad2:	f101 0c01 	add.w	ip, r1, #1
 8022ad6:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8022ada:	1209      	asrs	r1, r1, #8
 8022adc:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8022ae0:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8022ae4:	fb11 f303 	smulbb	r3, r1, r3
 8022ae8:	fb00 3002 	mla	r0, r0, r2, r3
 8022aec:	b280      	uxth	r0, r0
 8022aee:	1c42      	adds	r2, r0, #1
 8022af0:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8022af4:	1200      	asrs	r0, r0, #8
 8022af6:	f80e 0c01 	strb.w	r0, [lr, #-1]
 8022afa:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8022afc:	f10e 0e03 	add.w	lr, lr, #3
 8022b00:	f109 39ff 	add.w	r9, r9, #4294967295
 8022b04:	441d      	add	r5, r3
 8022b06:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022b08:	441e      	add	r6, r3
 8022b0a:	e604      	b.n	8022716 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 8022b0c:	2800      	cmp	r0, #0
 8022b0e:	d09c      	beq.n	8022a4a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 8022b10:	4453      	add	r3, sl
 8022b12:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022b16:	07db      	lsls	r3, r3, #31
 8022b18:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022b1c:	bf54      	ite	pl
 8022b1e:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022b22:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022b26:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022b2a:	fa5f f38c 	uxtb.w	r3, ip
 8022b2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8022b30:	e78b      	b.n	8022a4a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 8022b32:	b017      	add	sp, #92	; 0x5c
 8022b34:	ecbd 8b08 	vpop	{d8-d11}
 8022b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022b3c:	2000bca4 	.word	0x2000bca4

08022b40 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8022b40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b44:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8022b48:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8022b4c:	2800      	cmp	r0, #0
 8022b4e:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8022b52:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8022b56:	fb0c 0e03 	mla	lr, ip, r3, r0
 8022b5a:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8022b5e:	db6b      	blt.n	8022c38 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8022b60:	4580      	cmp	r8, r0
 8022b62:	dd69      	ble.n	8022c38 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8022b64:	f1bc 0f00 	cmp.w	ip, #0
 8022b68:	db66      	blt.n	8022c38 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8022b6a:	45e1      	cmp	r9, ip
 8022b6c:	dd64      	ble.n	8022c38 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8022b6e:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8022b72:	f01e 0f01 	tst.w	lr, #1
 8022b76:	5d16      	ldrb	r6, [r2, r4]
 8022b78:	bf0c      	ite	eq
 8022b7a:	f006 060f 	andeq.w	r6, r6, #15
 8022b7e:	1136      	asrne	r6, r6, #4
 8022b80:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8022b84:	b2f6      	uxtb	r6, r6
 8022b86:	f110 0a01 	adds.w	sl, r0, #1
 8022b8a:	d457      	bmi.n	8022c3c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8022b8c:	45d0      	cmp	r8, sl
 8022b8e:	dd55      	ble.n	8022c3c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8022b90:	f1bc 0f00 	cmp.w	ip, #0
 8022b94:	db52      	blt.n	8022c3c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8022b96:	45e1      	cmp	r9, ip
 8022b98:	dd50      	ble.n	8022c3c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8022b9a:	2f00      	cmp	r7, #0
 8022b9c:	f000 80a5 	beq.w	8022cea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 8022ba0:	f10e 0b01 	add.w	fp, lr, #1
 8022ba4:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8022ba8:	f01b 0f01 	tst.w	fp, #1
 8022bac:	5d14      	ldrb	r4, [r2, r4]
 8022bae:	bf0c      	ite	eq
 8022bb0:	f004 040f 	andeq.w	r4, r4, #15
 8022bb4:	1124      	asrne	r4, r4, #4
 8022bb6:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8022bba:	b2e4      	uxtb	r4, r4
 8022bbc:	2d00      	cmp	r5, #0
 8022bbe:	f000 808f 	beq.w	8022ce0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 8022bc2:	2800      	cmp	r0, #0
 8022bc4:	f10c 0c01 	add.w	ip, ip, #1
 8022bc8:	db3c      	blt.n	8022c44 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8022bca:	4580      	cmp	r8, r0
 8022bcc:	dd3a      	ble.n	8022c44 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8022bce:	f1bc 0f00 	cmp.w	ip, #0
 8022bd2:	db37      	blt.n	8022c44 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8022bd4:	45e1      	cmp	r9, ip
 8022bd6:	dd35      	ble.n	8022c44 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8022bd8:	eb03 0b0e 	add.w	fp, r3, lr
 8022bdc:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8022be0:	f01b 0f01 	tst.w	fp, #1
 8022be4:	5c10      	ldrb	r0, [r2, r0]
 8022be6:	bf0c      	ite	eq
 8022be8:	f000 000f 	andeq.w	r0, r0, #15
 8022bec:	1100      	asrne	r0, r0, #4
 8022bee:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022bf2:	b2c0      	uxtb	r0, r0
 8022bf4:	f1ba 0f00 	cmp.w	sl, #0
 8022bf8:	db26      	blt.n	8022c48 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8022bfa:	45d0      	cmp	r8, sl
 8022bfc:	dd24      	ble.n	8022c48 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8022bfe:	f1bc 0f00 	cmp.w	ip, #0
 8022c02:	db21      	blt.n	8022c48 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8022c04:	45e1      	cmp	r9, ip
 8022c06:	dd1f      	ble.n	8022c48 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8022c08:	b307      	cbz	r7, 8022c4c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 8022c0a:	3301      	adds	r3, #1
 8022c0c:	449e      	add	lr, r3
 8022c0e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8022c12:	f01e 0f01 	tst.w	lr, #1
 8022c16:	5cd3      	ldrb	r3, [r2, r3]
 8022c18:	bf0c      	ite	eq
 8022c1a:	f003 030f 	andeq.w	r3, r3, #15
 8022c1e:	111b      	asrne	r3, r3, #4
 8022c20:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022c24:	b2db      	uxtb	r3, r3
 8022c26:	2f0f      	cmp	r7, #15
 8022c28:	d911      	bls.n	8022c4e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 8022c2a:	4b32      	ldr	r3, [pc, #200]	; (8022cf4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 8022c2c:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8022c30:	4a31      	ldr	r2, [pc, #196]	; (8022cf8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 8022c32:	4832      	ldr	r0, [pc, #200]	; (8022cfc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 8022c34:	f001 fff8 	bl	8024c28 <__assert_func>
 8022c38:	2600      	movs	r6, #0
 8022c3a:	e7a4      	b.n	8022b86 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 8022c3c:	2400      	movs	r4, #0
 8022c3e:	e7bd      	b.n	8022bbc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 8022c40:	463c      	mov	r4, r7
 8022c42:	e7be      	b.n	8022bc2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 8022c44:	2000      	movs	r0, #0
 8022c46:	e7d5      	b.n	8022bf4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 8022c48:	2300      	movs	r3, #0
 8022c4a:	e7ec      	b.n	8022c26 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 8022c4c:	463b      	mov	r3, r7
 8022c4e:	2d0f      	cmp	r5, #15
 8022c50:	d8eb      	bhi.n	8022c2a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8022c52:	b2bf      	uxth	r7, r7
 8022c54:	b2ad      	uxth	r5, r5
 8022c56:	fb07 f205 	mul.w	r2, r7, r5
 8022c5a:	013f      	lsls	r7, r7, #4
 8022c5c:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8022c60:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8022c64:	1abf      	subs	r7, r7, r2
 8022c66:	b2ad      	uxth	r5, r5
 8022c68:	b2bf      	uxth	r7, r7
 8022c6a:	ebac 0c05 	sub.w	ip, ip, r5
 8022c6e:	437c      	muls	r4, r7
 8022c70:	fa1f fc8c 	uxth.w	ip, ip
 8022c74:	fb06 440c 	mla	r4, r6, ip, r4
 8022c78:	fb05 4400 	mla	r4, r5, r0, r4
 8022c7c:	fb02 4303 	mla	r3, r2, r3, r4
 8022c80:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022c84:	b353      	cbz	r3, 8022cdc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 8022c86:	4a1e      	ldr	r2, [pc, #120]	; (8022d00 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 8022c88:	7808      	ldrb	r0, [r1, #0]
 8022c8a:	6814      	ldr	r4, [r2, #0]
 8022c8c:	b29a      	uxth	r2, r3
 8022c8e:	43db      	mvns	r3, r3
 8022c90:	b2e5      	uxtb	r5, r4
 8022c92:	b2db      	uxtb	r3, r3
 8022c94:	fb15 f502 	smulbb	r5, r5, r2
 8022c98:	fb00 5003 	mla	r0, r0, r3, r5
 8022c9c:	b280      	uxth	r0, r0
 8022c9e:	1c45      	adds	r5, r0, #1
 8022ca0:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8022ca4:	784d      	ldrb	r5, [r1, #1]
 8022ca6:	fb15 f503 	smulbb	r5, r5, r3
 8022caa:	1200      	asrs	r0, r0, #8
 8022cac:	7008      	strb	r0, [r1, #0]
 8022cae:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8022cb2:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8022cb6:	fb00 5002 	mla	r0, r0, r2, r5
 8022cba:	b280      	uxth	r0, r0
 8022cbc:	1c45      	adds	r5, r0, #1
 8022cbe:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8022cc2:	1200      	asrs	r0, r0, #8
 8022cc4:	7048      	strb	r0, [r1, #1]
 8022cc6:	7888      	ldrb	r0, [r1, #2]
 8022cc8:	fb10 f303 	smulbb	r3, r0, r3
 8022ccc:	fb04 3202 	mla	r2, r4, r2, r3
 8022cd0:	b292      	uxth	r2, r2
 8022cd2:	1c53      	adds	r3, r2, #1
 8022cd4:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8022cd8:	1212      	asrs	r2, r2, #8
 8022cda:	708a      	strb	r2, [r1, #2]
 8022cdc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022ce0:	2f0f      	cmp	r7, #15
 8022ce2:	d8a2      	bhi.n	8022c2a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8022ce4:	462b      	mov	r3, r5
 8022ce6:	4628      	mov	r0, r5
 8022ce8:	e7b3      	b.n	8022c52 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 8022cea:	2d00      	cmp	r5, #0
 8022cec:	d1a8      	bne.n	8022c40 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 8022cee:	462c      	mov	r4, r5
 8022cf0:	e7f8      	b.n	8022ce4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 8022cf2:	bf00      	nop
 8022cf4:	08029617 	.word	0x08029617
 8022cf8:	08029b0e 	.word	0x08029b0e
 8022cfc:	080296e0 	.word	0x080296e0
 8022d00:	2000bca4 	.word	0x2000bca4

08022d04 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8022d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d08:	ed2d 8b08 	vpush	{d8-d11}
 8022d0c:	b095      	sub	sp, #84	; 0x54
 8022d0e:	461c      	mov	r4, r3
 8022d10:	eeb0 aa40 	vmov.f32	s20, s0
 8022d14:	f9bd 30b8 	ldrsh.w	r3, [sp, #184]	; 0xb8
 8022d18:	eef0 9a60 	vmov.f32	s19, s1
 8022d1c:	920e      	str	r2, [sp, #56]	; 0x38
 8022d1e:	eeb0 9a41 	vmov.f32	s18, s2
 8022d22:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022d24:	eeb0 8a62 	vmov.f32	s16, s5
 8022d28:	9307      	str	r3, [sp, #28]
 8022d2a:	eef0 8a43 	vmov.f32	s17, s6
 8022d2e:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 8022d32:	eef0 ba44 	vmov.f32	s23, s8
 8022d36:	9013      	str	r0, [sp, #76]	; 0x4c
 8022d38:	eeb0 ba64 	vmov.f32	s22, s9
 8022d3c:	9109      	str	r1, [sp, #36]	; 0x24
 8022d3e:	eef0 aa45 	vmov.f32	s21, s10
 8022d42:	9308      	str	r3, [sp, #32]
 8022d44:	6850      	ldr	r0, [r2, #4]
 8022d46:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8022d4a:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 8022d4e:	fb00 1803 	mla	r8, r0, r3, r1
 8022d52:	6813      	ldr	r3, [r2, #0]
 8022d54:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8022d58:	4498      	add	r8, r3
 8022d5a:	9b07      	ldr	r3, [sp, #28]
 8022d5c:	3301      	adds	r3, #1
 8022d5e:	f023 0301 	bic.w	r3, r3, #1
 8022d62:	930b      	str	r3, [sp, #44]	; 0x2c
 8022d64:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022d66:	681f      	ldr	r7, [r3, #0]
 8022d68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022d6a:	2b00      	cmp	r3, #0
 8022d6c:	dc03      	bgt.n	8022d76 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8022d6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022d70:	2b00      	cmp	r3, #0
 8022d72:	f340 8238 	ble.w	80231e6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 8022d76:	2c00      	cmp	r4, #0
 8022d78:	f340 8109 	ble.w	8022f8e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 8022d7c:	142a      	asrs	r2, r5, #16
 8022d7e:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022d82:	d42b      	bmi.n	8022ddc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8022d84:	1c51      	adds	r1, r2, #1
 8022d86:	9807      	ldr	r0, [sp, #28]
 8022d88:	4288      	cmp	r0, r1
 8022d8a:	dd2a      	ble.n	8022de2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8022d8c:	2b00      	cmp	r3, #0
 8022d8e:	db28      	blt.n	8022de2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8022d90:	1c59      	adds	r1, r3, #1
 8022d92:	9808      	ldr	r0, [sp, #32]
 8022d94:	4288      	cmp	r0, r1
 8022d96:	dd24      	ble.n	8022de2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8022d98:	1e63      	subs	r3, r4, #1
 8022d9a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8022d9c:	fb02 5203 	mla	r2, r2, r3, r5
 8022da0:	1412      	asrs	r2, r2, #16
 8022da2:	d429      	bmi.n	8022df8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8022da4:	3201      	adds	r2, #1
 8022da6:	9907      	ldr	r1, [sp, #28]
 8022da8:	4291      	cmp	r1, r2
 8022daa:	dd25      	ble.n	8022df8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8022dac:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8022dae:	fb02 6303 	mla	r3, r2, r3, r6
 8022db2:	141b      	asrs	r3, r3, #16
 8022db4:	d420      	bmi.n	8022df8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8022db6:	3301      	adds	r3, #1
 8022db8:	9a08      	ldr	r2, [sp, #32]
 8022dba:	429a      	cmp	r2, r3
 8022dbc:	dd1c      	ble.n	8022df8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8022dbe:	f108 0e03 	add.w	lr, r8, #3
 8022dc2:	46a1      	mov	r9, r4
 8022dc4:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 8022dc8:	f1b9 0f00 	cmp.w	r9, #0
 8022dcc:	f300 8155 	bgt.w	802307a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x376>
 8022dd0:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8022dd4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022dd8:	44a0      	add	r8, r4
 8022dda:	e0da      	b.n	8022f92 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8022ddc:	1c50      	adds	r0, r2, #1
 8022dde:	f040 80ce 	bne.w	8022f7e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8022de2:	9907      	ldr	r1, [sp, #28]
 8022de4:	4291      	cmp	r1, r2
 8022de6:	f340 80ca 	ble.w	8022f7e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8022dea:	1c59      	adds	r1, r3, #1
 8022dec:	f2c0 80c7 	blt.w	8022f7e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8022df0:	9a08      	ldr	r2, [sp, #32]
 8022df2:	4293      	cmp	r3, r2
 8022df4:	f280 80c3 	bge.w	8022f7e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8022df8:	46a3      	mov	fp, r4
 8022dfa:	46c1      	mov	r9, r8
 8022dfc:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 8022e00:	f1bb 0f00 	cmp.w	fp, #0
 8022e04:	dde4      	ble.n	8022dd0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 8022e06:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8022e0a:	1428      	asrs	r0, r5, #16
 8022e0c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022e10:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8022e14:	920a      	str	r2, [sp, #40]	; 0x28
 8022e16:	f100 8116 	bmi.w	8023046 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8022e1a:	f100 0c01 	add.w	ip, r0, #1
 8022e1e:	9a07      	ldr	r2, [sp, #28]
 8022e20:	4562      	cmp	r2, ip
 8022e22:	f340 8112 	ble.w	802304a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8022e26:	2b00      	cmp	r3, #0
 8022e28:	f2c0 810f 	blt.w	802304a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8022e2c:	f103 0c01 	add.w	ip, r3, #1
 8022e30:	9a08      	ldr	r2, [sp, #32]
 8022e32:	4562      	cmp	r2, ip
 8022e34:	f340 8109 	ble.w	802304a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8022e38:	fb03 030a 	mla	r3, r3, sl, r0
 8022e3c:	0858      	lsrs	r0, r3, #1
 8022e3e:	07da      	lsls	r2, r3, #31
 8022e40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022e42:	5c38      	ldrb	r0, [r7, r0]
 8022e44:	bf54      	ite	pl
 8022e46:	f000 000f 	andpl.w	r0, r0, #15
 8022e4a:	1100      	asrmi	r0, r0, #4
 8022e4c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022e50:	b2c0      	uxtb	r0, r0
 8022e52:	2a00      	cmp	r2, #0
 8022e54:	f000 80dd 	beq.w	8023012 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30e>
 8022e58:	f103 0e01 	add.w	lr, r3, #1
 8022e5c:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8022e60:	f01e 0f01 	tst.w	lr, #1
 8022e64:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022e68:	bf0c      	ite	eq
 8022e6a:	f00c 0c0f 	andeq.w	ip, ip, #15
 8022e6e:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8022e72:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022e76:	fa5f fc8c 	uxtb.w	ip, ip
 8022e7a:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8022e7e:	b301      	cbz	r1, 8022ec2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8022e80:	4453      	add	r3, sl
 8022e82:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022e86:	07da      	lsls	r2, r3, #31
 8022e88:	f103 0301 	add.w	r3, r3, #1
 8022e8c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022e90:	bf54      	ite	pl
 8022e92:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022e96:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022e9a:	07da      	lsls	r2, r3, #31
 8022e9c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022ea0:	fa5f fc8c 	uxtb.w	ip, ip
 8022ea4:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8022ea8:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022eac:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022eb0:	bf54      	ite	pl
 8022eb2:	f00c 030f 	andpl.w	r3, ip, #15
 8022eb6:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8022eba:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022ebe:	b2db      	uxtb	r3, r3
 8022ec0:	9310      	str	r3, [sp, #64]	; 0x40
 8022ec2:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8022ec6:	b289      	uxth	r1, r1
 8022ec8:	fb02 f301 	mul.w	r3, r2, r1
 8022ecc:	0112      	lsls	r2, r2, #4
 8022ece:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8022ed2:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 8022ed6:	1ad2      	subs	r2, r2, r3
 8022ed8:	fa1f fe81 	uxth.w	lr, r1
 8022edc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8022ede:	b292      	uxth	r2, r2
 8022ee0:	ebac 0c0e 	sub.w	ip, ip, lr
 8022ee4:	434a      	muls	r2, r1
 8022ee6:	fa1f fc8c 	uxth.w	ip, ip
 8022eea:	fb00 200c 	mla	r0, r0, ip, r2
 8022eee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022ef0:	fb0e 0002 	mla	r0, lr, r2, r0
 8022ef4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022ef6:	fb03 0002 	mla	r0, r3, r2, r0
 8022efa:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8022efe:	b3a8      	cbz	r0, 8022f6c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8022f00:	4bbb      	ldr	r3, [pc, #748]	; (80231f0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 8022f02:	28ff      	cmp	r0, #255	; 0xff
 8022f04:	681b      	ldr	r3, [r3, #0]
 8022f06:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 8022f0a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8022f0e:	b2db      	uxtb	r3, r3
 8022f10:	f000 8092 	beq.w	8023038 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x334>
 8022f14:	b282      	uxth	r2, r0
 8022f16:	43c0      	mvns	r0, r0
 8022f18:	f899 e000 	ldrb.w	lr, [r9]
 8022f1c:	fb13 f302 	smulbb	r3, r3, r2
 8022f20:	b2c0      	uxtb	r0, r0
 8022f22:	fb11 f102 	smulbb	r1, r1, r2
 8022f26:	fb0e 3300 	mla	r3, lr, r0, r3
 8022f2a:	fb1c f202 	smulbb	r2, ip, r2
 8022f2e:	b29b      	uxth	r3, r3
 8022f30:	f103 0e01 	add.w	lr, r3, #1
 8022f34:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8022f38:	121b      	asrs	r3, r3, #8
 8022f3a:	f889 3000 	strb.w	r3, [r9]
 8022f3e:	f899 3001 	ldrb.w	r3, [r9, #1]
 8022f42:	fb03 1100 	mla	r1, r3, r0, r1
 8022f46:	b289      	uxth	r1, r1
 8022f48:	1c4b      	adds	r3, r1, #1
 8022f4a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8022f4e:	f899 3002 	ldrb.w	r3, [r9, #2]
 8022f52:	fb03 2000 	mla	r0, r3, r0, r2
 8022f56:	1209      	asrs	r1, r1, #8
 8022f58:	b280      	uxth	r0, r0
 8022f5a:	f889 1001 	strb.w	r1, [r9, #1]
 8022f5e:	f100 0c01 	add.w	ip, r0, #1
 8022f62:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 8022f66:	1200      	asrs	r0, r0, #8
 8022f68:	f889 0002 	strb.w	r0, [r9, #2]
 8022f6c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022f6e:	f109 0903 	add.w	r9, r9, #3
 8022f72:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022f76:	441d      	add	r5, r3
 8022f78:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022f7a:	441e      	add	r6, r3
 8022f7c:	e740      	b.n	8022e00 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8022f7e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022f80:	3c01      	subs	r4, #1
 8022f82:	f108 0803 	add.w	r8, r8, #3
 8022f86:	441d      	add	r5, r3
 8022f88:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022f8a:	441e      	add	r6, r3
 8022f8c:	e6f3      	b.n	8022d76 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8022f8e:	f47f af03 	bne.w	8022d98 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8022f92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022f94:	2b00      	cmp	r3, #0
 8022f96:	f340 8126 	ble.w	80231e6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 8022f9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022f9e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022fa0:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022fa4:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022fa8:	eef0 6a48 	vmov.f32	s13, s16
 8022fac:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8022fb0:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022fb4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022fb8:	ee16 5a90 	vmov	r5, s13
 8022fbc:	eef0 6a68 	vmov.f32	s13, s17
 8022fc0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022fc4:	ee16 6a90 	vmov	r6, s13
 8022fc8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022fcc:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022fd0:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022fd4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022fd8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022fdc:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022fe0:	ee18 2a10 	vmov	r2, s16
 8022fe4:	eeb0 8a47 	vmov.f32	s16, s14
 8022fe8:	fb92 f3f3 	sdiv	r3, r2, r3
 8022fec:	ee18 2a90 	vmov	r2, s17
 8022ff0:	9329      	str	r3, [sp, #164]	; 0xa4
 8022ff2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022ff4:	eef0 8a67 	vmov.f32	s17, s15
 8022ff8:	fb92 f3f3 	sdiv	r3, r2, r3
 8022ffc:	932a      	str	r3, [sp, #168]	; 0xa8
 8022ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023000:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023002:	3b01      	subs	r3, #1
 8023004:	9309      	str	r3, [sp, #36]	; 0x24
 8023006:	bf08      	it	eq
 8023008:	4614      	moveq	r4, r2
 802300a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802300c:	bf18      	it	ne
 802300e:	461c      	movne	r4, r3
 8023010:	e6aa      	b.n	8022d68 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8023012:	2900      	cmp	r1, #0
 8023014:	f43f af55 	beq.w	8022ec2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8023018:	4453      	add	r3, sl
 802301a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802301e:	07db      	lsls	r3, r3, #31
 8023020:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023024:	bf54      	ite	pl
 8023026:	f00c 030f 	andpl.w	r3, ip, #15
 802302a:	ea4f 132c 	movmi.w	r3, ip, asr #4
 802302e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023032:	b2db      	uxtb	r3, r3
 8023034:	930c      	str	r3, [sp, #48]	; 0x30
 8023036:	e744      	b.n	8022ec2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8023038:	f889 3000 	strb.w	r3, [r9]
 802303c:	f889 1001 	strb.w	r1, [r9, #1]
 8023040:	f889 c002 	strb.w	ip, [r9, #2]
 8023044:	e792      	b.n	8022f6c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8023046:	1c42      	adds	r2, r0, #1
 8023048:	d190      	bne.n	8022f6c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 802304a:	9a07      	ldr	r2, [sp, #28]
 802304c:	4282      	cmp	r2, r0
 802304e:	dd8d      	ble.n	8022f6c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8023050:	1c5a      	adds	r2, r3, #1
 8023052:	db8b      	blt.n	8022f6c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8023054:	9a08      	ldr	r2, [sp, #32]
 8023056:	429a      	cmp	r2, r3
 8023058:	dd88      	ble.n	8022f6c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 802305a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802305c:	9105      	str	r1, [sp, #20]
 802305e:	4649      	mov	r1, r9
 8023060:	9002      	str	r0, [sp, #8]
 8023062:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8023064:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8023068:	9b08      	ldr	r3, [sp, #32]
 802306a:	463a      	mov	r2, r7
 802306c:	9301      	str	r3, [sp, #4]
 802306e:	9b07      	ldr	r3, [sp, #28]
 8023070:	9300      	str	r3, [sp, #0]
 8023072:	4653      	mov	r3, sl
 8023074:	f7ff fd64 	bl	8022b40 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8023078:	e778      	b.n	8022f6c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 802307a:	142a      	asrs	r2, r5, #16
 802307c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8023080:	1433      	asrs	r3, r6, #16
 8023082:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8023086:	fb0a 2303 	mla	r3, sl, r3, r2
 802308a:	085a      	lsrs	r2, r3, #1
 802308c:	07d9      	lsls	r1, r3, #31
 802308e:	5cba      	ldrb	r2, [r7, r2]
 8023090:	bf54      	ite	pl
 8023092:	f002 020f 	andpl.w	r2, r2, #15
 8023096:	1112      	asrmi	r2, r2, #4
 8023098:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802309c:	b2d2      	uxtb	r2, r2
 802309e:	2800      	cmp	r0, #0
 80230a0:	f000 808a 	beq.w	80231b8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b4>
 80230a4:	f103 0b01 	add.w	fp, r3, #1
 80230a8:	ea4f 015b 	mov.w	r1, fp, lsr #1
 80230ac:	f01b 0f01 	tst.w	fp, #1
 80230b0:	5c79      	ldrb	r1, [r7, r1]
 80230b2:	bf0c      	ite	eq
 80230b4:	f001 010f 	andeq.w	r1, r1, #15
 80230b8:	1109      	asrne	r1, r1, #4
 80230ba:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80230be:	b2c9      	uxtb	r1, r1
 80230c0:	9111      	str	r1, [sp, #68]	; 0x44
 80230c2:	f1bc 0f00 	cmp.w	ip, #0
 80230c6:	d019      	beq.n	80230fc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 80230c8:	4453      	add	r3, sl
 80230ca:	0859      	lsrs	r1, r3, #1
 80230cc:	f013 0f01 	tst.w	r3, #1
 80230d0:	f103 0301 	add.w	r3, r3, #1
 80230d4:	5c79      	ldrb	r1, [r7, r1]
 80230d6:	bf0c      	ite	eq
 80230d8:	f001 010f 	andeq.w	r1, r1, #15
 80230dc:	1109      	asrne	r1, r1, #4
 80230de:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80230e2:	b2c9      	uxtb	r1, r1
 80230e4:	910d      	str	r1, [sp, #52]	; 0x34
 80230e6:	0859      	lsrs	r1, r3, #1
 80230e8:	07db      	lsls	r3, r3, #31
 80230ea:	5c79      	ldrb	r1, [r7, r1]
 80230ec:	bf54      	ite	pl
 80230ee:	f001 010f 	andpl.w	r1, r1, #15
 80230f2:	1109      	asrmi	r1, r1, #4
 80230f4:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80230f8:	b2c9      	uxtb	r1, r1
 80230fa:	9112      	str	r1, [sp, #72]	; 0x48
 80230fc:	b280      	uxth	r0, r0
 80230fe:	fa1f fc8c 	uxth.w	ip, ip
 8023102:	fb00 f30c 	mul.w	r3, r0, ip
 8023106:	0100      	lsls	r0, r0, #4
 8023108:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 802310c:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8023110:	1ac0      	subs	r0, r0, r3
 8023112:	fa1f fc8c 	uxth.w	ip, ip
 8023116:	b280      	uxth	r0, r0
 8023118:	eba1 010c 	sub.w	r1, r1, ip
 802311c:	fa1f fb81 	uxth.w	fp, r1
 8023120:	9911      	ldr	r1, [sp, #68]	; 0x44
 8023122:	4348      	muls	r0, r1
 8023124:	990d      	ldr	r1, [sp, #52]	; 0x34
 8023126:	fb02 020b 	mla	r2, r2, fp, r0
 802312a:	fb0c 2c01 	mla	ip, ip, r1, r2
 802312e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8023130:	fb03 c302 	mla	r3, r3, r2, ip
 8023134:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023138:	b3ab      	cbz	r3, 80231a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 802313a:	4a2d      	ldr	r2, [pc, #180]	; (80231f0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 802313c:	2bff      	cmp	r3, #255	; 0xff
 802313e:	6811      	ldr	r1, [r2, #0]
 8023140:	f3c1 4b07 	ubfx	fp, r1, #16, #8
 8023144:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 8023148:	b2c9      	uxtb	r1, r1
 802314a:	d045      	beq.n	80231d8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 802314c:	b298      	uxth	r0, r3
 802314e:	43db      	mvns	r3, r3
 8023150:	f81e 2c03 	ldrb.w	r2, [lr, #-3]
 8023154:	fb11 f100 	smulbb	r1, r1, r0
 8023158:	b2db      	uxtb	r3, r3
 802315a:	fb1c fc00 	smulbb	ip, ip, r0
 802315e:	fb02 1103 	mla	r1, r2, r3, r1
 8023162:	fb1b f000 	smulbb	r0, fp, r0
 8023166:	b289      	uxth	r1, r1
 8023168:	1c4a      	adds	r2, r1, #1
 802316a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802316e:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8023172:	fb02 cc03 	mla	ip, r2, r3, ip
 8023176:	1209      	asrs	r1, r1, #8
 8023178:	fa1f fc8c 	uxth.w	ip, ip
 802317c:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8023180:	f10c 0201 	add.w	r2, ip, #1
 8023184:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8023188:	f81e 2c01 	ldrb.w	r2, [lr, #-1]
 802318c:	fb02 0303 	mla	r3, r2, r3, r0
 8023190:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8023194:	b29b      	uxth	r3, r3
 8023196:	f80e cc02 	strb.w	ip, [lr, #-2]
 802319a:	1c5a      	adds	r2, r3, #1
 802319c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80231a0:	121b      	asrs	r3, r3, #8
 80231a2:	f80e 3c01 	strb.w	r3, [lr, #-1]
 80231a6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80231a8:	f10e 0e03 	add.w	lr, lr, #3
 80231ac:	f109 39ff 	add.w	r9, r9, #4294967295
 80231b0:	441d      	add	r5, r3
 80231b2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80231b4:	441e      	add	r6, r3
 80231b6:	e607      	b.n	8022dc8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc4>
 80231b8:	f1bc 0f00 	cmp.w	ip, #0
 80231bc:	d09e      	beq.n	80230fc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 80231be:	4453      	add	r3, sl
 80231c0:	0859      	lsrs	r1, r3, #1
 80231c2:	07db      	lsls	r3, r3, #31
 80231c4:	5c79      	ldrb	r1, [r7, r1]
 80231c6:	bf54      	ite	pl
 80231c8:	f001 010f 	andpl.w	r1, r1, #15
 80231cc:	1109      	asrmi	r1, r1, #4
 80231ce:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80231d2:	b2c9      	uxtb	r1, r1
 80231d4:	910d      	str	r1, [sp, #52]	; 0x34
 80231d6:	e791      	b.n	80230fc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 80231d8:	f80e 1c03 	strb.w	r1, [lr, #-3]
 80231dc:	f80e cc02 	strb.w	ip, [lr, #-2]
 80231e0:	f80e bc01 	strb.w	fp, [lr, #-1]
 80231e4:	e7df      	b.n	80231a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 80231e6:	b015      	add	sp, #84	; 0x54
 80231e8:	ecbd 8b08 	vpop	{d8-d11}
 80231ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80231f0:	2000bca4 	.word	0x2000bca4

080231f4 <CRC_Lock>:
 80231f4:	4a1d      	ldr	r2, [pc, #116]	; (802326c <CRC_Lock+0x78>)
 80231f6:	b530      	push	{r4, r5, lr}
 80231f8:	6813      	ldr	r3, [r2, #0]
 80231fa:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 80231fe:	f24c 2540 	movw	r5, #49728	; 0xc240
 8023202:	f023 0301 	bic.w	r3, r3, #1
 8023206:	6013      	str	r3, [r2, #0]
 8023208:	4b19      	ldr	r3, [pc, #100]	; (8023270 <CRC_Lock+0x7c>)
 802320a:	681a      	ldr	r2, [r3, #0]
 802320c:	4022      	ands	r2, r4
 802320e:	42aa      	cmp	r2, r5
 8023210:	d005      	beq.n	802321e <CRC_Lock+0x2a>
 8023212:	681b      	ldr	r3, [r3, #0]
 8023214:	f24c 2270 	movw	r2, #49776	; 0xc270
 8023218:	4023      	ands	r3, r4
 802321a:	4293      	cmp	r3, r2
 802321c:	d11d      	bne.n	802325a <CRC_Lock+0x66>
 802321e:	4b15      	ldr	r3, [pc, #84]	; (8023274 <CRC_Lock+0x80>)
 8023220:	681b      	ldr	r3, [r3, #0]
 8023222:	b9d3      	cbnz	r3, 802325a <CRC_Lock+0x66>
 8023224:	4a14      	ldr	r2, [pc, #80]	; (8023278 <CRC_Lock+0x84>)
 8023226:	6813      	ldr	r3, [r2, #0]
 8023228:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802322c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8023230:	d006      	beq.n	8023240 <CRC_Lock+0x4c>
 8023232:	6813      	ldr	r3, [r2, #0]
 8023234:	f240 4283 	movw	r2, #1155	; 0x483
 8023238:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802323c:	4293      	cmp	r3, r2
 802323e:	d10c      	bne.n	802325a <CRC_Lock+0x66>
 8023240:	4b0e      	ldr	r3, [pc, #56]	; (802327c <CRC_Lock+0x88>)
 8023242:	2201      	movs	r2, #1
 8023244:	601a      	str	r2, [r3, #0]
 8023246:	681a      	ldr	r2, [r3, #0]
 8023248:	2a00      	cmp	r2, #0
 802324a:	d1fc      	bne.n	8023246 <CRC_Lock+0x52>
 802324c:	4b0c      	ldr	r3, [pc, #48]	; (8023280 <CRC_Lock+0x8c>)
 802324e:	6018      	str	r0, [r3, #0]
 8023250:	6818      	ldr	r0, [r3, #0]
 8023252:	1a43      	subs	r3, r0, r1
 8023254:	4258      	negs	r0, r3
 8023256:	4158      	adcs	r0, r3
 8023258:	bd30      	pop	{r4, r5, pc}
 802325a:	4b0a      	ldr	r3, [pc, #40]	; (8023284 <CRC_Lock+0x90>)
 802325c:	2201      	movs	r2, #1
 802325e:	601a      	str	r2, [r3, #0]
 8023260:	681a      	ldr	r2, [r3, #0]
 8023262:	2a00      	cmp	r2, #0
 8023264:	d1fc      	bne.n	8023260 <CRC_Lock+0x6c>
 8023266:	4b08      	ldr	r3, [pc, #32]	; (8023288 <CRC_Lock+0x94>)
 8023268:	e7f1      	b.n	802324e <CRC_Lock+0x5a>
 802326a:	bf00      	nop
 802326c:	e0002000 	.word	0xe0002000
 8023270:	e000ed00 	.word	0xe000ed00
 8023274:	e0042000 	.word	0xe0042000
 8023278:	5c001000 	.word	0x5c001000
 802327c:	58024c08 	.word	0x58024c08
 8023280:	58024c00 	.word	0x58024c00
 8023284:	40023008 	.word	0x40023008
 8023288:	40023000 	.word	0x40023000

0802328c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 802328c:	6101      	str	r1, [r0, #16]
 802328e:	4770      	bx	lr

08023290 <_ZN8touchgfx8Gestures4tickEv>:
 8023290:	7b83      	ldrb	r3, [r0, #14]
 8023292:	b14b      	cbz	r3, 80232a8 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8023294:	8903      	ldrh	r3, [r0, #8]
 8023296:	3301      	adds	r3, #1
 8023298:	b29b      	uxth	r3, r3
 802329a:	2b07      	cmp	r3, #7
 802329c:	8103      	strh	r3, [r0, #8]
 802329e:	bf81      	itttt	hi
 80232a0:	2300      	movhi	r3, #0
 80232a2:	8143      	strhhi	r3, [r0, #10]
 80232a4:	8183      	strhhi	r3, [r0, #12]
 80232a6:	7383      	strbhi	r3, [r0, #14]
 80232a8:	4770      	bx	lr
	...

080232ac <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 80232ac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80232b0:	4604      	mov	r4, r0
 80232b2:	4698      	mov	r8, r3
 80232b4:	8880      	ldrh	r0, [r0, #4]
 80232b6:	4617      	mov	r7, r2
 80232b8:	4b1d      	ldr	r3, [pc, #116]	; (8023330 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 80232ba:	460e      	mov	r6, r1
 80232bc:	f8ad 0006 	strh.w	r0, [sp, #6]
 80232c0:	eba8 0000 	sub.w	r0, r8, r0
 80232c4:	9300      	str	r3, [sp, #0]
 80232c6:	2300      	movs	r3, #0
 80232c8:	b280      	uxth	r0, r0
 80232ca:	8aa2      	ldrh	r2, [r4, #20]
 80232cc:	f88d 3004 	strb.w	r3, [sp, #4]
 80232d0:	b203      	sxth	r3, r0
 80232d2:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 80232d6:	88e1      	ldrh	r1, [r4, #6]
 80232d8:	2b00      	cmp	r3, #0
 80232da:	f8ad 800a 	strh.w	r8, [sp, #10]
 80232de:	f8ad 1008 	strh.w	r1, [sp, #8]
 80232e2:	bfb8      	it	lt
 80232e4:	4240      	neglt	r0, r0
 80232e6:	f8ad 500c 	strh.w	r5, [sp, #12]
 80232ea:	bfb8      	it	lt
 80232ec:	b203      	sxthlt	r3, r0
 80232ee:	4293      	cmp	r3, r2
 80232f0:	dc08      	bgt.n	8023304 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 80232f2:	1a69      	subs	r1, r5, r1
 80232f4:	b289      	uxth	r1, r1
 80232f6:	b20b      	sxth	r3, r1
 80232f8:	2b00      	cmp	r3, #0
 80232fa:	bfbc      	itt	lt
 80232fc:	4249      	neglt	r1, r1
 80232fe:	b20b      	sxthlt	r3, r1
 8023300:	429a      	cmp	r2, r3
 8023302:	da13      	bge.n	802332c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 8023304:	6920      	ldr	r0, [r4, #16]
 8023306:	4669      	mov	r1, sp
 8023308:	eba8 0606 	sub.w	r6, r8, r6
 802330c:	1bef      	subs	r7, r5, r7
 802330e:	6803      	ldr	r3, [r0, #0]
 8023310:	685b      	ldr	r3, [r3, #4]
 8023312:	4798      	blx	r3
 8023314:	2300      	movs	r3, #0
 8023316:	2001      	movs	r0, #1
 8023318:	8166      	strh	r6, [r4, #10]
 802331a:	8123      	strh	r3, [r4, #8]
 802331c:	81a7      	strh	r7, [r4, #12]
 802331e:	f8a4 8004 	strh.w	r8, [r4, #4]
 8023322:	80e5      	strh	r5, [r4, #6]
 8023324:	73a0      	strb	r0, [r4, #14]
 8023326:	b004      	add	sp, #16
 8023328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802332c:	2000      	movs	r0, #0
 802332e:	e7fa      	b.n	8023326 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8023330:	080287b4 	.word	0x080287b4

08023334 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8023334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023336:	461e      	mov	r6, r3
 8023338:	1e4b      	subs	r3, r1, #1
 802333a:	b085      	sub	sp, #20
 802333c:	4604      	mov	r4, r0
 802333e:	2b01      	cmp	r3, #1
 8023340:	460d      	mov	r5, r1
 8023342:	4617      	mov	r7, r2
 8023344:	d84b      	bhi.n	80233de <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8023346:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802334a:	1cd3      	adds	r3, r2, #3
 802334c:	b29b      	uxth	r3, r3
 802334e:	2b06      	cmp	r3, #6
 8023350:	d916      	bls.n	8023380 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8023352:	f8df c098 	ldr.w	ip, [pc, #152]	; 80233ec <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8023356:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802335a:	f8cd c004 	str.w	ip, [sp, #4]
 802335e:	f04f 0c00 	mov.w	ip, #0
 8023362:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8023366:	6900      	ldr	r0, [r0, #16]
 8023368:	f8ad 100c 	strh.w	r1, [sp, #12]
 802336c:	a901      	add	r1, sp, #4
 802336e:	f88d c008 	strb.w	ip, [sp, #8]
 8023372:	f8ad 200a 	strh.w	r2, [sp, #10]
 8023376:	f8ad 300e 	strh.w	r3, [sp, #14]
 802337a:	6803      	ldr	r3, [r0, #0]
 802337c:	689b      	ldr	r3, [r3, #8]
 802337e:	4798      	blx	r3
 8023380:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023384:	1cd3      	adds	r3, r2, #3
 8023386:	b29b      	uxth	r3, r3
 8023388:	2b06      	cmp	r3, #6
 802338a:	d916      	bls.n	80233ba <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802338c:	f8df c05c 	ldr.w	ip, [pc, #92]	; 80233ec <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8023390:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8023394:	f8cd c004 	str.w	ip, [sp, #4]
 8023398:	f04f 0c01 	mov.w	ip, #1
 802339c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80233a0:	6920      	ldr	r0, [r4, #16]
 80233a2:	f8ad 100c 	strh.w	r1, [sp, #12]
 80233a6:	a901      	add	r1, sp, #4
 80233a8:	f88d c008 	strb.w	ip, [sp, #8]
 80233ac:	f8ad 200a 	strh.w	r2, [sp, #10]
 80233b0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80233b4:	6803      	ldr	r3, [r0, #0]
 80233b6:	689b      	ldr	r3, [r3, #8]
 80233b8:	4798      	blx	r3
 80233ba:	4b0b      	ldr	r3, [pc, #44]	; (80233e8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb4>)
 80233bc:	a901      	add	r1, sp, #4
 80233be:	6920      	ldr	r0, [r4, #16]
 80233c0:	9301      	str	r3, [sp, #4]
 80233c2:	2300      	movs	r3, #0
 80233c4:	f88d 5008 	strb.w	r5, [sp, #8]
 80233c8:	f8ad 700a 	strh.w	r7, [sp, #10]
 80233cc:	f8ad 600c 	strh.w	r6, [sp, #12]
 80233d0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80233d4:	6803      	ldr	r3, [r0, #0]
 80233d6:	681b      	ldr	r3, [r3, #0]
 80233d8:	4798      	blx	r3
 80233da:	b005      	add	sp, #20
 80233dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80233de:	2900      	cmp	r1, #0
 80233e0:	d1eb      	bne.n	80233ba <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80233e2:	80a2      	strh	r2, [r4, #4]
 80233e4:	80c6      	strh	r6, [r0, #6]
 80233e6:	e7e8      	b.n	80233ba <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80233e8:	080287a0 	.word	0x080287a0
 80233ec:	080287c8 	.word	0x080287c8

080233f0 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>:
 80233f0:	10c9      	asrs	r1, r1, #3
 80233f2:	2900      	cmp	r1, #0
 80233f4:	bfb8      	it	lt
 80233f6:	4249      	neglt	r1, r1
 80233f8:	2801      	cmp	r0, #1
 80233fa:	d108      	bne.n	802340e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 80233fc:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8023400:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8023404:	4601      	mov	r1, r0
 8023406:	dd02      	ble.n	802340e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 8023408:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 802340c:	4770      	bx	lr
 802340e:	29ff      	cmp	r1, #255	; 0xff
 8023410:	bfa8      	it	ge
 8023412:	21ff      	movge	r1, #255	; 0xff
 8023414:	4608      	mov	r0, r1
 8023416:	4770      	bx	lr

08023418 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 8023418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802341c:	688c      	ldr	r4, [r1, #8]
 802341e:	b087      	sub	sp, #28
 8023420:	4607      	mov	r7, r0
 8023422:	2c00      	cmp	r4, #0
 8023424:	db2b      	blt.n	802347e <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8023426:	6803      	ldr	r3, [r0, #0]
 8023428:	68da      	ldr	r2, [r3, #12]
 802342a:	42a2      	cmp	r2, r4
 802342c:	dd27      	ble.n	802347e <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 802342e:	681a      	ldr	r2, [r3, #0]
 8023430:	691e      	ldr	r6, [r3, #16]
 8023432:	68cd      	ldr	r5, [r1, #12]
 8023434:	fb06 2604 	mla	r6, r6, r4, r2
 8023438:	f8d1 901c 	ldr.w	r9, [r1, #28]
 802343c:	698a      	ldr	r2, [r1, #24]
 802343e:	f893 a004 	ldrb.w	sl, [r3, #4]
 8023442:	f8d1 8020 	ldr.w	r8, [r1, #32]
 8023446:	9205      	str	r2, [sp, #20]
 8023448:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 802344c:	9b05      	ldr	r3, [sp, #20]
 802344e:	6839      	ldr	r1, [r7, #0]
 8023450:	eb03 0c02 	add.w	ip, r3, r2
 8023454:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 8023458:	6889      	ldr	r1, [r1, #8]
 802345a:	1898      	adds	r0, r3, r2
 802345c:	4288      	cmp	r0, r1
 802345e:	db02      	blt.n	8023466 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 8023460:	1a8b      	subs	r3, r1, r2
 8023462:	2b00      	cmp	r3, #0
 8023464:	dd09      	ble.n	802347a <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 8023466:	6878      	ldr	r0, [r7, #4]
 8023468:	6801      	ldr	r1, [r0, #0]
 802346a:	9400      	str	r4, [sp, #0]
 802346c:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 8023470:	4653      	mov	r3, sl
 8023472:	f8d1 b008 	ldr.w	fp, [r1, #8]
 8023476:	4631      	mov	r1, r6
 8023478:	47d8      	blx	fp
 802347a:	3d01      	subs	r5, #1
 802347c:	d1e4      	bne.n	8023448 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 802347e:	b007      	add	sp, #28
 8023480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023484 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8023484:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8023488:	b90b      	cbnz	r3, 802348e <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 802348a:	f001 b974 	b.w	8024776 <_ZN8touchgfx7Outline6lineToEii>
 802348e:	4770      	bx	lr

08023490 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 8023490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023494:	4604      	mov	r4, r0
 8023496:	2600      	movs	r6, #0
 8023498:	4b8e      	ldr	r3, [pc, #568]	; (80236d4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x244>)
 802349a:	f100 0518 	add.w	r5, r0, #24
 802349e:	f104 072c 	add.w	r7, r4, #44	; 0x2c
 80234a2:	b086      	sub	sp, #24
 80234a4:	4690      	mov	r8, r2
 80234a6:	e9c0 3100 	strd	r3, r1, [r0]
 80234aa:	e9c0 6602 	strd	r6, r6, [r0, #8]
 80234ae:	e9c0 6604 	strd	r6, r6, [r0, #16]
 80234b2:	4628      	mov	r0, r5
 80234b4:	f001 fb75 	bl	8024ba2 <_ZN8touchgfx15RenderingBufferC1Ev>
 80234b8:	4638      	mov	r0, r7
 80234ba:	f000 fb45 	bl	8023b48 <_ZN8touchgfx7OutlineC1Ev>
 80234be:	f104 0074 	add.w	r0, r4, #116	; 0x74
 80234c2:	f001 fb23 	bl	8024b0c <_ZN8touchgfx8ScanlineC1Ev>
 80234c6:	2301      	movs	r3, #1
 80234c8:	f884 6098 	strb.w	r6, [r4, #152]	; 0x98
 80234cc:	f884 60a0 	strb.w	r6, [r4, #160]	; 0xa0
 80234d0:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 80234d4:	f884 60a2 	strb.w	r6, [r4, #162]	; 0xa2
 80234d8:	f8a4 60ac 	strh.w	r6, [r4, #172]	; 0xac
 80234dc:	e9c4 6629 	strd	r6, r6, [r4, #164]	; 0xa4
 80234e0:	e9c4 662c 	strd	r6, r6, [r4, #176]	; 0xb0
 80234e4:	f7f4 fbe6 	bl	8017cb4 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 80234e8:	b928      	cbnz	r0, 80234f6 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x66>
 80234ea:	4b7b      	ldr	r3, [pc, #492]	; (80236d8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 80234ec:	2118      	movs	r1, #24
 80234ee:	4a7b      	ldr	r2, [pc, #492]	; (80236dc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 80234f0:	487b      	ldr	r0, [pc, #492]	; (80236e0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 80234f2:	f001 fb99 	bl	8024c28 <__assert_func>
 80234f6:	f9b8 2000 	ldrsh.w	r2, [r8]
 80234fa:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 80234fe:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8023502:	4410      	add	r0, r2
 8023504:	9602      	str	r6, [sp, #8]
 8023506:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 802350a:	b280      	uxth	r0, r0
 802350c:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 8023510:	fa0f fa80 	sxth.w	sl, r0
 8023514:	f1ba 0f00 	cmp.w	sl, #0
 8023518:	dd70      	ble.n	80235fc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 802351a:	4591      	cmp	r9, r2
 802351c:	dd6e      	ble.n	80235fc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 802351e:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 8023522:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8023526:	440b      	add	r3, r1
 8023528:	b29b      	uxth	r3, r3
 802352a:	b21e      	sxth	r6, r3
 802352c:	2e00      	cmp	r6, #0
 802352e:	dd65      	ble.n	80235fc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8023530:	458e      	cmp	lr, r1
 8023532:	dd63      	ble.n	80235fc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8023534:	45d1      	cmp	r9, sl
 8023536:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 802353a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 802353e:	bfb8      	it	lt
 8023540:	fa1f f089 	uxthlt.w	r0, r9
 8023544:	45b6      	cmp	lr, r6
 8023546:	f8ad 2008 	strh.w	r2, [sp, #8]
 802354a:	bfb8      	it	lt
 802354c:	fa1f f38e 	uxthlt.w	r3, lr
 8023550:	1a80      	subs	r0, r0, r2
 8023552:	f8ad 100a 	strh.w	r1, [sp, #10]
 8023556:	1a5b      	subs	r3, r3, r1
 8023558:	f8ad 000c 	strh.w	r0, [sp, #12]
 802355c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023560:	f10d 0808 	add.w	r8, sp, #8
 8023564:	ae04      	add	r6, sp, #16
 8023566:	e898 0003 	ldmia.w	r8, {r0, r1}
 802356a:	e886 0003 	stmia.w	r6, {r0, r1}
 802356e:	f8dc 3000 	ldr.w	r3, [ip]
 8023572:	4660      	mov	r0, ip
 8023574:	4631      	mov	r1, r6
 8023576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023578:	4798      	blx	r3
 802357a:	6861      	ldr	r1, [r4, #4]
 802357c:	4640      	mov	r0, r8
 802357e:	3104      	adds	r1, #4
 8023580:	f7f5 fa06 	bl	8018990 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023584:	4630      	mov	r0, r6
 8023586:	f7f5 fa1b 	bl	80189c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802358a:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 802358e:	f7f4 fb21 	bl	8017bd4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 8023592:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
 8023596:	4638      	mov	r0, r7
 8023598:	f000 fab2 	bl	8023b00 <_ZN8touchgfx7Outline5resetEv>
 802359c:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80235a0:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80235a4:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 80235a8:	015b      	lsls	r3, r3, #5
 80235aa:	f8a4 209c 	strh.w	r2, [r4, #156]	; 0x9c
 80235ae:	0152      	lsls	r2, r2, #5
 80235b0:	60e3      	str	r3, [r4, #12]
 80235b2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80235b6:	60a2      	str	r2, [r4, #8]
 80235b8:	015b      	lsls	r3, r3, #5
 80235ba:	6123      	str	r3, [r4, #16]
 80235bc:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80235c0:	015b      	lsls	r3, r3, #5
 80235c2:	6163      	str	r3, [r4, #20]
 80235c4:	4b47      	ldr	r3, [pc, #284]	; (80236e4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 80235c6:	6818      	ldr	r0, [r3, #0]
 80235c8:	6803      	ldr	r3, [r0, #0]
 80235ca:	6a1b      	ldr	r3, [r3, #32]
 80235cc:	4798      	blx	r3
 80235ce:	4606      	mov	r6, r0
 80235d0:	f7ec fa4a 	bl	800fa68 <_ZN8touchgfx3HAL3lcdEv>
 80235d4:	6803      	ldr	r3, [r0, #0]
 80235d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80235d8:	4798      	blx	r3
 80235da:	4607      	mov	r7, r0
 80235dc:	f7ec fa44 	bl	800fa68 <_ZN8touchgfx3HAL3lcdEv>
 80235e0:	6803      	ldr	r3, [r0, #0]
 80235e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80235e4:	4798      	blx	r3
 80235e6:	280c      	cmp	r0, #12
 80235e8:	d854      	bhi.n	8023694 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x204>
 80235ea:	e8df f000 	tbb	[pc, r0]
 80235ee:	554b      	.short	0x554b
 80235f0:	2b6e0a66 	.word	0x2b6e0a66
 80235f4:	5f5f5f3b 	.word	0x5f5f5f3b
 80235f8:	5f5f      	.short	0x5f5f
 80235fa:	6e          	.byte	0x6e
 80235fb:	00          	.byte	0x00
 80235fc:	2300      	movs	r3, #0
 80235fe:	9303      	str	r3, [sp, #12]
 8023600:	e7ae      	b.n	8023560 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd0>
 8023602:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8023606:	2108      	movs	r1, #8
 8023608:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802360c:	fb92 f1f1 	sdiv	r1, r2, r1
 8023610:	fb07 1303 	mla	r3, r7, r3, r1
 8023614:	441e      	add	r6, r3
 8023616:	4253      	negs	r3, r2
 8023618:	f002 0207 	and.w	r2, r2, #7
 802361c:	f003 0307 	and.w	r3, r3, #7
 8023620:	bf58      	it	pl
 8023622:	425a      	negpl	r2, r3
 8023624:	b2d2      	uxtb	r2, r2
 8023626:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 802362a:	4628      	mov	r0, r5
 802362c:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8023630:	66e1      	str	r1, [r4, #108]	; 0x6c
 8023632:	e9cd 1700 	strd	r1, r7, [sp]
 8023636:	4631      	mov	r1, r6
 8023638:	f001 fabb 	bl	8024bb2 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 802363c:	4620      	mov	r0, r4
 802363e:	b006      	add	sp, #24
 8023640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023644:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8023648:	2104      	movs	r1, #4
 802364a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802364e:	fb92 f1f1 	sdiv	r1, r2, r1
 8023652:	fb07 1303 	mla	r3, r7, r3, r1
 8023656:	441e      	add	r6, r3
 8023658:	4253      	negs	r3, r2
 802365a:	f002 0203 	and.w	r2, r2, #3
 802365e:	f003 0303 	and.w	r3, r3, #3
 8023662:	e7dd      	b.n	8023620 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x190>
 8023664:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8023668:	2102      	movs	r1, #2
 802366a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802366e:	2a00      	cmp	r2, #0
 8023670:	fb92 f1f1 	sdiv	r1, r2, r1
 8023674:	f002 0201 	and.w	r2, r2, #1
 8023678:	fb07 1303 	mla	r3, r7, r3, r1
 802367c:	bfb8      	it	lt
 802367e:	4252      	neglt	r2, r2
 8023680:	441e      	add	r6, r3
 8023682:	e7cf      	b.n	8023624 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 8023684:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023688:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802368c:	437b      	muls	r3, r7
 802368e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8023692:	441e      	add	r6, r3
 8023694:	2200      	movs	r2, #0
 8023696:	e7c6      	b.n	8023626 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x196>
 8023698:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802369c:	2103      	movs	r1, #3
 802369e:	fb07 f203 	mul.w	r2, r7, r3
 80236a2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80236a6:	fb13 2301 	smlabb	r3, r3, r1, r2
 80236aa:	e7f2      	b.n	8023692 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 80236ac:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80236b0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80236b4:	fb07 2303 	mla	r3, r7, r3, r2
 80236b8:	e7eb      	b.n	8023692 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 80236ba:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80236be:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80236c2:	437b      	muls	r3, r7
 80236c4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80236c8:	e7e3      	b.n	8023692 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 80236ca:	4b07      	ldr	r3, [pc, #28]	; (80236e8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 80236cc:	2156      	movs	r1, #86	; 0x56
 80236ce:	4a03      	ldr	r2, [pc, #12]	; (80236dc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 80236d0:	e70e      	b.n	80234f0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x60>
 80236d2:	bf00      	nop
 80236d4:	08029e34 	.word	0x08029e34
 80236d8:	08029d7e 	.word	0x08029d7e
 80236dc:	08029e3c 	.word	0x08029e3c
 80236e0:	08029dda 	.word	0x08029dda
 80236e4:	2000bc7c 	.word	0x2000bc7c
 80236e8:	08029e0e 	.word	0x08029e0e

080236ec <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 80236ec:	6812      	ldr	r2, [r2, #0]
 80236ee:	2a00      	cmp	r2, #0
 80236f0:	db0b      	blt.n	802370a <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 80236f2:	9800      	ldr	r0, [sp, #0]
 80236f4:	6800      	ldr	r0, [r0, #0]
 80236f6:	4290      	cmp	r0, r2
 80236f8:	bfd4      	ite	le
 80236fa:	2002      	movle	r0, #2
 80236fc:	2000      	movgt	r0, #0
 80236fe:	680a      	ldr	r2, [r1, #0]
 8023700:	2a00      	cmp	r2, #0
 8023702:	da04      	bge.n	802370e <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 8023704:	f040 0004 	orr.w	r0, r0, #4
 8023708:	4770      	bx	lr
 802370a:	2001      	movs	r0, #1
 802370c:	e7f7      	b.n	80236fe <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 802370e:	681b      	ldr	r3, [r3, #0]
 8023710:	4293      	cmp	r3, r2
 8023712:	bfd8      	it	le
 8023714:	f040 0008 	orrle.w	r0, r0, #8
 8023718:	4770      	bx	lr
	...

0802371c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 802371c:	4b07      	ldr	r3, [pc, #28]	; (802373c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 802371e:	b510      	push	{r4, lr}
 8023720:	781b      	ldrb	r3, [r3, #0]
 8023722:	2b01      	cmp	r3, #1
 8023724:	d108      	bne.n	8023738 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 8023726:	6843      	ldr	r3, [r0, #4]
 8023728:	6814      	ldr	r4, [r2, #0]
 802372a:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 802372e:	680b      	ldr	r3, [r1, #0]
 8023730:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8023734:	6013      	str	r3, [r2, #0]
 8023736:	600c      	str	r4, [r1, #0]
 8023738:	bd10      	pop	{r4, pc}
 802373a:	bf00      	nop
 802373c:	2000bc74 	.word	0x2000bc74

08023740 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8023740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023742:	b085      	sub	sp, #20
 8023744:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8023748:	4604      	mov	r4, r0
 802374a:	e9cd 2102 	strd	r2, r1, [sp, #8]
 802374e:	b33b      	cbz	r3, 80237a0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 8023750:	aa02      	add	r2, sp, #8
 8023752:	a903      	add	r1, sp, #12
 8023754:	f7ff ffe2 	bl	802371c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8023758:	68a3      	ldr	r3, [r4, #8]
 802375a:	9e03      	ldr	r6, [sp, #12]
 802375c:	aa02      	add	r2, sp, #8
 802375e:	9f02      	ldr	r7, [sp, #8]
 8023760:	a903      	add	r1, sp, #12
 8023762:	1af6      	subs	r6, r6, r3
 8023764:	68e3      	ldr	r3, [r4, #12]
 8023766:	4620      	mov	r0, r4
 8023768:	1aff      	subs	r7, r7, r3
 802376a:	f104 0314 	add.w	r3, r4, #20
 802376e:	9603      	str	r6, [sp, #12]
 8023770:	9300      	str	r3, [sp, #0]
 8023772:	f104 0310 	add.w	r3, r4, #16
 8023776:	9702      	str	r7, [sp, #8]
 8023778:	f7ff ffb8 	bl	80236ec <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 802377c:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 8023780:	4605      	mov	r5, r0
 8023782:	b97b      	cbnz	r3, 80237a4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 8023784:	463a      	mov	r2, r7
 8023786:	4631      	mov	r1, r6
 8023788:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 802378c:	f7ff fe7a 	bl	8023484 <_ZN8touchgfx10Rasterizer6lineToEii>
 8023790:	9b03      	ldr	r3, [sp, #12]
 8023792:	f884 50ac 	strb.w	r5, [r4, #172]	; 0xac
 8023796:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 802379a:	9b02      	ldr	r3, [sp, #8]
 802379c:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 80237a0:	b005      	add	sp, #20
 80237a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80237a4:	b110      	cbz	r0, 80237ac <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 80237a6:	ea13 0200 	ands.w	r2, r3, r0
 80237aa:	d11c      	bne.n	80237e6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 80237ac:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
 80237b0:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 80237b4:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
 80237b8:	b188      	cbz	r0, 80237de <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 80237ba:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
 80237be:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 80237c2:	b913      	cbnz	r3, 80237ca <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 80237c4:	4630      	mov	r0, r6
 80237c6:	f001 f806 	bl	80247d6 <_ZN8touchgfx7Outline6moveToEii>
 80237ca:	2300      	movs	r3, #0
 80237cc:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 80237d0:	2301      	movs	r3, #1
 80237d2:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 80237d6:	4630      	mov	r0, r6
 80237d8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80237dc:	e7d6      	b.n	802378c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 80237de:	4630      	mov	r0, r6
 80237e0:	f7ff fe50 	bl	8023484 <_ZN8touchgfx10Rasterizer6lineToEii>
 80237e4:	e7f7      	b.n	80237d6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 80237e6:	4615      	mov	r5, r2
 80237e8:	e7d2      	b.n	8023790 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

080237ea <_ZN8touchgfx6Canvas5closeEv>:
 80237ea:	b538      	push	{r3, r4, r5, lr}
 80237ec:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 80237f0:	4604      	mov	r4, r0
 80237f2:	b993      	cbnz	r3, 802381a <_ZN8touchgfx6Canvas5closeEv+0x30>
 80237f4:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 80237f8:	f890 20ad 	ldrb.w	r2, [r0, #173]	; 0xad
 80237fc:	4213      	tst	r3, r2
 80237fe:	d10c      	bne.n	802381a <_ZN8touchgfx6Canvas5closeEv+0x30>
 8023800:	f100 052c 	add.w	r5, r0, #44	; 0x2c
 8023804:	b123      	cbz	r3, 8023810 <_ZN8touchgfx6Canvas5closeEv+0x26>
 8023806:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
 802380a:	4628      	mov	r0, r5
 802380c:	f7ff fe3a 	bl	8023484 <_ZN8touchgfx10Rasterizer6lineToEii>
 8023810:	4628      	mov	r0, r5
 8023812:	e9d4 122c 	ldrd	r1, r2, [r4, #176]	; 0xb0
 8023816:	f7ff fe35 	bl	8023484 <_ZN8touchgfx10Rasterizer6lineToEii>
 802381a:	2300      	movs	r3, #0
 802381c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8023820:	bd38      	pop	{r3, r4, r5, pc}

08023822 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8023822:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023824:	b085      	sub	sp, #20
 8023826:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 802382a:	4604      	mov	r4, r0
 802382c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8023830:	b353      	cbz	r3, 8023888 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 8023832:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8023836:	b90b      	cbnz	r3, 802383c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 8023838:	f7ff ffd7 	bl	80237ea <_ZN8touchgfx6Canvas5closeEv>
 802383c:	aa02      	add	r2, sp, #8
 802383e:	a903      	add	r1, sp, #12
 8023840:	4620      	mov	r0, r4
 8023842:	f7ff ff6b 	bl	802371c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8023846:	68a3      	ldr	r3, [r4, #8]
 8023848:	9d03      	ldr	r5, [sp, #12]
 802384a:	aa02      	add	r2, sp, #8
 802384c:	9e02      	ldr	r6, [sp, #8]
 802384e:	a903      	add	r1, sp, #12
 8023850:	1aed      	subs	r5, r5, r3
 8023852:	68e3      	ldr	r3, [r4, #12]
 8023854:	4620      	mov	r0, r4
 8023856:	1af6      	subs	r6, r6, r3
 8023858:	f104 0314 	add.w	r3, r4, #20
 802385c:	9503      	str	r5, [sp, #12]
 802385e:	9300      	str	r3, [sp, #0]
 8023860:	f104 0310 	add.w	r3, r4, #16
 8023864:	9602      	str	r6, [sp, #8]
 8023866:	f7ff ff41 	bl	80236ec <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 802386a:	4607      	mov	r7, r0
 802386c:	b170      	cbz	r0, 802388c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 802386e:	2301      	movs	r3, #1
 8023870:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8023874:	9a03      	ldr	r2, [sp, #12]
 8023876:	9b02      	ldr	r3, [sp, #8]
 8023878:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
 802387c:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
 8023880:	f884 70ac 	strb.w	r7, [r4, #172]	; 0xac
 8023884:	e9c4 2329 	strd	r2, r3, [r4, #164]	; 0xa4
 8023888:	b005      	add	sp, #20
 802388a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802388c:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 8023890:	f884 00ad 	strb.w	r0, [r4, #173]	; 0xad
 8023894:	b92b      	cbnz	r3, 80238a2 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 8023896:	4632      	mov	r2, r6
 8023898:	4629      	mov	r1, r5
 802389a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 802389e:	f000 ff9a 	bl	80247d6 <_ZN8touchgfx7Outline6moveToEii>
 80238a2:	2300      	movs	r3, #0
 80238a4:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 80238a8:	2301      	movs	r3, #1
 80238aa:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 80238ae:	e7e1      	b.n	8023874 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

080238b0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 80238b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80238b4:	4604      	mov	r4, r0
 80238b6:	b087      	sub	sp, #28
 80238b8:	9105      	str	r1, [sp, #20]
 80238ba:	f001 f8d0 	bl	8024a5e <_ZN8touchgfx7Outline8getCellsEv>
 80238be:	f8d4 9008 	ldr.w	r9, [r4, #8]
 80238c2:	4605      	mov	r5, r0
 80238c4:	f1b9 0f00 	cmp.w	r9, #0
 80238c8:	d103      	bne.n	80238d2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 80238ca:	2001      	movs	r0, #1
 80238cc:	b007      	add	sp, #28
 80238ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80238d2:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 80238d6:	2e00      	cmp	r6, #0
 80238d8:	d139      	bne.n	802394e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 80238da:	f104 0848 	add.w	r8, r4, #72	; 0x48
 80238de:	f105 0708 	add.w	r7, r5, #8
 80238e2:	4640      	mov	r0, r8
 80238e4:	f001 f8fd 	bl	8024ae2 <_ZN8touchgfx8Scanline5resetEv>
 80238e8:	f109 33ff 	add.w	r3, r9, #4294967295
 80238ec:	9303      	str	r3, [sp, #12]
 80238ee:	f9b5 b000 	ldrsh.w	fp, [r5]
 80238f2:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 80238f6:	46da      	mov	sl, fp
 80238f8:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 80238fc:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 8023900:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8023904:	9b03      	ldr	r3, [sp, #12]
 8023906:	4416      	add	r6, r2
 8023908:	9504      	str	r5, [sp, #16]
 802390a:	463d      	mov	r5, r7
 802390c:	3b01      	subs	r3, #1
 802390e:	9303      	str	r3, [sp, #12]
 8023910:	3301      	adds	r3, #1
 8023912:	d01e      	beq.n	8023952 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 8023914:	3708      	adds	r7, #8
 8023916:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 802391a:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 802391e:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 8023922:	4290      	cmp	r0, r2
 8023924:	d11e      	bne.n	8023964 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 8023926:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 802392a:	4411      	add	r1, r2
 802392c:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 8023930:	e7e8      	b.n	8023904 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 8023932:	1c91      	adds	r1, r2, #2
 8023934:	f04f 0301 	mov.w	r3, #1
 8023938:	65e1      	str	r1, [r4, #92]	; 0x5c
 802393a:	8053      	strh	r3, [r2, #2]
 802393c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 802393e:	1c91      	adds	r1, r2, #2
 8023940:	65a1      	str	r1, [r4, #88]	; 0x58
 8023942:	f8a2 b002 	strh.w	fp, [r2, #2]
 8023946:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8023948:	3201      	adds	r2, #1
 802394a:	6562      	str	r2, [r4, #84]	; 0x54
 802394c:	e03a      	b.n	80239c4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 802394e:	2000      	movs	r0, #0
 8023950:	e7bc      	b.n	80238cc <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 8023952:	b951      	cbnz	r1, 802396a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 8023954:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8023956:	2b00      	cmp	r3, #0
 8023958:	d0b7      	beq.n	80238ca <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 802395a:	4641      	mov	r1, r8
 802395c:	9805      	ldr	r0, [sp, #20]
 802395e:	f7ff fd5b 	bl	8023418 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8023962:	e7b2      	b.n	80238ca <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 8023964:	2900      	cmp	r1, #0
 8023966:	d035      	beq.n	80239d4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 8023968:	9504      	str	r5, [sp, #16]
 802396a:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 802396e:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8023972:	f7ff fd3d 	bl	80233f0 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 8023976:	4605      	mov	r5, r0
 8023978:	b330      	cbz	r0, 80239c8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802397a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 802397c:	b182      	cbz	r2, 80239a0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 802397e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8023980:	454a      	cmp	r2, r9
 8023982:	d00d      	beq.n	80239a0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8023984:	4641      	mov	r1, r8
 8023986:	9805      	ldr	r0, [sp, #20]
 8023988:	f7ff fd46 	bl	8023418 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 802398c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8023990:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8023992:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8023996:	65e2      	str	r2, [r4, #92]	; 0x5c
 8023998:	2300      	movs	r3, #0
 802399a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802399c:	6563      	str	r3, [r4, #84]	; 0x54
 802399e:	65a2      	str	r2, [r4, #88]	; 0x58
 80239a0:	f1bb 0f00 	cmp.w	fp, #0
 80239a4:	db10      	blt.n	80239c8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 80239a6:	f7f4 f993 	bl	8017cd0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 80239aa:	4583      	cmp	fp, r0
 80239ac:	d20c      	bcs.n	80239c8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 80239ae:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80239b0:	f802 500b 	strb.w	r5, [r2, fp]
 80239b4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80239b6:	3201      	adds	r2, #1
 80239b8:	455a      	cmp	r2, fp
 80239ba:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80239bc:	d1b9      	bne.n	8023932 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 80239be:	8811      	ldrh	r1, [r2, #0]
 80239c0:	3101      	adds	r1, #1
 80239c2:	8011      	strh	r1, [r2, #0]
 80239c4:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 80239c8:	9b03      	ldr	r3, [sp, #12]
 80239ca:	3301      	adds	r3, #1
 80239cc:	d0c2      	beq.n	8023954 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 80239ce:	f10b 0a01 	add.w	sl, fp, #1
 80239d2:	9d04      	ldr	r5, [sp, #16]
 80239d4:	f9b5 3000 	ldrsh.w	r3, [r5]
 80239d8:	4553      	cmp	r3, sl
 80239da:	dd88      	ble.n	80238ee <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 80239dc:	01b1      	lsls	r1, r6, #6
 80239de:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 80239e2:	f7ff fd05 	bl	80233f0 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 80239e6:	4683      	mov	fp, r0
 80239e8:	2800      	cmp	r0, #0
 80239ea:	d080      	beq.n	80238ee <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 80239ec:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80239ee:	b183      	cbz	r3, 8023a12 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 80239f0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80239f2:	454b      	cmp	r3, r9
 80239f4:	d00d      	beq.n	8023a12 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 80239f6:	4641      	mov	r1, r8
 80239f8:	9805      	ldr	r0, [sp, #20]
 80239fa:	f7ff fd0d 	bl	8023418 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 80239fe:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8023a02:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8023a06:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8023a08:	65e3      	str	r3, [r4, #92]	; 0x5c
 8023a0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023a0c:	65a3      	str	r3, [r4, #88]	; 0x58
 8023a0e:	2300      	movs	r3, #0
 8023a10:	6563      	str	r3, [r4, #84]	; 0x54
 8023a12:	f9b5 3000 	ldrsh.w	r3, [r5]
 8023a16:	464a      	mov	r2, r9
 8023a18:	f8cd b000 	str.w	fp, [sp]
 8023a1c:	4651      	mov	r1, sl
 8023a1e:	eba3 030a 	sub.w	r3, r3, sl
 8023a22:	4640      	mov	r0, r8
 8023a24:	f001 f884 	bl	8024b30 <_ZN8touchgfx8Scanline7addSpanEiijj>
 8023a28:	e761      	b.n	80238ee <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

08023a2a <_ZN8touchgfx6Canvas6renderEv>:
 8023a2a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8023a2c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8023a30:	4604      	mov	r4, r0
 8023a32:	b913      	cbnz	r3, 8023a3a <_ZN8touchgfx6Canvas6renderEv+0x10>
 8023a34:	2001      	movs	r0, #1
 8023a36:	b003      	add	sp, #12
 8023a38:	bd30      	pop	{r4, r5, pc}
 8023a3a:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8023a3e:	2b00      	cmp	r3, #0
 8023a40:	d131      	bne.n	8023aa6 <_ZN8touchgfx6Canvas6renderEv+0x7c>
 8023a42:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
 8023a46:	2b00      	cmp	r3, #0
 8023a48:	d0f4      	beq.n	8023a34 <_ZN8touchgfx6Canvas6renderEv+0xa>
 8023a4a:	6840      	ldr	r0, [r0, #4]
 8023a4c:	6803      	ldr	r3, [r0, #0]
 8023a4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8023a50:	4798      	blx	r3
 8023a52:	2800      	cmp	r0, #0
 8023a54:	d0ee      	beq.n	8023a34 <_ZN8touchgfx6Canvas6renderEv+0xa>
 8023a56:	4620      	mov	r0, r4
 8023a58:	f7ff fec7 	bl	80237ea <_ZN8touchgfx6Canvas5closeEv>
 8023a5c:	6860      	ldr	r0, [r4, #4]
 8023a5e:	6803      	ldr	r3, [r0, #0]
 8023a60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8023a62:	4798      	blx	r3
 8023a64:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
 8023a68:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
 8023a6c:	f7f3 f8c9 	bl	8016c02 <_ZN8touchgfx15AbstractPainter9setOffsetEtt>
 8023a70:	6860      	ldr	r0, [r4, #4]
 8023a72:	6803      	ldr	r3, [r0, #0]
 8023a74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8023a76:	4798      	blx	r3
 8023a78:	4605      	mov	r5, r0
 8023a7a:	6860      	ldr	r0, [r4, #4]
 8023a7c:	6803      	ldr	r3, [r0, #0]
 8023a7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8023a80:	4798      	blx	r3
 8023a82:	4601      	mov	r1, r0
 8023a84:	4628      	mov	r0, r5
 8023a86:	f7f3 f8bf 	bl	8016c08 <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>
 8023a8a:	6860      	ldr	r0, [r4, #4]
 8023a8c:	6803      	ldr	r3, [r0, #0]
 8023a8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8023a90:	4798      	blx	r3
 8023a92:	f104 0318 	add.w	r3, r4, #24
 8023a96:	4669      	mov	r1, sp
 8023a98:	e9cd 3000 	strd	r3, r0, [sp]
 8023a9c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8023aa0:	f7ff ff06 	bl	80238b0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 8023aa4:	e7c7      	b.n	8023a36 <_ZN8touchgfx6Canvas6renderEv+0xc>
 8023aa6:	2000      	movs	r0, #0
 8023aa8:	e7c5      	b.n	8023a36 <_ZN8touchgfx6Canvas6renderEv+0xc>
	...

08023aac <_ZN8touchgfx6CanvasD1Ev>:
 8023aac:	b538      	push	{r3, r4, r5, lr}
 8023aae:	4605      	mov	r5, r0
 8023ab0:	4b08      	ldr	r3, [pc, #32]	; (8023ad4 <_ZN8touchgfx6CanvasD1Ev+0x28>)
 8023ab2:	4604      	mov	r4, r0
 8023ab4:	f845 3b2c 	str.w	r3, [r5], #44
 8023ab8:	4b07      	ldr	r3, [pc, #28]	; (8023ad8 <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 8023aba:	6818      	ldr	r0, [r3, #0]
 8023abc:	6803      	ldr	r3, [r0, #0]
 8023abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023ac0:	4798      	blx	r3
 8023ac2:	4628      	mov	r0, r5
 8023ac4:	f000 f814 	bl	8023af0 <_ZN8touchgfx7OutlineD1Ev>
 8023ac8:	f104 0018 	add.w	r0, r4, #24
 8023acc:	f001 f870 	bl	8024bb0 <_ZN8touchgfx15RenderingBufferD1Ev>
 8023ad0:	4620      	mov	r0, r4
 8023ad2:	bd38      	pop	{r3, r4, r5, pc}
 8023ad4:	08029e34 	.word	0x08029e34
 8023ad8:	2000bc7c 	.word	0x2000bc7c

08023adc <_ZN8touchgfx6CanvasD0Ev>:
 8023adc:	b510      	push	{r4, lr}
 8023ade:	4604      	mov	r4, r0
 8023ae0:	f7ff ffe4 	bl	8023aac <_ZN8touchgfx6CanvasD1Ev>
 8023ae4:	21b8      	movs	r1, #184	; 0xb8
 8023ae6:	4620      	mov	r0, r4
 8023ae8:	f001 f873 	bl	8024bd2 <_ZdlPvj>
 8023aec:	4620      	mov	r0, r4
 8023aee:	bd10      	pop	{r4, pc}

08023af0 <_ZN8touchgfx7OutlineD1Ev>:
 8023af0:	4770      	bx	lr

08023af2 <_ZN8touchgfx7OutlineD0Ev>:
 8023af2:	b510      	push	{r4, lr}
 8023af4:	4604      	mov	r4, r0
 8023af6:	2148      	movs	r1, #72	; 0x48
 8023af8:	f001 f86b 	bl	8024bd2 <_ZdlPvj>
 8023afc:	4620      	mov	r0, r4
 8023afe:	bd10      	pop	{r4, pc}

08023b00 <_ZN8touchgfx7Outline5resetEv>:
 8023b00:	b510      	push	{r4, lr}
 8023b02:	4604      	mov	r4, r0
 8023b04:	f7f4 f8fc 	bl	8017d00 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8023b08:	60e0      	str	r0, [r4, #12]
 8023b0a:	f7f4 f8ff 	bl	8017d0c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8023b0e:	68e3      	ldr	r3, [r4, #12]
 8023b10:	2200      	movs	r2, #0
 8023b12:	08c0      	lsrs	r0, r0, #3
 8023b14:	6123      	str	r3, [r4, #16]
 8023b16:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8023b1a:	6060      	str	r0, [r4, #4]
 8023b1c:	82a3      	strh	r3, [r4, #20]
 8023b1e:	82e3      	strh	r3, [r4, #22]
 8023b20:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8023b22:	60a2      	str	r2, [r4, #8]
 8023b24:	f023 0301 	bic.w	r3, r3, #1
 8023b28:	8322      	strh	r2, [r4, #24]
 8023b2a:	8362      	strh	r2, [r4, #26]
 8023b2c:	f043 0302 	orr.w	r3, r3, #2
 8023b30:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8023b34:	63e3      	str	r3, [r4, #60]	; 0x3c
 8023b36:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8023b3a:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 8023b3e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8023b42:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8023b46:	bd10      	pop	{r4, pc}

08023b48 <_ZN8touchgfx7OutlineC1Ev>:
 8023b48:	4b0f      	ldr	r3, [pc, #60]	; (8023b88 <_ZN8touchgfx7OutlineC1Ev+0x40>)
 8023b4a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8023b4e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8023b52:	b510      	push	{r4, lr}
 8023b54:	6003      	str	r3, [r0, #0]
 8023b56:	2300      	movs	r3, #0
 8023b58:	4604      	mov	r4, r0
 8023b5a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8023b5e:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8023b62:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8023b66:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8023b6a:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8023b6e:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 8023b72:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 8023b76:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 8023b7a:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 8023b7e:	f7ff ffbf 	bl	8023b00 <_ZN8touchgfx7Outline5resetEv>
 8023b82:	4620      	mov	r0, r4
 8023b84:	bd10      	pop	{r4, pc}
 8023b86:	bf00      	nop
 8023b88:	08029e94 	.word	0x08029e94

08023b8c <_ZN8touchgfx7Outline10renderLineEiiii>:
 8023b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023b90:	b093      	sub	sp, #76	; 0x4c
 8023b92:	4604      	mov	r4, r0
 8023b94:	1156      	asrs	r6, r2, #5
 8023b96:	f002 0e1f 	and.w	lr, r2, #31
 8023b9a:	981c      	ldr	r0, [sp, #112]	; 0x70
 8023b9c:	9305      	str	r3, [sp, #20]
 8023b9e:	1143      	asrs	r3, r0, #5
 8023ba0:	1145      	asrs	r5, r0, #5
 8023ba2:	930c      	str	r3, [sp, #48]	; 0x30
 8023ba4:	f000 031f 	and.w	r3, r0, #31
 8023ba8:	9303      	str	r3, [sp, #12]
 8023baa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8023bac:	42b3      	cmp	r3, r6
 8023bae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8023bb0:	bfc8      	it	gt
 8023bb2:	6326      	strgt	r6, [r4, #48]	; 0x30
 8023bb4:	42b3      	cmp	r3, r6
 8023bb6:	bfdc      	itt	le
 8023bb8:	1c73      	addle	r3, r6, #1
 8023bba:	63a3      	strle	r3, [r4, #56]	; 0x38
 8023bbc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8023bbe:	42ab      	cmp	r3, r5
 8023bc0:	bfc8      	it	gt
 8023bc2:	462b      	movgt	r3, r5
 8023bc4:	ea4f 1560 	mov.w	r5, r0, asr #5
 8023bc8:	bfc8      	it	gt
 8023bca:	6323      	strgt	r3, [r4, #48]	; 0x30
 8023bcc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8023bce:	42ab      	cmp	r3, r5
 8023bd0:	bfd8      	it	le
 8023bd2:	462b      	movle	r3, r5
 8023bd4:	ea4f 1561 	mov.w	r5, r1, asr #5
 8023bd8:	bfdc      	itt	le
 8023bda:	3301      	addle	r3, #1
 8023bdc:	63a3      	strle	r3, [r4, #56]	; 0x38
 8023bde:	9b05      	ldr	r3, [sp, #20]
 8023be0:	eba3 0a01 	sub.w	sl, r3, r1
 8023be4:	1143      	asrs	r3, r0, #5
 8023be6:	429e      	cmp	r6, r3
 8023be8:	f040 8119 	bne.w	8023e1e <_ZN8touchgfx7Outline10renderLineEiiii+0x292>
 8023bec:	9b05      	ldr	r3, [sp, #20]
 8023bee:	ea4f 1c63 	mov.w	ip, r3, asr #5
 8023bf2:	9b03      	ldr	r3, [sp, #12]
 8023bf4:	459e      	cmp	lr, r3
 8023bf6:	d12c      	bne.n	8023c52 <_ZN8touchgfx7Outline10renderLineEiiii+0xc6>
 8023bf8:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8023bfc:	eb0c 4106 	add.w	r1, ip, r6, lsl #16
 8023c00:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8023c04:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 8023c08:	4291      	cmp	r1, r2
 8023c0a:	d037      	beq.n	8023c7c <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8023c0c:	8b61      	ldrh	r1, [r4, #26]
 8023c0e:	8b22      	ldrh	r2, [r4, #24]
 8023c10:	430a      	orrs	r2, r1
 8023c12:	d00b      	beq.n	8023c2c <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8023c14:	2b00      	cmp	r3, #0
 8023c16:	db09      	blt.n	8023c2c <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8023c18:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8023c1a:	429a      	cmp	r2, r3
 8023c1c:	dd06      	ble.n	8023c2c <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8023c1e:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8023c22:	429a      	cmp	r2, r3
 8023c24:	d308      	bcc.n	8023c38 <_ZN8touchgfx7Outline10renderLineEiiii+0xac>
 8023c26:	2301      	movs	r3, #1
 8023c28:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8023c2c:	f8a4 c014 	strh.w	ip, [r4, #20]
 8023c30:	82e6      	strh	r6, [r4, #22]
 8023c32:	2300      	movs	r3, #0
 8023c34:	8323      	strh	r3, [r4, #24]
 8023c36:	e0c6      	b.n	8023dc6 <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 8023c38:	f104 0314 	add.w	r3, r4, #20
 8023c3c:	6922      	ldr	r2, [r4, #16]
 8023c3e:	cb03      	ldmia	r3!, {r0, r1}
 8023c40:	6010      	str	r0, [r2, #0]
 8023c42:	6051      	str	r1, [r2, #4]
 8023c44:	6923      	ldr	r3, [r4, #16]
 8023c46:	3308      	adds	r3, #8
 8023c48:	6123      	str	r3, [r4, #16]
 8023c4a:	68a3      	ldr	r3, [r4, #8]
 8023c4c:	3301      	adds	r3, #1
 8023c4e:	60a3      	str	r3, [r4, #8]
 8023c50:	e7ec      	b.n	8023c2c <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8023c52:	9b05      	ldr	r3, [sp, #20]
 8023c54:	45ac      	cmp	ip, r5
 8023c56:	f001 011f 	and.w	r1, r1, #31
 8023c5a:	8b20      	ldrh	r0, [r4, #24]
 8023c5c:	f003 031f 	and.w	r3, r3, #31
 8023c60:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8023c64:	9304      	str	r3, [sp, #16]
 8023c66:	9b03      	ldr	r3, [sp, #12]
 8023c68:	eba3 020e 	sub.w	r2, r3, lr
 8023c6c:	d109      	bne.n	8023c82 <_ZN8touchgfx7Outline10renderLineEiiii+0xf6>
 8023c6e:	9b04      	ldr	r3, [sp, #16]
 8023c70:	4410      	add	r0, r2
 8023c72:	4419      	add	r1, r3
 8023c74:	8320      	strh	r0, [r4, #24]
 8023c76:	fb02 8201 	mla	r2, r2, r1, r8
 8023c7a:	8362      	strh	r2, [r4, #26]
 8023c7c:	b013      	add	sp, #76	; 0x4c
 8023c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023c82:	f1ba 0f00 	cmp.w	sl, #0
 8023c86:	f2c0 80a0 	blt.w	8023dca <_ZN8touchgfx7Outline10renderLineEiiii+0x23e>
 8023c8a:	f1c1 0320 	rsb	r3, r1, #32
 8023c8e:	f04f 0b20 	mov.w	fp, #32
 8023c92:	435a      	muls	r2, r3
 8023c94:	2301      	movs	r3, #1
 8023c96:	9302      	str	r3, [sp, #8]
 8023c98:	4459      	add	r1, fp
 8023c9a:	fb92 f7fa 	sdiv	r7, r2, sl
 8023c9e:	fb0a 2217 	mls	r2, sl, r7, r2
 8023ca2:	2a00      	cmp	r2, #0
 8023ca4:	bfbc      	itt	lt
 8023ca6:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8023caa:	4452      	addlt	r2, sl
 8023cac:	fb07 8101 	mla	r1, r7, r1, r8
 8023cb0:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8023cb4:	4438      	add	r0, r7
 8023cb6:	b20b      	sxth	r3, r1
 8023cb8:	9902      	ldr	r1, [sp, #8]
 8023cba:	b200      	sxth	r0, r0
 8023cbc:	9301      	str	r3, [sp, #4]
 8023cbe:	8363      	strh	r3, [r4, #26]
 8023cc0:	186b      	adds	r3, r5, r1
 8023cc2:	0435      	lsls	r5, r6, #16
 8023cc4:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8023cc8:	8320      	strh	r0, [r4, #24]
 8023cca:	eb03 0905 	add.w	r9, r3, r5
 8023cce:	eb08 4801 	add.w	r8, r8, r1, lsl #16
 8023cd2:	9300      	str	r3, [sp, #0]
 8023cd4:	45c1      	cmp	r9, r8
 8023cd6:	9505      	str	r5, [sp, #20]
 8023cd8:	d014      	beq.n	8023d04 <_ZN8touchgfx7Outline10renderLineEiiii+0x178>
 8023cda:	9b01      	ldr	r3, [sp, #4]
 8023cdc:	4303      	orrs	r3, r0
 8023cde:	d00b      	beq.n	8023cf8 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8023ce0:	2900      	cmp	r1, #0
 8023ce2:	db09      	blt.n	8023cf8 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8023ce4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8023ce6:	428b      	cmp	r3, r1
 8023ce8:	dd06      	ble.n	8023cf8 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8023cea:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8023cee:	4299      	cmp	r1, r3
 8023cf0:	d374      	bcc.n	8023ddc <_ZN8touchgfx7Outline10renderLineEiiii+0x250>
 8023cf2:	2301      	movs	r3, #1
 8023cf4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8023cf8:	9b00      	ldr	r3, [sp, #0]
 8023cfa:	82e6      	strh	r6, [r4, #22]
 8023cfc:	82a3      	strh	r3, [r4, #20]
 8023cfe:	2300      	movs	r3, #0
 8023d00:	8323      	strh	r3, [r4, #24]
 8023d02:	8363      	strh	r3, [r4, #26]
 8023d04:	9900      	ldr	r1, [sp, #0]
 8023d06:	eb0e 0307 	add.w	r3, lr, r7
 8023d0a:	458c      	cmp	ip, r1
 8023d0c:	d04e      	beq.n	8023dac <_ZN8touchgfx7Outline10renderLineEiiii+0x220>
 8023d0e:	9903      	ldr	r1, [sp, #12]
 8023d10:	eba2 020a 	sub.w	r2, r2, sl
 8023d14:	1ac9      	subs	r1, r1, r3
 8023d16:	9201      	str	r2, [sp, #4]
 8023d18:	440f      	add	r7, r1
 8023d1a:	017f      	lsls	r7, r7, #5
 8023d1c:	fb97 fefa 	sdiv	lr, r7, sl
 8023d20:	fb0a 771e 	mls	r7, sl, lr, r7
 8023d24:	2f00      	cmp	r7, #0
 8023d26:	bfbc      	itt	lt
 8023d28:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8023d2c:	4457      	addlt	r7, sl
 8023d2e:	f10e 0101 	add.w	r1, lr, #1
 8023d32:	9106      	str	r1, [sp, #24]
 8023d34:	9a01      	ldr	r2, [sp, #4]
 8023d36:	8b20      	ldrh	r0, [r4, #24]
 8023d38:	19d2      	adds	r2, r2, r7
 8023d3a:	8b61      	ldrh	r1, [r4, #26]
 8023d3c:	9d02      	ldr	r5, [sp, #8]
 8023d3e:	9201      	str	r2, [sp, #4]
 8023d40:	bf5b      	ittet	pl
 8023d42:	eba2 020a 	subpl.w	r2, r2, sl
 8023d46:	f8dd 8018 	ldrpl.w	r8, [sp, #24]
 8023d4a:	46f0      	movmi	r8, lr
 8023d4c:	9201      	strpl	r2, [sp, #4]
 8023d4e:	9a00      	ldr	r2, [sp, #0]
 8023d50:	4440      	add	r0, r8
 8023d52:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 8023d56:	4443      	add	r3, r8
 8023d58:	442a      	add	r2, r5
 8023d5a:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8023d5e:	9d05      	ldr	r5, [sp, #20]
 8023d60:	b200      	sxth	r0, r0
 8023d62:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8023d66:	b209      	sxth	r1, r1
 8023d68:	4415      	add	r5, r2
 8023d6a:	8320      	strh	r0, [r4, #24]
 8023d6c:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8023d70:	8361      	strh	r1, [r4, #26]
 8023d72:	9200      	str	r2, [sp, #0]
 8023d74:	454d      	cmp	r5, r9
 8023d76:	d016      	beq.n	8023da6 <_ZN8touchgfx7Outline10renderLineEiiii+0x21a>
 8023d78:	4301      	orrs	r1, r0
 8023d7a:	d00d      	beq.n	8023d98 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8023d7c:	f1b8 0f00 	cmp.w	r8, #0
 8023d80:	db0a      	blt.n	8023d98 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8023d82:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023d84:	4541      	cmp	r1, r8
 8023d86:	dd07      	ble.n	8023d98 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8023d88:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8023d8c:	4288      	cmp	r0, r1
 8023d8e:	d335      	bcc.n	8023dfc <_ZN8touchgfx7Outline10renderLineEiiii+0x270>
 8023d90:	f04f 0101 	mov.w	r1, #1
 8023d94:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8023d98:	9900      	ldr	r1, [sp, #0]
 8023d9a:	82e6      	strh	r6, [r4, #22]
 8023d9c:	82a1      	strh	r1, [r4, #20]
 8023d9e:	f04f 0100 	mov.w	r1, #0
 8023da2:	8321      	strh	r1, [r4, #24]
 8023da4:	8361      	strh	r1, [r4, #26]
 8023da6:	9a00      	ldr	r2, [sp, #0]
 8023da8:	4594      	cmp	ip, r2
 8023daa:	d1c3      	bne.n	8023d34 <_ZN8touchgfx7Outline10renderLineEiiii+0x1a8>
 8023dac:	9a03      	ldr	r2, [sp, #12]
 8023dae:	f8b4 c01a 	ldrh.w	ip, [r4, #26]
 8023db2:	1ad3      	subs	r3, r2, r3
 8023db4:	8b22      	ldrh	r2, [r4, #24]
 8023db6:	441a      	add	r2, r3
 8023db8:	8322      	strh	r2, [r4, #24]
 8023dba:	9a04      	ldr	r2, [sp, #16]
 8023dbc:	3220      	adds	r2, #32
 8023dbe:	eba2 020b 	sub.w	r2, r2, fp
 8023dc2:	fb03 c302 	mla	r3, r3, r2, ip
 8023dc6:	8363      	strh	r3, [r4, #26]
 8023dc8:	e758      	b.n	8023c7c <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8023dca:	f04f 33ff 	mov.w	r3, #4294967295
 8023dce:	434a      	muls	r2, r1
 8023dd0:	f1ca 0a00 	rsb	sl, sl, #0
 8023dd4:	f04f 0b00 	mov.w	fp, #0
 8023dd8:	9302      	str	r3, [sp, #8]
 8023dda:	e75d      	b.n	8023c98 <_ZN8touchgfx7Outline10renderLineEiiii+0x10c>
 8023ddc:	f104 0314 	add.w	r3, r4, #20
 8023de0:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8023de4:	cb03      	ldmia	r3!, {r0, r1}
 8023de6:	f8c8 0000 	str.w	r0, [r8]
 8023dea:	f8c8 1004 	str.w	r1, [r8, #4]
 8023dee:	6923      	ldr	r3, [r4, #16]
 8023df0:	3308      	adds	r3, #8
 8023df2:	6123      	str	r3, [r4, #16]
 8023df4:	68a3      	ldr	r3, [r4, #8]
 8023df6:	3301      	adds	r3, #1
 8023df8:	60a3      	str	r3, [r4, #8]
 8023dfa:	e77d      	b.n	8023cf8 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8023dfc:	f104 0814 	add.w	r8, r4, #20
 8023e00:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8023e04:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8023e08:	f8c9 0000 	str.w	r0, [r9]
 8023e0c:	f8c9 1004 	str.w	r1, [r9, #4]
 8023e10:	6921      	ldr	r1, [r4, #16]
 8023e12:	3108      	adds	r1, #8
 8023e14:	6121      	str	r1, [r4, #16]
 8023e16:	68a1      	ldr	r1, [r4, #8]
 8023e18:	3101      	adds	r1, #1
 8023e1a:	60a1      	str	r1, [r4, #8]
 8023e1c:	e7bc      	b.n	8023d98 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8023e1e:	1a83      	subs	r3, r0, r2
 8023e20:	9301      	str	r3, [sp, #4]
 8023e22:	f1ba 0f00 	cmp.w	sl, #0
 8023e26:	f040 8094 	bne.w	8023f52 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c6>
 8023e2a:	9a01      	ldr	r2, [sp, #4]
 8023e2c:	0049      	lsls	r1, r1, #1
 8023e2e:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 8023e32:	2a00      	cmp	r2, #0
 8023e34:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 8023e38:	8b62      	ldrh	r2, [r4, #26]
 8023e3a:	bfaa      	itet	ge
 8023e3c:	f04f 0a20 	movge.w	sl, #32
 8023e40:	f04f 38ff 	movlt.w	r8, #4294967295
 8023e44:	f04f 0801 	movge.w	r8, #1
 8023e48:	8b21      	ldrh	r1, [r4, #24]
 8023e4a:	ebaa 0e0e 	sub.w	lr, sl, lr
 8023e4e:	4471      	add	r1, lr
 8023e50:	fb0e 2e03 	mla	lr, lr, r3, r2
 8023e54:	eb08 0206 	add.w	r2, r8, r6
 8023e58:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8023e5c:	b209      	sxth	r1, r1
 8023e5e:	eb05 4702 	add.w	r7, r5, r2, lsl #16
 8023e62:	eb06 4600 	add.w	r6, r6, r0, lsl #16
 8023e66:	8321      	strh	r1, [r4, #24]
 8023e68:	fa0f fe8e 	sxth.w	lr, lr
 8023e6c:	42b7      	cmp	r7, r6
 8023e6e:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8023e72:	d013      	beq.n	8023e9c <_ZN8touchgfx7Outline10renderLineEiiii+0x310>
 8023e74:	ea51 010e 	orrs.w	r1, r1, lr
 8023e78:	d00b      	beq.n	8023e92 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8023e7a:	2800      	cmp	r0, #0
 8023e7c:	db09      	blt.n	8023e92 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8023e7e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023e80:	4281      	cmp	r1, r0
 8023e82:	dd06      	ble.n	8023e92 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8023e84:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8023e88:	4288      	cmp	r0, r1
 8023e8a:	d339      	bcc.n	8023f00 <_ZN8touchgfx7Outline10renderLineEiiii+0x374>
 8023e8c:	2101      	movs	r1, #1
 8023e8e:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8023e92:	2100      	movs	r1, #0
 8023e94:	82a5      	strh	r5, [r4, #20]
 8023e96:	82e2      	strh	r2, [r4, #22]
 8023e98:	8321      	strh	r1, [r4, #24]
 8023e9a:	8361      	strh	r1, [r4, #26]
 8023e9c:	f1aa 0610 	sub.w	r6, sl, #16
 8023ea0:	f04f 0e00 	mov.w	lr, #0
 8023ea4:	f04f 0b01 	mov.w	fp, #1
 8023ea8:	0076      	lsls	r6, r6, #1
 8023eaa:	fb06 f703 	mul.w	r7, r6, r3
 8023eae:	b236      	sxth	r6, r6
 8023eb0:	b23f      	sxth	r7, r7
 8023eb2:	ea46 0107 	orr.w	r1, r6, r7
 8023eb6:	9100      	str	r1, [sp, #0]
 8023eb8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023eba:	428a      	cmp	r2, r1
 8023ebc:	d03e      	beq.n	8023f3c <_ZN8touchgfx7Outline10renderLineEiiii+0x3b0>
 8023ebe:	4442      	add	r2, r8
 8023ec0:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8023ec4:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8023ec8:	eb05 4c02 	add.w	ip, r5, r2, lsl #16
 8023ecc:	8326      	strh	r6, [r4, #24]
 8023ece:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 8023ed2:	8367      	strh	r7, [r4, #26]
 8023ed4:	4584      	cmp	ip, r0
 8023ed6:	d0ef      	beq.n	8023eb8 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 8023ed8:	9800      	ldr	r0, [sp, #0]
 8023eda:	b150      	cbz	r0, 8023ef2 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8023edc:	2900      	cmp	r1, #0
 8023ede:	db08      	blt.n	8023ef2 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8023ee0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8023ee2:	4288      	cmp	r0, r1
 8023ee4:	dd05      	ble.n	8023ef2 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8023ee6:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8023eea:	4288      	cmp	r0, r1
 8023eec:	d315      	bcc.n	8023f1a <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 8023eee:	f884 b044 	strb.w	fp, [r4, #68]	; 0x44
 8023ef2:	82a5      	strh	r5, [r4, #20]
 8023ef4:	82e2      	strh	r2, [r4, #22]
 8023ef6:	f8a4 e018 	strh.w	lr, [r4, #24]
 8023efa:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8023efe:	e7db      	b.n	8023eb8 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 8023f00:	f104 0614 	add.w	r6, r4, #20
 8023f04:	6927      	ldr	r7, [r4, #16]
 8023f06:	ce03      	ldmia	r6!, {r0, r1}
 8023f08:	6038      	str	r0, [r7, #0]
 8023f0a:	6079      	str	r1, [r7, #4]
 8023f0c:	6921      	ldr	r1, [r4, #16]
 8023f0e:	3108      	adds	r1, #8
 8023f10:	6121      	str	r1, [r4, #16]
 8023f12:	68a1      	ldr	r1, [r4, #8]
 8023f14:	3101      	adds	r1, #1
 8023f16:	60a1      	str	r1, [r4, #8]
 8023f18:	e7bb      	b.n	8023e92 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8023f1a:	f104 0c14 	add.w	ip, r4, #20
 8023f1e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8023f22:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 8023f26:	f8c9 0000 	str.w	r0, [r9]
 8023f2a:	f8c9 1004 	str.w	r1, [r9, #4]
 8023f2e:	6921      	ldr	r1, [r4, #16]
 8023f30:	3108      	adds	r1, #8
 8023f32:	6121      	str	r1, [r4, #16]
 8023f34:	68a1      	ldr	r1, [r4, #8]
 8023f36:	3101      	adds	r1, #1
 8023f38:	60a1      	str	r1, [r4, #8]
 8023f3a:	e7da      	b.n	8023ef2 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8023f3c:	9a03      	ldr	r2, [sp, #12]
 8023f3e:	8b61      	ldrh	r1, [r4, #26]
 8023f40:	f1a2 0c20 	sub.w	ip, r2, #32
 8023f44:	8b22      	ldrh	r2, [r4, #24]
 8023f46:	44d4      	add	ip, sl
 8023f48:	4462      	add	r2, ip
 8023f4a:	fb0c 1303 	mla	r3, ip, r3, r1
 8023f4e:	8322      	strh	r2, [r4, #24]
 8023f50:	e739      	b.n	8023dc6 <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 8023f52:	9b01      	ldr	r3, [sp, #4]
 8023f54:	2b00      	cmp	r3, #0
 8023f56:	db3f      	blt.n	8023fd8 <_ZN8touchgfx7Outline10renderLineEiiii+0x44c>
 8023f58:	2201      	movs	r2, #1
 8023f5a:	f1ce 0320 	rsb	r3, lr, #32
 8023f5e:	920b      	str	r2, [sp, #44]	; 0x2c
 8023f60:	2220      	movs	r2, #32
 8023f62:	fb0a f303 	mul.w	r3, sl, r3
 8023f66:	9202      	str	r2, [sp, #8]
 8023f68:	9a01      	ldr	r2, [sp, #4]
 8023f6a:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8023f6e:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8023f72:	fb93 f7f2 	sdiv	r7, r3, r2
 8023f76:	fb02 3317 	mls	r3, r2, r7, r3
 8023f7a:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8023f7e:	2b00      	cmp	r3, #0
 8023f80:	9308      	str	r3, [sp, #32]
 8023f82:	bfbc      	itt	lt
 8023f84:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8023f88:	189b      	addlt	r3, r3, r2
 8023f8a:	eb07 0b01 	add.w	fp, r7, r1
 8023f8e:	bfb8      	it	lt
 8023f90:	9308      	strlt	r3, [sp, #32]
 8023f92:	ea4f 136b 	mov.w	r3, fp, asr #5
 8023f96:	9304      	str	r3, [sp, #16]
 8023f98:	9b02      	ldr	r3, [sp, #8]
 8023f9a:	4573      	cmp	r3, lr
 8023f9c:	d133      	bne.n	8024006 <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 8023f9e:	9b04      	ldr	r3, [sp, #16]
 8023fa0:	eb03 4306 	add.w	r3, r3, r6, lsl #16
 8023fa4:	454b      	cmp	r3, r9
 8023fa6:	d045      	beq.n	8024034 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 8023fa8:	8b62      	ldrh	r2, [r4, #26]
 8023faa:	8b23      	ldrh	r3, [r4, #24]
 8023fac:	4313      	orrs	r3, r2
 8023fae:	d00c      	beq.n	8023fca <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8023fb0:	f1b8 0f00 	cmp.w	r8, #0
 8023fb4:	db09      	blt.n	8023fca <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8023fb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8023fb8:	4543      	cmp	r3, r8
 8023fba:	dd06      	ble.n	8023fca <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8023fbc:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8023fc0:	429a      	cmp	r2, r3
 8023fc2:	d313      	bcc.n	8023fec <_ZN8touchgfx7Outline10renderLineEiiii+0x460>
 8023fc4:	2301      	movs	r3, #1
 8023fc6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8023fca:	9b04      	ldr	r3, [sp, #16]
 8023fcc:	82e6      	strh	r6, [r4, #22]
 8023fce:	82a3      	strh	r3, [r4, #20]
 8023fd0:	2300      	movs	r3, #0
 8023fd2:	8323      	strh	r3, [r4, #24]
 8023fd4:	8363      	strh	r3, [r4, #26]
 8023fd6:	e02d      	b.n	8024034 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 8023fd8:	9a01      	ldr	r2, [sp, #4]
 8023fda:	fb0a f30e 	mul.w	r3, sl, lr
 8023fde:	4252      	negs	r2, r2
 8023fe0:	9201      	str	r2, [sp, #4]
 8023fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8023fe6:	920b      	str	r2, [sp, #44]	; 0x2c
 8023fe8:	2200      	movs	r2, #0
 8023fea:	e7bc      	b.n	8023f66 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8023fec:	f104 0314 	add.w	r3, r4, #20
 8023ff0:	6922      	ldr	r2, [r4, #16]
 8023ff2:	cb03      	ldmia	r3!, {r0, r1}
 8023ff4:	6010      	str	r0, [r2, #0]
 8023ff6:	6051      	str	r1, [r2, #4]
 8023ff8:	6923      	ldr	r3, [r4, #16]
 8023ffa:	3308      	adds	r3, #8
 8023ffc:	6123      	str	r3, [r4, #16]
 8023ffe:	68a3      	ldr	r3, [r4, #8]
 8024000:	3301      	adds	r3, #1
 8024002:	60a3      	str	r3, [r4, #8]
 8024004:	e7e1      	b.n	8023fca <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8024006:	f00b 031f 	and.w	r3, fp, #31
 802400a:	f001 011f 	and.w	r1, r1, #31
 802400e:	8b20      	ldrh	r0, [r4, #24]
 8024010:	9309      	str	r3, [sp, #36]	; 0x24
 8024012:	9b02      	ldr	r3, [sp, #8]
 8024014:	eba3 020e 	sub.w	r2, r3, lr
 8024018:	8b63      	ldrh	r3, [r4, #26]
 802401a:	9300      	str	r3, [sp, #0]
 802401c:	9b04      	ldr	r3, [sp, #16]
 802401e:	42ab      	cmp	r3, r5
 8024020:	f040 80ef 	bne.w	8024202 <_ZN8touchgfx7Outline10renderLineEiiii+0x676>
 8024024:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024026:	4410      	add	r0, r2
 8024028:	4419      	add	r1, r3
 802402a:	9b00      	ldr	r3, [sp, #0]
 802402c:	8320      	strh	r0, [r4, #24]
 802402e:	fb02 3101 	mla	r1, r2, r1, r3
 8024032:	8361      	strh	r1, [r4, #26]
 8024034:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024036:	9904      	ldr	r1, [sp, #16]
 8024038:	4433      	add	r3, r6
 802403a:	9300      	str	r3, [sp, #0]
 802403c:	9a00      	ldr	r2, [sp, #0]
 802403e:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8024042:	eb01 4002 	add.w	r0, r1, r2, lsl #16
 8024046:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 802404a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802404e:	4288      	cmp	r0, r1
 8024050:	d018      	beq.n	8024084 <_ZN8touchgfx7Outline10renderLineEiiii+0x4f8>
 8024052:	8b60      	ldrh	r0, [r4, #26]
 8024054:	8b21      	ldrh	r1, [r4, #24]
 8024056:	ea50 0201 	orrs.w	r2, r0, r1
 802405a:	d00c      	beq.n	8024076 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 802405c:	2b00      	cmp	r3, #0
 802405e:	db0a      	blt.n	8024076 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8024060:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024062:	4299      	cmp	r1, r3
 8024064:	dd07      	ble.n	8024076 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8024066:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802406a:	4299      	cmp	r1, r3
 802406c:	f0c0 818b 	bcc.w	8024386 <_ZN8touchgfx7Outline10renderLineEiiii+0x7fa>
 8024070:	2301      	movs	r3, #1
 8024072:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024076:	9b04      	ldr	r3, [sp, #16]
 8024078:	82a3      	strh	r3, [r4, #20]
 802407a:	9b00      	ldr	r3, [sp, #0]
 802407c:	82e3      	strh	r3, [r4, #22]
 802407e:	2300      	movs	r3, #0
 8024080:	8323      	strh	r3, [r4, #24]
 8024082:	8363      	strh	r3, [r4, #26]
 8024084:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024086:	9a00      	ldr	r2, [sp, #0]
 8024088:	4293      	cmp	r3, r2
 802408a:	f000 808d 	beq.w	80241a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x61c>
 802408e:	ea4f 134a 	mov.w	r3, sl, lsl #5
 8024092:	9901      	ldr	r1, [sp, #4]
 8024094:	9801      	ldr	r0, [sp, #4]
 8024096:	fb93 f1f1 	sdiv	r1, r3, r1
 802409a:	fb00 3311 	mls	r3, r0, r1, r3
 802409e:	9106      	str	r1, [sp, #24]
 80240a0:	2b00      	cmp	r3, #0
 80240a2:	9307      	str	r3, [sp, #28]
 80240a4:	da04      	bge.n	80240b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x524>
 80240a6:	1e4b      	subs	r3, r1, #1
 80240a8:	9306      	str	r3, [sp, #24]
 80240aa:	9b07      	ldr	r3, [sp, #28]
 80240ac:	4403      	add	r3, r0
 80240ae:	9307      	str	r3, [sp, #28]
 80240b0:	9b08      	ldr	r3, [sp, #32]
 80240b2:	f04f 0c00 	mov.w	ip, #0
 80240b6:	9901      	ldr	r1, [sp, #4]
 80240b8:	1a5b      	subs	r3, r3, r1
 80240ba:	4659      	mov	r1, fp
 80240bc:	9308      	str	r3, [sp, #32]
 80240be:	9b02      	ldr	r3, [sp, #8]
 80240c0:	f1c3 0320 	rsb	r3, r3, #32
 80240c4:	930a      	str	r3, [sp, #40]	; 0x28
 80240c6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80240c8:	9b02      	ldr	r3, [sp, #8]
 80240ca:	1a1b      	subs	r3, r3, r0
 80240cc:	9309      	str	r3, [sp, #36]	; 0x24
 80240ce:	f9b4 e016 	ldrsh.w	lr, [r4, #22]
 80240d2:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 80240d6:	e9dd 0307 	ldrd	r0, r3, [sp, #28]
 80240da:	eb08 480e 	add.w	r8, r8, lr, lsl #16
 80240de:	181b      	adds	r3, r3, r0
 80240e0:	bf58      	it	pl
 80240e2:	9801      	ldrpl	r0, [sp, #4]
 80240e4:	9308      	str	r3, [sp, #32]
 80240e6:	bf54      	ite	pl
 80240e8:	1a1b      	subpl	r3, r3, r0
 80240ea:	9d06      	ldrmi	r5, [sp, #24]
 80240ec:	9802      	ldr	r0, [sp, #8]
 80240ee:	bf5e      	ittt	pl
 80240f0:	9308      	strpl	r3, [sp, #32]
 80240f2:	9b06      	ldrpl	r3, [sp, #24]
 80240f4:	1c5d      	addpl	r5, r3, #1
 80240f6:	44ab      	add	fp, r5
 80240f8:	ea4f 136b 	mov.w	r3, fp, asr #5
 80240fc:	9304      	str	r3, [sp, #16]
 80240fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024100:	4283      	cmp	r3, r0
 8024102:	f040 815a 	bne.w	80243ba <_ZN8touchgfx7Outline10renderLineEiiii+0x82e>
 8024106:	9b04      	ldr	r3, [sp, #16]
 8024108:	9a00      	ldr	r2, [sp, #0]
 802410a:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 802410e:	4543      	cmp	r3, r8
 8024110:	d01a      	beq.n	8024148 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8024112:	8b61      	ldrh	r1, [r4, #26]
 8024114:	8b23      	ldrh	r3, [r4, #24]
 8024116:	430b      	orrs	r3, r1
 8024118:	d00e      	beq.n	8024138 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 802411a:	f1be 0f00 	cmp.w	lr, #0
 802411e:	db0b      	blt.n	8024138 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8024120:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8024122:	4573      	cmp	r3, lr
 8024124:	dd08      	ble.n	8024138 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8024126:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802412a:	4299      	cmp	r1, r3
 802412c:	f0c0 8138 	bcc.w	80243a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x814>
 8024130:	f04f 0301 	mov.w	r3, #1
 8024134:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024138:	9b04      	ldr	r3, [sp, #16]
 802413a:	f8a4 c018 	strh.w	ip, [r4, #24]
 802413e:	82a3      	strh	r3, [r4, #20]
 8024140:	9b00      	ldr	r3, [sp, #0]
 8024142:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8024146:	82e3      	strh	r3, [r4, #22]
 8024148:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802414a:	9a00      	ldr	r2, [sp, #0]
 802414c:	441a      	add	r2, r3
 802414e:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8024152:	9200      	str	r2, [sp, #0]
 8024154:	9900      	ldr	r1, [sp, #0]
 8024156:	9a04      	ldr	r2, [sp, #16]
 8024158:	eb02 4001 	add.w	r0, r2, r1, lsl #16
 802415c:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8024160:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8024164:	4288      	cmp	r0, r1
 8024166:	d01a      	beq.n	802419e <_ZN8touchgfx7Outline10renderLineEiiii+0x612>
 8024168:	8b60      	ldrh	r0, [r4, #26]
 802416a:	8b21      	ldrh	r1, [r4, #24]
 802416c:	ea50 0201 	orrs.w	r2, r0, r1
 8024170:	d00d      	beq.n	802418e <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8024172:	2b00      	cmp	r3, #0
 8024174:	db0b      	blt.n	802418e <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8024176:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024178:	4299      	cmp	r1, r3
 802417a:	dd08      	ble.n	802418e <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 802417c:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8024180:	4299      	cmp	r1, r3
 8024182:	f0c0 81f9 	bcc.w	8024578 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ec>
 8024186:	f04f 0301 	mov.w	r3, #1
 802418a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802418e:	9b04      	ldr	r3, [sp, #16]
 8024190:	f8a4 c018 	strh.w	ip, [r4, #24]
 8024194:	82a3      	strh	r3, [r4, #20]
 8024196:	9b00      	ldr	r3, [sp, #0]
 8024198:	f8a4 c01a 	strh.w	ip, [r4, #26]
 802419c:	82e3      	strh	r3, [r4, #22]
 802419e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80241a0:	4659      	mov	r1, fp
 80241a2:	9a00      	ldr	r2, [sp, #0]
 80241a4:	4293      	cmp	r3, r2
 80241a6:	d192      	bne.n	80240ce <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 80241a8:	9b02      	ldr	r3, [sp, #8]
 80241aa:	f1c3 0c20 	rsb	ip, r3, #32
 80241ae:	9b05      	ldr	r3, [sp, #20]
 80241b0:	ea4f 1e63 	mov.w	lr, r3, asr #5
 80241b4:	9b03      	ldr	r3, [sp, #12]
 80241b6:	459c      	cmp	ip, r3
 80241b8:	f040 81f8 	bne.w	80245ac <_ZN8touchgfx7Outline10renderLineEiiii+0xa20>
 80241bc:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80241c0:	9a00      	ldr	r2, [sp, #0]
 80241c2:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 80241c6:	eb0e 4002 	add.w	r0, lr, r2, lsl #16
 80241ca:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80241ce:	4288      	cmp	r0, r1
 80241d0:	f43f ad54 	beq.w	8023c7c <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 80241d4:	8b60      	ldrh	r0, [r4, #26]
 80241d6:	8b21      	ldrh	r1, [r4, #24]
 80241d8:	ea50 0201 	orrs.w	r2, r0, r1
 80241dc:	d00c      	beq.n	80241f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 80241de:	2b00      	cmp	r3, #0
 80241e0:	db0a      	blt.n	80241f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 80241e2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80241e4:	4299      	cmp	r1, r3
 80241e6:	dd07      	ble.n	80241f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 80241e8:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80241ec:	4299      	cmp	r1, r3
 80241ee:	f0c0 81d0 	bcc.w	8024592 <_ZN8touchgfx7Outline10renderLineEiiii+0xa06>
 80241f2:	2301      	movs	r3, #1
 80241f4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80241f8:	9b00      	ldr	r3, [sp, #0]
 80241fa:	f8a4 e014 	strh.w	lr, [r4, #20]
 80241fe:	82e3      	strh	r3, [r4, #22]
 8024200:	e517      	b.n	8023c32 <_ZN8touchgfx7Outline10renderLineEiiii+0xa6>
 8024202:	2f00      	cmp	r7, #0
 8024204:	f2c0 8097 	blt.w	8024336 <_ZN8touchgfx7Outline10renderLineEiiii+0x7aa>
 8024208:	2301      	movs	r3, #1
 802420a:	f1c1 0c20 	rsb	ip, r1, #32
 802420e:	9307      	str	r3, [sp, #28]
 8024210:	2320      	movs	r3, #32
 8024212:	fb02 f20c 	mul.w	r2, r2, ip
 8024216:	9306      	str	r3, [sp, #24]
 8024218:	9b06      	ldr	r3, [sp, #24]
 802421a:	fb92 fcf7 	sdiv	ip, r2, r7
 802421e:	fb07 221c 	mls	r2, r7, ip, r2
 8024222:	4419      	add	r1, r3
 8024224:	9b00      	ldr	r3, [sp, #0]
 8024226:	2a00      	cmp	r2, #0
 8024228:	bfbc      	itt	lt
 802422a:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 802422e:	19d2      	addlt	r2, r2, r7
 8024230:	fb0c 3101 	mla	r1, ip, r1, r3
 8024234:	9b07      	ldr	r3, [sp, #28]
 8024236:	4460      	add	r0, ip
 8024238:	441d      	add	r5, r3
 802423a:	0433      	lsls	r3, r6, #16
 802423c:	b200      	sxth	r0, r0
 802423e:	930a      	str	r3, [sp, #40]	; 0x28
 8024240:	18eb      	adds	r3, r5, r3
 8024242:	b209      	sxth	r1, r1
 8024244:	8320      	strh	r0, [r4, #24]
 8024246:	454b      	cmp	r3, r9
 8024248:	8361      	strh	r1, [r4, #26]
 802424a:	d014      	beq.n	8024276 <_ZN8touchgfx7Outline10renderLineEiiii+0x6ea>
 802424c:	ea50 0301 	orrs.w	r3, r0, r1
 8024250:	d00c      	beq.n	802426c <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8024252:	f1b8 0f00 	cmp.w	r8, #0
 8024256:	db09      	blt.n	802426c <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8024258:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802425a:	4543      	cmp	r3, r8
 802425c:	dd06      	ble.n	802426c <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 802425e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8024262:	4299      	cmp	r1, r3
 8024264:	d36e      	bcc.n	8024344 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 8024266:	2301      	movs	r3, #1
 8024268:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802426c:	2300      	movs	r3, #0
 802426e:	82a5      	strh	r5, [r4, #20]
 8024270:	82e6      	strh	r6, [r4, #22]
 8024272:	8323      	strh	r3, [r4, #24]
 8024274:	8363      	strh	r3, [r4, #26]
 8024276:	9904      	ldr	r1, [sp, #16]
 8024278:	eb0e 030c 	add.w	r3, lr, ip
 802427c:	42a9      	cmp	r1, r5
 802427e:	d04d      	beq.n	802431c <_ZN8touchgfx7Outline10renderLineEiiii+0x790>
 8024280:	9902      	ldr	r1, [sp, #8]
 8024282:	1bd2      	subs	r2, r2, r7
 8024284:	1ac9      	subs	r1, r1, r3
 8024286:	9200      	str	r2, [sp, #0]
 8024288:	448c      	add	ip, r1
 802428a:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 802428e:	fb9c fef7 	sdiv	lr, ip, r7
 8024292:	fb07 cc1e 	mls	ip, r7, lr, ip
 8024296:	f1bc 0f00 	cmp.w	ip, #0
 802429a:	bfbc      	itt	lt
 802429c:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 80242a0:	44bc      	addlt	ip, r7
 80242a2:	f10e 0101 	add.w	r1, lr, #1
 80242a6:	910d      	str	r1, [sp, #52]	; 0x34
 80242a8:	9a00      	ldr	r2, [sp, #0]
 80242aa:	8b20      	ldrh	r0, [r4, #24]
 80242ac:	eb12 020c 	adds.w	r2, r2, ip
 80242b0:	8b61      	ldrh	r1, [r4, #26]
 80242b2:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 80242b6:	9200      	str	r2, [sp, #0]
 80242b8:	bf5b      	ittet	pl
 80242ba:	1bd2      	subpl	r2, r2, r7
 80242bc:	f8dd 8034 	ldrpl.w	r8, [sp, #52]	; 0x34
 80242c0:	46f0      	movmi	r8, lr
 80242c2:	9200      	strpl	r2, [sp, #0]
 80242c4:	9a07      	ldr	r2, [sp, #28]
 80242c6:	4440      	add	r0, r8
 80242c8:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 80242cc:	4443      	add	r3, r8
 80242ce:	4415      	add	r5, r2
 80242d0:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 80242d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80242d6:	b200      	sxth	r0, r0
 80242d8:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 80242dc:	442a      	add	r2, r5
 80242de:	b209      	sxth	r1, r1
 80242e0:	8320      	strh	r0, [r4, #24]
 80242e2:	454a      	cmp	r2, r9
 80242e4:	8361      	strh	r1, [r4, #26]
 80242e6:	d016      	beq.n	8024316 <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 80242e8:	ea50 0201 	orrs.w	r2, r0, r1
 80242ec:	d00d      	beq.n	802430a <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 80242ee:	f1b8 0f00 	cmp.w	r8, #0
 80242f2:	db0a      	blt.n	802430a <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 80242f4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80242f6:	4541      	cmp	r1, r8
 80242f8:	dd07      	ble.n	802430a <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 80242fa:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80242fe:	4288      	cmp	r0, r1
 8024300:	d330      	bcc.n	8024364 <_ZN8touchgfx7Outline10renderLineEiiii+0x7d8>
 8024302:	f04f 0201 	mov.w	r2, #1
 8024306:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802430a:	f04f 0200 	mov.w	r2, #0
 802430e:	82a5      	strh	r5, [r4, #20]
 8024310:	82e6      	strh	r6, [r4, #22]
 8024312:	8322      	strh	r2, [r4, #24]
 8024314:	8362      	strh	r2, [r4, #26]
 8024316:	9904      	ldr	r1, [sp, #16]
 8024318:	42a9      	cmp	r1, r5
 802431a:	d1c5      	bne.n	80242a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x71c>
 802431c:	9a02      	ldr	r2, [sp, #8]
 802431e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8024320:	1ad3      	subs	r3, r2, r3
 8024322:	8b22      	ldrh	r2, [r4, #24]
 8024324:	3120      	adds	r1, #32
 8024326:	441a      	add	r2, r3
 8024328:	8322      	strh	r2, [r4, #24]
 802432a:	9a06      	ldr	r2, [sp, #24]
 802432c:	1a89      	subs	r1, r1, r2
 802432e:	8b62      	ldrh	r2, [r4, #26]
 8024330:	fb03 2301 	mla	r3, r3, r1, r2
 8024334:	e64e      	b.n	8023fd4 <_ZN8touchgfx7Outline10renderLineEiiii+0x448>
 8024336:	f04f 33ff 	mov.w	r3, #4294967295
 802433a:	434a      	muls	r2, r1
 802433c:	427f      	negs	r7, r7
 802433e:	9307      	str	r3, [sp, #28]
 8024340:	2300      	movs	r3, #0
 8024342:	e768      	b.n	8024216 <_ZN8touchgfx7Outline10renderLineEiiii+0x68a>
 8024344:	f104 0314 	add.w	r3, r4, #20
 8024348:	f8d4 8010 	ldr.w	r8, [r4, #16]
 802434c:	cb03      	ldmia	r3!, {r0, r1}
 802434e:	f8c8 0000 	str.w	r0, [r8]
 8024352:	f8c8 1004 	str.w	r1, [r8, #4]
 8024356:	6923      	ldr	r3, [r4, #16]
 8024358:	3308      	adds	r3, #8
 802435a:	6123      	str	r3, [r4, #16]
 802435c:	68a3      	ldr	r3, [r4, #8]
 802435e:	3301      	adds	r3, #1
 8024360:	60a3      	str	r3, [r4, #8]
 8024362:	e783      	b.n	802426c <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8024364:	f104 0814 	add.w	r8, r4, #20
 8024368:	f8d4 9010 	ldr.w	r9, [r4, #16]
 802436c:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8024370:	f8c9 0000 	str.w	r0, [r9]
 8024374:	f8c9 1004 	str.w	r1, [r9, #4]
 8024378:	6921      	ldr	r1, [r4, #16]
 802437a:	3108      	adds	r1, #8
 802437c:	6121      	str	r1, [r4, #16]
 802437e:	68a1      	ldr	r1, [r4, #8]
 8024380:	3101      	adds	r1, #1
 8024382:	60a1      	str	r1, [r4, #8]
 8024384:	e7c1      	b.n	802430a <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8024386:	f104 0314 	add.w	r3, r4, #20
 802438a:	6925      	ldr	r5, [r4, #16]
 802438c:	cb03      	ldmia	r3!, {r0, r1}
 802438e:	6028      	str	r0, [r5, #0]
 8024390:	6069      	str	r1, [r5, #4]
 8024392:	6923      	ldr	r3, [r4, #16]
 8024394:	3308      	adds	r3, #8
 8024396:	6123      	str	r3, [r4, #16]
 8024398:	68a3      	ldr	r3, [r4, #8]
 802439a:	3301      	adds	r3, #1
 802439c:	60a3      	str	r3, [r4, #8]
 802439e:	e66a      	b.n	8024076 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 80243a0:	f104 0314 	add.w	r3, r4, #20
 80243a4:	6925      	ldr	r5, [r4, #16]
 80243a6:	cb03      	ldmia	r3!, {r0, r1}
 80243a8:	6028      	str	r0, [r5, #0]
 80243aa:	6069      	str	r1, [r5, #4]
 80243ac:	6923      	ldr	r3, [r4, #16]
 80243ae:	3308      	adds	r3, #8
 80243b0:	6123      	str	r3, [r4, #16]
 80243b2:	68a3      	ldr	r3, [r4, #8]
 80243b4:	3301      	adds	r3, #1
 80243b6:	60a3      	str	r3, [r4, #8]
 80243b8:	e6be      	b.n	8024138 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 80243ba:	f00b 031f 	and.w	r3, fp, #31
 80243be:	114f      	asrs	r7, r1, #5
 80243c0:	8b20      	ldrh	r0, [r4, #24]
 80243c2:	f001 011f 	and.w	r1, r1, #31
 80243c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80243c8:	9b04      	ldr	r3, [sp, #16]
 80243ca:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 80243ce:	429f      	cmp	r7, r3
 80243d0:	d10a      	bne.n	80243e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x85c>
 80243d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80243d4:	4418      	add	r0, r3
 80243d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80243d8:	4419      	add	r1, r3
 80243da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80243dc:	8320      	strh	r0, [r4, #24]
 80243de:	fb03 9901 	mla	r9, r3, r1, r9
 80243e2:	f8a4 901a 	strh.w	r9, [r4, #26]
 80243e6:	e6af      	b.n	8024148 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 80243e8:	2d00      	cmp	r5, #0
 80243ea:	f2c0 809b 	blt.w	8024524 <_ZN8touchgfx7Outline10renderLineEiiii+0x998>
 80243ee:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80243f0:	f1c1 0320 	rsb	r3, r1, #32
 80243f4:	4373      	muls	r3, r6
 80243f6:	2601      	movs	r6, #1
 80243f8:	960e      	str	r6, [sp, #56]	; 0x38
 80243fa:	2620      	movs	r6, #32
 80243fc:	960d      	str	r6, [sp, #52]	; 0x34
 80243fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8024400:	fb93 f6f5 	sdiv	r6, r3, r5
 8024404:	4411      	add	r1, r2
 8024406:	fb05 3316 	mls	r3, r5, r6, r3
 802440a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802440c:	2b00      	cmp	r3, #0
 802440e:	4417      	add	r7, r2
 8024410:	9a00      	ldr	r2, [sp, #0]
 8024412:	bfbc      	itt	lt
 8024414:	f106 36ff 	addlt.w	r6, r6, #4294967295
 8024418:	195b      	addlt	r3, r3, r5
 802441a:	0412      	lsls	r2, r2, #16
 802441c:	fb06 9101 	mla	r1, r6, r1, r9
 8024420:	4430      	add	r0, r6
 8024422:	eb07 0902 	add.w	r9, r7, r2
 8024426:	9210      	str	r2, [sp, #64]	; 0x40
 8024428:	b200      	sxth	r0, r0
 802442a:	b209      	sxth	r1, r1
 802442c:	45c1      	cmp	r9, r8
 802442e:	8320      	strh	r0, [r4, #24]
 8024430:	8361      	strh	r1, [r4, #26]
 8024432:	d017      	beq.n	8024464 <_ZN8touchgfx7Outline10renderLineEiiii+0x8d8>
 8024434:	ea50 0201 	orrs.w	r2, r0, r1
 8024438:	d00d      	beq.n	8024456 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 802443a:	f1be 0f00 	cmp.w	lr, #0
 802443e:	db0a      	blt.n	8024456 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8024440:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024442:	4571      	cmp	r1, lr
 8024444:	dd07      	ble.n	8024456 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8024446:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802444a:	4288      	cmp	r0, r1
 802444c:	d372      	bcc.n	8024534 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a8>
 802444e:	f04f 0201 	mov.w	r2, #1
 8024452:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8024456:	9a00      	ldr	r2, [sp, #0]
 8024458:	82a7      	strh	r7, [r4, #20]
 802445a:	82e2      	strh	r2, [r4, #22]
 802445c:	f8a4 c018 	strh.w	ip, [r4, #24]
 8024460:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8024464:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024466:	eb02 0e06 	add.w	lr, r2, r6
 802446a:	9a04      	ldr	r2, [sp, #16]
 802446c:	42ba      	cmp	r2, r7
 802446e:	d049      	beq.n	8024504 <_ZN8touchgfx7Outline10renderLineEiiii+0x978>
 8024470:	9a02      	ldr	r2, [sp, #8]
 8024472:	1b5b      	subs	r3, r3, r5
 8024474:	eba2 010e 	sub.w	r1, r2, lr
 8024478:	440e      	add	r6, r1
 802447a:	0176      	lsls	r6, r6, #5
 802447c:	fb96 f8f5 	sdiv	r8, r6, r5
 8024480:	fb05 6618 	mls	r6, r5, r8, r6
 8024484:	2e00      	cmp	r6, #0
 8024486:	bfbc      	itt	lt
 8024488:	f108 38ff 	addlt.w	r8, r8, #4294967295
 802448c:	1976      	addlt	r6, r6, r5
 802448e:	f108 0201 	add.w	r2, r8, #1
 8024492:	9211      	str	r2, [sp, #68]	; 0x44
 8024494:	199b      	adds	r3, r3, r6
 8024496:	8b20      	ldrh	r0, [r4, #24]
 8024498:	8b61      	ldrh	r1, [r4, #26]
 802449a:	bf54      	ite	pl
 802449c:	f8dd 9044 	ldrpl.w	r9, [sp, #68]	; 0x44
 80244a0:	46c1      	movmi	r9, r8
 80244a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80244a4:	bf58      	it	pl
 80244a6:	1b5b      	subpl	r3, r3, r5
 80244a8:	4448      	add	r0, r9
 80244aa:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 80244ae:	4417      	add	r7, r2
 80244b0:	44ce      	add	lr, r9
 80244b2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80244b4:	b200      	sxth	r0, r0
 80244b6:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 80244ba:	b209      	sxth	r1, r1
 80244bc:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 80244c0:	443a      	add	r2, r7
 80244c2:	8320      	strh	r0, [r4, #24]
 80244c4:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 80244c8:	8361      	strh	r1, [r4, #26]
 80244ca:	4552      	cmp	r2, sl
 80244cc:	d017      	beq.n	80244fe <_ZN8touchgfx7Outline10renderLineEiiii+0x972>
 80244ce:	ea50 0201 	orrs.w	r2, r0, r1
 80244d2:	d00d      	beq.n	80244f0 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 80244d4:	f1b9 0f00 	cmp.w	r9, #0
 80244d8:	db0a      	blt.n	80244f0 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 80244da:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80244dc:	4549      	cmp	r1, r9
 80244de:	dd07      	ble.n	80244f0 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 80244e0:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80244e4:	4288      	cmp	r0, r1
 80244e6:	d336      	bcc.n	8024556 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ca>
 80244e8:	f04f 0201 	mov.w	r2, #1
 80244ec:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80244f0:	9a00      	ldr	r2, [sp, #0]
 80244f2:	82a7      	strh	r7, [r4, #20]
 80244f4:	82e2      	strh	r2, [r4, #22]
 80244f6:	f8a4 c018 	strh.w	ip, [r4, #24]
 80244fa:	f8a4 c01a 	strh.w	ip, [r4, #26]
 80244fe:	9a04      	ldr	r2, [sp, #16]
 8024500:	42ba      	cmp	r2, r7
 8024502:	d1c7      	bne.n	8024494 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 8024504:	9b02      	ldr	r3, [sp, #8]
 8024506:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8024508:	eba3 0e0e 	sub.w	lr, r3, lr
 802450c:	8b23      	ldrh	r3, [r4, #24]
 802450e:	3120      	adds	r1, #32
 8024510:	4473      	add	r3, lr
 8024512:	8323      	strh	r3, [r4, #24]
 8024514:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024516:	1ac9      	subs	r1, r1, r3
 8024518:	8b63      	ldrh	r3, [r4, #26]
 802451a:	fb0e 3e01 	mla	lr, lr, r1, r3
 802451e:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8024522:	e611      	b.n	8024148 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8024524:	f04f 36ff 	mov.w	r6, #4294967295
 8024528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802452a:	426d      	negs	r5, r5
 802452c:	960e      	str	r6, [sp, #56]	; 0x38
 802452e:	2600      	movs	r6, #0
 8024530:	434b      	muls	r3, r1
 8024532:	e763      	b.n	80243fc <_ZN8touchgfx7Outline10renderLineEiiii+0x870>
 8024534:	f104 0e14 	add.w	lr, r4, #20
 8024538:	f8d4 8010 	ldr.w	r8, [r4, #16]
 802453c:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 8024540:	f8c8 0000 	str.w	r0, [r8]
 8024544:	f8c8 1004 	str.w	r1, [r8, #4]
 8024548:	6921      	ldr	r1, [r4, #16]
 802454a:	3108      	adds	r1, #8
 802454c:	6121      	str	r1, [r4, #16]
 802454e:	68a1      	ldr	r1, [r4, #8]
 8024550:	3101      	adds	r1, #1
 8024552:	60a1      	str	r1, [r4, #8]
 8024554:	e77f      	b.n	8024456 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8024556:	f104 0914 	add.w	r9, r4, #20
 802455a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 802455e:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 8024562:	f8ca 0000 	str.w	r0, [sl]
 8024566:	f8ca 1004 	str.w	r1, [sl, #4]
 802456a:	6921      	ldr	r1, [r4, #16]
 802456c:	3108      	adds	r1, #8
 802456e:	6121      	str	r1, [r4, #16]
 8024570:	68a1      	ldr	r1, [r4, #8]
 8024572:	3101      	adds	r1, #1
 8024574:	60a1      	str	r1, [r4, #8]
 8024576:	e7bb      	b.n	80244f0 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8024578:	f104 0314 	add.w	r3, r4, #20
 802457c:	6925      	ldr	r5, [r4, #16]
 802457e:	cb03      	ldmia	r3!, {r0, r1}
 8024580:	6028      	str	r0, [r5, #0]
 8024582:	6069      	str	r1, [r5, #4]
 8024584:	6923      	ldr	r3, [r4, #16]
 8024586:	3308      	adds	r3, #8
 8024588:	6123      	str	r3, [r4, #16]
 802458a:	68a3      	ldr	r3, [r4, #8]
 802458c:	3301      	adds	r3, #1
 802458e:	60a3      	str	r3, [r4, #8]
 8024590:	e5fd      	b.n	802418e <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8024592:	f104 0314 	add.w	r3, r4, #20
 8024596:	6925      	ldr	r5, [r4, #16]
 8024598:	cb03      	ldmia	r3!, {r0, r1}
 802459a:	6028      	str	r0, [r5, #0]
 802459c:	6069      	str	r1, [r5, #4]
 802459e:	6923      	ldr	r3, [r4, #16]
 80245a0:	3308      	adds	r3, #8
 80245a2:	6123      	str	r3, [r4, #16]
 80245a4:	68a3      	ldr	r3, [r4, #8]
 80245a6:	3301      	adds	r3, #1
 80245a8:	60a3      	str	r3, [r4, #8]
 80245aa:	e625      	b.n	80241f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 80245ac:	9b05      	ldr	r3, [sp, #20]
 80245ae:	ea4f 176b 	mov.w	r7, fp, asr #5
 80245b2:	f00b 081f 	and.w	r8, fp, #31
 80245b6:	8b20      	ldrh	r0, [r4, #24]
 80245b8:	f003 031f 	and.w	r3, r3, #31
 80245bc:	4577      	cmp	r7, lr
 80245be:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 80245c2:	9302      	str	r3, [sp, #8]
 80245c4:	9b03      	ldr	r3, [sp, #12]
 80245c6:	eba3 050c 	sub.w	r5, r3, ip
 80245ca:	d108      	bne.n	80245de <_ZN8touchgfx7Outline10renderLineEiiii+0xa52>
 80245cc:	9b02      	ldr	r3, [sp, #8]
 80245ce:	4428      	add	r0, r5
 80245d0:	4498      	add	r8, r3
 80245d2:	8320      	strh	r0, [r4, #24]
 80245d4:	fb05 9508 	mla	r5, r5, r8, r9
 80245d8:	8365      	strh	r5, [r4, #26]
 80245da:	f7ff bb4f 	b.w	8023c7c <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 80245de:	9b05      	ldr	r3, [sp, #20]
 80245e0:	ebb3 030b 	subs.w	r3, r3, fp
 80245e4:	f100 809c 	bmi.w	8024720 <_ZN8touchgfx7Outline10renderLineEiiii+0xb94>
 80245e8:	f1c8 0120 	rsb	r1, r8, #32
 80245ec:	2201      	movs	r2, #1
 80245ee:	f04f 0b20 	mov.w	fp, #32
 80245f2:	434d      	muls	r5, r1
 80245f4:	9201      	str	r2, [sp, #4]
 80245f6:	9a01      	ldr	r2, [sp, #4]
 80245f8:	44d8      	add	r8, fp
 80245fa:	fb95 f6f3 	sdiv	r6, r5, r3
 80245fe:	fb03 5516 	mls	r5, r3, r6, r5
 8024602:	4417      	add	r7, r2
 8024604:	9a00      	ldr	r2, [sp, #0]
 8024606:	2d00      	cmp	r5, #0
 8024608:	ea4f 4202 	mov.w	r2, r2, lsl #16
 802460c:	bfbc      	itt	lt
 802460e:	f106 36ff 	addlt.w	r6, r6, #4294967295
 8024612:	18ed      	addlt	r5, r5, r3
 8024614:	eb07 0a02 	add.w	sl, r7, r2
 8024618:	9204      	str	r2, [sp, #16]
 802461a:	fb06 9808 	mla	r8, r6, r8, r9
 802461e:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8024622:	4430      	add	r0, r6
 8024624:	fa0f f188 	sxth.w	r1, r8
 8024628:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 802462c:	b200      	sxth	r0, r0
 802462e:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8024632:	8361      	strh	r1, [r4, #26]
 8024634:	8320      	strh	r0, [r4, #24]
 8024636:	45ca      	cmp	sl, r9
 8024638:	d015      	beq.n	8024666 <_ZN8touchgfx7Outline10renderLineEiiii+0xada>
 802463a:	ea50 0201 	orrs.w	r2, r0, r1
 802463e:	d00c      	beq.n	802465a <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8024640:	f1b8 0f00 	cmp.w	r8, #0
 8024644:	db09      	blt.n	802465a <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8024646:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024648:	4541      	cmp	r1, r8
 802464a:	dd06      	ble.n	802465a <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 802464c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024650:	4288      	cmp	r0, r1
 8024652:	d36e      	bcc.n	8024732 <_ZN8touchgfx7Outline10renderLineEiiii+0xba6>
 8024654:	2101      	movs	r1, #1
 8024656:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802465a:	2100      	movs	r1, #0
 802465c:	9a00      	ldr	r2, [sp, #0]
 802465e:	82a7      	strh	r7, [r4, #20]
 8024660:	82e2      	strh	r2, [r4, #22]
 8024662:	8321      	strh	r1, [r4, #24]
 8024664:	8361      	strh	r1, [r4, #26]
 8024666:	45be      	cmp	lr, r7
 8024668:	44b4      	add	ip, r6
 802466a:	d048      	beq.n	80246fe <_ZN8touchgfx7Outline10renderLineEiiii+0xb72>
 802466c:	9a03      	ldr	r2, [sp, #12]
 802466e:	1aed      	subs	r5, r5, r3
 8024670:	eba2 010c 	sub.w	r1, r2, ip
 8024674:	440e      	add	r6, r1
 8024676:	0176      	lsls	r6, r6, #5
 8024678:	fb96 f8f3 	sdiv	r8, r6, r3
 802467c:	fb03 6618 	mls	r6, r3, r8, r6
 8024680:	2e00      	cmp	r6, #0
 8024682:	bfbc      	itt	lt
 8024684:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8024688:	18f6      	addlt	r6, r6, r3
 802468a:	f108 0201 	add.w	r2, r8, #1
 802468e:	9205      	str	r2, [sp, #20]
 8024690:	19ad      	adds	r5, r5, r6
 8024692:	8b20      	ldrh	r0, [r4, #24]
 8024694:	8b61      	ldrh	r1, [r4, #26]
 8024696:	bf54      	ite	pl
 8024698:	f8dd 9014 	ldrpl.w	r9, [sp, #20]
 802469c:	46c1      	movmi	r9, r8
 802469e:	9a01      	ldr	r2, [sp, #4]
 80246a0:	bf58      	it	pl
 80246a2:	1aed      	subpl	r5, r5, r3
 80246a4:	4448      	add	r0, r9
 80246a6:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 80246aa:	4417      	add	r7, r2
 80246ac:	44cc      	add	ip, r9
 80246ae:	9a04      	ldr	r2, [sp, #16]
 80246b0:	b200      	sxth	r0, r0
 80246b2:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 80246b6:	b209      	sxth	r1, r1
 80246b8:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 80246bc:	443a      	add	r2, r7
 80246be:	8320      	strh	r0, [r4, #24]
 80246c0:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 80246c4:	8361      	strh	r1, [r4, #26]
 80246c6:	4552      	cmp	r2, sl
 80246c8:	d017      	beq.n	80246fa <_ZN8touchgfx7Outline10renderLineEiiii+0xb6e>
 80246ca:	ea50 0201 	orrs.w	r2, r0, r1
 80246ce:	d00d      	beq.n	80246ec <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 80246d0:	f1b9 0f00 	cmp.w	r9, #0
 80246d4:	db0a      	blt.n	80246ec <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 80246d6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80246d8:	4549      	cmp	r1, r9
 80246da:	dd07      	ble.n	80246ec <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 80246dc:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80246e0:	4288      	cmp	r0, r1
 80246e2:	d337      	bcc.n	8024754 <_ZN8touchgfx7Outline10renderLineEiiii+0xbc8>
 80246e4:	f04f 0201 	mov.w	r2, #1
 80246e8:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80246ec:	9a00      	ldr	r2, [sp, #0]
 80246ee:	82a7      	strh	r7, [r4, #20]
 80246f0:	82e2      	strh	r2, [r4, #22]
 80246f2:	f04f 0200 	mov.w	r2, #0
 80246f6:	8322      	strh	r2, [r4, #24]
 80246f8:	8362      	strh	r2, [r4, #26]
 80246fa:	45be      	cmp	lr, r7
 80246fc:	d1c8      	bne.n	8024690 <_ZN8touchgfx7Outline10renderLineEiiii+0xb04>
 80246fe:	9b03      	ldr	r3, [sp, #12]
 8024700:	8b62      	ldrh	r2, [r4, #26]
 8024702:	eba3 0c0c 	sub.w	ip, r3, ip
 8024706:	8b23      	ldrh	r3, [r4, #24]
 8024708:	4463      	add	r3, ip
 802470a:	8323      	strh	r3, [r4, #24]
 802470c:	9b02      	ldr	r3, [sp, #8]
 802470e:	3320      	adds	r3, #32
 8024710:	eba3 030b 	sub.w	r3, r3, fp
 8024714:	fb0c 2c03 	mla	ip, ip, r3, r2
 8024718:	f8a4 c01a 	strh.w	ip, [r4, #26]
 802471c:	f7ff baae 	b.w	8023c7c <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8024720:	f04f 32ff 	mov.w	r2, #4294967295
 8024724:	fb05 f508 	mul.w	r5, r5, r8
 8024728:	425b      	negs	r3, r3
 802472a:	f04f 0b00 	mov.w	fp, #0
 802472e:	9201      	str	r2, [sp, #4]
 8024730:	e761      	b.n	80245f6 <_ZN8touchgfx7Outline10renderLineEiiii+0xa6a>
 8024732:	f104 0814 	add.w	r8, r4, #20
 8024736:	f8d4 9010 	ldr.w	r9, [r4, #16]
 802473a:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 802473e:	f8c9 0000 	str.w	r0, [r9]
 8024742:	f8c9 1004 	str.w	r1, [r9, #4]
 8024746:	6921      	ldr	r1, [r4, #16]
 8024748:	3108      	adds	r1, #8
 802474a:	6121      	str	r1, [r4, #16]
 802474c:	68a1      	ldr	r1, [r4, #8]
 802474e:	3101      	adds	r1, #1
 8024750:	60a1      	str	r1, [r4, #8]
 8024752:	e782      	b.n	802465a <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8024754:	f104 0914 	add.w	r9, r4, #20
 8024758:	f8d4 a010 	ldr.w	sl, [r4, #16]
 802475c:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 8024760:	f8ca 0000 	str.w	r0, [sl]
 8024764:	f8ca 1004 	str.w	r1, [sl, #4]
 8024768:	6921      	ldr	r1, [r4, #16]
 802476a:	3108      	adds	r1, #8
 802476c:	6121      	str	r1, [r4, #16]
 802476e:	68a1      	ldr	r1, [r4, #8]
 8024770:	3101      	adds	r1, #1
 8024772:	60a1      	str	r1, [r4, #8]
 8024774:	e7ba      	b.n	80246ec <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>

08024776 <_ZN8touchgfx7Outline6lineToEii>:
 8024776:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8024778:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802477a:	4604      	mov	r4, r0
 802477c:	460d      	mov	r5, r1
 802477e:	4616      	mov	r6, r2
 8024780:	079b      	lsls	r3, r3, #30
 8024782:	d526      	bpl.n	80247d2 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8024784:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8024788:	ea85 0001 	eor.w	r0, r5, r1
 802478c:	ea86 0302 	eor.w	r3, r6, r2
 8024790:	4303      	orrs	r3, r0
 8024792:	d01e      	beq.n	80247d2 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8024794:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8024796:	114b      	asrs	r3, r1, #5
 8024798:	9600      	str	r6, [sp, #0]
 802479a:	4283      	cmp	r3, r0
 802479c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 802479e:	bfb8      	it	lt
 80247a0:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 80247a2:	3301      	adds	r3, #1
 80247a4:	4283      	cmp	r3, r0
 80247a6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80247a8:	bfc8      	it	gt
 80247aa:	6363      	strgt	r3, [r4, #52]	; 0x34
 80247ac:	116b      	asrs	r3, r5, #5
 80247ae:	4283      	cmp	r3, r0
 80247b0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80247b2:	bfb8      	it	lt
 80247b4:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 80247b6:	3301      	adds	r3, #1
 80247b8:	4283      	cmp	r3, r0
 80247ba:	4620      	mov	r0, r4
 80247bc:	bfc8      	it	gt
 80247be:	6363      	strgt	r3, [r4, #52]	; 0x34
 80247c0:	462b      	mov	r3, r5
 80247c2:	f7ff f9e3 	bl	8023b8c <_ZN8touchgfx7Outline10renderLineEiiii>
 80247c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80247c8:	f043 0301 	orr.w	r3, r3, #1
 80247cc:	e9c4 5607 	strd	r5, r6, [r4, #28]
 80247d0:	63e3      	str	r3, [r4, #60]	; 0x3c
 80247d2:	b002      	add	sp, #8
 80247d4:	bd70      	pop	{r4, r5, r6, pc}

080247d6 <_ZN8touchgfx7Outline6moveToEii>:
 80247d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80247d8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80247da:	4615      	mov	r5, r2
 80247dc:	4604      	mov	r4, r0
 80247de:	460e      	mov	r6, r1
 80247e0:	079a      	lsls	r2, r3, #30
 80247e2:	d401      	bmi.n	80247e8 <_ZN8touchgfx7Outline6moveToEii+0x12>
 80247e4:	f7ff f98c 	bl	8023b00 <_ZN8touchgfx7Outline5resetEv>
 80247e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80247ea:	07db      	lsls	r3, r3, #31
 80247ec:	d504      	bpl.n	80247f8 <_ZN8touchgfx7Outline6moveToEii+0x22>
 80247ee:	4620      	mov	r0, r4
 80247f0:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 80247f4:	f7ff ffbf 	bl	8024776 <_ZN8touchgfx7Outline6lineToEii>
 80247f8:	ea4f 1c66 	mov.w	ip, r6, asr #5
 80247fc:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8024800:	116f      	asrs	r7, r5, #5
 8024802:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8024806:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 802480a:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 802480e:	4291      	cmp	r1, r2
 8024810:	d015      	beq.n	802483e <_ZN8touchgfx7Outline6moveToEii+0x68>
 8024812:	8b61      	ldrh	r1, [r4, #26]
 8024814:	8b22      	ldrh	r2, [r4, #24]
 8024816:	430a      	orrs	r2, r1
 8024818:	d00b      	beq.n	8024832 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 802481a:	2b00      	cmp	r3, #0
 802481c:	db09      	blt.n	8024832 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 802481e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8024820:	429a      	cmp	r2, r3
 8024822:	dd06      	ble.n	8024832 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 8024824:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8024828:	429a      	cmp	r2, r3
 802482a:	d30d      	bcc.n	8024848 <_ZN8touchgfx7Outline6moveToEii+0x72>
 802482c:	2301      	movs	r3, #1
 802482e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024832:	2300      	movs	r3, #0
 8024834:	f8a4 c014 	strh.w	ip, [r4, #20]
 8024838:	82e7      	strh	r7, [r4, #22]
 802483a:	8323      	strh	r3, [r4, #24]
 802483c:	8363      	strh	r3, [r4, #26]
 802483e:	61e6      	str	r6, [r4, #28]
 8024840:	62a5      	str	r5, [r4, #40]	; 0x28
 8024842:	e9c4 5608 	strd	r5, r6, [r4, #32]
 8024846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024848:	f104 0314 	add.w	r3, r4, #20
 802484c:	6922      	ldr	r2, [r4, #16]
 802484e:	cb03      	ldmia	r3!, {r0, r1}
 8024850:	6010      	str	r0, [r2, #0]
 8024852:	6051      	str	r1, [r2, #4]
 8024854:	6923      	ldr	r3, [r4, #16]
 8024856:	3308      	adds	r3, #8
 8024858:	6123      	str	r3, [r4, #16]
 802485a:	68a3      	ldr	r3, [r4, #8]
 802485c:	3301      	adds	r3, #1
 802485e:	60a3      	str	r3, [r4, #8]
 8024860:	e7e7      	b.n	8024832 <_ZN8touchgfx7Outline6moveToEii+0x5c>

08024862 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8024862:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024866:	b0d1      	sub	sp, #324	; 0x144
 8024868:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 802486c:	466c      	mov	r4, sp
 802486e:	1a0d      	subs	r5, r1, r0
 8024870:	f100 0208 	add.w	r2, r0, #8
 8024874:	2d48      	cmp	r5, #72	; 0x48
 8024876:	f340 80ba 	ble.w	80249ee <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 802487a:	112d      	asrs	r5, r5, #4
 802487c:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 8024880:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 8024884:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 8024888:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 802488c:	f9b0 8000 	ldrsh.w	r8, [r0]
 8024890:	681e      	ldr	r6, [r3, #0]
 8024892:	6006      	str	r6, [r0, #0]
 8024894:	685e      	ldr	r6, [r3, #4]
 8024896:	6046      	str	r6, [r0, #4]
 8024898:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 802489c:	f8a3 c004 	strh.w	ip, [r3, #4]
 80248a0:	f8a3 e002 	strh.w	lr, [r3, #2]
 80248a4:	80df      	strh	r7, [r3, #6]
 80248a6:	f1a1 0308 	sub.w	r3, r1, #8
 80248aa:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 80248ae:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 80248b2:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 80248b6:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 80248ba:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 80248be:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 80248c2:	45ac      	cmp	ip, r5
 80248c4:	dd0f      	ble.n	80248e6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 80248c6:	681d      	ldr	r5, [r3, #0]
 80248c8:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 80248cc:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 80248d0:	6015      	str	r5, [r2, #0]
 80248d2:	685d      	ldr	r5, [r3, #4]
 80248d4:	6055      	str	r5, [r2, #4]
 80248d6:	f821 7c08 	strh.w	r7, [r1, #-8]
 80248da:	f821 6c06 	strh.w	r6, [r1, #-6]
 80248de:	f821 ec04 	strh.w	lr, [r1, #-4]
 80248e2:	f821 cc02 	strh.w	ip, [r1, #-2]
 80248e6:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 80248ea:	f9b0 7000 	ldrsh.w	r7, [r0]
 80248ee:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80248f2:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 80248f6:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 80248fa:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 80248fe:	4565      	cmp	r5, ip
 8024900:	dd0d      	ble.n	802491e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 8024902:	6815      	ldr	r5, [r2, #0]
 8024904:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8024908:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 802490c:	6005      	str	r5, [r0, #0]
 802490e:	6855      	ldr	r5, [r2, #4]
 8024910:	8107      	strh	r7, [r0, #8]
 8024912:	6045      	str	r5, [r0, #4]
 8024914:	8146      	strh	r6, [r0, #10]
 8024916:	f8a0 e00c 	strh.w	lr, [r0, #12]
 802491a:	f8a0 c00e 	strh.w	ip, [r0, #14]
 802491e:	f9b0 7000 	ldrsh.w	r7, [r0]
 8024922:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8024926:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 802492a:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 802492e:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8024932:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 8024936:	45ac      	cmp	ip, r5
 8024938:	dd0f      	ble.n	802495a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 802493a:	681d      	ldr	r5, [r3, #0]
 802493c:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8024940:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8024944:	6005      	str	r5, [r0, #0]
 8024946:	685d      	ldr	r5, [r3, #4]
 8024948:	6045      	str	r5, [r0, #4]
 802494a:	f821 7c08 	strh.w	r7, [r1, #-8]
 802494e:	f821 6c06 	strh.w	r6, [r1, #-6]
 8024952:	f821 ec04 	strh.w	lr, [r1, #-4]
 8024956:	f821 cc02 	strh.w	ip, [r1, #-2]
 802495a:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 802495e:	f102 0508 	add.w	r5, r2, #8
 8024962:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 8024966:	f9b0 e000 	ldrsh.w	lr, [r0]
 802496a:	462f      	mov	r7, r5
 802496c:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8024970:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 8024974:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 8024978:	45b2      	cmp	sl, r6
 802497a:	dc18      	bgt.n	80249ae <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 802497c:	3b08      	subs	r3, #8
 802497e:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 8024982:	f9b3 6000 	ldrsh.w	r6, [r3]
 8024986:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 802498a:	45b2      	cmp	sl, r6
 802498c:	dbf6      	blt.n	802497c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 802498e:	42ab      	cmp	r3, r5
 8024990:	681e      	ldr	r6, [r3, #0]
 8024992:	d30e      	bcc.n	80249b2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 8024994:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 8024998:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 802499c:	602e      	str	r6, [r5, #0]
 802499e:	685e      	ldr	r6, [r3, #4]
 80249a0:	606e      	str	r6, [r5, #4]
 80249a2:	f8a3 9000 	strh.w	r9, [r3]
 80249a6:	f8a3 8002 	strh.w	r8, [r3, #2]
 80249aa:	809f      	strh	r7, [r3, #4]
 80249ac:	80da      	strh	r2, [r3, #6]
 80249ae:	462a      	mov	r2, r5
 80249b0:	e7d3      	b.n	802495a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 80249b2:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80249b6:	6006      	str	r6, [r0, #0]
 80249b8:	685e      	ldr	r6, [r3, #4]
 80249ba:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 80249be:	6046      	str	r6, [r0, #4]
 80249c0:	1a1e      	subs	r6, r3, r0
 80249c2:	80da      	strh	r2, [r3, #6]
 80249c4:	1b4a      	subs	r2, r1, r5
 80249c6:	f8a3 e000 	strh.w	lr, [r3]
 80249ca:	10d2      	asrs	r2, r2, #3
 80249cc:	f8a3 c002 	strh.w	ip, [r3, #2]
 80249d0:	f8a3 8004 	strh.w	r8, [r3, #4]
 80249d4:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 80249d8:	bfb5      	itete	lt
 80249da:	e9c4 0300 	strdlt	r0, r3, [r4]
 80249de:	4607      	movge	r7, r0
 80249e0:	460b      	movlt	r3, r1
 80249e2:	e9c4 5100 	strdge	r5, r1, [r4]
 80249e6:	4638      	mov	r0, r7
 80249e8:	3408      	adds	r4, #8
 80249ea:	4619      	mov	r1, r3
 80249ec:	e73f      	b.n	802486e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 80249ee:	4291      	cmp	r1, r2
 80249f0:	d925      	bls.n	8024a3e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 80249f2:	f1a2 0310 	sub.w	r3, r2, #16
 80249f6:	f9b3 600a 	ldrsh.w	r6, [r3, #10]
 80249fa:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 80249fe:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 8024a02:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 8024a06:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 8024a0a:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 8024a0e:	42b5      	cmp	r5, r6
 8024a10:	dd13      	ble.n	8024a3a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1d8>
 8024a12:	461d      	mov	r5, r3
 8024a14:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 8024a18:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 8024a1c:	3b08      	subs	r3, #8
 8024a1e:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8024a22:	619e      	str	r6, [r3, #24]
 8024a24:	42a8      	cmp	r0, r5
 8024a26:	686e      	ldr	r6, [r5, #4]
 8024a28:	f8a3 c010 	strh.w	ip, [r3, #16]
 8024a2c:	61de      	str	r6, [r3, #28]
 8024a2e:	825f      	strh	r7, [r3, #18]
 8024a30:	f8a3 8014 	strh.w	r8, [r3, #20]
 8024a34:	f8a3 e016 	strh.w	lr, [r3, #22]
 8024a38:	d1dd      	bne.n	80249f6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x194>
 8024a3a:	3208      	adds	r2, #8
 8024a3c:	e7d7      	b.n	80249ee <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 8024a3e:	466b      	mov	r3, sp
 8024a40:	429c      	cmp	r4, r3
 8024a42:	d903      	bls.n	8024a4c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ea>
 8024a44:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8024a48:	3c08      	subs	r4, #8
 8024a4a:	e710      	b.n	802486e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 8024a4c:	b051      	add	sp, #324	; 0x144
 8024a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024a52 <_ZN8touchgfx7Outline9sortCellsEv>:
 8024a52:	6881      	ldr	r1, [r0, #8]
 8024a54:	b111      	cbz	r1, 8024a5c <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 8024a56:	68c0      	ldr	r0, [r0, #12]
 8024a58:	f7ff bf03 	b.w	8024862 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8024a5c:	4770      	bx	lr

08024a5e <_ZN8touchgfx7Outline8getCellsEv>:
 8024a5e:	b510      	push	{r4, lr}
 8024a60:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8024a62:	4604      	mov	r4, r0
 8024a64:	07da      	lsls	r2, r3, #31
 8024a66:	d507      	bpl.n	8024a78 <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 8024a68:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 8024a6c:	f7ff fe83 	bl	8024776 <_ZN8touchgfx7Outline6lineToEii>
 8024a70:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8024a72:	f023 0301 	bic.w	r3, r3, #1
 8024a76:	63e3      	str	r3, [r4, #60]	; 0x3c
 8024a78:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8024a7a:	079b      	lsls	r3, r3, #30
 8024a7c:	d51a      	bpl.n	8024ab4 <_ZN8touchgfx7Outline8getCellsEv+0x56>
 8024a7e:	8b62      	ldrh	r2, [r4, #26]
 8024a80:	8b23      	ldrh	r3, [r4, #24]
 8024a82:	4313      	orrs	r3, r2
 8024a84:	d00d      	beq.n	8024aa2 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8024a86:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8024a8a:	2b00      	cmp	r3, #0
 8024a8c:	db09      	blt.n	8024aa2 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8024a8e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8024a90:	4293      	cmp	r3, r2
 8024a92:	da06      	bge.n	8024aa2 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8024a94:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8024a98:	429a      	cmp	r2, r3
 8024a9a:	d80d      	bhi.n	8024ab8 <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 8024a9c:	2301      	movs	r3, #1
 8024a9e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024aa2:	68a0      	ldr	r0, [r4, #8]
 8024aa4:	b138      	cbz	r0, 8024ab6 <_ZN8touchgfx7Outline8getCellsEv+0x58>
 8024aa6:	4620      	mov	r0, r4
 8024aa8:	f7ff ffd3 	bl	8024a52 <_ZN8touchgfx7Outline9sortCellsEv>
 8024aac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8024aae:	f023 0302 	bic.w	r3, r3, #2
 8024ab2:	63e3      	str	r3, [r4, #60]	; 0x3c
 8024ab4:	68e0      	ldr	r0, [r4, #12]
 8024ab6:	bd10      	pop	{r4, pc}
 8024ab8:	f104 0314 	add.w	r3, r4, #20
 8024abc:	6922      	ldr	r2, [r4, #16]
 8024abe:	cb03      	ldmia	r3!, {r0, r1}
 8024ac0:	6010      	str	r0, [r2, #0]
 8024ac2:	6051      	str	r1, [r2, #4]
 8024ac4:	6923      	ldr	r3, [r4, #16]
 8024ac6:	3308      	adds	r3, #8
 8024ac8:	6123      	str	r3, [r4, #16]
 8024aca:	68a3      	ldr	r3, [r4, #8]
 8024acc:	3301      	adds	r3, #1
 8024ace:	60a3      	str	r3, [r4, #8]
 8024ad0:	e7e7      	b.n	8024aa2 <_ZN8touchgfx7Outline8getCellsEv+0x44>

08024ad2 <_ZN8touchgfx8ScanlineD1Ev>:
 8024ad2:	4770      	bx	lr

08024ad4 <_ZN8touchgfx8ScanlineD0Ev>:
 8024ad4:	b510      	push	{r4, lr}
 8024ad6:	4604      	mov	r4, r0
 8024ad8:	2124      	movs	r1, #36	; 0x24
 8024ada:	f000 f87a 	bl	8024bd2 <_ZdlPvj>
 8024ade:	4620      	mov	r0, r4
 8024ae0:	bd10      	pop	{r4, pc}

08024ae2 <_ZN8touchgfx8Scanline5resetEv>:
 8024ae2:	b510      	push	{r4, lr}
 8024ae4:	4604      	mov	r4, r0
 8024ae6:	f7f3 f8f9 	bl	8017cdc <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 8024aea:	61a0      	str	r0, [r4, #24]
 8024aec:	f7f3 f8fc 	bl	8017ce8 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 8024af0:	61e0      	str	r0, [r4, #28]
 8024af2:	f7f3 f8ff 	bl	8017cf4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 8024af6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8024afa:	6220      	str	r0, [r4, #32]
 8024afc:	6160      	str	r0, [r4, #20]
 8024afe:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8024b02:	69e3      	ldr	r3, [r4, #28]
 8024b04:	6123      	str	r3, [r4, #16]
 8024b06:	2300      	movs	r3, #0
 8024b08:	60e3      	str	r3, [r4, #12]
 8024b0a:	bd10      	pop	{r4, pc}

08024b0c <_ZN8touchgfx8ScanlineC1Ev>:
 8024b0c:	4b07      	ldr	r3, [pc, #28]	; (8024b2c <_ZN8touchgfx8ScanlineC1Ev+0x20>)
 8024b0e:	b510      	push	{r4, lr}
 8024b10:	6003      	str	r3, [r0, #0]
 8024b12:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8024b16:	4604      	mov	r4, r0
 8024b18:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8024b1c:	2300      	movs	r3, #0
 8024b1e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8024b22:	6143      	str	r3, [r0, #20]
 8024b24:	f7ff ffdd 	bl	8024ae2 <_ZN8touchgfx8Scanline5resetEv>
 8024b28:	4620      	mov	r0, r4
 8024b2a:	bd10      	pop	{r4, pc}
 8024b2c:	08029ea4 	.word	0x08029ea4

08024b30 <_ZN8touchgfx8Scanline7addSpanEiijj>:
 8024b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024b34:	1e0c      	subs	r4, r1, #0
 8024b36:	4605      	mov	r5, r0
 8024b38:	4617      	mov	r7, r2
 8024b3a:	461e      	mov	r6, r3
 8024b3c:	da03      	bge.n	8024b46 <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 8024b3e:	4426      	add	r6, r4
 8024b40:	2e01      	cmp	r6, #1
 8024b42:	d421      	bmi.n	8024b88 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 8024b44:	2400      	movs	r4, #0
 8024b46:	f7f3 f8c3 	bl	8017cd0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8024b4a:	42a0      	cmp	r0, r4
 8024b4c:	d91c      	bls.n	8024b88 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 8024b4e:	eb04 0806 	add.w	r8, r4, r6
 8024b52:	f7f3 f8bd 	bl	8017cd0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8024b56:	4580      	cmp	r8, r0
 8024b58:	d902      	bls.n	8024b60 <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 8024b5a:	f7f3 f8b9 	bl	8017cd0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8024b5e:	1b06      	subs	r6, r0, r4
 8024b60:	69a8      	ldr	r0, [r5, #24]
 8024b62:	4632      	mov	r2, r6
 8024b64:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8024b68:	4420      	add	r0, r4
 8024b6a:	f7f4 fdb0 	bl	80196ce <_ZN8touchgfx6memsetEPvhm>
 8024b6e:	686b      	ldr	r3, [r5, #4]
 8024b70:	b2b2      	uxth	r2, r6
 8024b72:	3301      	adds	r3, #1
 8024b74:	42a3      	cmp	r3, r4
 8024b76:	696b      	ldr	r3, [r5, #20]
 8024b78:	d108      	bne.n	8024b8c <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 8024b7a:	8819      	ldrh	r1, [r3, #0]
 8024b7c:	440a      	add	r2, r1
 8024b7e:	801a      	strh	r2, [r3, #0]
 8024b80:	3c01      	subs	r4, #1
 8024b82:	4434      	add	r4, r6
 8024b84:	e9c5 4701 	strd	r4, r7, [r5, #4]
 8024b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024b8c:	1c99      	adds	r1, r3, #2
 8024b8e:	6169      	str	r1, [r5, #20]
 8024b90:	805a      	strh	r2, [r3, #2]
 8024b92:	692b      	ldr	r3, [r5, #16]
 8024b94:	1c9a      	adds	r2, r3, #2
 8024b96:	612a      	str	r2, [r5, #16]
 8024b98:	805c      	strh	r4, [r3, #2]
 8024b9a:	68eb      	ldr	r3, [r5, #12]
 8024b9c:	3301      	adds	r3, #1
 8024b9e:	60eb      	str	r3, [r5, #12]
 8024ba0:	e7ee      	b.n	8024b80 <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

08024ba2 <_ZN8touchgfx15RenderingBufferC1Ev>:
 8024ba2:	2200      	movs	r2, #0
 8024ba4:	6002      	str	r2, [r0, #0]
 8024ba6:	7102      	strb	r2, [r0, #4]
 8024ba8:	6102      	str	r2, [r0, #16]
 8024baa:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8024bae:	4770      	bx	lr

08024bb0 <_ZN8touchgfx15RenderingBufferD1Ev>:
 8024bb0:	4770      	bx	lr

08024bb2 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 8024bb2:	6083      	str	r3, [r0, #8]
 8024bb4:	9b00      	ldr	r3, [sp, #0]
 8024bb6:	6001      	str	r1, [r0, #0]
 8024bb8:	60c3      	str	r3, [r0, #12]
 8024bba:	9b01      	ldr	r3, [sp, #4]
 8024bbc:	7102      	strb	r2, [r0, #4]
 8024bbe:	6103      	str	r3, [r0, #16]
 8024bc0:	4770      	bx	lr

08024bc2 <__aeabi_atexit>:
 8024bc2:	460b      	mov	r3, r1
 8024bc4:	4601      	mov	r1, r0
 8024bc6:	4618      	mov	r0, r3
 8024bc8:	f000 b852 	b.w	8024c70 <__cxa_atexit>

08024bcc <__cxa_pure_virtual>:
 8024bcc:	b508      	push	{r3, lr}
 8024bce:	f000 f81f 	bl	8024c10 <_ZSt9terminatev>

08024bd2 <_ZdlPvj>:
 8024bd2:	f000 b80f 	b.w	8024bf4 <_ZdlPv>

08024bd6 <__cxa_guard_acquire>:
 8024bd6:	6803      	ldr	r3, [r0, #0]
 8024bd8:	07db      	lsls	r3, r3, #31
 8024bda:	d406      	bmi.n	8024bea <__cxa_guard_acquire+0x14>
 8024bdc:	7843      	ldrb	r3, [r0, #1]
 8024bde:	b103      	cbz	r3, 8024be2 <__cxa_guard_acquire+0xc>
 8024be0:	deff      	udf	#255	; 0xff
 8024be2:	2301      	movs	r3, #1
 8024be4:	7043      	strb	r3, [r0, #1]
 8024be6:	4618      	mov	r0, r3
 8024be8:	4770      	bx	lr
 8024bea:	2000      	movs	r0, #0
 8024bec:	4770      	bx	lr

08024bee <__cxa_guard_release>:
 8024bee:	2301      	movs	r3, #1
 8024bf0:	6003      	str	r3, [r0, #0]
 8024bf2:	4770      	bx	lr

08024bf4 <_ZdlPv>:
 8024bf4:	f000 b88e 	b.w	8024d14 <free>

08024bf8 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8024bf8:	b508      	push	{r3, lr}
 8024bfa:	4780      	blx	r0
 8024bfc:	f000 f80d 	bl	8024c1a <abort>

08024c00 <_ZSt13get_terminatev>:
 8024c00:	4b02      	ldr	r3, [pc, #8]	; (8024c0c <_ZSt13get_terminatev+0xc>)
 8024c02:	6818      	ldr	r0, [r3, #0]
 8024c04:	f3bf 8f5b 	dmb	ish
 8024c08:	4770      	bx	lr
 8024c0a:	bf00      	nop
 8024c0c:	20000098 	.word	0x20000098

08024c10 <_ZSt9terminatev>:
 8024c10:	b508      	push	{r3, lr}
 8024c12:	f7ff fff5 	bl	8024c00 <_ZSt13get_terminatev>
 8024c16:	f7ff ffef 	bl	8024bf8 <_ZN10__cxxabiv111__terminateEPFvvE>

08024c1a <abort>:
 8024c1a:	b508      	push	{r3, lr}
 8024c1c:	2006      	movs	r0, #6
 8024c1e:	f000 fc3d 	bl	802549c <raise>
 8024c22:	2001      	movs	r0, #1
 8024c24:	f7de fe60 	bl	80038e8 <_exit>

08024c28 <__assert_func>:
 8024c28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8024c2a:	461c      	mov	r4, r3
 8024c2c:	4b09      	ldr	r3, [pc, #36]	; (8024c54 <__assert_func+0x2c>)
 8024c2e:	681b      	ldr	r3, [r3, #0]
 8024c30:	4605      	mov	r5, r0
 8024c32:	68d8      	ldr	r0, [r3, #12]
 8024c34:	b152      	cbz	r2, 8024c4c <__assert_func+0x24>
 8024c36:	4b08      	ldr	r3, [pc, #32]	; (8024c58 <__assert_func+0x30>)
 8024c38:	9100      	str	r1, [sp, #0]
 8024c3a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8024c3e:	4907      	ldr	r1, [pc, #28]	; (8024c5c <__assert_func+0x34>)
 8024c40:	462b      	mov	r3, r5
 8024c42:	4622      	mov	r2, r4
 8024c44:	f000 f828 	bl	8024c98 <fiprintf>
 8024c48:	f7ff ffe7 	bl	8024c1a <abort>
 8024c4c:	4b04      	ldr	r3, [pc, #16]	; (8024c60 <__assert_func+0x38>)
 8024c4e:	461a      	mov	r2, r3
 8024c50:	e7f2      	b.n	8024c38 <__assert_func+0x10>
 8024c52:	bf00      	nop
 8024c54:	2000009c 	.word	0x2000009c
 8024c58:	08029eac 	.word	0x08029eac
 8024c5c:	08029eb9 	.word	0x08029eb9
 8024c60:	08029ee7 	.word	0x08029ee7

08024c64 <atexit>:
 8024c64:	2300      	movs	r3, #0
 8024c66:	4601      	mov	r1, r0
 8024c68:	461a      	mov	r2, r3
 8024c6a:	4618      	mov	r0, r3
 8024c6c:	f000 bcf2 	b.w	8025654 <__register_exitproc>

08024c70 <__cxa_atexit>:
 8024c70:	b510      	push	{r4, lr}
 8024c72:	4c05      	ldr	r4, [pc, #20]	; (8024c88 <__cxa_atexit+0x18>)
 8024c74:	4613      	mov	r3, r2
 8024c76:	b12c      	cbz	r4, 8024c84 <__cxa_atexit+0x14>
 8024c78:	460a      	mov	r2, r1
 8024c7a:	4601      	mov	r1, r0
 8024c7c:	2002      	movs	r0, #2
 8024c7e:	f000 fce9 	bl	8025654 <__register_exitproc>
 8024c82:	bd10      	pop	{r4, pc}
 8024c84:	4620      	mov	r0, r4
 8024c86:	e7fc      	b.n	8024c82 <__cxa_atexit+0x12>
 8024c88:	08025655 	.word	0x08025655

08024c8c <__errno>:
 8024c8c:	4b01      	ldr	r3, [pc, #4]	; (8024c94 <__errno+0x8>)
 8024c8e:	6818      	ldr	r0, [r3, #0]
 8024c90:	4770      	bx	lr
 8024c92:	bf00      	nop
 8024c94:	2000009c 	.word	0x2000009c

08024c98 <fiprintf>:
 8024c98:	b40e      	push	{r1, r2, r3}
 8024c9a:	b503      	push	{r0, r1, lr}
 8024c9c:	4601      	mov	r1, r0
 8024c9e:	ab03      	add	r3, sp, #12
 8024ca0:	4805      	ldr	r0, [pc, #20]	; (8024cb8 <fiprintf+0x20>)
 8024ca2:	f853 2b04 	ldr.w	r2, [r3], #4
 8024ca6:	6800      	ldr	r0, [r0, #0]
 8024ca8:	9301      	str	r3, [sp, #4]
 8024caa:	f000 f921 	bl	8024ef0 <_vfiprintf_r>
 8024cae:	b002      	add	sp, #8
 8024cb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8024cb4:	b003      	add	sp, #12
 8024cb6:	4770      	bx	lr
 8024cb8:	2000009c 	.word	0x2000009c

08024cbc <__libc_init_array>:
 8024cbc:	b570      	push	{r4, r5, r6, lr}
 8024cbe:	4e0d      	ldr	r6, [pc, #52]	; (8024cf4 <__libc_init_array+0x38>)
 8024cc0:	4c0d      	ldr	r4, [pc, #52]	; (8024cf8 <__libc_init_array+0x3c>)
 8024cc2:	1ba4      	subs	r4, r4, r6
 8024cc4:	10a4      	asrs	r4, r4, #2
 8024cc6:	2500      	movs	r5, #0
 8024cc8:	42a5      	cmp	r5, r4
 8024cca:	d109      	bne.n	8024ce0 <__libc_init_array+0x24>
 8024ccc:	4e0b      	ldr	r6, [pc, #44]	; (8024cfc <__libc_init_array+0x40>)
 8024cce:	4c0c      	ldr	r4, [pc, #48]	; (8024d00 <__libc_init_array+0x44>)
 8024cd0:	f000 ffb0 	bl	8025c34 <_init>
 8024cd4:	1ba4      	subs	r4, r4, r6
 8024cd6:	10a4      	asrs	r4, r4, #2
 8024cd8:	2500      	movs	r5, #0
 8024cda:	42a5      	cmp	r5, r4
 8024cdc:	d105      	bne.n	8024cea <__libc_init_array+0x2e>
 8024cde:	bd70      	pop	{r4, r5, r6, pc}
 8024ce0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8024ce4:	4798      	blx	r3
 8024ce6:	3501      	adds	r5, #1
 8024ce8:	e7ee      	b.n	8024cc8 <__libc_init_array+0xc>
 8024cea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8024cee:	4798      	blx	r3
 8024cf0:	3501      	adds	r5, #1
 8024cf2:	e7f2      	b.n	8024cda <__libc_init_array+0x1e>
 8024cf4:	08061350 	.word	0x08061350
 8024cf8:	08061350 	.word	0x08061350
 8024cfc:	08061350 	.word	0x08061350
 8024d00:	08061364 	.word	0x08061364

08024d04 <malloc>:
 8024d04:	4b02      	ldr	r3, [pc, #8]	; (8024d10 <malloc+0xc>)
 8024d06:	4601      	mov	r1, r0
 8024d08:	6818      	ldr	r0, [r3, #0]
 8024d0a:	f000 b86d 	b.w	8024de8 <_malloc_r>
 8024d0e:	bf00      	nop
 8024d10:	2000009c 	.word	0x2000009c

08024d14 <free>:
 8024d14:	4b02      	ldr	r3, [pc, #8]	; (8024d20 <free+0xc>)
 8024d16:	4601      	mov	r1, r0
 8024d18:	6818      	ldr	r0, [r3, #0]
 8024d1a:	f000 b817 	b.w	8024d4c <_free_r>
 8024d1e:	bf00      	nop
 8024d20:	2000009c 	.word	0x2000009c

08024d24 <memcpy>:
 8024d24:	b510      	push	{r4, lr}
 8024d26:	1e43      	subs	r3, r0, #1
 8024d28:	440a      	add	r2, r1
 8024d2a:	4291      	cmp	r1, r2
 8024d2c:	d100      	bne.n	8024d30 <memcpy+0xc>
 8024d2e:	bd10      	pop	{r4, pc}
 8024d30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8024d34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8024d38:	e7f7      	b.n	8024d2a <memcpy+0x6>

08024d3a <memset>:
 8024d3a:	4402      	add	r2, r0
 8024d3c:	4603      	mov	r3, r0
 8024d3e:	4293      	cmp	r3, r2
 8024d40:	d100      	bne.n	8024d44 <memset+0xa>
 8024d42:	4770      	bx	lr
 8024d44:	f803 1b01 	strb.w	r1, [r3], #1
 8024d48:	e7f9      	b.n	8024d3e <memset+0x4>
	...

08024d4c <_free_r>:
 8024d4c:	b538      	push	{r3, r4, r5, lr}
 8024d4e:	4605      	mov	r5, r0
 8024d50:	2900      	cmp	r1, #0
 8024d52:	d045      	beq.n	8024de0 <_free_r+0x94>
 8024d54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8024d58:	1f0c      	subs	r4, r1, #4
 8024d5a:	2b00      	cmp	r3, #0
 8024d5c:	bfb8      	it	lt
 8024d5e:	18e4      	addlt	r4, r4, r3
 8024d60:	f000 feba 	bl	8025ad8 <__malloc_lock>
 8024d64:	4a1f      	ldr	r2, [pc, #124]	; (8024de4 <_free_r+0x98>)
 8024d66:	6813      	ldr	r3, [r2, #0]
 8024d68:	4610      	mov	r0, r2
 8024d6a:	b933      	cbnz	r3, 8024d7a <_free_r+0x2e>
 8024d6c:	6063      	str	r3, [r4, #4]
 8024d6e:	6014      	str	r4, [r2, #0]
 8024d70:	4628      	mov	r0, r5
 8024d72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024d76:	f000 beb0 	b.w	8025ada <__malloc_unlock>
 8024d7a:	42a3      	cmp	r3, r4
 8024d7c:	d90c      	bls.n	8024d98 <_free_r+0x4c>
 8024d7e:	6821      	ldr	r1, [r4, #0]
 8024d80:	1862      	adds	r2, r4, r1
 8024d82:	4293      	cmp	r3, r2
 8024d84:	bf04      	itt	eq
 8024d86:	681a      	ldreq	r2, [r3, #0]
 8024d88:	685b      	ldreq	r3, [r3, #4]
 8024d8a:	6063      	str	r3, [r4, #4]
 8024d8c:	bf04      	itt	eq
 8024d8e:	1852      	addeq	r2, r2, r1
 8024d90:	6022      	streq	r2, [r4, #0]
 8024d92:	6004      	str	r4, [r0, #0]
 8024d94:	e7ec      	b.n	8024d70 <_free_r+0x24>
 8024d96:	4613      	mov	r3, r2
 8024d98:	685a      	ldr	r2, [r3, #4]
 8024d9a:	b10a      	cbz	r2, 8024da0 <_free_r+0x54>
 8024d9c:	42a2      	cmp	r2, r4
 8024d9e:	d9fa      	bls.n	8024d96 <_free_r+0x4a>
 8024da0:	6819      	ldr	r1, [r3, #0]
 8024da2:	1858      	adds	r0, r3, r1
 8024da4:	42a0      	cmp	r0, r4
 8024da6:	d10b      	bne.n	8024dc0 <_free_r+0x74>
 8024da8:	6820      	ldr	r0, [r4, #0]
 8024daa:	4401      	add	r1, r0
 8024dac:	1858      	adds	r0, r3, r1
 8024dae:	4282      	cmp	r2, r0
 8024db0:	6019      	str	r1, [r3, #0]
 8024db2:	d1dd      	bne.n	8024d70 <_free_r+0x24>
 8024db4:	6810      	ldr	r0, [r2, #0]
 8024db6:	6852      	ldr	r2, [r2, #4]
 8024db8:	605a      	str	r2, [r3, #4]
 8024dba:	4401      	add	r1, r0
 8024dbc:	6019      	str	r1, [r3, #0]
 8024dbe:	e7d7      	b.n	8024d70 <_free_r+0x24>
 8024dc0:	d902      	bls.n	8024dc8 <_free_r+0x7c>
 8024dc2:	230c      	movs	r3, #12
 8024dc4:	602b      	str	r3, [r5, #0]
 8024dc6:	e7d3      	b.n	8024d70 <_free_r+0x24>
 8024dc8:	6820      	ldr	r0, [r4, #0]
 8024dca:	1821      	adds	r1, r4, r0
 8024dcc:	428a      	cmp	r2, r1
 8024dce:	bf04      	itt	eq
 8024dd0:	6811      	ldreq	r1, [r2, #0]
 8024dd2:	6852      	ldreq	r2, [r2, #4]
 8024dd4:	6062      	str	r2, [r4, #4]
 8024dd6:	bf04      	itt	eq
 8024dd8:	1809      	addeq	r1, r1, r0
 8024dda:	6021      	streq	r1, [r4, #0]
 8024ddc:	605c      	str	r4, [r3, #4]
 8024dde:	e7c7      	b.n	8024d70 <_free_r+0x24>
 8024de0:	bd38      	pop	{r3, r4, r5, pc}
 8024de2:	bf00      	nop
 8024de4:	2000bd98 	.word	0x2000bd98

08024de8 <_malloc_r>:
 8024de8:	b570      	push	{r4, r5, r6, lr}
 8024dea:	1ccd      	adds	r5, r1, #3
 8024dec:	f025 0503 	bic.w	r5, r5, #3
 8024df0:	3508      	adds	r5, #8
 8024df2:	2d0c      	cmp	r5, #12
 8024df4:	bf38      	it	cc
 8024df6:	250c      	movcc	r5, #12
 8024df8:	2d00      	cmp	r5, #0
 8024dfa:	4606      	mov	r6, r0
 8024dfc:	db01      	blt.n	8024e02 <_malloc_r+0x1a>
 8024dfe:	42a9      	cmp	r1, r5
 8024e00:	d903      	bls.n	8024e0a <_malloc_r+0x22>
 8024e02:	230c      	movs	r3, #12
 8024e04:	6033      	str	r3, [r6, #0]
 8024e06:	2000      	movs	r0, #0
 8024e08:	bd70      	pop	{r4, r5, r6, pc}
 8024e0a:	f000 fe65 	bl	8025ad8 <__malloc_lock>
 8024e0e:	4a21      	ldr	r2, [pc, #132]	; (8024e94 <_malloc_r+0xac>)
 8024e10:	6814      	ldr	r4, [r2, #0]
 8024e12:	4621      	mov	r1, r4
 8024e14:	b991      	cbnz	r1, 8024e3c <_malloc_r+0x54>
 8024e16:	4c20      	ldr	r4, [pc, #128]	; (8024e98 <_malloc_r+0xb0>)
 8024e18:	6823      	ldr	r3, [r4, #0]
 8024e1a:	b91b      	cbnz	r3, 8024e24 <_malloc_r+0x3c>
 8024e1c:	4630      	mov	r0, r6
 8024e1e:	f000 fb05 	bl	802542c <_sbrk_r>
 8024e22:	6020      	str	r0, [r4, #0]
 8024e24:	4629      	mov	r1, r5
 8024e26:	4630      	mov	r0, r6
 8024e28:	f000 fb00 	bl	802542c <_sbrk_r>
 8024e2c:	1c43      	adds	r3, r0, #1
 8024e2e:	d124      	bne.n	8024e7a <_malloc_r+0x92>
 8024e30:	230c      	movs	r3, #12
 8024e32:	6033      	str	r3, [r6, #0]
 8024e34:	4630      	mov	r0, r6
 8024e36:	f000 fe50 	bl	8025ada <__malloc_unlock>
 8024e3a:	e7e4      	b.n	8024e06 <_malloc_r+0x1e>
 8024e3c:	680b      	ldr	r3, [r1, #0]
 8024e3e:	1b5b      	subs	r3, r3, r5
 8024e40:	d418      	bmi.n	8024e74 <_malloc_r+0x8c>
 8024e42:	2b0b      	cmp	r3, #11
 8024e44:	d90f      	bls.n	8024e66 <_malloc_r+0x7e>
 8024e46:	600b      	str	r3, [r1, #0]
 8024e48:	50cd      	str	r5, [r1, r3]
 8024e4a:	18cc      	adds	r4, r1, r3
 8024e4c:	4630      	mov	r0, r6
 8024e4e:	f000 fe44 	bl	8025ada <__malloc_unlock>
 8024e52:	f104 000b 	add.w	r0, r4, #11
 8024e56:	1d23      	adds	r3, r4, #4
 8024e58:	f020 0007 	bic.w	r0, r0, #7
 8024e5c:	1ac3      	subs	r3, r0, r3
 8024e5e:	d0d3      	beq.n	8024e08 <_malloc_r+0x20>
 8024e60:	425a      	negs	r2, r3
 8024e62:	50e2      	str	r2, [r4, r3]
 8024e64:	e7d0      	b.n	8024e08 <_malloc_r+0x20>
 8024e66:	428c      	cmp	r4, r1
 8024e68:	684b      	ldr	r3, [r1, #4]
 8024e6a:	bf16      	itet	ne
 8024e6c:	6063      	strne	r3, [r4, #4]
 8024e6e:	6013      	streq	r3, [r2, #0]
 8024e70:	460c      	movne	r4, r1
 8024e72:	e7eb      	b.n	8024e4c <_malloc_r+0x64>
 8024e74:	460c      	mov	r4, r1
 8024e76:	6849      	ldr	r1, [r1, #4]
 8024e78:	e7cc      	b.n	8024e14 <_malloc_r+0x2c>
 8024e7a:	1cc4      	adds	r4, r0, #3
 8024e7c:	f024 0403 	bic.w	r4, r4, #3
 8024e80:	42a0      	cmp	r0, r4
 8024e82:	d005      	beq.n	8024e90 <_malloc_r+0xa8>
 8024e84:	1a21      	subs	r1, r4, r0
 8024e86:	4630      	mov	r0, r6
 8024e88:	f000 fad0 	bl	802542c <_sbrk_r>
 8024e8c:	3001      	adds	r0, #1
 8024e8e:	d0cf      	beq.n	8024e30 <_malloc_r+0x48>
 8024e90:	6025      	str	r5, [r4, #0]
 8024e92:	e7db      	b.n	8024e4c <_malloc_r+0x64>
 8024e94:	2000bd98 	.word	0x2000bd98
 8024e98:	2000bd9c 	.word	0x2000bd9c

08024e9c <__sfputc_r>:
 8024e9c:	6893      	ldr	r3, [r2, #8]
 8024e9e:	3b01      	subs	r3, #1
 8024ea0:	2b00      	cmp	r3, #0
 8024ea2:	b410      	push	{r4}
 8024ea4:	6093      	str	r3, [r2, #8]
 8024ea6:	da08      	bge.n	8024eba <__sfputc_r+0x1e>
 8024ea8:	6994      	ldr	r4, [r2, #24]
 8024eaa:	42a3      	cmp	r3, r4
 8024eac:	db01      	blt.n	8024eb2 <__sfputc_r+0x16>
 8024eae:	290a      	cmp	r1, #10
 8024eb0:	d103      	bne.n	8024eba <__sfputc_r+0x1e>
 8024eb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024eb6:	f000 bb0d 	b.w	80254d4 <__swbuf_r>
 8024eba:	6813      	ldr	r3, [r2, #0]
 8024ebc:	1c58      	adds	r0, r3, #1
 8024ebe:	6010      	str	r0, [r2, #0]
 8024ec0:	7019      	strb	r1, [r3, #0]
 8024ec2:	4608      	mov	r0, r1
 8024ec4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024ec8:	4770      	bx	lr

08024eca <__sfputs_r>:
 8024eca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024ecc:	4606      	mov	r6, r0
 8024ece:	460f      	mov	r7, r1
 8024ed0:	4614      	mov	r4, r2
 8024ed2:	18d5      	adds	r5, r2, r3
 8024ed4:	42ac      	cmp	r4, r5
 8024ed6:	d101      	bne.n	8024edc <__sfputs_r+0x12>
 8024ed8:	2000      	movs	r0, #0
 8024eda:	e007      	b.n	8024eec <__sfputs_r+0x22>
 8024edc:	463a      	mov	r2, r7
 8024ede:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024ee2:	4630      	mov	r0, r6
 8024ee4:	f7ff ffda 	bl	8024e9c <__sfputc_r>
 8024ee8:	1c43      	adds	r3, r0, #1
 8024eea:	d1f3      	bne.n	8024ed4 <__sfputs_r+0xa>
 8024eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08024ef0 <_vfiprintf_r>:
 8024ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024ef4:	460c      	mov	r4, r1
 8024ef6:	b09d      	sub	sp, #116	; 0x74
 8024ef8:	4617      	mov	r7, r2
 8024efa:	461d      	mov	r5, r3
 8024efc:	4606      	mov	r6, r0
 8024efe:	b118      	cbz	r0, 8024f08 <_vfiprintf_r+0x18>
 8024f00:	6983      	ldr	r3, [r0, #24]
 8024f02:	b90b      	cbnz	r3, 8024f08 <_vfiprintf_r+0x18>
 8024f04:	f000 fcfa 	bl	80258fc <__sinit>
 8024f08:	4b7c      	ldr	r3, [pc, #496]	; (80250fc <_vfiprintf_r+0x20c>)
 8024f0a:	429c      	cmp	r4, r3
 8024f0c:	d158      	bne.n	8024fc0 <_vfiprintf_r+0xd0>
 8024f0e:	6874      	ldr	r4, [r6, #4]
 8024f10:	89a3      	ldrh	r3, [r4, #12]
 8024f12:	0718      	lsls	r0, r3, #28
 8024f14:	d55e      	bpl.n	8024fd4 <_vfiprintf_r+0xe4>
 8024f16:	6923      	ldr	r3, [r4, #16]
 8024f18:	2b00      	cmp	r3, #0
 8024f1a:	d05b      	beq.n	8024fd4 <_vfiprintf_r+0xe4>
 8024f1c:	2300      	movs	r3, #0
 8024f1e:	9309      	str	r3, [sp, #36]	; 0x24
 8024f20:	2320      	movs	r3, #32
 8024f22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8024f26:	2330      	movs	r3, #48	; 0x30
 8024f28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8024f2c:	9503      	str	r5, [sp, #12]
 8024f2e:	f04f 0b01 	mov.w	fp, #1
 8024f32:	46b8      	mov	r8, r7
 8024f34:	4645      	mov	r5, r8
 8024f36:	f815 3b01 	ldrb.w	r3, [r5], #1
 8024f3a:	b10b      	cbz	r3, 8024f40 <_vfiprintf_r+0x50>
 8024f3c:	2b25      	cmp	r3, #37	; 0x25
 8024f3e:	d154      	bne.n	8024fea <_vfiprintf_r+0xfa>
 8024f40:	ebb8 0a07 	subs.w	sl, r8, r7
 8024f44:	d00b      	beq.n	8024f5e <_vfiprintf_r+0x6e>
 8024f46:	4653      	mov	r3, sl
 8024f48:	463a      	mov	r2, r7
 8024f4a:	4621      	mov	r1, r4
 8024f4c:	4630      	mov	r0, r6
 8024f4e:	f7ff ffbc 	bl	8024eca <__sfputs_r>
 8024f52:	3001      	adds	r0, #1
 8024f54:	f000 80c2 	beq.w	80250dc <_vfiprintf_r+0x1ec>
 8024f58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024f5a:	4453      	add	r3, sl
 8024f5c:	9309      	str	r3, [sp, #36]	; 0x24
 8024f5e:	f898 3000 	ldrb.w	r3, [r8]
 8024f62:	2b00      	cmp	r3, #0
 8024f64:	f000 80ba 	beq.w	80250dc <_vfiprintf_r+0x1ec>
 8024f68:	2300      	movs	r3, #0
 8024f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8024f6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8024f72:	9304      	str	r3, [sp, #16]
 8024f74:	9307      	str	r3, [sp, #28]
 8024f76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8024f7a:	931a      	str	r3, [sp, #104]	; 0x68
 8024f7c:	46a8      	mov	r8, r5
 8024f7e:	2205      	movs	r2, #5
 8024f80:	f818 1b01 	ldrb.w	r1, [r8], #1
 8024f84:	485e      	ldr	r0, [pc, #376]	; (8025100 <_vfiprintf_r+0x210>)
 8024f86:	f7db f943 	bl	8000210 <memchr>
 8024f8a:	9b04      	ldr	r3, [sp, #16]
 8024f8c:	bb78      	cbnz	r0, 8024fee <_vfiprintf_r+0xfe>
 8024f8e:	06d9      	lsls	r1, r3, #27
 8024f90:	bf44      	itt	mi
 8024f92:	2220      	movmi	r2, #32
 8024f94:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8024f98:	071a      	lsls	r2, r3, #28
 8024f9a:	bf44      	itt	mi
 8024f9c:	222b      	movmi	r2, #43	; 0x2b
 8024f9e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8024fa2:	782a      	ldrb	r2, [r5, #0]
 8024fa4:	2a2a      	cmp	r2, #42	; 0x2a
 8024fa6:	d02a      	beq.n	8024ffe <_vfiprintf_r+0x10e>
 8024fa8:	9a07      	ldr	r2, [sp, #28]
 8024faa:	46a8      	mov	r8, r5
 8024fac:	2000      	movs	r0, #0
 8024fae:	250a      	movs	r5, #10
 8024fb0:	4641      	mov	r1, r8
 8024fb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8024fb6:	3b30      	subs	r3, #48	; 0x30
 8024fb8:	2b09      	cmp	r3, #9
 8024fba:	d969      	bls.n	8025090 <_vfiprintf_r+0x1a0>
 8024fbc:	b360      	cbz	r0, 8025018 <_vfiprintf_r+0x128>
 8024fbe:	e024      	b.n	802500a <_vfiprintf_r+0x11a>
 8024fc0:	4b50      	ldr	r3, [pc, #320]	; (8025104 <_vfiprintf_r+0x214>)
 8024fc2:	429c      	cmp	r4, r3
 8024fc4:	d101      	bne.n	8024fca <_vfiprintf_r+0xda>
 8024fc6:	68b4      	ldr	r4, [r6, #8]
 8024fc8:	e7a2      	b.n	8024f10 <_vfiprintf_r+0x20>
 8024fca:	4b4f      	ldr	r3, [pc, #316]	; (8025108 <_vfiprintf_r+0x218>)
 8024fcc:	429c      	cmp	r4, r3
 8024fce:	bf08      	it	eq
 8024fd0:	68f4      	ldreq	r4, [r6, #12]
 8024fd2:	e79d      	b.n	8024f10 <_vfiprintf_r+0x20>
 8024fd4:	4621      	mov	r1, r4
 8024fd6:	4630      	mov	r0, r6
 8024fd8:	f000 face 	bl	8025578 <__swsetup_r>
 8024fdc:	2800      	cmp	r0, #0
 8024fde:	d09d      	beq.n	8024f1c <_vfiprintf_r+0x2c>
 8024fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8024fe4:	b01d      	add	sp, #116	; 0x74
 8024fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024fea:	46a8      	mov	r8, r5
 8024fec:	e7a2      	b.n	8024f34 <_vfiprintf_r+0x44>
 8024fee:	4a44      	ldr	r2, [pc, #272]	; (8025100 <_vfiprintf_r+0x210>)
 8024ff0:	1a80      	subs	r0, r0, r2
 8024ff2:	fa0b f000 	lsl.w	r0, fp, r0
 8024ff6:	4318      	orrs	r0, r3
 8024ff8:	9004      	str	r0, [sp, #16]
 8024ffa:	4645      	mov	r5, r8
 8024ffc:	e7be      	b.n	8024f7c <_vfiprintf_r+0x8c>
 8024ffe:	9a03      	ldr	r2, [sp, #12]
 8025000:	1d11      	adds	r1, r2, #4
 8025002:	6812      	ldr	r2, [r2, #0]
 8025004:	9103      	str	r1, [sp, #12]
 8025006:	2a00      	cmp	r2, #0
 8025008:	db01      	blt.n	802500e <_vfiprintf_r+0x11e>
 802500a:	9207      	str	r2, [sp, #28]
 802500c:	e004      	b.n	8025018 <_vfiprintf_r+0x128>
 802500e:	4252      	negs	r2, r2
 8025010:	f043 0302 	orr.w	r3, r3, #2
 8025014:	9207      	str	r2, [sp, #28]
 8025016:	9304      	str	r3, [sp, #16]
 8025018:	f898 3000 	ldrb.w	r3, [r8]
 802501c:	2b2e      	cmp	r3, #46	; 0x2e
 802501e:	d10e      	bne.n	802503e <_vfiprintf_r+0x14e>
 8025020:	f898 3001 	ldrb.w	r3, [r8, #1]
 8025024:	2b2a      	cmp	r3, #42	; 0x2a
 8025026:	d138      	bne.n	802509a <_vfiprintf_r+0x1aa>
 8025028:	9b03      	ldr	r3, [sp, #12]
 802502a:	1d1a      	adds	r2, r3, #4
 802502c:	681b      	ldr	r3, [r3, #0]
 802502e:	9203      	str	r2, [sp, #12]
 8025030:	2b00      	cmp	r3, #0
 8025032:	bfb8      	it	lt
 8025034:	f04f 33ff 	movlt.w	r3, #4294967295
 8025038:	f108 0802 	add.w	r8, r8, #2
 802503c:	9305      	str	r3, [sp, #20]
 802503e:	4d33      	ldr	r5, [pc, #204]	; (802510c <_vfiprintf_r+0x21c>)
 8025040:	f898 1000 	ldrb.w	r1, [r8]
 8025044:	2203      	movs	r2, #3
 8025046:	4628      	mov	r0, r5
 8025048:	f7db f8e2 	bl	8000210 <memchr>
 802504c:	b140      	cbz	r0, 8025060 <_vfiprintf_r+0x170>
 802504e:	2340      	movs	r3, #64	; 0x40
 8025050:	1b40      	subs	r0, r0, r5
 8025052:	fa03 f000 	lsl.w	r0, r3, r0
 8025056:	9b04      	ldr	r3, [sp, #16]
 8025058:	4303      	orrs	r3, r0
 802505a:	f108 0801 	add.w	r8, r8, #1
 802505e:	9304      	str	r3, [sp, #16]
 8025060:	f898 1000 	ldrb.w	r1, [r8]
 8025064:	482a      	ldr	r0, [pc, #168]	; (8025110 <_vfiprintf_r+0x220>)
 8025066:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802506a:	2206      	movs	r2, #6
 802506c:	f108 0701 	add.w	r7, r8, #1
 8025070:	f7db f8ce 	bl	8000210 <memchr>
 8025074:	2800      	cmp	r0, #0
 8025076:	d037      	beq.n	80250e8 <_vfiprintf_r+0x1f8>
 8025078:	4b26      	ldr	r3, [pc, #152]	; (8025114 <_vfiprintf_r+0x224>)
 802507a:	bb1b      	cbnz	r3, 80250c4 <_vfiprintf_r+0x1d4>
 802507c:	9b03      	ldr	r3, [sp, #12]
 802507e:	3307      	adds	r3, #7
 8025080:	f023 0307 	bic.w	r3, r3, #7
 8025084:	3308      	adds	r3, #8
 8025086:	9303      	str	r3, [sp, #12]
 8025088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802508a:	444b      	add	r3, r9
 802508c:	9309      	str	r3, [sp, #36]	; 0x24
 802508e:	e750      	b.n	8024f32 <_vfiprintf_r+0x42>
 8025090:	fb05 3202 	mla	r2, r5, r2, r3
 8025094:	2001      	movs	r0, #1
 8025096:	4688      	mov	r8, r1
 8025098:	e78a      	b.n	8024fb0 <_vfiprintf_r+0xc0>
 802509a:	2300      	movs	r3, #0
 802509c:	f108 0801 	add.w	r8, r8, #1
 80250a0:	9305      	str	r3, [sp, #20]
 80250a2:	4619      	mov	r1, r3
 80250a4:	250a      	movs	r5, #10
 80250a6:	4640      	mov	r0, r8
 80250a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80250ac:	3a30      	subs	r2, #48	; 0x30
 80250ae:	2a09      	cmp	r2, #9
 80250b0:	d903      	bls.n	80250ba <_vfiprintf_r+0x1ca>
 80250b2:	2b00      	cmp	r3, #0
 80250b4:	d0c3      	beq.n	802503e <_vfiprintf_r+0x14e>
 80250b6:	9105      	str	r1, [sp, #20]
 80250b8:	e7c1      	b.n	802503e <_vfiprintf_r+0x14e>
 80250ba:	fb05 2101 	mla	r1, r5, r1, r2
 80250be:	2301      	movs	r3, #1
 80250c0:	4680      	mov	r8, r0
 80250c2:	e7f0      	b.n	80250a6 <_vfiprintf_r+0x1b6>
 80250c4:	ab03      	add	r3, sp, #12
 80250c6:	9300      	str	r3, [sp, #0]
 80250c8:	4622      	mov	r2, r4
 80250ca:	4b13      	ldr	r3, [pc, #76]	; (8025118 <_vfiprintf_r+0x228>)
 80250cc:	a904      	add	r1, sp, #16
 80250ce:	4630      	mov	r0, r6
 80250d0:	f3af 8000 	nop.w
 80250d4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80250d8:	4681      	mov	r9, r0
 80250da:	d1d5      	bne.n	8025088 <_vfiprintf_r+0x198>
 80250dc:	89a3      	ldrh	r3, [r4, #12]
 80250de:	065b      	lsls	r3, r3, #25
 80250e0:	f53f af7e 	bmi.w	8024fe0 <_vfiprintf_r+0xf0>
 80250e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80250e6:	e77d      	b.n	8024fe4 <_vfiprintf_r+0xf4>
 80250e8:	ab03      	add	r3, sp, #12
 80250ea:	9300      	str	r3, [sp, #0]
 80250ec:	4622      	mov	r2, r4
 80250ee:	4b0a      	ldr	r3, [pc, #40]	; (8025118 <_vfiprintf_r+0x228>)
 80250f0:	a904      	add	r1, sp, #16
 80250f2:	4630      	mov	r0, r6
 80250f4:	f000 f888 	bl	8025208 <_printf_i>
 80250f8:	e7ec      	b.n	80250d4 <_vfiprintf_r+0x1e4>
 80250fa:	bf00      	nop
 80250fc:	08029f44 	.word	0x08029f44
 8025100:	08029eec 	.word	0x08029eec
 8025104:	08029f64 	.word	0x08029f64
 8025108:	08029f24 	.word	0x08029f24
 802510c:	08029ef2 	.word	0x08029ef2
 8025110:	08029ef6 	.word	0x08029ef6
 8025114:	00000000 	.word	0x00000000
 8025118:	08024ecb 	.word	0x08024ecb

0802511c <_printf_common>:
 802511c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025120:	4691      	mov	r9, r2
 8025122:	461f      	mov	r7, r3
 8025124:	688a      	ldr	r2, [r1, #8]
 8025126:	690b      	ldr	r3, [r1, #16]
 8025128:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802512c:	4293      	cmp	r3, r2
 802512e:	bfb8      	it	lt
 8025130:	4613      	movlt	r3, r2
 8025132:	f8c9 3000 	str.w	r3, [r9]
 8025136:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802513a:	4606      	mov	r6, r0
 802513c:	460c      	mov	r4, r1
 802513e:	b112      	cbz	r2, 8025146 <_printf_common+0x2a>
 8025140:	3301      	adds	r3, #1
 8025142:	f8c9 3000 	str.w	r3, [r9]
 8025146:	6823      	ldr	r3, [r4, #0]
 8025148:	0699      	lsls	r1, r3, #26
 802514a:	bf42      	ittt	mi
 802514c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8025150:	3302      	addmi	r3, #2
 8025152:	f8c9 3000 	strmi.w	r3, [r9]
 8025156:	6825      	ldr	r5, [r4, #0]
 8025158:	f015 0506 	ands.w	r5, r5, #6
 802515c:	d107      	bne.n	802516e <_printf_common+0x52>
 802515e:	f104 0a19 	add.w	sl, r4, #25
 8025162:	68e3      	ldr	r3, [r4, #12]
 8025164:	f8d9 2000 	ldr.w	r2, [r9]
 8025168:	1a9b      	subs	r3, r3, r2
 802516a:	42ab      	cmp	r3, r5
 802516c:	dc28      	bgt.n	80251c0 <_printf_common+0xa4>
 802516e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8025172:	6822      	ldr	r2, [r4, #0]
 8025174:	3300      	adds	r3, #0
 8025176:	bf18      	it	ne
 8025178:	2301      	movne	r3, #1
 802517a:	0692      	lsls	r2, r2, #26
 802517c:	d42d      	bmi.n	80251da <_printf_common+0xbe>
 802517e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8025182:	4639      	mov	r1, r7
 8025184:	4630      	mov	r0, r6
 8025186:	47c0      	blx	r8
 8025188:	3001      	adds	r0, #1
 802518a:	d020      	beq.n	80251ce <_printf_common+0xb2>
 802518c:	6823      	ldr	r3, [r4, #0]
 802518e:	68e5      	ldr	r5, [r4, #12]
 8025190:	f8d9 2000 	ldr.w	r2, [r9]
 8025194:	f003 0306 	and.w	r3, r3, #6
 8025198:	2b04      	cmp	r3, #4
 802519a:	bf08      	it	eq
 802519c:	1aad      	subeq	r5, r5, r2
 802519e:	68a3      	ldr	r3, [r4, #8]
 80251a0:	6922      	ldr	r2, [r4, #16]
 80251a2:	bf0c      	ite	eq
 80251a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80251a8:	2500      	movne	r5, #0
 80251aa:	4293      	cmp	r3, r2
 80251ac:	bfc4      	itt	gt
 80251ae:	1a9b      	subgt	r3, r3, r2
 80251b0:	18ed      	addgt	r5, r5, r3
 80251b2:	f04f 0900 	mov.w	r9, #0
 80251b6:	341a      	adds	r4, #26
 80251b8:	454d      	cmp	r5, r9
 80251ba:	d11a      	bne.n	80251f2 <_printf_common+0xd6>
 80251bc:	2000      	movs	r0, #0
 80251be:	e008      	b.n	80251d2 <_printf_common+0xb6>
 80251c0:	2301      	movs	r3, #1
 80251c2:	4652      	mov	r2, sl
 80251c4:	4639      	mov	r1, r7
 80251c6:	4630      	mov	r0, r6
 80251c8:	47c0      	blx	r8
 80251ca:	3001      	adds	r0, #1
 80251cc:	d103      	bne.n	80251d6 <_printf_common+0xba>
 80251ce:	f04f 30ff 	mov.w	r0, #4294967295
 80251d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80251d6:	3501      	adds	r5, #1
 80251d8:	e7c3      	b.n	8025162 <_printf_common+0x46>
 80251da:	18e1      	adds	r1, r4, r3
 80251dc:	1c5a      	adds	r2, r3, #1
 80251de:	2030      	movs	r0, #48	; 0x30
 80251e0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80251e4:	4422      	add	r2, r4
 80251e6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80251ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80251ee:	3302      	adds	r3, #2
 80251f0:	e7c5      	b.n	802517e <_printf_common+0x62>
 80251f2:	2301      	movs	r3, #1
 80251f4:	4622      	mov	r2, r4
 80251f6:	4639      	mov	r1, r7
 80251f8:	4630      	mov	r0, r6
 80251fa:	47c0      	blx	r8
 80251fc:	3001      	adds	r0, #1
 80251fe:	d0e6      	beq.n	80251ce <_printf_common+0xb2>
 8025200:	f109 0901 	add.w	r9, r9, #1
 8025204:	e7d8      	b.n	80251b8 <_printf_common+0x9c>
	...

08025208 <_printf_i>:
 8025208:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802520c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8025210:	460c      	mov	r4, r1
 8025212:	7e09      	ldrb	r1, [r1, #24]
 8025214:	b085      	sub	sp, #20
 8025216:	296e      	cmp	r1, #110	; 0x6e
 8025218:	4617      	mov	r7, r2
 802521a:	4606      	mov	r6, r0
 802521c:	4698      	mov	r8, r3
 802521e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8025220:	f000 80b3 	beq.w	802538a <_printf_i+0x182>
 8025224:	d822      	bhi.n	802526c <_printf_i+0x64>
 8025226:	2963      	cmp	r1, #99	; 0x63
 8025228:	d036      	beq.n	8025298 <_printf_i+0x90>
 802522a:	d80a      	bhi.n	8025242 <_printf_i+0x3a>
 802522c:	2900      	cmp	r1, #0
 802522e:	f000 80b9 	beq.w	80253a4 <_printf_i+0x19c>
 8025232:	2958      	cmp	r1, #88	; 0x58
 8025234:	f000 8083 	beq.w	802533e <_printf_i+0x136>
 8025238:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802523c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8025240:	e032      	b.n	80252a8 <_printf_i+0xa0>
 8025242:	2964      	cmp	r1, #100	; 0x64
 8025244:	d001      	beq.n	802524a <_printf_i+0x42>
 8025246:	2969      	cmp	r1, #105	; 0x69
 8025248:	d1f6      	bne.n	8025238 <_printf_i+0x30>
 802524a:	6820      	ldr	r0, [r4, #0]
 802524c:	6813      	ldr	r3, [r2, #0]
 802524e:	0605      	lsls	r5, r0, #24
 8025250:	f103 0104 	add.w	r1, r3, #4
 8025254:	d52a      	bpl.n	80252ac <_printf_i+0xa4>
 8025256:	681b      	ldr	r3, [r3, #0]
 8025258:	6011      	str	r1, [r2, #0]
 802525a:	2b00      	cmp	r3, #0
 802525c:	da03      	bge.n	8025266 <_printf_i+0x5e>
 802525e:	222d      	movs	r2, #45	; 0x2d
 8025260:	425b      	negs	r3, r3
 8025262:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8025266:	486f      	ldr	r0, [pc, #444]	; (8025424 <_printf_i+0x21c>)
 8025268:	220a      	movs	r2, #10
 802526a:	e039      	b.n	80252e0 <_printf_i+0xd8>
 802526c:	2973      	cmp	r1, #115	; 0x73
 802526e:	f000 809d 	beq.w	80253ac <_printf_i+0x1a4>
 8025272:	d808      	bhi.n	8025286 <_printf_i+0x7e>
 8025274:	296f      	cmp	r1, #111	; 0x6f
 8025276:	d020      	beq.n	80252ba <_printf_i+0xb2>
 8025278:	2970      	cmp	r1, #112	; 0x70
 802527a:	d1dd      	bne.n	8025238 <_printf_i+0x30>
 802527c:	6823      	ldr	r3, [r4, #0]
 802527e:	f043 0320 	orr.w	r3, r3, #32
 8025282:	6023      	str	r3, [r4, #0]
 8025284:	e003      	b.n	802528e <_printf_i+0x86>
 8025286:	2975      	cmp	r1, #117	; 0x75
 8025288:	d017      	beq.n	80252ba <_printf_i+0xb2>
 802528a:	2978      	cmp	r1, #120	; 0x78
 802528c:	d1d4      	bne.n	8025238 <_printf_i+0x30>
 802528e:	2378      	movs	r3, #120	; 0x78
 8025290:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8025294:	4864      	ldr	r0, [pc, #400]	; (8025428 <_printf_i+0x220>)
 8025296:	e055      	b.n	8025344 <_printf_i+0x13c>
 8025298:	6813      	ldr	r3, [r2, #0]
 802529a:	1d19      	adds	r1, r3, #4
 802529c:	681b      	ldr	r3, [r3, #0]
 802529e:	6011      	str	r1, [r2, #0]
 80252a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80252a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80252a8:	2301      	movs	r3, #1
 80252aa:	e08c      	b.n	80253c6 <_printf_i+0x1be>
 80252ac:	681b      	ldr	r3, [r3, #0]
 80252ae:	6011      	str	r1, [r2, #0]
 80252b0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80252b4:	bf18      	it	ne
 80252b6:	b21b      	sxthne	r3, r3
 80252b8:	e7cf      	b.n	802525a <_printf_i+0x52>
 80252ba:	6813      	ldr	r3, [r2, #0]
 80252bc:	6825      	ldr	r5, [r4, #0]
 80252be:	1d18      	adds	r0, r3, #4
 80252c0:	6010      	str	r0, [r2, #0]
 80252c2:	0628      	lsls	r0, r5, #24
 80252c4:	d501      	bpl.n	80252ca <_printf_i+0xc2>
 80252c6:	681b      	ldr	r3, [r3, #0]
 80252c8:	e002      	b.n	80252d0 <_printf_i+0xc8>
 80252ca:	0668      	lsls	r0, r5, #25
 80252cc:	d5fb      	bpl.n	80252c6 <_printf_i+0xbe>
 80252ce:	881b      	ldrh	r3, [r3, #0]
 80252d0:	4854      	ldr	r0, [pc, #336]	; (8025424 <_printf_i+0x21c>)
 80252d2:	296f      	cmp	r1, #111	; 0x6f
 80252d4:	bf14      	ite	ne
 80252d6:	220a      	movne	r2, #10
 80252d8:	2208      	moveq	r2, #8
 80252da:	2100      	movs	r1, #0
 80252dc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80252e0:	6865      	ldr	r5, [r4, #4]
 80252e2:	60a5      	str	r5, [r4, #8]
 80252e4:	2d00      	cmp	r5, #0
 80252e6:	f2c0 8095 	blt.w	8025414 <_printf_i+0x20c>
 80252ea:	6821      	ldr	r1, [r4, #0]
 80252ec:	f021 0104 	bic.w	r1, r1, #4
 80252f0:	6021      	str	r1, [r4, #0]
 80252f2:	2b00      	cmp	r3, #0
 80252f4:	d13d      	bne.n	8025372 <_printf_i+0x16a>
 80252f6:	2d00      	cmp	r5, #0
 80252f8:	f040 808e 	bne.w	8025418 <_printf_i+0x210>
 80252fc:	4665      	mov	r5, ip
 80252fe:	2a08      	cmp	r2, #8
 8025300:	d10b      	bne.n	802531a <_printf_i+0x112>
 8025302:	6823      	ldr	r3, [r4, #0]
 8025304:	07db      	lsls	r3, r3, #31
 8025306:	d508      	bpl.n	802531a <_printf_i+0x112>
 8025308:	6923      	ldr	r3, [r4, #16]
 802530a:	6862      	ldr	r2, [r4, #4]
 802530c:	429a      	cmp	r2, r3
 802530e:	bfde      	ittt	le
 8025310:	2330      	movle	r3, #48	; 0x30
 8025312:	f805 3c01 	strble.w	r3, [r5, #-1]
 8025316:	f105 35ff 	addle.w	r5, r5, #4294967295
 802531a:	ebac 0305 	sub.w	r3, ip, r5
 802531e:	6123      	str	r3, [r4, #16]
 8025320:	f8cd 8000 	str.w	r8, [sp]
 8025324:	463b      	mov	r3, r7
 8025326:	aa03      	add	r2, sp, #12
 8025328:	4621      	mov	r1, r4
 802532a:	4630      	mov	r0, r6
 802532c:	f7ff fef6 	bl	802511c <_printf_common>
 8025330:	3001      	adds	r0, #1
 8025332:	d14d      	bne.n	80253d0 <_printf_i+0x1c8>
 8025334:	f04f 30ff 	mov.w	r0, #4294967295
 8025338:	b005      	add	sp, #20
 802533a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802533e:	4839      	ldr	r0, [pc, #228]	; (8025424 <_printf_i+0x21c>)
 8025340:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8025344:	6813      	ldr	r3, [r2, #0]
 8025346:	6821      	ldr	r1, [r4, #0]
 8025348:	1d1d      	adds	r5, r3, #4
 802534a:	681b      	ldr	r3, [r3, #0]
 802534c:	6015      	str	r5, [r2, #0]
 802534e:	060a      	lsls	r2, r1, #24
 8025350:	d50b      	bpl.n	802536a <_printf_i+0x162>
 8025352:	07ca      	lsls	r2, r1, #31
 8025354:	bf44      	itt	mi
 8025356:	f041 0120 	orrmi.w	r1, r1, #32
 802535a:	6021      	strmi	r1, [r4, #0]
 802535c:	b91b      	cbnz	r3, 8025366 <_printf_i+0x15e>
 802535e:	6822      	ldr	r2, [r4, #0]
 8025360:	f022 0220 	bic.w	r2, r2, #32
 8025364:	6022      	str	r2, [r4, #0]
 8025366:	2210      	movs	r2, #16
 8025368:	e7b7      	b.n	80252da <_printf_i+0xd2>
 802536a:	064d      	lsls	r5, r1, #25
 802536c:	bf48      	it	mi
 802536e:	b29b      	uxthmi	r3, r3
 8025370:	e7ef      	b.n	8025352 <_printf_i+0x14a>
 8025372:	4665      	mov	r5, ip
 8025374:	fbb3 f1f2 	udiv	r1, r3, r2
 8025378:	fb02 3311 	mls	r3, r2, r1, r3
 802537c:	5cc3      	ldrb	r3, [r0, r3]
 802537e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8025382:	460b      	mov	r3, r1
 8025384:	2900      	cmp	r1, #0
 8025386:	d1f5      	bne.n	8025374 <_printf_i+0x16c>
 8025388:	e7b9      	b.n	80252fe <_printf_i+0xf6>
 802538a:	6813      	ldr	r3, [r2, #0]
 802538c:	6825      	ldr	r5, [r4, #0]
 802538e:	6961      	ldr	r1, [r4, #20]
 8025390:	1d18      	adds	r0, r3, #4
 8025392:	6010      	str	r0, [r2, #0]
 8025394:	0628      	lsls	r0, r5, #24
 8025396:	681b      	ldr	r3, [r3, #0]
 8025398:	d501      	bpl.n	802539e <_printf_i+0x196>
 802539a:	6019      	str	r1, [r3, #0]
 802539c:	e002      	b.n	80253a4 <_printf_i+0x19c>
 802539e:	066a      	lsls	r2, r5, #25
 80253a0:	d5fb      	bpl.n	802539a <_printf_i+0x192>
 80253a2:	8019      	strh	r1, [r3, #0]
 80253a4:	2300      	movs	r3, #0
 80253a6:	6123      	str	r3, [r4, #16]
 80253a8:	4665      	mov	r5, ip
 80253aa:	e7b9      	b.n	8025320 <_printf_i+0x118>
 80253ac:	6813      	ldr	r3, [r2, #0]
 80253ae:	1d19      	adds	r1, r3, #4
 80253b0:	6011      	str	r1, [r2, #0]
 80253b2:	681d      	ldr	r5, [r3, #0]
 80253b4:	6862      	ldr	r2, [r4, #4]
 80253b6:	2100      	movs	r1, #0
 80253b8:	4628      	mov	r0, r5
 80253ba:	f7da ff29 	bl	8000210 <memchr>
 80253be:	b108      	cbz	r0, 80253c4 <_printf_i+0x1bc>
 80253c0:	1b40      	subs	r0, r0, r5
 80253c2:	6060      	str	r0, [r4, #4]
 80253c4:	6863      	ldr	r3, [r4, #4]
 80253c6:	6123      	str	r3, [r4, #16]
 80253c8:	2300      	movs	r3, #0
 80253ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80253ce:	e7a7      	b.n	8025320 <_printf_i+0x118>
 80253d0:	6923      	ldr	r3, [r4, #16]
 80253d2:	462a      	mov	r2, r5
 80253d4:	4639      	mov	r1, r7
 80253d6:	4630      	mov	r0, r6
 80253d8:	47c0      	blx	r8
 80253da:	3001      	adds	r0, #1
 80253dc:	d0aa      	beq.n	8025334 <_printf_i+0x12c>
 80253de:	6823      	ldr	r3, [r4, #0]
 80253e0:	079b      	lsls	r3, r3, #30
 80253e2:	d413      	bmi.n	802540c <_printf_i+0x204>
 80253e4:	68e0      	ldr	r0, [r4, #12]
 80253e6:	9b03      	ldr	r3, [sp, #12]
 80253e8:	4298      	cmp	r0, r3
 80253ea:	bfb8      	it	lt
 80253ec:	4618      	movlt	r0, r3
 80253ee:	e7a3      	b.n	8025338 <_printf_i+0x130>
 80253f0:	2301      	movs	r3, #1
 80253f2:	464a      	mov	r2, r9
 80253f4:	4639      	mov	r1, r7
 80253f6:	4630      	mov	r0, r6
 80253f8:	47c0      	blx	r8
 80253fa:	3001      	adds	r0, #1
 80253fc:	d09a      	beq.n	8025334 <_printf_i+0x12c>
 80253fe:	3501      	adds	r5, #1
 8025400:	68e3      	ldr	r3, [r4, #12]
 8025402:	9a03      	ldr	r2, [sp, #12]
 8025404:	1a9b      	subs	r3, r3, r2
 8025406:	42ab      	cmp	r3, r5
 8025408:	dcf2      	bgt.n	80253f0 <_printf_i+0x1e8>
 802540a:	e7eb      	b.n	80253e4 <_printf_i+0x1dc>
 802540c:	2500      	movs	r5, #0
 802540e:	f104 0919 	add.w	r9, r4, #25
 8025412:	e7f5      	b.n	8025400 <_printf_i+0x1f8>
 8025414:	2b00      	cmp	r3, #0
 8025416:	d1ac      	bne.n	8025372 <_printf_i+0x16a>
 8025418:	7803      	ldrb	r3, [r0, #0]
 802541a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802541e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8025422:	e76c      	b.n	80252fe <_printf_i+0xf6>
 8025424:	08029efd 	.word	0x08029efd
 8025428:	08029f0e 	.word	0x08029f0e

0802542c <_sbrk_r>:
 802542c:	b538      	push	{r3, r4, r5, lr}
 802542e:	4c06      	ldr	r4, [pc, #24]	; (8025448 <_sbrk_r+0x1c>)
 8025430:	2300      	movs	r3, #0
 8025432:	4605      	mov	r5, r0
 8025434:	4608      	mov	r0, r1
 8025436:	6023      	str	r3, [r4, #0]
 8025438:	f7de face 	bl	80039d8 <_sbrk>
 802543c:	1c43      	adds	r3, r0, #1
 802543e:	d102      	bne.n	8025446 <_sbrk_r+0x1a>
 8025440:	6823      	ldr	r3, [r4, #0]
 8025442:	b103      	cbz	r3, 8025446 <_sbrk_r+0x1a>
 8025444:	602b      	str	r3, [r5, #0]
 8025446:	bd38      	pop	{r3, r4, r5, pc}
 8025448:	2000cb3c 	.word	0x2000cb3c

0802544c <_raise_r>:
 802544c:	291f      	cmp	r1, #31
 802544e:	b538      	push	{r3, r4, r5, lr}
 8025450:	4604      	mov	r4, r0
 8025452:	460d      	mov	r5, r1
 8025454:	d904      	bls.n	8025460 <_raise_r+0x14>
 8025456:	2316      	movs	r3, #22
 8025458:	6003      	str	r3, [r0, #0]
 802545a:	f04f 30ff 	mov.w	r0, #4294967295
 802545e:	bd38      	pop	{r3, r4, r5, pc}
 8025460:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8025462:	b112      	cbz	r2, 802546a <_raise_r+0x1e>
 8025464:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8025468:	b94b      	cbnz	r3, 802547e <_raise_r+0x32>
 802546a:	4620      	mov	r0, r4
 802546c:	f000 f830 	bl	80254d0 <_getpid_r>
 8025470:	462a      	mov	r2, r5
 8025472:	4601      	mov	r1, r0
 8025474:	4620      	mov	r0, r4
 8025476:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802547a:	f000 b817 	b.w	80254ac <_kill_r>
 802547e:	2b01      	cmp	r3, #1
 8025480:	d00a      	beq.n	8025498 <_raise_r+0x4c>
 8025482:	1c59      	adds	r1, r3, #1
 8025484:	d103      	bne.n	802548e <_raise_r+0x42>
 8025486:	2316      	movs	r3, #22
 8025488:	6003      	str	r3, [r0, #0]
 802548a:	2001      	movs	r0, #1
 802548c:	e7e7      	b.n	802545e <_raise_r+0x12>
 802548e:	2400      	movs	r4, #0
 8025490:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8025494:	4628      	mov	r0, r5
 8025496:	4798      	blx	r3
 8025498:	2000      	movs	r0, #0
 802549a:	e7e0      	b.n	802545e <_raise_r+0x12>

0802549c <raise>:
 802549c:	4b02      	ldr	r3, [pc, #8]	; (80254a8 <raise+0xc>)
 802549e:	4601      	mov	r1, r0
 80254a0:	6818      	ldr	r0, [r3, #0]
 80254a2:	f7ff bfd3 	b.w	802544c <_raise_r>
 80254a6:	bf00      	nop
 80254a8:	2000009c 	.word	0x2000009c

080254ac <_kill_r>:
 80254ac:	b538      	push	{r3, r4, r5, lr}
 80254ae:	4c07      	ldr	r4, [pc, #28]	; (80254cc <_kill_r+0x20>)
 80254b0:	2300      	movs	r3, #0
 80254b2:	4605      	mov	r5, r0
 80254b4:	4608      	mov	r0, r1
 80254b6:	4611      	mov	r1, r2
 80254b8:	6023      	str	r3, [r4, #0]
 80254ba:	f7de fa05 	bl	80038c8 <_kill>
 80254be:	1c43      	adds	r3, r0, #1
 80254c0:	d102      	bne.n	80254c8 <_kill_r+0x1c>
 80254c2:	6823      	ldr	r3, [r4, #0]
 80254c4:	b103      	cbz	r3, 80254c8 <_kill_r+0x1c>
 80254c6:	602b      	str	r3, [r5, #0]
 80254c8:	bd38      	pop	{r3, r4, r5, pc}
 80254ca:	bf00      	nop
 80254cc:	2000cb3c 	.word	0x2000cb3c

080254d0 <_getpid_r>:
 80254d0:	f7de b9f2 	b.w	80038b8 <_getpid>

080254d4 <__swbuf_r>:
 80254d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80254d6:	460e      	mov	r6, r1
 80254d8:	4614      	mov	r4, r2
 80254da:	4605      	mov	r5, r0
 80254dc:	b118      	cbz	r0, 80254e6 <__swbuf_r+0x12>
 80254de:	6983      	ldr	r3, [r0, #24]
 80254e0:	b90b      	cbnz	r3, 80254e6 <__swbuf_r+0x12>
 80254e2:	f000 fa0b 	bl	80258fc <__sinit>
 80254e6:	4b21      	ldr	r3, [pc, #132]	; (802556c <__swbuf_r+0x98>)
 80254e8:	429c      	cmp	r4, r3
 80254ea:	d12a      	bne.n	8025542 <__swbuf_r+0x6e>
 80254ec:	686c      	ldr	r4, [r5, #4]
 80254ee:	69a3      	ldr	r3, [r4, #24]
 80254f0:	60a3      	str	r3, [r4, #8]
 80254f2:	89a3      	ldrh	r3, [r4, #12]
 80254f4:	071a      	lsls	r2, r3, #28
 80254f6:	d52e      	bpl.n	8025556 <__swbuf_r+0x82>
 80254f8:	6923      	ldr	r3, [r4, #16]
 80254fa:	b363      	cbz	r3, 8025556 <__swbuf_r+0x82>
 80254fc:	6923      	ldr	r3, [r4, #16]
 80254fe:	6820      	ldr	r0, [r4, #0]
 8025500:	1ac0      	subs	r0, r0, r3
 8025502:	6963      	ldr	r3, [r4, #20]
 8025504:	b2f6      	uxtb	r6, r6
 8025506:	4283      	cmp	r3, r0
 8025508:	4637      	mov	r7, r6
 802550a:	dc04      	bgt.n	8025516 <__swbuf_r+0x42>
 802550c:	4621      	mov	r1, r4
 802550e:	4628      	mov	r0, r5
 8025510:	f000 f98a 	bl	8025828 <_fflush_r>
 8025514:	bb28      	cbnz	r0, 8025562 <__swbuf_r+0x8e>
 8025516:	68a3      	ldr	r3, [r4, #8]
 8025518:	3b01      	subs	r3, #1
 802551a:	60a3      	str	r3, [r4, #8]
 802551c:	6823      	ldr	r3, [r4, #0]
 802551e:	1c5a      	adds	r2, r3, #1
 8025520:	6022      	str	r2, [r4, #0]
 8025522:	701e      	strb	r6, [r3, #0]
 8025524:	6963      	ldr	r3, [r4, #20]
 8025526:	3001      	adds	r0, #1
 8025528:	4283      	cmp	r3, r0
 802552a:	d004      	beq.n	8025536 <__swbuf_r+0x62>
 802552c:	89a3      	ldrh	r3, [r4, #12]
 802552e:	07db      	lsls	r3, r3, #31
 8025530:	d519      	bpl.n	8025566 <__swbuf_r+0x92>
 8025532:	2e0a      	cmp	r6, #10
 8025534:	d117      	bne.n	8025566 <__swbuf_r+0x92>
 8025536:	4621      	mov	r1, r4
 8025538:	4628      	mov	r0, r5
 802553a:	f000 f975 	bl	8025828 <_fflush_r>
 802553e:	b190      	cbz	r0, 8025566 <__swbuf_r+0x92>
 8025540:	e00f      	b.n	8025562 <__swbuf_r+0x8e>
 8025542:	4b0b      	ldr	r3, [pc, #44]	; (8025570 <__swbuf_r+0x9c>)
 8025544:	429c      	cmp	r4, r3
 8025546:	d101      	bne.n	802554c <__swbuf_r+0x78>
 8025548:	68ac      	ldr	r4, [r5, #8]
 802554a:	e7d0      	b.n	80254ee <__swbuf_r+0x1a>
 802554c:	4b09      	ldr	r3, [pc, #36]	; (8025574 <__swbuf_r+0xa0>)
 802554e:	429c      	cmp	r4, r3
 8025550:	bf08      	it	eq
 8025552:	68ec      	ldreq	r4, [r5, #12]
 8025554:	e7cb      	b.n	80254ee <__swbuf_r+0x1a>
 8025556:	4621      	mov	r1, r4
 8025558:	4628      	mov	r0, r5
 802555a:	f000 f80d 	bl	8025578 <__swsetup_r>
 802555e:	2800      	cmp	r0, #0
 8025560:	d0cc      	beq.n	80254fc <__swbuf_r+0x28>
 8025562:	f04f 37ff 	mov.w	r7, #4294967295
 8025566:	4638      	mov	r0, r7
 8025568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802556a:	bf00      	nop
 802556c:	08029f44 	.word	0x08029f44
 8025570:	08029f64 	.word	0x08029f64
 8025574:	08029f24 	.word	0x08029f24

08025578 <__swsetup_r>:
 8025578:	4b32      	ldr	r3, [pc, #200]	; (8025644 <__swsetup_r+0xcc>)
 802557a:	b570      	push	{r4, r5, r6, lr}
 802557c:	681d      	ldr	r5, [r3, #0]
 802557e:	4606      	mov	r6, r0
 8025580:	460c      	mov	r4, r1
 8025582:	b125      	cbz	r5, 802558e <__swsetup_r+0x16>
 8025584:	69ab      	ldr	r3, [r5, #24]
 8025586:	b913      	cbnz	r3, 802558e <__swsetup_r+0x16>
 8025588:	4628      	mov	r0, r5
 802558a:	f000 f9b7 	bl	80258fc <__sinit>
 802558e:	4b2e      	ldr	r3, [pc, #184]	; (8025648 <__swsetup_r+0xd0>)
 8025590:	429c      	cmp	r4, r3
 8025592:	d10f      	bne.n	80255b4 <__swsetup_r+0x3c>
 8025594:	686c      	ldr	r4, [r5, #4]
 8025596:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802559a:	b29a      	uxth	r2, r3
 802559c:	0715      	lsls	r5, r2, #28
 802559e:	d42c      	bmi.n	80255fa <__swsetup_r+0x82>
 80255a0:	06d0      	lsls	r0, r2, #27
 80255a2:	d411      	bmi.n	80255c8 <__swsetup_r+0x50>
 80255a4:	2209      	movs	r2, #9
 80255a6:	6032      	str	r2, [r6, #0]
 80255a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80255ac:	81a3      	strh	r3, [r4, #12]
 80255ae:	f04f 30ff 	mov.w	r0, #4294967295
 80255b2:	e03e      	b.n	8025632 <__swsetup_r+0xba>
 80255b4:	4b25      	ldr	r3, [pc, #148]	; (802564c <__swsetup_r+0xd4>)
 80255b6:	429c      	cmp	r4, r3
 80255b8:	d101      	bne.n	80255be <__swsetup_r+0x46>
 80255ba:	68ac      	ldr	r4, [r5, #8]
 80255bc:	e7eb      	b.n	8025596 <__swsetup_r+0x1e>
 80255be:	4b24      	ldr	r3, [pc, #144]	; (8025650 <__swsetup_r+0xd8>)
 80255c0:	429c      	cmp	r4, r3
 80255c2:	bf08      	it	eq
 80255c4:	68ec      	ldreq	r4, [r5, #12]
 80255c6:	e7e6      	b.n	8025596 <__swsetup_r+0x1e>
 80255c8:	0751      	lsls	r1, r2, #29
 80255ca:	d512      	bpl.n	80255f2 <__swsetup_r+0x7a>
 80255cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80255ce:	b141      	cbz	r1, 80255e2 <__swsetup_r+0x6a>
 80255d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80255d4:	4299      	cmp	r1, r3
 80255d6:	d002      	beq.n	80255de <__swsetup_r+0x66>
 80255d8:	4630      	mov	r0, r6
 80255da:	f7ff fbb7 	bl	8024d4c <_free_r>
 80255de:	2300      	movs	r3, #0
 80255e0:	6363      	str	r3, [r4, #52]	; 0x34
 80255e2:	89a3      	ldrh	r3, [r4, #12]
 80255e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80255e8:	81a3      	strh	r3, [r4, #12]
 80255ea:	2300      	movs	r3, #0
 80255ec:	6063      	str	r3, [r4, #4]
 80255ee:	6923      	ldr	r3, [r4, #16]
 80255f0:	6023      	str	r3, [r4, #0]
 80255f2:	89a3      	ldrh	r3, [r4, #12]
 80255f4:	f043 0308 	orr.w	r3, r3, #8
 80255f8:	81a3      	strh	r3, [r4, #12]
 80255fa:	6923      	ldr	r3, [r4, #16]
 80255fc:	b94b      	cbnz	r3, 8025612 <__swsetup_r+0x9a>
 80255fe:	89a3      	ldrh	r3, [r4, #12]
 8025600:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8025604:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8025608:	d003      	beq.n	8025612 <__swsetup_r+0x9a>
 802560a:	4621      	mov	r1, r4
 802560c:	4630      	mov	r0, r6
 802560e:	f000 fa23 	bl	8025a58 <__smakebuf_r>
 8025612:	89a2      	ldrh	r2, [r4, #12]
 8025614:	f012 0301 	ands.w	r3, r2, #1
 8025618:	d00c      	beq.n	8025634 <__swsetup_r+0xbc>
 802561a:	2300      	movs	r3, #0
 802561c:	60a3      	str	r3, [r4, #8]
 802561e:	6963      	ldr	r3, [r4, #20]
 8025620:	425b      	negs	r3, r3
 8025622:	61a3      	str	r3, [r4, #24]
 8025624:	6923      	ldr	r3, [r4, #16]
 8025626:	b953      	cbnz	r3, 802563e <__swsetup_r+0xc6>
 8025628:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802562c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8025630:	d1ba      	bne.n	80255a8 <__swsetup_r+0x30>
 8025632:	bd70      	pop	{r4, r5, r6, pc}
 8025634:	0792      	lsls	r2, r2, #30
 8025636:	bf58      	it	pl
 8025638:	6963      	ldrpl	r3, [r4, #20]
 802563a:	60a3      	str	r3, [r4, #8]
 802563c:	e7f2      	b.n	8025624 <__swsetup_r+0xac>
 802563e:	2000      	movs	r0, #0
 8025640:	e7f7      	b.n	8025632 <__swsetup_r+0xba>
 8025642:	bf00      	nop
 8025644:	2000009c 	.word	0x2000009c
 8025648:	08029f44 	.word	0x08029f44
 802564c:	08029f64 	.word	0x08029f64
 8025650:	08029f24 	.word	0x08029f24

08025654 <__register_exitproc>:
 8025654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025658:	4d2c      	ldr	r5, [pc, #176]	; (802570c <__register_exitproc+0xb8>)
 802565a:	682c      	ldr	r4, [r5, #0]
 802565c:	4607      	mov	r7, r0
 802565e:	460e      	mov	r6, r1
 8025660:	4691      	mov	r9, r2
 8025662:	4698      	mov	r8, r3
 8025664:	b934      	cbnz	r4, 8025674 <__register_exitproc+0x20>
 8025666:	4b2a      	ldr	r3, [pc, #168]	; (8025710 <__register_exitproc+0xbc>)
 8025668:	4c2a      	ldr	r4, [pc, #168]	; (8025714 <__register_exitproc+0xc0>)
 802566a:	602c      	str	r4, [r5, #0]
 802566c:	b113      	cbz	r3, 8025674 <__register_exitproc+0x20>
 802566e:	681b      	ldr	r3, [r3, #0]
 8025670:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8025674:	6863      	ldr	r3, [r4, #4]
 8025676:	2b1f      	cmp	r3, #31
 8025678:	dd3d      	ble.n	80256f6 <__register_exitproc+0xa2>
 802567a:	4b27      	ldr	r3, [pc, #156]	; (8025718 <__register_exitproc+0xc4>)
 802567c:	b91b      	cbnz	r3, 8025686 <__register_exitproc+0x32>
 802567e:	f04f 30ff 	mov.w	r0, #4294967295
 8025682:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025686:	208c      	movs	r0, #140	; 0x8c
 8025688:	f7ff fb3c 	bl	8024d04 <malloc>
 802568c:	4604      	mov	r4, r0
 802568e:	2800      	cmp	r0, #0
 8025690:	d0f5      	beq.n	802567e <__register_exitproc+0x2a>
 8025692:	2300      	movs	r3, #0
 8025694:	682a      	ldr	r2, [r5, #0]
 8025696:	6002      	str	r2, [r0, #0]
 8025698:	6043      	str	r3, [r0, #4]
 802569a:	6028      	str	r0, [r5, #0]
 802569c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 80256a0:	b30f      	cbz	r7, 80256e6 <__register_exitproc+0x92>
 80256a2:	f44f 7084 	mov.w	r0, #264	; 0x108
 80256a6:	f7ff fb2d 	bl	8024d04 <malloc>
 80256aa:	2800      	cmp	r0, #0
 80256ac:	d0e7      	beq.n	802567e <__register_exitproc+0x2a>
 80256ae:	2300      	movs	r3, #0
 80256b0:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80256b4:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 80256b8:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80256bc:	6862      	ldr	r2, [r4, #4]
 80256be:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 80256c2:	2301      	movs	r3, #1
 80256c4:	4093      	lsls	r3, r2
 80256c6:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80256ca:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 80256ce:	431a      	orrs	r2, r3
 80256d0:	2f02      	cmp	r7, #2
 80256d2:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 80256d6:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 80256da:	bf02      	ittt	eq
 80256dc:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 80256e0:	4313      	orreq	r3, r2
 80256e2:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80256e6:	6863      	ldr	r3, [r4, #4]
 80256e8:	1c5a      	adds	r2, r3, #1
 80256ea:	3302      	adds	r3, #2
 80256ec:	6062      	str	r2, [r4, #4]
 80256ee:	2000      	movs	r0, #0
 80256f0:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 80256f4:	e7c5      	b.n	8025682 <__register_exitproc+0x2e>
 80256f6:	2f00      	cmp	r7, #0
 80256f8:	d0f5      	beq.n	80256e6 <__register_exitproc+0x92>
 80256fa:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80256fe:	2800      	cmp	r0, #0
 8025700:	d1dc      	bne.n	80256bc <__register_exitproc+0x68>
 8025702:	4b05      	ldr	r3, [pc, #20]	; (8025718 <__register_exitproc+0xc4>)
 8025704:	2b00      	cmp	r3, #0
 8025706:	d0ba      	beq.n	802567e <__register_exitproc+0x2a>
 8025708:	e7cb      	b.n	80256a2 <__register_exitproc+0x4e>
 802570a:	bf00      	nop
 802570c:	2000bf34 	.word	0x2000bf34
 8025710:	08029f20 	.word	0x08029f20
 8025714:	2000bea8 	.word	0x2000bea8
 8025718:	08024d05 	.word	0x08024d05

0802571c <__sflush_r>:
 802571c:	898a      	ldrh	r2, [r1, #12]
 802571e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025722:	4605      	mov	r5, r0
 8025724:	0710      	lsls	r0, r2, #28
 8025726:	460c      	mov	r4, r1
 8025728:	d458      	bmi.n	80257dc <__sflush_r+0xc0>
 802572a:	684b      	ldr	r3, [r1, #4]
 802572c:	2b00      	cmp	r3, #0
 802572e:	dc05      	bgt.n	802573c <__sflush_r+0x20>
 8025730:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8025732:	2b00      	cmp	r3, #0
 8025734:	dc02      	bgt.n	802573c <__sflush_r+0x20>
 8025736:	2000      	movs	r0, #0
 8025738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802573c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802573e:	2e00      	cmp	r6, #0
 8025740:	d0f9      	beq.n	8025736 <__sflush_r+0x1a>
 8025742:	2300      	movs	r3, #0
 8025744:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8025748:	682f      	ldr	r7, [r5, #0]
 802574a:	6a21      	ldr	r1, [r4, #32]
 802574c:	602b      	str	r3, [r5, #0]
 802574e:	d032      	beq.n	80257b6 <__sflush_r+0x9a>
 8025750:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8025752:	89a3      	ldrh	r3, [r4, #12]
 8025754:	075a      	lsls	r2, r3, #29
 8025756:	d505      	bpl.n	8025764 <__sflush_r+0x48>
 8025758:	6863      	ldr	r3, [r4, #4]
 802575a:	1ac0      	subs	r0, r0, r3
 802575c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802575e:	b10b      	cbz	r3, 8025764 <__sflush_r+0x48>
 8025760:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8025762:	1ac0      	subs	r0, r0, r3
 8025764:	2300      	movs	r3, #0
 8025766:	4602      	mov	r2, r0
 8025768:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802576a:	6a21      	ldr	r1, [r4, #32]
 802576c:	4628      	mov	r0, r5
 802576e:	47b0      	blx	r6
 8025770:	1c43      	adds	r3, r0, #1
 8025772:	89a3      	ldrh	r3, [r4, #12]
 8025774:	d106      	bne.n	8025784 <__sflush_r+0x68>
 8025776:	6829      	ldr	r1, [r5, #0]
 8025778:	291d      	cmp	r1, #29
 802577a:	d848      	bhi.n	802580e <__sflush_r+0xf2>
 802577c:	4a29      	ldr	r2, [pc, #164]	; (8025824 <__sflush_r+0x108>)
 802577e:	40ca      	lsrs	r2, r1
 8025780:	07d6      	lsls	r6, r2, #31
 8025782:	d544      	bpl.n	802580e <__sflush_r+0xf2>
 8025784:	2200      	movs	r2, #0
 8025786:	6062      	str	r2, [r4, #4]
 8025788:	04d9      	lsls	r1, r3, #19
 802578a:	6922      	ldr	r2, [r4, #16]
 802578c:	6022      	str	r2, [r4, #0]
 802578e:	d504      	bpl.n	802579a <__sflush_r+0x7e>
 8025790:	1c42      	adds	r2, r0, #1
 8025792:	d101      	bne.n	8025798 <__sflush_r+0x7c>
 8025794:	682b      	ldr	r3, [r5, #0]
 8025796:	b903      	cbnz	r3, 802579a <__sflush_r+0x7e>
 8025798:	6560      	str	r0, [r4, #84]	; 0x54
 802579a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802579c:	602f      	str	r7, [r5, #0]
 802579e:	2900      	cmp	r1, #0
 80257a0:	d0c9      	beq.n	8025736 <__sflush_r+0x1a>
 80257a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80257a6:	4299      	cmp	r1, r3
 80257a8:	d002      	beq.n	80257b0 <__sflush_r+0x94>
 80257aa:	4628      	mov	r0, r5
 80257ac:	f7ff face 	bl	8024d4c <_free_r>
 80257b0:	2000      	movs	r0, #0
 80257b2:	6360      	str	r0, [r4, #52]	; 0x34
 80257b4:	e7c0      	b.n	8025738 <__sflush_r+0x1c>
 80257b6:	2301      	movs	r3, #1
 80257b8:	4628      	mov	r0, r5
 80257ba:	47b0      	blx	r6
 80257bc:	1c41      	adds	r1, r0, #1
 80257be:	d1c8      	bne.n	8025752 <__sflush_r+0x36>
 80257c0:	682b      	ldr	r3, [r5, #0]
 80257c2:	2b00      	cmp	r3, #0
 80257c4:	d0c5      	beq.n	8025752 <__sflush_r+0x36>
 80257c6:	2b1d      	cmp	r3, #29
 80257c8:	d001      	beq.n	80257ce <__sflush_r+0xb2>
 80257ca:	2b16      	cmp	r3, #22
 80257cc:	d101      	bne.n	80257d2 <__sflush_r+0xb6>
 80257ce:	602f      	str	r7, [r5, #0]
 80257d0:	e7b1      	b.n	8025736 <__sflush_r+0x1a>
 80257d2:	89a3      	ldrh	r3, [r4, #12]
 80257d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80257d8:	81a3      	strh	r3, [r4, #12]
 80257da:	e7ad      	b.n	8025738 <__sflush_r+0x1c>
 80257dc:	690f      	ldr	r7, [r1, #16]
 80257de:	2f00      	cmp	r7, #0
 80257e0:	d0a9      	beq.n	8025736 <__sflush_r+0x1a>
 80257e2:	0793      	lsls	r3, r2, #30
 80257e4:	680e      	ldr	r6, [r1, #0]
 80257e6:	bf08      	it	eq
 80257e8:	694b      	ldreq	r3, [r1, #20]
 80257ea:	600f      	str	r7, [r1, #0]
 80257ec:	bf18      	it	ne
 80257ee:	2300      	movne	r3, #0
 80257f0:	eba6 0807 	sub.w	r8, r6, r7
 80257f4:	608b      	str	r3, [r1, #8]
 80257f6:	f1b8 0f00 	cmp.w	r8, #0
 80257fa:	dd9c      	ble.n	8025736 <__sflush_r+0x1a>
 80257fc:	4643      	mov	r3, r8
 80257fe:	463a      	mov	r2, r7
 8025800:	6a21      	ldr	r1, [r4, #32]
 8025802:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8025804:	4628      	mov	r0, r5
 8025806:	47b0      	blx	r6
 8025808:	2800      	cmp	r0, #0
 802580a:	dc06      	bgt.n	802581a <__sflush_r+0xfe>
 802580c:	89a3      	ldrh	r3, [r4, #12]
 802580e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025812:	81a3      	strh	r3, [r4, #12]
 8025814:	f04f 30ff 	mov.w	r0, #4294967295
 8025818:	e78e      	b.n	8025738 <__sflush_r+0x1c>
 802581a:	4407      	add	r7, r0
 802581c:	eba8 0800 	sub.w	r8, r8, r0
 8025820:	e7e9      	b.n	80257f6 <__sflush_r+0xda>
 8025822:	bf00      	nop
 8025824:	20400001 	.word	0x20400001

08025828 <_fflush_r>:
 8025828:	b538      	push	{r3, r4, r5, lr}
 802582a:	690b      	ldr	r3, [r1, #16]
 802582c:	4605      	mov	r5, r0
 802582e:	460c      	mov	r4, r1
 8025830:	b1db      	cbz	r3, 802586a <_fflush_r+0x42>
 8025832:	b118      	cbz	r0, 802583c <_fflush_r+0x14>
 8025834:	6983      	ldr	r3, [r0, #24]
 8025836:	b90b      	cbnz	r3, 802583c <_fflush_r+0x14>
 8025838:	f000 f860 	bl	80258fc <__sinit>
 802583c:	4b0c      	ldr	r3, [pc, #48]	; (8025870 <_fflush_r+0x48>)
 802583e:	429c      	cmp	r4, r3
 8025840:	d109      	bne.n	8025856 <_fflush_r+0x2e>
 8025842:	686c      	ldr	r4, [r5, #4]
 8025844:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025848:	b17b      	cbz	r3, 802586a <_fflush_r+0x42>
 802584a:	4621      	mov	r1, r4
 802584c:	4628      	mov	r0, r5
 802584e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025852:	f7ff bf63 	b.w	802571c <__sflush_r>
 8025856:	4b07      	ldr	r3, [pc, #28]	; (8025874 <_fflush_r+0x4c>)
 8025858:	429c      	cmp	r4, r3
 802585a:	d101      	bne.n	8025860 <_fflush_r+0x38>
 802585c:	68ac      	ldr	r4, [r5, #8]
 802585e:	e7f1      	b.n	8025844 <_fflush_r+0x1c>
 8025860:	4b05      	ldr	r3, [pc, #20]	; (8025878 <_fflush_r+0x50>)
 8025862:	429c      	cmp	r4, r3
 8025864:	bf08      	it	eq
 8025866:	68ec      	ldreq	r4, [r5, #12]
 8025868:	e7ec      	b.n	8025844 <_fflush_r+0x1c>
 802586a:	2000      	movs	r0, #0
 802586c:	bd38      	pop	{r3, r4, r5, pc}
 802586e:	bf00      	nop
 8025870:	08029f44 	.word	0x08029f44
 8025874:	08029f64 	.word	0x08029f64
 8025878:	08029f24 	.word	0x08029f24

0802587c <std>:
 802587c:	2300      	movs	r3, #0
 802587e:	b510      	push	{r4, lr}
 8025880:	4604      	mov	r4, r0
 8025882:	e9c0 3300 	strd	r3, r3, [r0]
 8025886:	6083      	str	r3, [r0, #8]
 8025888:	8181      	strh	r1, [r0, #12]
 802588a:	6643      	str	r3, [r0, #100]	; 0x64
 802588c:	81c2      	strh	r2, [r0, #14]
 802588e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8025892:	6183      	str	r3, [r0, #24]
 8025894:	4619      	mov	r1, r3
 8025896:	2208      	movs	r2, #8
 8025898:	305c      	adds	r0, #92	; 0x5c
 802589a:	f7ff fa4e 	bl	8024d3a <memset>
 802589e:	4b05      	ldr	r3, [pc, #20]	; (80258b4 <std+0x38>)
 80258a0:	6263      	str	r3, [r4, #36]	; 0x24
 80258a2:	4b05      	ldr	r3, [pc, #20]	; (80258b8 <std+0x3c>)
 80258a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80258a6:	4b05      	ldr	r3, [pc, #20]	; (80258bc <std+0x40>)
 80258a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80258aa:	4b05      	ldr	r3, [pc, #20]	; (80258c0 <std+0x44>)
 80258ac:	6224      	str	r4, [r4, #32]
 80258ae:	6323      	str	r3, [r4, #48]	; 0x30
 80258b0:	bd10      	pop	{r4, pc}
 80258b2:	bf00      	nop
 80258b4:	08025add 	.word	0x08025add
 80258b8:	08025aff 	.word	0x08025aff
 80258bc:	08025b37 	.word	0x08025b37
 80258c0:	08025b5b 	.word	0x08025b5b

080258c4 <_cleanup_r>:
 80258c4:	4901      	ldr	r1, [pc, #4]	; (80258cc <_cleanup_r+0x8>)
 80258c6:	f000 b885 	b.w	80259d4 <_fwalk_reent>
 80258ca:	bf00      	nop
 80258cc:	08025829 	.word	0x08025829

080258d0 <__sfmoreglue>:
 80258d0:	b570      	push	{r4, r5, r6, lr}
 80258d2:	1e4a      	subs	r2, r1, #1
 80258d4:	2568      	movs	r5, #104	; 0x68
 80258d6:	4355      	muls	r5, r2
 80258d8:	460e      	mov	r6, r1
 80258da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80258de:	f7ff fa83 	bl	8024de8 <_malloc_r>
 80258e2:	4604      	mov	r4, r0
 80258e4:	b140      	cbz	r0, 80258f8 <__sfmoreglue+0x28>
 80258e6:	2100      	movs	r1, #0
 80258e8:	e9c0 1600 	strd	r1, r6, [r0]
 80258ec:	300c      	adds	r0, #12
 80258ee:	60a0      	str	r0, [r4, #8]
 80258f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80258f4:	f7ff fa21 	bl	8024d3a <memset>
 80258f8:	4620      	mov	r0, r4
 80258fa:	bd70      	pop	{r4, r5, r6, pc}

080258fc <__sinit>:
 80258fc:	6983      	ldr	r3, [r0, #24]
 80258fe:	b510      	push	{r4, lr}
 8025900:	4604      	mov	r4, r0
 8025902:	bb33      	cbnz	r3, 8025952 <__sinit+0x56>
 8025904:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8025908:	6503      	str	r3, [r0, #80]	; 0x50
 802590a:	4b12      	ldr	r3, [pc, #72]	; (8025954 <__sinit+0x58>)
 802590c:	4a12      	ldr	r2, [pc, #72]	; (8025958 <__sinit+0x5c>)
 802590e:	681b      	ldr	r3, [r3, #0]
 8025910:	6282      	str	r2, [r0, #40]	; 0x28
 8025912:	4298      	cmp	r0, r3
 8025914:	bf04      	itt	eq
 8025916:	2301      	moveq	r3, #1
 8025918:	6183      	streq	r3, [r0, #24]
 802591a:	f000 f81f 	bl	802595c <__sfp>
 802591e:	6060      	str	r0, [r4, #4]
 8025920:	4620      	mov	r0, r4
 8025922:	f000 f81b 	bl	802595c <__sfp>
 8025926:	60a0      	str	r0, [r4, #8]
 8025928:	4620      	mov	r0, r4
 802592a:	f000 f817 	bl	802595c <__sfp>
 802592e:	2200      	movs	r2, #0
 8025930:	60e0      	str	r0, [r4, #12]
 8025932:	2104      	movs	r1, #4
 8025934:	6860      	ldr	r0, [r4, #4]
 8025936:	f7ff ffa1 	bl	802587c <std>
 802593a:	2201      	movs	r2, #1
 802593c:	2109      	movs	r1, #9
 802593e:	68a0      	ldr	r0, [r4, #8]
 8025940:	f7ff ff9c 	bl	802587c <std>
 8025944:	2202      	movs	r2, #2
 8025946:	2112      	movs	r1, #18
 8025948:	68e0      	ldr	r0, [r4, #12]
 802594a:	f7ff ff97 	bl	802587c <std>
 802594e:	2301      	movs	r3, #1
 8025950:	61a3      	str	r3, [r4, #24]
 8025952:	bd10      	pop	{r4, pc}
 8025954:	08029ee8 	.word	0x08029ee8
 8025958:	080258c5 	.word	0x080258c5

0802595c <__sfp>:
 802595c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802595e:	4b1b      	ldr	r3, [pc, #108]	; (80259cc <__sfp+0x70>)
 8025960:	681e      	ldr	r6, [r3, #0]
 8025962:	69b3      	ldr	r3, [r6, #24]
 8025964:	4607      	mov	r7, r0
 8025966:	b913      	cbnz	r3, 802596e <__sfp+0x12>
 8025968:	4630      	mov	r0, r6
 802596a:	f7ff ffc7 	bl	80258fc <__sinit>
 802596e:	3648      	adds	r6, #72	; 0x48
 8025970:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8025974:	3b01      	subs	r3, #1
 8025976:	d503      	bpl.n	8025980 <__sfp+0x24>
 8025978:	6833      	ldr	r3, [r6, #0]
 802597a:	b133      	cbz	r3, 802598a <__sfp+0x2e>
 802597c:	6836      	ldr	r6, [r6, #0]
 802597e:	e7f7      	b.n	8025970 <__sfp+0x14>
 8025980:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8025984:	b16d      	cbz	r5, 80259a2 <__sfp+0x46>
 8025986:	3468      	adds	r4, #104	; 0x68
 8025988:	e7f4      	b.n	8025974 <__sfp+0x18>
 802598a:	2104      	movs	r1, #4
 802598c:	4638      	mov	r0, r7
 802598e:	f7ff ff9f 	bl	80258d0 <__sfmoreglue>
 8025992:	6030      	str	r0, [r6, #0]
 8025994:	2800      	cmp	r0, #0
 8025996:	d1f1      	bne.n	802597c <__sfp+0x20>
 8025998:	230c      	movs	r3, #12
 802599a:	603b      	str	r3, [r7, #0]
 802599c:	4604      	mov	r4, r0
 802599e:	4620      	mov	r0, r4
 80259a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80259a2:	4b0b      	ldr	r3, [pc, #44]	; (80259d0 <__sfp+0x74>)
 80259a4:	6665      	str	r5, [r4, #100]	; 0x64
 80259a6:	e9c4 5500 	strd	r5, r5, [r4]
 80259aa:	60a5      	str	r5, [r4, #8]
 80259ac:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80259b0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80259b4:	2208      	movs	r2, #8
 80259b6:	4629      	mov	r1, r5
 80259b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80259bc:	f7ff f9bd 	bl	8024d3a <memset>
 80259c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80259c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80259c8:	e7e9      	b.n	802599e <__sfp+0x42>
 80259ca:	bf00      	nop
 80259cc:	08029ee8 	.word	0x08029ee8
 80259d0:	ffff0001 	.word	0xffff0001

080259d4 <_fwalk_reent>:
 80259d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80259d8:	4680      	mov	r8, r0
 80259da:	4689      	mov	r9, r1
 80259dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80259e0:	2600      	movs	r6, #0
 80259e2:	b914      	cbnz	r4, 80259ea <_fwalk_reent+0x16>
 80259e4:	4630      	mov	r0, r6
 80259e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80259ea:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80259ee:	3f01      	subs	r7, #1
 80259f0:	d501      	bpl.n	80259f6 <_fwalk_reent+0x22>
 80259f2:	6824      	ldr	r4, [r4, #0]
 80259f4:	e7f5      	b.n	80259e2 <_fwalk_reent+0xe>
 80259f6:	89ab      	ldrh	r3, [r5, #12]
 80259f8:	2b01      	cmp	r3, #1
 80259fa:	d907      	bls.n	8025a0c <_fwalk_reent+0x38>
 80259fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8025a00:	3301      	adds	r3, #1
 8025a02:	d003      	beq.n	8025a0c <_fwalk_reent+0x38>
 8025a04:	4629      	mov	r1, r5
 8025a06:	4640      	mov	r0, r8
 8025a08:	47c8      	blx	r9
 8025a0a:	4306      	orrs	r6, r0
 8025a0c:	3568      	adds	r5, #104	; 0x68
 8025a0e:	e7ee      	b.n	80259ee <_fwalk_reent+0x1a>

08025a10 <__swhatbuf_r>:
 8025a10:	b570      	push	{r4, r5, r6, lr}
 8025a12:	460e      	mov	r6, r1
 8025a14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025a18:	2900      	cmp	r1, #0
 8025a1a:	b096      	sub	sp, #88	; 0x58
 8025a1c:	4614      	mov	r4, r2
 8025a1e:	461d      	mov	r5, r3
 8025a20:	da07      	bge.n	8025a32 <__swhatbuf_r+0x22>
 8025a22:	2300      	movs	r3, #0
 8025a24:	602b      	str	r3, [r5, #0]
 8025a26:	89b3      	ldrh	r3, [r6, #12]
 8025a28:	061a      	lsls	r2, r3, #24
 8025a2a:	d410      	bmi.n	8025a4e <__swhatbuf_r+0x3e>
 8025a2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8025a30:	e00e      	b.n	8025a50 <__swhatbuf_r+0x40>
 8025a32:	466a      	mov	r2, sp
 8025a34:	f000 f8b8 	bl	8025ba8 <_fstat_r>
 8025a38:	2800      	cmp	r0, #0
 8025a3a:	dbf2      	blt.n	8025a22 <__swhatbuf_r+0x12>
 8025a3c:	9a01      	ldr	r2, [sp, #4]
 8025a3e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8025a42:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8025a46:	425a      	negs	r2, r3
 8025a48:	415a      	adcs	r2, r3
 8025a4a:	602a      	str	r2, [r5, #0]
 8025a4c:	e7ee      	b.n	8025a2c <__swhatbuf_r+0x1c>
 8025a4e:	2340      	movs	r3, #64	; 0x40
 8025a50:	2000      	movs	r0, #0
 8025a52:	6023      	str	r3, [r4, #0]
 8025a54:	b016      	add	sp, #88	; 0x58
 8025a56:	bd70      	pop	{r4, r5, r6, pc}

08025a58 <__smakebuf_r>:
 8025a58:	898b      	ldrh	r3, [r1, #12]
 8025a5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8025a5c:	079d      	lsls	r5, r3, #30
 8025a5e:	4606      	mov	r6, r0
 8025a60:	460c      	mov	r4, r1
 8025a62:	d507      	bpl.n	8025a74 <__smakebuf_r+0x1c>
 8025a64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8025a68:	6023      	str	r3, [r4, #0]
 8025a6a:	6123      	str	r3, [r4, #16]
 8025a6c:	2301      	movs	r3, #1
 8025a6e:	6163      	str	r3, [r4, #20]
 8025a70:	b002      	add	sp, #8
 8025a72:	bd70      	pop	{r4, r5, r6, pc}
 8025a74:	ab01      	add	r3, sp, #4
 8025a76:	466a      	mov	r2, sp
 8025a78:	f7ff ffca 	bl	8025a10 <__swhatbuf_r>
 8025a7c:	9900      	ldr	r1, [sp, #0]
 8025a7e:	4605      	mov	r5, r0
 8025a80:	4630      	mov	r0, r6
 8025a82:	f7ff f9b1 	bl	8024de8 <_malloc_r>
 8025a86:	b948      	cbnz	r0, 8025a9c <__smakebuf_r+0x44>
 8025a88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025a8c:	059a      	lsls	r2, r3, #22
 8025a8e:	d4ef      	bmi.n	8025a70 <__smakebuf_r+0x18>
 8025a90:	f023 0303 	bic.w	r3, r3, #3
 8025a94:	f043 0302 	orr.w	r3, r3, #2
 8025a98:	81a3      	strh	r3, [r4, #12]
 8025a9a:	e7e3      	b.n	8025a64 <__smakebuf_r+0xc>
 8025a9c:	4b0d      	ldr	r3, [pc, #52]	; (8025ad4 <__smakebuf_r+0x7c>)
 8025a9e:	62b3      	str	r3, [r6, #40]	; 0x28
 8025aa0:	89a3      	ldrh	r3, [r4, #12]
 8025aa2:	6020      	str	r0, [r4, #0]
 8025aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8025aa8:	81a3      	strh	r3, [r4, #12]
 8025aaa:	9b00      	ldr	r3, [sp, #0]
 8025aac:	6163      	str	r3, [r4, #20]
 8025aae:	9b01      	ldr	r3, [sp, #4]
 8025ab0:	6120      	str	r0, [r4, #16]
 8025ab2:	b15b      	cbz	r3, 8025acc <__smakebuf_r+0x74>
 8025ab4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025ab8:	4630      	mov	r0, r6
 8025aba:	f000 f887 	bl	8025bcc <_isatty_r>
 8025abe:	b128      	cbz	r0, 8025acc <__smakebuf_r+0x74>
 8025ac0:	89a3      	ldrh	r3, [r4, #12]
 8025ac2:	f023 0303 	bic.w	r3, r3, #3
 8025ac6:	f043 0301 	orr.w	r3, r3, #1
 8025aca:	81a3      	strh	r3, [r4, #12]
 8025acc:	89a3      	ldrh	r3, [r4, #12]
 8025ace:	431d      	orrs	r5, r3
 8025ad0:	81a5      	strh	r5, [r4, #12]
 8025ad2:	e7cd      	b.n	8025a70 <__smakebuf_r+0x18>
 8025ad4:	080258c5 	.word	0x080258c5

08025ad8 <__malloc_lock>:
 8025ad8:	4770      	bx	lr

08025ada <__malloc_unlock>:
 8025ada:	4770      	bx	lr

08025adc <__sread>:
 8025adc:	b510      	push	{r4, lr}
 8025ade:	460c      	mov	r4, r1
 8025ae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025ae4:	f000 f894 	bl	8025c10 <_read_r>
 8025ae8:	2800      	cmp	r0, #0
 8025aea:	bfab      	itete	ge
 8025aec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8025aee:	89a3      	ldrhlt	r3, [r4, #12]
 8025af0:	181b      	addge	r3, r3, r0
 8025af2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8025af6:	bfac      	ite	ge
 8025af8:	6563      	strge	r3, [r4, #84]	; 0x54
 8025afa:	81a3      	strhlt	r3, [r4, #12]
 8025afc:	bd10      	pop	{r4, pc}

08025afe <__swrite>:
 8025afe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025b02:	461f      	mov	r7, r3
 8025b04:	898b      	ldrh	r3, [r1, #12]
 8025b06:	05db      	lsls	r3, r3, #23
 8025b08:	4605      	mov	r5, r0
 8025b0a:	460c      	mov	r4, r1
 8025b0c:	4616      	mov	r6, r2
 8025b0e:	d505      	bpl.n	8025b1c <__swrite+0x1e>
 8025b10:	2302      	movs	r3, #2
 8025b12:	2200      	movs	r2, #0
 8025b14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025b18:	f000 f868 	bl	8025bec <_lseek_r>
 8025b1c:	89a3      	ldrh	r3, [r4, #12]
 8025b1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025b22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8025b26:	81a3      	strh	r3, [r4, #12]
 8025b28:	4632      	mov	r2, r6
 8025b2a:	463b      	mov	r3, r7
 8025b2c:	4628      	mov	r0, r5
 8025b2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025b32:	f000 b817 	b.w	8025b64 <_write_r>

08025b36 <__sseek>:
 8025b36:	b510      	push	{r4, lr}
 8025b38:	460c      	mov	r4, r1
 8025b3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025b3e:	f000 f855 	bl	8025bec <_lseek_r>
 8025b42:	1c43      	adds	r3, r0, #1
 8025b44:	89a3      	ldrh	r3, [r4, #12]
 8025b46:	bf15      	itete	ne
 8025b48:	6560      	strne	r0, [r4, #84]	; 0x54
 8025b4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8025b4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8025b52:	81a3      	strheq	r3, [r4, #12]
 8025b54:	bf18      	it	ne
 8025b56:	81a3      	strhne	r3, [r4, #12]
 8025b58:	bd10      	pop	{r4, pc}

08025b5a <__sclose>:
 8025b5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025b5e:	f000 b813 	b.w	8025b88 <_close_r>
	...

08025b64 <_write_r>:
 8025b64:	b538      	push	{r3, r4, r5, lr}
 8025b66:	4c07      	ldr	r4, [pc, #28]	; (8025b84 <_write_r+0x20>)
 8025b68:	4605      	mov	r5, r0
 8025b6a:	4608      	mov	r0, r1
 8025b6c:	4611      	mov	r1, r2
 8025b6e:	2200      	movs	r2, #0
 8025b70:	6022      	str	r2, [r4, #0]
 8025b72:	461a      	mov	r2, r3
 8025b74:	f7dd fedf 	bl	8003936 <_write>
 8025b78:	1c43      	adds	r3, r0, #1
 8025b7a:	d102      	bne.n	8025b82 <_write_r+0x1e>
 8025b7c:	6823      	ldr	r3, [r4, #0]
 8025b7e:	b103      	cbz	r3, 8025b82 <_write_r+0x1e>
 8025b80:	602b      	str	r3, [r5, #0]
 8025b82:	bd38      	pop	{r3, r4, r5, pc}
 8025b84:	2000cb3c 	.word	0x2000cb3c

08025b88 <_close_r>:
 8025b88:	b538      	push	{r3, r4, r5, lr}
 8025b8a:	4c06      	ldr	r4, [pc, #24]	; (8025ba4 <_close_r+0x1c>)
 8025b8c:	2300      	movs	r3, #0
 8025b8e:	4605      	mov	r5, r0
 8025b90:	4608      	mov	r0, r1
 8025b92:	6023      	str	r3, [r4, #0]
 8025b94:	f7dd feeb 	bl	800396e <_close>
 8025b98:	1c43      	adds	r3, r0, #1
 8025b9a:	d102      	bne.n	8025ba2 <_close_r+0x1a>
 8025b9c:	6823      	ldr	r3, [r4, #0]
 8025b9e:	b103      	cbz	r3, 8025ba2 <_close_r+0x1a>
 8025ba0:	602b      	str	r3, [r5, #0]
 8025ba2:	bd38      	pop	{r3, r4, r5, pc}
 8025ba4:	2000cb3c 	.word	0x2000cb3c

08025ba8 <_fstat_r>:
 8025ba8:	b538      	push	{r3, r4, r5, lr}
 8025baa:	4c07      	ldr	r4, [pc, #28]	; (8025bc8 <_fstat_r+0x20>)
 8025bac:	2300      	movs	r3, #0
 8025bae:	4605      	mov	r5, r0
 8025bb0:	4608      	mov	r0, r1
 8025bb2:	4611      	mov	r1, r2
 8025bb4:	6023      	str	r3, [r4, #0]
 8025bb6:	f7dd fee6 	bl	8003986 <_fstat>
 8025bba:	1c43      	adds	r3, r0, #1
 8025bbc:	d102      	bne.n	8025bc4 <_fstat_r+0x1c>
 8025bbe:	6823      	ldr	r3, [r4, #0]
 8025bc0:	b103      	cbz	r3, 8025bc4 <_fstat_r+0x1c>
 8025bc2:	602b      	str	r3, [r5, #0]
 8025bc4:	bd38      	pop	{r3, r4, r5, pc}
 8025bc6:	bf00      	nop
 8025bc8:	2000cb3c 	.word	0x2000cb3c

08025bcc <_isatty_r>:
 8025bcc:	b538      	push	{r3, r4, r5, lr}
 8025bce:	4c06      	ldr	r4, [pc, #24]	; (8025be8 <_isatty_r+0x1c>)
 8025bd0:	2300      	movs	r3, #0
 8025bd2:	4605      	mov	r5, r0
 8025bd4:	4608      	mov	r0, r1
 8025bd6:	6023      	str	r3, [r4, #0]
 8025bd8:	f7dd fee5 	bl	80039a6 <_isatty>
 8025bdc:	1c43      	adds	r3, r0, #1
 8025bde:	d102      	bne.n	8025be6 <_isatty_r+0x1a>
 8025be0:	6823      	ldr	r3, [r4, #0]
 8025be2:	b103      	cbz	r3, 8025be6 <_isatty_r+0x1a>
 8025be4:	602b      	str	r3, [r5, #0]
 8025be6:	bd38      	pop	{r3, r4, r5, pc}
 8025be8:	2000cb3c 	.word	0x2000cb3c

08025bec <_lseek_r>:
 8025bec:	b538      	push	{r3, r4, r5, lr}
 8025bee:	4c07      	ldr	r4, [pc, #28]	; (8025c0c <_lseek_r+0x20>)
 8025bf0:	4605      	mov	r5, r0
 8025bf2:	4608      	mov	r0, r1
 8025bf4:	4611      	mov	r1, r2
 8025bf6:	2200      	movs	r2, #0
 8025bf8:	6022      	str	r2, [r4, #0]
 8025bfa:	461a      	mov	r2, r3
 8025bfc:	f7dd fede 	bl	80039bc <_lseek>
 8025c00:	1c43      	adds	r3, r0, #1
 8025c02:	d102      	bne.n	8025c0a <_lseek_r+0x1e>
 8025c04:	6823      	ldr	r3, [r4, #0]
 8025c06:	b103      	cbz	r3, 8025c0a <_lseek_r+0x1e>
 8025c08:	602b      	str	r3, [r5, #0]
 8025c0a:	bd38      	pop	{r3, r4, r5, pc}
 8025c0c:	2000cb3c 	.word	0x2000cb3c

08025c10 <_read_r>:
 8025c10:	b538      	push	{r3, r4, r5, lr}
 8025c12:	4c07      	ldr	r4, [pc, #28]	; (8025c30 <_read_r+0x20>)
 8025c14:	4605      	mov	r5, r0
 8025c16:	4608      	mov	r0, r1
 8025c18:	4611      	mov	r1, r2
 8025c1a:	2200      	movs	r2, #0
 8025c1c:	6022      	str	r2, [r4, #0]
 8025c1e:	461a      	mov	r2, r3
 8025c20:	f7dd fe6c 	bl	80038fc <_read>
 8025c24:	1c43      	adds	r3, r0, #1
 8025c26:	d102      	bne.n	8025c2e <_read_r+0x1e>
 8025c28:	6823      	ldr	r3, [r4, #0]
 8025c2a:	b103      	cbz	r3, 8025c2e <_read_r+0x1e>
 8025c2c:	602b      	str	r3, [r5, #0]
 8025c2e:	bd38      	pop	{r3, r4, r5, pc}
 8025c30:	2000cb3c 	.word	0x2000cb3c

08025c34 <_init>:
 8025c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025c36:	bf00      	nop
 8025c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025c3a:	bc08      	pop	{r3}
 8025c3c:	469e      	mov	lr, r3
 8025c3e:	4770      	bx	lr

08025c40 <_fini>:
 8025c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025c42:	bf00      	nop
 8025c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025c46:	bc08      	pop	{r3}
 8025c48:	469e      	mov	lr, r3
 8025c4a:	4770      	bx	lr
